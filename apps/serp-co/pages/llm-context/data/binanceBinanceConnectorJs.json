[
  {
    "owner": "binance",
    "repo": "binance-connector-js",
    "content": "TITLE: Configuring WebSocket Pool for Binance Connector (TypeScript)\nDESCRIPTION: This snippet shows how to import the required classes from the @binance/spot library and set up a WebSocket streams configuration using pool mode. It specifies the WebSocket endpoint URL and a pool size for concurrent connections. The Spot client is initialized with the configuration, and the connect() method is used to establish connections, handling results or errors with promises. Dependencies include the @binance/spot package, and configurable parameters such as wsURL and poolSize. The snippet expects a valid Binance endpoint and outputs a connection object or logs errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Connecting and Using Binance Spot WebSocket API (TypeScript)\nDESCRIPTION: This TypeScript example illustrates how to use the WebSocket API provided by the library. It imports `Spot` and `SpotWebsocketAPI`, configures the WebSocket client with API credentials, establishes a connection using `connect()`, and then sends an `exchangeInfo` request over the established WebSocket connection for the 'BNBUSDT' symbol. The response data is logged, and errors are handled.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketAPI } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Node.js https.Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create a custom Node.js `https.Agent` to implement certificate pinning. It involves loading an optional trusted CA certificate, defining a pinned public key hash (SPKI SHA-256), and implementing the `checkServerIdentity` function. This function verifies the server certificate's Subject Alternative Name (SAN) and compares its public key hash against the predefined pinned hash. The custom agent is then used to configure the `@binance/fiat` client, ensuring secure communication by preventing man-in-the-middle attacks. An example API call using the secured client is included.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Spot Client (New Modular Method - TypeScript)\nDESCRIPTION: This code shows the new way to initialize the `Spot` client using the modular `@binance/spot` package. It involves creating a separate configuration object (`configurationRestAPI`) for the REST API client and passing it to the `Spot` constructor. Note the use of `client.restAPI.exchangeInfo()` to access the REST API methods.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI.exchangeInfo().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with Binance Spot API TypeScript Client\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Spot REST API client from '@binance/spot', requesting account information, and handling a variety of error types using exception classes like ConnectorClientError, UnauthorizedError, RateLimitBanError, and others. Dependencies include the '@binance/spot' library (with the Spot and error classes) and valid API credentials. The key input parameters are apiKey and apiSecret, with outputs handled via console logging, and error handling is done by specifically matching error instances to give precise feedback. This robust error handling pattern is ideal for applications requiring reliability when calling financial APIs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Spot,\n    SpotRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Binance NFT REST API Client in TypeScript\nDESCRIPTION: This TypeScript code imports the NFT client and API types, initializes the client with API credentials, and retrieves NFT asset data asynchronously. Dependencies include the @binance/nft package; required parameters are the apiKey and apiSecret inside configurationRestAPI, which must be your Binance API keys. Input is not required at runtime (other than placing your credentials), and the output is logged NFT asset data or error information. Ensure correct API key/secret permissions and handle authentication securely.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new NFT({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getNFTAsset()\\n    .then((res) => res.data())\\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Derivatives Trading USDS Futures in TypeScript\nDESCRIPTION: This code demonstrates how to set up a DerivativesTradingUsdsFutures client and handle various types of errors that may occur during API requests. It includes error handling for client errors, missing parameters, authentication issues, rate limiting, server errors, and network problems.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DerivativesTradingUsdsFutures,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This code demonstrates how to set up error handling for the Binance Derivatives Trading Portfolio Margin API. It imports various error types, configures the API client, and uses a try-catch block to handle different error scenarios when making API requests.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DerivativesTradingPortfolioMargin,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Agent with Certificate Pinning in TypeScript\nDESCRIPTION: Implements a secure WebSocket connection using TLS with certificate pinning, SAN verification, and trusted CA certificates. Sets up a connection to Binance's derivatives trading API with proper authentication and security measures.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"your-websocket-server.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    agent,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Enabling Certificate Pinning with Binance Spot API Client in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to securely connect to the Binance Spot API using certificate pinning. It sets up a custom HTTPS agent that loads a trusted CA certificate, checks that the server's certificate Subject Alternative Name (SAN) matches an expected value, and validates the public key against a pinned SHA-256 hash. The agent is passed into the Binance Connector Spot API client, which is then used to query account information. Dependencies include the 'fs', 'https', and 'crypto' Node.js modules and the '@binance/spot' package, with required parameters such as valid API credentials, the path to the certificate file, and the expected public key hash. This approach is intended to enhance security by preventing man-in-the-middle attacks and ensuring connections are established only with trusted servers.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Client and Calling REST API (TypeScript)\nDESCRIPTION: Provides a basic TypeScript example demonstrating how to import the `Wallet` and `WalletRestAPI` classes, configure the client with API credentials (API key and secret), and make an asynchronous call to the `accountInfo` REST API endpoint. The response data is logged to the console upon success, or errors are caught and logged.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Spot REST API Client for Testnet (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure the `Spot` client to interact with the Binance Spot Testnet environment. It involves importing the `SPOT_REST_API_TESTNET_URL` constant and setting it as the `basePath` in the configuration object. This allows developers to test API interactions without using real funds or affecting their live account.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI, SPOT_REST_API_TESTNET_URL } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    basePath: SPOT_REST_API_TESTNET_URL,\n};\nconst client = new Spot({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Errors in Binance Staking API Calls (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates comprehensive error handling for the `claimBoostRewards` method of the Binance Staking REST API client (`@binance/staking`). It imports necessary error classes and the client, configures the client with API credentials, makes an API call, and uses a `.catch()` block with `instanceof` checks to differentiate between various potential errors (client-side, authentication, rate limits, server-side, network, etc.), logging specific messages for each. Dependencies include the `@binance/staking` library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Staking,\n    StakingRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError,\n    NotFoundError,\n    BadRequestError\n} from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Spot Connector (TypeScript)\nDESCRIPTION: This snippet shows how to set up a Binance Spot REST API client with custom proxy settings in TypeScript. It demonstrates initializing the client with API credentials, specifying proxy details (host, port, protocol, and authentication), and using the client to retrieve account information. Prerequisites include the @binance/spot library; you must provide valid API credentials and proxy server information. The main output is the account details fetched via the restAPI.getAccount() call, and errors are handled via a catch block.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    proxy: {\\n        host: '127.0.0.1',\\n        port: 8080,\\n        protocol: 'http', // or 'https'\\n        auth: {\\n            username: 'proxy-user',\\n            password: 'proxy-password',\\n        },\\n    },\\n};\\nconst client = new Spot({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getAccount()\\n    .then((res) => res.data())\\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Certificate Pinning in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure a custom `https.Agent` for HTTPS requests to implement certificate pinning. It reads an optional trusted CA certificate, defines a `checkServerIdentity` function to validate the server certificate's SAN and public key hash against a predefined pinned value (SPKI SHA-256 hash), and initializes the `@binance/gift-card` client with this secure agent. This enhances security by ensuring the application only connects to servers with the expected certificate. Requires `fs`, `https`, `crypto`, and `@binance/gift-card` modules, as well as a predefined `PINNED_PUBLIC_KEY` and API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Convert API in TypeScript\nDESCRIPTION: Example showing how to implement error handling for the Binance Convert API client. It demonstrates handling of various error types including client errors, authentication errors, rate limiting, server errors, and network issues. The code includes configuration setup and API call with comprehensive error catching.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    Convert, \n    ConvertRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance VIP Loan Connector in TypeScript\nDESCRIPTION: This snippet secures REST API calls to Binance's VIP Loan service by enabling certificate pinning in a Node.js environment using TypeScript. It loads a trusted CA certificate, validates the server's subject alternative name, hashes and compares the server public key against a pinned value, and integrates an https.Agent with the Binance VIPLoan client. Dependencies required include Node.js built-in modules ('fs', 'https', 'crypto') and the '@binance/vip-loan' library. Key parameters include the path to the trusted certificate, the expected public key hash for pinning, and the API credentials. Input consists of API keys and certificate files, and output is either the API call result or an error due to certificate validation, with the constraint that only servers matching the exact public key and SAN will be trusted.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \\\"expected-cn.com\\\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet Websocket API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the `DerivativesTradingUsdsFutures` client to connect to the Binance Testnet Websocket API. It involves importing necessary components, setting the API key, API secret, and specifying the Testnet Websocket API URL (`DERIVATIVES_TRADING_USDS_FUTURES_WS_API_TESTNET_URL`) in the configuration object.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_API_TESTNET_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n```\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Binance Rebate Connector - TypeScript\nDESCRIPTION: This snippet shows how to initialize a Binance Rebate API client using configuration credentials and demonstrates advanced error handling by categorizing exceptions from the Connector SDK. Required dependencies include the @binance/rebate package and valid API credentials. The core function queries spot rebate history records, logging successful data or providing contextual error messages based on exception type. Inputs are API credentials, and outputs are either API response data or structured error logs. This implementation is tailored for asynchronous TypeScript applications and is limited to error types supported by the SDK.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Rebate,\n    RebateRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Fetching Pay Trade History in Binance Pay SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates configuring the Binance Pay JavaScript SDK to use a proxy server for REST API communication in a TypeScript application. It sets proxy authentication, API credentials, and initializes the SDK client, then retrieves the trade history using the REST API. Requires the '@binance/pay' npm package, API key/secret, and correct proxy server credentials. The key parameters are the proxy configuration object and authentication info. Returns the pay trade history or logs errors; suitable for environments where outbound network traffic is restricted via a proxy.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Connector JS in TypeScript\nDESCRIPTION: This snippet demonstrates how to import error types, configure the client, make an API call, and handle various error scenarios when using the Binance Connector JS library. It covers client errors, authentication issues, rate limiting, server errors, and network problems.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DerivativesTradingPortfolioMarginPro,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Catching and Handling Specific Binance Pay API Errors in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to handle specific errors when using the @binance/pay library. It imports various error classes (ConnectorClientError, RequiredError, UnauthorizedError, etc.), initializes the Pay client with API credentials, attempts to fetch pay trade history using `getPayTradeHistory()`, and includes a `.catch` block. Inside the catch block, it uses `instanceof` checks to identify the type of error thrown and logs a specific message to the console for each error type, providing guidance on potential causes like invalid parameters, missing credentials, rate limits, or network problems.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Pay,\n    PayRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning for Binance API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up certificate pinning for secure communication with the Binance API using TypeScript. It includes creating a custom HTTPS agent, verifying the server's certificate, and making an API request using the Binance Connector JS library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Derivatives Trading Options Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the @binance/derivatives-trading-options client in TypeScript with a REST API configuration that includes proxy settings. Dependencies include the @binance/derivatives-trading-options library. Key parameters are the API key, secret, proxy host, port, protocol, and authentication. The code shows how to make an authenticated API request to retrieve account information and handle the result. Expected inputs include valid Binance API credentials and correct proxy settings; the output is the option account information fetched from the API, and errors are logged to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    proxy: {\\n        host: '127.0.0.1',\\n        port: 8080,\\n        protocol: 'http', // or 'https'\\n        auth: {\\n            username: 'proxy-user',\\n            password: 'proxy-password',\\n        },\\n    },\\n};\\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\\n\\nclient.restAPI\\n    .optionAccountInformation()\\n    .then((res) => res.data())\\n    .then((data) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Consistent Error Handling with Binance Error Classes - TypeScript\nDESCRIPTION: This code demonstrates structured error handling by importing specific error classes from @binance/types. The try-catch block detects and logs different error scenarios, such as client errors and unauthorized errors, by checking the instance type of thrown errors. Dependencies include the ConnectorClientError and UnauthorizedError from the package; expected inputs are thrown error objects, and outputs are console log messages for each error case.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/types/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectorClientError, UnauthorizedError } from '@binance/types';\n\ntry {\n    // Some API call\n} catch (err) {\n    if (err instanceof ConnectorClientError) {\n        console.error('Client error occurred:', err);\n    } else if (err instanceof UnauthorizedError) {\n        console.error('Invalid API credentials:', err);\n    } else {\n        console.error('Unexpected error:', err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Spot Client with WebSocket Pool Mode (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure and initialize the Binance Spot client for WebSocket API interactions using a connection pool. It imports required modules from '@binance/spot', sets up configuration including API keys (placeholders), WebSocket URL, connection mode ('pool'), and pool size. It then creates the client, connects to the WebSocket API, requests exchange information for 'BNBUSDT', and logs the response or any errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Streams Testnet Environment in TypeScript\nDESCRIPTION: Sets up a Binance Spot client with WebSocket Streams pointed to the testnet environment for development and testing. This configuration uses the predefined testnet URL constant for streams.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_TESTNET_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_TESTNET_URL,\n};\nconst client = new Spot({ configurationWebsocketStreams });\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Proxy with Binance NFT Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the `NFT` client from `@binance/nft` with specific proxy configurations. It includes setting the proxy host, port, protocol, and optional authentication credentials (username, password). After initialization, it makes a sample API call (`getNFTAsset`) through the configured proxy and logs the response or any errors. Requires the `@binance/nft` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Margin Trading Client with Timeout (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `MarginTrading` client from the `@binance/margin-trading` library. It configures the client with an API key, API secret, and a custom request timeout of 5000 milliseconds within the `configurationRestAPI` object. Subsequently, it uses the initialized `client.restAPI` to call the `getSummaryOfMarginAccount()` method and includes basic error handling using `.catch()` to log potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI.getSummaryOfMarginAccount().catch((error) => console.error(error));\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Binance Spot REST API Client (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to import the `Spot` client and `SpotRestAPI` types, configure the REST API client with an API key and secret, instantiate the client, and make a call to the `exchangeInfo` endpoint for the 'BNBUSDT' symbol. The response data is logged to the console, and any errors are caught and logged.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInfo({ symbol: 'BNBUSDT' })\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.ExchangeInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Handling REST API Errors in Binance Connector (TypeScript)\nDESCRIPTION: This code demonstrates how to perform a getFiatDepositWithdrawHistory request with the Binance fiat API via binance-connector-js, alongside comprehensive error handling for all major client, authentication, quota, server, and network-related exceptions. It requires the @binance/fiat npm package and valid API credentials. The code accepts transaction type as a parameter, calls the API, prints the result on success, and logs precise error messages based on the type of exception thrown. Inputs include API credentials and transaction type; outputs are deposit/withdrawal history or descriptive error logs. Limitations include reliance on correct API key/secret configuration and complete coverage for the listed custom error types.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    Fiat, \n    FiatRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Binance Convert API using Key Pair in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate with the Binance Convert API using key-pair authentication. It initializes the Convert client with API key, private key (either as content or file path), and optional passphrase for encrypted keys, then makes a request to list all available convert pairs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Connector JS\nDESCRIPTION: This snippet demonstrates how to set up certificate pinning for secure API calls to Binance. It creates a custom HTTPS agent that verifies the server's certificate by checking the Subject Alternative Name (SAN) and comparing the public key hash against a pinned value. The example includes loading a trusted CA certificate and making a C2C trade history API call using the secure connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Agent for Binance Derivatives Trading in TypeScript\nDESCRIPTION: This snippet sets up a TLS agent with certificate pinning and server identity verification. It then uses this agent to create a secure WebSocket connection to Binance's derivatives trading options API. The code includes error handling for certificate mismatches and pinning validation failures.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/websocket-streams/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"your-websocket-server.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n    agent,\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Binance Wallet via Key Pair - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to connect to the Binance REST API using key pair based authentication. It requires the '@binance/wallet' library for Wallet and WalletRestAPI types, as well as Node's 'fs' module for potential file operations. The snippet sets up the authentication configuration with an API key, a private key (as a string or file path), and an optional passphrase, then creates a Wallet client, and performs an asynchronous request to obtain account information. The method outputs account details or logs errors to the console. Appropriate credentials are prerequisites, and the private key may be encrypted, requiring a passphrase. Inputs include API credentials and outputs are account data responses or error messages.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning for Secure API Connections in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up certificate pinning for HTTPS connections in TypeScript. It includes loading a trusted CA certificate, verifying the server's public key against a pinned value, and checking the Subject Alternative Name. The secure connection is then used with the Binance Algo client to make API calls.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Using Websocket API in Binance Derivatives Trading USDS-M Futures\nDESCRIPTION: Example of how to use the Websocket API to fetch position information. It demonstrates creating a client instance, connecting to the Websocket API, and making a request.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) => connection.positionInformation())\n    .then((res) => console.log(res.data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a proxy configuration for the Binance Derivatives Trading API client. It initializes a client with API credentials and proxy settings, then makes a sample API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Connecting and Subscribing to Websocket Streams in TypeScript\nDESCRIPTION: This snippet shows how to connect to Binance Websocket Streams using the `DerivativesTradingUsdsFutures` client and subscribe to the `allBookTickersStream`. It configures the client with the production streams URL, establishes a connection, subscribes to the stream, and logs incoming data messages. Basic error handling for the connection is included.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring and Connecting Binance SimpleEarn SDK via Proxy in TypeScript\nDESCRIPTION: This snippet shows how to initialize the Binance SimpleEarn SDK with proxy settings in a TypeScript application. It imports necessary types and classes from the '@binance/simple-earn' package and constructs a configuration object with API credentials and detailed proxy parameters, including optional authentication. The SDK client is created with these proxy settings, after which the REST API is called to fetch the list of flexible products; results are logged to the console. Required dependencies include the '@binance/simple-earn' package and TypeScript setup. Inputs needed are your API key/secret, proxy connection details, and credentials if authentication is needed. Outputs include product list data fetched from Binance or error details if the request fails.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a DerivativesTradingUsdsFutures client with custom retry settings. It configures the client to retry API calls up to 5 times with a 2-second delay between retries, then makes a call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Binance Sub-Account via TypeScript\nDESCRIPTION: This snippet provides an end-to-end example of connecting to the Binance SubAccount API using key pair-based authentication in TypeScript. Required dependencies include the '@binance/sub-account' library and 'fs' for file handling. The key parameters are the API key, private key (provided directly as a string or via file path), and an optional passphrase if the key is encrypted. The snippet initializes a SubAccount client with these credentials, makes an authenticated request to fetch sub-account margin summaries, and handles API responses and errors. Expected outputs are fetched margin account summaries logged to the console, while errors are captured and reported. The snippet assumes access to valid Binance API credentials and proper file permissions if reading a private key from disk.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Crypto Loan API in TypeScript\nDESCRIPTION: This code demonstrates a secure connection to Binance's API using certificate pinning. It verifies the server's public key hash and certificate SAN before making API requests, preventing man-in-the-middle attacks. The implementation uses Node.js built-in modules and the Binance Crypto Loan API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Unit and Fetching Exchange Info with Binance Connector (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Spot API client with a specific time unit (microseconds) using the binance-connector-js library. It shows creating the client configuration with API credentials and a custom time unit, then making an API call to fetch exchange information for a symbol. To run, install '@binance/spot', set valid API key/secret, and note that time unit is set through 'TimeUnit.MICROSECOND'. The 'exchangeInfo' call accepts a symbol parameter ('BNBUSDT') and logs the resulting response.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/time-unit.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI, TimeUnit } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeUnit: TimeUnit.MICROSECOND, // Set time unit to microseconds\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInfo({ symbol: 'BNBUSDT' })\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.ExchangeInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Binance Spot API Client in TypeScript\nDESCRIPTION: This snippet demonstrates configuring an HTTPS agent with 'rejectUnauthorized' set to true and integrating it with the Binance Spot REST API client in TypeScript. It requires the '@binance/spot' npm package and Node.js built-in 'https' module. The code sets up API credentials, configures the client with the custom HTTPS agent, and performs an authenticated 'getAccount' API request, logging the resulting account data or any errors. Ensure you provide your own 'apiKey' and 'apiSecret'; responses depend on valid Binance credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent with Certificate Pinning in Binance Connector (TypeScript)\nDESCRIPTION: This snippet sets up a secure WebSocket client for the Binance Spot API by configuring Node.js TLS certificate pinning and custom CA verification in TypeScript. It uses standard libraries ('fs', 'tls', and 'crypto') to load a pinned public key and a specific CA certificate, and the '@binance/spot' package for API connectivity. The tls.Agent is customized with explicit hostname verification and SHA-256 based public key pinning; failure in either check throws an error. The resulting Spot client connects to the Binance WebSocket API and demonstrates an exchangeInfo query. Required dependencies: 'fs', 'tls', 'crypto', and '@binance/spot'. Key parameters include paths for PEM certificate, your API key/secret, and the pinned SPKI public key hash. Requires Node.js environment with proper file permissions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \\\"your-websocket-server.com\\\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    agent,\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Using REST API in Binance Derivatives Trading USDS-M Futures\nDESCRIPTION: Example of how to use the REST API to fetch exchange information. It demonstrates creating a client instance with API credentials and making a request.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Fetching Spot Rebate History with Binance Connector (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up the Binance connector REST API client in TypeScript with proxy configuration. Required dependencies are '@binance/rebate', and the configuration object includes API credentials and proxy server details (host, port, protocol, and optional authentication). The key method 'getSpotRebateHistoryRecords' fetches the user's spot rebate history, returning a typed response. All requests are routed through the specified authenticated proxy. Inputs include user API keys and proxy credentials; output is the response data from the Binance API, logged to the console. The snippet assumes a Node.js environment with network access.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance C2C API in TypeScript\nDESCRIPTION: This code demonstrates how to set up a Binance C2C client, make an API call to get trade history, and handle various error types. It covers client errors, authentication issues, rate limiting, server errors, and network problems.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    C2C,\n    C2CRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using REST API with Binance Derivatives Trading COIN-M Futures\nDESCRIPTION: Demonstrates how to use the REST API module to make requests to Binance's API endpoints. This example shows how to fetch exchange information using API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout in Binance Spot API Client - TypeScript\nDESCRIPTION: This code snippet initializes the Binance Spot API client with API credentials and a custom timeout of 5000 milliseconds using the binance-connector-js package in TypeScript. It demonstrates configuring the client, creating an instance, and making a REST API call to retrieve account information, including basic error handling via a catch block. Dependencies include the '@binance/spot' package, and users must supply valid 'apiKey' and 'apiSecret'; the timeout parameter controls the maximum duration the client waits for responses before failing.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI.getAccount().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Binance Mining API Using Key Pair (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure and instantiate the Binance Mining API client with key pair-based authentication in TypeScript. It requires the '@binance/mining' library and optionally Node.js's 'fs' module for reading private key files. Key parameters include 'apiKey' (your Binance API public key), 'privateKey' (either the PEM content as a string or a file path), and an optional 'privateKeyPassphrase' for encrypted keys. The example then makes an authenticated 'acquiringAlgorithm' API request and handles responses or errors using Promises. Input should include valid credentials, and the output is a printed API response or error; ensure that the provided private key is secure and accessible.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning for Binance API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up certificate pinning for secure communication with the Binance API. It includes loading a trusted CA certificate, verifying the Subject Alternative Name (SAN), and validating the public key hash. The code then uses this secure connection to make an API call to get the portfolio margin pro account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Sub Account REST API Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the SubAccount and SubAccountRestAPI classes, configure API authentication, instantiate the client, and call the getSummaryOfSubAccountsMarginAccount() REST API method. It requires the @binance/sub-account library to be installed and a valid Binance API key/secret. The response is handled asynchronously using promises, with success logging data and errors handled via catch.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new SubAccount({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSummaryOfSubAccountsMarginAccount()\\n    .then((res) => res.data())\\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\\n        console.log(data)\\n    )\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Derivatives WebSocket API Authentication in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure and initialize a Binance Derivatives Trading USDS Futures WebSocket API client in TypeScript with a private key and (optionally) a passphrase. It defines authentication parameters, sets up the API client, establishes a WebSocket connection, and fetches position information asynchronously. Dependencies include the \\'@binance/derivatives-trading-usds-futures\\' package, Node.js, TypeScript, and (optionally) a valid private key file. The variables \\'privateKey\\' and \\'privateKeyPassphrase\\' must be securely provided. Input is authentication data; output is fetched account position information or error details.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Binance Margin Trading API With Key Pair in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a connection to the Binance Margin Trading API using an API key and a private key, supporting both direct private key strings and paths to key files. It showcases setup of the credential configuration object and instantiation of a MarginTrading client from the '@binance/margin-trading' package, followed by making an asynchronous request to get margin account summary information. Requires Node.js, 'fs', and '@binance/margin-trading' package. Parameters include the API key, private key, and optional passphrase. Output will be the account summary data logged to the console; errors are caught and reported. Limitations: assumes correct credential paths and does not handle interactive passphrase input.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Spot API Calls in TypeScript\nDESCRIPTION: This snippet demonstrates setting up a Binance Spot API client with customized retry and backoff parameters using the binance-connector-js TypeScript SDK. It configures the client for up to 5 automatic retries with a 2-second interval between attempts, and then retrieves account information while handling both successful and error responses. Dependencies include the '@binance/spot' package, and users must supply their API key and secret. Inputs include the retry configuration and credentials, while outputs are logged account data or error details. Ensure API keys are protected and do not commit them to version control.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Binance Crypto Loan API in TypeScript\nDESCRIPTION: This code demonstrates how to handle various error types when interacting with the Binance Crypto Loan API. It includes client configuration, making an API request, and catching specific error types for proper error handling and logging.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    CryptoLoan, \n    CryptoLoanRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Binance Staking REST API Client (TypeScript)\nDESCRIPTION: Example demonstrating how to import the `Staking` client, configure it with API credentials (apiKey and apiSecret), create a client instance, and make an authenticated API call (`claimBoostRewards`). The response data is logged to the console, and potential errors are caught and logged. Requires the `@binance/staking` package installed and valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading USDS Futures Client with Timeout in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Derivatives Trading USDS Futures client with a custom timeout setting. It initializes the client with API credentials and a 5-second timeout, then makes a request to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI.exchangeInformation().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Fetching Spot Rebate History with Binance Connector (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates key pair-based authentication for the Binance Rebate API. It imports required modules and credentials, constructs a configuration for authentication, instantiates the API client, and fetches spot rebate history records. Required dependencies include '@binance/rebate' and 'fs'; the private key can be supplied as a direct string or a file path. Main parameters are the API key, private key, and optional passphrase. The code outputs retrieved data to the console and logs errors, and expects valid credentials and access to the specified private key file if given.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Agent with Certificate Pinning in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a custom TLS agent for Binance USDS Futures WebSocket connections in Node.js using TypeScript. It reads a trusted CA from disk, enforces certificate pinning using a SHA-256 hash of the server public key, and validates the Subject Alternative Name (SAN) field. Dependencies include the 'fs', 'tls', 'crypto' Node.js modules and '@binance/derivatives-trading-usds-futures'. The agent is passed to the trading client, which establishes a secure WebSocket connection; configuration values like the public key hash and certificate path must be set appropriately. The connection prints its result or error to the console. Inputs are the trusted certificate, WebSocket server host, and the expected public key hash; output is connection status through console log.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-streams/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\\nimport tls from 'tls';\\nimport crypto from 'crypto';\\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\\n\\n// Expected pinned public key (SPKI SHA-256 hash)\\n// You can extract it from the certificate using openssl:\\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\\n\\n// Load the trusted CA certificate (optional but recommended)\\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\\n\\nconst agent = new tls.Agent({\\n    ca: trustedCert, // Ensures only the specific CA is trusted\\n    checkServerIdentity: (host, cert) => {\\n        // Verify Subject Alternative Name (SAN)\\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\\n            throw new Error(\\n                `Certificate SAN mismatch: expected \\\"your-websocket-server.com\\\", got ${cert.subjectaltname}`\\n            );\\n        }\\n        const publicKey = cert.pubkey;\\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\\n            throw new Error(\\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\\n            );\\n        }\\n    },\\n});\\n\\nconst configurationWebsocketStreams = {\\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\\n    agent,\\n};\\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\\n\\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Connector JS in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to enforce certificate pinning when communicating with the Binance Margin Trading REST API. It uses Node.js built-in modules (fs, https, crypto) to load a trusted CA, customize server identity checks including SAN validation, and ensure the server's public key matches a pinned SHA-256 hash. The Binance Margin Trading client is configured to use this HTTPS agent, and retrieves margin account summary with error handling. Dependencies include Node.js, @binance/margin-trading, and access to the trusted SSL certificate. Inputs include API keys, pinned public key, and CA certificate file; outputs are printed margin summary or error logs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Binance Simple Earn Connector (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Simple Earn REST API client from '@binance/simple-earn', request the list of flexible products, and handle all possible error cases using Binance-specific error classes. Dependencies include the '@binance/simple-earn' package and the relevant error classes it exports. Input parameters are the user\\'s API key and secret; output is either the product list printed to console or descriptive error messages in case of failure. This implementation expects properly configured API credentials and warns if any required parameters are missing, providing robust and specific error management for all documented cases.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    SimpleEarn,\n    SimpleEarnRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with Binance Auto-Invest API in TypeScript\nDESCRIPTION: This code demonstrates how to initialize the Binance Auto-Invest client and implement comprehensive error handling for API requests. It imports all the necessary error classes from the package, configures the client with API credentials, makes a sample API request, and catches different types of errors with specific error messages.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    AutoInvest,\n    AutoInvestRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Node.js HTTPS Agent - TypeScript\nDESCRIPTION: This snippet shows how to configure Node.js's https.Agent for certificate pinning when connecting to the Binance Mining API. It loads a specific trusted CA, checks the Subject Alternative Name (SAN) of the certificate, and matches the server's public key against a pinned SHA-256 hash. The setup ensures only desired certificates are accepted during HTTPS negotiations, protecting against man-in-the-middle attacks. Required dependencies are \\'fs\\', \\'https\\', \\'crypto\\', and \\'@binance/mining\\'. Users must provide their own API keys and pinned certificate hash; the path to the trusted certificate must also be set accordingly. In case of any mismatch or cryptographic error, custom exceptions are raised to halt the connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport fs from 'fs';\\nimport https from 'https';\\nimport crypto from 'crypto';\\nimport { Mining, MiningRestAPI } from '@binance/mining';\\n\\n// Expected pinned public key (SPKI SHA-256 hash)\\n// You can extract it from the certificate using openssl:\\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\\n\\n// Load the trusted CA certificate (optional but recommended)\\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\\n\\nconst httpsAgent = new https.Agent({\\n    ca: trustedCert, // Ensures only the specific CA is trusted\\n    checkServerIdentity: (host, cert) => {\\n        // Verify Subject Alternative Name (SAN)\\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\\n            throw new Error(\\n                `Certificate SAN mismatch: expected \\\"expected-cn.com\\\", got ${cert.subjectaltname}`\\n            );\\n        }\\n        const publicKey = cert.pubkey;\\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\\n            throw new Error(\\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\\n            );\\n        }\\n    },\\n});\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    httpsAgent,\\n};\\nconst client = new Mining({ configurationRestAPI });\\n\\nclient.restAPI\\n    .acquiringAlgorithm()\\n    .then((res) => res.data())\\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Binance VIP Loan Connector in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up Binance's VIP Loan REST API client in TypeScript, make an asynchronous request to retrieve collateral asset data, and robustly handle various potential error types. It requires installing the '@binance/vip-loan' package and providing valid API credentials. The error handling logic distinguishes between multiple error classes (e.g., authentication, rate limiting, network issues) and provides custom responses for each. Inputs are API key and secret; outputs are logged API responses or error messages. Ensure environment supports ES6+ syntax, and supply real API credentials before use.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    VIPLoan,\n    VIPLoanRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling with Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This code demonstrates a comprehensive approach to error handling when using the Binance Derivatives Trading Coin Futures API. It imports various error classes from the library, initializes a client with API credentials, makes an API call to fetch exchange information, and implements detailed error handling using instance checks to provide specific error messages based on the type of error encountered.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DerivativesTradingCoinFutures,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Binance Auto Invest API using Key Pair in TypeScript\nDESCRIPTION: This code demonstrates how to authenticate with the Binance Auto Invest API using key pair authentication. It configures an AutoInvest client with an API key and private key (which can be provided as a string or file path), then executes a query to retrieve all source and target assets available for auto investing.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression in Binance Spot Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Spot client (`@binance/spot`) with compression explicitly disabled. It defines a `configurationRestAPI` object where the `compression` property is set to `false`. This configuration, along with the required API key and secret, is passed to the `Spot` constructor. The snippet then attempts to fetch account information using the `getAccount()` method and logs the response or any potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Errors from Binance Mining API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Mining client using API credentials, calling the `acquiringAlgorithm` REST API endpoint, and implementing a detailed error handling mechanism. It catches various specific error types exported by the `@binance/mining` library (like `ConnectorClientError`, `UnauthorizedError`, `RateLimitBanError`, `ServerError`, `NetworkError`, etc.) using `instanceof` checks within a `.catch()` block and logs corresponding user-friendly messages to the console. It requires the `@binance/mining` package and appropriate API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\\nimport {\\n    Mining,\\n    MiningRestAPI,\\n    ConnectorClientError,\\n    RequiredError,\\n    UnauthorizedError,\\n    ForbiddenError,\\n    TooManyRequestsError,\\n    RateLimitBanError,\\n    ServerError,\\n    NetworkError,\\n    NotFoundError,\\n    BadRequestError\\n} from '@binance/mining';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new Mining({ configurationRestAPI });\\n\\nclient.restAPI\\n    .acquiringAlgorithm()\\n    .then((res) => res.data())\\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\\n    .catch((err) => {\\n        if (err instanceof ConnectorClientError) {\\n            console.error('Client error: Check your request parameters.', err);\\n        } else if (err instanceof RequiredError) {\\n            console.error('Missing required parameters.', err);\\n        } else if (err instanceof UnauthorizedError) {\\n            console.error('Unauthorized: Invalid API credentials.', err);\\n        } else if (err instanceof ForbiddenError) {\\n            console.error('Forbidden: Check your API key permissions.', err);\\n        } else if (err instanceof TooManyRequestsError) {\\n            console.error('Rate limit exceeded. Please wait and try again.', err);\\n        } else if (err instanceof RateLimitBanError) {\\n            console.error('IP address banned due to excessive rate limits.', err);\\n        } else if (err instanceof ServerError) {\\n            console.error('Server error: Try again later.', err);\\n        } else if (err instanceof NetworkError) {\\n            console.error('Network error: Check your internet connection.', err);\\n        } else if (err instanceof NotFoundError) {\\n            console.error('Resource not found.', err);\\n        } else if (err instanceof BadRequestError) {\\n            console.error('Bad request: Verify your input parameters.', err);\\n        } else {\\n            console.error('An unexpected error occurred:', err);\\n        }\\n    });\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Derivatives Trading API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a DerivativesTradingPortfolioMarginPro client with custom retry settings. It sets up the client with an API key, secret, maximum number of retries, and backoff time between retries. The code then makes a request to get the portfolio margin pro account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Connecting Binance USDS Futures Websocket API in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization and configuration of a Binance USDS Futures Websocket API client using TypeScript. It requires the '@binance/derivatives-trading-usds-futures' package and API credentials. The configuration enables connection pooling by specifying 'mode' as 'pool' and 'poolSize' for concurrent connections. The client connects asynchronously, retrieves the current position information via 'positionInformation()', and handles results or errors using promises. Inputs required include API key, API secret, and pool parameters; outputs are the resolved position data or an error message. Pool mode allows handling multiple concurrent websocket connections for improved efficiency; ensure valid credentials and network access.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Binance Derivatives WebSocket API Client in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize the `DerivativesTradingUsdsFutures` client from `@binance/derivatives-trading-usds-futures` with API credentials and a custom `timeout` value (10000ms). It then establishes a WebSocket connection, retrieves position information using `positionInformation()`, and logs the result or any errors encountered during the process.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 10000, // Set timeout to 10 seconds\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key Authentication for Binance Derivatives Trading\nDESCRIPTION: Demonstrates how to initialize and configure a Derivatives Trading client using private key authentication. The code shows how to set up the configuration object with API key and private key credentials, create a client instance, and establish a websocket connection to fetch position information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the Binance Derivatives Trading USDS Futures client using key pair authentication. It configures the client with an API key and private key, and makes a request to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Keep-Alive in Binance API Connector - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Spot client instance from the @binance/spot library in TypeScript with custom configuration settings, particularly with keepAlive set to false (default is true). It shows dependency on the @binance/spot package and requires valid API key and secret. The client.restAPI.getAccount() method is called to fetch account details, with the response processed and logged, and errors caught and displayed. Expected input includes API credentials and the keepAlive boolean, while output is the account data or any error encountered.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning in Node.js HTTPS Agent with Binance Connector - TypeScript\nDESCRIPTION: This snippet showcases how to set up HTTPS certificate pinning within a Node.js application using TypeScript. It defines a custom https.Agent that validates the server's public key against a precomputed hash (SPKI SHA-256) and checks the Subject Alternative Name (SAN) in the certificate. The code initializes the Binance SubAccount client with a custom configuration, performs a sample API call, and includes robust error handling. Required dependencies include the 'fs', 'https', and 'crypto' Node modules, as well as '@binance/sub-account'. The key parameters are the pinned public key hash, trusted CA certificate path, and Binance API credentials. Expected input is the correct server and certificate setup, with outputs being the API response (or errors if validation fails). Limitations include the need to manually update the pinned public key if server certificates change and ensuring the certificate file paths and API credentials are kept secure.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\\nimport https from 'https';\\nimport crypto from 'crypto';\\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\\n\\n// Expected pinned public key (SPKI SHA-256 hash)\\n// You can extract it from the certificate using openssl:\\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\\n\\n// Load the trusted CA certificate (optional but recommended)\\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\\n\\nconst httpsAgent = new https.Agent({\\n    ca: trustedCert, // Ensures only the specific CA is trusted\\n    checkServerIdentity: (host, cert) => {\\n        // Verify Subject Alternative Name (SAN)\\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\\n            throw new Error(\\n                `Certificate SAN mismatch: expected \\\"expected-cn.com\\\", got ${cert.subjectaltname}`\\n            );\\n        }\\n        const publicKey = cert.pubkey;\\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\\n            throw new Error(\\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\\n            );\\n        }\\n    },\\n});\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    httpsAgent,\\n};\\nconst client = new SubAccount({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSummaryOfSubAccountsMarginAccount()\\n    .then((res) => res.data())\\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\\n        console.log(data)\\n    )\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Wallet with Proxy in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Binance Wallet SDK to route REST API requests through a specified proxy server. It defines the proxy's host, port, protocol, and optional authentication credentials within the `configurationRestAPI` object used to initialize the `Wallet` client. The example includes initializing the client and making an `accountInfo` API call to verify the setup.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Agent with Certificate Pinning for Binance WebSocket in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring a custom `tls.Agent`. It imports required modules, defines a placeholder for the pinned public key, loads a trusted CA certificate (requires a valid path), and creates a `tls.Agent` with custom server identity verification. The verification checks the Subject Alternative Name (SAN) and implements public key pinning by comparing the server certificate's public key hash (SHA-256) against the `PINNED_PUBLIC_KEY`. This custom agent is then used to configure the WebSocket streams for the `@binance/spot` client, enhancing connection security. Finally, it attempts to connect to the WebSocket stream.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"your-websocket-server.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n    agent,\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Handling NFT REST API Client Errors - Binance Connector - TypeScript\nDESCRIPTION: This TypeScript code demonstrates initializing the Binance NFT REST API client using API credentials and handling different types of possible errors using connector-specific exception classes. It imports multiple error types from the Binance NFT SDK and sets up the API client, then invokes the 'getNFTAsset' method, processing the response or catching any thrown errors with detailed, typed handlers. Required dependencies include the '@binance/nft' package, TypeScript, and valid Binance API credentials. Key parameters include the API key and secret for authentication. Input is an asynchronous call with no parameters; output is handled by logging data or precise error messages. Limitations include reliance on available error classes and correct setup of credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    NFT,\n    NFTRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Handling Errors When Fetching Margin Account Summary (TypeScript with Binance SDK)\nDESCRIPTION: This snippet configures and instantiates a MarginTrading client from the '@binance/margin-trading' package, then calls 'getSummaryOfMarginAccount' and processes the response. It includes exhaustive error handling for all major error types defined in the SDK, such as authentication, permission, network, rate limiting, and parameter errors. Required dependencies are TypeScript and '@binance/margin-trading'. Input: valid Binance API credentials. Output: account summary data or categorized error logs. The implementation assumes availability of these error classes and correct API key permissions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    MarginTrading, \n    MarginTradingRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Pair Authentication for Binance Derivatives Trading\nDESCRIPTION: This snippet demonstrates how to set up key pair based authentication with the Binance Derivatives Trading Coin Futures API. It configures the client with an API key and private key (which can be provided directly or as a file path), and makes a sample API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive and Initializing Binance Derivatives Trading Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a configuration object for the Binance Derivatives Trading API, including API key, secret, and keep-alive option. It then initializes a client and makes a request for account information. The keep-alive option is set to false, which differs from the default true setting.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Pinning with Binance Connector (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enforce certificate pinning in a Node.js environment using TypeScript by customizing the HTTPS agent. It loads a trusted CA certificate, checks the Subject Alternative Name for expected values, and validates the server's public key hash against a pinned value. Dependencies include 'fs', 'https', 'crypto', and '@binance/derivatives-trading-portfolio-margin'; it requires access to the trusted certificate file and proper configuration of API credentials. The Binance client is initialized with enhanced HTTPS security, making requests only to servers presenting the correct certificates.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression for Binance Spot Websocket API in Typescript\nDESCRIPTION: This Typescript snippet shows how to configure the `@binance/spot` client to disable compression for websocket connections. It imports necessary classes and constants, defines the configuration object `configurationWebsocketAPI` with placeholder API credentials, the websocket URL (`SPOT_WS_API_PROD_URL`), and sets `compression` to `false`. It then creates a `Spot` client instance, connects to the websocket API, fetches exchange information for the 'BNBUSDT' symbol, and logs the response data. Dependencies include the `@binance/spot` package. Requires replacing placeholder API keys with valid credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    compression: false, // Disable compression\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance VIP Loan Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `VIPLoan` client from the `@binance/vip-loan` library for key pair authentication. It imports necessary modules, defines configuration including the API key, private key (content or file path), and an optional passphrase. It then creates a `VIPLoan` instance and uses its `restAPI` property to call the `getCollateralAssetData` method, logging the response or errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Dual Investment Positions via REST API - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Dual Investment client library and querying current Dual Investment positions using the REST API. It requires prior installation of the '@binance/dual-investment' package, Node.js 22.12.0+, and valid Binance API credentials. The key parameters include the 'configurationRestAPI' object with 'apiKey' and 'apiSecret'. The snippet creates a new instance of the connector, fetches the user's dual investment positions via a promise-based call, and logs either the data or any errors to the console. It outputs the dual investment positions in the response data structure as defined by the 'DualInvestmentRestAPI.GetDualInvestmentPositionsResponse' interface.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new DualInvestment({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getDualInvestmentPositions()\\n    .then((res) => res.data())\\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing the NFT Client (New Method) in TypeScript\nDESCRIPTION: Demonstrates the new, modular approach for initializing the Binance NFT client. It involves importing `NFT` and `NFTRestAPI`, creating a configuration object (`configurationRestAPI`) with credentials, and passing this object to the `NFT` constructor. API methods are accessed via the `restAPI` property of the client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/migration_guide_nft_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\\n\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-key',\\n    apiSecret: 'your-secret',\\n};\\nconst client = new NFT({ configurationRestAPI });\\n\\nclient.restAPI.<method_name>().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-key',\\n    apiSecret: 'your-secret',\\n};\\nconst client = new NFT({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Wallet Client with Timeout in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `Wallet` client from the `@binance/wallet` library. It configures the REST API client with an API key, secret, and a custom timeout of 5000 milliseconds. It then calls the `accountInfo` method on the REST API client and includes basic error handling using `.catch()`.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI.accountInfo().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a client for the Binance Derivatives Trading Portfolio Margin API using key pair authentication. It imports necessary modules, configures the client with API key and private key details, and makes a sample API call to fetch account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnect Delay for Binance WebSocket Streams in TypeScript\nDESCRIPTION: This snippet illustrates how to set a custom reconnect delay (3 seconds) for Binance Spot WebSocket Streams by providing a configuration object to the Spot client from the '@binance/spot' library. It demonstrates connecting to the websocket, subscribing to the 'aggTrade' stream for a specific symbol ('BNBUSDT'), and handling incoming messages with an event listener. Dependencies include the '@binance/spot' package, and expected outputs are real-time console logs of aggregated trade responses. The code assumes network access and correct API endpoint configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\\n\\nconst configurationWebsocketStreams = {\\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\\n};\\nconst client = new Spot({ configurationWebsocketStreams });\\n\\nclient.websocketStreams\\n    .connect()\\n    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {\\n        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });\\n        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));\\n    })\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Wallet Client with Custom HTTPS Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@binance/wallet` client with a custom `https.Agent` from Node.js. It configures the agent to reject unauthorized certificates (`rejectUnauthorized: true`), provides API keys, and then uses the configured client to make an asynchronous call to the `accountInfo` REST API endpoint, logging the result or any errors. Requires the `@binance/wallet` package and Node.js `https` module.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport https from 'https';\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Agent for Binance Derivatives Trading in TypeScript\nDESCRIPTION: This snippet sets up a TLS agent with certificate pinning and server identity verification. It then uses this agent to create a secure WebSocket connection to Binance's Derivatives Trading API. The code includes error handling for certificate mismatches and pinning failures.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-streams/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"your-websocket-server.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n    agent,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Binance Mining REST API Client in TypeScript\nDESCRIPTION: Provides a basic example of using the Binance Mining REST API client in TypeScript. It shows how to import the necessary classes, configure the client with API key and secret, instantiate the client, and make an asynchronous call to the `acquiringAlgorithm` endpoint. The example uses promises to handle the response data and potential errors. Requires the `@binance/mining` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Authenticating Binance Pay API with Key Pairs in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to authenticate requests to the Binance Pay REST API using an API key and a private key. It initializes the `Pay` client from the `@binance/pay` library with the key pair configuration, including an optional passphrase if the private key is encrypted. It then uses the client to fetch the payment trade history and logs the result or any errors encountered. The private key can be provided directly as a string or as a path to a PEM file.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Querying Historical Algo Orders with Binance API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTPS agent with certificate validation, configure the Binance Algo API client, and make a request to query historical algo orders. It includes error handling and logging of the response data.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Pool Connection for Binance Derivatives Trading in TypeScript\nDESCRIPTION: Demonstrates how to set up a pooled WebSocket connection to the Binance Derivatives Trading API. Configures connection pool settings including API credentials and pool size, then establishes connection to fetch position information. Uses pool mode with 3 connections for improved reliability and performance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Copy Trading API in TypeScript\nDESCRIPTION: This code demonstrates how to implement certificate pinning with the Binance Copy Trading API. It verifies the server's identity by checking the certificate's public key hash and Subject Alternative Name before making API requests, providing an additional layer of security against man-in-the-middle attacks.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent for Binance Derivatives Trading in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a WebSocket client for Binance Derivatives Trading USDS Futures using TypeScript. It includes configuring the API with a proxy agent, creating a client instance, and fetching position information. The code uses the '@binance/derivatives-trading-usds-futures' package and 'https-proxy-agent' for proxy support.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    agent: new HttpsProxyAgent('your-proxy-url'),\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Gift Card Client with Key Pair Auth in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the `GiftCard` client from the `@binance/gift-card` library using key pair authentication. It requires an API key and a private key (provided either as its content string or a file path). An optional passphrase can be provided if the private key is encrypted. The initialized client is then used to call the `createASingleTokenGiftCard` method on the REST API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Initializing Binance Derivatives Trading Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTPS agent with strict SSL verification, configure the Binance Derivatives Trading Options client with API credentials, and make a sample API call to fetch option account information. It uses the '@binance/derivatives-trading-options' package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Staking Client with Key Pair Auth (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Staking client using key pair authentication. It imports necessary modules (`fs`, `Staking`, `StakingRestAPI` from `@binance/staking`), sets up the configuration object (`configurationRestAPI`) with the user's API key, private key (either the key content as a string or the path to the key file), and an optional passphrase if the private key is encrypted. It then creates a `Staking` client instance and uses its `restAPI` property to call the `claimBoostRewards` endpoint, logging the successful response (`StakingRestAPI.ClaimBoostRewardsResponse`) or any errors to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This code initializes a DerivativesTradingCoinFutures client with custom retry settings. It configures the client to retry API calls up to 5 times with a 2-second delay between retries. The example then demonstrates making an API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance Auto-Invest Client in TypeScript\nDESCRIPTION: Shows how to initialize the Binance Auto-Invest client with proxy configuration including host, port, protocol, and authentication details. The example also demonstrates making an API call to query source and target assets.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure WebSocket Agent for Binance Connector in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a secure TLS agent for WebSocket connections with the Binance API. It includes certificate pinning, trusted CA certificate loading, and server identity verification. The configured agent is then used to initialize a Binance Derivatives Trading USDS Futures client for WebSocket API interactions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport tls from 'tls';\nimport crypto from 'crypto';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst agent = new tls.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:your-websocket-server.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"your-websocket-server.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, but got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    agent,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Using the Binance Convert REST API with TypeScript\nDESCRIPTION: Example of how to initialize and use the Binance Convert REST API client. The code demonstrates setting up the client with API credentials and making a request to list all convert pairs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance NFT Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance NFT client using an API key and a private key (provided either as content or a file path). It configures the client with these credentials, optionally including a passphrase if the private key is encrypted, and then uses the initialized client to call the `getNFTAsset` endpoint. The response data is logged to the console, and errors are caught and logged.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Binance API with Key Pair in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to configure and use the @binance/spot library to authenticate using an API key and private key, supporting both direct private key content or a file path, as well as an optional passphrase. After setting up authentication, it demonstrates querying account information via the Spot REST API. Required dependencies are '@binance/spot' and 'fs' for file handling. Input parameters include your API key, private key or its path, and an optional passphrase for encrypted keys. The output is the account information retrieved from Binance or error details if authentication or the API call fails.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Spot, SpotRestAPI } from '@binance/spot';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI\n    .getAccount()\n    .then((res) => res.data())\n    .then((data: SpotRestAPI.GetAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Sub-Account API in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to instantiate the `SubAccount` client from `@binance/sub-account` with proxy configuration. It defines an object containing API credentials and proxy details (host, port, protocol, optional authentication) and uses it to create the client instance. Finally, it demonstrates making an API call (`getSummaryOfSubAccountsMarginAccount`) through the configured proxy and handling the response. Requires the `@binance/sub-account` package installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance JS Connector\nDESCRIPTION: This code demonstrates how to implement certificate pinning for secure API connections to Binance. It creates a custom HTTPS agent that verifies both the certificate's Subject Alternative Name and public key hash against expected values, then uses this agent in a Binance Convert API client configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing VIPLoan Client with Proxy Settings in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure and initialize the `VIPLoan` client from the `@binance/vip-loan` library to use a proxy server. It involves creating a `configurationRestAPI` object containing API keys, secret, and detailed proxy settings including host, port, protocol, and optional authentication credentials (username/password). The configured client instance is then used to make an example API call (`getCollateralAssetData`) to fetch collateral asset data, handling the response or potential errors. Requires the `@binance/vip-loan` package installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Pair Authentication for Binance C2C API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up key pair based authentication with the Binance C2C API. It initializes a C2C client with API key and private key credentials, then makes a request to fetch C2C trade history. The private key can be provided directly as a string or as a file path, with optional passphrase support for encrypted keys.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Creating Gift Card - Binance Connector (TypeScript)\nDESCRIPTION: This code snippet illustrates how to configure the Binance Gift Card REST API client with API credentials and a custom timeout value (in milliseconds) using TypeScript. It demonstrates importing the necessary modules, instantiating the client with the configuration object, and invoking the createASingleTokenGiftCard method with token and amount parameters. Errors during the API call are caught and logged via Promise catch. Requires the '@binance/gift-card' package and valid API credentials. Input parameters include the gift card token string and the amount to issue. Output is a Promise with the result or handled error; ensure the timeout aligns with expected network conditions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    timeout: 5000,\\n};\\nconst client = new GiftCard({ configurationRestAPI });\\n\\nclient.restAPI\\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\\n    .catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Initializing Binance Convert API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTPS agent with SSL verification, configure the Binance Convert API client with API credentials, and make a sample API call to list all convert pairs. It uses the '@binance/convert' package and the built-in 'https' module.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Algo API in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a proxy for the Binance Algo API client. It sets up the client with API credentials and proxy settings, then makes a sample API call to query historical algo orders.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Proxy with Binance Margin Trading Client (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates initializing the `MarginTrading` client from `@binance/margin-trading` with proxy configuration for REST API interactions. It defines the `configurationRestAPI` object including API credentials and proxy details (host, port, protocol, and optional basic authentication). Subsequently, it instantiates the client with this configuration and makes an example API call (`getSummaryOfMarginAccount`) through the proxy, logging the response or any potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent with Binance Spot API (TypeScript)\nDESCRIPTION: This snippet shows how to configure the Binance Spot WebSocket API client in a TypeScript environment using an HTTPS proxy. It requires the '@binance/spot' and 'https-proxy-agent' packages. The 'configurationWebsocketAPI' object includes API credentials, the Binance Spot WebSocket URL, and a proxy agent. The client connects, fetches exchange information for 'BNBUSDT', and handles responses and errors. Ensure correct API keys and a valid proxy URL are provided for successful connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\\n\\nconst configurationWebsocketAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    wsURL: SPOT_WS_API_PROD_URL,\\n    agent: new HttpsProxyAgent('your-proxy-url'),\\n};\\nconst client = new Spot({ configurationWebsocketAPI });\\n\\nclient.websocketAPI\\n    .connect()\\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\\n    )\\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\\n        console.log(res.data)\\n    )\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPS Certificate Pinning in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up a custom `https.Agent` for certificate pinning in Node.js. It loads an optional trusted CA certificate, defines an expected public key hash (SPKI SHA-256), and implements a `checkServerIdentity` function to validate both the Subject Alternative Name (SAN) and the public key hash of the server's certificate. This agent is then used to configure a `@binance/staking` client for enhanced security. Dependencies include `fs`, `https`, `crypto`, and `@binance/staking`. The example concludes by making a sample API call to `claimBoostRewards`.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Binance Derivatives REST API Client (TypeScript)\nDESCRIPTION: Illustrates the basic usage of the REST API client. It shows how to import the necessary class, initialize the client with API key and secret, and make an asynchronous call to the `accountInformation` endpoint, logging the response data or any errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key and Connecting to Binance Spot Websocket API in TypeScript\nDESCRIPTION: This snippet shows how to securely configure a private key (either as a string or file path) and optional passphrase for the Binance Spot Websocket API using the binance-connector-js library in TypeScript. It demonstrates establishing a WebSocket connection with API key and private key credentials, then querying for exchange information. Required dependencies are the '@binance/spot' npm package. Parameters such as privateKey, privateKeyPassphrase, and apiKey must be provided. The input expects user-specific API keys and private key details; output is the exchange information or error logs. Ensure the private key is in the correct format and the dependencies are installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    privateKey,\n    privateKeyPassphrase,\n    wsURL: SPOT_WS_API_PROD_URL,\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries and Querying Product List with Binance Simple Earn SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates initializing the Binance Simple Earn SDK with custom retry and backoff settings in TypeScript. It sets the client to retry failed API requests up to 5 times with a 2-second delay between attempts by configuring the 'retries' and 'backoff' fields. The example then queries the flexible product list, processes the response, and includes error handling for failed requests. Dependencies include the '@binance/simple-earn' package and valid API credentials. Inputs required are an API key and secret, and outputs are printed product list data or errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading API Client with Custom Timeout in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure and initialize a Binance Derivatives Trading API client with a custom timeout setting. It sets up the configuration object with API credentials and a 5000ms timeout, creates a new client instance, and makes a sample API call to fetch option account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI.optionAccountInformation().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Certificate Pinning in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a custom Node.js `https.Agent` to enforce certificate pinning. It imports required modules (`fs`, `https`, `crypto`), defines a constant for the expected server public key hash (SPKI SHA-256), optionally loads a trusted CA certificate, and creates an `https.Agent`. The agent's `checkServerIdentity` function verifies the server certificate's Subject Alternative Name (SAN) and compares its public key hash against the pinned value. Finally, it configures the `@binance/dual-investment` client with this secure agent and makes an example API call to fetch dual investment positions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI\n    .getDualInvestmentPositions()\n    .then((res) => res.data())\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Calling Gift Card Create API with Binance Connector (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Gift Card client with a custom proxy configuration using the binance-connector-js library. It imports the necessary modules, sets API access credentials, and provides detailed proxy settings (including host, port, protocol, and authentication). The snippet then proceeds to use the client to create a single token gift card by specifying the token and amount, handling both API response and errors via Promises. Required dependencies include @binance/gift-card and valid Binance API keys, with proxy server details as parameters. Outputs are logged to the console, showing either the returned gift card data or any errors. Limitations: actual credentials and proxy information must be valid; endpoint and authentication may vary depending on your environment.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket with Proxy for Binance USDⓈ-M Futures in TypeScript\nDESCRIPTION: This code snippet sets up the Binance derivatives trading USDⓈ-M futures WebSocket stream client in TypeScript, configuring it to connect through a specified HTTPS proxy agent using the 'https-proxy-agent' package. It imports necessary modules, sets up the WebSocket stream configuration with a proxy agent, and initiates the connection using the SDK client. Dependencies include '@binance/derivatives-trading-usds-futures' and 'https-proxy-agent'. Key parameters are the WebSocket production URL and the proxy URL. The code outputs connection results or errors to the console, and requires network access to the proxy and Binance endpoints.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-streams/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\\n\\nconst configurationWebsocketStreams = {\\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\\n    agent: new HttpsProxyAgent('your-proxy-url'),\\n};\\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\\n\\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Reconnect Delay for Binance Derivatives Trading in TypeScript\nDESCRIPTION: Demonstrates how to initialize a Binance Derivatives Trading client with custom reconnect delay settings and establish a websocket connection for position information. The reconnect delay is set to 3 seconds, and the code includes authentication with API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance NFT REST API Client in TypeScript\nDESCRIPTION: This code snippet illustrates the instantiation of a Binance NFT REST API client in TypeScript with an explicit request timeout. It requires the '@binance/nft' package as a dependency and expects the user to supply their API key and secret. The configuration object includes a 'timeout' parameter (in milliseconds) to limit request duration, and the client makes an asynchronous call to retrieve NFT asset details, handling errors by logging them to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI.getNFTAsset().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnect Delay for Binance WebSocket Streams - TypeScript\nDESCRIPTION: This code snippet demonstrates initializing the Binance DerivativesTradingOptions client in TypeScript with a custom WebSocket reconnect delay, set to 3 seconds, via the configurationWebsocketStreams object. It requires the '@binance/derivatives-trading-options' package as a dependency. Key parameters include the WebSocket URL and the reconnectDelay (in milliseconds). The snippet connects to the WebSocket, listens for real-time symbol information updates, and logs data received from the stream. The connect() method returns a Promise, and errors are properly captured with .catch().\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/websocket-streams/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\\n\\nconst configurationWebsocketStreams = {\\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\\n};\\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\\n\\nclient.websocketStreams\\n    .connect()\\n    .then((connection) => {\\n        const stream = connection.newSymbolInfo();\\n        stream.on('message', (data) => console.info(data));\\n    })\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Pinning for Binance NFT Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up a custom `https.Agent` to enforce certificate pinning when using the `@binance/nft` client. It involves loading an optional CA certificate, defining a pinned public key hash, and implementing the `checkServerIdentity` function to validate the server's certificate SAN and public key hash against expected values before allowing the HTTPS connection. The configured agent is then passed to the NFT client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Fetching NFT Asset - Binance Connector - TypeScript\nDESCRIPTION: This code snippet shows how to configure an HTTPS agent with certificate validation for secure API calls to Binance NFT REST endpoints using the binance-connector-js SDK in TypeScript. It sets up authentication by specifying API key and secret and initializes the NFT client with these credentials. The example demonstrates making a call to get NFT asset data via the client's restAPI interface and includes error handling. Dependencies: @binance/nft, https (Node.js built-in). The main parameters include apiKey, apiSecret, and httpsAgent; the output is the response data from the getNFTAsset() call, printed to the console. The snippet assumes valid API credentials and network access.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Querying Binance DualInvestment API in TypeScript\nDESCRIPTION: This snippet configures a strict HTTPS agent and initializes the Binance DualInvestment REST API client with the agent and user credentials. It fetches dual investment positions by invoking getDualInvestmentPositions(), handling response data and errors asynchronously. Dependencies include 'https' and '@binance/dual-investment'; users must provide valid apiKey and apiSecret. Inputs are user credentials and configuration; outputs are position data printed to console. Agent is configured to require a valid SSL certificate.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI\n    .getDualInvestmentPositions()\n    .then((res) => res.data())\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning for Binance API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up certificate pinning for secure communication with the Binance API using TypeScript. It includes creating a custom HTTPS agent with pinned public key verification, trusted CA certificate validation, and subject alternative name checking. The example then uses this agent to make a secure API call using the Binance Derivatives Trading USDS Futures client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a DerivativesTradingUsdsFutures client with proxy configuration. It includes API key authentication and proxy settings with host, port, protocol, and optional authentication. The example then shows how to make an API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js https.Agent for Certificate Pinning in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up certificate pinning for HTTPS requests using Node.js. It imports necessary modules (`fs`, `https`, `crypto`, `@binance/simple-earn`), defines a pinned public key hash (`PINNED_PUBLIC_KEY`), optionally loads a trusted CA certificate, and creates a custom `https.Agent`. The agent's `checkServerIdentity` function verifies the server's Subject Alternative Name (SAN) and compares the SHA-256 hash of the server's public key with the pinned key. This secure agent is then used to configure and instantiate the `SimpleEarn` client for making API calls.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Mechanism for Binance Staking API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `Staking` client from the `@binance/staking` library with custom retry settings. It configures the client to retry failed API requests up to 5 times (`retries: 5`) with a 2-second (`backoff: 2000`) delay between attempts. The example then uses this configured client to call the `claimBoostRewards` endpoint and logs the response data or any potential errors to the console. Requires the `@binance/staking` package and valid Binance API credentials (`apiKey`, `apiSecret`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Reconnect Delay in TypeScript for Binance Futures\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the WebSocket reconnect delay for the Binance Derivatives Trading USD(S)-M Futures API. It imports the client and URL constant, defines a configuration object `configurationWebsocketStreams` specifying a custom `reconnectDelay` of 3000 milliseconds (3 seconds), and instantiates the `DerivativesTradingUsdsFutures` client with this configuration. It then connects to the WebSocket streams and subscribes to the `allBookTickersStream`, logging incoming messages to the console and errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-streams/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Initializing Binance Margin Trading Client in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the necessary modules, configure an HTTPS agent with certificate validation enabled, and pass this agent into the Binance Margin Trading REST API client configuration. The example requests a margin account summary, handling both successful and error responses. Required dependencies are the 'https' core module and the '@binance/margin-trading' package. The code expects valid Binance API credentials to be set and outputs the summary data to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive in Binance SubAccount SDK - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to instantiate the Binance SubAccount client with custom keep-alive settings. It imports necessary classes from '@binance/sub-account', supplies API credentials alongside a 'keepAlive' field (set to false), and initializes the REST API client. The example fetches a summary of sub-accounts' margin accounts, handles the promise-based response, and logs the result or any errors. Requires '@binance/sub-account' package, valid API credentials, and Node.js environment. The primary input is the API configuration and the output is a margin summary response; an invalid configuration or network issue will trigger error logging.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Simple Earn REST API Client in TypeScript\nDESCRIPTION: This snippet shows how to import the Binance Simple Earn SDK, configure the REST API client with API credentials and compression settings, and perform a request to fetch the flexible product list. It demonstrates dependency requirements (the @binance/simple-earn package), includes parameters for API authentication and toggling response compression, and provides example usage of the asynchronous API, with Promise-based handling of API responses and errors. Input parameters include API key, API secret, and compression setting; the expected output is a logged list of products or an error message.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Mining Client with Custom HTTPS Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a custom `https.Agent` for secure HTTPS connections with certificate validation (`rejectUnauthorized: true`). It initializes the `@binance/mining` client (`Mining`) with API credentials (`apiKey`, `apiSecret`) and the custom `httpsAgent`. Finally, it makes an asynchronous request to the `acquiringAlgorithm` endpoint via the REST API, logging the response data or any errors encountered. Dependencies include the built-in `https` module and the `@binance/mining` library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Algo API Client with Keep-Alive Configuration in TypeScript\nDESCRIPTION: This snippet shows how to initialize the Binance Algo API client with keep-alive disabled. It includes setting up API credentials, configuring the keep-alive option to false (default is true), and performing a historical algo orders query with proper type annotations.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Rebate API Client in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to initialize the Binance Rebate client with specific retry behavior, specifying API credentials, the number of retries, and backoff interval. It demonstrates making an asynchronous API call to fetch Spot rebate history, processing the response, and handling errors. Dependencies include the '@binance/rebate' package, and required parameters are apiKey, apiSecret, retries, and backoff. Input is not required, but a valid API key and secret are necessary. Output is logged to the console; errors are also handled and output there. Limitations include hardcoded credentials which must be replaced for real use.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression in Binance Margin Trading Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the `MarginTrading` client from `@binance/margin-trading`. It explicitly sets the `compression` option to `false` in the `configurationRestAPI` object. The initialized client is then used to call the `getSummaryOfMarginAccount` method via the REST API, logging the response or any errors. Requires the `@binance/margin-trading` package and valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance NFT REST API Client - TypeScript\nDESCRIPTION: This code snippet illustrates how to initialize the Binance NFT REST API client in TypeScript with compression disabled by setting the 'compression' property to false in the configuration object. It requires the '@binance/nft' package and valid API credentials. The example demonstrates client instantiation, making a call to retrieve NFT asset data (getNFTAsset), and handling both the response and any potential errors. Key parameters include 'apiKey', 'apiSecret', and optional 'compression' for toggling data compression in the API communication. The output is logged to the console, and the snippet assumes valid credentials and access to the Binance NFT REST API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTPS Agent for Binance Fiat Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@binance/fiat` client with a custom `https.Agent`. It creates an agent instance with `rejectUnauthorized: true` for secure connections, passes it during client initialization along with API keys, and then uses the client to fetch fiat deposit/withdraw history. Dependencies include `https`, `@binance/fiat`. The `transactionType` parameter specifies the type of history to retrieve ('0' for deposit). The response data is logged to the console, and errors are caught and logged.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Auto-Invest API in TypeScript\nDESCRIPTION: This code demonstrates how to set up certificate pinning when connecting to Binance's Auto-Invest API. It creates a custom HTTPS agent that validates the server's certificate against a trusted CA, verifies the Subject Alternative Name, and checks the public key hash against a pinned value before making API requests.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Using Binance Auto Invest REST API in TypeScript\nDESCRIPTION: Example of how to use the Binance Auto Invest REST API to query all source assets and target assets. It demonstrates client initialization with API credentials and making an API request.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Derivatives Trading Portfolio Margin Pro Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a configuration object with a custom timeout, initialize the Binance Derivatives Trading Portfolio Margin Pro client, and make an API call to get the portfolio margin pro account information. The timeout is set to 5000 milliseconds (5 seconds).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI.getPortfolioMarginProAccountInfo().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Mechanisms in Binance Connector JS\nDESCRIPTION: This code demonstrates how to initialize the Binance Convert API client with retry configuration. It sets up retry parameters including the maximum number of retry attempts and the backoff time between retries, then makes a request to list all available convert pairs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Settings for Binance Auto-Invest API in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Auto-Invest client with compression disabled, and then make a query to fetch all source assets and target assets. The compression parameter is set to false in the configuration object.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Sub-Account Client with Custom HTTPS Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `@binance/sub-account` client to use a custom `https.Agent`. It initializes an agent with `rejectUnauthorized: true`, passes it along with API credentials (`apiKey`, `apiSecret`) during client instantiation (`SubAccount`), and then calls the `getSummaryOfSubAccountsMarginAccount` method via the `restAPI` property to fetch data, logging the result or any errors. Requires the `https` module from Node.js and the `@binance/sub-account` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport https from 'https';\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Streams without Compression in Binance Derivatives Trading Options\nDESCRIPTION: This code initializes a DerivativesTradingOptions client with custom WebSocket stream configuration. It sets the WebSocket URL to the production endpoint and explicitly disables compression. The client then attempts to connect to the WebSocket streams.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/websocket-streams/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Derivatives Trading WebSocket API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a DerivativesTradingCoinFutures client with a custom timeout configuration. It sets up the client, connects to the WebSocket API, and retrieves position information. The timeout is set to 10 seconds for API requests.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 10000, // Set timeout to 10 seconds\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Rebate Client With Compression in TypeScript\nDESCRIPTION: This code demonstrates how to set up and initialize the Binance Rebate client in TypeScript with compression explicitly disabled. It requires the '@binance/rebate' npm package and valid API credentials. The snippet configures API keys and the 'compression' option, creates an instance of the Rebate client, and asynchronously fetches and logs spot rebate history records, handling both successful and error responses. Expected input is the API credentials, and the output is the fetched rebate history printed to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Connection Pool for Binance Derivatives Trading in TypeScript\nDESCRIPTION: This code sets up a WebSocket connection pool for Binance Derivatives Trading Coin Futures. It configures the WebSocket URL, uses pool mode, and specifies the pool size. The client is then initialized with these settings and a connection is established.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-streams/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance Gift Card API in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the HTTPS connection behavior when interacting with the Binance Gift Card API using the `@binance/gift-card` library in TypeScript. It creates an `https.Agent` with `rejectUnauthorized` set to `true` to enforce TLS certificate validation and passes this agent during the client initialization using the `configurationRestAPI` object. The example then proceeds to create a single token gift card using the configured client. Requires the `https` module (built-in Node.js), the `@binance/gift-card` library, and valid Binance API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Making API Call with Binance Derivatives Trading Portfolio Margin Pro in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTPS agent with SSL verification, set up API credentials, initialize a client for the Binance Derivatives Trading Portfolio Margin Pro API, and make a sample API call to retrieve portfolio margin account information. It uses the '@binance/derivatives-trading-portfolio-margin-pro' package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Certificate Pinning in Node.js/TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates implementing certificate pinning for secure API communication using Node.js and the `@binance/pay` library. It defines a pinned public key hash, optionally loads a trusted CA certificate, and creates a custom `https.Agent`. The agent's `checkServerIdentity` function verifies the server's certificate Subject Alternative Name (SAN) and compares its public key hash (SHA-256) against the pinned value. This secure agent is then passed to the `Pay` client configuration to ensure connections are only made to the authentic server.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Pay, PayRestAPI } from '@binance/pay';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Streams for Testnet in TypeScript\nDESCRIPTION: This example shows how to configure the WebSocket Streams client for the testnet environment. It demonstrates setting the testnet URL for development and testing purposes.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_TESTNET_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_TESTNET_URL,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Spot Websocket API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Spot Websocket API client with a custom timeout using the binance-connector-js library. It imports essential classes, sets API credentials, websocket URL, and a 10-second timeout in the configuration, then connects and queries exchange information for the 'BNBUSDT' symbol. Dependencies include the '@binance/spot' package. Expects valid Binance API credentials; the snippet outputs the exchange information or logs errors. Intended for developers who need to manage request timeouts in websocket operations.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    timeout: 10000, // Set timeout to 10 seconds\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Simple Earn API Client with HTTPS Agent in TypeScript\nDESCRIPTION: This snippet initializes and configures a Binance Simple Earn API client with a custom HTTPS Agent in TypeScript. It imports the necessary modules, sets up the HTTPS agent with authorization checks, and creates a configuration object with API credentials. The client is then instantiated and used to fetch a list of flexible products via a REST API call, handling both successful and error responses. Dependencies required are '@binance/simple-earn' and 'https', and the input requires valid Binance API credentials. The snippet is suitable for Node.js environments where secure HTTPS configuration is needed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\\n\\nconst httpsAgent = new https.Agent({\\n    rejectUnauthorized: true,\\n});\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    httpsAgent,\\n};\\nconst client = new SimpleEarn({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSimpleEarnFlexibleProductList()\\n    .then((res) => res.data())\\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Staking Client with Custom HTTPS Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates creating a custom `https.Agent` with `rejectUnauthorized: true` to enforce SSL certificate validation. It then configures the `Staking` client from `@binance/staking` to use this agent, along with placeholder API keys. Finally, it calls the `claimBoostRewards` method on the client's REST API instance and logs the response data or catches and logs any errors. Dependencies include the built-in `https` module and `Staking`, `StakingRestAPI` from the `@binance/staking` package. Valid `apiKey` and `apiSecret` are required for actual use.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance C2C API Client in TypeScript\nDESCRIPTION: Sets up a secure HTTPS agent and initializes the Binance C2C API client with API credentials. Makes a request to fetch C2C trade history using the configured client. The HTTPS agent is configured to reject unauthorized certificates for enhanced security.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance C2C API Client with Timeout in TypeScript\nDESCRIPTION: Shows how to initialize a Binance C2C API client with custom timeout settings and make a request to fetch C2C trade history. The example includes API key configuration and error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI.getC2CTradeHistory().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout for SimpleEarn Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `SimpleEarn` client from `@binance/simple-earn` with custom REST API configuration, specifically setting a 5000ms timeout. It requires valid API credentials (`apiKey` and `apiSecret`). The configured client is then used to fetch the flexible product list via `getSimpleEarnFlexibleProductList`, with basic error handling included.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI.getSimpleEarnFlexibleProductList().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance Auto-Invest API in TypeScript\nDESCRIPTION: This code demonstrates how to create a secure HTTPS agent configuration for the Binance Auto-Invest API. It initializes an HTTPS agent with certificate validation enabled, configures the API client with credentials and the custom agent, and makes a request to query available source and target assets.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance C2C Client with Compression Configuration in TypeScript\nDESCRIPTION: Demonstrates how to create a Binance C2C client instance with disabled compression and make a request to fetch C2C trade history. The configuration includes API credentials and compression settings. The response is typed using C2CRestAPI interfaces.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Fiat Client with Compression Disabled (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `Fiat` client from `@binance/fiat` with compression explicitly disabled by setting `compression: false` in the `configurationRestAPI` object. It then uses the configured client instance to make an API call to fetch the fiat deposit and withdrawal history using the `getFiatDepositWithdrawHistory` method and logs the response data or any potential errors. This requires the `@binance/fiat` package to be installed and valid Binance API credentials (`apiKey`, `apiSecret`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Comprehensive Error Handling with Binance Algo Connector in TypeScript\nDESCRIPTION: This code demonstrates a complete error handling implementation for the Binance Algo Connector. It imports all available error types, initializes a client with API credentials, makes an API request, and implements type-specific error handling for various error scenarios that might occur during API interactions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Algo,\n    AlgoRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Dual Investment REST API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Dual Investment SDK REST API client in TypeScript with the keep-alive option set to false. It requires the '@binance/dual-investment' package and valid API credentials. The code fetches dual investment positions using the client's REST API and logs the results or any errors to the console. Key parameters include 'apiKey', 'apiSecret', and 'keepAlive'. The method 'getDualInvestmentPositions' returns a promise that resolves to the positions response; error handling is done via catch.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    keepAlive: false, // Default is true\\n};\\nconst client = new DualInvestment({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getDualInvestmentPositions()\\n    .then((res) => res.data())\\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Accessing REST API with Binance VIP Loan Client - TypeScript\nDESCRIPTION: Shows how to import VIPLoan and VIPLoanRestAPI classes, set up REST API authentication using API key and secret, and make an authenticated request to the getCollateralAssetData endpoint. The example demonstrates handling the asynchronous response and error cases. This snippet depends on the @binance/vip-loan package and requires valid Binance API credentials for full functionality. Input parameters include apiKey and apiSecret, while outputs include console logs of the API response or errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new VIPLoan({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getCollateralAssetData()\\n    .then((res) => res.data())\\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for VIPLoan Binance Connector in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the VIPLoan client from the @binance/vip-loan package with a custom timeout using TypeScript. It sets the API key, secret, and timeout in the configuration object and initializes the client, then makes an asynchronous request to retrieve collateral asset data using the restAPI interface. Handle errors using a catch block in the promise chain. Requires the @binance/vip-loan dependency and valid API credentials. Inputs are API credentials and timeout; output is the response or error from getCollateralAssetData.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI.getCollateralAssetData().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Binance Derivatives Trading client using key pair authentication. It includes importing necessary modules, configuring the API key and private key, creating a client instance, and making a sample API call to fetch option account information. The private key can be provided as a string or a file path.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance VIP Loan Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance VIP Loan client (`VIPLoan`) with a custom HTTPS agent in TypeScript. It first imports necessary modules (`https`, `VIPLoan`, `VIPLoanRestAPI`). Then, it creates an `https.Agent` instance, setting `rejectUnauthorized` to `true`. This agent, along with API credentials, is passed into the `configurationRestAPI` object used to initialize the `VIPLoan` client. Finally, it makes a sample call to the `getCollateralAssetData` endpoint via the `restAPI` interface and logs the response or catches errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport https from 'https';\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Dual Investment REST API Client with Retries - TypeScript\nDESCRIPTION: This snippet shows how to initialize the Binance Dual Investment REST API client in TypeScript with custom retry logic and backoff settings. It requires the '@binance/dual-investment' npm package and valid API credentials. The key parameters are 'apiKey' and 'apiSecret' for authentication, 'retries' for the number of retry attempts, and 'backoff' for the interval between retries in milliseconds. The code demonstrates asynchronous fetching of dual investment positions, proper handling of successful and error cases, and is intended for Node.js environments. Ensure all dependencies are installed and API credentials are securely managed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    retries: 5, // Retry up to 5 times\\n    backoff: 2000, // 2 seconds between retries\\n};\\nconst client = new DualInvestment({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getDualInvestmentPositions()\\n    .then((res) => res.data())\\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure retries and backoff for API requests using the Binance Derivatives Trading Portfolio Margin client. It sets up the client with an API key, secret, retry count, and backoff time, then makes a request for account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent and Binance Client for Derivatives Trading in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an HTTPS agent with SSL verification, set up the Binance Derivatives Trading USDS Futures client with API credentials, and make a sample API call to retrieve exchange information. It uses the @binance/derivatives-trading-usds-futures package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Using Binance Crypto Loan API with Key Pair in TypeScript\nDESCRIPTION: This code demonstrates how to authenticate with the Binance Crypto Loan API using key pair authentication. It initializes a CryptoLoan client with API key and private key credentials, then makes a request to retrieve flexible loan borrow history. The private key can be provided directly as a string or as a file path.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive for Binance Margin Trading Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the `MarginTrading` client from `@binance/margin-trading` to disable the HTTP keep-alive feature by setting `keepAlive: false` in the `configurationRestAPI` object. It requires the `@binance/margin-trading` package and valid Binance API credentials (key and secret, replaced with placeholders). The example concludes by fetching the margin account summary using `getSummaryOfMarginAccount` and logging the response data or any errors to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Connector with Compression Disabled - TypeScript\nDESCRIPTION: This snippet illustrates initializing the DerivativesTradingPortfolioMargin client from the '@binance/derivatives-trading-portfolio-margin' package with compression turned off. It details how to provide API credentials, create an API client instance, and asynchronously fetch account information. Dependencies include the package '@binance/derivatives-trading-portfolio-margin' and valid Binance API credentials. The key parameters are 'apiKey', 'apiSecret', and 'compression' in the configuration object. The expected input is a configuration object; the output is the account information logged to the console. If credentials are invalid or there are network errors, the error is output to stderr.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Copy Trading API\nDESCRIPTION: Demonstrates how to handle various error types when making API calls using the Binance Copy Trading connector. Includes handling of client errors, authentication issues, rate limits, server errors, and network problems.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    CopyTrading, \n    CopyTradingRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning with Binance Connector JS in TypeScript\nDESCRIPTION: This code demonstrates how to implement certificate pinning when using the Binance API. It creates a custom HTTPS agent that verifies the server's certificate public key against a pinned hash value and also validates the Subject Alternative Name. The snippet includes creating a client with the secure agent and making an API request.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing DerivativesTradingPortfolioMarginPro Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the DerivativesTradingPortfolioMarginPro client using key pair authentication. It configures the client with an API key, private key, and optional passphrase, then makes a sample API call to get portfolio margin account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Simple Earn Connector in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the Binance Simple Earn connector in TypeScript with keep-alive explicitly set to false. It shows how to instantiate the client with API credentials and perform a REST API request to retrieve the list of flexible earn products. Required dependencies include the '@binance/simple-earn' package and valid API key/secret; the main parameters are apiKey, apiSecret, and keepAlive. The expected input is the configuration object, and the output is the fetched list of products or error details if the request fails. Note that disabling keep-alive may affect connection performance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Pair Authentication and Querying Binance Fiat API in TypeScript\nDESCRIPTION: This TypeScript code initializes the Binance Fiat client using key pair-based authentication, requiring an API key and a private key (provided as a string or as a path to a PEM file), with optional support for an encrypted private key passphrase. It then executes a call to fetch fiat deposit/withdrawal history with a specified transaction type, logging the result or handling errors as appropriate. Dependencies include Node.js, the '@binance/fiat' package, and the ability to access local files if the private key is stored on disk.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Compression Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Derivatives Trading client with compression disabled. It also shows how to make an API call to fetch option account information using the configured client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Pay REST API Client with Retries in TypeScript\nDESCRIPTION: This code snippet demonstrates initializing the Binance Pay REST API client in TypeScript with custom retry parameters and backoff intervals. It imports the necessary classes from the '@binance/pay' package, sets up API key and secret authentication, and configures retry logic to attempt failed requests up to five times with a 2-second pause between retries. The snippet includes a call to 'getPayTradeHistory', logging the results, and handling errors via catch blocks. Dependencies include the '@binance/pay' npm package, valid API credentials, and a TypeScript runtime; input parameters are the API key, secret, and configuration options, with output logged to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance C2C Client in TypeScript\nDESCRIPTION: Demonstrates how to initialize a Binance C2C client with proxy configuration including host, port, protocol, and authentication details. Also shows how to make an API call to get C2C trade history using the configured client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Setting API Request Timeout in Binance Sub-Account JS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a custom timeout for REST API requests using the `@binance/sub-account` library. It initializes the `SubAccount` client by passing a `configurationRestAPI` object that includes an `apiKey`, `apiSecret`, and a `timeout` value (in milliseconds). A sample API call `getSummaryOfSubAccountsMarginAccount` is then made, with potential errors being caught and logged.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI.getSummaryOfSubAccountsMarginAccount().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Compression Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a client for the Binance Derivatives Trading USDS Futures API with compression disabled. It then makes a request for exchange information using the client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Copy Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Binance Copy Trading client with a custom timeout setting. It imports the required classes, creates a configuration object with API credentials and a 5000ms timeout, initializes the client, and makes a request to get futures leader trader status with error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI.getFuturesLeadTraderStatus().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing CryptoLoan Client and Querying Flexible Loan Borrow History in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a CryptoLoan client with compression disabled, and then use it to retrieve flexible loan borrow history. It includes error handling and type annotations for the response.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Binance Derivatives Trading Options API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a client for the Binance Derivatives Trading Options API and handle various types of errors that may occur during API requests. It includes error handling for common scenarios such as authentication issues, rate limiting, and network errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DerivativesTradingOptions,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring and Connecting Binance USDS Futures WebSocket Streams (TypeScript)\nDESCRIPTION: This snippet demonstrates initializing a WebSocket client for Binance USDS Futures using the '@binance/derivatives-trading-usds-futures' package in TypeScript. It configures the client to connect to the production WebSocket URL with data compression explicitly disabled by setting the 'compression' property to 'false'. Key parameters include the 'wsURL' for the endpoint and the 'compression' flag. The client is constructed with these options and then connects asynchronously, with outcomes logged or handled as errors. Dependencies: '@binance/derivatives-trading-usds-futures' and valid API network connectivity. The output is a connected WebSocket client or an error; there are no additional constraints.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-streams/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Pinning for Binance Rebate API in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to implement certificate pinning when interacting with the Binance API using the `@binance/rebate` library. It configures a custom `https.Agent`, loads a trusted CA certificate, verifies the server's Subject Alternative Name (SAN), and validates the server's public key against a predefined pinned hash using the `checkServerIdentity` function. The configured agent is then used to initialize the `Rebate` client for secure API calls. Dependencies include `fs`, `https`, `crypto`, and `@binance/rebate`.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \\\"expected-cn.com\\\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance Crypto Loan API in TypeScript\nDESCRIPTION: Sets up a secure HTTPS agent configuration and initializes a Binance Crypto Loan API client. The code demonstrates how to create a secure connection, configure API credentials, and make a request to fetch flexible loan borrow history.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Fetching Dual Investment Positions with Binance Connector (TypeScript)\nDESCRIPTION: This TypeScript code snippet outlines how to use key pair-based authentication to access Binance's Dual Investment REST API via the binance-connector-js library. It imports required dependencies, sets up API credentials (including how to specify or read the private key and optional passphrase), creates a configuration object, and instantiates the DualInvestment client. The code then performs an asynchronous call to fetch all current dual investment positions, processes the API response, and handles potential errors. Dependencies include Node.js, fs, and @binance/dual-investment, and use of valid credentials is required.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI\n    .getDualInvestmentPositions()\n    .then((res) => res.data())\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Convert Client with Compression Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Convert client with custom configuration, specifically disabling compression. It then uses the client to list all convert pairs and log the response data.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Sub-Account Client with Retry Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to set up the `@binance/sub-account` client with custom retry logic. It specifies 5 retry attempts (`retries: 5`) and a 2-second backoff period (`backoff: 2000`) between retries within the `configurationRestAPI` object. The initialized client is then used to call the `getSummaryOfSubAccountsMarginAccount` endpoint, handling the response or potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Logic for Binance Wallet REST API Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure retry behavior for the `@binance/wallet` REST API client. It sets the `retries` option to 5 and the `backoff` time to 2000 milliseconds (2 seconds) within the `configurationRestAPI` object. An instance of the `Wallet` client is created with these settings, and a sample API call to `accountInfo` is made, logging the result or any errors encountered. Requires the `@binance/wallet` package and valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a proxy configuration for the Binance Derivatives Trading Portfolio Margin Pro API client. It includes API key authentication, proxy server details, and an example API request to fetch account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Connecting Binance Spot WebSocket - Typescript\nDESCRIPTION: This snippet demonstrates how to configure and initialize a Binance Spot WebSocket client using the binance-connector-js package in Typescript. It imports the necessary modules, disables compression via the configuration object, and creates a Spot client instance with these settings. The client connects to the official production streams URL and logs the result or errors to the console. Prerequisites: install @binance/spot package; required parameters: none unless customizing the connection; output: a Promise resolving on connection or logging an error.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n    compression: false, // Disable compression\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Algo API Client with Key-Pair Authentication in TypeScript\nDESCRIPTION: Demonstrates how to configure and initialize the Binance Algo API client using key-pair authentication. The example shows setting up the client with an API key, private key (either as content or file path), and optional passphrase, followed by a sample query to fetch historical algo orders.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Wallet REST API Client in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure the Binance Wallet REST API client by specifying API authentication keys and enabling or disabling response compression (here, set to false). The example imports the necessary dependencies from the Binance connector library, sets up the configuration object, and initializes the client. It then calls the accountInfo method to asynchronously retrieve the account's information, handling both the response and any errors. Prerequisites include installing the '@binance/wallet' package and providing valid API credentials. Inputs required are an API key and secret; the output is the account information in the expected WalletRestAPI.AccountInfoResponse format.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Copy Trading Client with Key Pair Authentication in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up and use the Binance Copy Trading client with key pair based authentication. It configures the client with an API key, private key (either as content or file path), and an optional passphrase for encrypted keys. The code then makes an API call to retrieve the futures lead trader status.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance VIP Loan Client with Keep-Alive Disabled in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@binance/vip-loan` client with specific REST API settings. It imports necessary modules, defines a configuration object `configurationRestAPI` including API credentials and setting `keepAlive` to `false` (disabling the default keep-alive behavior). An instance of `VIPLoan` is created with this configuration, and then it makes an asynchronous call to the `getCollateralAssetData` endpoint, logging the response data or any potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive for Binance Derivatives REST API Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the `DerivativesTradingOptions` client from `@binance/derivatives-trading-options` to disable the default keep-alive setting for HTTP connections to the REST API. It involves setting `keepAlive: false` within the `configurationRestAPI` object during client initialization. The example then proceeds to fetch option account information using the configured client. Requires the `@binance/derivatives-trading-options` package and placeholder API credentials (`your-api-key`, `your-api-secret`) should be replaced with actual ones.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Copy Trading API Client in TypeScript\nDESCRIPTION: This snippet initializes a CopyTrading client with custom configuration, disabling compression. It then makes an API call to get the futures lead trader status. The code requires the @binance/copy-trading package and valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Client with Custom Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Derivatives Trading Coin Futures client with custom configuration, specifically disabling compression. It then makes an API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive for Binance NFT REST API Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance NFT client (`NFT` from `@binance/nft`) with a specific configuration (`configurationRestAPI`) that disables the default keep-alive behavior by setting `keepAlive` to `false`. It requires your API key and secret. After initialization, it attempts to fetch NFT assets using `getNFTAsset` and logs the response or any errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Portfolio Margin Pro Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure and initialize a Binance Derivatives Trading Portfolio Margin Pro client with compression disabled. It then makes an API call to retrieve portfolio margin account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive and Querying Binance Pay Trade History with TypeScript\nDESCRIPTION: This code demonstrates how to initialize a Binance Pay REST API client in TypeScript with the keepAlive option explicitly set to false (default is true). It requires the '@binance/pay' package and valid API credentials (apiKey, apiSecret). The snippet shows the instantiation of the Pay client, then performs an asynchronous request to get payment trade history, handling results and errors with promises. Input parameters include your Binance API key details and the keepAlive setting, and outputs either a response object containing trade history or logged errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    keepAlive: false, // Default is true\\n};\\nconst client = new Pay({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getPayTradeHistory()\\n    .then((res) => res.data())\\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleEarn Client with Key Pair Auth (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `SimpleEarn` client for REST API interactions using key pair authentication. It imports necessary modules, defines configuration with API key, private key (content or file path), and an optional passphrase. It then creates the client instance and makes an asynchronous call to `getSimpleEarnFlexibleProductList`, logging the response data or any errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/rest-api/key-pair-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst apiKey = 'your-api-key';\nconst privateKey = 'your-private-key-content-or-file-path'; // Provide the private key directly as a string or specify the path to a private key file (e.g., '/path/to/private_key.pem')\nconst privateKeyPassphrase = 'your-passphrase'; // Optional: Required if the private key is encrypted\n\nconst configurationRestAPI = {\n    apiKey,\n    privateKey,\n    privateKeyPassphrase,\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n\nclient.restAPI\n    .getSimpleEarnFlexibleProductList()\n    .then((res) => res.data())\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Binance Crypto Loan API Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a CryptoLoan client with retry configuration parameters and make an API request to fetch flexible loan borrow history. The configuration includes setting the API key, API secret, number of retry attempts, and backoff time between retries.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance Copy Trading API in TypeScript\nDESCRIPTION: Example shows how to set up a secure HTTPS agent for Binance Copy Trading API, configure API credentials, and make a request to get futures lead trader status. The code creates an HTTPS agent with SSL verification enabled and initializes the Copy Trading client with API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Gift Card Client with Retries in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize the `GiftCard` client from `@binance/gift-card` with custom retry settings. It specifies 5 retries (`retries: 5`) with a 2000ms (2 seconds) backoff period (`backoff: 2000`) between attempts. The configured client is then used to make a `createASingleTokenGiftCard` API call. Requires valid Binance API credentials (`apiKey`, `apiSecret`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive and Fetching Account Info with Binance Wallet (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Wallet connector with a custom configuration where keep-alive is disabled, and shows how to retrieve account information via the REST API. The dependencies include '@binance/wallet' and require providing an API key and secret as configuration. The key parameters are 'apiKey', 'apiSecret', and 'keepAlive', with the account information response being logged to the console. This example expects valid API credentials and assumes network access to Binance endpoints.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Convert API Client with Keep-Alive in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Binance Convert API client with custom keep-alive settings and make a request to list all convert pairs. It includes API key and secret configuration, as well as error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance Staking Client with Compression Disabled (TypeScript)\nDESCRIPTION: This snippet shows how to initialize the Binance Staking client using configuration that disables compression in the REST API. The required dependency is the '@binance/staking' package. Key configuration parameters include 'apiKey', 'apiSecret', and 'compression'. It demonstrates calling 'claimBoostRewards', handling the promise-based response, and capturing both success and failure cases. The code expects valid Binance API credentials and assumes network connectivity.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with New Fiat Package (TypeScript)\nDESCRIPTION: Demonstrates the new, modular way to initialize the Binance Fiat API client using the `@binance/fiat` package. Configuration details (API key/secret) are passed within a `configurationRestAPI` object, and REST methods are accessed via `client.restAPI`.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Client Initialization with New C2C Module\nDESCRIPTION: Updated approach for initializing a client with the new modularized C2C package, showing the new structure with separate REST API configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI.exchangeInfo().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Using REST API in Binance Derivatives Trading Options\nDESCRIPTION: Example of how to use the REST API to fetch option account information. It demonstrates creating a client instance and making an API call.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Fiat REST API Client in TypeScript\nDESCRIPTION: This TypeScript snippet initializes the Binance Connector's Fiat REST API client with a configured timeout, API key, and secret. The snippet imports necessary modules, constructs the configuration with a 5000ms timeout, and creates a client instance. A call to get fiat deposit and withdrawal history is made, demonstrating usage of the configured client and handling possible errors. Dependencies include the '@binance/fiat' package, and the primary input is a configuration object with authentication and timeout settings. The output is the fiat deposit and withdrawal history, or an error message if the request fails or times out.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    timeout: 5000,\\n};\\nconst client = new Fiat({ configurationRestAPI });\\n\\nclient.restAPI.getFiatDepositWithdrawHistory().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebSocket Streams for Real-time Data in TypeScript\nDESCRIPTION: Demonstrates how to connect to Binance WebSocket Streams for real-time market data. The example subscribes to aggregated trade data for the BNBUSDT symbol and logs incoming messages.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {\n        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });\n        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Binance Copy Trading TypeScript Client\nDESCRIPTION: Shows how to initialize a Copy Trading client with custom retry settings and make an API call to get futures leader trader status. The configuration includes retry count and backoff interval settings for handling transient failures.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Pinning for Binance Wallet API Calls in TypeScript\nDESCRIPTION: This TypeScript code demonstrates setting up certificate pinning for secure API communication using the `@binance/wallet` library. It involves importing necessary modules (`fs`, `https`, `crypto`, `@binance/wallet`), defining the expected server public key hash (SPKI SHA-256), optionally loading a trusted CA certificate, and creating a custom `https.Agent`. The agent's `checkServerIdentity` function verifies the server certificate's Subject Alternative Name (SAN) and compares its public key hash against the predefined pinned hash. This custom agent is then used in the `Wallet` client configuration to ensure connections are only made to the intended server.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/certificate-pinning.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport fs from 'fs';\nimport https from 'https';\nimport crypto from 'crypto';\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\n// Expected pinned public key (SPKI SHA-256 hash)\n// You can extract it from the certificate using openssl:\n// openssl s_client -connect your-api.com:443 </dev/null 2>/dev/null | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64\nconst PINNED_PUBLIC_KEY = 'YOUR-PINNED-PUBLIC-KEY';\n\n// Load the trusted CA certificate (optional but recommended)\nconst trustedCert = fs.readFileSync('/path/to/certificate.pem');\n\nconst httpsAgent = new https.Agent({\n    ca: trustedCert, // Ensures only the specific CA is trusted\n    checkServerIdentity: (host, cert) => {\n        // Verify Subject Alternative Name (SAN)\n        if (!cert.subjectaltname.includes('DNS:expected-cn.com')) {\n            throw new Error(\n                `Certificate SAN mismatch: expected \"expected-cn.com\", got ${cert.subjectaltname}`\n            );\n        }\n        const publicKey = cert.pubkey;\n        const publicKeyHash = crypto.createHash('sha256').update(publicKey).digest('base64');\n        if (publicKeyHash !== PINNED_PUBLIC_KEY) {\n            throw new Error(\n                `Certificate pinning validation failed: expected ${PINNED_PUBLIC_KEY}, got ${publicKeyHash}`\n            );\n        }\n    },\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTPS Agent for Binance Rebate API Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Rebate API client (`@binance/rebate`) with a custom `https.Agent`. It specifically configures the agent to enforce certificate validation (`rejectUnauthorized: true`). The example then uses the configured client to fetch spot rebate history records and logs the response or any errors. Requires the `https` module, the `@binance/rebate` library, and valid Binance API key/secret.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Proxy with Binance Mining REST API in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize the Binance Mining REST API client with a proxy configuration, including HTTP/S support and optional proxy authentication. The code requires the '@binance/mining' npm package. The configuration object specifies API credentials as well as proxy details such as host, port, protocol, and credentials. The client then uses the acquiringAlgorithm endpoint and logs results to the console or any encountered errors. Inputs include API keys and proxy information; output is the API response logged to the console. Developers should ensure network connectivity to the proxy and valid credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Setting in Binance C2C API\nDESCRIPTION: This example demonstrates how to initialize the Binance C2C client with keep-alive disabled. The client is configured with API credentials and the keep-alive option set to false (default is true). After initialization, the example shows how to make a request to get C2C trade history and handle the response.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive for Binance Derivatives API in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Binance Derivatives Trading Coin Futures client with Keep-Alive disabled. The example shows configuration setup with API credentials and then makes a request to fetch exchange information. By default, Keep-Alive is set to true but can be disabled as shown.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Migration Step 4: Updating Client Initialization (TypeScript)\nDESCRIPTION: Provides the updated code for initializing the client using the new `@binance/sub-account` package structure. It demonstrates creating a configuration object and instantiating the `SubAccount` client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new SubAccount({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Migration Step: New Client Initialization\nDESCRIPTION: Updated approach for client initialization with the new modularized package, showing the complete pattern with imports.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new C2C({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: New Spot Client Initialization\nDESCRIPTION: Updated way of initializing the Spot client and making API calls with the modular connector. Includes configuration object with API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Spot({ configurationRestAPI });\n\nclient.restAPI.getAccount().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Old Connector (TypeScript)\nDESCRIPTION: Illustrates the previous method of initializing the Binance client using the `Spot` class from the monolithic `@binance/connector` package, passing API key and secret directly.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Algo Client (New Method)\nDESCRIPTION: Example of how to initialize the Binance Algo client using the new modularized package in TypeScript, including configuration for REST API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout for Binance Pay Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@binance/pay` client (`Pay`) with a custom REST API configuration that includes a `timeout` property set to 5000 milliseconds (5 seconds). It then attempts to fetch the pay trade history using `client.restAPI.getPayTradeHistory()` and includes basic error handling to catch potential issues, such as a timeout error if the request exceeds the specified duration. Requires the `@binance/pay` library and valid Binance API credentials (`apiKey`, `apiSecret`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI.getPayTradeHistory().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebSocket Streams in TypeScript\nDESCRIPTION: This example shows how to connect to WebSocket Streams, subscribe to the all book tickers stream, and handle incoming messages. It uses the production URL for the connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Compression for Binance Derivatives API in TypeScript\nDESCRIPTION: Shows how to initialize a Derivatives Trading Coin Futures client with specific WebSocket stream configuration. The example demonstrates disabling compression for WebSocket connections and establishing a connection to the production WebSocket URL.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-streams/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Convert API Client with Timeout in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Convert API client with a custom timeout setting. It imports necessary classes, sets up configuration including API credentials and timeout, initializes the client, and makes a sample API call to list all convert pairs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI.listAllConvertPairs().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Setting in Binance Auto-Invest TypeScript Client\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Auto-Invest client with keep-alive disabled. It configures the API credentials and keep-alive setting, then makes a request to query all source assets and target assets using the client.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Claiming Rewards with Binance Connector (TypeScript)\nDESCRIPTION: This TypeScript snippet configures the Binance staking REST API client to use a proxy while providing API credentials and proxy authentication. Dependencies include the '@binance/staking' package and valid API credentials. The proxy settings require host, port, protocol, and optional authentication fields for accessing the API through a proxy server. The snippet demonstrates claiming staking boost rewards using client.restAPI.claimBoostRewards() and handling the asynchronous response or errors. Inputs are proxy/API details, and outputs are logging reward response data. Credentials should be securely managed in production.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive for Binance Derivatives Trading USDS Futures in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Derivatives Trading USDS Futures client with a custom keep-alive configuration set to false. It then makes an API call to fetch exchange information. The keep-alive option is set to false, which is different from the default true value.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Instantiating VIPLoan REST API Client - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import and configure the VIPLoan REST API client from the @binance/vip-loan package. The example sets up the required API key, secret, and disables compression in the client configuration. After instantiating the client, it retrieves collateral asset data using the restAPI interface, processes the response using promises, and handles both success and error cases. This requires the @binance/vip-loan dependency and valid Binance API credentials; inputs include credential values and the compression flag.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Dual Investment Library - Bash\nDESCRIPTION: This snippet shows how to install the '@binance/dual-investment' package from npm using the npm package manager. It ensures that all required dependencies for the Binance Dual Investment JavaScript connector are downloaded and correctly added to the project's node_modules. The command expects a properly initialized npm project and outputs installation progress or errors encountered during package resolution.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/dual-investment\n```\n\n----------------------------------------\n\nTITLE: Importing Spot Client (New Method - TypeScript)\nDESCRIPTION: This snippet shows the updated import statement required for the new modular `@binance/spot` package. The `Spot` class is now imported directly from this new package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/spot';\n```\n\n----------------------------------------\n\nTITLE: Initializing Crypto Loan Client (New Method)\nDESCRIPTION: Client initialization with the new modularized Crypto Loan package, which uses a more structured configuration approach.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance DualInvestment API Client in TypeScript\nDESCRIPTION: This snippet demonstrates initializing the DualInvestment client from the '@binance/dual-investment' package with custom API credentials and a request timeout setting. It initializes the client using a configuration object that provides 'apiKey', 'apiSecret', and 'timeout' (in milliseconds), then calls 'getDualInvestmentPositions' and handles potential errors via a catch block. Dependencies include valid Binance API credentials and the '@binance/dual-investment' NPM package; output is logged errors (if any) upon unsuccessful requests, while successful execution returns dual investment positions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    timeout: 5000,\\n};\\nconst client = new DualInvestment({ configurationRestAPI });\\n\\nclient.restAPI.getDualInvestmentPositions().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Mining Client with Retry Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `Mining` client from the `@binance/mining` library. It configures the client to automatically retry failed REST API requests up to 5 times with a 2-second backoff period between attempts by setting the `retries` and `backoff` properties in the `configurationRestAPI` object. An example API call to `acquiringAlgorithm` is made to illustrate the usage. Dependencies include the `@binance/mining` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Auto-Invest API with Timeout in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Auto-Invest API client with a custom timeout setting and make a basic API call. It includes setting up the configuration object with API credentials and a 5-second timeout, creating the client instance, and querying all source and target assets.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI.queryAllSourceAssetAndTargetAsset().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent for Binance Derivatives Trading in TypeScript\nDESCRIPTION: This code sets up a WebSocket client for Binance Derivatives Trading Options. It configures a proxy agent, initializes the client with the production WebSocket URL, and establishes a connection. The HttpsProxyAgent is used for proxy support.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/websocket-streams/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n    agent: new HttpsProxyAgent('your-proxy-url'),\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Crypto Loan API in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a CryptoLoan client with a configured timeout value of 5000ms. It imports the necessary classes, sets up the configuration object with API credentials and timeout, creates a client instance, and makes an API request with error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI.getFlexibleLoanBorrowHistory().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance Convert API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Convert client with proxy configuration. It shows the initialization with API credentials and proxy settings including host, port, protocol, and authentication, followed by making a request to list all convert pairs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI\n    .listAllConvertPairs()\n    .then((res) => res.data())\n    .then((data: ConvertRestAPI.ListAllConvertPairsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Binance Sub-Account Connector in TypeScript\nDESCRIPTION: This snippet demonstrates comprehensive error handling for the Binance Sub-Account REST API using TypeScript and the `@binance/sub-account` library. It initializes the client with API credentials, attempts to fetch the summary of sub-account margin accounts (`getSummaryOfSubAccountsMarginAccount`), and uses a `.catch()` block to differentiate between various specific error types (like `ConnectorClientError`, `RequiredError`, `UnauthorizedError`, `ForbiddenError`, `TooManyRequestsError`, `RateLimitBanError`, `ServerError`, `NetworkError`, `NotFoundError`, `BadRequestError`) imported from the library. Specific console error messages are logged based on the identified error type, providing detailed feedback for debugging.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    SubAccount,\n    SubAccountRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError,\n    NotFoundError,\n    BadRequestError\n} from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Binance Algo API in TypeScript\nDESCRIPTION: This snippet shows how to initialize an Algo client with compression disabled. It sets up the client configuration, creates the client instance, and makes a request to query historical algo orders. The compression option is set to false to disable compression for API requests.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version for Binance Derivatives Trading USDS-M Futures\nDESCRIPTION: Commands to install and use the required Node.js version (22.12.0) using nvm (Node Version Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Importing Rebate Client (New Modular Package)\nDESCRIPTION: Shows the updated way to import the main `Rebate` class from the new `@binance/rebate` package. This replaces the old import method for Rebate-related interactions as part of the migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate } from '@binance/rebate';\n```\n\n----------------------------------------\n\nTITLE: Installing New Binance Sub-Account Package (Bash)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the new modular `@binance/sub-account` package. This package specifically contains the functionalities for interacting with the Binance Sub Account API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/sub-account\n```\n\n----------------------------------------\n\nTITLE: Migration Step 2: Install Command\nDESCRIPTION: Specifies the command to install the new `@binance/staking` package as the second step in the migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/staking\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Auto Invest Client (New Method) in TypeScript\nDESCRIPTION: Shows how to initialize the Binance Auto Invest client using the new modular package structure, including configuration for REST API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/migration_guide_auto_invest_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout in Binance Connector SDK (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Connector SDK with a custom timeout setting when authenticating with the Rebate API. It requires the '@binance/rebate' package, and expects valid API credentials for 'apiKey' and 'apiSecret'. The configuration object sets a 5000 ms request timeout for REST calls. The example shows fetching spot rebate history records using the client, with error handling via a catch block. Input parameters: API credentials and timeout value; output: rebate history data from Binance or an error if the request fails.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI.getSpotRebateHistoryRecords().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance NFT Client with Retries in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to instantiate the `NFT` client from the `@binance/nft` library, configuring it with API credentials and custom retry settings (5 retries with a 2-second backoff). It then demonstrates making a call to the `getNFTAsset` endpoint of the REST API and handling the response or potential errors. The `retries` parameter controls the maximum number of attempts, and `backoff` specifies the delay in milliseconds between each retry.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new NFT({ configurationRestAPI });\n\nclient.restAPI\n    .getNFTAsset()\n    .then((res) => res.data())\n    .then((data: NFTRestAPI.GetNFTAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: Shows how to initialize the Binance Derivatives Trading API client with a custom timeout setting of 5000ms. The example includes setting up the client configuration with API credentials and making a sample API call to fetch exchange information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI.exchangeInformation().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection for Binance Derivatives Trading Options in TypeScript\nDESCRIPTION: This code initializes a WebSocket client for Binance Derivatives Trading Options. It configures the connection to use pool mode with 3 connections and sets the WebSocket URL to the production stream URL. The client is then connected with error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/websocket-streams/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n    mode: 'pool', // Use pool mode\n    poolSize: 3, // Number of connections in the pool\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Using the REST API client in TypeScript\nDESCRIPTION: Example of how to initialize and use the REST API client to fetch portfolio margin pro account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent with Proxy for Binance Derivatives Trading\nDESCRIPTION: Sets up a WebSocket connection with proxy support for Binance's derivatives trading platform. Uses HttpsProxyAgent for proxy configuration and initializes a DerivativesTradingCoinFutures client with custom WebSocket stream settings.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-streams/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n    agent: new HttpsProxyAgent('your-proxy-url'),\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Handling Gift Card API Errors with Binance Connector in TypeScript\nDESCRIPTION: Illustrates creating an instance of the Binance Gift Card client and using it to send a request to create a single-token gift card, with comprehensive error handling for common scenarios such as missing parameters, authentication failures, rate limiting, server errors, and network issues. Requires the '@binance/gift-card' package and valid API credentials. Expects the 'token' and 'amount' parameters when creating a gift card, and logs the result or an error-specific message to the console. The output is either the created gift card data or a descriptive error message, depending on the result.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { \n    GiftCard, \n    GiftCardRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression and Creating Gift Cards - Binance Connector TypeScript\nDESCRIPTION: This snippet shows how to initialize the Binance Gift Card client in TypeScript by importing required classes from the '@binance/gift-card' module and configuring it with 'apiKey', 'apiSecret', and 'compression' options (compression disabled). It demonstrates creating a single token gift card with the 'createASingleTokenGiftCard' method, handling successful responses and errors with promise-based syntax. Dependencies include the Binance Connector SDK and valid Binance API credentials; key parameters are the authentication details and the token/amount for the gift card. The output is the gift card creation response, logged to the console. Ensure the API credentials are kept secure and replace placeholders before use.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Complete Client Initialization Example (New Method)\nDESCRIPTION: Full example of client initialization with the new modularized Crypto Loan package, showing the complete import and configuration setup.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Uninstalling the Old Binance Connector Package using npm\nDESCRIPTION: This command removes the previous monolithic `@binance/connector` package from a Node.js project using the npm package manager. This is the first step in the migration process to the new modular package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Migration Step 2: Installing New Package (Bash)\nDESCRIPTION: This command, as part of the step-by-step migration guide, installs the new `@binance/sub-account` package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/sub-account\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Crypto Loan Client\nDESCRIPTION: Example of initializing the Crypto Loan client with API credentials and making a REST API call to get flexible loan borrow history.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Querying Binance Fiat API with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a Binance Fiat client using a proxy server and access the `getFiatDepositWithdrawHistory` endpoint. It requires the `@binance/fiat` library, and assumes the user has a valid API key and secret. The proxy object includes host, port, protocol, and authentication details for routing requests securely. The code initializes the API client and retrieves fiat deposit and withdrawal history, handling the asynchronous promise chain and logging results or errors to the console. Required parameters include API credentials and proxy server details. Inputs are provided in the configurationRestAPI object; outputs are printed to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Binance Derivatives Trading WebSocket API in TypeScript\nDESCRIPTION: This code initializes a DerivativesTradingUsdsFutures client with custom WebSocket API configuration, disabling compression. It then connects to the WebSocket API and retrieves position information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Websocket Time Units with Binance Connector (TypeScript)\nDESCRIPTION: This code snippet configures the Binance Spot connector with a custom websocket stream time unit set to microseconds. It demonstrates importing required classes and constants from the '@binance/spot' package, setting up the websocket configuration object, instantiating the Spot API client, and connecting to real-time aggregated trade data for a given symbol (BNBUSDT). Dependencies: '@binance/spot' library. Required parameters include wsURL and timeUnit for connection configuration. Expected input is a valid symbol string, output is streamed trade data logged to console. The code is suitable for scenarios requiring high-precision timestamping and real-time stream handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/time-unit.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, TimeUnit, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n    timeUnit: TimeUnit.MICROSECOND, // Set time unit to microseconds\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {\n        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });\n        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive for Staking API in Binance Connector JS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Staking client with a custom configuration, specifically setting the 'keepAlive' property to false (overriding the default of true). The code sets up the API credentials, creates a client, and performs a boost rewards claim operation via the REST API. Key parameters include 'apiKey', 'apiSecret', and 'keepAlive'. Inputs are your API credentials; the output is a console log of the claim boost rewards response or an error message if the call fails. The snippet requires the '@binance/staking' package and valid API credentials. Limitations: Real credentials are needed for live API use; ensure secrets are handled securely.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI\n    .claimBoostRewards()\n    .then((res) => res.data())\n    .then((data: StakingRestAPI.ClaimBoostRewardsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive for Binance Fiat Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `@binance/fiat` client with the `keepAlive` option set to `false` in the `configurationRestAPI` object. It then uses the initialized client to fetch the fiat deposit and withdraw history for transaction type '0' (deposit) and logs the result or any errors. Disabling `keepAlive` (which defaults to true) might be necessary in environments where persistent connections are not desired or cause issues.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Agent for Binance Connector in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates setting up the Binance Spot WebSocket client with a custom HTTPS proxy agent for network requests. It imports dependencies like 'https-proxy-agent' for proxy configuration and '@binance/spot' for access to Binance Spot API and WebSocket streams. The key parameters include the WebSocket URL and the proxy agent instance. The script initializes the Spot client with these settings and connects using 'client.websocketStreams.connect()', returning a Promise that handles connection result via console log or error. Ensure all dependencies are installed and a valid proxy URL is provided. Limited to proxy-supported environments.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-streams/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n    agent: new HttpsProxyAgent('your-proxy-url'),\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Handling Specific API Errors for Account Info Request in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to instantiate the `@binance/wallet` client and make a request to the `accountInfo` REST API endpoint. It includes a comprehensive `.catch()` block that uses `instanceof` checks to identify and log specific error messages for different error types defined in the library, such as `ConnectorClientError`, `RequiredError`, `UnauthorizedError`, `ForbiddenError`, rate limit errors, server errors, network errors, and bad request errors. Requires valid Binance API credentials (key and secret) for configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Wallet,\n    WalletRestAPI,\n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI\n    .accountInfo()\n    .then((res) => res.data())\n    .then((data: WalletRestAPI.AccountInfoResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance DualInvestment Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance DualInvestment client with a custom proxy configuration using the '@binance/dual-investment' package. It sets up proxy options such as host, port, protocol, and authentication, enabling API requests to pass through the specified proxy. The example includes fetching dual investment positions and handling responses or errors, with required parameters like API key and secret. Dependencies include TypeScript and the Binance DualInvestment SDK, and the snippet must be run in a Node.js environment. Inputs are proxy and API credentials, while the output is logged API response data.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI\n    .getDualInvestmentPositions()\n    .then((res) => res.data())\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Updating Package Installation using NPM (Bash)\nDESCRIPTION: Demonstrates the NPM commands required to uninstall the old monolithic `@binance/connector` package and install the new modular `@binance/vip-loan` package. This is presented as a key change in the migration process.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/vip-loan\n```\n\n----------------------------------------\n\nTITLE: Importing Client from Old Monolithic Package (TypeScript)\nDESCRIPTION: Illustrates the deprecated method of importing the `Spot` client class from the monolithic `@binance/connector` package. This import path needs to be updated during migration, as shown in both the 'Key Changes' and 'Migration Steps' sections.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Crypto Loan Package with NPM\nDESCRIPTION: Command to uninstall the old monolithic connector package and install the new modularized crypto loan package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/crypto-loan\n```\n\n----------------------------------------\n\nTITLE: Updated Client Configuration Example\nDESCRIPTION: Complete example of initializing the Copy Trading client with the new configuration structure\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new CopyTrading({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from WebSocket Streams in TypeScript\nDESCRIPTION: This snippet demonstrates how to unsubscribe from a specific WebSocket stream after a certain time period. It connects to the all book tickers stream and then unsubscribes after 10 seconds.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n\n        setTimeout(() => {\n            stream.unsubscribe();\n            console.log('Unsubscribed from allBookTickersStream stream');\n        }, 10000);\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy and Making API Request with Binance Crypto Loan in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a CryptoLoan client with proxy configuration and make a request to get flexible loan borrow history. It includes proxy settings with authentication and error handling for the API call.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnect Delay for Binance Derivatives Trading WebSocket Streams in TypeScript\nDESCRIPTION: This code configures a DerivativesTradingCoinFutures client with a custom reconnect delay of 3 seconds for WebSocket streams. It then connects to the streams and subscribes to the all book tickers stream, logging received data to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-streams/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_STREAMS_PROD_URL,\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing and Using REST API Configuration Types - TypeScript\nDESCRIPTION: This snippet shows how to import the ConfigurationRestAPI type from @binance/types and define a configuration object for use with Binance REST APIs. The code sets up required fields like apiKey and apiSecret, which are essential parameters for authenticating REST API calls. Proper usage ensures that configuration is type-safe and compatible with all Binance connectors relying on these shared definitions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/types/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ConfigurationRestAPI } from '@binance/types';\n\nconst config: ConfigurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Binance GiftCard REST API Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Gift Card REST API client from the '@binance/gift-card' package with custom API credentials and the 'keepAlive' option set to false, overriding the default value. It shows the process of generating a single token gift card via the 'createASingleTokenGiftCard' endpoint, handling the response asynchronously, and logging output or errors. Dependencies include the '@binance/gift-card' library and valid Binance API credentials. Required inputs are the token code and amount; expected output is the API's gift card creation response. Ensure network connectivity and correct API key permissions; only use this in secure server environments, as credentials are required.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    keepAlive: false, // Default is true\\n};\\nconst client = new GiftCard({ configurationRestAPI });\\n\\nclient.restAPI\\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\\n    .then((res) => res.data())\\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance C2C API in TypeScript\nDESCRIPTION: This code initializes a C2C client with custom retry settings and makes a request to fetch C2C trade history. It sets up 5 retry attempts with a 2-second backoff between retries.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Streaming with Binance Connector - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure and initialize a Binance USDS Futures WebSocket connection using pool mode with the '@binance/derivatives-trading-usds-futures' library. It imports the necessary modules, sets up a configuration object for the WebSocket stream (specifying URL, connection mode, and pool size), and instantiates the client with these settings. The client attempts to establish the WebSocket connection and provides handlers for success and error logging. Dependencies: '@binance/derivatives-trading-usds-futures'. Required parameters are 'wsURL', 'mode', and 'poolSize'. Input: API configuration for WebSocket streaming. Output: Console logs for success or errors. Limitations: Requires internet connectivity and appropriate API permissions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-streams/connection-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\\n\\nconst configurationWebsocketStreams = {\\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\\n    mode: 'pool', // Use pool mode\\n    poolSize: 3, // Number of connections in the pool\\n};\\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\\n\\nclient.websocketStreams.connect().then(console.log).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Handling Dual Investment API Errors Using Binance Connector in TypeScript\nDESCRIPTION: This TypeScript snippet initializes a Dual Investment client with API credentials and queries the user\\'s dual investment positions through the Binance Connector. It provides a detailed error handling routine that distinguishes between various error classes thrown by the SDK, such as authorization issues, rate limiting, and network/server failures. Dependencies include the @binance/dual-investment SDK and valid API credentials; the main input is the configuration with API key/secret, while the main output is either the position data or detailed console error logs based on the failure type.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n    DualInvestment, \n    DualInvestmentRestAPI, \n    ConnectorClientError,\n    RequiredError,\n    UnauthorizedError,\n    ForbiddenError,\n    TooManyRequestsError,\n    RateLimitBanError,\n    ServerError,\n    NetworkError.\n    NotFoundError,\n    BadRequestError\n} from '@binance/dual-investment';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI\n    .getDualInvestmentPositions()\n    .then((res) => res.data())\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\n    .catch((err) => {\n        if (err instanceof ConnectorClientError) {\n            console.error('Client error: Check your request parameters.', err);\n        } else if (err instanceof RequiredError) {\n            console.error('Missing required parameters.', err);\n        } else if (err instanceof UnauthorizedError) {\n            console.error('Unauthorized: Invalid API credentials.', err);\n        } else if (err instanceof ForbiddenError) {\n            console.error('Forbidden: Check your API key permissions.', err);\n        } else if (err instanceof TooManyRequestsError) {\n            console.error('Rate limit exceeded. Please wait and try again.', err);\n        } else if (err instanceof RateLimitBanError) {\n            console.error('IP address banned due to excessive rate limits.', err);\n        } else if (err instanceof ServerError) {\n            console.error('Server error: Try again later.', err);\n        } else if (err instanceof NetworkError) {\n            console.error('Network error: Check your internet connection.', err);\n        } else if (err instanceof NotFoundError) {\n            console.error('Resource not found.', err);\n        } else if (err instanceof BadRequestError) {\n            console.error('Bad request: Verify your input parameters.', err);\n        } else {\n            console.error('An unexpected error occurred:', err);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring REST API client for Testnet in TypeScript\nDESCRIPTION: Example of how to configure the REST API client to use the Futures Testnet for testing purposes.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro, DERIVATIVES_TRADING_PORTFOLIO_MARGIN_REST_API_TESTNET_URL } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    basePath: DERIVATIVES_TRADING_PORTFOLIO_MARGIN_REST_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Migration Step 3: New Import Example\nDESCRIPTION: Provides the replacement TypeScript import statement using the new `@binance/staking` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking } from '@binance/staking';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Binance Packages with npm - Bash\nDESCRIPTION: These bash code snippets show the commands needed to uninstall the old @binance/connector npm package and install the new @binance/margin-trading package. Running 'npm uninstall @binance/connector' removes the previous library, while 'npm install @binance/margin-trading' fetches and adds the new modular Margin Trading connector as a project dependency. Both commands must be run in the project's root directory with an initialized npm environment.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/migration_guide_margin_trading_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/margin-trading\n```\n\n----------------------------------------\n\nTITLE: New Futures Client Initialization\nDESCRIPTION: Updated way of initializing the Futures client and making API calls with the modular connector. Includes configuration object with API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI.accountInformation().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTPS Agent for Binance Pay Client in TypeScript\nDESCRIPTION: This snippet shows how to create a custom Node.js `https.Agent` (e.g., to enforce certificate validation with `rejectUnauthorized: true`) and provide it during the initialization of the `@binance/pay` client via the `configurationRestAPI` object. It then demonstrates using the configured client to fetch the user's pay trade history from the Binance Pay REST API. Dependencies include the `https` module and `@binance/pay`. Replace placeholders for API key and secret.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Algo Client with Timeout\nDESCRIPTION: Shows how to create a Binance algorithmic trading client with a custom timeout setting of 5000ms. The code includes API key configuration and demonstrates making a historical algo orders query with error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI.queryHistoricalAlgoOrders().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements to Modular MarginTrading - TypeScript\nDESCRIPTION: These TypeScript code snippets illustrate the change in how users import trading functionality from Binance connector libraries. Previously, the Spot class was imported from '@binance/connector'; now, MarginTrading (and optionally MarginTradingRestAPI) should be imported from the new '@binance/margin-trading' package. This import change is necessary to use the new modular client structure in applications that access the Binance Margin Trading API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/migration_guide_margin_trading_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading } from '@binance/margin-trading';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Setting in Binance Copy Trading TypeScript Client\nDESCRIPTION: This code snippet demonstrates how to initialize the Binance Copy Trading client with keep-alive set to false. It shows the client configuration with API credentials and then makes a request to get the futures lead trader status. The keep-alive setting is set to false, which differs from the default value of true.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive in Binance Rebate Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the `Rebate` client from `@binance/rebate` with a custom configuration object (`configurationRestAPI`) where the `keepAlive` property is explicitly set to `false` (overriding the default `true`). It requires a valid Binance API key and secret. After initialization, it uses the configured client's `restAPI` to asynchronously fetch spot rebate history records, logging the response data or any potential errors to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI\n    .getSpotRebateHistoryRecords()\n    .then((res) => res.data())\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Derivatives Trading Client with Compression Settings in TypeScript\nDESCRIPTION: Initializes a Binance Derivatives Trading client with specific API credentials and disabled compression. Establishes a websocket connection to fetch position information. Requires API key and secret for authentication.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Querying Margin Account Summary via Binance REST API - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to import and configure the Binance Margin Trading Connector to programmatically query a margin account summary from the Binance REST API. It specifies how to instantiate the client with API credentials, demonstrate asynchronous request handling with promises, and includes error logging for failed API calls. Required dependencies are Node.js v22.12.0+, the @binance/margin-trading package, and developer's valid Binance API credentials. The key parameters are the API key and secret; outputs are logged responses or errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new MarginTrading({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSummaryOfMarginAccount()\\n    .then((res) => res.data())\\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Gift Card REST API Client (TypeScript)\nDESCRIPTION: Demonstrates how to import the 'GiftCard' client and related types, configure it with API key and secret, instantiate the client, and make an asynchronous call to the 'createASingleTokenGiftCard' endpoint. It uses promises to handle the response data or potential errors. Requires the '@binance/gift-card' package to be installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI\n    .createASingleTokenGiftCard({ token: '6H9EKF5ECCWFBHGE', amount: 1000 })\n    .then((res) => res.data())\n    .then((data: GiftCardRestAPI.CreateASingleTokenGiftCardResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: New Spot Import\nDESCRIPTION: Updated import statement for the Spot client from modular connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/spot';\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using Bash\nDESCRIPTION: This snippet provides the necessary commands to install project dependencies and execute the test suite using npm. `npm install` downloads and installs packages listed in `package.json`, and `npm run test` executes the test script defined in the same file.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install\n\nnpm run test\n```\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot Import\nDESCRIPTION: Old import statement for the Spot client from monolithic connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing the Binance Gift Card Library (Bash)\nDESCRIPTION: Installs the Binance Gift Card Connector library using the Node Package Manager (npm). This command downloads and adds the '@binance/gift-card' package to your project's dependencies.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/gift-card\n```\n\n----------------------------------------\n\nTITLE: Updating Imports from Spot to Wallet in TypeScript\nDESCRIPTION: These TypeScript snippets show how to change imports from the old Spot API class in @binance/connector to the new Wallet class in @binance/wallet. No additional dependencies are required beyond having the respective packages installed. Replace all old import statements referencing Spot and @binance/connector with the new ones as shown here.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/migration_guide_wallet_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet } from '@binance/wallet';\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure retries for the Binance Derivatives Trading API. It sets up the API client with retry settings, including the number of retries and backoff time between attempts. The example also shows how to make an API call to fetch option account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions } from '@binance/derivatives-trading-options';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new DerivativesTradingOptions({ configurationRestAPI });\n\nclient.restAPI\n    .optionAccountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Binance Mining Client in TypeScript\nDESCRIPTION: This snippet illustrates how to initialize the Binance Mining client (`@binance/mining`) with a specific request timeout. It defines a configuration object including API credentials and a `timeout` value in milliseconds (5000ms), then uses this configuration to create a client instance. Finally, it makes an API call (`acquiringAlgorithm`) and includes basic error handling. This requires the `@binance/mining` package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI.acquiringAlgorithm().catch((error) => console.error(error));\n```\n```\n\n----------------------------------------\n\nTITLE: Client Initialization for Binance Pay in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Pay client using TypeScript after migrating to the modular @binance/pay package. The client is created using a configuration object containing the apiKey and apiSecret. The restAPI subclient is then used to call API methods. Prerequisites include the @binance/pay package and valid API credentials. Inputs include the authentication details, and the output is a configured Pay client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/migration_guide_pay_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Pay({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Streams in Binance Derivatives Trading Options\nDESCRIPTION: Example of how to connect to WebSocket streams and subscribe to the newSymbolInfo stream. It shows creating a client, connecting, and handling incoming messages.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.newSymbolInfo();\n        stream.on('message', (data) => console.info(data));\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression for Binance Dual Investment API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Binance Dual Investment API client in TypeScript with specific configuration options, notably disabling compression by setting the 'compression' flag to false. It requires the '@binance/dual-investment' package and valid Binance API credentials. The client is used to asynchronously fetch dual investment positions, log the results, and handle any errors that may occur during the API call. Inputs include the API key and secret; outputs are printed directly to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    compression: false, // Disable compression\\n};\\nconst client = new DualInvestment({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getDualInvestmentPositions()\\n    .then((res) => res.data())\\n    .then((data: DualInvestmentRestAPI.GetDualInvestmentPositionsResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Mining Client with Compression Disabled in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to instantiate the `Mining` client from the `@binance/mining` library. It specifically configures the `configurationRestAPI` object, providing an API key and secret, and explicitly disables compression by setting `compression: false`. An example API call to `acquiringAlgorithm` is shown to illustrate usage, logging the response data or catching potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Querying Pay Trade History via Binance Pay REST API - TypeScript\nDESCRIPTION: This snippet illustrates how to query transaction history from the Binance Pay REST API using the \"@binance/pay\" Node.js library. It creates a Pay client with API credentials, invokes the getPayTradeHistory endpoint, and handles both success (logging the response) and error (logging any issues). Dependencies include the Node.js runtime (v22.12.0+), the \"@binance/pay\" package, and valid Binance API credentials. Inputs: configurationRestAPI (credentials). Outputs: logs the fetched Pay trade history object or an error. Authentication is required, and network access must be permitted.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay, PayRestAPI } from '@binance/pay';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new Pay({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getPayTradeHistory()\\n    .then((res) => res.data())\\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Querying Spot Rebate History via Binance Rebate Connector - TypeScript\nDESCRIPTION: Shows how to import the Rebate client classes, configure REST API credentials, instantiate the API client, and retrieve spot rebate history records using asynchronous calls and Promises. Requires the @binance/rebate npm package and valid Binance API keys. Accepts configuration via an object with apiKey and apiSecret fields, and returns rebate history data as a typed response or logs errors accordingly.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new Rebate({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSpotRebateHistoryRecords()\\n    .then((res) => res.data())\\n    .then((data: RebateRestAPI.GetSpotRebateHistoryRecordsResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing from New C2C Module\nDESCRIPTION: Updated import statement for the new modularized C2C package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C } from '@binance/c2c';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Types Library via npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @binance/types TypeScript definition package using npm. The command downloads the package and adds it to your project dependencies so that the TypeScript types, interfaces, and error classes are available for import in your code. No parameters or special environment variables are required as prerequisites except for a functional npm setup. The expected outcome is a successful installation of the required package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/types\n```\n\n----------------------------------------\n\nTITLE: New Importing of SimpleEarn Client from Modular Binance Package - TypeScript\nDESCRIPTION: This modernized TypeScript import statement illustrates how to import the SimpleEarn client from the new modular @binance/simple-earn library. This allows access to Binance Simple Earn endpoints under the modularized structure. Requires @binance/simple-earn to be installed. No runtime parameters; imports enable instantiation and usage.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn } from '@binance/simple-earn';\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Margin Trading API Client (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates initializing the Binance Margin Trading client with specific retry configurations. It sets the client to retry failed API requests up to 5 times with a 2-second backoff delay between each attempt. The snippet then uses the configured client to fetch the summary of the margin account, logging either the response data or any encountered errors. Requires the `@binance/margin-trading` package and valid Binance API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfMarginAccount()\n    .then((res) => res.data())\n    .then((data: MarginTradingRestAPI.GetSummaryOfMarginAccountResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout with Binance Staking SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Staking SDK client with a custom timeout value using TypeScript. It requires the '@binance/staking' package and valid API credentials. The configuration object includes the API key, secret, and timeout in milliseconds. It shows how to create the Staking client instance and call the 'claimBoostRewards' REST API method, with error handling for failed requests. Inputs include your own API credentials; the output is determined by the result or error from the claimed rewards operation.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI.claimBoostRewards().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Mining Client Import Statement - TypeScript\nDESCRIPTION: This snippet demonstrates the correct post-migration import of the Mining client from the @binance/mining package in TypeScript. This modular import provides access only to Mining APIs and better tree-shaking. Ensure @binance/mining is installed before using this import.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/migration_guide_mining_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining } from '@binance/mining';\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket API with Binance Derivatives Trading COIN-M Futures\nDESCRIPTION: Demonstrates how to use the WebSocket API module to establish a connection and make requests for real-time data. This example shows how to fetch position information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) => connection.positionInformation())\n    .then((res) => console.log(res.data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: New Binance SimpleEarn Client Initialization with Modular Structure - TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of the SimpleEarn client from the new @binance/simple-earn package, using a configuration object that holds the API key and secret. It shows the usage of configurationRestAPI for setting credentials and creates a client capable of interacting with Binance Simple Earn API endpoints. Dependencies include the @binance/simple-earn package, and the configuration object must include user credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new SimpleEarn({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTPS Agent for Binance Derivatives Client in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize the `DerivativesTradingPortfolioMargin` client from `@binance/derivatives-trading-portfolio-margin` with a custom HTTPS agent. It imports the necessary `https` module, creates an `https.Agent` instance (in this case, setting `rejectUnauthorized` to true, which is the default), defines a configuration object including the API key, secret, and the custom agent, and then instantiates the client with this configuration. Finally, it makes a sample API call to fetch account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Binance Fiat REST API Client (TypeScript)\nDESCRIPTION: Example demonstrating how to import the `Fiat` client and related types from `@binance/fiat`, configure it with API credentials, instantiate the client, and make an asynchronous call to the `getFiatDepositWithdrawHistory` endpoint. It logs the fetched data or catches and logs potential errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance C2C REST API Client\nDESCRIPTION: Example of creating a C2C client instance and making an API call to fetch trade history with authentication credentials\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C, C2CRestAPI } from '@binance/c2c';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new C2C({ configurationRestAPI });\n\nclient.restAPI\n    .getC2CTradeHistory()\n    .then((res) => res.data())\n    .then((data: C2CRestAPI.GetC2CTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing Client from Old Monolithic Package (TypeScript)\nDESCRIPTION: This code snippet shows the old way of importing the `Spot` client class from the monolithic `@binance/connector` package in a TypeScript project. This import path is deprecated for Dual Investment functionality.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing Copy Trading Package via NPM\nDESCRIPTION: Commands to uninstall the old connector package and install the new copy trading package\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/copy-trading\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot-based Client Creation (TypeScript)\nDESCRIPTION: This snippet represents the pre-modularization approach for creating a client instance using the Spot class. It initializes the client with the provided API key and secret, preparing the object for making authenticated API calls. This code is valid only with older versions of @binance/connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnect Delay for Binance WebSocket API in TypeScript\nDESCRIPTION: This snippet illustrates how to instantiate the Binance Derivatives Trading USDS Futures WebSocket API client in TypeScript, specifying API credentials and a custom reconnect delay (in milliseconds) within the configuration. It relies on the '@binance/derivatives-trading-usds-futures' npm package, which must be installed as a dependency. The sample connects to the WebSocket API, queries position information, and logs the resulting data or errors; parameters such as 'apiKey' and 'apiSecret' must be provided by the user. The output is received as a data object, and errors are caught and logged. This approach is suitable for Node.js environments and demonstrates best practices for handling asynchronous API calls with reconnect strategies.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/docs/websocket-api/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures } from '@binance/derivatives-trading-usds-futures';\\n\\nconst configurationWebsocketAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\\n};\\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketAPI });\\n\\nclient.websocketAPI\\n    .connect()\\n    .then((connection) =>\\n        connection.positionInformation()\\n    )\\n    .then((res) =>\\n        console.log(res.data)\\n    )\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Installing and Using NVM for Node.js Version Management\nDESCRIPTION: Demonstrates how to install and switch to the required Node.js version (22.12.0) using Node Version Manager (nvm). This is a prerequisite step before installing the Binance Mining library, ensuring environment compatibility.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Importing Fiat Class from New Fiat Package (TypeScript)\nDESCRIPTION: Shows the new method of importing the main client class (`Fiat`) specifically from the modular `@binance/fiat` package in a TypeScript application. This replaces the old import.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat } from '@binance/fiat';\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries with Binance Fiat Connector in TypeScript\nDESCRIPTION: This snippet sets up the Binance Fiat Connector client in TypeScript with custom retry and backoff configuration. It requires the @binance/fiat dependency, API credentials, and demonstrates how to call the getFiatDepositWithdrawHistory method with error handling. The key parameters include apiKey, apiSecret, retries (number of retry attempts), and backoff (delay in milliseconds between retries). It returns the deposit/withdrawal history on success and logs errors if the operation fails.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/fiat';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Fiat({ configurationRestAPI });\n\nclient.restAPI\n    .getFiatDepositWithdrawHistory({ transactionType: '0' })\n    .then((res) => res.data())\n    .then((data: FiatRestAPI.GetFiatDepositWithdrawHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance Copy Trading Client\nDESCRIPTION: Example showing how to initialize a Binance Copy Trading client with proxy configuration including host, port, protocol, and authentication details. The code also demonstrates making an API call to get futures lead trader status.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with New Modular Package (TypeScript)\nDESCRIPTION: Shows the new client initialization method using `@binance/vip-loan`, requiring imports for `VIPLoan` and `VIPLoanRestAPI`, creating a `configurationRestAPI` object, and accessing methods via `client.restAPI`. This updated pattern is detailed in both 'Key Changes' and 'Migration Steps'.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from WebSocket Streams in TypeScript\nDESCRIPTION: Shows how to unsubscribe from a specific WebSocket stream after a set timeout period. This is useful for managing active subscriptions and resource usage without closing the entire connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketStreams, SPOT_WS_STREAMS_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketStreams = {\n    wsURL: SPOT_WS_STREAMS_PROD_URL,\n};\nconst client = new Spot({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection: SpotWebsocketStreams.WebsocketStreamsConnection) => {\n        const stream = connection.aggTrade({ symbol: 'BNBUSDT' });\n        stream.on('message', (data: SpotWebsocketStreams.AggTradeResponse) => console.info(data));\n\n        setTimeout(() => {\n            stream.unsubscribe();\n            console.log('Unsubscribed from BNBUSDT trade stream');\n        }, 10000);\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with New Sub-Account Package (TypeScript)\nDESCRIPTION: Demonstrates the new way of initializing the Binance Sub Account client. It imports both `SubAccount` and `SubAccountRestAPI`. API credentials are provided within a `configurationRestAPI` object passed to the `SubAccount` constructor. REST API methods are accessed via the `client.restAPI` property.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version using nvm\nDESCRIPTION: Commands to install and use the required Node.js version (22.12.0) using Node Version Manager (nvm).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Using Binance Copy Trading REST API in TypeScript\nDESCRIPTION: Example of how to use the Binance Copy Trading REST API to get futures lead trader status. It demonstrates client initialization with API credentials and making an authenticated request.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI\n    .getFuturesLeadTraderStatus()\n    .then((res) => res.data())\n    .then((data: CopyTradingRestAPI.GetFuturesLeadTraderStatusResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Minimal Client Initialization Example (Spot and Wallet, TypeScript)\nDESCRIPTION: These compact TypeScript snippets show how to create a client object with Spot (old) or Wallet (new) using provided API credentials. Both are basic instantiations with dummy keys, requiring the proper npm package to be installed. Usage is for rapid migration and understanding syntactic differences.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/migration_guide_wallet_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Wallet({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Connector Package\nDESCRIPTION: Command to remove the old Binance connector package from the project using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Algo API Client with Retries\nDESCRIPTION: Demonstrates how to initialize the Binance Algo API client with retry configuration parameters and query historical algo orders. Includes retry settings for failed API calls with customizable retry count and backoff interval.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Compression in Binance Pay SDK Initialization (TypeScript)\nDESCRIPTION: This TypeScript code initializes the Binance Pay client (`Pay` class from `@binance/pay`) using an API key and secret. It explicitly sets the `compression` option to `false` in the configuration object (`configurationRestAPI`). After initialization, it calls the `getPayTradeHistory` method and logs the response data or any errors encountered during the API call. This demonstrates how to control the compression behavior for REST API requests made through the SDK.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Pay, PayRestAPI } from '@binance/pay';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new Pay({ configurationRestAPI });\n\nclient.restAPI\n    .getPayTradeHistory()\n    .then((res) => res.data())\n    .then((data: PayRestAPI.GetPayTradeHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Websocket Stream in TypeScript\nDESCRIPTION: This snippet demonstrates how to unsubscribe from a specific WebSocket stream (`allBookTickersStream`) after a set duration (10 seconds) without closing the main connection. It uses `setTimeout` to delay the call to the `unsubscribe()` method on the stream object.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.allBookTickersStream();\n        stream.on('message', (data) => console.info(data));\n\n        setTimeout(() => {\n            stream.unsubscribe();\n            console.log('Unsubscribed from allBookTickersStream stream');\n        }, 10000);\n    })\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from WebSocket Streams in Binance Derivatives Trading Options\nDESCRIPTION: Example demonstrating how to unsubscribe from a specific WebSocket stream after a certain time period without closing the connection.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingOptions, DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL } from '@binance/derivatives-trading-options';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_OPTIONS_WS_STREAMS_PROD_URL,\n};\nconst client = new DerivativesTradingOptions({ configurationWebsocketStreams });\n\nclient.websocketStreams\n    .connect()\n    .then((connection) => {\n        const stream = connection.newSymbolInfo();\n        stream.on('message', (data) => console.info(data));\n\n        setTimeout(() => {\n            stream.unsubscribe();\n            console.log('Unsubscribed from newSymbolInfo stream');\n        }, 10000);\n    })\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Mining Client Initialization with Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates how to import, configure, and instantiate the new Mining client using the modular @binance/mining package in TypeScript. It creates a MiningRestAPI configuration object with apiKey and apiSecret, then uses it to initialize the Mining client. API methods are now accessed via client.restAPI, supporting modular scaling and separation of other product APIs.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/migration_guide_mining_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Mining({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version for Binance Derivatives Trading Options\nDESCRIPTION: Commands to install and use the required Node.js version (22.12.0) using nvm (Node Version Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Migration Step 4: New Client Initialization Example\nDESCRIPTION: Provides the updated TypeScript code pattern for initializing the client using the new `@binance/staking` package structure, including necessary imports and configuration object.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Staking({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: New Client Initialization with GiftCard (TypeScript)\nDESCRIPTION: This example shows how to initialize the new modular GiftCard client from @binance/gift-card in TypeScript. It demonstrates creating a configuration object with the Binance API credentials and passing it to the GiftCard constructor, which provides access to the restAPI client for invoking API methods. This setup must be used for all new integrations with the Gift Card API. Requires @binance/gift-card package and TypeScript/ES6 compatibility.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new GiftCard({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Spot Client (Old Method)\nDESCRIPTION: Example of how to initialize the Binance Spot client using the old connector package in TypeScript.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Running tests for Binance Auto Invest Connector\nDESCRIPTION: Commands to install dependencies and run tests for the Binance Auto Invest Connector project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Environment Using NVM - Bash\nDESCRIPTION: This snippet demonstrates how to install and use Node.js version 22.12.0 with Node Version Manager (nvm) in a shell environment. It ensures that the Node.js runtime is set to the required version for library compatibility before proceeding with further setup. No additional dependencies are required beyond nvm, and outputs will inform the user of version changes or errors if the tools are unavailable.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing @binance/auto-invest Package in Bash\nDESCRIPTION: Uninstalls the old @binance/connector package and installs the new @binance/auto-invest package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/migration_guide_auto_invest_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/auto-invest\n```\n\n----------------------------------------\n\nTITLE: Complete Client Initialization Example (Old Method)\nDESCRIPTION: Full example of client initialization with the monolithic Binance connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Binance Auto Invest Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Auto Invest client with custom retry configuration options and make a REST API call. It configures the client with API credentials, sets the maximum number of retries to 5, and defines a 2-second backoff interval between retry attempts.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest, AutoInvestRestAPI } from '@binance/auto-invest';\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new AutoInvest({ configurationRestAPI });\n\nclient.restAPI\n    .queryAllSourceAssetAndTargetAsset()\n    .then((res) => res.data())\n    .then((data: AutoInvestRestAPI.QueryAllSourceAssetAndTargetAssetResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-Alive for Binance Mining REST API Client (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to initialize the `Mining` client from `@binance/mining` with a custom configuration object where `keepAlive` is explicitly set to `false`, overriding the default value of `true`. It then demonstrates making a sample API call (`acquiringAlgorithm`) using the configured client and logging the response. Requires `@binance/mining` library and valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mining, MiningRestAPI } from '@binance/mining';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new Mining({ configurationRestAPI });\n\nclient.restAPI\n    .acquiringAlgorithm()\n    .then((res) => res.data())\n    .then((data: MiningRestAPI.AcquiringAlgorithmResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Old Connector Package (TypeScript)\nDESCRIPTION: Illustrates the previous method for initializing the Binance API client using the `Spot` class from the `@binance/connector` package. API key and secret were passed directly to the constructor.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet Websocket Streams Client in TypeScript\nDESCRIPTION: This snippet illustrates configuring the `DerivativesTradingUsdsFutures` client for connecting to the Binance Testnet environment for WebSocket Streams. It sets the `wsURL` option in the configuration object to the predefined Testnet Streams URL (`DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_TESTNET_URL`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_TESTNET_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationWebsocketStreams = {\n    wsURL: DERIVATIVES_TRADING_USDS_FUTURES_WS_STREAMS_TESTNET_URL,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationWebsocketStreams });\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Spot and Wallet Clients in TypeScript\nDESCRIPTION: The first snippet initializes the old Spot client with API key and secret, then calls the exchangeInformation method. The updated approach uses the new Wallet and WalletRestAPI classes. After configuring 'configurationRestAPI' with API credentials, it instantiates a Wallet client and calls restAPI.exchangeInfo(). Ensure @binance/wallet is installed, and input your API key and secret as shown. Output will be printed to the console.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/migration_guide_wallet_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.exchangeInformation().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Wallet, WalletRestAPI } from '@binance/wallet';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Wallet({ configurationRestAPI });\n\nclient.restAPI.exchangeInfo().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet for Binance Derivatives Trading COIN-M Futures\nDESCRIPTION: Shows how to configure the client to use the Futures Testnet by setting the basePath in the configuration. This is useful for testing purposes.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_REST_API_TESTNET_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    basePath: DERIVATIVES_TRADING_COIN_FUTURES_REST_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with New Dual Investment Package (TypeScript)\nDESCRIPTION: This example demonstrates the new way to initialize the Dual Investment client using the `@binance/dual-investment` package. It involves creating a `configurationRestAPI` object for credentials and passing it to the `DualInvestment` constructor. REST API methods are accessed via the `restAPI` property of the client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment, DualInvestmentRestAPI } from '@binance/dual-investment';\ns\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new DualInvestment({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Rebate Client and Calling REST API Methods (New)\nDESCRIPTION: Shows the new approach for initializing the Binance Rebate client. It involves importing `Rebate` and optionally `RebateRestAPI`, creating a configuration object (`configurationRestAPI`) containing the API key and secret, instantiating the `Rebate` client with this configuration, and then accessing specific API methods (represented by `<method_name>`) via the `restAPI` property. Requires valid API credentials.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Rebate({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing Binance Connector (Old Method)\nDESCRIPTION: The old import statement for the monolithic Binance connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a DerivativesTradingPortfolioMarginPro client with custom keep-alive settings and make a request to get portfolio margin account information. It imports the necessary class, sets up the configuration object with API credentials and keep-alive option, creates a client instance, and makes an API call.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMarginPro } from '@binance/derivatives-trading-portfolio-margin-pro';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new DerivativesTradingPortfolioMarginPro({ configurationRestAPI });\n\nclient.restAPI\n    .getPortfolioMarginProAccountInfo()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Copy Trading\nDESCRIPTION: Comparison of old and new import syntax for the Binance connector\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading } from '@binance/coppy-trading';\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Binance Simple Earn REST API - TypeScript\nDESCRIPTION: Illustrates how to import, configure, and use the Simple Earn REST API client in a Node.js/TypeScript application. Requires '@binance/simple-earn' as a dependency and valid Binance API credentials. The snippet sets up authentication, invokes the getSimpleEarnFlexibleProductList() endpoint, and logs the response or error. Input parameters are the API key and secret; the output is the printed API response data or error details.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimpleEarn, SimpleEarnRestAPI } from '@binance/simple-earn';\\n\\nconst configurationRestAPI = {\\n    apiKey: 'your-api-key',\\n    apiSecret: 'your-api-secret',\\n};\\nconst client = new SimpleEarn({ configurationRestAPI });\\n\\nclient.restAPI\\n    .getSimpleEarnFlexibleProductList()\\n    .then((res) => res.data())\\n    .then((data: SimpleEarnRestAPI.GetSimpleEarnFlexibleProductListResponse) => console.log(data))\\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keep-Alive Settings in Binance Crypto Loan API\nDESCRIPTION: This snippet demonstrates how to initialize the Binance Crypto Loan client with keep-alive disabled. It includes configuration with API credentials and shows how to make a request to get flexible loan borrow history data. By default, keep-alive is set to true, but this example explicitly sets it to false.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/rest-api/keepAlive.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan, CryptoLoanRestAPI } from '@binance/crypto-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    keepAlive: false, // Default is true\n};\nconst client = new CryptoLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getFlexibleLoanBorrowHistory()\n    .then((res) => res.data())\n    .then((data: CryptoLoanRestAPI.GetFlexibleLoanBorrowHistoryResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing Client from Old Connector (TypeScript)\nDESCRIPTION: Shows the previous method of importing the `Spot` client class from the monolithic `@binance/connector` package. This import statement needs to be updated during migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket API for Testnet in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the WebSocket API client for the testnet environment. It shows how to set the API key, secret, and testnet URL.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures, DERIVATIVES_TRADING_COIN_FUTURES_WS_API_TESTNET_URL } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: DERIVATIVES_TRADING_COIN_FUTURES_WS_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n```\n\n----------------------------------------\n\nTITLE: Importing Client from New Modular Package (TypeScript)\nDESCRIPTION: Shows the updated import statement required for the modularized structure. The `VIPLoan` class should now be imported directly from the `@binance/vip-loan` package. This is the replacement for the old import method, shown in both 'Key Changes' and 'Migration Steps'.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan } from '@binance/vip-loan';\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet Environment for WebSocket API in TypeScript\nDESCRIPTION: Sets up a Binance Spot client with the WebSocket API pointed to the testnet environment for testing purposes. This configuration requires an API key and secret and uses the predefined testnet URL constant.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_TESTNET_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_TESTNET_URL,\n};\nconst client = new Spot({ configurationWebsocketAPI });\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Old Connector (TypeScript)\nDESCRIPTION: Demonstrates the old way of initializing the Binance client using the `Spot` class constructor from the `@binance/connector` package, passing API key and secret directly. Methods were called directly on the client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with New Staking Package (TypeScript)\nDESCRIPTION: Demonstrates the new approach to initializing the Binance Staking client. It involves importing both `Staking` and `StakingRestAPI` from `@binance/staking`, defining a configuration object for `StakingRestAPI`, and passing this configuration when instantiating the `Staking` client. Methods are now accessed via the `restAPI` property.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking, StakingRestAPI } from '@binance/staking';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Staking({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing the NFT Client (New Method) in TypeScript\nDESCRIPTION: Shows the updated method for importing the `NFT` client class from the new modular `@binance/nft` package. This is the correct import path to use after migrating.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/migration_guide_nft_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT } from '@binance/nft';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NFT, NFTRestAPI } from '@binance/nft';\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version with nvm (Bash)\nDESCRIPTION: Demonstrates how to install and use Node.js version 22.12.0 using Node Version Manager (nvm). This specific Node.js version is a prerequisite for running the Binance JavaScript Wallet Connector library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Spot Client (Old Method) in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Binance Spot client using the old package structure.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/migration_guide_auto_invest_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Binance Rebate Connector - Bash\nDESCRIPTION: Indicates how to install test dependencies and execute unit and integration tests using npm commands. The test suite covers REST API endpoints and error cases. Requires the @binance/rebate project with its development dependencies set up. These commands should be executed from the project root directory.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Convert Client (Old Method)\nDESCRIPTION: Example of how to initialize the Binance client using the old Spot class from the connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/migration_guide_convert_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Spot Client (Old Method - TypeScript)\nDESCRIPTION: This code demonstrates how the `Spot` client was initialized in the older monolithic `@binance/connector` package. API key and secret were passed directly to the constructor. It then calls the `exchangeInformation` method.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.exchangeInformation().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Importing the Client (Old Method) in TypeScript\nDESCRIPTION: Shows the previous method for importing the Binance client (`Spot`) from the monolithic `@binance/connector` package. This import path is now deprecated for NFT functionality.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/migration_guide_nft_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Catching Specific API Errors With Predefined Error Classes - TypeScript\nDESCRIPTION: This snippet demonstrates catching and differentiating API errors using RequiredError and NotFoundError classes from @binance/types. It uses a try-catch block to process API call failures, identifying the exact nature of the error and logging custom messages accordingly. This approach requires importing the relevant error classes and is dependent on having a try-catch structure; errors not matching the specified types fall through to generic handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/types/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequiredError, NotFoundError } from '@binance/types';\n\ntry {\n    // API call\n} catch (err) {\n    if (err instanceof RequiredError) {\n        console.error('Missing required parameters:', err);\n    } else if (err instanceof NotFoundError) {\n        console.error('Requested resource does not exist:', err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Spot Import to Pay Import - TypeScript\nDESCRIPTION: This snippet shows how to update your import statements in TypeScript when migrating from the monolithic Binance connector to the modular pay connector. It replaces the Spot client imported from @binance/connector with the Pay client from @binance/pay. The application must use TypeScript and should have @binance/pay installed. These import statements are expected at the top of your TypeScript source files.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/migration_guide_pay_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pay } from '@binance/pay';\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Convert Client (New Method)\nDESCRIPTION: Example of how to initialize the Binance Convert client using the new modularized structure, including configuration for the REST API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/migration_guide_convert_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert, ConvertRestAPI } from '@binance/convert';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Convert({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Old Binance Spot Client Initialization - TypeScript\nDESCRIPTION: This code snippet shows the legacy instantiation of a Spot client from the @binance/connector package, using the user's API key and secret. The object provides methods to interact with Binance's Spot API, and requires credentials passed as an object during initialization. Outputs a client object capable of making authenticated API calls.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using npm (Bash)\nDESCRIPTION: This Bash script sequence first installs the necessary Node.js project dependencies using `npm install` based on the `package.json` file. Subsequently, it executes the test suite defined within the `scripts` section of the `package.json` file via the `npm run test` command. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing New Client (Initialization Code Only - TypeScript)\nDESCRIPTION: Shows the new client initialization structure using a configuration object (`configurationRestAPI`). This snippet, from the step-by-step guide, uses `@binance/spot` in its import example (potentially context-dependent or a typo in the source, but shown as written), demonstrating the configuration pattern.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fiat, FiatRestAPI } from '@binance/spot';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Fiat({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Importing Crypto Loan Package (New Method)\nDESCRIPTION: The new import statement for the modularized Crypto Loan package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CryptoLoan } from '@binance/crypto-loan';\n```\n\n----------------------------------------\n\nTITLE: Client Initialization with Old Connector\nDESCRIPTION: Example of how to initialize a client with the previous monolithic package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.exchangeInformation().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Configuring Binance Derivatives Client for Testnet (TypeScript)\nDESCRIPTION: Demonstrates how to configure the REST API client to use the Binance Futures Testnet environment instead of the production environment. This involves setting the `basePath` property in the configuration object to the specific Testnet URL constant provided by the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin, DERIVATIVES_TRADING_PORTFOLIO_MARGIN_REST_API_TESTNET_URL } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    basePath: DERIVATIVES_TRADING_PORTFOLIO_MARGIN_REST_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies using npm (Bash)\nDESCRIPTION: Demonstrates how to uninstall the old monolithic Binance connector package and install the new modular NFT package using npm commands. This is the primary step in switching dependencies for the project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/migration_guide_nft_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\\nnpm install @binance/nft\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/nft\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot Client Initialization - TypeScript\nDESCRIPTION: This legacy code snippet represents how clients were initialized with the old Spot client from @binance/connector in TypeScript. A new Spot instance is created using the user's API credentials, which are necessary for authenticated API calls. You must have previously installed @binance/connector and provided valid API keys.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/migration_guide_pay_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Client Initialization for Binance Spot and MarginTrading APIs - TypeScript\nDESCRIPTION: These TypeScript code snippets demonstrate how to create a client instance for Binance API usage before and after modularization. With the old Spot API, the client is initialized with apiKey and apiSecret directly; with the modular MarginTrading connector, a configuration object is passed to the MarginTrading class, and the restAPI property is accessed. Both approaches involve passing API credentials and calling asynchronous methods, with the new structure supporting modular separation and promoting the use of MarginTradingRestAPI.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/docs/migration_guide_margin_trading_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new MarginTrading({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MarginTrading, MarginTradingRestAPI } from '@binance/margin-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new MarginTrading({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Initializing Spot Client and Calling Methods (Old)\nDESCRIPTION: Demonstrates the previous method for creating a `Spot` client instance using API key and secret directly in the constructor, and then calling API methods (represented by `<method_name>`) on that client instance. This pattern is replaced in the new modular structure.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Commands to install dependencies and run the test suite for the Binance Algo connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for Binance Derivatives Trading API in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a proxy configuration for the Binance Derivatives Trading Portfolio Margin API client. It includes API key configuration, proxy settings, and a sample API call to fetch account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    proxy: {\n        host: '127.0.0.1',\n        port: 8080,\n        protocol: 'http', // or 'https'\n        auth: {\n            username: 'proxy-user',\n            password: 'proxy-password',\n        },\n    },\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI\n    .accountInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for Binance Derivatives API\nDESCRIPTION: Shows how to create a secure HTTPS agent, configure API credentials, and initialize a Binance derivatives trading client. Includes an example of making a secure API call to fetch exchange information with proper error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/rest-api/httpsAgent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport https from 'https';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst httpsAgent = new https.Agent({\n    rejectUnauthorized: true,\n});\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    httpsAgent,\n};\nconst client = new DerivativesTradingCoinFutures({ configurationRestAPI });\n\nclient.restAPI\n    .exchangeInformation()\n    .then((res) => res.data())\n    .then((data) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Identifying Old Spot Client Import for Replacement\nDESCRIPTION: Highlights the specific import statement (`import { Spot } from '@binance/connector';`) that developers need to find and replace within their codebase during the third step of the migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Configuring Testnet for Binance Derivatives Trading USDS-M Futures\nDESCRIPTION: Example of how to configure the client to use the Futures Testnet by setting the basePath in the configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingUsdsFutures, DERIVATIVES_TRADING_USDS_FUTURES_REST_API_TESTNET_URL } from '@binance/derivatives-trading-usds-futures';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    basePath: DERIVATIVES_TRADING_USDS_FUTURES_REST_API_TESTNET_URL,\n};\nconst client = new DerivativesTradingUsdsFutures({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Importing from Old Binance Connector\nDESCRIPTION: Example of how imports were structured in the previous monolithic package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot Client Initialization\nDESCRIPTION: Old way of initializing the Spot client and making API calls with the monolithic connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot(apiKey, apiSecret);\nclient.account().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Migration Step 4: Old Client Initialization Example\nDESCRIPTION: Shows the old TypeScript code pattern for initializing the client which needs to be updated.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Installing Modular Binance Simple Earn Package Using NPM - Bash\nDESCRIPTION: This snippet shows the NPM command to install the new @binance/simple-earn package, which provides a modular interface for Binance Simple Earn functionality. Requires NPM and a package.json in the current directory. Running this command adds the package as a dependency in the project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/simple-earn\n```\n\n----------------------------------------\n\nTITLE: Migration Step 3: Identifying Old Import Path (TypeScript)\nDESCRIPTION: Shows the specific import statement using `@binance/connector` that needs to be located and replaced in the project files during migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Old Monolithic Package (TypeScript)\nDESCRIPTION: This example shows how the API client was initialized using the `Spot` class from the old `@binance/connector` package. It required passing API key and secret directly to the constructor. API methods were called directly on the client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Old and New Import Syntax for Client Initialization (TypeScript)\nDESCRIPTION: This pair of import statements helps clarify the required update in import syntax when migrating. The old import brings in Spot from @binance/connector, whereas the new import brings in GiftCard from @binance/gift-card. This change is essential for supporting new modular API clients and enabling Gift Card operations in recent releases.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard } from '@binance/gift-card';\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in Binance VIPLoan Client with TypeScript\nDESCRIPTION: This snippet initializes a Binance VIPLoan client in TypeScript with customizable retry and backoff parameters for handling transient network errors when invoking REST API methods. The 'retries' key specifies how many times to retry failed requests, and 'backoff' sets the delay (in ms) between retries. The code shows instantiating the client, invoking a data retrieval API, and handling responses and errors with Promise-based handling. Dependencies: '@binance/vip-loan' npm package; requires valid 'apiKey' and 'apiSecret'. Input is not required except credentials; output is logged API data or errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/rest-api/retries.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VIPLoan, VIPLoanRestAPI } from '@binance/vip-loan';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    retries: 5, // Retry up to 5 times\n    backoff: 2000, // 2 seconds between retries\n};\nconst client = new VIPLoan({ configurationRestAPI });\n\nclient.restAPI\n    .getCollateralAssetData()\n    .then((res) => res.data())\n    .then((data: VIPLoanRestAPI.GetCollateralAssetDataResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Algo REST API Client\nDESCRIPTION: TypeScript example showing how to initialize and use the Binance Algo REST API client to query historical algo orders. Includes authentication configuration and error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo, AlgoRestAPI } from '@binance/algo';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n};\nconst client = new Algo({ configurationRestAPI });\n\nclient.restAPI\n    .queryHistoricalAlgoOrders()\n    .then((res) => res.data())\n    .then((data: AlgoRestAPI.QueryHistoricalAlgoOrdersResponse) => console.log(data))\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Importing Client from New Sub-Account Package (TypeScript)\nDESCRIPTION: Shows the new method of importing the `SubAccount` client class from the modular `@binance/sub-account` package. This replaces the old import statement.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount } from '@binance/sub-account';\n```\n\n----------------------------------------\n\nTITLE: Legacy Futures Client Initialization\nDESCRIPTION: Old way of initializing the Futures client and making API calls with the monolithic connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new CMFutures(apiKey, apiSecret);\nclient.getAccountInformation().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Package\nDESCRIPTION: Command to remove the old monolithic Binance connector package from your project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Example of New Rebate Client Initialization (Updated Structure)\nDESCRIPTION: Demonstrates the updated code structure for initializing the Rebate client as part of the fourth migration step. It requires importing `Rebate` and `RebateRestAPI`, defining a `configurationRestAPI` object with credentials, and passing it to the `Rebate` constructor. This replaces the old direct initialization method.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate, RebateRestAPI } from '@binance/rebate';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new Rebate({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Client (Old Method)\nDESCRIPTION: Client initialization with the monolithic Binance connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Old Monolithic Package (TypeScript)\nDESCRIPTION: Demonstrates the client initialization process using the old `@binance/connector` package, instantiating `Spot` directly with API credentials. This pattern is shown in both 'Key Changes' and 'Migration Steps' as the approach to be replaced.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and the Binance Convert library using npm\nDESCRIPTION: Instructions for installing the required Node.js version and the Binance Convert library using npm. The code shows how to use nvm to set the correct Node.js version and then install the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/convert\n```\n\n----------------------------------------\n\nTITLE: Installing New Dual Investment Package (Bash)\nDESCRIPTION: This command installs the new, modular `@binance/dual-investment` package using NPM. This package specifically contains the functionality for interacting with the Binance Dual Investment API.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/dual-investment\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket with Proxy Agent for Binance Derivatives Trading\nDESCRIPTION: Sets up a WebSocket connection with proxy agent configuration for Binance Derivatives Trading API. Uses HttpsProxyAgent for proxy support and connects to retrieve position information. Requires API key and secret for authentication.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/docs/websocket-api/agent.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    agent: new HttpsProxyAgent('your-proxy-url'),\n};\nconst client = new DerivativesTradingCoinFutures({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection) =>\n        connection.positionInformation()\n    )\n    .then((res) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Derivatives Trading Portfolio Margin Client with Custom Timeout in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Binance Derivatives Trading Portfolio Margin API client with a custom timeout setting. It configures the client with API credentials and a 5-second timeout, then attempts to fetch account information.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/docs/rest-api/timeout.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingPortfolioMargin } from '@binance/derivatives-trading-portfolio-margin';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    timeout: 5000,\n};\nconst client = new DerivativesTradingPortfolioMargin({ configurationRestAPI });\n\nclient.restAPI.accountInformation().catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Migration Step: Installing New Package\nDESCRIPTION: Command to install the new C2C-specific package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/c2c\n```\n\n----------------------------------------\n\nTITLE: Importing Client from New Dual Investment Package (TypeScript)\nDESCRIPTION: This code snippet demonstrates the new way to import the `DualInvestment` class from the dedicated `@binance/dual-investment` package in TypeScript. This is the required import path after migrating.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DualInvestment } from '@binance/dual-investment';\n```\n\n----------------------------------------\n\nTITLE: Example of Old Spot Client Initialization (To Be Updated)\nDESCRIPTION: Provides an example of the previous client initialization pattern using `new Spot(...)` with API key and secret. This code needs to be updated according to the new modular structure as described in the fourth step of the migration guide.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Algo Package\nDESCRIPTION: Commands to uninstall the old Binance connector package and install the new Algo-specific package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/algo\n```\n\n----------------------------------------\n\nTITLE: Initializing the Client (Old Method) in TypeScript\nDESCRIPTION: Illustrates the previous method for initializing the Binance client using the `Spot` class from the monolithic package. It required passing API key and secret directly to the constructor. Method calls were made directly on the client instance.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/docs/migration_guide_nft_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\\nclient.<method_name>().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Client Configuration and Initialization Changes\nDESCRIPTION: Comparison of old and new client initialization patterns with API configuration\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CopyTrading, CopyTradingRestAPI } from '@binance/copy-trading';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new CopyTrading({ configurationRestAPI });\n\nclient.restAPI.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: GiftCard Client Creation with API Key/Secret Configuration (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates initializing the modular GiftCard client after migration, including the creation of a configuration object with API credentials and passing it to the new GiftCard constructor. It is the recommended usage pattern for the new @binance/gift-card library. Requires TypeScript and an installed @binance/gift-card package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard, GiftCardRestAPI } from '@binance/gift-card';\n\nconst configurationRestAPI = {\n    apiKey: 'your-key',\n    apiSecret: 'your-secret',\n};\nconst client = new GiftCard({ configurationRestAPI });\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Spot Library with NPM (Bash)\nDESCRIPTION: This command installs the Binance JavaScript SPOT Connector library (`@binance/spot`) using the Node Package Manager (npm). It should be run after ensuring the correct Node.js version (>= 22.12.0) is installed and active in the environment.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/spot\n```\n\n----------------------------------------\n\nTITLE: Migration Step 1: Uninstalling Old Package (Bash)\nDESCRIPTION: This command, as part of the step-by-step migration guide, removes the outdated `@binance/connector` package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Binance Convert\nDESCRIPTION: Example of how to update import statements from the old Binance connector to the new Convert-specific package in TypeScript.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/migration_guide_convert_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert } from '@binance/convert';\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot Client Initialization and Usage - TypeScript\nDESCRIPTION: This snippet shows how to instantiate the legacy Spot client using API credentials and call a method in a TypeScript application. The client is initialized with an object containing apiKey and apiSecret, then methods are accessed as standard promise-returning functions. Requires @binance/connector to be installed in the project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/migration_guide_mining_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Installing New Spot Connector\nDESCRIPTION: Command to install the new modular Spot connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/spot\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Import with New Rebate Client Import\nDESCRIPTION: Shows the correct import statement (`import { Rebate } from '@binance/rebate';`) to use as a replacement for the old Spot client import when migrating to the new Rebate package, as mentioned in the third migration step.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rebate } from '@binance/rebate';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Gift Card Library with NPM (bash)\nDESCRIPTION: These bash snippets guide users on uninstalling the old @binance/connector package and installing the new @binance/gift-card npm package. To use the new Gift Card connector, remove the old dependency and add the new one; both require a working Node.js and npm environment. No code parameters are involved—these are shell commands run in the terminal.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/giftt-card\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/gift-card\n```\n\n----------------------------------------\n\nTITLE: Importing Staking Client from New Package (TypeScript)\nDESCRIPTION: Shows the updated import statement required for the new modular structure. The `Staking` class is imported directly from the `@binance/staking` package in TypeScript.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Staking } from '@binance/staking';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Algo Package\nDESCRIPTION: NPM command to install the Binance Algo client library package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/algo\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version with NVM (Bash)\nDESCRIPTION: This snippet shows how to install and switch to the required Node.js version (22.12.0) using Node Version Manager (nvm). This step is a prerequisite for installing and running the `@binance/spot` library. It ensures the correct Node.js environment is active.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Binance Spot Client with Microsecond Time Unit in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize the Binance Spot client (`@binance/spot`) with a specific time unit configuration for the Websocket API. It imports required classes and enums, defines a configuration object setting the `timeUnit` to `TimeUnit.MICROSECOND`, creates a `Spot` client instance using this configuration, and then connects to the Websocket API to fetch exchange information for the 'BNBUSDT' symbol. Dependencies include the `@binance/spot` library. The configuration requires API credentials (`apiKey`, `apiSecret`) and the Websocket URL (`wsURL`).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/time-unit.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { Spot, SpotWebsocketAPI, TimeUnit, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    timeUnit: TimeUnit.MICROSECOND, // Set time unit to microseconds\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Spot Class from Old Connector Package (TypeScript)\nDESCRIPTION: Demonstrates the old method of importing the main client class (`Spot`) from the monolithic `@binance/connector` package in a TypeScript application. This import path needs to be updated during migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Old Client Initialization with Spot (TypeScript)\nDESCRIPTION: This snippet demonstrates the legacy method for initializing the API client with the Spot class from @binance/connector. It requires an object containing your Binance API key and secret. The client is then used to call methods that return promises. This initialization pattern is deprecated and should be replaced for Gift Card functionality.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\nclient.<method_name>().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Legacy Binance Connector\nDESCRIPTION: Command to remove the old monolithic Binance connector packages from the project dependencies.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector @binance/connector-typescript @binance/futures-connector\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Package via NPM (Bash)\nDESCRIPTION: Provides the specific NPM command to remove the deprecated `@binance/connector` package from a project, as detailed in Step 1 of the migration instructions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Monolithic Connector Package (Bash)\nDESCRIPTION: This command removes the old, monolithic `@binance/connector` package from the project using the Node Package Manager (NPM). This is the first step in migrating to the new modular structure.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/docs/migration_guide_dual_investment_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Migration Step 4: Identifying Old Client Initialization (TypeScript)\nDESCRIPTION: Shows the old client initialization code (`new Spot(...)`) that needs to be identified and updated as part of the migration process.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Copy Trading library via npm\nDESCRIPTION: Command to install the Binance Copy Trading library using npm package manager.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/copy-trading\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version with NVM (Bash)\nDESCRIPTION: Commands to install and activate the required Node.js version (22.12.0 or later) using Node Version Manager (nvm). This step ensures the correct runtime environment before installing the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Importing Spot Client from Old Connector (TypeScript)\nDESCRIPTION: Demonstrates the old method of importing the client class (e.g., `Spot`) from the monolithic `@binance/connector` package in a TypeScript application.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Initializing Old Client (Initialization Line Only - TypeScript)\nDESCRIPTION: Shows only the client instantiation line using the old method with the monolithic package, passing credentials directly to the constructor. This snippet appears within the step-by-step guide.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Fiat({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Spot API Connector Package\nDESCRIPTION: Example npm installation command for the Binance Spot Trading connector. Each Binance API connector is published as a separate npm package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/spot\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Binance Packages with NPM - Bash\nDESCRIPTION: These commands demonstrate how to remove the legacy @binance/connector package from a Node.js project and replace it with the new @binance/pay package. You must have Node.js and npm installed to use these commands. The first line uninstalls the old connector, and the second line installs the new modular Pay package. No parameters are required, and these commands should be run in your project root directory.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/docs/migration_guide_pay_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/pay\n```\n\n----------------------------------------\n\nTITLE: Installing the New C2C Package\nDESCRIPTION: Commands to uninstall the old connector package and install the new C2C-specific package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/c2c\n```\n\n----------------------------------------\n\nTITLE: Installing the Binance Fiat Library using NPM (Bash)\nDESCRIPTION: Command to install the `@binance/fiat` package using the Node Package Manager (npm). This makes the library available for use in a Node.js project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/fiat\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Margin Trading Connector via npm - Bash\nDESCRIPTION: This command installs the Binance Margin Trading Connector package from npm. It should be run after ensuring the Node.js version is compatible. The command fetches the library and its dependencies, making its API available for use in JavaScript/TypeScript projects.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/margin-trading\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version Using NVM\nDESCRIPTION: Commands to install and use the required Node.js version 22.12.0 using Node Version Manager (nvm).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Simple Earn Connector Package - Bash\nDESCRIPTION: Demonstrates installation of the @binance/simple-earn library using npm. This snippet must be run in the project directory and requires Node.js version 22.12.0 or higher. The installed package provides access to the Simple Earn REST API client and utilities.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/simple-earn\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Binance Mining Library\nDESCRIPTION: Illustrates the commands required to run the test suite for the Binance Mining library. First, `npm install` installs all project dependencies (including development dependencies). Then, `npm run test` executes the predefined test script, typically running unit and integration tests to verify the library's functionality, including REST API endpoints and error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Convert Package\nDESCRIPTION: Commands to uninstall the old Binance connector package and install the new Convert-specific package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/docs/migration_guide_convert_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/convert\n```\n\n----------------------------------------\n\nTITLE: Installing New Binance Rebate Package via NPM\nDESCRIPTION: Provides the specific NPM command to install the new modular `@binance/rebate` package into a project as the second step in the migration process. Requires NPM.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/rebate\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for Binance Auto Invest in TypeScript\nDESCRIPTION: Shows the change in import statement from the old Spot class to the new AutoInvest class.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/docs/migration_guide_auto_invest_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AutoInvest } from '@binance/auto-invest';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Packages with NPM (bash)\nDESCRIPTION: These commands demonstrate how to remove the deprecated @binance/connector package and install the new @binance/wallet package using npm. Ensure you have npm installed on your system to execute these commands. The commands do not require any inputs aside from being run in your project root directory. Outputs are standard npm logs that confirm package changes.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/docs/migration_guide_wallet_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/wallet\n```\n\n----------------------------------------\n\nTITLE: Installing New Binance Fiat Package via npm\nDESCRIPTION: This command installs the new modular `@binance/fiat` package into the project's dependencies using the Node Package Manager (npm). This step follows the uninstallation of the old package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/fiat\n```\n\n----------------------------------------\n\nTITLE: Installing the New Binance Staking Package using npm\nDESCRIPTION: This command installs the new modular `@binance/staking` package into a Node.js project using the npm package manager. This package specifically handles Binance Staking functionalities.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/staking\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version Using NVM - Bash\nDESCRIPTION: This snippet shows how to install and activate Node.js version 22.12.0 using Node Version Manager (nvm). The commands ensure the runtime environment matches the library's minimum requirements. You must have nvm installed on your machine prior to running these commands; upon successful execution, Node.js 22.12.0 will be set as the active version for subsequent npm operations.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version and Installing Dependencies with npm - Bash\nDESCRIPTION: Demonstrates how to install and use the required Node.js version (22.12.0) using nvm, and then install the @binance/rebate package via npm. This ensures environment compatibility and package availability for using the Binance Rebate Connector. Both commands should be executed in a terminal where nvm is set up. No code dependencies are required beyond nvm and npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/rebate\n```\n\n----------------------------------------\n\nTITLE: Installing the Binance Derivatives Trading library via npm\nDESCRIPTION: Command to install the Binance Derivatives Trading Portfolio Margin Pro library using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-portfolio-margin-pro\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths from Spot to GiftCard (TypeScript)\nDESCRIPTION: These TypeScript import statements show how to update your codebase to switch from the old Spot import in @binance/connector to using GiftCard in @binance/gift-card. This enables the use of the new modular API client and is required to interface with Gift Card features. Ensure the new package is present in your project before updating imports.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/docs/migration_guide_gift_card_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GiftCard } from '@binance/gift-card';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance NFT Connector Package via NPM in Bash\nDESCRIPTION: This snippet demonstrates installing the @binance/nft package using npm. It is required for accessing the Binance NFT REST API from JavaScript or TypeScript applications. The command downloads and installs the module and its dependencies into the current project directory.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/nft\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Binance Algo Package\nDESCRIPTION: Example of how to update import statements from the old Binance connector to the new Algo-specific package in TypeScript.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Algo } from '@binance/algo';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Pay Connector with NPM - Bash\nDESCRIPTION: This snippet demonstrates how to install the Binance Pay Connector library from the npm package registry. The command integrates the \"@binance/pay\" package into your Node.js project's dependencies. Ensure your project directory is initialized (e.g., run npm init if necessary) and Node.js 22.12.0 or newer is active before executing this command.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/pay\n```\n\n----------------------------------------\n\nTITLE: New Package Installation Command\nDESCRIPTION: Command to install the new Copy Trading package\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/copy-trading\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Connector Package (Bash)\nDESCRIPTION: This command uses npm (Node Package Manager) to remove the old monolithic `@binance/connector` package from a project's dependencies. This is the first step in migrating to the new modular package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version for Binance C2C Connector\nDESCRIPTION: Commands to install and use the required Node.js version 22.12.0 using Node Version Manager (nvm)\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Crypto Loan Package\nDESCRIPTION: NPM command to install the Binance crypto loan library package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/crypto-loan\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Sub Account Connector via npm in Bash\nDESCRIPTION: This snippet shows how to install the @binance/sub-account package using the npm package manager. It is required that npm is installed in your environment. Running this command adds the Binance Sub Account Connector to your Node.js project, allowing programmatic access to sub account API endpoints.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/sub-account\n```\n\n----------------------------------------\n\nTITLE: Legacy Spot Client Import Statement - TypeScript\nDESCRIPTION: This snippet demonstrates importing the Spot client from the old @binance/connector package in TypeScript. This import grants access to all Binance Connector functionality before modularization. It must be replaced with specific product imports as part of migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/migration_guide_mining_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Staking Library via NPM (Bash)\nDESCRIPTION: Command to install the `@binance/staking` package using the Node Package Manager (npm). This makes the Binance Staking Connector library available for use within a Node.js project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/staking\n```\n\n----------------------------------------\n\nTITLE: Installing New Binance Spot Package (Bash)\nDESCRIPTION: This command installs the new modular Binance Spot connector package (`@binance/spot`) using npm. This package replaces the older monolithic connector for Spot trading functionalities.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/spot\n```\n\n----------------------------------------\n\nTITLE: Installing Binance C2C Package\nDESCRIPTION: Command to install the Binance C2C connector package using npm\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/c2c\n```\n\n----------------------------------------\n\nTITLE: Migration Step 1: Uninstall Command\nDESCRIPTION: Specifies the command to uninstall the old `@binance/connector` package as the first step in the migration process.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Binance Connector Package Using NPM - Bash\nDESCRIPTION: This snippet demonstrates the NPM command to uninstall the legacy @binance/connector package from a Node.js project. Requires NPM to be installed and run from the project's root directory. No input parameters are required; executing the command removes the specified package as a dependency.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Migration Step 3: Updating to New Import Path (TypeScript)\nDESCRIPTION: Shows the replacement import statement using the new `@binance/subb-account` package (note the typo 'subb-account' in the original text is preserved here). This is the target import path for the migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/migration_guide_sub_account_connector.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount } from '@binance/subb-account';\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Reconnect Delay for Binance Spot WebSocket in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Binance Spot client (`@binance/spot`) with a custom reconnect delay for WebSocket connections. It imports required modules, defines a configuration object `configurationWebsocketAPI` specifying the API keys, WebSocket URL, and a `reconnectDelay` of 3000 milliseconds (3 seconds). It then instantiates the `Spot` client with this configuration, connects to the WebSocket API, fetches exchange information for 'BNBUSDT', and logs the result or any errors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/websocket-api/reconnect-delay.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot, SpotWebsocketAPI, SPOT_WS_API_PROD_URL } from '@binance/spot';\n\nconst configurationWebsocketAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    wsURL: SPOT_WS_API_PROD_URL,\n    reconnectDelay: 3000, // Set reconnect delay to 3 seconds\n};\nconst client = new Spot({ configurationWebsocketAPI });\n\nclient.websocketAPI\n    .connect()\n    .then((connection: SpotWebsocketAPI.WebsocketAPIConnection) =>\n        connection.exchangeInfo({ symbol: 'BNBUSDT' })\n    )\n    .then((res: SpotWebsocketAPI.ApiResponse<SpotWebsocketAPI.ExchangeInfoResponse>) =>\n        console.log(res.data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression and Querying Binance SubAccount API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and configure a Binance SubAccount client in TypeScript with compression explicitly disabled via the configurationRestAPI object. It then calls the getSummaryOfSubAccountsMarginAccount method on the client\\'s restAPI to asynchronously fetch margin summaries for sub-accounts, handling the response and errors using Promises. Dependencies include the '@binance/sub-account' package, and users must provide their Binance API credentials ('apiKey' and 'apiSecret'); expected output is logged summary data.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/docs/rest-api/compression.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SubAccount, SubAccountRestAPI } from '@binance/sub-account';\n\nconst configurationRestAPI = {\n    apiKey: 'your-api-key',\n    apiSecret: 'your-api-secret',\n    compression: false, // Disable compression\n};\nconst client = new SubAccount({ configurationRestAPI });\n\nclient.restAPI\n    .getSummaryOfSubAccountsMarginAccount()\n    .then((res) => res.data())\n    .then((data: SubAccountRestAPI.GetSummaryOfSubAccountsMarginAccountResponse) =>\n        console.log(data)\n    )\n    .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Installing New Crypto Loan Package\nDESCRIPTION: Command to install the new modularized Crypto Loan package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/docs/migration_guide_crypto_loan_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/crypto-loan\n```\n\n----------------------------------------\n\nTITLE: Old Importing of Spot Client from Binance Connector - TypeScript\nDESCRIPTION: This TypeScript import statement was used in existing projects to import the Spot client from the monolithic @binance/connector package. The Spot client provided access to spot trading APIs prior to modularization. Requires the @binance/connector package to be installed and available in the project dependencies.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/docs/migration_guide_simple_earn_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Auto Invest Connector via npm\nDESCRIPTION: Command to install the Binance Auto Invest Connector library using npm (Node Package Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/auto-invest\n```\n\n----------------------------------------\n\nTITLE: Installing New Binance Algo Package\nDESCRIPTION: Command to install the new Binance Algo-specific package using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/docs/migration_guide_algo_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/algo\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Derivatives Trading COIN-M Futures Library\nDESCRIPTION: Installs the Binance Derivatives Trading COIN-M Futures library using npm (Node Package Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-coin-futures\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Connector Package (Bash)\nDESCRIPTION: This command uninstalls the previous monolithic Binance connector package (`@binance/connector`) using npm. This step is necessary before installing the new modular package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests - Bash\nDESCRIPTION: This sequence shows how to prepare the project for testing its REST API endpoints and error handling routines. The commands first install all dependencies and then execute the test suite with npm. A proper Node.js environment is required. Output will include test results, confirming functionality and revealing any issues or failures.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Migration Step: Old Client Initialization\nDESCRIPTION: Example of how client initialization was done with the previous package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Spot({ apiKey: 'your-key', apiSecret: 'your-secret' });\n```\n\n----------------------------------------\n\nTITLE: Installing New Modular Package via NPM (Bash)\nDESCRIPTION: Provides the NPM command required to install the new, modular `@binance/vip-loan` package, as detailed in Step 2 of the migration instructions.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/docs/migration_guide_vip_loan_connector.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/vip-loan\n```\n\n----------------------------------------\n\nTITLE: Importing Spot Client (Old Monolithic Package)\nDESCRIPTION: Shows how the `Spot` client class was imported from the old `@binance/connector` package in previous versions. This import statement is now deprecated for Rebate functionality and needs to be updated.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version for Binance Auto Invest Connector\nDESCRIPTION: Commands to install and use the required Node.js version (22.12.0) using nvm (Node Version Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/auto-invest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Library using NPM (Bash)\nDESCRIPTION: Shows the command to install the `@binance/derivatives-trading-portfolio-margin` package using the Node Package Manager (npm). This follows setting the correct Node.js version.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-portfolio-margin\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Derivatives Trading Options package\nDESCRIPTION: Command to install the Binance Derivatives Trading Options library using npm.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-options/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-options\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and Installing Binance Mining Connector with npm - Bash\nDESCRIPTION: This snippet shows the necessary npm commands to remove the old Binance Connector package and install the new @binance/mining package. It is used at the terminal to manage dependencies before updating code imports and usage. Successful execution ensures the project depends on the mining-only modular package instead of the monolith.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/docs/migration_guide_mining_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/mining\n```\n\n----------------------------------------\n\nTITLE: Running Library Tests with NPM (Bash)\nDESCRIPTION: Commands to install project dependencies using `npm install` and then execute the library's test suite using `npm run test`. This is useful for verifying the library's functionality, often used during development or before contributing changes.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Migration Step 3: Old Import Example\nDESCRIPTION: Shows the TypeScript import statement that needs to be replaced during the migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/docs/migration_guide_staking_connector.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Connector Package via NPM\nDESCRIPTION: Provides the specific NPM command required to remove the deprecated `@binance/connector` package from a project as the first step in the migration process detailed in the guide. Requires NPM.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Updating NPM Package for Binance Rebate Connector\nDESCRIPTION: Demonstrates the necessary NPM commands to remove the old monolithic `@binance/connector` package and install the new modular `@binance/rebate` package. This is a required step in the migration process. Requires Node Package Manager (NPM) to be installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/rebate/docs/migration_guide_rebate_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\nnpm install @binance/rebate\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version using NVM (Bash)\nDESCRIPTION: Demonstrates how to install and switch to the required Node.js version (22.12.0 or later) using Node Version Manager (nvm). This is a prerequisite step mentioned in the installation guide.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Derivatives Trading USDS-M Futures library\nDESCRIPTION: npm command to install the Binance Derivatives Trading USDS-M Futures library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-usds-futures/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-usds-futures\n```\n\n----------------------------------------\n\nTITLE: Installing the Library with npm (Bash)\nDESCRIPTION: Shows the command to install the `@binance/wallet` package using the Node Package Manager (npm). This command should be run after ensuring the correct Node.js version is active.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/wallet\n```\n\n----------------------------------------\n\nTITLE: Package Uninstallation Command\nDESCRIPTION: Command to remove the old Binance connector package\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/docs/migration_guide_copy_trading_connector.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Running tests for Binance Copy Trading Connector\nDESCRIPTION: Commands to install dependencies and run tests for the Binance Copy Trading Connector project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Migration Step: Old Import Style\nDESCRIPTION: Example of the import statement that needs to be replaced during migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Binance Connector Package via npm\nDESCRIPTION: This command removes the old monolithic `@binance/connector` package from the project's dependencies using the Node Package Manager (npm). This is the first step in the migration process.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/docs/migration_guide_fiat_connector.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Common Utilities via npm (bash)\nDESCRIPTION: Demonstrates the installation command for the @binance/common npm package, required to access the shared utility functions and helpers. This snippet should be executed in a shell environment with npm installed, and it ensures the package is added to the project dependencies. No further input is necessary, and successful execution prepares a JavaScript or TypeScript project for using the Binance connector utilities.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/common/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/common\n```\n\n----------------------------------------\n\nTITLE: Running Library Tests (Bash)\nDESCRIPTION: Commands to first install all project dependencies (including development dependencies) using 'npm install', and then execute the predefined test suite using 'npm run test'. This verifies the correctness of the library's implementation.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/gift-card/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with nvm - Bash\nDESCRIPTION: This snippet demonstrates how to set up the required Node.js version (22.12.0) using the Node Version Manager (nvm). Developers must execute these commands in the terminal to ensure their environment matches the library requirements. The commands handle both installation and selection of the correct Node.js version, which is a prerequisite for the Binance Margin Trading Connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/margin-trading/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing New Futures Connector\nDESCRIPTION: Command to install the new modular COIN-M Futures connector package.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/derivatives-trading-coin-futures\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Dual Investment Connector - Bash\nDESCRIPTION: This snippet illustrates basic npm commands to install dependencies and run the test suite for the Binance Dual Investment JavaScript connector. 'npm install' fetches all development and production dependencies as specified in package.json, while 'npm run test' executes the project's defined tests. The expected output is a summary of test results, including passed and failed tests. No additional parameters are needed unless customizing npm configuration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/dual-investment/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Importing Spot Client (Old Method - TypeScript)\nDESCRIPTION: This snippet shows the import statement used in the previous version of the connector (`@binance/connector`) to import the `Spot` class. This path is now deprecated.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/spot/docs/migration_guide_spot_connector.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spot } from '@binance/connector';\n```\n\n----------------------------------------\n\nTITLE: Legacy Futures Import\nDESCRIPTION: Old import statement for the CMFutures client from monolithic connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CMFutures } from '@binance/futures-connector';\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite for Binance Pay Connector - Bash\nDESCRIPTION: This snippet provides the steps to install Node.js dependencies and execute the test suite included with the Binance Pay Connector library. Running these commands ensures all REST API endpoints and error handling cases are verified. Inputs: package.json with test scripts defined, relevant network access, Node.js runtime. Outputs: console output of test results, including pass/fail status and code coverage as supported by the underlying test framework.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/pay/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version using NVM - Bash\nDESCRIPTION: This snippet shows how to install and use the required Node.js version (22.12.0) for the Binance Simple Earn Connector using Node Version Manager (nvm). 'nvm install' fetches the desired version and 'nvm use' switches to it for the current shell session. Users must have nvm installed and sourced before running these commands.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node.js Version with NVM (Bash)\nDESCRIPTION: Commands to install and use Node.js version 22.12.0 using Node Version Manager (nvm). This step ensures the correct Node.js environment is active, which is a prerequisite for the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Running Library Tests using NPM (Bash)\nDESCRIPTION: Commands to install project dependencies and then execute the test suite using npm scripts. This is used to verify the functionality and correctness of the library code, covering REST API endpoints and error handling.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Migration Step: Uninstalling Old Package\nDESCRIPTION: Command to remove the old Binance connector package from your project.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @binance/connector\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests with npm (Bash)\nDESCRIPTION: Illustrates the commands needed to run the test suite for the library. First, `npm install` installs all necessary project dependencies (including development dependencies), and then `npm run test` executes the predefined test script.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/wallet/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Binance C2C Connector\nDESCRIPTION: Commands to install dependencies and run the test suite for the connector\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and Setting Version via NVM in Bash\nDESCRIPTION: This snippet shows how to install and switch to Node.js version 22.12.0 using Node Version Manager (nvm). It's useful for ensuring compatibility with the binance-connector-js library, which requires this or a later Node.js version. Inputs are shell commands typed into a terminal, and the output is the local Node.js environment set to the specified version.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using NPM (Bash)\nDESCRIPTION: Provides the necessary shell commands to install project dependencies and execute the test suite using npm. This is typically done after cloning the repository or setting up the development environment.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version using NVM (Bash)\nDESCRIPTION: Commands to install and use Node.js version 22.12.0 using Node Version Manager (nvm). This is presented as a prerequisite step before installing the `@binance/fiat` library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/fiat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Running tests for the Binance Convert library\nDESCRIPTION: Commands for installing dependencies and running tests for the Binance Convert library. The tests cover REST API endpoints, error handling, and edge cases.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/convert/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: New Futures Import\nDESCRIPTION: Updated import statement for the COIN-M Futures client from modular connector.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/MIGRATION.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DerivativesTradingCoinFutures } from '@binance/derivatives-trading-coin-futures';\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Binance Simple Earn Connector - Bash\nDESCRIPTION: Demonstrates how to install project dependencies and run the test suite for the Binance Simple Earn Connector. 'npm install' installs all required Node.js dependencies and 'npm run test' executes the defined tests, verifying the functionality of REST endpoints and error handling. Requires access to a shell and Node.js installation within the project directory.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/simple-earn/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node Version Manager with Bash\nDESCRIPTION: This snippet demonstrates how to install and switch to Node.js version 22.12.0 using nvm (Node Version Manager) on the command line. It requires that nvm is already installed on your machine. The commands ensure the environment is set to the correct Node.js version, which is essential for compatibility with the Binance Sub Account Connector library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version with NVM\nDESCRIPTION: Commands to install and use the required Node.js version 22.12.0 using Node Version Manager (NVM).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/algo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands to install dependencies and run the test suite for the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/crypto-loan/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Version for Binance Connector\nDESCRIPTION: Sets up the correct Node.js version (22.12.0 or later) using nvm (Node Version Manager) for use with the Binance Derivatives Trading COIN-M Futures library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-coin-futures/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Installing Binance VIP Loan Connector using npm - Bash\nDESCRIPTION: Demonstrates how to install Node.js version 22.12.0 with nvm, switch to that version, and install the @binance/vip-loan npm package. This snippet is intended for preparing the environment and acquiring dependencies before using the Binance VIP Loan API client. The commands must be run in a Unix-like shell, and the user should have nvm (Node Version Manager) installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\\nnvm use 22.12.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/vip-loan\n```\n\n----------------------------------------\n\nTITLE: Running tests for the Binance Derivatives Trading library\nDESCRIPTION: Commands to install dependencies and run the test suite for the library.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/derivatives-trading-portfolio-margin-pro/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies and Running Tests with Bash\nDESCRIPTION: This bash snippet details the commands to install Node.js dependencies using npm and then run the project's test suite. It is intended for contributors or developers who want to verify the integrity and functionality of their installation or contribution. Prerequisites include Node.js and npm being installed in the environment, and all dependencies defined in package.json. Running npm run test executes the automated tests across all supported features.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/sub-account/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog History - Markdown\nDESCRIPTION: This snippet is a Markdown-formatted changelog that logs project changes, updates, and removals by release version for the binance-connector-js project. No dependencies are required to interpret this file other than basic Markdown support. Input is not expected, and the output is strictly human-readable, serving as reference for project maintainers and users. No code execution is involved.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/staking/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 2.0.0 - 2025-04-10\n\n### Changed\n\n- Update `@binance/common` library to version `1.0.2`.\n- Update examples.\n\n### Removed\n\n- Remove unused error reponses.\n\n## 1.0.1 - 2025-04-07\n\n- Update `@binance/common` library to version `1.0.1`.\n- Remove unsupported Testnet URL.\n\n## 1.0.0 - 2025-03-24\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using NPM Scripts in Bash\nDESCRIPTION: These Bash commands install npm dependencies and execute the project's test suite. They are used to validate connectivity, API endpoint support, error handling, and edge-case robustness within the Binance NFT JavaScript connector. 'npm install' prepares the working environment by installing all required modules, and 'npm run test' runs the pre-defined tests.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/nft/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Binance VIP Loan Connector - Bash\nDESCRIPTION: Outlines the basic procedure for installing development dependencies and running the test suite with npm. This helps ensure the client library functions correctly and that all test cases pass prior to contributing changes. Requires Node.js (version >= 22.12.0) and npm installed.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/vip-loan/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\\n\\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing the Binance Mining Library using npm\nDESCRIPTION: Shows the command to install the `@binance/mining` package using the Node Package Manager (npm). This command downloads and installs the library into your project's node_modules directory. It assumes Node.js and npm are already installed and the correct Node version (>= 22.12.0) is active.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/mining/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @binance/mining\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js version for Binance Copy Trading Connector\nDESCRIPTION: Commands to install and use the required Node.js version (22.12.0 or later) using nvm (Node Version Manager).\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/copy-trading/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js Environment for Binance Connectors\nDESCRIPTION: Commands to install and use the correct Node.js version (22.12.0) using Node Version Manager (nvm) for Binance JavaScript connectors.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnvm install 22.12.0\nnvm use 22.12.0\n```\n\n----------------------------------------\n\nTITLE: Migration Step: New Import Style\nDESCRIPTION: Updated import statement that should replace the old one during migration.\nSOURCE: https://github.com/binance/binance-connector-js/blob/master/clients/c2c/docs/migration_guide_c2c_connector.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { C2C } from '@binance/c2c';\n```"
  }
]