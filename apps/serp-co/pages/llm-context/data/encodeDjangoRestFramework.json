[
  {
    "owner": "encode",
    "repo": "django-rest-framework",
    "content": "TITLE: Rendering Serialized Data as JSON\nDESCRIPTION: Shows how to convert serialized data into JSON format using the JSONRenderer from Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.renderers import JSONRenderer\n\njson = JSONRenderer().render(serializer.data)\njson\n# b'{\"email\":\"leila@example.com\",\"content\":\"foo bar\",\"created\":\"2016-01-27T15:17:10.375877\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Authentication Classes in Django REST Framework\nDESCRIPTION: Example showing how to set default authentication classes globally in Django REST settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete REST API for Django User Model\nDESCRIPTION: Comprehensive example of implementing a RESTful API for Django's User model using serializers, viewsets, and routers.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/index.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\nfrom django.contrib.auth.models import User\nfrom rest_framework import routers, serializers, viewsets\n\n# Serializers define the API representation.\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'is_staff']\n\n# ViewSets define the view behavior.\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON Data with Django REST Framework\nDESCRIPTION: Illustrates how to parse JSON data into Python native datatypes using the JSONParser, which can then be used with a serializer to validate and process the data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport io\nfrom rest_framework.parsers import JSONParser\n\nstream = io.BytesIO(json)\ndata = JSONParser().parse(stream)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Fields in ModelSerializer in Python\nDESCRIPTION: Creates a DynamicFieldsModelSerializer that allows specifying which fields should be used at the point of initializing the serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass DynamicFieldsModelSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A ModelSerializer that takes an additional `fields` argument that\n    controls which fields should be displayed.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        # Don't pass the 'fields' arg up to the superclass\n        fields = kwargs.pop('fields', None)\n\n        # Instantiate the superclass normally\n        super().__init__(*args, **kwargs)\n\n        if fields is not None:\n            # Drop any fields that are not specified in the `fields` argument.\n            allowed = set(fields)\n            existing = set(self.fields)\n            for field_name in existing - allowed:\n                self.fields.pop(field_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-level Validation in a Serializer\nDESCRIPTION: Shows how to implement custom field-level validation by adding validate_<field_name> methods to a Serializer subclass, which can perform specific validation logic for individual fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\n\nclass BlogPostSerializer(serializers.Serializer):\n    title = serializers.CharField(max_length=100)\n    content = serializers.CharField()\n\n    def validate_title(self, value):\n        \"\"\"\n        Check that the blog post is about Django.\n        \"\"\"\n        if 'django' not in value.lower():\n            raise serializers.ValidationError(\"Blog post is not about Django\")\n        return value\n```\n\n----------------------------------------\n\nTITLE: Basic ModelViewSet Implementation in Django Rest Framework\nDESCRIPTION: Example of implementing a ModelViewSet class that provides CRUD operations for Account objects. It shows how to set required attributes like queryset, serializer_class, and permission_classes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n```\n\n----------------------------------------\n\nTITLE: ModelViewSet with Dynamic Queryset in Django Rest Framework\nDESCRIPTION: Implementation of a ModelViewSet that dynamically determines the queryset based on the request user. It overrides get_queryset() to return only accounts associated with the current user.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass AccountViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing and editing the accounts\n    associated with the user.\n    \"\"\"\n    serializer_class = AccountSerializer\n    permission_classes = [IsAccountAdminOrReadOnly]\n\n    def get_queryset(self):\n        return self.request.user.accounts.all()\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects with Django REST Framework\nDESCRIPTION: Demonstrates how to use a CommentSerializer to convert a Comment object into Python native datatypes. The serializer.data property returns a dictionary representation that can be further rendered as JSON.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nserializer = CommentSerializer(comment)\nserializer.data\n# {'email': 'leila@example.com', 'content': 'foo bar', 'created': '2016-01-27T15:17:10.375877'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create and Update Methods in a Serializer\nDESCRIPTION: Demonstrates how to implement the create() and update() methods in a serializer to handle creating new instances and updating existing ones based on validated data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n\n    def create(self, validated_data):\n        return Comment(**validated_data)\n\n    def update(self, instance, validated_data):\n        instance.email = validated_data.get('email', instance.email)\n        instance.content = validated_data.get('content', instance.content)\n        instance.created = validated_data.get('created', instance.created)\n        return instance\n```\n\n----------------------------------------\n\nTITLE: Customizing TokenAdmin in Django REST Framework\nDESCRIPTION: This code snippet demonstrates how to customize the TokenAdmin class in Django admin by declaring the user field as a raw_id_field. This is useful for large user bases to improve admin performance.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.authtoken.admin import TokenAdmin\n\nTokenAdmin.raw_id_fields = ['user']\n```\n\n----------------------------------------\n\nTITLE: Using ModelViewSet for CRUD Operations in Django REST Framework\nDESCRIPTION: An example of using the pre-built ModelViewSet class which provides default implementations for CRUD operations, requiring only the serializer class and queryset to be specified.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset for viewing and editing user instances.\n    \"\"\"\n    serializer_class = UserSerializer\n    queryset = User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication in Django REST Framework\nDESCRIPTION: This snippet shows how to create a custom authentication class by subclassing BaseAuthentication. It authenticates users based on a custom 'X-USERNAME' header in the request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom rest_framework import authentication\nfrom rest_framework import exceptions\n\nclass ExampleAuthentication(authentication.BaseAuthentication):\n    def authenticate(self, request):\n        username = request.META.get('HTTP_X_USERNAME')\n        if not username:\n            return None\n\n        try:\n            user = User.objects.get(username=username)\n        except User.DoesNotExist:\n            raise exceptions.AuthenticationFailed('No such user')\n\n        return (user, None)\n```\n\n----------------------------------------\n\nTITLE: Using save() to Create or Update Instances\nDESCRIPTION: Demonstrates how to use the save() method to create new instances or update existing ones based on whether an instance was provided when instantiating the serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncomment = serializer.save()\n\n# .save() will create a new instance.\nserializer = CommentSerializer(data=data)\n\n# .save() will update the existing `comment` instance.\nserializer = CommentSerializer(comment, data=data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializer Inheritance in Python\nDESCRIPTION: Shows how to extend and reuse serializers through inheritance, declaring a common set of fields or methods on a parent class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nclass MyBaseSerializer(Serializer):\n    my_field = serializers.CharField()\n\n    def validate_my_field(self, value):\n        ...\n\nclass MySerializer(MyBaseSerializer):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Token Authentication Setup\nDESCRIPTION: Example of creating and using authentication tokens for API access.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'rest_framework.authtoken'\n]\n\nfrom rest_framework.authtoken.models import Token\n\ntoken = Token.objects.create(user=...)\nprint(token.key)\n```\n\n----------------------------------------\n\nTITLE: Creating Writable Nested Serializers in Django REST Framework\nDESCRIPTION: Demonstrates how to implement writable nested serializers by overriding the create() method to explicitly handle saving child relationships. This example shows creating both an Album and its associated Tracks in one operation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ['order', 'title', 'duration']\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True)\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n\n    def create(self, validated_data):\n        tracks_data = validated_data.pop('tracks')\n        album = Album.objects.create(**validated_data)\n        for track_data in tracks_data:\n            Track.objects.create(album=album, **track_data)\n        return album\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Updates with ListSerializer in Django REST Framework\nDESCRIPTION: Custom implementation of the update method for ListSerializer to handle multiple updates, including creations, updates, and deletions of book objects.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nclass BookListSerializer(serializers.ListSerializer):\n    def update(self, instance, validated_data):\n        # Maps for id->instance and id->data item.\n        book_mapping = {book.id: book for book in instance}\n        data_mapping = {item['id']: item for item in validated_data}\n\n        # Perform creations and updates.\n        ret = []\n        for book_id, data in data_mapping.items():\n            book = book_mapping.get(book_id, None)\n            if book is None:\n                ret.append(self.child.create(data))\n            else:\n                ret.append(self.child.update(book, data))\n\n        # Perform deletions.\n        for book_id, book in book_mapping.items():\n            if book_id not in data_mapping:\n                book.delete()\n\n        return ret\n\nclass BookSerializer(serializers.Serializer):\n    # We need to identify elements in the list using their primary key,\n    # so use a writable field here, rather than the default which would be read-only.\n    id = serializers.IntegerField()\n    ...\n\n    class Meta:\n        list_serializer_class = BookListSerializer\n```\n\n----------------------------------------\n\nTITLE: Creating a ModelSerializer for Snippet Model in Django REST Framework\nDESCRIPTION: Defines a ModelSerializer class for the Snippet model to reduce code duplication. The Meta class specifies the model and fields to be serialized.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ['id', 'title', 'code', 'linenos', 'language', 'style']\n```\n\n----------------------------------------\n\nTITLE: Declaring ModelSerializer for Account Model in Python\nDESCRIPTION: This example shows how to declare a ModelSerializer for an Account model. It automatically generates fields based on the model and includes simple implementations of create() and update() methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['id', 'account_name', 'users', 'created']\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Level Owner Permission in Django REST Framework\nDESCRIPTION: Shows how to create an object-level permission class that allows read access to any user but restricts write operations to the object owner only.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Object-level permission to only allow owners of an object to edit it.\n    Assumes the model instance has an `owner` attribute.\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # Instance must have an attribute named `owner`.\n        return obj.owner == request.user\n```\n\n----------------------------------------\n\nTITLE: Nested Object Serialization in Django REST Framework\nDESCRIPTION: Implementation of nested serializers to handle complex object relationships.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(max_length=100)\n\nclass CommentSerializer(serializers.Serializer):\n    user = UserSerializer()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n```\n\n----------------------------------------\n\nTITLE: Object-level Validation with Django REST Framework Serializer\nDESCRIPTION: Implementation of a serializer with custom validation to ensure start date occurs before finish date.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\n\nclass EventSerializer(serializers.Serializer):\n    description = serializers.CharField(max_length=100)\n    start = serializers.DateTimeField()\n    finish = serializers.DateTimeField()\n\n    def validate(self, data):\n        \"\"\"\n        Check that start is before finish.\n        \"\"\"\n        if data['start'] > data['finish']:\n            raise serializers.ValidationError(\"finish must occur after start\")\n        return data\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchFilter with Django REST Framework\nDESCRIPTION: Example of implementing SearchFilter in a Django REST Framework view. This filter allows clients to perform text-based searches on specified model fields using a query parameter. The search_fields attribute defines which fields can be searched.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import filters\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['username', 'email']\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ListSerializer for Bulk Creation\nDESCRIPTION: Example of a custom ListSerializer that overrides the create method to perform bulk creation of objects. This enables efficient batch creation instead of creating objects one at a time.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass BookListSerializer(serializers.ListSerializer):\n    def create(self, validated_data):\n        books = [Book(**item) for item in validated_data]\n        return Book.objects.bulk_create(books)\n\nclass BookSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = BookListSerializer\n```\n\n----------------------------------------\n\nTITLE: Creating Custom IsOwnerOrReadOnly Permission in Django REST Framework\nDESCRIPTION: Implementing a custom permission class that allows read access to everyone but restricts write operations to the owner of the object. This enables object-level permission control based on ownership.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # Write permissions are only allowed to the owner of the snippet.\n        return obj.owner == request.user\n```\n\n----------------------------------------\n\nTITLE: Implementing IP Blocklist Permission in Django REST Framework\nDESCRIPTION: A complete example of a custom permission class that checks incoming request IP addresses against a blocklist database and denies access to blocked IPs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import permissions\n\nclass BlocklistPermission(permissions.BasePermission):\n    \"\"\"\n    Global permission check for blocked IPs.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        ip_addr = request.META['REMOTE_ADDR']\n        blocked = Blocklist.objects.filter(ip_addr=ip_addr).exists()\n        return not blocked\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Fields to ModelSerializer in Python\nDESCRIPTION: This snippet shows how to add extra fields or override default fields in a ModelSerializer by declaring them explicitly on the class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n    groups = serializers.PrimaryKeyRelatedField(many=True)\n\n    class Meta:\n        model = Account\n        fields = ['url', 'groups']\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only BaseSerializer in Django REST Framework\nDESCRIPTION: Example of creating a read-only serializer using BaseSerializer for a HighScore model, implementing the to_representation method to convert instances into primitive data types.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nclass HighScore(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    player_name = models.CharField(max_length=10)\n    score = models.IntegerField()\n\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, instance):\n        return {\n            'score': instance.score,\n            'player_name': instance.player_name\n        }\n```\n\n----------------------------------------\n\nTITLE: Update Operation with Email Notification\nDESCRIPTION: Custom perform_update method implementation that sends email confirmation after successful update.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef perform_update(self, serializer):\n    instance = serializer.save()\n    send_email_confirmation(user=self.request.user, modified=instance)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom ListSerializer Class\nDESCRIPTION: Example showing how to create a custom ListSerializer class and integrate it with a serializer using the list_serializer_class Meta option. This enables custom validation or creation/update behavior for multiple objects.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nclass CustomListSerializer(serializers.ListSerializer):\n    ...\n\nclass CustomSerializer(serializers.Serializer):\n    ...\n    class Meta:\n        list_serializer_class = CustomListSerializer\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Permission Class with Custom Error Message\nDESCRIPTION: Shows how to implement a custom permission class that extends BasePermission and includes a custom error message when permission is denied.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import permissions\n\nclass CustomerAccessPermission(permissions.BasePermission):\n    message = 'Adding customers not allowed.'\n\n    def has_permission(self, request, view):\n         ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header-Based API Versioning in Django REST Framework\nDESCRIPTION: This code snippet shows how to create a custom versioning scheme class that determines the API version from the X-API-Version HTTP header. It extends the BaseVersioning class from Django REST Framework's versioning module.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass XAPIVersionScheme(versioning.BaseVersioning):\n    def determine_version(self, request, *args, **kwargs):\n        return request.META.get('HTTP_X_API_VERSION', None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Based APIView in Django REST Framework\nDESCRIPTION: This example demonstrates creating a ListUsers view that requires token authentication and admin permissions. The view inherits from APIView and implements a get method that returns a list of all usernames in the system.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import authentication, permissions\nfrom django.contrib.auth.models import User\n\nclass ListUsers(APIView):\n    \"\"\"\n    View to list all users in the system.\n\n    * Requires token authentication.\n    * Only admin users are able to access this view.\n    \"\"\"\n    authentication_classes = [authentication.TokenAuthentication]\n    permission_classes = [permissions.IsAdminUser]\n\n    def get(self, request, format=None):\n        \"\"\"\n        Return a list of all users.\n        \"\"\"\n        usernames = [user.username for user in User.objects.all()]\n        return Response(usernames)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom StringListField in Django REST Framework\nDESCRIPTION: Example of creating a reusable custom ListField subclass that validates lists of strings using a declarative style.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass StringListField(serializers.ListField):\n    child = serializers.CharField()\n```\n\n----------------------------------------\n\nTITLE: Specifying Nested Serialization in ModelSerializer using Python\nDESCRIPTION: This example demonstrates how to generate nested representations in a ModelSerializer using the depth option in the Meta class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['id', 'account_name', 'users', 'created']\n        depth = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Framework settings for XLSX rendering\nDESCRIPTION: Python code snippet to modify Django REST Framework settings to include XLSXRenderer in the default renderer classes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    ...\n\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'drf_excel.renderers.XLSXRenderer',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Read-Only Fields in ModelSerializer using Python\nDESCRIPTION: This example demonstrates how to specify multiple read-only fields in a ModelSerializer using the read_only_fields option in the Meta class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['id', 'account_name', 'users', 'created']\n        read_only_fields = ['account_name']\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cursor Pagination in DRF\nDESCRIPTION: Configuration settings to enable CursorPagination globally in Django REST Framework with a specified page size.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching with Django REST Framework ViewSets and APIView Classes\nDESCRIPTION: This example demonstrates how to apply Django's caching decorators to REST Framework class-based views. It shows three different caching strategies: caching per user with cookies, caching with authentication headers, and simple URL-based caching. Each method uses the cache_page decorator with appropriate vary_on settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/caching.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_cookie, vary_on_headers\n\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import viewsets\n\n\nclass UserViewSet(viewsets.ViewSet):\n    # With cookie: cache requested url for each user for 2 hours\n    @method_decorator(cache_page(60 * 60 * 2))\n    @method_decorator(vary_on_cookie)\n    def list(self, request, format=None):\n        content = {\n            \"user_feed\": request.user.get_user_feed(),\n        }\n        return Response(content)\n\n\nclass ProfileView(APIView):\n    # With auth: cache requested url for each user for 2 hours\n    @method_decorator(cache_page(60 * 60 * 2))\n    @method_decorator(vary_on_headers(\"Authorization\"))\n    def get(self, request, format=None):\n        content = {\n            \"user_feed\": request.user.get_user_feed(),\n        }\n        return Response(content)\n\n\nclass PostView(APIView):\n    # Cache page for the requested url\n    @method_decorator(cache_page(60 * 60 * 2))\n    def get(self, request, format=None):\n        content = {\n            \"title\": \"Post title\",\n            \"body\": \"Post content\",\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing Snippet Instances with Django REST Framework\nDESCRIPTION: Code snippet demonstrating how to create Snippet instances, serialize them to Python datatypes and JSON, and deserialize them back to objects. Shows the complete serialization cycle.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\n\nsnippet = Snippet(code='foo = \"bar\"\\n')\nsnippet.save()\n\nsnippet = Snippet(code='print(\"hello, world\")\\n')\nsnippet.save()\n```\n\n----------------------------------------\n\nTITLE: Using ListField with IntegerField in Django REST Framework\nDESCRIPTION: Example of using ListField to validate a list of integers, where each integer must be between 0 and 100.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nscores = serializers.ListField(\n   child=serializers.IntegerField(min_value=0, max_value=100)\n)\n```\n\n----------------------------------------\n\nTITLE: Raising Exceptions on Invalid Data\nDESCRIPTION: Demonstrates how to use the raise_exception flag with is_valid() to automatically raise a ValidationError exception that will be handled by REST framework's exception handler.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Return a 400 response if the data was invalid.\nserializer.is_valid(raise_exception=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Content Negotiation in Django REST Framework\nDESCRIPTION: Example of a custom content negotiation class that ignores client preferences and selects the first available parser and renderer. Implements BaseContentNegotiation and overrides select_parser and select_renderer methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/content-negotiation.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.negotiation import BaseContentNegotiation\n\nclass IgnoreClientContentNegotiation(BaseContentNegotiation):\n    def select_parser(self, request, parsers):\n        \"\"\"\n        Select the first parser in the `.parser_classes` list.\n        \"\"\"\n        return parsers[0]\n\n    def select_renderer(self, request, renderers, format_suffix):\n        \"\"\"\n        Select the first renderer in the `.renderer_classes` list.\n        \"\"\"\n        return (renderers[0], renderers[0].media_type)\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Permissions with Bitwise Operators in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create and compose permission classes using Python bitwise operators, creating a combined permission that allows either authenticated users or read-only access.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.permissions import BasePermission, IsAuthenticated, SAFE_METHODS\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS\n\nclass ExampleView(APIView):\n    permission_classes = [IsAuthenticated|ReadOnly]\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Implementing Create and Update Methods for Django Models\nDESCRIPTION: Shows how to implement create() and update() methods in a serializer when working with Django models, which include saving the object to the database.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef create(self, validated_data):\n    return Comment.objects.create(**validated_data)\n\ndef update(self, instance, validated_data):\n    instance.email = validated_data.get('email', instance.email)\n    instance.content = validated_data.get('content', instance.content)\n    instance.created = validated_data.get('created', instance.created)\n    instance.save()\n    return instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Django INSTALLED_APPS for REST Framework\nDESCRIPTION: Configuration to add the REST framework and snippets app to the INSTALLED_APPS in Django settings.py file.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'rest_framework',\n    'snippets',\n]\n```\n\n----------------------------------------\n\nTITLE: Advanced ViewSet with Custom Actions in Django REST Framework\nDESCRIPTION: A comprehensive example of a ViewSet with custom actions using the @action decorator. It shows how to define detail and list actions, handle different HTTP methods, and implement pagination.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom rest_framework import status, viewsets\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom myapp.serializers import UserSerializer, PasswordSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A viewset that provides the standard actions\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @action(detail=True, methods=['post'])\n    def set_password(self, request, pk=None):\n        user = self.get_object()\n        serializer = PasswordSerializer(data=request.data)\n        if serializer.is_valid():\n            user.set_password(serializer.validated_data['password'])\n            user.save()\n            return Response({'status': 'password set'})\n        else:\n            return Response(serializer.errors,\n                            status=status.HTTP_400_BAD_REQUEST)\n\n    @action(detail=False)\n    def recent_users(self, request):\n        recent_users = User.objects.all().order_by('-last_login')\n\n        page = self.paginate_queryset(recent_users)\n        if page is not None:\n            serializer = self.get_serializer(page, many=True)\n            return self.get_paginated_response(serializer.data)\n\n        serializer = self.get_serializer(recent_users, many=True)\n        return Response(serializer.data)\n```\n\n----------------------------------------\n\nTITLE: Basic Generic View Implementation in Django REST Framework\nDESCRIPTION: Example of a basic UserList view using ListCreateAPIView with queryset, serializer, and permission configurations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAdminUser\n\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAdminUser]\n```\n\n----------------------------------------\n\nTITLE: Creating UserSerializer with SerializerMethodField in Django Rest Framework\nDESCRIPTION: Shows how to implement a SerializerMethodField to add custom data (days since joined) to the serialized representation of a User object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n\n    class Meta:\n        model = User\n        fields = '__all__'\n\n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n```\n\n----------------------------------------\n\nTITLE: Validating and Accessing Deserialized Data\nDESCRIPTION: Shows how to validate parsed data using a serializer's is_valid() method and access the validated data, which returns a dictionary of Python native datatypes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nserializer = CommentSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# {'content': 'foo bar', 'email': 'leila@example.com', 'created': datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}\n```\n\n----------------------------------------\n\nTITLE: Implementing HiddenField in Django Rest Framework Serializer\nDESCRIPTION: Demonstrates how to use HiddenField to include a field that always provides the current time as part of the serializer validated data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmodified = serializers.HiddenField(default=timezone.now)\n```\n\n----------------------------------------\n\nTITLE: Inheriting Meta Class in Serializers in Python\nDESCRIPTION: Demonstrates how to explicitly inherit the Meta class from a parent serializer when extending serializers.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(MyBaseSerializer):\n    class Meta(MyBaseSerializer.Meta):\n        model = Account\n```\n\n----------------------------------------\n\nTITLE: Inspecting ModelSerializer Fields in Django Shell\nDESCRIPTION: Shell commands to examine the fields automatically created by the ModelSerializer. This demonstrates how to view the structure of a serializer instance.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.serializers import SnippetSerializer\nserializer = SnippetSerializer()\nprint(repr(serializer))\n# SnippetSerializer():\n#    id = IntegerField(label='ID', read_only=True)\n#    title = CharField(allow_blank=True, max_length=100, required=False)\n#    code = CharField(style={'base_template': 'textarea.html'})\n#    linenos = BooleanField(required=False)\n#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...\n#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...\n```\n\n----------------------------------------\n\nTITLE: Generating User Tokens with Django Signals in Python\nDESCRIPTION: This snippet demonstrates how to automatically generate a token for every user using Django's post_save signal. It creates a Token object for each new user upon creation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.conf import settings\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom rest_framework.authtoken.models import Token\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)\n```\n\n----------------------------------------\n\nTITLE: Adding Validation to Custom ColorField in Django Rest Framework\nDESCRIPTION: Demonstrates how to add input validation and raise ValidationError for invalid data in a custom field implementation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef to_internal_value(self, data):\n    if not isinstance(data, str):\n        msg = 'Incorrect type. Expected a string, but got %s'\n        raise ValidationError(msg % type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        raise ValidationError('Incorrect format. Expected `rgb(#,#,#)`.')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        raise ValidationError('Value out of range. Must be between 0 and 255.')\n\n    return Color(red, green, blue)\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-write BaseSerializer in Django REST Framework\nDESCRIPTION: Full example of a read-write serializer using BaseSerializer for the HighScore model, implementing to_internal_value, to_representation, and create methods to support both read and write operations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # Perform the data validation.\n        if not score:\n            raise serializers.ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise serializers.ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise serializers.ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # Return the validated values. This will be available as\n        # the `.validated_data` property.\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, instance):\n        return {\n            'score': instance.score,\n            'player_name': instance.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueValidator in Serializer Field\nDESCRIPTION: Shows how to use UniqueValidator to ensure field uniqueness in an explicit Serializer class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom rest_framework.validators import UniqueValidator\n\nclass OrganizationSerializer(serializers.Serializer):\n    url = serializers.HyperlinkedIdentityField(view_name='organization_detail')\n    created = serializers.DateTimeField(read_only=True)\n    name = serializers.CharField(\n        max_length=100,\n        validators=UniqueValidator(queryset=Organization.objects.all())\n    )\n```\n\n----------------------------------------\n\nTITLE: Using DynamicFieldsModelSerializer in Python\nDESCRIPTION: Demonstrates how to use the DynamicFieldsModelSerializer to dynamically specify fields when initializing a serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(DynamicFieldsModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email']\n\nprint(UserSerializer(user))\n# {'id': 2, 'username': 'jonwatts', 'email': 'jon@example.com'}\n\nprint(UserSerializer(user, fields=('id', 'email')))\n# {'id': 2, 'email': 'jon@example.com'}\n```\n\n----------------------------------------\n\nTITLE: Styling Promotional Elements with CSS\nDESCRIPTION: CSS styles for promotional list items and links, defining layout, dimensions, and visual presentation for promotional content. Includes styling for background images and text alignment.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.16-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tokens for Existing Users in Django\nDESCRIPTION: This code snippet shows how to generate tokens for all existing users in a Django application. It iterates through all User objects and creates or retrieves a Token for each user.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom rest_framework.authtoken.models import Token\n\nfor user in User.objects.all():\n    Token.objects.get_or_create(user=user)\n```\n\n----------------------------------------\n\nTITLE: Creating User Serializer in Django REST Framework\nDESCRIPTION: Implementing a serializer for User model with a reverse relationship to snippets. This serializer exposes user data and their associated snippets through the API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())\n\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'snippets']\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field with source='*' for Nested Representation\nDESCRIPTION: Implementation of a custom CoordinateField that uses source='*' to access the entire model instance, converting between nested and flat representations of coordinates.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass CoordinateField(serializers.Field):\n\n    def to_representation(self, value):\n        ret = {\n            \"x\": value.x_coordinate,\n            \"y\": value.y_coordinate\n        }\n        return ret\n\n    def to_internal_value(self, data):\n        ret = {\n            \"x_coordinate\": data[\"x\"],\n            \"y_coordinate\": data[\"y\"],\n        }\n        return ret\n\n\nclass DataPointSerializer(serializers.ModelSerializer):\n    coordinates = CoordinateField(source='*')\n\n    class Meta:\n        model = DataPoint\n        fields = ['label', 'coordinates']\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Attributes to save() Method\nDESCRIPTION: Shows how to pass additional keyword arguments to the save() method, which can inject extra data not part of the request, such as the current user.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nserializer.save(owner=request.user)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example - Compact\nDESCRIPTION: Example of compact JSON response format with no spacing after colons and commas.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"is_admin\":false,\"email\":\"jane@example\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SearchFilter with Dynamic Fields in Django REST Framework\nDESCRIPTION: Implementation of a custom SearchFilter subclass that dynamically changes search fields based on request content. The example demonstrates how to conditionally limit searching to only the title field if a specific query parameter is present.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import filters\n\nclass CustomSearchFilter(filters.SearchFilter):\n    def get_search_fields(self, view, request):\n        if request.query_params.get('title_only'):\n            return ['title']\n        return super().get_search_fields(view, request)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Serializer in Django REST Framework\nDESCRIPTION: Creates a CommentSerializer class that inherits from serializers.Serializer. This serializer defines fields corresponding to the Comment class attributes, specifying their types and constraints.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\n\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    content = serializers.CharField(max_length=200)\n    created = serializers.DateTimeField()\n```\n\n----------------------------------------\n\nTITLE: Integrating MailChimp Form Validation with JavaScript\nDESCRIPTION: JavaScript code that loads MailChimp's validation script and initializes form validation for the newsletter signup form. The script handles email validation and manages form submission.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/mozilla-grant.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Default Value with Context in Django REST Framework\nDESCRIPTION: Demonstrates how to create a callable default value class that requires serializer context. This example creates a CurrentUserDefault class that returns the current user from the request context when used as a field default.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CurrentUserDefault:\n    \"\"\"\n    May be applied as a `default=...` value on a serializer field.\n    Returns the current user.\n    \"\"\"\n    requires_context = True\n\n    def __call__(self, serializer_field):\n        return serializer_field.context['request'].user\n```\n\n----------------------------------------\n\nTITLE: Filtering Purchases by Query Parameters in Django REST Framework\nDESCRIPTION: Demonstrates how to filter based on query parameters in the URL. This allows for optional filtering when a specific query parameter is present in the request URL.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        Optionally restricts the returned purchases to a given user,\n        by filtering against a `username` query parameter in the URL.\n        \"\"\"\n        queryset = Purchase.objects.all()\n        username = self.request.query_params.get('username')\n        if username is not None:\n            queryset = queryset.filter(purchaser__username=username)\n        return queryset\n```\n\n----------------------------------------\n\nTITLE: Custom Create Operation with User Association\nDESCRIPTION: Example of perform_create method implementation that associates the current user with the created object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    serializer.save(user=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Class-Based Validator\nDESCRIPTION: Demonstrates how to create a validator that requires context, giving access to the serializer field or serializer instance when performing validation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MultipleOf:\n    requires_context = True\n\n    def __call__(self, value, serializer_field):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema for APIView in Django REST Framework\nDESCRIPTION: Examples of configuring schema generation for APIView classes, including using AutoSchema, disabling schema, adding manual fields, and using custom schema classes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.7-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.views import APIView\nfrom rest_framework.schemas import AutoSchema\n\nclass CustomView(APIView):\n    schema = AutoSchema()  # Included for demonstration only. This is the default behavior.\n```\n\nLANGUAGE: python\nCODE:\n```\nclass CustomView(APIView):\n    schema = None\n```\n\nLANGUAGE: python\nCODE:\n```\nclass CustomView(APIView):\n    schema = AutoSchema(manual_fields=[\n        coreapi.Field('search', location='query')\n    ])\n```\n\nLANGUAGE: python\nCODE:\n```\nclass CustomView(APIView):\n    schema = ManualSchema(fields=[...])\n```\n\nLANGUAGE: python\nCODE:\n```\nclass CustomView(APIView):\n    schema = CustomizedSchemaGeneration()\n```\n\n----------------------------------------\n\nTITLE: Overriding perform_create Method to Associate User with Snippet\nDESCRIPTION: Custom implementation of perform_create to automatically set the owner field to the current user. This ensures all created snippets are associated with the authenticated user making the request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueTogetherValidator\nDESCRIPTION: Example of applying UniqueTogetherValidator to enforce unique constraints across multiple fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.validators import UniqueTogetherValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # ToDo items belong to a parent list, and have an ordering defined\n        # by the 'position' field. No two items in a given list may share\n        # the same position.\n        validators = [\n            UniqueTogetherValidator(\n                queryset=ToDoItem.objects.all(),\n                fields=['list', 'position']\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: Using fail() Method for Validation in Custom ColorField\nDESCRIPTION: Shows how to use the fail() method as a shortcut for raising ValidationError with predefined error messages in a custom field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndefault_error_messages = {\n    'incorrect_type': 'Incorrect type. Expected a string, but got {input_type}',\n    'incorrect_format': 'Incorrect format. Expected `rgb(#,#,#)`.',\n    'out_of_range': 'Value out of range. Must be between 0 and 255.'\n}\n\ndef to_internal_value(self, data):\n    if not isinstance(data, str):\n        self.fail('incorrect_type', input_type=type(data).__name__)\n\n    if not re.match(r'^rgb\\([0-9]+,[0-9]+,[0-9]+\\)$', data):\n        self.fail('incorrect_format')\n\n    data = data.strip('rgb(').rstrip(')')\n    red, green, blue = [int(col) for col in data.split(',')]\n\n    if any([col > 255 or col < 0 for col in (red, green, blue)]):\n        self.fail('out_of_range')\n\n    return Color(red, green, blue)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Function-Based View with @api_view Decorator\nDESCRIPTION: This example shows how to create a basic function-based view that returns a hello world message. The @api_view decorator configures the view to work with Django REST Framework's Request and Response objects.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view()\ndef hello_world(request):\n    return Response({\"message\": \"Hello, world!\"})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Field Lookup Mixin with RetrieveAPIView\nDESCRIPTION: Example implementation of the MultipleFieldLookupMixin with a RetrieveAPIView to handle user lookups based on both account and username fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass RetrieveUserView(MultipleFieldLookupMixin, generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    lookup_fields = ['account', 'username']\n```\n\n----------------------------------------\n\nTITLE: Implementing CurrentUserDefault\nDESCRIPTION: Example of using CurrentUserDefault with HiddenField to represent the current user.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nowner = serializers.HiddenField(\n    default=serializers.CurrentUserDefault()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Snippet Highlight View in Django REST Framework\nDESCRIPTION: Creates a class-based view for rendering highlighted code snippets as HTML. This view extends GenericAPIView and uses StaticHTMLRenderer to return the highlighted property of a snippet instance.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import renderers\n\nclass SnippetHighlight(generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    renderer_classes = [renderers.StaticHTMLRenderer]\n\n    def get(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n```\n\n----------------------------------------\n\nTITLE: Implementing API List View for Code Snippets in Django\nDESCRIPTION: A view function that handles GET requests to list all snippets and POST requests to create new snippets. The function is CSRF exempt to allow POST requests from clients without CSRF tokens.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@csrf_exempt\ndef snippet_list(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return JsonResponse(serializer.data, safe=False)\n\n    elif request.method == 'POST':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data, status=201)\n        return JsonResponse(serializer.errors, status=400)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies for Django REST Framework\nDESCRIPTION: Lists optional package dependencies with version specifications that can be installed alongside Django REST Framework. Includes packages for API documentation (coreapi, coreschema), filtering (django-filter), authentication (django-guardian), markdown support, database connectivity (psycopg2), and code highlighting (pygments).\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements/requirements-optionals.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoreapi==2.3.1\ncoreschema==0.0.4\ndjango-filter\ndjango-guardian>=2.4.0,<2.5\ninflection==0.5.1\nmarkdown>=3.3.7\npsycopg2-binary>=2.9.5,<2.10\npygments~=2.17.0\npyyaml>=5.3.1,<5.4\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in Function-Based Views\nDESCRIPTION: This example demonstrates how to configure a function-based view to handle both GET and POST requests, with different responses depending on the request method. The view returns a simple message for GET requests and echoes back the received data for POST requests.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET', 'POST'])\ndef hello_world(request):\n    if request.method == 'POST':\n        return Response({\"message\": \"Got some data!\", \"data\": request.data})\n    return Response({\"message\": \"Hello, world!\"})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Serializer Class Selection\nDESCRIPTION: Implementation of get_serializer_class method for role-based serializer selection.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_serializer_class(self):\n    if self.request.user.is_staff:\n        return FullAccountSerializer\n    return BasicAccountSerializer\n```\n\n----------------------------------------\n\nTITLE: Creating a Serializer Class for Snippet Model in Django REST Framework\nDESCRIPTION: Implementation of a Serializer class that handles conversion between Snippet model instances and Python datatypes. Includes validation and methods for creating and updating instances.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\n\n\nclass SnippetSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField(required=False, allow_blank=True, max_length=100)\n    code = serializers.CharField(style={'base_template': 'textarea.html'})\n    linenos = serializers.BooleanField(required=False)\n    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')\n    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')\n\n    def create(self, validated_data):\n        \"\"\"\n        Create and return a new `Snippet` instance, given the validated data.\n        \"\"\"\n        return Snippet.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        Update and return an existing `Snippet` instance, given the validated data.\n        \"\"\"\n        instance.title = validated_data.get('title', instance.title)\n        instance.code = validated_data.get('code', instance.code)\n        instance.linenos = validated_data.get('linenos', instance.linenos)\n        instance.language = validated_data.get('language', instance.language)\n        instance.style = validated_data.get('style', instance.style)\n        instance.save()\n        return instance\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing\nDESCRIPTION: URL configuration using DefaultRouter to automatically generate API endpoints.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\nfrom rest_framework import routers\n\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n```\n\n----------------------------------------\n\nTITLE: Serializing a Model Instance to Native Python Types\nDESCRIPTION: Code example showing how to serialize a Snippet model instance to Python native datatypes using the SnippetSerializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nserializer = SnippetSerializer(snippet)\nserializer.data\n# {'id': 2, 'title': '', 'code': 'print(\"hello, world\")\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'}\n```\n\n----------------------------------------\n\nTITLE: Unauthenticated API POST Request\nDESCRIPTION: Example of an unauthenticated HTTP POST request to create a snippet, demonstrating the authentication error response.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nhttp POST http://127.0.0.1:8000/snippets/ code=\"print(123)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ColorField in Django Rest Framework\nDESCRIPTION: Demonstrates how to create a custom field for serializing and deserializing RGB color values, including input validation and error handling.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Color:\n    \"\"\"\n    A color represented in the RGB colorspace.\n    \"\"\"\n    def __init__(self, red, green, blue):\n        assert(red >= 0 and green >= 0 and blue >= 0)\n        assert(red < 256 and green < 256 and blue < 256)\n        self.red, self.green, self.blue = red, green, blue\n\nclass ColorField(serializers.Field):\n    \"\"\"\n    Color objects are serialized into 'rgb(#, #, #)' notation.\n    \"\"\"\n    def to_representation(self, value):\n        return \"rgb(%d, %d, %d)\" % (value.red, value.green, value.blue)\n\n    def to_internal_value(self, data):\n        data = data.strip('rgb(').rstrip(')')\n        red, green, blue = [int(col) for col in data.split(',')]\n        return Color(red, green, blue)\n```\n\n----------------------------------------\n\nTITLE: Create Operation with Validation\nDESCRIPTION: Implementation of perform_create with additional validation logic to prevent duplicate signups.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    queryset = SignupRequest.objects.filter(user=self.request.user)\n    if queryset.exists():\n        raise ValidationError('You have already signed up')\n    serializer.save(user=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: Converting Serialized Data to JSON in Django REST Framework\nDESCRIPTION: Code showing how to render serialized data as JSON using the JSONRenderer from REST framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncontent = JSONRenderer().render(serializer.data)\ncontent\n# b'{\"id\":2,\"title\":\"\",\"code\":\"print(\\\\\"hello, world\\\\\")\\\\n\",\"linenos\":false,\"language\":\"python\",\"style\":\"friendly\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing ReDoc Template for Django REST Framework API Documentation\nDESCRIPTION: HTML template for integrating ReDoc with Django REST Framework's schema generation. Provides a clean, responsive interface for displaying API documentation generated from OpenAPI schemas.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>ReDoc</title>\n    <!-- needed for adaptive design -->\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n    <!-- ReDoc doesn't change outer page styles -->\n    <style>\n      body {\n        margin: 0;\n        padding: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <redoc spec-url='{% url schema_url %}'></redoc>\n    <script src=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"> </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Queryset Filter Implementation\nDESCRIPTION: Example of a custom get_queryset method implementation for user-specific data filtering.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_queryset(self):\n    user = self.request.user\n    return user.accounts.all()\n```\n\n----------------------------------------\n\nTITLE: Reversing Action URLs in Django Rest Framework ViewSets\nDESCRIPTION: Examples of using the reverse_action() method to generate URLs for ViewSet actions. The method is a convenience wrapper for reverse(), automatically handling the request object and prepending the url_name with basename.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_11\n\nLANGUAGE: pycon\nCODE:\n```\n>>> view.reverse_action(\"set-password\", args=[\"1\"])\n'http://localhost:8000/api/users/1/set_password'\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Django API Views\nDESCRIPTION: Imports necessary Django and REST Framework components for creating API views, including HTTP response classes, CSRF exemption, JSON parser, and the model and serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse, JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.parsers import JSONParser\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n```\n\n----------------------------------------\n\nTITLE: Implementing DecimalField Validation in Django REST Framework\nDESCRIPTION: Examples showing how to validate decimal numbers with specific precision requirements using DecimalField. First example validates numbers up to 999 with 2 decimal places, second validates numbers up to one billion with 10 decimal places.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nserializers.DecimalField(max_digits=5, decimal_places=2)\n\nserializers.DecimalField(max_digits=19, decimal_places=10)\n```\n\n----------------------------------------\n\nTITLE: Setting up a Python Virtual Environment for Django REST Framework\nDESCRIPTION: Commands to create and activate a virtual environment using venv, then install the necessary packages for the Django REST Framework tutorial.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ViewSet Base Classes in Django Rest Framework\nDESCRIPTION: Demonstrates how to create a custom ViewSet base class by inheriting from GenericViewSet and mixing in specific model mixins. This example creates a viewset that provides create, list, and retrieve actions.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import mixins, viewsets\n\nclass CreateListRetrieveViewSet(mixins.CreateModelMixin,\n                                mixins.ListModelMixin,\n                                mixins.RetrieveModelMixin,\n                                viewsets.GenericViewSet):\n    \"\"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\"\n    pass\n```\n\n----------------------------------------\n\nTITLE: Complex Object Lookup Implementation\nDESCRIPTION: Custom get_object method implementation supporting multiple field lookups with permission checking.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_object(self):\n    queryset = self.get_queryset()\n    filter = {}\n    for field in self.multiple_lookup_fields:\n        filter[field] = self.kwargs[field]\n\n    obj = get_object_or_404(queryset, **filter)\n    self.check_object_permissions(self.request, obj)\n    return obj\n```\n\n----------------------------------------\n\nTITLE: Basic Template Customization for REST Framework API\nDESCRIPTION: Example of creating a custom template that extends the REST framework base template for API customization.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browsable-api.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"rest_framework/base.html\" %}\n\n...  # Override blocks with required customizations\n```\n\n----------------------------------------\n\nTITLE: Implementing Reverse Relations in ModelSerializer\nDESCRIPTION: Examples of including reverse relationships in ModelSerializer, showing both explicit related_name and default reverse relation names.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ['tracks', ...]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        fields = ['track_set', ...]\n```\n\n----------------------------------------\n\nTITLE: Custom List Method Implementation in Generic View\nDESCRIPTION: Extended UserList view with a custom list method implementation showing proper queryset handling and serialization.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserList(generics.ListCreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [IsAdminUser]\n\n    def list(self, request):\n        # Note the use of `get_queryset()` instead of `self.queryset`\n        queryset = self.get_queryset()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n```\n\n----------------------------------------\n\nTITLE: Registering Model with wq.db ModelRouter\nDESCRIPTION: Example of registering a model with wq.db's ModelRouter for automatic URL and viewset generation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom wq.db import rest\nfrom myapp.models import MyModel\n\nrest.router.register_model(MyModel)\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Field Names and Lookup Fields in HyperlinkedModelSerializer\nDESCRIPTION: Example of customizing the view name and lookup fields for URL generation in a HyperlinkedModelSerializer using the extra_kwargs option. This allows for customizing how hyperlinks are generated for each field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['account_url', 'account_name', 'users', 'created']\n        extra_kwargs = {\n            'url': {'view_name': 'accounts', 'lookup_field': 'account_name'},\n            'users': {'lookup_field': 'username'}\n        }\n```\n\n----------------------------------------\n\nTITLE: Basic REST Framework Configuration Example\nDESCRIPTION: Example of configuring basic renderer and parser classes in Django settings.py file using the REST_FRAMEWORK dictionary.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: ReadOnlyModelViewSet Implementation in Django Rest Framework\nDESCRIPTION: Example of implementing a ReadOnlyModelViewSet that provides only list and retrieve operations for Account objects. It demonstrates setting the required queryset and serializer_class attributes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass AccountViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    A simple ViewSet for viewing accounts.\n    \"\"\"\n    queryset = Account.objects.all()\n    serializer_class = AccountSerializer\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Base Views with Multiple Field Lookup\nDESCRIPTION: Example of creating reusable base view classes that incorporate the MultipleFieldLookupMixin for consistent behavior across multiple views in a project.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass BaseRetrieveView(MultipleFieldLookupMixin,\n                       generics.RetrieveAPIView):\n    pass\n\nclass BaseRetrieveUpdateDestroyView(MultipleFieldLookupMixin,\n                                    generics.RetrieveUpdateDestroyAPIView):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Django REST Framework Settings\nDESCRIPTION: Examples of configuring various Django REST Framework 3.0 settings, including JSON encoding, file handling, and date/time formatting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'UNICODE_JSON': False\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'COMPACT_JSON': False\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'UPLOADED_FILES_USE_URL': False\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    # Return native `Date` and `Time` objects in `serializer.data`\n    'DATETIME_FORMAT': None,\n    'DATE_FORMAT': None,\n    'TIME_FORMAT': None\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'COERCE_DECIMAL_TO_STRING': False\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field for Generic Relations Serialization\nDESCRIPTION: Implementation of a custom RelatedField for serializing generic foreign keys with both simple and nested representation options.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass TaggedObjectRelatedField(serializers.RelatedField):\n    \"\"\"\n    A custom field to use for the `tagged_object` generic relationship.\n    \"\"\"\n\n    def to_representation(self, value):\n        \"\"\"\n        Serialize tagged objects to a simple textual representation.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            return 'Bookmark: ' + value.url\n        elif isinstance(value, Note):\n            return 'Note: ' + value.text\n        raise Exception('Unexpected type of tagged object')\n```\n\nLANGUAGE: python\nCODE:\n```\n    def to_representation(self, value):\n        \"\"\"\n        Serialize bookmark instances using a bookmark serializer,\n        and note instances using a note serializer.\n        \"\"\"\n        if isinstance(value, Bookmark):\n            serializer = BookmarkSerializer(value)\n        elif isinstance(value, Note):\n            serializer = NoteSerializer(value)\n        else:\n            raise Exception('Unexpected type of tagged object')\n\n        return serializer.data\n```\n\n----------------------------------------\n\nTITLE: Customizing Action URL Paths and Names in ViewSets\nDESCRIPTION: Shows how to customize the URL path and name for custom actions in ViewSets by specifying url_path and url_name parameters in the @action decorator.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import action\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf],\n            url_path='change-password', url_name='change_password')\n    def set_password(self, request, pk=None):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Forcing Authentication in Tests\nDESCRIPTION: Demonstrates how to force authenticate requests in tests using force_authenticate method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.test import force_authenticate\n\nfactory = APIRequestFactory()\nuser = User.objects.get(username='olivia')\nview = AccountDetail.as_view()\n\n# Make an authenticated request to the view...\nrequest = factory.get('/accounts/django-superstars/')\nforce_authenticate(request, user=user)\nresponse = view(request)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Hyperlinked Fields with Multiple Lookup Parameters\nDESCRIPTION: Demonstrates implementing a custom HyperlinkedRelatedField to handle URLs with multiple lookup parameters. This example handles customer URLs that require both organization slug and customer ID.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom rest_framework.reverse import reverse\n\nclass CustomerHyperlink(serializers.HyperlinkedRelatedField):\n    # We define these as class attributes, so we don't need to pass them as arguments.\n    view_name = 'customer-detail'\n    queryset = Customer.objects.all()\n\n    def get_url(self, obj, view_name, request, format):\n        url_kwargs = {\n            'organization_slug': obj.organization.slug,\n            'customer_pk': obj.pk\n        }\n        return reverse(view_name, kwargs=url_kwargs, request=request, format=format)\n\n    def get_object(self, view_name, view_args, view_kwargs):\n        lookup_kwargs = {\n           'organization__slug': view_kwargs['organization_slug'],\n           'pk': view_kwargs['customer_pk']\n        }\n        return self.get_queryset().get(**lookup_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Applying Pagination to API View\nDESCRIPTION: Example of applying custom pagination class to a specific API view using the pagination_class attribute.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BillingRecordsView(generics.ListAPIView):\n    queryset = Billing.objects.all()\n    serializer_class = BillingRecordsSerializer\n    pagination_class = LargeResultsSetPagination\n```\n\n----------------------------------------\n\nTITLE: Implementing SnippetViewSet in Django REST Framework\nDESCRIPTION: This snippet demonstrates creating a SnippetViewSet using ModelViewSet. It provides CRUD operations and a custom 'highlight' action for the Snippet model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/6-viewsets-and-routers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import permissions\nfrom rest_framework import renderers\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\n\n\nclass SnippetViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    This ViewSet automatically provides `list`, `create`, `retrieve`,\n    `update` and `destroy` actions.\n\n    Additionally we also provide an extra `highlight` action.\n    \"\"\"\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                          IsOwnerOrReadOnly]\n\n    @action(detail=True, renderer_classes=[renderers.StaticHTMLRenderer])\n    def highlight(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: Configuring LimitOffsetPagination\nDESCRIPTION: Global configuration for enabling LimitOffsetPagination as the default pagination class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination'\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Parser Configuration\nDESCRIPTION: Example of configuring YAML parsing and rendering support using third-party package.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework_yaml.parsers.YAMLParser',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_yaml.renderers.YAMLRenderer',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User List and Detail Views in Django REST Framework\nDESCRIPTION: Creating read-only API views for listing users and viewing user details. These views use generic class-based views for listing all users and retrieving individual user information.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\n\n\nclass UserList(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n```\n\n----------------------------------------\n\nTITLE: Configuring PageNumberPagination\nDESCRIPTION: Global configuration for enabling PageNumberPagination with specific page size setting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Styles in Django REST Framework Serializers\nDESCRIPTION: These snippets demonstrate how to customize field styles in Django REST Framework serializers using the style keyword argument. Examples include changing the base template and adding custom style options.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/html-and-forms.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html'}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'template': 'my-field-templates/custom-input.html'}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ndetails = serializers.CharField(\n    max_length=1000,\n    style={'base_template': 'textarea.html', 'rows': 10}\n)\n```\n\n----------------------------------------\n\nTITLE: PrimaryKeyRelatedField Implementation Example\nDESCRIPTION: Demonstrates using PrimaryKeyRelatedField to represent relationships using primary keys.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Creating a Snippet Model for Code Storage in Django\nDESCRIPTION: Model definition for storing code snippets, with fields for the code content, language, styling options, and metadata. Uses Pygments for language and style choices.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n\n    class Meta:\n        ordering = ['created']\n```\n\n----------------------------------------\n\nTITLE: Implementing UserViewSet in Django REST Framework\nDESCRIPTION: This snippet shows how to create a UserViewSet using ReadOnlyModelViewSet. It automatically provides 'list' and 'retrieve' actions for the User model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/6-viewsets-and-routers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import viewsets\n\n\nclass UserViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    This viewset automatically provides `list` and `retrieve` actions.\n    \"\"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Level Permissions in Custom Views in Django REST Framework\nDESCRIPTION: This code shows how to implement object-level permissions in a custom view by overriding the get_object method and explicitly calling check_object_permissions to enforce permissions on a specific object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_object(self):\n    obj = get_object_or_404(self.get_queryset(), pk=self.kwargs[\"pk\"])\n    self.check_object_permissions(self.request, obj)\n    return obj\n```\n\n----------------------------------------\n\nTITLE: View Name Function Signature\nDESCRIPTION: Function signature for generating view names in Django REST Framework. Takes a view instance as parameter and should inspect the class name to generate a descriptive name.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nview_name(self)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom APIException Subclass in Django REST Framework\nDESCRIPTION: This snippet shows how to create a custom exception by subclassing APIException. It defines a 'ServiceUnavailable' exception with a specific status code, default detail message, and default code.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/exceptions.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.exceptions import APIException\n\nclass ServiceUnavailable(APIException):\n    status_code = 503\n    default_detail = 'Service temporarily unavailable, try again later.'\n    default_code = 'service_unavailable'\n```\n\n----------------------------------------\n\nTITLE: Customizing Serializer Fields in Django REST Framework\nDESCRIPTION: Examples of customizing serializer fields in Django REST Framework 3.0, including file handling, date/time formatting, and decimal handling.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nuploaded_file = serializers.FileField(use_url=False)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Return `DateTime` instances in `serializer.data`, not strings\ncreated = serializers.DateTimeField(format=None)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Return `Decimal` instances in `serializer.data`, not strings\namount = serializers.DecimalField(\n    max_digits=10,\n    decimal_places=2,\n    coerce_to_string=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing HyperlinkedIdentityField in Django REST Framework\nDESCRIPTION: Demonstrates how to use HyperlinkedIdentityField to create an identity relationship field in a serializer. This example shows how to link an Album to its track listing via a URL.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.HyperlinkedModelSerializer):\n    track_listing = serializers.HyperlinkedIdentityField(view_name='track-list')\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'track_listing']\n```\n\n----------------------------------------\n\nTITLE: SlugRelatedField Implementation Example\nDESCRIPTION: Demonstrates using SlugRelatedField to represent relationships using a specific field from the related model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.SlugRelatedField(\n        many=True,\n        read_only=True,\n        slug_field='title'\n     )\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create a custom exception handler that adds the HTTP status code to the response body. It also shows how to configure the custom handler in the Django REST framework settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/exceptions.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n    # Call REST framework's default exception handler first,\n    # to get the standard error response.\n    response = exception_handler(exc, context)\n\n    # Now add the HTTP status code to the response.\n    if response is not None:\n        response.data['status_code'] = response.status_code\n\n    return response\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-only Nested Serializers in Django REST Framework\nDESCRIPTION: Shows how to create nested serializers to represent a to-many relationship between Albums and Tracks. This example demonstrates embedding Track objects within an Album serialization.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass TrackSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Track\n        fields = ['order', 'title', 'duration']\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderingFilter in Django REST Framework with Specific Fields\nDESCRIPTION: Example of setting up OrderingFilter in a Django REST Framework view with explicitly specified ordering fields. This implementation restricts which fields can be used for ordering to prevent data leakage and sets a default ordering by username.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = ['username', 'email']\n    ordering = ['username']\n```\n\n----------------------------------------\n\nTITLE: Custom Content Negotiation Class for Accept Header Override\nDESCRIPTION: Python class that extends Django REST Framework's content negotiation to support URL-based Accept header overrides using a query parameter. This allows clients to specify the desired response format through the URL.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browser-enhancements.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AcceptQueryParamOverride():\n    def get_accept_list(self, request):\n       header = request.META.get('HTTP_ACCEPT', '*/*')\n       header = request.query_params.get('_accept', header)\n       return [token.strip() for token in header.split(',')]\n```\n\n----------------------------------------\n\nTITLE: Class-Based Custom Validator with Parameterization\nDESCRIPTION: Shows how to implement a reusable class-based validator that checks if a value is a multiple of a specified base number.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MultipleOf:\n    def __init__(self, base):\n        self.base = base\n\n    def __call__(self, value):\n        if value % self.base != 0:\n            message = 'This field must be a multiple of %d.' % self.base\n            raise serializers.ValidationError(message)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Minimal Metadata Class\nDESCRIPTION: Example of a custom metadata class that returns minimal information for OPTIONS requests.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MinimalMetadata(BaseMetadata):\n    \"\"\"\n    Don't include field and other information for `OPTIONS` requests.\n    Just return the name and description.\n    \"\"\"\n    def determine_metadata(self, request, view):\n        return {\n            'name': view.get_view_name(),\n            'description': view.get_view_description()\n        }\n```\n\n----------------------------------------\n\nTITLE: StringRelatedField Implementation Example\nDESCRIPTION: Shows how to use StringRelatedField to represent relationships using the __str__ method of the related model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Using DjangoFilterBackend with Simple Field Filtering in Django REST Framework\nDESCRIPTION: Demonstrates how to use DjangoFilterBackend with simple equality-based filtering by specifying filterset_fields. This approach allows filtering on specific model fields without creating a custom FilterSet class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass UserListView(generics.ListAPIView):\n    ...\n    filter_backends = [DjangoFilterBackend]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['category', 'in_stock']\n```\n\n----------------------------------------\n\nTITLE: Specifying MkDocs Version for Documentation Building in Python\nDESCRIPTION: This snippet specifies the version of MkDocs to be used for building the project's documentation. MkDocs is a fast, simple static site generator that's geared towards building project documentation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements/requirements-documentation.txt#2025-04-08_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nmkdocs==1.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested JSONField Search in Django REST Framework\nDESCRIPTION: Example of setting up SearchFilter to perform nested searches within JSONField and HStoreField using double underscore notation for field traversal.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.12-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass SitesSearchView(generics.ListAPIView):\n    \"\"\"\n    An API view to return a list of archaeological sites, optionally filtered\n    by a search against the site name or location. (Location searches are\n    matched against the region and country names.)\n    \"\"\"\n\n    queryset = Sites.objects.all()\n    serializer_class = SitesSerializer\n    filter_backends = [filters.SearchFilter]\n    search_fields = [\"site_name\", \"location__region\", \"location__country\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PlainText Renderer in Django REST Framework\nDESCRIPTION: Shows how to create a custom renderer class that returns plain text responses. It sets the media type, format, and implements the render method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.encoding import smart_str\nfrom rest_framework import renderers\n\n\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return smart_str(data, encoding=self.charset)\n```\n\n----------------------------------------\n\nTITLE: Custom Manager for Related Objects in Django\nDESCRIPTION: Implementation of a custom user manager to handle creation of related objects.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass UserManager(models.Manager):\n    ...\n\n    def create(self, username, email, is_premium_member=False, has_support_contract=False):\n        user = User(username=username, email=email)\n        user.save()\n        profile = Profile(\n            user=user,\n            is_premium_member=is_premium_member,\n            has_support_contract=has_support_contract\n        )\n        profile.save()\n        return user\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Actions in ViewSets with the @action Decorator\nDESCRIPTION: Demonstrates how to create custom actions in a ViewSet using the @action decorator, which adds routes beyond the standard CRUD operations. This example adds a 'set_password' endpoint with specific permissions.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.permissions import IsAdminOrIsSelf\nfrom rest_framework.decorators import action\n\nclass UserViewSet(ModelViewSet):\n    ...\n\n    @action(methods=['post'], detail=True, permission_classes=[IsAdminOrIsSelf])\n    def set_password(self, request, pk=None):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Customizing RelatedField Display Value in Django REST Framework\nDESCRIPTION: Demonstrates how to customize the string representation of related objects in select inputs by overriding the display_value() method of a RelatedField subclass.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass TrackPrimaryKeyRelatedField(serializers.PrimaryKeyRelatedField):\n    def display_value(self, instance):\n        return 'Track: %s' % (instance.title)\n```\n\n----------------------------------------\n\nTITLE: Varying Response Format Based on Accepted Renderer in Django REST Framework\nDESCRIPTION: Illustrates how to use request.accepted_renderer to determine the negotiated renderer and return different representations (HTML or JSON) accordingly.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET'])\n@renderer_classes([TemplateHTMLRenderer, JSONRenderer])\ndef list_users(request):\n    \"\"\"\n    A view that can return JSON or HTML representations\n    of the users in the system.\n    \"\"\"\n    queryset = Users.objects.filter(active=True)\n\n    if request.accepted_renderer.format == 'html':\n        # TemplateHTMLRenderer takes a context dict,\n        # and additionally requires a 'template_name'.\n        # It does not require serialization.\n        data = {'users': queryset}\n        return Response(data, template_name='list_users.html')\n\n    # JSONRenderer requires serialized data as normal.\n    serializer = UserSerializer(instance=queryset)\n    data = serializer.data\n    return Response(data)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Permission Classes for SnippetDetail View\nDESCRIPTION: Configuring SnippetDetail view to use both IsAuthenticatedOrReadOnly and IsOwnerOrReadOnly permissions. This combines authentication requirements with object-level ownership validation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npermission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n```\n\n----------------------------------------\n\nTITLE: Core AutoSchema Method Usage\nDESCRIPTION: Example showing the main methods used by AutoSchema to generate components and operations for the OpenAPI schema.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncomponents = auto_schema.get_components(...)\noperation = auto_schema.get_operation(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages in Django REST Framework\nDESCRIPTION: Specify the subset of languages that your API will support using Django's LANGUAGES setting\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/internationalization.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Router URLs\nDESCRIPTION: URL configuration example showing how to register a ViewSet with a custom router.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrouter = CustomReadOnlyRouter()\nrouter.register('users', UserViewSet)\nurlpatterns = router.urls\n```\n\n----------------------------------------\n\nTITLE: Custom Versioning Implementation\nDESCRIPTION: Example of implementing a custom versioning scheme with specific version parameters.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n\nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n\nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Relational Fields in Django REST Framework\nDESCRIPTION: Shows how to create a custom relational field by subclassing RelatedField and implementing to_representation(). This example creates a custom string representation for Track objects within an Album.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nclass TrackListingField(serializers.RelatedField):\n    def to_representation(self, value):\n        duration = time.strftime('%M:%S', time.gmtime(value.duration))\n        return 'Track %d: %s (%s)' % (value.order, value.name, duration)\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = TrackListingField(many=True)\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Schema View in URLs\nDESCRIPTION: Python code to configure a dynamic schema view using get_schema_view() helper in Django URLs configuration. Shows how to set up routing for schema generation with title and description.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\n\nurlpatterns = [\n    # ...\n    # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs.\n    #   * `title` and `description` parameters are passed to `SchemaGenerator`.\n    #   * Provide view name for use with `reverse()`.\n    path(\n        \"openapi\",\n        get_schema_view(\n            title=\"Your Project\", description=\"API for all things …\", version=\"1.0.0\"\n        ),\n        name=\"openapi-schema\",\n    ),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for the Python Client Library\nDESCRIPTION: Python code demonstrating how to configure token authentication when instantiating a client with the coreapi Python library. This shows the use of the TokenAuthentication class to handle JWT authentication.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.6-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nauth = coreapi.auth.TokenAuthentication(scheme='JWT', token='xxx-xxx-xxx')\nclient = coreapi.Client(auth=auth)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create and Update Hooks in Django REST Framework\nDESCRIPTION: Examples of custom create and delete hooks in Django REST Framework 3.0, replacing pre_save and post_save hooks with perform_create and perform_update methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    # Include the owner attribute directly, rather than from request data\n    instance = serializer.save(owner=self.request.user)\n    # Perform a custom post-save action\n    send_email(instance.to_email, instance.message)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef perform_destroy(self, instance):\n    # Perform a custom pre-delete action\n    send_deletion_alert(user=instance.created_by, deleted=instance)\n    # Delete the object instance\n    instance.delete()\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Schema Generation\nDESCRIPTION: Command to install the necessary Python packages for OpenAPI schema generation including pyyaml for YAML formatting, uritemplate for path parameters, and inflection for endpoint naming.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyyaml uritemplate inflection\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pagination Class\nDESCRIPTION: Settings configuration to use a custom pagination class as the default pagination style.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.CustomPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Using Application Namespace with Router URLs in Django\nDESCRIPTION: Demonstrates how to include router URLs with an application namespace, which is useful for organizing URLs in larger applications with multiple components.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path('forgot-password/', ForgotPasswordFormView.as_view()),\n    path('api/', include((router.urls, 'app_name'))),\n]\n```\n\n----------------------------------------\n\nTITLE: URL Reversal for Versioned APIs\nDESCRIPTION: Demonstrates how to properly reverse URLs for versioned APIs using the REST framework's reverse function.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.reverse import reverse\n\nreverse('bookings-list', request=request)\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization Example with Prefetch Related\nDESCRIPTION: Demonstrates how to optimize serializer performance using prefetch_related to avoid additional database hits.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.SlugRelatedField(\n        many=True,\n        read_only=True,\n        slug_field='title'\n    )\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n\nqs = Album.objects.prefetch_related('tracks')\nprint(AlbumSerializer(qs, many=True).data)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic POST Request with APIRequestFactory\nDESCRIPTION: Demonstrates how to create form and JSON POST requests using the APIRequestFactory class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.test import APIRequestFactory\n\n# Using the standard RequestFactory API to create a form POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'})\n\n# Using the standard RequestFactory API to encode JSON data\nrequest = factory.post('/notes/', {'title': 'new idea'}, content_type='application/json')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in CharField Subclass\nDESCRIPTION: Demonstrates how to override to_internal_value() in a CharField subclass to implement custom validation for uppercase input.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass UppercaseCharField(serializers.CharField):\n    def to_internal_value(self, data):\n        value = super(UppercaseCharField, self).to_internal_value(data)\n        if value != value.upper():\n            raise serializers.ValidationError('The input should be uppercase only.')\n        return value\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Renderers in Django REST Framework Settings\nDESCRIPTION: Shows how to set the default renderer classes globally in the REST_FRAMEWORK settings dictionary, making JSON the primary format and including the browsable API renderer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Test Case Example\nDESCRIPTION: Demonstrates writing test cases using APITestCase class for testing API endpoints\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\nfrom myproject.apps.core.models import Account\n\nclass AccountTests(APITestCase):\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        data = {'name': 'DabApps'}\n        response = self.client.post(url, data, format='json')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Account.objects.count(), 1)\n        self.assertEqual(Account.objects.get().name, 'DabApps')\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON to Python Native Types\nDESCRIPTION: Code demonstrating how to parse JSON content back into Python native datatypes using the JSONParser.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport io\n\nstream = io.BytesIO(content)\ndata = JSONParser().parse(stream)\n```\n\n----------------------------------------\n\nTITLE: Using Both Application and Instance Namespaces with Router URLs\nDESCRIPTION: Shows how to include router URLs with both application and instance namespaces, providing even more specific organization for URL patterns in complex applications.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    path('forgot-password/', ForgotPasswordFormView.as_view()),\n    path('api/', include((router.urls, 'app_name'), namespace='instance_name')),\n]\n```\n\n----------------------------------------\n\nTITLE: Initialization-based Schema Customization\nDESCRIPTION: Pattern for customizing schema generation using constructor parameters, allowing for more flexible reuse across views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CustomSchema(BaseSchema):\n    def __init__(self, **kwargs):\n        # store extra_info for later\n        self.extra_info = kwargs.pop(\"extra_info\")\n        super().__init__(**kwargs)\n\n\nclass CustomView(APIView):\n    schema = CustomSchema(extra_info=...)  # some extra info\n```\n\n----------------------------------------\n\nTITLE: Configuring Named URL Patterns for Django REST Framework API\nDESCRIPTION: Sets up the complete URLconf with named URL patterns for all API endpoints, enabling hyperlinking between resources. Uses format_suffix_patterns to support different response formats.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n# API endpoints\nurlpatterns = format_suffix_patterns([\n    path('', views.api_root),\n    path('snippets/',\n        views.SnippetList.as_view(),\n        name='snippet-list'),\n    path('snippets/<int:pk>/',\n        views.SnippetDetail.as_view(),\n        name='snippet-detail'),\n    path('snippets/<int:pk>/highlight/',\n        views.SnippetHighlight.as_view(),\n        name='snippet-highlight'),\n    path('users/',\n        views.UserList.as_view(),\n        name='user-list'),\n    path('users/<int:pk>/',\n        views.UserDetail.as_view(),\n        name='user-detail')\n])\n```\n\n----------------------------------------\n\nTITLE: REST Framework Test Configuration Settings\nDESCRIPTION: Configuration examples for setting default test request format and available renderer classes\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_DEFAULT_FORMAT': 'json'\n}\n\nREST_FRAMEWORK = {\n    ...\n    'TEST_REQUEST_RENDERER_CLASSES': [\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.TemplateHTMLRenderer'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Form with Django REST Framework Template Tag\nDESCRIPTION: Demonstrates how to use the render_form template tag to display a serializer as an HTML form within a Django template.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% load rest_framework %}\n\n<form action=\"/submit-report/\" method=\"post\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Album-Track Model Relationship in Django\nDESCRIPTION: Defines two Django models (Album and Track) demonstrating a one-to-many relationship with metadata configuration.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Album(models.Model):\n    album_name = models.CharField(max_length=100)\n    artist = models.CharField(max_length=100)\n\nclass Track(models.Model):\n    album = models.ForeignKey(Album, related_name='tracks', on_delete=models.CASCADE)\n    order = models.IntegerField()\n    title = models.CharField(max_length=100)\n    duration = models.IntegerField()\n\n    class Meta:\n        unique_together = ['album', 'order']\n        ordering = ['order']\n\n    def __str__(self):\n        return '%d: %s' % (self.order, self.title)\n```\n\n----------------------------------------\n\nTITLE: Versioning Configuration Settings\nDESCRIPTION: Example of configuring the default versioning class in Django REST framework settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Language in Django REST Framework\nDESCRIPTION: Configure the default language for the API using Django's LANGUAGE_CODE setting\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/internationalization.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLANGUAGE_CODE = \"es-es\"\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions on a Function-Based View in Django REST Framework\nDESCRIPTION: This code shows how to apply permission classes to function-based views using the @api_view and @permission_classes decorators, requiring authentication for access.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\n\n@api_view(['GET'])\n@permission_classes([IsAuthenticated])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Recommended Schema Customization Pattern\nDESCRIPTION: Preferred approach to customizing schema generation that maintains better encapsulation of schema-related code.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass BaseSchema(AutoSchema):\n    \"\"\"\n    AutoSchema subclass that knows how to use extra_info.\n    \"\"\"\n\n    ...\n\n\nclass CustomSchema(BaseSchema):\n    extra_info = ...  # some extra info\n\n\nclass CustomView(APIView):\n    schema = CustomSchema()\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperlinked Serializers in Django REST Framework\nDESCRIPTION: Creates hyperlinked serializers for the Snippet and User models, extending HyperlinkedModelSerializer instead of ModelSerializer. This enables navigation between related entities through hyperlinks rather than primary keys.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass SnippetSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.ReadOnlyField(source='owner.username')\n    highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html')\n\n    class Meta:\n        model = Snippet\n        fields = ['url', 'id', 'highlight', 'owner',\n                  'title', 'code', 'linenos', 'language', 'style']\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ['url', 'id', 'username', 'snippets']\n```\n\n----------------------------------------\n\nTITLE: Default Permission Classes Configuration\nDESCRIPTION: Shows the default configuration for permission classes that handle access control.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n[\n    'rest_framework.permissions.AllowAny',\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Settings for Internationalization in Django REST framework\nDESCRIPTION: Example showing how to configure Django's language settings to change the default language for REST framework responses.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.1-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLANGUAGE_CODE = \"es-es\"\n```\n\n----------------------------------------\n\nTITLE: Creating ViewSets for Users and Groups\nDESCRIPTION: ViewSet classes that handle the API endpoints for users and groups with authentication.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import permissions, viewsets\n\nfrom tutorial.quickstart.serializers import GroupSerializer, UserSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all().order_by('name')\n    serializer_class = GroupSerializer\n    permission_classes = [permissions.IsAuthenticated]\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Project Structure - Command Line Setup\nDESCRIPTION: Commands to create a new Django project, set up a virtual environment, and install required packages.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create the project directory\nmkdir tutorial\ncd tutorial\n\n# Create a virtual environment to isolate our package dependencies locally\npython3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and Django REST framework into the virtual environment\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed Request Data in Django REST Framework\nDESCRIPTION: Demonstrates how to access parsed request data using the .data property. This includes both file and non-file inputs, supports various HTTP methods, and handles different content types like JSON and form data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.data\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic UserViewSet in Django REST Framework\nDESCRIPTION: A simple ViewSet for listing or retrieving users. It defines two methods: list() for getting all users and retrieve() for getting a specific user by ID.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom django.shortcuts import get_object_or_404\nfrom myapps.serializers import UserSerializer\nfrom rest_framework import viewsets\nfrom rest_framework.response import Response\n\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    A simple ViewSet for listing or retrieving users.\n    \"\"\"\n    def list(self, request):\n        queryset = User.objects.all()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        queryset = User.objects.all()\n        user = get_object_or_404(queryset, pk=pk)\n        serializer = UserSerializer(user)\n        return Response(serializer.data)\n```\n\n----------------------------------------\n\nTITLE: Adding URL Patterns for API Root and Snippet Highlights\nDESCRIPTION: Configures URL patterns for the API root and snippet highlight views in the URLconf, making these endpoints accessible through specific paths.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npath('', views.api_root),\n\npath('snippets/<int:pk>/highlight/', views.SnippetHighlight.as_view()),\n```\n\n----------------------------------------\n\nTITLE: Adding REST Framework to Installed Apps\nDESCRIPTION: Django settings configuration to include REST framework in INSTALLED_APPS.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'rest_framework',\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Field Mapping Implementation\nDESCRIPTION: Example of extending AutoSchema to support custom field mapping for SerializerMethodField or custom field types.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CustomSchema(AutoSchema):\n    \"\"\"Extension of ``AutoSchema`` to add support for custom field schemas.\"\"\"\n\n    def map_field(self, field):\n        # Handle SerializerMethodFields or custom fields here...\n        # ...\n        return super().map_field(field)\n```\n\n----------------------------------------\n\nTITLE: Customizing OPTIONS Method Response in Django REST Framework Views\nDESCRIPTION: Python code for overriding the default OPTIONS method behavior in Django REST Framework views. This example removes the description field from the metadata response returned by the OPTIONS request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef options(self, request, *args, **kwargs):\n    \"\"\"\n    Don't include the view description in OPTIONS responses.\n    \"\"\"\n    meta = self.metadata_class()\n    data = meta.determine_metadata(request, self)\n    data.pop('description')\n    return Response(data=data, status=status.HTTP_200_OK)\n```\n\n----------------------------------------\n\nTITLE: Mixin-Based List View Implementation\nDESCRIPTION: Implements the snippet list view using mixins for list and create operations, demonstrating code reuse through composition.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,\n                  mixins.CreateModelMixin,\n                  generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Using reverse_lazy() in Django REST Framework for Deferred URL Resolution\nDESCRIPTION: Example of using the reverse_lazy() function in Django REST Framework which provides lazy URL resolution. Like reverse(), it creates fully qualified URLs by including the request parameter to determine host and port.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/reverse.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_root = reverse_lazy('api-root', request=request)\n```\n\n----------------------------------------\n\nTITLE: Implementing a JSON View with Function-Based Views\nDESCRIPTION: Shows how to create a function-based view that returns JSON data using the @api_view decorator and @renderer_classes decorator to specify JSONRenderer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET'])\n@renderer_classes([JSONRenderer])\ndef user_count_view(request, format=None):\n    \"\"\"\n    A view that returns the count of active users in JSON.\n    \"\"\"\n    user_count = User.objects.filter(active=True).count()\n    content = {'user_count': user_count}\n    return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Installing djangorestframework-oauth with pip\nDESCRIPTION: Command to install the djangorestframework-oauth package using pip for OAuth1 and OAuth2 support.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npip install djangorestframework-oauth\n```\n\n----------------------------------------\n\nTITLE: Creating API Root Endpoint in Django REST Framework\nDESCRIPTION: Implements a function-based view that serves as the entry point to the API, returning links to the 'users' and 'snippets' endpoints using the reverse function to generate fully-qualified URLs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse\n\n\n@api_view(['GET'])\ndef api_root(request, format=None):\n    return Response({\n        'users': reverse('user-list', request=request, format=format),\n        'snippets': reverse('snippet-list', request=request, format=format)\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing Pygments Libraries for Code Highlighting in Django\nDESCRIPTION: Importing necessary Pygments libraries to enable code syntax highlighting. These imports are needed to generate HTML representation of code snippets with proper syntax highlighting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments import highlight\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in Django REST Framework 3.3\nDESCRIPTION: This code snippet demonstrates the new way to configure pagination in Django REST Framework 3.3. It shows the migration from view attributes and settings to pagination class attributes, which is part of the deprecations in this release.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.3-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npaginator.page_size\npaginator.page_query_param\npaginator.page_size_query_param\npaginator.max_page_size\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Schema Endpoint\nDESCRIPTION: Implementation of a custom GET endpoint that returns schema information using the metadata API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@action(methods=['GET'], detail=False)\ndef api_schema(self, request):\n    meta = self.metadata_class()\n    data = meta.determine_metadata(request, self)\n    return Response(data)\n```\n\n----------------------------------------\n\nTITLE: Adding Owner and Highlighted Fields to Snippet Model in Django\nDESCRIPTION: Adding foreign key relationship to User model and a highlighted field for storing HTML representation of the code. This establishes ownership of snippets and prepares for syntax highlighting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\nhighlighted = models.TextField()\n```\n\n----------------------------------------\n\nTITLE: URLPatternsTestCase Implementation\nDESCRIPTION: Shows how to use URLPatternsTestCase for testing with isolated URL patterns\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path, reverse\nfrom rest_framework.test import APITestCase, URLPatternsTestCase\n\n\nclass AccountTests(APITestCase, URLPatternsTestCase):\n    urlpatterns = [\n        path('api/', include('api.urls')),\n    ]\n\n    def test_create_account(self):\n        \"\"\"\n        Ensure we can create a new account object.\n        \"\"\"\n        url = reverse('account-list')\n        response = self.client.get(url, format='json')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data), 1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Content Renderer in Django REST Framework\nDESCRIPTION: Shows how to create a renderer for binary content (JPEG images) by setting appropriate media type, format, charset, and render_style attributes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass JPEGRenderer(renderers.BaseRenderer):\n    media_type = 'image/jpeg'\n    format = 'jpg'\n    charset = None\n    render_style = 'binary'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return data\n```\n\n----------------------------------------\n\nTITLE: Adding URL Configuration Import in Django Project URLs\nDESCRIPTION: Importing path and include functions for the project-level URL configuration. These are needed to include REST framework authentication URLs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\n```\n\n----------------------------------------\n\nTITLE: Django Filters Installation and Configuration in Django REST Framework\nDESCRIPTION: Shows the installation steps for django-filter package and how to configure it in Django settings. This includes installing the package, adding it to INSTALLED_APPS, and configuring it as a default filter backend.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npip install django-filter\n```\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'django_filters',\n    ...\n]\n```\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Permissions Module in Django REST Framework\nDESCRIPTION: Importing the permissions module to enable permission-based access control for API views. This provides classes for controlling who can access different API endpoints.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import permissions\n```\n\n----------------------------------------\n\nTITLE: Funding Page Styling\nDESCRIPTION: CSS styles for the funding page components including pricing charts, promotional elements, and typography. Defines layout and visual styling for subscription plans and promotional content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/funding.md#2025-04-08_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n.chart {\n    background-color: #e3e3e3;\n    background: -webkit-linear-gradient(top, #fff 0, #e3e3e3 100%);\n    border: 1px solid #E6E6E6;\n    border-radius: 5px;\n    box-shadow: 0px 0px 2px 0px rgba(181, 181, 181, 0.3);\n    padding: 40px 0px 5px;\n    position: relative;\n    text-align: center;\n    width: 97%;\n    min-height: 255px;\n    position: relative;\n    top: 37px;\n    margin-bottom: 20px\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pagination in Django REST Framework Settings\nDESCRIPTION: Adds pagination configuration to the Django REST Framework settings to limit the number of results returned by list views. Uses the default PageNumberPagination class with a page size of 10.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/5-relationships-and-hyperlinked-apis.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}\n```\n\n----------------------------------------\n\nTITLE: Using the JavaScript Client Library with a Django REST API\nDESCRIPTION: HTML example showing how to implement the JavaScript client library to interact with a REST API. The code demonstrates loading the client library and schema, instantiating an authenticated client, and making an API request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.6-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <script src=\"/static/rest_framework/js/coreapi-0.1.0.js\"></script>\n        <script src=\"/docs/schema.js\"></script>\n        <script>\n            const coreapi = window.coreapi\n            const schema = window.schema\n\n            // Instantiate a client...\n            let auth = coreapi.auth.TokenAuthentication({scheme: 'JWT', token: 'xxx'})\n            let client = coreapi.Client({auth: auth})\n\n            // Make an API request...\n            client.action(schema, ['projects', 'list']).then(function(result) {\n                alert(result)\n            })\n        </script>\n    </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding URL Field to Serializer for AdminRenderer\nDESCRIPTION: Demonstrates how to add a URL field to a ModelSerializer to ensure proper linking in the AdminRenderer interface.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    url = serializers.CharField(source='get_absolute_url', read_only=True)\n\n    class Meta:\n        model = Account\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Operation Descriptions in Python\nDESCRIPTION: Example of how to define OpenAPI operation descriptions for GET and POST methods using class docstrings in a Django REST Framework APIView.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.11-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass DocStringExampleListView(APIView):\n    \"\"\"\n    get: A description of my GET operation.\n    post: A description of my POST operation.\n    \"\"\"\n\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\n\n    def get(self, request, *args, **kwargs):\n        ...\n\n    def post(self, request, *args, **kwargs):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Owner Filter Backend in Django REST Framework\nDESCRIPTION: Implementation of a custom filter backend that restricts users to only seeing objects they own. This demonstrates how to create reusable filtering logic that can be applied across multiple views in a Django REST Framework API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass IsOwnerFilterBackend(filters.BaseFilterBackend):\n    \"\"\"\n    Filter that only allows users to see their own objects.\n    \"\"\"\n    def filter_queryset(self, request, queryset, view):\n        return queryset.filter(owner=request.user)\n```\n\n----------------------------------------\n\nTITLE: Using Routers for Automatic URL Configuration in Django REST Framework\nDESCRIPTION: This snippet shows how to use the DefaultRouter to automatically generate URL patterns for ViewSets in Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/6-viewsets-and-routers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\n\nfrom snippets import views\n\n# Create a router and register our ViewSets with it.\nrouter = DefaultRouter()\nrouter.register(r'snippets', views.SnippetViewSet, basename='snippet')\nrouter.register(r'users', views.UserViewSet, basename='user')\n\n# The API URLs are now determined automatically by the router.\nurlpatterns = [\n    path('', include(router.urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating ListField Subclass with Declarative Style\nDESCRIPTION: Demonstrates how to create a custom ListField subclass using a declarative style to specify the child field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass ScoresField(ListField):\n    child = IntegerField(min_value=0, max_value=100)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for ViewSets in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to configure URL patterns for the ViewSets using the format_suffix_patterns function.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/6-viewsets-and-routers.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = format_suffix_patterns([\n    path('', api_root),\n    path('snippets/', snippet_list, name='snippet-list'),\n    path('snippets/<int:pk>/', snippet_detail, name='snippet-detail'),\n    path('snippets/<int:pk>/highlight/', snippet_highlight, name='snippet-highlight'),\n    path('users/', user_list, name='user-list'),\n    path('users/<int:pk>/', user_detail, name='user-detail')\n])\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration with Init Parameters\nDESCRIPTION: Example showing how to configure AutoSchema instance with initialization parameters for tags, component names, and operation IDs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass PetDetailView(generics.RetrieveUpdateDestroyAPIView):\n    schema = AutoSchema(\n        tags=['Pets'],\n        component_name='Pet',\n        operation_id_base='Pet',\n    )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a View with StaticHTMLRenderer\nDESCRIPTION: Demonstrates how to use StaticHTMLRenderer with a function-based view to return a pre-rendered HTML string.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET'])\n@renderer_classes([StaticHTMLRenderer])\ndef simple_html_view(request):\n    data = '<html><body><h1>Hello, world</h1></body></html>'\n    return Response(data)\n```\n\n----------------------------------------\n\nTITLE: Customizing BrowsableAPIRenderer\nDESCRIPTION: Shows how to override the default renderer selection in BrowsableAPIRenderer by subclassing it and implementing a custom get_default_renderer method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomBrowsableAPIRenderer(BrowsableAPIRenderer):\n    def get_default_renderer(self, view):\n        return JSONRenderer()\n```\n\n----------------------------------------\n\nTITLE: Setting Per-View Filter Backends in Django REST Framework\nDESCRIPTION: Demonstrates how to apply filter backends to a specific view by setting the filter_backends attribute. This overrides any global filter backend settings for this particular view.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters.rest_framework\nfrom django.contrib.auth.models import User\nfrom myapp.serializers import UserSerializer\nfrom rest_framework import generics\n\nclass UserListView(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filter_backends = [django_filters.rest_framework.DjangoFilterBackend]\n```\n\n----------------------------------------\n\nTITLE: Updating Field Validation Method in Django REST Framework Serializer\nDESCRIPTION: Changes the signature of the validate_<field_name> method in serializers. The new method takes only the value to be validated and returns the validated value, simplifying the validation process.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef validate_score(self, value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('This field should be a multiple of ten.')\n    return value\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple User Throttle Rates in Django REST Framework\nDESCRIPTION: This example shows how to implement multiple user throttle rates by creating custom throttle classes with unique scopes and configuring them in the Django REST Framework settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n\nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': [\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ],\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Serializer with allow_null in Django REST Framework\nDESCRIPTION: Configuration example showing a nested serializer with many=True and allow_null=True, which in 3.2 allows null instead of the list rather than null values as list items.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.2-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNestedSerializer(many=True, allow_null=True)\n```\n\n----------------------------------------\n\nTITLE: Using Request Data with Serializers in DRF 3.0\nDESCRIPTION: Demonstrates the new preferred way of passing request data to serializers using the consolidated request.data property instead of separate DATA and FILES attributes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Do this...\nExampleSerializer(data=request.data)\n\n# Don't do this...\nExampleSerializer(data=request.DATA, files=request.FILES)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pagination Settings\nDESCRIPTION: Global configuration for setting default pagination class and page size in Django REST Framework settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Default Authentication Classes Configuration\nDESCRIPTION: Shows the default configuration for authentication classes that handle user authentication.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n[\n    'rest_framework.authentication.SessionAuthentication',\n    'rest_framework.authentication.BasicAuthentication'\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Read-Only Router\nDESCRIPTION: Custom router implementation that only supports list and retrieve actions without trailing slashes. Extends SimpleRouter with custom route configurations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.routers import Route, DynamicRoute, SimpleRouter\n\nclass CustomReadOnlyRouter(SimpleRouter):\n    \"\"\"\n    A router for read-only APIs, which doesn't use trailing slashes.\n    \"\"\"\n    routes = [\n        Route(\n            url=r'^{prefix}$',\n            mapping={'get': 'list'},\n            name='{basename}-list',\n            detail=False,\n            initkwargs={'suffix': 'List'}\n        ),\n        Route(\n            url=r'^{prefix}/{lookup}$',\n            mapping={'get': 'retrieve'},\n            name='{basename}-detail',\n            detail=True,\n            initkwargs={'suffix': 'Detail'}\n        ),\n        DynamicRoute(\n            url=r'^{prefix}/{lookup}/{url_path}$',\n            name='{basename}-{url_name}',\n            detail=True,\n            initkwargs={}\n        )\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Classes in Class-Based Views\nDESCRIPTION: Example of setting parser classes for an individual APIView class that accepts JSON content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.parsers import JSONParser\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    \"\"\"\n    A view that can accept POST requests with JSON content.\n    \"\"\"\n    parser_classes = [JSONParser]\n\n    def post(self, request, format=None):\n        return Response({'received data': request.data})\n```\n\n----------------------------------------\n\nTITLE: Using extra_kwargs in Django REST Framework ModelSerializer\nDESCRIPTION: Demonstrates the use of the extra_kwargs option in ModelSerializer meta class to specify additional field options, replacing the deprecated write_only_fields option.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass MySerializer(serializer.ModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ['id', 'email', 'notes', 'is_admin']\n        extra_kwargs = {\n                'is_admin': {'write_only': True}\n        }\n```\n\n----------------------------------------\n\nTITLE: Importing AutoSchema from DRF\nDESCRIPTION: Basic import statement for the AutoSchema class from Django REST Framework's OpenAPI schema module.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas.openapi import AutoSchema\n```\n\n----------------------------------------\n\nTITLE: Using ListField with allow_null in Django REST Framework\nDESCRIPTION: Example showing how to configure a ListField with allow_null for child items in Django REST framework. This demonstrates the proper way to allow null values within a list after the 3.2 behavior change.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.2-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nListField(child=NestedSerializer(allow_null=True))\n```\n\n----------------------------------------\n\nTITLE: Overriding to_representation Method in Django REST Framework Serializer\nDESCRIPTION: Shows how to override the to_representation method in a serializer to modify the representation of serialized data. This replaces the previous transform_<field_name> functionality.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef to_representation(self, instance):\n    ret = super(UserSerializer, self).to_representation(instance)\n    ret['username'] = ret['username'].lower()\n    return ret\n```\n\n----------------------------------------\n\nTITLE: Defining ListField with IntegerField Child\nDESCRIPTION: Shows how to create a ListField that validates a list of integers within a specific range.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nscores = ListField(child=IntegerField(min_value=0, max_value=100))\n```\n\n----------------------------------------\n\nTITLE: View Description Function Signature\nDESCRIPTION: Function signature for generating view descriptions in Django REST Framework. Takes a view instance and html boolean parameter to generate either HTML or OPTIONS response descriptions.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nview_description(self, html=False)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Django REST Framework\nDESCRIPTION: Command to run the test suite for Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./runtests.py\n```\n\n----------------------------------------\n\nTITLE: Custom Plain Text Parser Implementation\nDESCRIPTION: Example of implementing a custom parser that handles plain text content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PlainTextParser(BaseParser):\n    \"\"\"\n    Plain text parser.\n    \"\"\"\n    media_type = 'text/plain'\n\n    def parse(self, stream, media_type=None, parser_context=None):\n        \"\"\"\n        Simply return a string representing the body of the request.\n        \"\"\"\n        return stream.read()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ModelSerializer with Transform Behavior in Django REST Framework\nDESCRIPTION: Demonstrates how to create a custom ModelSerializer that preserves the 2.x style transform_<field_name> behavior for easier migration to 3.0.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass BaseModelSerializer(ModelSerializer):\n    \"\"\"\n    A custom ModelSerializer class that preserves 2.x style `transform_<field_name>` behavior.\n    \"\"\"\n    def to_representation(self, instance):\n        ret = super(BaseModelSerializer, self).to_representation(instance)\n        for key, value in ret.items():\n            method = getattr(self, 'transform_' + key, None)\n            if method is not None:\n                ret[key] = method(value)\n        return ret\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Queryset with Generic Filtering in Django REST Framework\nDESCRIPTION: Shows how to combine an overridden get_queryset() method with generic filtering. This example filters products that have been purchased by the authenticated user, with additional filtering capabilities.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass PurchasedProductsList(generics.ListAPIView):\n    \"\"\"\n    Return a list of all the products that the authenticated\n    user has ever purchased, with optional filtering.\n    \"\"\"\n    model = Product\n    serializer_class = ProductSerializer\n    filterset_class = ProductFilter\n\n    def get_queryset(self):\n        user = self.request.user\n        return user.purchase_set.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-Only BaseSerializer\nDESCRIPTION: Example of a read-only serializer 'HighScoreSerializer' using BaseSerializer to convert HighScore model instances into primitive data types.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n```\n\n----------------------------------------\n\nTITLE: Using reverse() in Django REST Framework for Absolute URLs\nDESCRIPTION: Example of using the reverse() function in a Django REST Framework APIView. This function extends Django's reverse() to create fully qualified URLs by including the request parameter to determine host and port information.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/reverse.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.reverse import reverse\nfrom rest_framework.views import APIView\nfrom django.utils.timezone import now\n\nclass APIRootView(APIView):\n    def get(self, request):\n        year = now().year\n        data = {\n            ...\n            'year-summary-url': reverse('year-summary', args=[year], request=request)\n        }\n        return Response(data)\n```\n\n----------------------------------------\n\nTITLE: Test Request Renderer Classes Configuration\nDESCRIPTION: Shows the default configuration for renderer classes used in test requests.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n[\n    'rest_framework.renderers.MultiPartRenderer',\n    'rest_framework.renderers.JSONRenderer'\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Request Method for Read/Write Operations in Django REST Framework Permissions\nDESCRIPTION: Demonstrates how to check if a request is a read-only operation by comparing the request method against the SAFE_METHODS constant in a custom permission class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif request.method in permissions.SAFE_METHODS:\n    # Check permissions for read-only request\nelse:\n    # Check permissions for write request\n```\n\n----------------------------------------\n\nTITLE: Wrapping Response Data for TemplateHTMLRenderer\nDESCRIPTION: Demonstrates how to wrap response data in a dictionary to make it compatible with TemplateHTMLRenderer when using a serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse.data = {'results': response.data}\n```\n\n----------------------------------------\n\nTITLE: Defining a Django Model with a Method\nDESCRIPTION: Example of a Django model class 'Invitation' with a method 'expiry_date' that can be included in a ModelSerializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Invitation(models.Model):\n    created = models.DateTimeField()\n    to_email = models.EmailField()\n    message = models.CharField(max_length=1000)\n\n    def expiry_date(self):\n        return self.created + datetime.timedelta(days=30)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Filter Backends in Django REST Framework Settings\nDESCRIPTION: Shows how to configure default filter backends globally in the Django REST Framework settings. This applies the filter backend to all views in the project.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializer Update Method in DRF 3.0\nDESCRIPTION: Shows how to implement the new update() method for serializers that handles updating existing model instances with validated data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef update(self, instance, validated_data):\n    instance.title = validated_data.get('title', instance.title)\n    instance.code = validated_data.get('code', instance.code)\n    instance.linenos = validated_data.get('linenos', instance.linenos)\n    instance.language = validated_data.get('language', instance.language)\n    instance.style = validated_data.get('style', instance.style)\n    instance.save()\n    return instance\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Field Lookup Mixin in Django REST Framework\nDESCRIPTION: A custom mixin class that enables object lookup based on multiple fields in the URL configuration. It extends the default single field filtering behavior by checking multiple lookup fields specified in the lookup_fields attribute.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MultipleFieldLookupMixin:\n    \"\"\"\n    Apply this mixin to any view or viewset to get multiple field filtering\n    based on a `lookup_fields` attribute, instead of the default single field filtering.\n    \"\"\"\n    def get_object(self):\n        queryset = self.get_queryset()             # Get the base queryset\n        queryset = self.filter_queryset(queryset)  # Apply any filter backends\n        filter = {}\n        for field in self.lookup_fields:\n            if self.kwargs.get(field): # Ignore empty fields.\n                filter[field] = self.kwargs[field]\n        obj = get_object_or_404(queryset, **filter)  # Lookup the object\n        self.check_object_permissions(self.request, obj)\n        return obj\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Rate Throttling in Django REST Framework Views\nDESCRIPTION: This snippet demonstrates how to use ScopedRateThrottle to restrict access to specific parts of the API by setting throttle_scope on views and configuring corresponding rates in settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n\nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': [\n        'rest_framework.throttling.ScopedRateThrottle',\n    ],\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespace-based Versioning URL Configuration\nDESCRIPTION: Example of configuring URLs for namespace-based versioning with different version prefixes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# bookings/urls.py\nurlpatterns = [\n    re_path(r'^$', bookings_list, name='bookings-list'),\n    re_path(r'^(?P<pk>[0-9]+)/$', bookings_detail, name='bookings-detail')\n]\n\n# urls.py\nurlpatterns = [\n    re_path(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n    re_path(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing XLSX rendering in a ViewSet\nDESCRIPTION: Python code example showing how to use XLSXFileMixin and XLSXRenderer in a ViewSet to enable XLSX file downloads with custom filenames.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.viewsets import ReadOnlyModelViewSet\nfrom drf_excel.mixins import XLSXFileMixin\nfrom drf_excel.renderers import XLSXRenderer\n\nfrom .models import MyExampleModel\nfrom .serializers import MyExampleSerializer\n\nclass MyExampleViewSet(XLSXFileMixin, ReadOnlyModelViewSet):\n    queryset = MyExampleModel.objects.all()\n    serializer_class = MyExampleSerializer\n    renderer_classes = [XLSXRenderer]\n    filename = 'my_export.xlsx'\n```\n\n----------------------------------------\n\nTITLE: Configuring HyperlinkedModelSerializer in Django REST Framework\nDESCRIPTION: Shows how to configure a HyperlinkedModelSerializer using the extra_kwargs option or by explicitly defining the url field, replacing the deprecated view_name and lookup_field options.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MySerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = MyModel\n        fields = ['url', 'email', 'notes', 'is_admin']\n        extra_kwargs = {\n            'url': {'lookup_field': 'uuid'}\n        }\n\nclass MySerializer(serializer.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='mymodel-detail',\n        lookup_field='uuid'\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ['url', 'email', 'notes', 'is_admin']\n```\n\n----------------------------------------\n\nTITLE: Adding REST Framework to Django INSTALLED_APPS\nDESCRIPTION: Code for adding REST Framework to the INSTALLED_APPS setting in a Django project.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/index.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Form with Content Type Override for JSON Submission\nDESCRIPTION: Example HTML form that uses data-override attributes to submit JSON content instead of the default form encoding, allowing browsers to send JSON data through a standard form submission.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browser-enhancements.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/\">\n    <input data-override='content-type' value='application/json' type='hidden'/>\n    <textarea data-override='content'>{}</textarea>\n    <input type=\"submit\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing HyperlinkedModelSerializer with Namespace Versioning in Django REST framework\nDESCRIPTION: Example showing how to create a hyperlinked serializer that will automatically resolve relationships to the same API version as used on the incoming request when using NamespaceVersioning.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.1-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AccountsSerializer(serializer.HyperlinkedModelSerializer):\n    class Meta:\n        model = Accounts\n        fields = ['account_name', 'users']\n```\n\n----------------------------------------\n\nTITLE: Implementing a JSON View with Class-Based Views\nDESCRIPTION: Demonstrates how to create a view that returns JSON data using APIView by setting renderer_classes to JSONRenderer and returning a Response with content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass UserCountView(APIView):\n    \"\"\"\n    A view that returns the count of active users in JSON.\n    \"\"\"\n    renderer_classes = [JSONRenderer]\n\n    def get(self, request, format=None):\n        user_count = User.objects.filter(active=True).count()\n        content = {'user_count': user_count}\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Excluding a View from Schema Generation\nDESCRIPTION: This example shows how to exclude a function-based view from the API schema generation by passing None to the @schema decorator. This is useful for endpoints that should not be documented in the API schema.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET'])\n@schema(None)\ndef view(request):\n    return Response({\"message\": \"Will not appear in schema!\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring OrderingFilter with Unrestricted Fields in Django REST Framework\nDESCRIPTION: Example of implementing OrderingFilter with unrestricted field selection in a Django REST Framework view. This configuration uses '__all__' to allow ordering on any model field or queryset aggregate.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass BookingsListView(generics.ListAPIView):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n    filter_backends = [filters.OrderingFilter]\n    ordering_fields = '__all__'\n```\n\n----------------------------------------\n\nTITLE: Creating a View with TemplateHTMLRenderer\nDESCRIPTION: Shows how to create a class-based view that uses TemplateHTMLRenderer to return templated HTML for a user detail page.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass UserDetail(generics.RetrieveAPIView):\n    \"\"\"\n    A view that returns a templated HTML representation of a given user.\n    \"\"\"\n    queryset = User.objects.all()\n    renderer_classes = [TemplateHTMLRenderer]\n\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        return Response({'user': self.object}, template_name='user_detail.html')\n```\n\n----------------------------------------\n\nTITLE: Using fields parameter with ModelSerializer in Django REST Framework\nDESCRIPTION: Example showing the use of the 'fields' parameter with ModelSerializer, which is mandatory as of version 3.4. The fields option can be set to '__all__' to explicitly include all model fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.5-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfields = '__all__'\n```\n\n----------------------------------------\n\nTITLE: Filtering Purchases by URL Parameters in Django REST Framework\nDESCRIPTION: Shows how to filter queryset based on URL parameters. This example filters purchases based on a username path parameter defined in the URL pattern.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases for\n        the user as determined by the username portion of the URL.\n        \"\"\"\n        username = self.kwargs['username']\n        return Purchase.objects.filter(purchaser__username=username)\n```\n\n----------------------------------------\n\nTITLE: Styling for Promotional Sponsor Section\nDESCRIPTION: CSS styles for the promotional section of the page that displays sponsor logos and links. Defines layout, sizing, and positioning for the promotional elements.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.6-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Requirements for Django REST Framework\nDESCRIPTION: This snippet imports various requirement files for Django REST Framework, including optional dependencies, testing tools, documentation generators, and packaging utilities. It allows for flexible configuration in different environments like tox testing.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements/requirements-optionals.txt\n-r requirements/requirements-testing.txt\n-r requirements/requirements-documentation.txt\n-r requirements/requirements-packaging.txt\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema Generation with @schema Decorator\nDESCRIPTION: This example demonstrates how to customize API schema generation for a function-based view using the @schema decorator. It implements a custom AutoSchema class to override the default schema generation behavior.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view, schema\nfrom rest_framework.schemas import AutoSchema\n\nclass CustomAutoSchema(AutoSchema):\n    def get_link(self, path, method, base_url):\n        # override view introspection here...\n\n@api_view(['GET'])\n@schema(CustomAutoSchema())\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})\n```\n\n----------------------------------------\n\nTITLE: Updating and Pushing Source Translations\nDESCRIPTION: Commands to update the source django.po file for US English and push it to Transifex. This process is used when user-visible strings are changed in the project.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/project-management.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Update the source django.po file, which is the US English version.\ncd rest_framework\ndjango-admin makemessages -l en_US\n# 2. Push the source django.po file to Transifex.\ncd ..\ntx push -s\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueForYearValidator\nDESCRIPTION: Example of applying UniqueForYearValidator to enforce unique constraints within a year.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.validators import UniqueForYearValidator\n\nclass ExampleSerializer(serializers.Serializer):\n    # ...\n    class Meta:\n        # Blog posts should have a slug that is unique for the current year.\n        validators = [\n            UniqueForYearValidator(\n                queryset=BlogPostItem.objects.all(),\n                field='slug',\n                date_field='published'\n            )\n        ]\n```\n\n----------------------------------------\n\nTITLE: Creating Composable Permission Classes in Django REST Framework\nDESCRIPTION: Example of composing permission classes using logical operators. This demonstrates how to combine IsAuthenticated with either ReadOnly or IsAdminUser permissions using the & and | operators.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.9-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npermission_classes = [IsAuthenticated & (ReadOnly | IsAdminUser)]\n```\n\n----------------------------------------\n\nTITLE: Comparing Request Data Handling in Django REST Framework\nDESCRIPTION: Demonstrates the difference between request.POST and request.data in handling form data and arbitrary data for different HTTP methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/2-requests-and-responses.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequest.POST  # Only handles form data.  Only works for 'POST' method.\nrequest.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment and Installing Dependencies for Django REST Framework\nDESCRIPTION: Commands to set up a virtual environment, activate it, and install the necessary dependencies for Django REST Framework development.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\nsource env/bin/activate\npip install -e .\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreAPI Schema Class in Django REST Framework Settings\nDESCRIPTION: This snippet shows how to explicitly set the DEFAULT_SCHEMA_CLASS in Django REST Framework settings to continue using CoreAPI schemas after version 3.10.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.10-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    ...: ...,\n    \"DEFAULT_SCHEMA_CLASS\": \"rest_framework.schemas.coreapi.AutoSchema\",\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying pylinkvalidator Version for Link Checking in Python\nDESCRIPTION: This snippet specifies the version of pylinkvalidator to be used for checking broken links in the documentation. pylinkvalidator is a Python tool that crawls a website and reports broken links.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements/requirements-documentation.txt#2025-04-08_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npylinkvalidator==0.3\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Throttling with Function-Based Views\nDESCRIPTION: This example shows how to implement rate limiting for a function-based view using the @throttle_classes decorator. The custom OncePerDayUserThrottle class limits each user to one request per day.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/views.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view, throttle_classes\nfrom rest_framework.throttling import UserRateThrottle\n\nclass OncePerDayUserThrottle(UserRateThrottle):\n    rate = '1/day'\n\n@api_view(['GET'])\n@throttle_classes([OncePerDayUserThrottle])\ndef view(request):\n    return Response({\"message\": \"Hello for today! See you tomorrow!\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring HyperlinkedModelSerializer with Extra Fields\nDESCRIPTION: Example of a HyperlinkedModelSerializer that explicitly includes primary key field along with the default URL field. This demonstrates how to customize the fields option to include both hyperlinks and primary keys.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['url', 'id', 'account_name', 'users', 'created']\n```\n\n----------------------------------------\n\nTITLE: Configuring HyperlinkedModelSerializer with Extra Fields\nDESCRIPTION: Example of a HyperlinkedModelSerializer that explicitly includes primary key field along with the default URL field. This demonstrates how to customize the fields option to include both hyperlinks and primary keys.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['url', 'id', 'account_name', 'users', 'created']\n```\n\n----------------------------------------\n\nTITLE: Implementing UniqueValidator\nDESCRIPTION: Example of applying UniqueValidator to a serializer field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.validators import UniqueValidator\n\nslug = SlugField(\n    max_length=100,\n    validators=[UniqueValidator(queryset=BlogPost.objects.all())]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validator with Context in Python\nDESCRIPTION: Example of implementing a custom validator that requires context in Django REST Framework, using the new 'requires_context' attribute and '__call__' method signature.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.11-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CustomValidator:\n    requires_context = True\n\n    def __call__(self, value, serializer_field):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining SlugRelatedField with Explicit Queryset\nDESCRIPTION: Shows how to properly define a SlugRelatedField in a ModelSerializer with an explicit queryset argument.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    organizations = serializers.SlugRelatedField(\n        slug_field='name',\n        queryset=Organization.objects.all()\n    )\n\n    class Meta:\n        model = Account\n```\n\n----------------------------------------\n\nTITLE: Implementing Search on Annotated Fields\nDESCRIPTION: Shows how to configure SearchFilter to work with annotated fields created using Django's annotate() method, enabling searching on computed values.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.12-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass PublisherSearchView(generics.ListAPIView):\n    \"\"\"\n    Search for publishers, optionally filtering the search against the average\n    rating of all their books.\n    \"\"\"\n\n    queryset = Publisher.objects.annotate(avg_rating=Avg(\"book__rating\"))\n    serializer_class = PublisherSerializer\n    filter_backends = [filters.SearchFilter]\n    search_fields = [\"avg_rating\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializer Create Method in DRF 3.0\nDESCRIPTION: Demonstrates the new create() method implementation for serializers that handles creating new model instances from validated data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create(self, validated_data):\n    return Snippet.objects.create(**validated_data)\n```\n\n----------------------------------------\n\nTITLE: Using CreateOnlyDefault for DateTimeField in Django REST Framework\nDESCRIPTION: Demonstrates how to use the CreateOnlyDefault class to set a default value (current timestamp) during creation operations while omitting the field during updates.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncreated_at = serializers.DateTimeField(\n    default=serializers.CreateOnlyDefault(timezone.now)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata Class\nDESCRIPTION: Settings configuration to use a custom metadata class project-wide.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata Class\nDESCRIPTION: Settings configuration to use a custom metadata class project-wide.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'myproject.apps.core.MinimalMetadata'\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ModelSerializer Implementation\nDESCRIPTION: Simple ModelSerializer class for CustomerReportRecord model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CustomerReportSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomerReportRecord\n```\n\n----------------------------------------\n\nTITLE: Styling Promo Links with CSS\nDESCRIPTION: CSS styles for promotional links layout with specific dimensions, background positioning, and text formatting. Includes styles for list items and anchor elements.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.14-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Django Migrations for the Snippet Model\nDESCRIPTION: Commands to create and apply database migrations for the newly created Snippet model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py makemigrations snippets\npython manage.py migrate snippets\n```\n\n----------------------------------------\n\nTITLE: Example OPTIONS Response in JSON Format\nDESCRIPTION: Sample response from a Django REST Framework OPTIONS request showing default metadata structure including allowed methods, content types, and schema information.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"To Do List\",\n    \"description\": \"List existing 'To Do' items, or create a new item.\",\n    \"renders\": [\n        \"application/json\",\n        \"text/html\"\n    ],\n    \"parses\": [\n        \"application/json\",\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\"\n    ],\n    \"actions\": {\n        \"POST\": {\n            \"note\": {\n                \"type\": \"string\",\n                \"required\": false,\n                \"read_only\": false,\n                \"label\": \"title\",\n                \"max_length\": 100\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timezone-aware DateTimeField Update\nDESCRIPTION: Update to handle timezone-aware DateTimeField serialization using active or default timezone instead of UTC.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDateTimeField(default_timezone=timezone.get_current_timezone())\n```\n\n----------------------------------------\n\nTITLE: Disabling Validators for Optional Fields in ModelSerializer\nDESCRIPTION: Shows how to handle the case of optional fields in a unique together constraint by disabling default validators and implementing custom validation logic in the validate method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass BillingRecordSerializer(serializers.ModelSerializer):\n    def validate(self, attrs):\n        # Apply custom validation either here, or in the view.\n\n    class Meta:\n        fields = ['client', 'date', 'amount']\n        extra_kwargs = {'client': {'required': False}}\n        validators = []  # Remove a default \"unique together\" constraint.\n```\n\n----------------------------------------\n\nTITLE: Using CoreAPIClient for API Interactions\nDESCRIPTION: Example of using CoreAPIClient to fetch schema and perform API operations\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Fetch the API schema\nclient = CoreAPIClient()\nschema = client.get('http://testserver/schema/')\n\n# Create a new organisation\nparams = {'name': 'MegaCorp', 'status': 'active'}\nclient.action(schema, ['organisations', 'create'], params)\n\n# Ensure that the organisation exists in the listing\ndata = client.action(schema, ['organisations', 'list'])\nassert(len(data) == 1)\nassert(data == [{'name': 'MegaCorp', 'status': 'active'}])\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleRouter to Use Django Path Converters\nDESCRIPTION: Shows how to configure a SimpleRouter to use Django path converters instead of regular expressions by setting the use_regex_path parameter to False.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrouter = SimpleRouter(use_regex_path=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Metadata Class Configuration\nDESCRIPTION: Django REST Framework settings configuration to set the default metadata class globally.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata'\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSONField Usage in Django REST Framework 3.3\nDESCRIPTION: This code snippet shows the inclusion of JSONField in the serializer fields, which corresponds to Django 1.9's Postgres JSONField model field. It's part of the new features introduced in Django REST Framework 3.3.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.3-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJSONField\n```\n\n----------------------------------------\n\nTITLE: Setting View-Specific Metadata Class\nDESCRIPTION: Example of setting a custom metadata class for a specific API view.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/metadata.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass APIRoot(APIView):\n    metadata_class = APIRootMetadata\n\n    def get(self, request, format=None):\n        return Response({\n            ...\n        })\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Management in compat.py\nDESCRIPTION: When creating third party packages, environment-specific code should be isolated in a compat.py module to handle different versions of Django, Python or third party libraries. This provides a unified interface for the rest of the codebase.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/third-party-packages.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Example reference to check Django REST framework's compat.py\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model with Unique Constraint\nDESCRIPTION: Example model class with a unique field constraint and timestamp field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/validators.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CustomerReportRecord(models.Model):\n    time_raised = models.DateTimeField(default=timezone.now, editable=False)\n    reference = models.CharField(unique=True, max_length=20)\n    description = models.TextField()\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Keyword Arguments in ModelSerializer using Python\nDESCRIPTION: This example demonstrates how to specify additional keyword arguments for fields in a ModelSerializer using the extra_kwargs option in the Meta class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass CreateUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['email', 'username', 'password']\n        extra_kwargs = {'password': {'write_only': True}}\n\n    def create(self, validated_data):\n        user = User(\n            email=validated_data['email'],\n            username=validated_data['username']\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleRouter Without Trailing Slashes\nDESCRIPTION: Shows how to configure a SimpleRouter instance to create URL patterns without trailing slashes, which can be useful for compatibility with certain JavaScript frameworks.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrouter = SimpleRouter(trailing_slash=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Token Authentication View to Django URLconf\nDESCRIPTION: This snippet shows how to add the custom token authentication view (CustomAuthToken) to the Django URL configuration.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns += [\n    path('api-token-auth/', CustomAuthToken.as_view())\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Django REST Framework Serializer\nDESCRIPTION: Demonstrates how to implement custom validation logic in the validate method of a serializer. It shows how to raise ValidationError for non-field errors and field-specific errors.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef validate(self, attrs):\n    # serializer.errors == {'non_field_errors': ['A non field error']}\n    raise serializers.ValidationError('A non field error')\n\ndef validate(self, attrs):\n    # serializer.errors == {'my_field': ['A field error']}\n    raise serializers.ValidationError({'my_field': 'A field error'})\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Django REST Framework Distribution\nDESCRIPTION: This code specifies the required dependencies for building, distributing, and managing translations of the Django REST Framework package. It includes wheel for PyPI package creation, twine for secure package uploads, and transifex-client for translation management.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements/requirements-packaging.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Wheel for PyPI installs.\nwheel>=0.36.2,<0.40.0\n\n# Twine for secured PyPI uploads.\ntwine>=3.4.2,<4.0.2\n\n# Transifex client for managing translation resources.\ntransifex-client\n```\n\n----------------------------------------\n\nTITLE: Installing django-oauth-toolkit with pip\nDESCRIPTION: Command to install the django-oauth-toolkit package using pip.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install django-oauth-toolkit\n```\n\n----------------------------------------\n\nTITLE: Implementing Writable Nested Serialization in Django REST Framework\nDESCRIPTION: Shows how to implement writable nested serialization by explicitly defining the create method in a serializer. This is necessary as automatic nested serialization is no longer supported.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass UserSerializer(serializers.ModelSerializer):\n    profile = ProfileSerializer()\n\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'profile']\n\n    def create(self, validated_data):\n        profile_data = validated_data.pop('profile')\n        user = User.objects.create(**validated_data)\n        Profile.objects.create(user=user, **profile_data)\n        return user\n```\n\n----------------------------------------\n\nTITLE: Defining Serializer with Email Field Using Dotted Notation\nDESCRIPTION: Example showing how to use the source parameter with dotted notation to access nested attributes. This serializer accesses the email of a user related to a comment object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CommentSerializer(serializers.Serializer):\n    email = serializers.EmailField(source=\"user.email\")\n```\n\n----------------------------------------\n\nTITLE: Accessing REST Framework Settings\nDESCRIPTION: Shows how to access REST Framework settings programmatically using the api_settings object which checks for user-defined settings before falling back to defaults.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.settings import api_settings\n\nprint(api_settings.DEFAULT_AUTHENTICATION_CLASSES)\n```\n\n----------------------------------------\n\nTITLE: Accessing REST Framework Settings\nDESCRIPTION: Shows how to access REST Framework settings programmatically using the api_settings object which checks for user-defined settings before falling back to defaults.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.settings import api_settings\n\nprint(api_settings.DEFAULT_AUTHENTICATION_CLASSES)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Throttling Settings in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to set up global throttling classes and rates in the Django REST Framework settings. It configures anonymous and user-based rate limiting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': [\n        'rest_framework.throttling.AnonRateThrottle',\n        'rest_framework.throttling.UserRateThrottle'\n    ],\n    'DEFAULT_THROTTLE_RATES': {\n        'anon': '100/day',\n        'user': '1000/day'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django settings for OAuth2 authentication\nDESCRIPTION: Django settings configuration to add oauth2_provider to INSTALLED_APPS and set OAuth2Authentication as the default authentication class for REST framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'oauth2_provider',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic ObjectSerializer\nDESCRIPTION: Example of a generic serializer 'ObjectSerializer' using BaseSerializer to coerce arbitrary complex objects into primitive representations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    A read-only serializer that coerces arbitrary complex objects\n    into primitive representations.\n    \"\"\"\n    def to_representation(self, obj):\n        for attribute_name in dir(obj):\n            attribute = getattr(obj, attribute_name)\n            if attribute_name.startswith('_'):\n                # Ignore private attributes.\n                pass\n            elif hasattr(attribute, '__call__'):\n                # Ignore methods and other callables.\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # Primitive types can be passed through unmodified.\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # Recursively deal with items in lists.\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # Recursively deal with items in dictionaries.\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # Force anything else to its string representation.\n                output[attribute_name] = str(attribute)\n```\n\n----------------------------------------\n\nTITLE: Adding Token Authentication Endpoint to Django URLconf\nDESCRIPTION: This snippet demonstrates how to add a built-in view for obtaining an authentication token to the Django URL configuration. It uses the obtain_auth_token view from rest_framework.authtoken.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.authtoken import views\nurlpatterns += [\n    path('api-token-auth/', views.obtain_auth_token)\n]\n```\n\n----------------------------------------\n\nTITLE: Styling Promotional Links\nDESCRIPTION: CSS styles for formatting promotional links section with specific layout and image display properties.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.12-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Rendering with Style Options\nDESCRIPTION: Examples of using the style parameter to control how fields are rendered in HTML forms. Shows how to create a password input and customize a choice field to use radio buttons.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Use <input type=\"password\"> for the input.\npassword = serializers.CharField(\n    style={'input_type': 'password'}\n)\n\n# Use a radio input instead of a select input.\ncolor_channel = serializers.ChoiceField(\n    choices=['red', 'green', 'blue'],\n    style={'base_template': 'radio.html'}\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Compiling Translations\nDESCRIPTION: Commands to pull translated django.po files from Transifex and compile them into binary .mo files for all supported languages. This process is used to update the project with new translations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/project-management.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 3. Pull the translated django.po files from Transifex.\ntx pull -a --minimum-perc 10\ncd rest_framework\n# 4. Compile the binary .mo files for all supported languages.\ndjango-admin compilemessages\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-View Throttling in Django REST Framework Class-Based Views\nDESCRIPTION: This example shows how to apply throttling to a specific API view using class-based views. It uses the UserRateThrottle class to limit request rates.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    throttle_classes = [UserRateThrottle]\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Context in Django REST Framework\nDESCRIPTION: Shows how to access additional authentication context using the .auth property. The exact behavior depends on the authentication policy being used, but it typically returns an instance of the token used for authentication.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrequest.auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Swagger UI Template for Django REST Framework API Documentation\nDESCRIPTION: HTML template for integrating Swagger UI with Django REST Framework's schema generation. Provides a user interface for interacting with API documentation generated from OpenAPI schemas.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Swagger</title>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"//unpkg.com/swagger-ui-dist@3/swagger-ui.css\" />\n  </head>\n  <body>\n    <div id=\"swagger-ui\"></div>\n    <script src=\"//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js\"></script>\n    <script>\n    const ui = SwaggerUIBundle({\n        url: \"{% url schema_url %}\",\n        dom_id: '#swagger-ui',\n        presets: [\n          SwaggerUIBundle.presets.apis,\n          SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n        layout: \"BaseLayout\",\n        requestInterceptor: (request) => {\n          request.headers['X-CSRFToken'] = \"{{ csrf_token }}\"\n          return request;\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Method in Django REST Framework\nDESCRIPTION: Demonstrates how to access the uppercased string representation of the request's HTTP method. This property supports browser-based PUT, PATCH, and DELETE forms transparently.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequest.method\n```\n\n----------------------------------------\n\nTITLE: Using APIClient for Authentication\nDESCRIPTION: Shows how to use APIClient for making authenticated requests using login and credentials methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.test import APIClient\n\nclient = APIClient()\nclient.post('/notes/', {'title': 'new idea'}, format='json')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DocumentField using DictField in Django REST Framework\nDESCRIPTION: Example of creating a custom DictField subclass using declarative style to validate dictionaries with string values.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass DocumentField(DictField):\n    child = CharField()\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Routes in Django REST Framework\nDESCRIPTION: Code snippet showing how to add default authentication routes for the browsable API by including REST framework URLs in the project's urlconf.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browsable-api.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import include, path\n\nurlpatterns = [\n    # ...\n    path(\"api-auth/\", include(\"rest_framework.urls\", namespace=\"rest_framework\"))\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Throttling to Function-Based Views in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to use the @throttle_classes decorator to apply throttling to a function-based view in Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Django REST Framework\nDESCRIPTION: Shows how to access query parameters using the .query_params property, which is a more correctly named synonym for request.GET. This property can be used with any HTTP method type that includes query parameters.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequest.query_params\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for ReDoc in Django\nDESCRIPTION: Python code snippet for configuring URL patterns to serve the ReDoc template in a Django project. Routes a TemplateView to display the ReDoc interface with the OpenAPI schema URL provided in the context.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    # ...\n    # Route TemplateView to serve the ReDoc template.\n    #   * Provide `extra_context` with view name of `SchemaView`.\n    path(\n        \"redoc/\",\n        TemplateView.as_view(\n            template_name=\"redoc.html\", extra_context={\"schema_url\": \"openapi-schema\"}\n        ),\n        name=\"redoc\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Parser Settings in Django REST Framework\nDESCRIPTION: Example of setting default parser classes globally in Django REST Framework settings to only allow JSON requests.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Issue Reference Links\nDESCRIPTION: A collection of markdown reference-style links pointing to Django REST Framework GitHub issues. The links are organized by version numbers in HTML comments.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[gh2330]: https://github.com/encode/django-rest-framework/issues/2330\n[gh2331]: https://github.com/encode/django-rest-framework/issues/2331\n<!-- Additional links omitted for brevity -->\n[gh2761]: https://github.com/encode/django-rest-framework/issues/2761\n```\n\n----------------------------------------\n\nTITLE: Implementing ClassNameField in Django Rest Framework\nDESCRIPTION: Shows how to create a custom field that represents the class name of the object being serialized by overriding get_attribute and to_representation methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ClassNameField(serializers.Field):\n    def get_attribute(self, instance):\n        # We pass the object instance onto `to_representation`,\n        # not just the field attribute.\n        return instance\n\n    def to_representation(self, value):\n        \"\"\"\n        Serialize the value's class name.\n        \"\"\"\n        return value.__class__.__name__\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filter Backend Selection\nDESCRIPTION: Example of custom filter_queryset method implementing dynamic filter backend selection based on query parameters.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef filter_queryset(self, queryset):\n    filter_backends = [CategoryFilter]\n\n    if 'geo_route' in self.request.query_params:\n        filter_backends = [GeoRouteFilter, CategoryFilter]\n    elif 'geo_point' in self.request.query_params:\n        filter_backends = [GeoPointFilter, CategoryFilter]\n\n    for backend in list(filter_backends):\n        queryset = backend().filter_queryset(self.request, queryset, view=self)\n\n    return queryset\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Throttle Class with Alternate Cache in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create a custom throttle class that uses an alternate cache backend instead of the default one in Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache import caches\n\nclass CustomAnonRateThrottle(AnonRateThrottle):\n    cache = caches['alternate']\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Framework settings for JSONP\nDESCRIPTION: Python code snippet to modify Django REST Framework settings to use the JSONPRenderer as the default renderer class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_jsonp.renderers.JSONPRenderer',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using DictField with CharField in Django REST Framework\nDESCRIPTION: Example of using DictField to validate dictionaries where values are strings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndocument = DictField(child=CharField())\n```\n\n----------------------------------------\n\nTITLE: Implementing View-Level Content Negotiation in Django REST Framework\nDESCRIPTION: Example of setting custom content negotiation for a specific API view by subclassing APIView and setting the content_negotiation_class attribute.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/content-negotiation.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.negotiation import IgnoreClientContentNegotiation\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass NoNegotiationView(APIView):\n    \"\"\"\n    An example view that does not perform content negotiation.\n    \"\"\"\n    content_negotiation_class = IgnoreClientContentNegotiation\n\n    def get(self, request, format=None):\n        return Response({\n            'accepted media type': request.accepted_renderer.media_type\n        })\n```\n\n----------------------------------------\n\nTITLE: Correct Serializer Field Usage Example\nDESCRIPTION: Example showing the correct way of using keyword arguments with ListField in Django REST Framework serializers, using the 'child' parameter.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.13-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\naliases = serializers.ListField(child=serializers.CharField())\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment Class in Python\nDESCRIPTION: Defines a simple Comment class that will be used for serialization examples. The class has email, content, and created attributes, with created defaulting to the current datetime if not provided.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\nclass Comment:\n    def __init__(self, email, content, created=None):\n        self.email = email\n        self.content = content\n        self.created = created or datetime.now()\n\ncomment = Comment(email='leila@example.com', content='foo bar')\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Schema View - Python\nDESCRIPTION: Example code showing how to set up a Swagger schema view in Django REST Framework using get_schema_view() function\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.5-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\nfrom rest_framework_swagger.renderers import OpenAPIRenderer, SwaggerUIRenderer\n\nschema_view = get_schema_view(\n    title=\"Example API\", renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer]\n)\n\nurlpatterns = [path(\"swagger/\", schema_view), ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Rate Throttle in Django REST Framework\nDESCRIPTION: This code snippet demonstrates a custom throttle that randomly throttles 1 in every 10 requests. It overrides the allow_request method of BaseThrottle to implement the random throttling logic.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\nclass RandomRateThrottle(throttling.BaseThrottle):\n    def allow_request(self, request, view):\n        return random.randint(1, 10) != 1\n```\n\n----------------------------------------\n\nTITLE: Customizing DateTime Field in Django REST Framework ModelSerializer\nDESCRIPTION: Example showing how to override the default read-only behavior of auto_now and auto_now_add fields in a ModelSerializer by explicitly declaring the DateTimeField.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CommentSerializer(serializers.ModelSerializer):\n    created = serializers.DateTimeField()\n\n    class Meta:\n        model = Comment\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Save in ViewSet\nDESCRIPTION: Example of how to handle read_only fields with default values in create operations after the 3.8.0 breaking change. Shows implementation in a ViewSet's perform_create method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: HTML Form with PUT Method Override\nDESCRIPTION: Example HTML form that uses the data-method attribute to specify a PUT request instead of the default POST, allowing browsers to simulate PUT requests through the ajax-form library.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browser-enhancements.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/\" data-method=\"PUT\">\n    <input name='foo'/>\n    ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Removing Inherited Field in Serializer Subclass in Python\nDESCRIPTION: Shows how to declaratively remove a Field inherited from a parent class by setting the name to None on the subclass.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nclass MyBaseSerializer(ModelSerializer):\n    my_field = serializers.CharField()\n\nclass MySerializer(MyBaseSerializer):\n    my_field = None\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Serializers\nDESCRIPTION: Shows how to check for validation errors using is_valid() and accessing the errors property, which returns a dictionary of error messages keyed by field name.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nserializer = CommentSerializer(data={'email': 'foobar', 'content': 'baz'})\nserializer.is_valid()\n# False\nserializer.errors\n# {'email': ['Enter a valid e-mail address.'], 'created': ['This field is required.']}\n```\n\n----------------------------------------\n\nTITLE: Using Initial Callable with Date Field in Django REST Framework\nDESCRIPTION: Demonstrates how to use a callable as an initial value for a DateField. This example pre-populates a date field with the current date when rendering forms.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom rest_framework import serializers\nclass ExampleSerializer(serializers.Serializer):\n    day = serializers.DateField(initial=datetime.date.today)\n```\n\n----------------------------------------\n\nTITLE: Custom Pagination Class Implementation\nDESCRIPTION: Example of creating custom pagination classes by extending PageNumberPagination with specific size configurations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass LargeResultsSetPagination(PageNumberPagination):\n    page_size = 1000\n    page_size_query_param = 'page_size'\n    max_page_size = 10000\n\nclass StandardResultsSetPagination(PageNumberPagination):\n    page_size = 100\n    page_size_query_param = 'page_size'\n    max_page_size = 1000\n```\n\n----------------------------------------\n\nTITLE: Rendering Form View with Serializer in Django REST Framework\nDESCRIPTION: This snippet shows how to create a view for viewing and updating a model instance using a serializer in a template. It includes both the Python view code and the corresponding HTML template with form rendering.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/html-and-forms.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import get_object_or_404\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.views import APIView\n\n\nclass ProfileDetail(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_detail.html'\n\n    def get(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile)\n        return Response({'serializer': serializer, 'profile': profile})\n\n    def post(self, request, pk):\n        profile = get_object_or_404(Profile, pk=pk)\n        serializer = ProfileSerializer(profile, data=request.data)\n        if not serializer.is_valid():\n            return Response({'serializer': serializer, 'profile': profile})\n        serializer.save()\n        return redirect('profile-list')\n```\n\nLANGUAGE: html\nCODE:\n```\n{% load rest_framework %}\n\n<html><body>\n\n<h1>Profile - {{ profile.name }}</h1>\n\n<form action=\"{% url 'profile-detail' pk=profile.pk %}\" method=\"POST\">\n    {% csrf_token %}\n    {% render_form serializer %}\n    <input type=\"submit\" value=\"Save\">\n</form>\n\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Setting Throttle Classes for Specific ViewSet Actions in Django REST Framework\nDESCRIPTION: This example shows how to apply throttling to a specific action within a ViewSet using the @action decorator. It overrides any viewset-level throttle settings.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/throttling.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@action(detail=True, methods=[\"post\"], throttle_classes=[UserRateThrottle])\ndef example_adhoc_method(request, pk=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML List View with TemplateHTMLRenderer in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create a view that returns a list of Profile instances rendered in an HTML template using TemplateHTMLRenderer. It includes both the Python view code and the corresponding HTML template.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/html-and-forms.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom my_project.example.models import Profile\nfrom rest_framework.renderers import TemplateHTMLRenderer\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\n\nclass ProfileList(APIView):\n    renderer_classes = [TemplateHTMLRenderer]\n    template_name = 'profile_list.html'\n\n    def get(self, request):\n        queryset = Profile.objects.all()\n        return Response({'profiles': queryset})\n```\n\nLANGUAGE: html\nCODE:\n```\n<html><body>\n<h1>Profiles</h1>\n<ul>\n    {% for profile in profiles %}\n    <li>{{ profile.name }}</li>\n    {% endfor %}\n</ul>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: HyperlinkedRelatedField Implementation Example\nDESCRIPTION: Shows how to use HyperlinkedRelatedField to represent relationships using hyperlinks.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AlbumSerializer(serializers.ModelSerializer):\n    tracks = serializers.HyperlinkedRelatedField(\n        many=True,\n        read_only=True,\n        view_name='track-detail'\n    )\n\n    class Meta:\n        model = Album\n        fields = ['album_name', 'artist', 'tracks']\n```\n\n----------------------------------------\n\nTITLE: Handling Unique Together Constraints in ModelSerializer with Python\nDESCRIPTION: This snippet shows how to handle a read-only field that is part of a unique_together constraint at the model level, using both read_only and default arguments.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nuser = serializers.PrimaryKeyRelatedField(read_only=True, default=serializers.CurrentUserDefault())\n```\n\n----------------------------------------\n\nTITLE: Setting Global Permission Policy in Django REST Framework Settings\nDESCRIPTION: This code demonstrates how to set a default permission policy globally in the Django REST Framework settings file, requiring authentication for all views by default.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Permission Policy in Django REST Framework Settings\nDESCRIPTION: This code demonstrates how to set a default permission policy globally in the Django REST Framework settings file, requiring authentication for all views by default.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Format Parameter to Class-Based Views in Django REST Framework\nDESCRIPTION: Demonstrates adding the format parameter to class-based view methods to handle different media types. Each method that responds to HTTP requests needs the format parameter.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/format-suffixes.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass CommentList(APIView):\n    def get(self, request, format=None):\n        # do stuff...\n\n    def post(self, request, format=None):\n        # do stuff...\n```\n\n----------------------------------------\n\nTITLE: Rendering Forms with Different Template Packs in Django REST Framework\nDESCRIPTION: These snippets show how to render forms using different template packs (vertical, horizontal, and inline) in Django REST Framework. Each example includes the HTML template code for rendering the form.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/html-and-forms.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% load rest_framework %}\n\n...\n\n<form action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/vertical' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n{% load rest_framework %}\n\n...\n\n<form class=\"form-horizontal\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer %}\n    <div class=\"form-group\">\n        <div class=\"col-sm-offset-2 col-sm-10\">\n            <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n        </div>\n    </div>\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n{% load rest_framework %}\n\n...\n\n<form class=\"form-inline\" action=\"{% url 'login' %}\" method=\"post\" novalidate>\n    {% csrf_token %}\n    {% render_form serializer template_pack='rest_framework/inline' %}\n    <button type=\"submit\" class=\"btn btn-default\">Sign in</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example - Verbose\nDESCRIPTION: Example of verbose JSON response format with spacing after colons and commas.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"is_admin\": false, \"email\": \"jane@example\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Payment Button for Corporate Plans\nDESCRIPTION: Code snippet for integrating Stripe Checkout button with configurable parameters for different subscription tiers. Includes dynamic pricing, currency handling and billing address collection.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/funding.md#2025-04-08_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"signup\" action=\"/signup/{{ currency }}-{{ rates.corporate1 }}/\" method=\"POST\">\n  <script\n    src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n    data-key=\"{{ stripe_public }}\"\n    data-amount=\"{{ stripe_amounts.corporate1 }}\"\n    data-name=\"Django REST framework\"\n    data-description=\"Basic\"\n    data-currency=\"{{ currency }}\"\n    data-allow-remember-me=false\n    data-billing-address=true\n    data-label='Sign up'\n    data-panel-label='Sign up - {% verbatim %}{{amount}}{% endverbatim %}/mo'>\n  </script>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Styling Promotional Sponsor Links in CSS\nDESCRIPTION: CSS styles for displaying promotional sponsor links in a grid layout with background images. The styles format sponsor logos with specific dimensions, text alignment, and spacing.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.4-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Base Serializer for Complex Object Serialization in Django REST Framework\nDESCRIPTION: Example of a generic ObjectSerializer that extends BaseSerializer to handle coercing arbitrary complex objects into primitive representations, recursively handling nested structures.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nclass ObjectSerializer(serializers.BaseSerializer):\n    \"\"\"\n    A read-only serializer that coerces arbitrary complex objects\n    into primitive representations.\n    \"\"\"\n    def to_representation(self, instance):\n        output = {}\n        for attribute_name in dir(instance):\n            attribute = getattr(instance, attribute_name)\n            if attribute_name.startswith('_'):\n                # Ignore private attributes.\n                pass\n            elif hasattr(attribute, '__call__'):\n                # Ignore methods and other callables.\n                pass\n            elif isinstance(attribute, (str, int, bool, float, type(None))):\n                # Primitive types can be passed through unmodified.\n                output[attribute_name] = attribute\n            elif isinstance(attribute, list):\n                # Recursively deal with items in lists.\n                output[attribute_name] = [\n                    self.to_representation(item) for item in attribute\n                ]\n            elif isinstance(attribute, dict):\n                # Recursively deal with items in dictionaries.\n                output[attribute_name] = {\n                    str(key): self.to_representation(value)\n                    for key, value in attribute.items()\n                }\n            else:\n                # Force anything else to its string representation.\n                output[attribute_name] = str(attribute)\n        return output\n```\n\n----------------------------------------\n\nTITLE: Overriding save() Method in a Serializer\nDESCRIPTION: Demonstrates how to override the save() method directly in cases where create() and update() aren't semantically appropriate, such as in a contact form that sends an email.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ContactForm(serializers.Serializer):\n    email = serializers.EmailField()\n    message = serializers.CharField()\n\n    def save(self):\n        email = self.validated_data['email']\n        message = self.validated_data['message']\n        send_email(from=email, message=message)\n```\n\n----------------------------------------\n\nTITLE: Overriding save() Method in a Serializer\nDESCRIPTION: Demonstrates how to override the save() method directly in cases where create() and update() aren't semantically appropriate, such as in a contact form that sends an email.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ContactForm(serializers.Serializer):\n    email = serializers.EmailField()\n    message = serializers.CharField()\n\n    def save(self):\n        email = self.validated_data['email']\n        message = self.validated_data['message']\n        send_email(from=email, message=message)\n```\n\n----------------------------------------\n\nTITLE: Suboptimal Schema Customization Pattern\nDESCRIPTION: Example of a less desirable approach to customizing schema generation that couples schema logic with views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomSchema(AutoSchema):\n    \"\"\"\n    AutoSchema subclass using schema_extra_info on the view.\n    \"\"\"\n\n    ...\n\n\nclass CustomView(APIView):\n    schema = CustomSchema()\n    schema_extra_info = ...  # some extra info\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Django REST Framework\nDESCRIPTION: Commands to install MkDocs and build the documentation for Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocs\nmkdocs build\n```\n\n----------------------------------------\n\nTITLE: Overriding Serializer Data Property\nDESCRIPTION: Example of how to override the data property in a serializer to exclude None values from the output representation. Used to maintain backwards compatibility with pre-3.8.0 behavior.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef data(self):\n    \"\"\"\n    Drop `maybe_none` field if None.\n    \"\"\"\n    data = super().data\n    if 'maybe_none' in data and data['maybe_none'] is None:\n        del data['maybe_none']\n    return data\n```\n\n----------------------------------------\n\nTITLE: Configuring Django REST Framework in settings.py\nDESCRIPTION: This snippet shows how to add 'rest_framework' to INSTALLED_APPS and configure default permission classes in the Django settings file.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...  # Make sure to include the default installed apps here.\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Promotional Links with CSS\nDESCRIPTION: CSS styles for promotional list items and links, defining layout, dimensions, and appearance of promotional elements with background images.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.13-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding to_representation Method in Python\nDESCRIPTION: Demonstrates how to override the to_representation method to modify the serialization behavior, specifically converting the username to lowercase.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef to_representation(self, instance):\n    \"\"\"Convert `username` to lowercase.\"\"\"\n    ret = super().to_representation(instance)\n    ret['username'] = ret['username'].lower()\n    return ret\n```\n\n----------------------------------------\n\nTITLE: Adding API Documentation URLs in Django URLconf\nDESCRIPTION: Code snippet showing how to include the REST framework's interactive API documentation in a Django project's URLconf. It demonstrates importing the include_docs_urls function and setting up a path with title and description parameters.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.6-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.documentation import include_docs_urls\n\nAPI_TITLE = 'API title'\nAPI_DESCRIPTION = '...'\n\nurlpatterns = [\n    ...\n    path('docs/', include_docs_urls(title=API_TITLE, description=API_DESCRIPTION))\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Generator Implementation\nDESCRIPTION: Example of a custom SchemaGenerator subclass that adds Terms of Service information to the OpenAPI schema info object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TOSSchemaGenerator(SchemaGenerator):\n    def get_schema(self, *args, **kwargs):\n        schema = super().get_schema(*args, **kwargs)\n        schema[\"info\"][\"termsOfService\"] = \"https://example.com/tos.html\"\n        return schema\n```\n\n----------------------------------------\n\nTITLE: Cloning Django REST Framework from GitHub\nDESCRIPTION: Command for cloning the Django REST Framework repository from GitHub.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/index.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/encode/django-rest-framework\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body Stream in Django REST Framework\nDESCRIPTION: Demonstrates how to access a stream representing the content of the request body. This is typically not needed directly as REST framework's default request parsing behavior is usually sufficient.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrequest.stream\n```\n\n----------------------------------------\n\nTITLE: Creating a New Django Project for REST Framework Tutorial\nDESCRIPTION: Commands to create a new Django project named 'tutorial' and navigate to its directory.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\ndjango-admin startproject tutorial\ncd tutorial\n```\n\n----------------------------------------\n\nTITLE: Importing UserSerializer in Django Views\nDESCRIPTION: Import statement for the UserSerializer class in views.py. This makes the serializer available for the user-related views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.serializers import UserSerializer\n```\n\n----------------------------------------\n\nTITLE: Dynamic Serializer Selection Based on API Version\nDESCRIPTION: Example of how to switch between different serializer classes based on the API version requested by the client.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n```\n\n----------------------------------------\n\nTITLE: Initializing ModelSerializer with Context in Python\nDESCRIPTION: This snippet demonstrates how to provide extra context to a serializer when instantiating it. The context can be accessed within any serializer field logic using self.context.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nserializer = AccountSerializer(account, context={'request': request})\nserializer.data\n# {'id': 6, 'owner': 'denvercoder9', 'created': datetime.datetime(2013, 2, 12, 09, 44, 56, 678870), 'details': 'http://example.com/accounts/6/details'}\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions on a Class-Based View in Django REST Framework\nDESCRIPTION: This snippet demonstrates how to set permission classes on a per-view basis using class-based views, requiring authentication for access to the view's endpoints.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/permissions.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Entering Django Shell for Testing Serializers\nDESCRIPTION: Command to enter the Django shell for testing serialization functionality interactively.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Using Nested Serializer with source='*' for Coordinate Representation\nDESCRIPTION: Alternative approach using a nested serializer with source='*' to achieve the same nested representation but with built-in validation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/fields.md#2025-04-08_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass NestedCoordinateSerializer(serializers.Serializer):\n    x = serializers.IntegerField(source='x_coordinate')\n    y = serializers.IntegerField(source='y_coordinate')\n\n\nclass DataPointSerializer(serializers.ModelSerializer):\n    coordinates = NestedCoordinateSerializer(source='*')\n\n    class Meta:\n        model = DataPoint\n        fields = ['label', 'coordinates']\n```\n\n----------------------------------------\n\nTITLE: Testing API with httpie Commands for Listing All Snippets\nDESCRIPTION: Example httpie command to test the API by retrieving a list of all snippets. Shows the expected HTTP response with a list of snippet objects in JSON format.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nhttp GET http://127.0.0.1:8000/snippets/ --unsorted\n\nHTTP/1.1 200 OK\n...\n[\n    {\n        \"id\": 1,\n        \"title\": \"\",\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"linenos\": false,\n        \"language\": \"python\",\n        \"style\": \"friendly\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"\",\n        \"code\": \"print(\\\"hello, world\\\")\\n\",\n        \"linenos\": false,\n        \"language\": \"python\",\n        \"style\": \"friendly\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"\",\n        \"code\": \"print(\\\"hello, world\\\")\",\n        \"linenos\": false,\n        \"language\": \"python\",\n        \"style\": \"friendly\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Versioned API Response with Context\nDESCRIPTION: Shows how to include request context when using hyperlinked serializers with versioned APIs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get(self, request):\n    queryset = Booking.objects.all()\n    serializer = BookingsSerializer(queryset, many=True, context={'request': request})\n    return Response({'all_bookings': serializer.data})\n```\n\n----------------------------------------\n\nTITLE: Generating Static Schema Using Management Command\nDESCRIPTION: Django management command to generate a static OpenAPI schema file.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/schemas.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py generateschema --file openapi-schema.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Server Error Handler in Django REST Framework\nDESCRIPTION: Configuration for setting up a generic 500 server error handler that returns JSON responses.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/exceptions.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhandler500 = 'rest_framework.exceptions.server_error'\n```\n\n----------------------------------------\n\nTITLE: Testing API with httpie Command for Retrieving a Single Snippet\nDESCRIPTION: Example httpie command to test retrieving a specific snippet by its ID. Shows the expected HTTP response with the requested snippet object in JSON format.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nhttp GET http://127.0.0.1:8000/snippets/2/ --unsorted\n\nHTTP/1.1 200 OK\n...\n{\n    \"id\": 2,\n    \"title\": \"\",\n    \"code\": \"print(\\\"hello, world\\\")\\n\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF Token in RequestsClient\nDESCRIPTION: Demonstrates how to obtain and use CSRF token for POST requests when using SessionAuthentication\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient = RequestsClient()\n\n# Obtain a CSRF token.\nresponse = client.get('http://testserver/homepage/')\nassert response.status_code == 200\ncsrftoken = response.cookies['csrftoken']\n\n# Interact with the API.\nresponse = client.post('http://testserver/organisations/', json={\n    'name': 'MegaCorp',\n    'status': 'active'\n}, headers={'X-CSRFToken': csrftoken})\nassert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Custom View Versioning Configuration\nDESCRIPTION: Example of setting up versioning for a specific API view using QueryParameterVersioning.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pagination Response Format\nDESCRIPTION: Custom pagination class that modifies the default output to include next and previous links in a nested 'links' key structure.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPagination(pagination.PageNumberPagination):\n    def get_paginated_response(self, data):\n        return Response({\n            'links': {\n                'next': self.get_next_link(),\n                'previous': self.get_previous_link()\n            },\n            'count': self.page.paginator.count,\n            'results': data\n        })\n```\n\n----------------------------------------\n\nTITLE: Exception Handler Function Signature\nDESCRIPTION: Function signature for custom exception handling in Django REST Framework. Takes an exception and context parameter to generate custom error responses.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexception_handler(exc, context)\n```\n\n----------------------------------------\n\nTITLE: Defining Pytest Test Dependencies for Django REST Framework\nDESCRIPTION: This requirements file specifies the exact versions of test dependencies needed for Django REST Framework. It includes pytest as the main test runner, pytest-cov for coverage reporting, and pytest-django for Django test integration, along with version constraints to ensure compatibility.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/requirements/requirements-testing.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Pytest for running the tests.\npytest>=7.0.1,<8.0\npytest-cov>=4.0.0,<5.0\npytest-django>=4.5.2,<5.0\nimportlib-metadata<5.0\n# temporary pin of attrs\nattrs==22.1.0\n```\n\n----------------------------------------\n\nTITLE: URL Configuration for Path-based Versioning\nDESCRIPTION: Example of setting up URL patterns for path-based API versioning using regex patterns.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/versioning.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    re_path(\n        r'^(?P<version>(v1|v2))/bookings/$',\n        bookings_list,\n        name='bookings-list'\n    ),\n    re_path(\n        r'^(?P<version>(v1|v2))/bookings/(?P<pk>[0-9]+)/$',\n        bookings_detail,\n        name='bookings-detail'\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Character Set for Renderer in Django REST Framework\nDESCRIPTION: Demonstrates how to set a custom character set for a renderer class and handle encoding in the render method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass PlainTextRenderer(renderers.BaseRenderer):\n    media_type = 'text/plain'\n    format = 'txt'\n    charset = 'iso-8859-1'\n\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        return data.encode(self.charset)\n```\n\n----------------------------------------\n\nTITLE: Token Authentication with APIClient\nDESCRIPTION: Demonstrates how to set up token authentication using APIClient credentials method.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.test import APIClient\n\n# Include an appropriate `Authorization:` header on all requests.\ntoken = Token.objects.get(user__username='lauren')\nclient = APIClient()\nclient.credentials(HTTP_AUTHORIZATION='Token ' + token.key)\n```\n\n----------------------------------------\n\nTITLE: Binding ViewSet Methods to Views in Django REST Framework\nDESCRIPTION: Example of manually binding ViewSet methods to specific views without using a router. This approach gives more explicit control over URL configuration.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser_list = UserViewSet.as_view({'get': 'list'})\nuser_detail = UserViewSet.as_view({'get': 'retrieve'})\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Documenting API Views in Django REST Framework\nDESCRIPTION: Python code example showing how to create a self-documenting API view using docstrings with Markdown support. The docstring content will be rendered as the API description in the browsable API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AccountListView(views.APIView):\n    \"\"\"\n    Returns a list of all **active** accounts in the system.\n\n    For more details on how accounts are activated please [see here][ref].\n\n    [ref]: http://example.com/activating-accounts\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using RequestsClient for Integration Testing\nDESCRIPTION: Shows how to use RequestsClient for making HTTP requests to test the API as an external service would.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.test import RequestsClient\n\nclient = RequestsClient()\nresponse = client.get('http://testserver/users/')\nassert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Registering a ViewSet with DefaultRouter in Django REST Framework\nDESCRIPTION: Example of registering a ViewSet with DefaultRouter to automatically generate URL patterns. This is the preferred approach for most applications.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.views import UserViewSet\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='user')\nurlpatterns = router.urls\n```\n\n----------------------------------------\n\nTITLE: Customizing ListSerializer Initialization in Django REST Framework\nDESCRIPTION: Example of customizing the initialization of ListSerializer using the many_init class method to specify how child and parent classes should be instantiated when many=True is passed.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\ndef many_init(cls, *args, **kwargs):\n    # Instantiate the child serializer.\n    kwargs['child'] = cls()\n    # Instantiate the parent list serializer.\n    return CustomListSerializer(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Testing Status Codes in Django REST Framework\nDESCRIPTION: Shows how to use helper functions from the status module to test if a response status code falls within a specific category (e.g., success) in a Django REST Framework test case.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/status-codes.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nclass ExampleTestCase(APITestCase):\n    def test_url_root(self):\n        url = reverse('index')\n        response = self.client.get(url)\n        self.assertTrue(status.is_success(response.status_code))\n```\n\n----------------------------------------\n\nTITLE: Standard ViewSet Actions in Django REST Framework\nDESCRIPTION: An empty ViewSet demonstrating the standard actions that will be handled by a router class, including list, create, retrieve, update, partial_update, and destroy methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\"\n    Example empty viewset demonstrating the standard\n    actions that will be handled by a router class.\n\n    If you're using format suffixes, make sure to also include\n    the `format=None` keyword argument for each action.\n    \"\"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Adding Owner Field to SnippetSerializer in Django REST Framework\nDESCRIPTION: Adding a read-only field to display the username of the snippet owner in the serialized representation. This field is read-only to prevent modification of the owner through API requests.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nowner = serializers.ReadOnlyField(source='owner.username')\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Framework Pagination\nDESCRIPTION: Settings for enabling pagination in the REST Framework API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Permissions Based on ViewSet Action in Django REST Framework\nDESCRIPTION: Example of using the action attribute to conditionally apply different permission classes based on the current action being executed.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_permissions(self):\n    \"\"\"\n    Instantiates and returns the list of permissions that this view requires.\n    \"\"\"\n    if self.action == 'list':\n        permission_classes = [IsAuthenticated]\n    else:\n        permission_classes = [IsAdminUser]\n    return [permission() for permission in permission_classes]\n```\n\n----------------------------------------\n\nTITLE: Specifying Fields in ModelSerializer using Meta Options in Python\nDESCRIPTION: These examples show different ways to specify which fields should be included in a ModelSerializer using the fields and exclude options in the Meta class.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = ['id', 'account_name', 'users', 'created']\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = '__all__'\n\nclass AccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        exclude = ['users']\n```\n\n----------------------------------------\n\nTITLE: Implementing User and Group Serializers\nDESCRIPTION: Serializer classes for User and Group models using HyperlinkedModelSerializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/quickstart.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'groups']\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ['url', 'name']\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Multiple HTTP Methods in Django REST Framework\nDESCRIPTION: Example of using the @action decorator with multiple HTTP methods. This allows a single action endpoint to respond to different HTTP methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@action(detail=True, methods=['post', 'delete'])\ndef unset_password(self, request, pk=None):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Custom Field Validation in Django REST Framework\nDESCRIPTION: Example of implementing field-level validators and using them in a serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef multiple_of_ten(value):\n    if value % 10 != 0:\n        raise serializers.ValidationError('Not a multiple of ten')\n\nclass GameRecord(serializers.Serializer):\n    score = serializers.IntegerField(validators=[multiple_of_ten])\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Response Object in Django REST Framework\nDESCRIPTION: Shows how to use the Response object to render content based on client request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/2-requests-and-responses.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn Response(data)  # Renders to content type as requested by the client.\n```\n\n----------------------------------------\n\nTITLE: Using HTTPMethod Enum with Action Decorator in Django REST Framework\nDESCRIPTION: Example of using the HTTPMethod enum from the http module to define methods for an action, which is equivalent to using string method names.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom http import HTTPMethod\n\n@action(detail=True, methods=[HTTPMethod.POST, HTTPMethod.DELETE])\ndef unset_password(self, request, pk=None):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Requests with APIRequestFactory\nDESCRIPTION: Shows how to create requests with specific formats using the format argument.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/testing.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create a JSON POST request\nfactory = APIRequestFactory()\nrequest = factory.post('/notes/', {'title': 'new idea'}, format='json')\n```\n\n----------------------------------------\n\nTITLE: Implementing API Views with Django REST Framework Decorators\nDESCRIPTION: Demonstrates how to use the @api_view decorator to create function-based API views for listing and creating snippets.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/2-requests-and-responses.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    elif request.method == 'POST':\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n```\n\n----------------------------------------\n\nTITLE: Routing Additional HTTP Methods for Extra Actions in Django REST Framework\nDESCRIPTION: Example of consolidating multiple HTTP methods into a single route using the mapping attribute of the action decorator. This approach allows different methods to be handled by separate ViewSet methods.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@action(detail=True, methods=[\"put\"], name=\"Change Password\")\ndef password(self, request, pk=None):\n    \"\"\"Update the user's password.\"\"\"\n    ...\n\n\n@password.mapping.delete\ndef delete_password(self, request, pk=None):\n    \"\"\"Delete the user's password.\"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Django User Authentication Status in Python\nDESCRIPTION: Shows how to check if a user is authenticated in Django 1.10+. The authentication status is now accessed as a property instead of a method call on the user object.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nrequest.user.is_authenticated\n```\n\n----------------------------------------\n\nTITLE: Implementing Detail API View with Django REST Framework\nDESCRIPTION: Shows how to create a function-based API view for retrieving, updating, and deleting individual snippets using the @api_view decorator.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/2-requests-and-responses.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n```\n\n----------------------------------------\n\nTITLE: Applying Caching to Function-Based Views with @api_view Decorator\nDESCRIPTION: This snippet shows how to apply Django's cache utilities to REST Framework function-based views using the @api_view decorator. The example combines cache_page with vary_on_cookie to cache responses per user for 15 minutes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/caching.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_cookie\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n\n@cache_page(60 * 15)\n@vary_on_cookie\n@api_view([\"GET\"])\ndef get_user_list(request):\n    content = {\"user_feed\": request.user.get_user_feed()}\n    return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Customizing Lookup Value Patterns in ViewSets\nDESCRIPTION: Demonstrates how to restrict lookup value patterns in ViewSets by setting the lookup_value_regex attribute for regex-based routers or lookup_value_converter for path-based routers.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MyModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet):\n    lookup_field = 'my_model_id'\n    lookup_value_regex = '[0-9a-f]{32}'\n\nclass MyPathModelViewSet(mixins.RetrieveModelMixin, viewsets.GenericViewSet):\n    lookup_field = 'my_model_uuid'\n    lookup_value_converter = 'uuid'\n```\n\n----------------------------------------\n\nTITLE: URL Configuration for Class-Based Views\nDESCRIPTION: Configures URL patterns for the snippet list and detail views using class-based view routing in Django.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.SnippetList.as_view()),\n    path('snippets/<int:pk>/', views.SnippetDetail.as_view()),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Bad Request Handler in Django REST Framework\nDESCRIPTION: Configuration for setting up a generic 400 bad request handler that returns JSON responses.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/exceptions.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhandler400 = 'rest_framework.exceptions.bad_request'\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Override Middleware in Django\nDESCRIPTION: Python middleware class for Django that enables HTTP method overriding via the X-HTTP-Method-Override header. This allows clients to send a POST request but have it treated as another method like PUT or DELETE on the server.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/browser-enhancements.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMETHOD_OVERRIDE_HEADER = 'HTTP_X_HTTP_METHOD_OVERRIDE'\n\nclass MethodOverrideMiddleware:\n\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        if request.method == 'POST' and METHOD_OVERRIDE_HEADER in request.META:\n            request.method = request.META[METHOD_OVERRIDE_HEADER]\n        return self.get_response(request)\n```\n\n----------------------------------------\n\nTITLE: Generic Class-Based Views Implementation\nDESCRIPTION: Final implementation using generic class-based views, showing the most concise way to implement the snippet API views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n```\n\n----------------------------------------\n\nTITLE: Using format_suffix_patterns Function in Django REST Framework\nDESCRIPTION: Demonstrates how to use format_suffix_patterns to add format suffixes to URL patterns. The function takes a list of URL patterns and returns a new list with format suffix patterns appended to each URL, allowing endpoints like 'comments.json'.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/format-suffixes.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom blog import views\n\nurlpatterns = [\n    path('', views.apt_root),\n    path('comments/', views.comment_list),\n    path('comments/<int:pk>/', views.comment_detail)\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns, allowed=['json', 'html'])\n```\n\n----------------------------------------\n\nTITLE: DjangoModel Permissions Update in 3.7.0\nDESCRIPTION: Fix to DjangoModelPermissions to ensure user authentication before calling view's get_queryset() method. Changes order of HTTP method permissions and authentication checks.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDjangoModelPermissions.get_queryset() # Now checks authentication before execution\n```\n\n----------------------------------------\n\nTITLE: Basic Class-Based API Views Implementation in Django REST Framework\nDESCRIPTION: Implements basic list and detail views for snippets using APIView class. Handles GET and POST methods for listing/creating snippets, and GET/PUT/DELETE methods for retrieving/updating/deleting individual snippets.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    \"\"\"\n    List all snippets, or create a new snippet.\n    \"\"\"\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n```\n\n----------------------------------------\n\nTITLE: Adding Format Parameter to Function-Based Views in Django REST Framework\nDESCRIPTION: Shows how to implement the format parameter in a function-based view to handle different media types. The format parameter must be added to views when using format_suffix_patterns.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/format-suffixes.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api_view(['GET', 'POST'])\ndef comment_list(request, format=None):\n    # do stuff...\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Languages for Internationalization in Django\nDESCRIPTION: Example showing how to limit the supported languages in your Django REST framework application using Django's LANGUAGES setting.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.1-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLANGUAGES = [\n    ('de', _('German')),\n    ('en', _('English')),\n]\n```\n\n----------------------------------------\n\nTITLE: Detail View Implementation for Snippet Management\nDESCRIPTION: Implements detailed view handling for individual snippet instances with GET, PUT, and DELETE operations using class-based views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass SnippetDetail(APIView):\n    \"\"\"\n    Retrieve, update or delete a snippet instance.\n    \"\"\"\n    def get_object(self, pk):\n        try:\n            return Snippet.objects.get(pk=pk)\n        except Snippet.DoesNotExist:\n            raise Http404\n\n    def get(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    def put(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    def delete(self, request, pk, format=None):\n        snippet = self.get_object(pk)\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n```\n\n----------------------------------------\n\nTITLE: URL Configuration for Generic Views\nDESCRIPTION: Example of configuring URLs for generic views using the as_view() method with direct attribute passing.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/generic-views.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npath('users/', ListCreateAPIView.as_view(queryset=User.objects.all(), serializer_class=UserSerializer), name='user-list')\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Snippet API Views in Django\nDESCRIPTION: Creates URL patterns for the snippet list and detail views in the snippets app. Defines routes for accessing all snippets and specific snippets by ID.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.snippet_list),\n    path('snippets/<int:pk>/', views.snippet_detail),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Snippet API Views in Django\nDESCRIPTION: Creates URL patterns for the snippet list and detail views in the snippets app. Defines routes for accessing all snippets and specific snippets by ID.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.snippet_list),\n    path('snippets/<int:pk>/', views.snippet_detail),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding User Endpoints to URL Configuration in Django\nDESCRIPTION: URL patterns for the user list and detail views. These patterns define the API endpoints for accessing user data.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npath('users/', views.UserList.as_view()),\npath('users/<int:pk>/', views.UserDetail.as_view()),\n```\n\n----------------------------------------\n\nTITLE: Setting Link Header Pagination as Default\nDESCRIPTION: Configuration to use LinkHeaderPagination as the default pagination class with specified page size.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/pagination.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'my_project.apps.core.pagination.LinkHeaderPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in Django REST Framework\nDESCRIPTION: Demonstrates how to access the authenticated user information using the .user property. This typically returns an instance of django.contrib.auth.models.User, but the behavior depends on the authentication policy being used.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrequest.user\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Classes for Snippet Views\nDESCRIPTION: Configuring views to use IsAuthenticatedOrReadOnly permission. This ensures only authenticated users can create, update, or delete snippets, while anonymous users have read-only access.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npermission_classes = [permissions.IsAuthenticatedOrReadOnly]\n```\n\n----------------------------------------\n\nTITLE: XML Parser Configuration\nDESCRIPTION: Example of configuring XML parsing and rendering support using third-party package.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework_xml.parsers.XMLParser',\n    ],\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework_xml.renderers.XMLRenderer',\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Serializer with Exception Handling in Django REST Framework\nDESCRIPTION: Example showing how to validate a serializer with automatic exception raising using raise_exception flag.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/exceptions.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nserializer.is_valid(raise_exception=True)\n```\n\n----------------------------------------\n\nTITLE: Database Reset and Migration Commands for Django\nDESCRIPTION: Shell commands to reset the database and create migrations after modifying the model. This recreates the database schema to include the new fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -f db.sqlite3\nrm -r snippets/migrations\npython manage.py makemigrations snippets\npython manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Style for Related Field in Django REST Framework\nDESCRIPTION: Shows how to configure a SlugRelatedField to use a plain input field instead of a select dropdown in the HTML form using the style parameter.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nassigned_to = serializers.SlugRelatedField(\n   queryset=User.objects.all(),\n   slug_field='username',\n   style={'base_template': 'input.html'}\n)\n```\n\n----------------------------------------\n\nTITLE: Class-Based View Authentication Configuration\nDESCRIPTION: Implementation of authentication and permission classes in a class-based API view with session and basic authentication.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/authentication.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.authentication import SessionAuthentication, BasicAuthentication\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nclass ExampleView(APIView):\n    authentication_classes = [SessionAuthentication, BasicAuthentication]\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request, format=None):\n        content = {\n            'user': str(request.user),\n            'auth': str(request.auth),\n        }\n        return Response(content)\n```\n\n----------------------------------------\n\nTITLE: Authenticated API POST Request\nDESCRIPTION: Example of an authenticated HTTP POST request using Basic Authentication to create a code snippet with successful response.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nhttp -a admin:password123 POST http://127.0.0.1:8000/snippets/ code=\"print(789)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"owner\": \"admin\",\n    \"title\": \"foo\",\n    \"code\": \"print(789)\",\n    \"linenos\": false,\n    \"language\": \"python\",\n    \"style\": \"friendly\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing djangorestframework-jsonp with pip\nDESCRIPTION: Command to install the djangorestframework-jsonp package using pip.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install djangorestframework-jsonp\n```\n\n----------------------------------------\n\nTITLE: Adding Clear Div for Layout in HTML\nDESCRIPTION: HTML div element with clear style and padding to create spacing between content sections on the page.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/kickstarter-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"clear: both; padding-bottom: 40px;\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Framework Global Settings\nDESCRIPTION: Configuration example for setting up global permissions for REST Framework in a Django project's settings.py file.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/index.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing drf-excel with pip\nDESCRIPTION: Command to install the drf-excel package using pip for Excel (XLSX) rendering support.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/renderers.md#2025-04-08_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install drf-excel\n```\n\n----------------------------------------\n\nTITLE: Binding ViewSets to URLs in Django REST Framework\nDESCRIPTION: This snippet shows how to explicitly bind ViewSet classes to a set of concrete views in the URLs configuration.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/6-viewsets-and-routers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import renderers\n\nfrom snippets.views import api_root, SnippetViewSet, UserViewSet\n\nsnippet_list = SnippetViewSet.as_view({\n    'get': 'list',\n    'post': 'create'\n})\nsnippet_detail = SnippetViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nsnippet_highlight = SnippetViewSet.as_view({\n    'get': 'highlight'\n}, renderer_classes=[renderers.StaticHTMLRenderer])\nuser_list = UserViewSet.as_view({\n    'get': 'list'\n})\nuser_detail = UserViewSet.as_view({\n    'get': 'retrieve'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework using pip\nDESCRIPTION: Commands for installing Django REST Framework and optional dependencies using pip package manager.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering support\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Type in Django REST Framework\nDESCRIPTION: Shows how to access the media type of the HTTP request's body. This property is preferred over using request.META.get('HTTP_CONTENT_TYPE') as it provides transparent support for browser-based non-form content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/requests.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrequest.content_type\n```\n\n----------------------------------------\n\nTITLE: Defining a ListSerializer for Multiple Inputs\nDESCRIPTION: Example of creating a ListSerializer class 'MultipleUserSerializer' that accepts multiple user inputs using a child UserSerializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass MultipleUserSerializer(ListSerializer):\n    child = UserSerializer()\n```\n\n----------------------------------------\n\nTITLE: Using Status Codes in Django REST Framework Responses\nDESCRIPTION: Demonstrates how to use named status code constants from the status module in a Django REST Framework view response. This approach improves code readability and maintainability.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/status-codes.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import status\nfrom rest_framework.response import Response\n\ndef empty_view(self):\n    content = {'please move along': 'nothing to see here'}\n    return Response(content, status=status.HTTP_404_NOT_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Classes with Function-Based Views\nDESCRIPTION: Example of using parser_classes decorator with function-based views to specify JSON parsing.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/parsers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.decorators import api_view\nfrom rest_framework.decorators import parser_classes\nfrom rest_framework.parsers import JSONParser\n\n@api_view(['POST'])\n@parser_classes([JSONParser])\ndef example_view(request, format=None):\n    \"\"\"\n    A view that can accept POST requests with JSON content.\n    \"\"\"\n    return Response({'received data': request.data})\n```\n\n----------------------------------------\n\nTITLE: Using SerializerMethodField with Default Method Name\nDESCRIPTION: Demonstrates how to use SerializerMethodField without specifying a method name, relying on the default naming convention.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.Serializer):\n    # `method_name='get_billing_details'` by default.\n    billing_details = serializers.SerializerMethodField()\n\n    def get_billing_details(self, account):\n        return calculate_billing(account)\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Renderer in Django REST framework Settings\nDESCRIPTION: Example showing how to configure the XML renderer after installing the separate djangorestframework-xml package. This demonstrates the new approach for non-core renderers.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.1-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n        'rest_framework_xml.renderers.XMLRenderer'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Field Definition in HyperlinkedModelSerializer\nDESCRIPTION: Example of explicitly defining URL fields in a HyperlinkedModelSerializer instead of using extra_kwargs. This approach gives more control over field parameters like view_name and lookup_field.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nclass AccountSerializer(serializers.HyperlinkedModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='accounts',\n        lookup_field='slug'\n    )\n    users = serializers.HyperlinkedRelatedField(\n        view_name='user-detail',\n        lookup_field='username',\n        many=True,\n        read_only=True\n    )\n\n    class Meta:\n        model = Account\n        fields = ['url', 'account_name', 'users', 'created']\n```\n\n----------------------------------------\n\nTITLE: Using UniqueTogetherValidator in Serializer Meta\nDESCRIPTION: Demonstrates how to use UniqueTogetherValidator to ensure uniqueness across multiple fields in a serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass RaceResultSerializer(serializers.Serializer):\n    category = serializers.ChoiceField(['5k', '10k'])\n    position = serializers.IntegerField()\n    name = serializers.CharField(max_length=100)\n\n    class Meta:\n        validators = [UniqueTogetherValidator(\n            queryset=RaceResult.objects.all(),\n            fields=['category', 'position']\n        )]\n```\n\n----------------------------------------\n\nTITLE: Styling Promo Links with CSS\nDESCRIPTION: CSS styles for formatting promotional links in a grid layout with background images and text styling.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.11-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Silver Sponsors List in HTML\nDESCRIPTION: HTML code that creates a list of silver sponsors with their logos and links to their websites. The list uses unordered list elements with anchor tags that have background images set via inline styles.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/kickstarter-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ul class=\"sponsor silver\">\n<li><a href=\"https://www.imtapps.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-imt_computer_services.png);\">IMT Computer Services</a></li>\n<li><a href=\"https://wildfish.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-wildfish.png);\">Wildfish</a></li>\n<li><a href=\"https://www.thermondo.de/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-thermondo-gmbh.png);\">Thermondo GmbH</a></li>\n<li><a href=\"https://providenz.fr/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-providenz.png);\">Providenz</a></li>\n<li><a href=\"https://www.alwaysdata.com\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-alwaysdata.png);\">alwaysdata.com</a></li>\n<li><a href=\"https://www.freshrelevance.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-triggered_messaging.png);\">Triggered Messaging</a></li>\n<li><a href=\"https://www.ipushpull.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-ipushpull.png);\">PushPull Technology Ltd</a></li>\n<li><a href=\"http://www.transcode.de/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-transcode.png);\">Transcode</a></li>\n<li><a href=\"https://garfo.io/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-garfo.png);\">Garfo</a></li>\n<li><a href=\"https://goshippo.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-shippo.png);\">Shippo</a></li>\n<li><a href=\"http://www.gizmag.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-gizmag.png);\">Gizmag</a></li>\n<li><a href=\"https://www.tivix.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-tivix.png);\">Tivix</a></li>\n<li><a href=\"https://www.safaribooksonline.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-safari.png);\">Safari</a></li>\n<li><a href=\"http://brightloop.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-brightloop.png);\">Bright Loop</a></li>\n<li><a href=\"http://www.aba-systems.com.au/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-aba.png);\">ABA Systems</a></li>\n<li><a href=\"http://beefarm.ru/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-beefarm.png);\">beefarm.ru</a></li>\n<li><a href=\"http://www.vzzual.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-vzzual.png);\">Vzzual.com</a></li>\n<li><a href=\"http://infinite-code.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-infinite_code.png);\">Infinite Code</a></li>\n<li><a href=\"https://crosswordtracker.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-crosswordtracker.png);\">Crossword Tracker</a></li>\n<li><a href=\"https://www.pkgfarm.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-pkgfarm.png);\">PkgFarm</a></li>\n<li><a href=\"http://life.tl/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-life_the_game.png);\">Life. The Game.</a></li>\n<li><a href=\"http://blimp.io/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-blimp.png);\">Blimp</a></li>\n<li><a href=\"https://www.pathwright.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-pathwright.png);\">Pathwright</a></li>\n<li><a href=\"https://fluxility.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-fluxility.png);\">Fluxility</a></li>\n<li><a href=\"https://teonite.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-teonite.png);\">Teonite</a></li>\n<li><a href=\"https://trackmaven.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-trackmaven.png);\">TrackMaven</a></li>\n<li><a href=\"https://www.phurba.net/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-phurba.png);\">Phurba</a></li>\n<li><a href=\"https://www.nephila.it/it/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-nephila.png);\">Nephila</a></li>\n<li><a href=\"http://www.aditium.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-aditium.png);\">Aditium</a></li>\n<li><a href=\"https://www.eyesopen.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-openeye.png);\">OpenEye Scientific Software</a></li>\n<li><a href=\"https://holvi.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-holvi.png);\">Holvi</a></li>\n<li><a href=\"https://www.cantemo.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-cantemo.gif);\">Cantemo</a></li>\n<li><a href=\"https://www.makespace.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-makespace.png);\">MakeSpace</a></li>\n<li><a href=\"https://www.ax-semantics.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-ax_semantics.png);\">AX Semantics</a></li>\n<li><a href=\"http://istrategylabs.com/\" rel=\"nofollow\" style=\"background-image:url(../../img/sponsors/3-isl.png);\">ISL</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating a ModelSerializer with Method Field\nDESCRIPTION: Demonstration of including a model method 'expiry_date' as a field in a ModelSerializer class for the Invitation model.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass InvitationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Invitation\n        fields = ['to_email', 'message', 'expiry_date']\n```\n\n----------------------------------------\n\nTITLE: Styling Promo Links in CSS\nDESCRIPTION: CSS code for styling promotional links with specific dimensions, layout, and background properties. It sets the appearance for list items and anchor tags within a promo section.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.15-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Renderer Classes Configuration\nDESCRIPTION: Shows the default configuration for renderer classes that determine how responses are formatted.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[\n    'rest_framework.renderers.JSONRenderer',\n    'rest_framework.renderers.BrowsableAPIRenderer',\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Write BaseSerializer\nDESCRIPTION: Implementation of a read-write 'HighScoreSerializer' using BaseSerializer with methods for data validation, representation, and object creation.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass HighScoreSerializer(serializers.BaseSerializer):\n    def to_internal_value(self, data):\n        score = data.get('score')\n        player_name = data.get('player_name')\n\n        # Perform the data validation.\n        if not score:\n            raise ValidationError({\n                'score': 'This field is required.'\n            })\n        if not player_name:\n            raise ValidationError({\n                'player_name': 'This field is required.'\n            })\n        if len(player_name) > 10:\n            raise ValidationError({\n                'player_name': 'May not be more than 10 characters.'\n            })\n\n        # Return the validated values. This will be available as\n        # the `.validated_data` property.\n        return {\n            'score': int(score),\n            'player_name': player_name\n        }\n\n    def to_representation(self, obj):\n        return {\n            'score': obj.score,\n            'player_name': obj.player_name\n        }\n\n    def create(self, validated_data):\n        return HighScore.objects.create(**validated_data)\n```\n\n----------------------------------------\n\nTITLE: URL Configuration with Schema View - Python\nDESCRIPTION: Example showing how to include a schema view in URL configuration before router URLs\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.5-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\nfrom my_project.routers import router\n\nschema_view = get_schema_view(title='Example API')\n\nurlpatterns = [\n    path('', schema_view),\n    path('', include(router.urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Overridden ViewSet Configuration in Django REST Framework\nDESCRIPTION: Example of using the @action decorator with overridden configurations such as permission_classes. This allows for different settings on a per-action basis.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@action(detail=True, methods=['post'], permission_classes=[IsAdminOrIsSelf])\ndef set_password(self, request, pk=None):\n   ...\n```\n\n----------------------------------------\n\nTITLE: Using ChoiceField with Flat List of Choices\nDESCRIPTION: Shows how to use ChoiceField with a simple list of choices instead of name-value pairs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncolor = ChoiceField(choices=['red', 'green', 'blue'])\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Schema View in Django URLs\nDESCRIPTION: Example of adding an OpenAPI schema view to the URL configuration. This code demonstrates how to create a schema view using the get_schema_view function with JSONOpenAPIRenderer for generating OpenAPI JSON output.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.9-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\nfrom rest_framework.renderers import JSONOpenAPIRenderer\nfrom django.urls import path\n\nschema_view = get_schema_view(\n    title=\"Server Monitoring API\",\n    url=\"https://www.example.org/api/\",\n    renderer_classes=[JSONOpenAPIRenderer],\n)\n\nurlpatterns = [path(\"schema.json\", schema_view), ...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Relations Models in Django\nDESCRIPTION: Model definitions for implementing generic relations using ContentType framework, showing TaggedItem, Bookmark, and Note models.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/relations.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass TaggedItem(models.Model):\n    \"\"\"\n    Tags arbitrary model instances using a generic relation.\n\n    See: https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/\n    \"\"\"\n    tag_name = models.SlugField()\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    tagged_object = GenericForeignKey('content_type', 'object_id')\n\n    def __str__(self):\n        return self.tag_name\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Bookmark(models.Model):\n    \"\"\"\n    A bookmark consists of a URL, and 0 or more descriptive tags.\n    \"\"\"\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\n\nclass Note(models.Model):\n    \"\"\"\n    A note consists of some text, and 0 or more descriptive tags.\n    \"\"\"\n    text = models.CharField(max_length=1000)\n    tags = GenericRelation(TaggedItem)\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Representation in Serializer\nDESCRIPTION: Demonstrates how to override get_attribute and to_representation methods to customize field output in a serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef get_attribute(self, obj):\n    # Pass the entire object through to `to_representation()`,\n    # instead of the standard attribute lookup.\n    return obj\n\ndef to_representation(self, value):\n    return value.__class__.__name__\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Schema with Django Management Command\nDESCRIPTION: Example of using the generateschema management command to output an OpenAPI schema in YAML format. The command redirects the schema output to a file named schema.yml.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.9-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python manage.py generateschema --format openapi > schema.yml\n```\n\n----------------------------------------\n\nTITLE: Enabling Locale Middleware for Per-Request Language Support\nDESCRIPTION: Add Django's LocaleMiddleware to enable per-request language selection based on Accept-Language headers\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/internationalization.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE = [\n    ...,\n    'django.middleware.locale.LocaleMiddleware'\n]\n```\n\n----------------------------------------\n\nTITLE: Using Validated Data in DRF 3.0 Serializers\nDESCRIPTION: Shows the new pattern for accessing validated data and saving objects with additional context, replacing the old .object attribute usage.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.0-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif serializer.is_valid():\n    name = serializer.validated_data['name']  # Inspect validated field data.\n    logging.info('Creating ticket \"%s\"' % name)\n    serializer.save(user=request.user)  # Include the user when saving.\n```\n\n----------------------------------------\n\nTITLE: Cloning Django REST Framework Repository in Git\nDESCRIPTION: Command to clone a forked repository of Django REST Framework. Replace 'YOUR-USERNAME' with your GitHub username.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/django-rest-framework\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Django REST Framework\nDESCRIPTION: Demonstrates how to set HTTP headers on a Response object using standard dictionary-style syntax. This example shows setting a Cache-Control header to no-cache.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/responses.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresponse = Response()\nresponse['Cache-Control'] = 'no-cache'\n```\n\n----------------------------------------\n\nTITLE: Adding LocaleMiddleware for Per-Request Language Support in Django\nDESCRIPTION: Configuration example showing how to add Django's LocaleMiddleware to enable per-request language handling based on the Accept-Language header.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.1-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMIDDLEWARE_CLASSES = [\n    ...\n    'django.middleware.locale.LocaleMiddleware'\n]\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Concise Output in Django REST Framework\nDESCRIPTION: Command to run tests with a more concise output style.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./runtests.py -q\n```\n\n----------------------------------------\n\nTITLE: Including Snippet App URLs in Root URLconf in Django\nDESCRIPTION: Configures the root URL configuration to include the URLs from the snippets app, making the API endpoints accessible from the project's base URL.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('', include('snippets.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminRenderer in Django REST Framework Settings\nDESCRIPTION: Configuration snippet showing how to add the AdminRenderer to the renderer classes in Django REST framework settings. Includes pagination settings that work well with the AdminRenderer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.2-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.AdminRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer'\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 100\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Case in Django REST Framework\nDESCRIPTION: Command to run tests for a specific test case.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./runtests.py MyTestCase\n```\n\n----------------------------------------\n\nTITLE: Using URL Name Attribute with reverse_action in Django Rest Framework\nDESCRIPTION: An alternative approach to reversing action URLs using the url_name attribute set by the @action decorator. This demonstrates accessing the decorator-assigned URL name directly.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/viewsets.md#2025-04-08_snippet_12\n\nLANGUAGE: pycon\nCODE:\n```\n>>> view.reverse_action(view.set_password.url_name, args=['1'])\n'http://localhost:8000/api/users/1/set_password'\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelSerializer in Django REST Framework 3.3\nDESCRIPTION: This code snippet shows the new requirement for ModelSerializer and HyperlinkedModelSerializer to include either 'fields' or 'exclude' options. The 'fields = '__all__'' shortcut is also demonstrated as an alternative.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.3-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfields = '__all__'\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Method in Django REST Framework\nDESCRIPTION: Commands to run tests for a specific test method, showing both full and short forms.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./runtests.py MyTestCase.test_this_method\n./runtests.py test_this_method\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Permission Class in Django Views\nDESCRIPTION: Import statement for the custom IsOwnerOrReadOnly permission class. This makes the custom permission available for use in the views.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom snippets.permissions import IsOwnerOrReadOnly\n```\n\n----------------------------------------\n\nTITLE: Styling Promo Links - CSS\nDESCRIPTION: CSS styles for promotional links section, defining layout and appearance of sponsor logos and links\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.5-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Multiple Environments with Tox\nDESCRIPTION: Command to run tests against all supported versions of Python and Django using Tox.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Default Parser Classes Configuration\nDESCRIPTION: Shows the default configuration for parser classes that handle incoming request data parsing.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/settings.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[\n    'rest_framework.parsers.JSONParser',\n    'rest_framework.parsers.FormParser',\n    'rest_framework.parsers.MultiPartParser'\n]\n```\n\n----------------------------------------\n\nTITLE: Styling Promotional Links in CSS\nDESCRIPTION: CSS styles for formatting promotional links with custom backgrounds and layout.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.7-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally for Django REST Framework\nDESCRIPTION: Command to build the documentation and open a preview in a browser window using MkDocs.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/contributing.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleRouter and Registering ViewSets in Django REST Framework\nDESCRIPTION: Shows how to create a router instance, register viewsets with URL prefixes, and use the generated URL patterns. This basic setup automatically creates list and detail endpoints for each registered viewset.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\nurlpatterns = router.urls\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleRouter and Registering ViewSets in Django REST Framework\nDESCRIPTION: Shows how to create a router instance, register viewsets with URL prefixes, and use the generated URL patterns. This basic setup automatically creates list and detail endpoints for each registered viewset.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/routers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import routers\n\nrouter = routers.SimpleRouter()\nrouter.register(r'users', UserViewSet)\nrouter.register(r'accounts', AccountViewSet)\nurlpatterns = router.urls\n```\n\n----------------------------------------\n\nTITLE: Styling Promo Elements with CSS\nDESCRIPTION: CSS styling for promotional elements, defining the appearance of list items and their anchor links. The styles set dimensions, alignment, background properties, and typography for promotional content.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.8-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.promo li a {\n    float: left;\n    width: 130px;\n    height: 20px;\n    text-align: center;\n    margin: 10px 30px;\n    padding: 150px 0 0 0;\n    background-position: 0 50%;\n    background-size: 130px auto;\n    background-repeat: no-repeat;\n    font-size: 120%;\n    color: black;\n}\n.promo li {\n    list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Funding Page Redirection Script\nDESCRIPTION: JavaScript code that redirects users from www.django-rest-framework.org to the funding subdomain when accessing funding-related pages.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/funding.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (window.location.hostname == \"www.django-rest-framework.org\") {\n    window.location.replace(\"https://fund.django-rest-framework.org/topics/funding/\");\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin-Based Detail View Implementation\nDESCRIPTION: Implements the snippet detail view using mixins for retrieve, update, and delete operations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/3-class-based-views.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass SnippetDetail(mixins.RetrieveModelMixin,\n                    mixins.UpdateModelMixin,\n                    mixins.DestroyModelMixin,\n                    generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n\n    def put(self, request, *args, **kwargs):\n        return self.update(request, *args, **kwargs)\n\n    def delete(self, request, *args, **kwargs):\n        return self.destroy(request, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Performing Create Operation in Django REST Framework Views\nDESCRIPTION: Example view method showing how to pass the value of read_only fields when calling save() in a Django REST Framework view. This pattern allows maintaining behavior for read_only fields with default values.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.8-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n```\n\n----------------------------------------\n\nTITLE: Installing Transifex Client with pip\nDESCRIPTION: Command to install the official Transifex client using pip. This client is used to manage translations for Django REST Framework.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/project-management.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install transifex-client\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns with Format Suffixes in Django REST Framework\nDESCRIPTION: Demonstrates how to set up URL patterns with format suffixes using format_suffix_patterns for flexible content type handling.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/2-requests-and-responses.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    path('snippets/', views.snippet_list),\n    path('snippets/<int:pk>/', views.snippet_detail),\n]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n\n----------------------------------------\n\nTITLE: Validating OpenAPI Schema with API Star\nDESCRIPTION: Example of using the API Star command line tool to validate an OpenAPI schema. The command checks if the schema.json file is a valid OpenAPI schema.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.9-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ apistar validate --path schema.json --format openapi\n✓ Valid OpenAPI schema.\n```\n\n----------------------------------------\n\nTITLE: Transifex Configuration File Example\nDESCRIPTION: Example content for the ~/.transifexrc file, which contains credentials for accessing the Transifex service. This file is required to use the Transifex client for managing translations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/project-management.md#2025-04-08_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[https://www.transifex.com]\nusername = ***\ntoken = ***\npassword = ***\nhostname = https://www.transifex.com\n```\n\n----------------------------------------\n\nTITLE: Using format_suffix_patterns with i18n_patterns in Django REST Framework\nDESCRIPTION: Shows the correct way to combine format_suffix_patterns with Django's i18n_patterns function. The i18n_patterns function should be applied as the outermost function.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/format-suffixes.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nurlpatterns = [\n    …\n]\n\nurlpatterns = i18n_patterns(\n    format_suffix_patterns(urlpatterns, allowed=['json', 'html'])\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAPI Schema in Django URLs Configuration\nDESCRIPTION: This snippet demonstrates how to add an OpenAPI schema endpoint to a Django project using the get_schema_view() helper function in the URLs configuration.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.10-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework.schemas import get_schema_view\n\nurlpatterns = [\n    # ...\n    # Use the `get_schema_view()` helper to add a `SchemaView` to project URLs.\n    #   * `title` and `description` parameters are passed to `SchemaGenerator`.\n    #   * Provide view name for use with `reverse()`.\n    path(\n        \"openapi\",\n        get_schema_view(title=\"Your Project\", description=\"API for all things …\"),\n        name=\"openapi-schema\",\n    ),\n    # ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST Framework via pip\nDESCRIPTION: Commands to upgrade Django REST Framework to the latest version and check currently installed version using pip package manager.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U djangorestframework\n```\n\nLANGUAGE: bash\nCODE:\n```\npip show djangorestframework\n```\n\n----------------------------------------\n\nTITLE: Filtering Purchases for Current User in Django REST Framework\nDESCRIPTION: Demonstrates how to override the get_queryset() method to filter results for the currently authenticated user. This allows you to return only purchase records that belong to the user making the request.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/filtering.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp.models import Purchase\nfrom myapp.serializers import PurchaseSerializer\nfrom rest_framework import generics\n\nclass PurchaseList(generics.ListAPIView):\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        \"\"\"\n        This view should return a list of all the purchases\n        for the currently authenticated user.\n        \"\"\"\n        user = self.request.user\n        return Purchase.objects.filter(purchaser=user)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Default with Context in Python\nDESCRIPTION: Example of implementing a custom default value generator that requires context in Django REST Framework, using the new 'requires_context' attribute and '__call__' method signature.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.11-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomDefault:\n    requires_context = True\n\n    def __call__(self, serializer_field):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Linking GitHub Issues in Markdown\nDESCRIPTION: This snippet demonstrates how to create reference-style links in Markdown for GitHub issues. Each link is defined with a shortcode and the corresponding issue URL.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n[gh5655]: https://github.com/encode/django-rest-framework/issues/5655\n[gh5713]: https://github.com/encode/django-rest-framework/issues/5713\n[gh5711]: https://github.com/encode/django-rest-framework/issues/5711\n[gh5704]: https://github.com/encode/django-rest-framework/issues/5704\n[gh5854]: https://github.com/encode/django-rest-framework/issues/5854\n[gh5846]: https://github.com/encode/django-rest-framework/issues/5846\n[gh5891]: https://github.com/encode/django-rest-framework/issues/5891\n[gh5849]: https://github.com/encode/django-rest-framework/issues/5849\n[gh5880]: https://github.com/encode/django-rest-framework/issues/5880\n[gh5843]: https://github.com/encode/django-rest-framework/issues/5843\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Django REST Framework Tutorial\nDESCRIPTION: Commands to install Django, Django REST Framework, and Pygments (for code highlighting) within the virtual environment.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install django\npip install djangorestframework\npip install pygments  # We'll be using this for the code highlighting\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Schema Tags in Django REST Framework\nDESCRIPTION: Example showing how to override default OpenAPI schema tags for a view using the AutoSchema class. Tags are used to group related API operations.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.12-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyOrders(APIView):\n    schema = AutoSchema(tags=[\"users\", \"orders\"])\n    ...\n```\n\n----------------------------------------\n\nTITLE: Organizing GitHub Issues by Version in Markdown Comments\nDESCRIPTION: This snippet shows how to use HTML comments in Markdown to organize GitHub issue links by version number. This helps in categorizing and referencing issues specific to certain releases.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- 3.8.1 -->\n[gh5915]: https://github.com/encode/django-rest-framework/issues/5915\n\n<!-- 3.8.2 -->\n[gh5922]: https://github.com/encode/django-rest-framework/issues/5922\n[gh5921]: https://github.com/encode/django-rest-framework/issues/5921\n[gh5920]: https://github.com/encode/django-rest-framework/issues/5920\n\n<!-- 3.9.0 -->\n[gh6109]: https://github.com/encode/django-rest-framework/issues/6109\n[gh6141]: https://github.com/encode/django-rest-framework/issues/6141\n[gh6113]: https://github.com/encode/django-rest-framework/issues/6113\n[gh6112]: https://github.com/encode/django-rest-framework/issues/6112\n```\n\n----------------------------------------\n\nTITLE: Inspecting ModelSerializer in Python Django Shell\nDESCRIPTION: This snippet demonstrates how to inspect a ModelSerializer in the Django shell. It shows how to import the serializer, instantiate it, and print its representation to see the automatically generated fields.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/api-guide/serializers.md#2025-04-08_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from myapp.serializers import AccountSerializer\n>>> serializer = AccountSerializer()\n>>> print(repr(serializer))\nAccountSerializer():\n    id = IntegerField(label='ID', read_only=True)\n    name = CharField(allow_blank=True, max_length=100, required=False)\n    owner = PrimaryKeyRelatedField(queryset=User.objects.all())\n```\n\n----------------------------------------\n\nTITLE: Setting Component Names in OpenAPI Schema\nDESCRIPTION: Demonstrates how to customize the component name used in OpenAPI schema generation for a view. This affects how the schema references request and response objects.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.12-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyOrders(APIView):\n    schema = AutoSchema(component_name=\"OrderDetails\")\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Swagger UI in Django\nDESCRIPTION: Python code snippet for configuring URL patterns to serve the Swagger UI template in a Django project. Routes a TemplateView to display the Swagger UI interface with the OpenAPI schema URL provided in the context.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/documenting-your-api.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    # ...\n    # Route TemplateView to serve Swagger UI template.\n    #   * Provide `extra_context` with view name of `SchemaView`.\n    path(\n        \"swagger-ui/\",\n        TemplateView.as_view(\n            template_name=\"swagger-ui.html\",\n            extra_context={\"schema_url\": \"openapi-schema\"},\n        ),\n        name=\"swagger-ui\",\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Serializer Field Usage Example\nDESCRIPTION: Example showing the deprecated way of using positional arguments with ListField in Django REST Framework serializers.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/3.13-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\naliases = serializers.ListField(serializers.CharField())\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Nested Serializer\nDESCRIPTION: Sample JSON output showing the structure of serialized data from the nested ToDo list serializer, demonstrating how the one-to-many relationship is represented.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/topics/writable-nested-serializers.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    'title': 'Leaving party preparations',\n    'items': [\n        {'text': 'Compile playlist', 'is_completed': True},\n        {'text': 'Send invites', 'is_completed': False},\n        {'text': 'Clean house', 'is_completed': False}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultRouter in Django REST Framework\nDESCRIPTION: Demonstrates how to pass additional arguments when initializing a DefaultRouter in Django REST Framework. The root_renderers argument allows specifying custom renderers for the API root view.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nDefaultRouter(root_renderers=...)\n```\n\n----------------------------------------\n\nTITLE: Creating a Django App for the REST API\nDESCRIPTION: Command to create a new Django app named 'snippets' that will be used to implement the Web API.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py startapp snippets\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Query Parameters in Django Pagination\nDESCRIPTION: Demonstrates how to handle empty query parameters when paginating results in Django REST Framework. Empty query params should not be stripped when paginating.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Don't strip empty query params when paginating.\n```\n\n----------------------------------------\n\nTITLE: Deserializing Data to a Model Instance in Django REST Framework\nDESCRIPTION: Code demonstrating how to validate parsed data and convert it back to a model instance using the serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nserializer = SnippetSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# {'title': '', 'code': 'print(\"hello, world\")', 'linenos': False, 'language': 'python', 'style': 'friendly'}\nserializer.save()\n# <Snippet: Snippet object>\n```\n\n----------------------------------------\n\nTITLE: Markdown Issue Links for Django REST Framework\nDESCRIPTION: Markdown formatted reference links to GitHub issues, organized by version numbers in HTML comments\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[gh4118]: https://github.com/encode/django-rest-framework/issues/4118\n[gh4146]: https://github.com/encode/django-rest-framework/issues/4146\n<!-- Additional links omitted for brevity -->\n```\n\n----------------------------------------\n\nTITLE: Serializing Multiple Model Instances with Django REST Framework\nDESCRIPTION: Example showing how to serialize a queryset of multiple Snippet instances by adding the many=True flag to the serializer.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nserializer = SnippetSerializer(Snippet.objects.all(), many=True)\nserializer.data\n# [{'id': 1, 'title': '', 'code': 'foo = \"bar\"\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'}, {'id': 2, 'title': '', 'code': 'print(\"hello, world\")\\n', 'linenos': False, 'language': 'python', 'style': 'friendly'}, {'id': 3, 'title': '', 'code': 'print(\"hello, world\")', 'linenos': False, 'language': 'python', 'style': 'friendly'}]\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Class Implementation\nDESCRIPTION: Authentication function update to include request object when calling Django's authenticate function.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nauthenticate(request=request)\n```\n\n----------------------------------------\n\nTITLE: Implementing API Detail View for Individual Code Snippets in Django\nDESCRIPTION: A view function that handles GET, PUT, and DELETE requests for a specific snippet by ID. Provides functionality to retrieve, update, or delete individual code snippets with appropriate status codes.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/1-serialization.md#2025-04-08_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@csrf_exempt\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return HttpResponse(status=404)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return JsonResponse(serializer.data)\n\n    elif request.method == 'PUT':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(snippet, data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data)\n        return JsonResponse(serializer.errors, status=400)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return HttpResponse(status=204)\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Field Options in Django REST Framework\nDESCRIPTION: Shows how to configure a DecimalField in Django REST Framework serializers. The max_digits parameter can be set to None to allow any number of digits.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/release-notes.md#2025-04-08_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nDecimalField(max_digits=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Method with Pygments Highlighting in Django Model\nDESCRIPTION: Overriding the save method to automatically generate highlighted HTML representation of code snippets using Pygments. This method runs before saving the snippet to the database.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/tutorial/4-authentication-and-permissions.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef save(self, *args, **kwargs):\n    \"\"\"\n    Use the `pygments` library to create a highlighted HTML\n    representation of the code snippet.\n    \"\"\"\n    lexer = get_lexer_by_name(self.language)\n    linenos = 'table' if self.linenos else False\n    options = {'title': self.title} if self.title else {}\n    formatter = HtmlFormatter(style=self.style, linenos=linenos,\n                              full=True, **options)\n    self.highlighted = highlight(self.code, lexer, formatter)\n    super().save(*args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing MailChimp Signup Form with HTML and CSS\nDESCRIPTION: HTML and CSS code for embedding a MailChimp newsletter signup form. The form collects email addresses for monthly progress reports and includes styling for the form elements.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/mozilla-grant.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"//cdn-images.mailchimp.com/embedcode/classic-10_7.css\" rel=\"stylesheet\" type=\"text/css\">\n<style type=\"text/css\">\n    #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n    /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.\n       We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */\n</style>\n<div id=\"mc_embed_signup\">\n<form action=\"//encode.us13.list-manage.com/subscribe/post?u=b6b66bb5e4c7cb484a85c8dd7&amp;id=e382ef68ef\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\n    <div id=\"mc_embed_signup_scroll\">\n    <h2>Stay up to date, with our monthly progress reports...</h2>\n<div class=\"mc-field-group\">\n    <label for=\"mce-EMAIL\">Email Address </label>\n    <input type=\"email\" value=\"\" name=\"EMAIL\" class=\"required email\" id=\"mce-EMAIL\">\n</div>\n    <div id=\"mce-responses\" class=\"clear\">\n        <div class=\"response\" id=\"mce-error-response\" style=\"display:none\"></div>\n        <div class=\"response\" id=\"mce-success-response\" style=\"display:none\"></div>\n    </div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\" name=\"b_b6b66bb5e4c7cb484a85c8dd7_e382ef68ef\" tabindex=\"-1\" value=\"\"></div>\n    <div class=\"clear\"><input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\"></div>\n    </div>\n</form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Security Policy Documentation in Markdown\nDESCRIPTION: Markdown document defining the security policy and vulnerability reporting process. Instructs users to report security issues via email to security@encode.io before any public disclosure.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/SECURITY.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Security Policy\n\n## Reporting a Vulnerability\n\n**Please report security issues by emailing security@encode.io**.\n\nThe project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.\n```\n\n----------------------------------------\n\nTITLE: Stripe Payment Integration\nDESCRIPTION: HTML form with Stripe checkout integration for processing subscription payments. Includes configuration for payment processing with dynamic amount and currency handling.\nSOURCE: https://github.com/encode/django-rest-framework/blob/master/docs/community/funding.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"signup\" action=\"/signup/{{ currency }}-{{ rates.personal1 }}/\" method=\"POST\">\n  <script\n    src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\n    data-key=\"{{ stripe_public }}\"\n    data-amount=\"{{ stripe_amounts.personal1 }}\"\n    data-name=\"Django REST framework\"\n    data-description=\"Individual\"\n    data-currency=\"{{ currency }}\"\n    data-allow-remember-me=false\n    data-billing-address=true\n    data-label='Sign up'\n    data-panel-label='Sign up - {% verbatim %}{{amount}}{% endverbatim %}/mo'>\n  </script>\n</form>\n```"
  }
]