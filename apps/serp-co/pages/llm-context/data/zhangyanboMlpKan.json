[
  {
    "owner": "zhangyanbo",
    "repo": "mlp-kan",
    "content": "TITLE: Using KANLayer in Python\nDESCRIPTION: Example of how to use the KANLayer class to create a sequential model with two layers. It demonstrates input and output shapes for a sample tensor.\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kan_layer import KANLayer\n\nmodel = nn.Sequential(\n        KANLayer(2, 5),\n        KANLayer(5, 1)\n    )\n\nx = torch.randn(16, 2)\ny = model(x)\n# y.shape = (16, 1)\n```\n\n----------------------------------------\n\nTITLE: Creating KANLayer Model for Experiment\nDESCRIPTION: Setup of a sequential model using KANLayer for the experiment. This configuration uses two layers with dimensions [2, 5, 1].\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndims = [2, 5, 1]\nmodel = nn.Sequential(\n    KANLayer(dims[0], dims[1]),\n    KANLayer(dims[1], dims[2])\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Interpretable KANLayer Model\nDESCRIPTION: Alternative setup of a sequential model using KANLayer for better interpretability. This configuration uses two layers with dimensions [2, 1, 1].\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndims = [2, 1, 1]\nmodel = nn.Sequential(\n    KANLayer(dims[0], dims[1]),\n    KANLayer(dims[1], dims[2])\n)\n```\n\n----------------------------------------\n\nTITLE: Using KANInterpoLayer for Linear Interpolation\nDESCRIPTION: Example of using the KANInterpoLayer class for linear interpolation version of the KAN layer. It demonstrates creating a model and processing input data.\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom kan_layer import KANInterpoLayer\n\nmodel = nn.Sequential(\n        KANInterpoLayer(2, 5),\n        KANInterpoLayer(5, 1)\n    )\n\nx = torch.randn(16, 2)\ny = model(x)\n# y.shape = (16, 1)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Function for Experiment\nDESCRIPTION: Implementation of the target function f(x,y)=exp(sin(pi * x) + y^2) used in the experiment. It handles both 1D and 2D input tensors.\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef target_fn(input):\n    # f(x,y)=exp(sin(pi * x) + y^2)\n    if len(input.shape) == 1:\n        x, y = input\n    else:\n        x, y = input[:, 0], input[:, 1]\n    return torch.exp(torch.sin(torch.pi * x) + y**2)\n```\n\n----------------------------------------\n\nTITLE: Running Experiment Script in Bash\nDESCRIPTION: Command to execute the experiment script for quick testing of the MLP-KAN implementation.\nSOURCE: https://github.com/zhangyanbo/mlp-kan/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython experiment.py\n```"
  }
]