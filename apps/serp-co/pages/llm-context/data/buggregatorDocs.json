[
  {
    "owner": "buggregator",
    "repo": "docs",
    "content": "TITLE: Combining Multiple Trap Features\nDESCRIPTION: Example of combining multiple trap debugging features for comprehensive debugging setup.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Combine multiple debugging features\ntrap($user)\n    ->depth(3)\n    ->if($user->isAdmin())\n    ->context(role: 'admin', permissions: $user->getPermissions())\n    ->once();\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with PostgreSQL\nDESCRIPTION: Complete Docker Compose configuration for setting up Buggregator with PostgreSQL database, including health checks and environment variables.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/external-db.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n  buggregator:\n    image: ghcr.io/buggregator/server:latest\n    depends_on:\n      buggregator-database:\n        condition: service_healthy\n    ports:\n      - 127.0.0.1:8000:8000\n    environment:\n      PERSISTENCE_DRIVER: db\n      DB_DRIVER: pgsql\n      DB_DATABASE: buggregator\n      DB_HOST: buggregator-database\n      DB_PORT: 5432\n      DB_USERNAME: root\n      DB_PASSWORD: secret\n\n  buggregator-database:\n    image: postgres:latest\n    healthcheck:\n      test: [ \"CMD-SHELL\", \"pg_isready --username=buggregator --dbname=buggregator\" ]\n      interval: 3s\n      timeout: 3s\n      retries: 1\n    environment:\n      POSTGRES_DB: buggregator\n      POSTGRES_USER: root\n      POSTGRES_PASSWORD: secret\n```\n\n----------------------------------------\n\nTITLE: Getting Values Back with Trap\nDESCRIPTION: Examples of dumping values while maintaining code flow using return functionality.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Dump a value and return it immediately\n$result = trap($data)->return();\n\n// Chain operations without breaking the flow\n$response = $service->process(trap($request)->return());\n\n// Return a specific named value\n$name = trap(first: $firstName, last: $lastName)->return('last');\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 SSO Environment Variables\nDESCRIPTION: Environment variable configuration for setting up Auth0 SSO integration in Buggregator. Includes authentication provider settings, client credentials, callback URL, and required OAuth scopes.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sso.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_ENABLED=true\nAUTH_PROVIDER=auth0\nAUTH_PROVIDER_URL=https://<domain>.auth0.com\nAUTH_CLIENT_ID=xxx\nAUTH_CLIENT_SECRET=xxx\nAUTH_CALLBACK_URL=http://<server_address>/auth/sso/callback\nAUTH_SCOPES=openid,email,profile\n```\n\n----------------------------------------\n\nTITLE: Configuring Kinde SSO Environment Variables\nDESCRIPTION: Environment variable configuration for setting up Kinde SSO integration in Buggregator. Includes authentication provider settings, client credentials, callback URLs for login/logout, and required OAuth scopes.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sso.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nAUTH_ENABLED=true\nAUTH_PROVIDER=kinde\nAUTH_PROVIDER_URL=https://<domain>.kinde.com\nAUTH_CLIENT_ID=xxx\nAUTH_CLIENT_SECRET=xxx\nAUTH_CALLBACK_URL=http://<server_address>/auth/sso/callback\nAUTH_LOGOUT_URL=http://<server_address>/auth/sso/logout\nAUTH_SCOPES=openid,email,profile\n```\n\n----------------------------------------\n\nTITLE: Using trap() Function in PHP\nDESCRIPTION: Examples of using the trap() function in PHP for debugging. This includes basic variable dumps, named variable dumps, chaining methods, and setting dump depth for nested objects.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Basic variable dump\ntrap($user);\n\n// Named variable dumps\ntrap(id: $userId, email: $userEmail);\n\n// Dump and continue using the value\n$response = trap($api->getResponse())->return();\n\n// Set dump depth for nested objects\ntrap($complexObject)->depth(3);\n```\n\n----------------------------------------\n\nTITLE: Manual Monolog Configuration for Other PHP Frameworks\nDESCRIPTION: Example code for manually configuring Monolog in PHP frameworks without built-in integration. It creates a logger, sets up a socket handler with JSON formatter, and sends log messages to the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\SocketHandler;\nuse Monolog\\Formatter\\JsonFormatter;\n\n// create a log channel\n$log = new Logger('buggregator');\n$handler = new SocketHandler('127.0.0.1:9913');\n$handler->setFormatter(new JsonFormatter());\n$log->pushHandler($handler);\n\n// Send records to the Buggregator\n$log->warning('Foo');\n$log->error('Bar');\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Buggregator\nDESCRIPTION: Environment variables configuration for connecting Buggregator to a PostgreSQL database. Includes database connection parameters such as host, port, credentials, and database name.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/external-db.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nPERSISTENCE_DRIVER=db # database or cycle are also supported as an alias for db\n\nDB_DRIVER=pgsql\nDB_DATABASE=buggregator\nDB_HOST=127.0.0.1\nDB_PORT=5432\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray for Framework-agnostic PHP Projects\nDESCRIPTION: This PHP configuration file template sets up Ray for use in framework-agnostic PHP projects. It includes settings for enabling Ray, specifying the host and port, and configuring paths and formatting options.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/ray.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Save this in a file called \"ray.php\"\n\nreturn [\n    /*\n    * This settings controls whether data should be sent to Ray.\n    */\n    'enable' => true,\n\n    /*\n     *  The host used to communicate with the Ray app.\n     */\n    'host' => 'ray@127.0.0.1',\n\n    /*\n     *  The port number used to communicate with the Ray app.\n     */\n    'port' => 8000,\n\n    /*\n     *  Absolute base path for your sites or projects in Homestead, Vagrant, Docker, or another remote development server.\n     */\n    'remote_path' => null,\n\n    /*\n     *  Absolute base path for your sites or projects on your local computer where your IDE or code editor is running on.\n     */\n    'local_path' => null,\n\n    /*\n     * When this setting is enabled, the package will not try to format values sent to Ray.\n     */\n    'always_send_raw_values' => false,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner with Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to set RoadRunner environment variables in a docker-compose.yml file. It includes settings for logging mode, HTTP workers, TCP buffer size, and CORS origin restriction.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/roadrunner.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\n\nservices:\n  buggregator:\n    image: ghcr.io/buggregator/server:latest\n    environment:\n      RR_LOG_MODE: json         # Set logging mode to JSON\n      RR_HTTP_NUM_WORKERS: 4    # Configure the number of HTTP workers\n      RR_TCP_READ_BUF_SIZE: 10485760 # Set TCP read buffer size to 10MB\n      RR_HTTP_ALLOWED_ORIGIN: \"https://example.com\" # Restrict allowed CORS origins\n```\n\n----------------------------------------\n\nTITLE: Performance Measurement with tr()\nDESCRIPTION: Example of using tr() function for measuring code performance between execution points.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// First tick\ntr();\n\n// Some code to measure\ndoSomething();\n\n// Second tick will show time elapsed since first tick\ntr();\n```\n\n----------------------------------------\n\nTITLE: Configuring RoadRunner with Docker Run Command\nDESCRIPTION: This bash snippet shows how to pass RoadRunner environment variables directly when running a Docker container using the docker run command. It sets logging mode, HTTP workers, TCP buffer size, and CORS origin.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/roadrunner.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -e RR_LOG_MODE=json \\\n  -e RR_HTTP_NUM_WORKERS=4 \\\n  -e RR_TCP_READ_BUF_SIZE=10485760 \\\n  -e RR_HTTP_ALLOWED_ORIGIN=\"https://example.com\" \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Trap Function Signature\nDESCRIPTION: Primary function signature for the trap() debugging function that accepts variable arguments and returns a TrapHandle instance.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction trap(mixed ...$values): TrapHandle\n```\n\n----------------------------------------\n\nTITLE: Integrating Inspector with PHP Applications\nDESCRIPTION: PHP code snippet showing how to configure the Inspector PHP package to work with Buggregator. Creates a new Inspector instance with a custom configuration pointing to the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/inspector.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Inspector\\Inspector;\nuse Inspector\\Configuration;\n\n$configuration = new Configuration('YOUR_INGESTION_KEY');\n$configuration->setUrl('http://inspector@127.0.0.1:8000');\n$inspector = new Inspector($configuration);\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Configuration in YAML\nDESCRIPTION: This YAML snippet illustrates a typical webhook configuration file. It specifies the event trigger, target URL, headers, SSL verification, and retry settings for a Buggregator webhook.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/webhooks.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwebhook:\n  event: sentry.received\n  url: http://example.com/webhook\n  headers:\n    Content-Type: application/json\n    Secret-Key: my-secret-key\n  verify_ssl: false\n  retry_on_failure: true\n```\n\n----------------------------------------\n\nTITLE: Adding Context with Trap\nDESCRIPTION: Examples of adding metadata and context to dumps for better debugging information.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Add execution context to help understand the dump\ntrap($phpCode)->context(language: 'php', filename: 'Controller.php');\n\n// Add context using an array\ntrap($data)->context(['environment' => 'production', 'user_id' => 42]);\n\n// Shorthand for code highlighting\ntrap($sqlQuery)->code('sql');\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Socket Handler in Laravel\nDESCRIPTION: Configuration for Laravel's logging system to use Monolog with a socket handler. It sets up a custom channel that sends logs to the Buggregator server using the JsonFormatter.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/logging.php\nreturn [\n    // ...\n    'channels' => [\n        // ...\n        'socket' => [\n            'driver' => 'monolog',\n            'level' => env('LOG_LEVEL', 'debug'),\n            'handler' => \\Monolog\\Handler\\SocketHandler::class,\n            'formatter' => \\Monolog\\Formatter\\JsonFormatter::class,\n            'handler_with' => [\n                'connectionString' => env('LOG_SOCKET_URL', '127.0.0.1:9913'),\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Volume in Docker Compose\nDESCRIPTION: This YAML snippet shows how to configure a volume for webhook configurations in a Docker Compose file. It mounts the local webhook directory to the appropriate path in the Buggregator container.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/webhooks.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbuggregator-server:\n  ...\n  volumes:\n    - /path/to/webhooks:/app/runtime/configs\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Environment Variables for Inspector\nDESCRIPTION: Environment variables configuration for connecting Laravel application with Inspector through Buggregator. Sets the Inspector URL to the local Buggregator server along with API key and ingestion key.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/inspector.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nINSPECTOR_URL=http://inspector@127.0.0.1:8000\nINSPECTOR_API_KEY=test\nINSPECTOR_INGESTION_KEY=1test\nINSPECTOR_ENABLE=true\n```\n\n----------------------------------------\n\nTITLE: Limiting Dump Depth with Trap\nDESCRIPTION: Examples of controlling dump depth for complex nested objects and multiple object dumps.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Limit the dump depth to 4 levels for deeply nested objects\ntrap($complexObject)->depth(4);\n\n// Dump multiple objects with depth limit\ntrap(user: $user, order: $order)->depth(2);\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Docker Container with Exposed Metrics Port\nDESCRIPTION: This bash command demonstrates how to run the Buggregator Docker container while exposing the metrics port 2112. This allows access to the Prometheus-friendly metrics endpoint from outside the container.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  ... \\\n  -p 2112:2112 \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Stack Trace Inspection with Trap\nDESCRIPTION: Examples showing how to add stack traces to variable dumps for execution flow analysis.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Add stack trace to your dump to see the execution flow\ntrap()->stackTrace();\n\n// Dump a variable along with the stack trace\ntrap($result)->stackTrace();\n```\n\n----------------------------------------\n\nTITLE: Limiting Dump Frequency with Trap\nDESCRIPTION: Examples of controlling how many times dumps are displayed, useful for debugging loops and recursive functions.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Dump only once at this location in code\ntrap($i)->once();\n\n// Dump only 5 times at this location\ntrap($i)->times(5);\n\n// Dump only 3 times with full stack consideration (useful in recursion)\ntrap($recursiveData)->times(3, true);\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Docker Container with Custom JavaScript SDK Settings\nDESCRIPTION: Starts a Buggregator Docker container with custom environment variables for the Sentry JavaScript SDK.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p ... \\\n  -e SENTRY_JS_DSN_HOST=http://sentry@127.0.0.1:8000 \\\n  -e SENTRY_JS_SDK_URL=https://browser.sentry-cdn.com/7.69.0/bundle.tracing.replay.min.js \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Integration DSNs\nDESCRIPTION: Configuration examples for integrating various services with project-specific endpoints.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/projects.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=http://<secret_key>@127.0.0.1:8000/<project_key>\n```\n\nLANGUAGE: dotenv\nCODE:\n```\nINSPECTOR_URL=http://inspector:<project_key>@127.0.0.1:8000\nINSPECTOR_API_KEY=<secret_key>\n```\n\nLANGUAGE: dotenv\nCODE:\n```\nPROFILER_ENDPOINT=http://profiler:<project_key>@127.0.0.1:8000\n```\n\nLANGUAGE: dotenv\nCODE:\n```\nRAY_HOST=ray:<project_key>@127.0.0.1\nRAY_PORT=8082\n```\n\n----------------------------------------\n\nTITLE: Conditional Dumping with Trap\nDESCRIPTION: Examples of using conditional logic to control when dumps are displayed.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Dump only if a condition is met\ntrap($response)->if($statusCode >= 400);\n\n// Using a callable for complex conditions\ntrap($query)->if(fn() => $query->count() > 100);\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for WordPress using MU Plugin\nDESCRIPTION: WordPress configuration using a Must-Use plugin to set up SMTP connection to Buggregator's local SMTP server. The plugin only activates in local environment.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/smtp.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: MU Buggregator SMTP\n */\n\nif (! defined('WP_ENVIRONMENT_TYPE') || 'local' !== WP_ENVIRONMENT_TYPE) {\n\treturn;\n}\n\n/**\n * Send emails to Buggregator\n *\n * @param \\PHPMailer $phpmailer The PHPMailer instance (passed by reference).\n */\nadd_action( 'phpmailer_init', function( $phpmailer ) : void {\n\t$phpmailer->isSMTP();\n    $phpmailer->Host = '127.0.0.1';\n    $phpmailer->Port = 1025;\n}  );\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for running Buggregator with all ports mapped to localhost.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # ...\n  buggregator:\n    image: ghcr.io/buggregator/server:dev\n    ports:\n      - 127.0.0.1:8000:8000\n      - 127.0.0.1:1025:1025\n      - 127.0.0.1:9912:9912\n      - 127.0.0.1:9913:9913\n```\n\n----------------------------------------\n\nTITLE: Mounting Webhook Configuration Volume in Docker\nDESCRIPTION: This snippet demonstrates how to mount a volume containing webhook configurations when running Buggregator in a Docker container. It allows managing webhooks through configuration files.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/webhooks.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -v /path/to/webhooks:/app/runtime/configs \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN with Secret Key\nDESCRIPTION: Sets the Sentry DSN with an embedded secret key for authentication with the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_10\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=http://my-secret-key:sentry@127.0.0.1:8000/1 \n```\n\n----------------------------------------\n\nTITLE: Complete Trap Testing Workflow\nDESCRIPTION: Complete example showing how to start the Trap server in one terminal and run tests against it from another terminal.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# First, start the trap server in one terminal\nvendor/bin/trap run\n\n# Then, in another terminal, run the test command\nvendor/bin/trap test\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Network Configuration\nDESCRIPTION: Docker Compose configuration showing how to add Buggregator to an existing service with network configuration.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Existing services...\n  \n  buggregator:\n    image: ghcr.io/buggregator/server:dev\n    ports:\n      - 127.0.0.1::8000\n    networks:\n      - your_existing_network\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Docker Container with Secret Key\nDESCRIPTION: Starts a Buggregator Docker container with a custom secret key for Sentry authentication validation.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p ... \\\n  -e SENTRY_SECRET_KEY=my-secret-key \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Volume Mount for Buggregator Projects\nDESCRIPTION: Commands to mount a volume containing webhook configurations in Docker standalone or docker-compose.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/projects.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -v /path/to/projects:/app/runtime/configs \\\n  ghcr.io/buggregator/server:latest\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuggregator-server:\n  ...\n  volumes:\n    - /path/to/projects:/app/runtime/configs\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection in Buggregator\nDESCRIPTION: Environment variables configuration for connecting Buggregator to a MySQL database. Includes database connection parameters such as host, port, credentials, and database name.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/external-db.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nPERSISTENCE_DRIVER=db # database or cycle are also supported as an alias for db\n\nDB_DRIVER=mysql\nDB_DATABASE=buggregator\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Docker Container with Secret Key\nDESCRIPTION: Docker command to run the Buggregator server with a custom Inspector secret key for enhanced security. Sets the INSPECTOR_SECRET_KEY environment variable to enable secret key validation.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/inspector.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p ... \\\n  -e INSPECTOR_SECRET_KEY=my-secret-key \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Spiral Framework\nDESCRIPTION: SMTP configuration for Spiral Framework using environment variables to connect to Buggregator's local SMTP server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/smtp.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nMAILER_DSN=smtp://127.0.0.1:1025\n```\n\n----------------------------------------\n\nTITLE: Running the Trap Test Command\nDESCRIPTION: Command to send various types of test data to a running Trap server instance for testing functionality.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap test\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog in Symfony YAML Configuration\nDESCRIPTION: YAML configuration for Symfony's Monolog setup. It creates a socket handler at debug level with a JSON formatter and connects to the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/dev/monolog.yaml\nmonolog:\n  handlers:\n    socket:\n      level: debug\n      type: socket\n      formatter: monolog.formatter.json\n      connection_string: '%env(MONOLOG_SOCKET_HOST)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Laravel\nDESCRIPTION: SMTP configuration for Laravel framework using environment variables to connect to Buggregator's local SMTP server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/smtp.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nMAIL_MAILER=smtp\nMAIL_HOST=127.0.0.1\nMAIL_PORT=1025\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Magento 2 using Environment Variables\nDESCRIPTION: SMTP configuration for Magento 2 using environment variables to connect to Buggregator's local SMTP server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/smtp.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCONFIG__DEFAULT__SYSTEM__SMTP__TRANSPORT=\"smtp\"\nCONFIG__DEFAULT__SYSTEM__SMTP__HOST=\"127.0.0.1\"\nCONFIG__DEFAULT__SYSTEM__SMTP__PORT=\"1025\"\n```\n\n----------------------------------------\n\nTITLE: Using Buggregator Trap for Syntax Highlighting\nDESCRIPTION: PHP code example demonstrating how to use the Buggregator Trap function to dump PHP code with syntax highlighting.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$code = <<<PHP\n<?php\n\ndeclare(strict_types=1);\n\necho 'Hello, World!';\nPHP;\n\ntrap($code)->context(language: 'php');\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Socket Handler in Spiral Framework\nDESCRIPTION: A bootloader example for Spiral Framework that registers a socket handler for Monolog. It configures the handler to send logs to the Buggregator server and sets the JSON formatter with newlines batch mode.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Bootloader;\n\nuse Monolog\\Formatter\\JsonFormatter;\nuse Monolog\\Handler\\SocketHandler;\nuse Spiral\\Boot\\Bootloader\\Bootloader;\nuse Spiral\\Boot\\EnvironmentInterface;\nuse Spiral\\Monolog\\Bootloader\\MonologBootloader;\n\nclass LoggingBootloader extends Bootloader\n{\n    public function init(MonologBootloader $monolog, EnvironmentInterface $env): void\n    {\n        $handler = new SocketHandler($env->get('MONOLOG_SOCKET_HOST'), chunkSize: 10);\n        $handler->setFormatter(new JsonFormatter(JsonFormatter::BATCH_MODE_NEWLINES));\n        $monolog->addHandler('socket', $handler);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Dump Request Using Custom Header\nDESCRIPTION: Example of making an HTTP request to the dump server using the X-Buggregator-Event header to identify it as a dump request.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/http-dumps.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'http://127.0.0.1:8000?foo=bar' \\\n    --header 'X-Buggregator-Event: http-dump'\n```\n\n----------------------------------------\n\nTITLE: Running Trap with User Interface\nDESCRIPTION: Commands to start the Trap server with the --ui flag, which enables the web interface for a more intuitive and graphical interaction with debug data.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./trap --ui\n# or\nvendor/bin/trap --ui\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN in Laravel Environment\nDESCRIPTION: Sets the Sentry Laravel DSN environment variable to point to the Buggregator server for local development.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_LARAVEL_DSN=http://sentry@127.0.0.1:8000/1\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server with Custom Port Configuration\nDESCRIPTION: Examples of starting the Trap server with custom port configuration using either long or short option flags.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run --port=8888\n# or\nvendor/bin/trap run -p 8888\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Sentry DSN for Other Platforms\nDESCRIPTION: Sets the basic Sentry DSN environment variable for platforms not specifically mentioned in the documentation.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_8\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=http://sentry@127.0.0.1:8000/1\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Stable Buggregator with Docker\nDESCRIPTION: Docker command to run the latest stable version of Buggregator with all standard ports mapped to localhost.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p 127.0.0.1:8000:8000 \\\n  -p 127.0.0.1:1025:1025 \\\n  -p 127.0.0.1:9912:9912 \\\n  -p 127.0.0.1:9913:9913 \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Debug and Die with td()\nDESCRIPTION: Examples of using td() function to dump values and terminate script execution.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Dump value and terminate execution\ntd($error);\n\n// Dump multiple values before terminating\ntd($request, $exception, $context);\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP for Magento 2 using CLI Commands\nDESCRIPTION: Alternative SMTP configuration for Magento 2 using command line interface to set up connection to Buggregator's local SMTP server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/smtp.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento config:set system/smtp/transport smtp\nbin/magento config:set system/smtp/host 127.0.0.1\nbin/magento config:set system/smtp/port 1025\n```\n\n----------------------------------------\n\nTITLE: Starting the Buggregator Server with Docker Compose\nDESCRIPTION: Command to start the Buggregator server, PostgreSQL database, and example services using Docker Compose via make.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake up\n```\n\n----------------------------------------\n\nTITLE: Example Buggregator Metric Format\nDESCRIPTION: This snippet shows the format of metrics provided by Buggregator. It includes a help comment, type definition, and example metrics for different event types (sentry and smtp in this case).\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# HELP events The total number of received events.\n# TYPE events counter\nevents{type=\"sentry\"} 10\nevents{type=\"smtp\"} 1\n```\n\n----------------------------------------\n\nTITLE: Creating Project Configuration YAML\nDESCRIPTION: Example of a project configuration file showing how to define project key and name in YAML format.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/projects.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  key: dev\n  name: Dev environment\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server on a Specific Port\nDESCRIPTION: Command to start the Trap server listening on a single specific port (8000) instead of the default multi-port configuration.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run -p 8000\n```\n\n----------------------------------------\n\nTITLE: Installing Trap Binary on Linux\nDESCRIPTION: Commands to download, extract, and run the Trap standalone binary for Linux amd64 platform. This method allows using Trap across multiple PHP projects without modifying their dependencies.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download (example for Linux amd64)\ncurl -L -o trap.tar.gz https://github.com/buggregator/trap/releases/latest/download/trap-1.13.13-linux-amd64.tar.gz\n\n# Extract the archive\ntar -xzf trap.tar.gz\nrm trap.tar.gz\n\n# Make executable\nchmod +x trap\n\n# Run\n./trap\n```\n\n----------------------------------------\n\nTITLE: Setting Inspector Secret Key in Laravel\nDESCRIPTION: Environment variable configuration for setting the Inspector ingestion key in Laravel applications to match the secret key configured on the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/inspector.md#2025-04-20_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nINSPECTOR_INGESTION_KEY=my-secret-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN for Magento 2 via Environment Variable\nDESCRIPTION: Sets the Sentry DSN for Magento 2 using environment configuration to connect to Buggregator.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nCONFIG__SENTRY__ENVIRONMENT__DSN=http://sentry@127.0.0.1:8000/1\n```\n\n----------------------------------------\n\nTITLE: Configuring Inspector with Secret Key in PHP\nDESCRIPTION: PHP code showing how to set up Inspector with a secret key for secure communication with Buggregator. Uses the secret key as the ingestion key when creating the Inspector configuration.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/inspector.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Inspector\\Inspector;\nuse Inspector\\Configuration;\n\n$configuration = new Configuration('my-secret-key');\n$configuration->setUrl('http://inspector@127.0.0.1:8000');\n$inspector = new Inspector($configuration);\n```\n\n----------------------------------------\n\nTITLE: Configuring VarDumper with Bash Script\nDESCRIPTION: Bash script to export environment variables for VarDumper configuration, useful for command-line execution environments.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nexport VAR_DUMPER_FORMAT=\"server\"\nexport VAR_DUMPER_SERVER=\"127.0.0.1:9912\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Sentry SDK Environment Variables\nDESCRIPTION: Sets environment variables for the Sentry JavaScript SDK URL and DSN host to connect to Buggregator.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\n# Sentry SDK URL (Actual version can be found here https://docs.sentry.io/platforms/javascript/install/loader/#cdn)\nSENTRY_JS_SDK_URL=https://browser.sentry-cdn.com/7.69.0/bundle.tracing.replay.min.js \n\n# Sentry DSN host that will be used in the SDK\nSENTRY_JS_DSN_HOST=http://sentry@127.0.0.1:8000 \n```\n\n----------------------------------------\n\nTITLE: Running Trap Server on Multiple Custom Ports\nDESCRIPTION: Commands to start the Trap server listening on multiple custom ports (8888 and 9999) simultaneously.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run --port=8888 --port=9999\n# or\nvendor/bin/trap run -p 8888 -p 9999\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server with Environment Variables\nDESCRIPTION: Example of using environment variables to configure the Trap server, setting custom TCP ports and UI port while enabling the web UI.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTRAP_TCP_PORTS=8888,9999 TRAP_UI_PORT=8080 vendor/bin/trap run --ui\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to manually force database migrations within the Buggregator container.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/external-db.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp app.php migrate --force\n```\n\n----------------------------------------\n\nTITLE: Laravel Environment Configuration for Monolog\nDESCRIPTION: Environment variables for Laravel to specify the log channel and socket URL for the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\nLOG_CHANNEL=socket\nLOG_SOCKET_URL=127.0.0.1:9913\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server with Multiple Senders\nDESCRIPTION: Command to start the Trap server configured with multiple senders (console and file) for outputting debug information.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run --sender=console --sender=file\n```\n\n----------------------------------------\n\nTITLE: Configuring VarDumper via Environment Variables\nDESCRIPTION: Environment variable configuration for directing VarDumper output to a Buggregator server running on localhost port 9912.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nVAR_DUMPER_FORMAT=server\nVAR_DUMPER_SERVER=127.0.0.1:9912\n```\n\n----------------------------------------\n\nTITLE: Running the Trap Server with Default Settings\nDESCRIPTION: Basic command to start the Trap server with default configuration, listening on standard ports (1025, 8000, 9912, 9913) and using the console sender.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run\n```\n\n----------------------------------------\n\nTITLE: Configuring Vanilla PHP Profiler Implementation\nDESCRIPTION: Example code showing how to configure and implement the profiler in vanilla PHP, including storage setup and profiler initialization\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SpiralPackages\\Profiler\\Profiler;\nuse SpiralPackages\\Profiler\\Driver\\DriverInterface;\nuse SpiralPackages\\Profiler\\DriverFactory;\nuse SpiralPackages\\Profiler\\Storage\\StorageInterface;\nuse SpiralPackages\\Profiler\\Storage\\WebStorage;\nuse Symfony\\Component\\HttpClient\\NativeHttpClient;\n\n$storage = new WebStorage(\n    new NativeHttpClient(),\n    'http://127.0.0.1/api/profiler/store',\n);\n\n$driver = DriverFactory::detect();\n\n$profiler = new Profiler(\n    storage: $storage, \n    driver: $driver, \n    appName: 'My super app', \n    tags: [\n        // global tags\n        'env' => 'local',\n    ]\n);\n\n$profiler->start(ignoredFunctions: []);\n\n// Here is your code you want to profile\n\n$profiler->end(tags: [\n    // Tags for specific requests\n]);\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server with Web UI Enabled\nDESCRIPTION: Command to start the Trap server with the web UI enabled on the default port.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap run --ui\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Server with Preview Depth Limit\nDESCRIPTION: Docker command to run the Buggregator server with a configuration to limit the depth of variable previews for better browser performance.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p ... \\\n  -e VAR_DUMPER_PREVIEW_MAX_DEPTH=3 \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring VarDumper in PHP Code\nDESCRIPTION: PHP code to configure VarDumper to send output to a remote server when an .env file isn't available in the project.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Plain PHP\n$_SERVER['VAR_DUMPER_FORMAT'] = 'server';\n$_SERVER['VAR_DUMPER_SERVER'] = '127.0.0.1:9912';\n```\n\n----------------------------------------\n\nTITLE: HTTP Dump Request Using Basic Auth\nDESCRIPTION: Example of making an HTTP request to the dump server using http-dump in the host authentication.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/http-dumps.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location 'http://http-dump@127.0.0.1:8000?foo=bar'\n```\n\n----------------------------------------\n\nTITLE: Installing Trap via Composer\nDESCRIPTION: Command to install Trap as a development dependency in a PHP project using Composer. This method integrates Trap directly into the project's dependency management.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev buggregator/trap -W\n```\n\n----------------------------------------\n\nTITLE: Running Trap Server via Composer\nDESCRIPTION: Command to start the Trap debugging server after installation via Composer. This allows you to begin using Trap for debugging in your PHP project.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Buggregator\nDESCRIPTION: Docker command to run a specific version (v1.0) of Buggregator with all ports mapped to localhost.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:8000:8000 \\\n  -p 127.0.0.1:1025:1025 \\\n  -p 127.0.0.1:9912:9912 \\\n  -p 127.0.0.1:9913:9913 \\\n  ghcr.io/buggregator/server:v1.0\n```\n\n----------------------------------------\n\nTITLE: Docker Container Access Commands\nDESCRIPTION: Commands for accessing the Buggregator container in different environments (Docker and Kubernetes) to perform manual operations like migrations.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/external-db.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it buggregator /bin/bash\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it buggregator -- /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Sample environment configuration settings for Buggregator\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\n# Queue\nQUEUE_CONNECTION=roadrunner\n\n# Broadcast\nBROADCAST_CONNECTION=centrifugo\n\n# Monolog\nMONOLOG_DEFAULT_CHANNEL=roadrunner\nMONOLOG_DEFAULT_LEVEL=DEBUG\n\n# Database\nPERSISTENCE_DRIVER=db\nDB_DRIVER=mysql # mysql, pgsql\nDB_DATABASE=buggregator\nDB_HOST=127.0.0.1\nDB_USERNAME=root\nDB_PASSWORD=\n\n# Turn off cache for tokenizer\nTOKENIZER_CACHE_TARGETS=false\n```\n\n----------------------------------------\n\nTITLE: Setting Ray Environment Variables\nDESCRIPTION: These environment variables configure the Ray server host and port for connecting to Buggregator.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/ray.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRAY_HOST=ray@127.0.0.1  # Ray server host (Current HTTP buggregator port)\nRAY_PORT=8000           # Ray server port\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Release Buggregator with Docker\nDESCRIPTION: Docker command to run the latest development version of Buggregator with all ports mapped to localhost.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p 127.0.0.1:8000:8000 \\\n  -p 127.0.0.1:1025:1025 \\\n  -p 127.0.0.1:9912:9912 \\\n  -p 127.0.0.1:9913:9913 \\\n  ghcr.io/buggregator/server:dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN in Spiral Framework Environment\nDESCRIPTION: Sets the Sentry DSN environment variable for Spiral Framework to connect to the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nSENTRY_DSN=http://sentry@127.0.0.1:8000/1\n```\n\n----------------------------------------\n\nTITLE: Including Sentry JavaScript SDK in HTML\nDESCRIPTION: Adds the Sentry JavaScript SDK script tag to your HTML document to enable error tracking in client-side JavaScript.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://127.0.0.1:8000/sentry/1.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Xhprof via PECL\nDESCRIPTION: Command sequence for installing Xhprof profiler using PECL package manager\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npear channel-update pear.php.net\npecl install xhprof\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Monolog in Spiral Framework\nDESCRIPTION: Environment variables configuration for Spiral Framework to specify the default Monolog channel and the socket host for the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nMONOLOG_DEFAULT_CHANNEL=socket\nMONOLOG_SOCKET_HOST=127.0.0.1:9913\n```\n\n----------------------------------------\n\nTITLE: Installing Spiral Framework Profiler\nDESCRIPTION: Composer command to install the Spiral Framework profiler package\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev spiral/profiler:^3.0\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Xhprof Package\nDESCRIPTION: Composer command to install the Laravel-specific Xhprof integration package\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev maantje/xhprof-buggregator-laravel\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN for Magento 2 via PHP Config\nDESCRIPTION: Alternative method to set the Sentry DSN for Magento 2 using PHP configuration in app/etc/env.php.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'sentry' => [\n    'dsn' => 'http://sentry@127.0.0.1:8000/1',\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog with Composer\nDESCRIPTION: Command to install the Monolog package via Composer for PHP frameworks that don't have it built in.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require monolog/monolog\n```\n\n----------------------------------------\n\nTITLE: Minimal Port Configuration Example\nDESCRIPTION: Docker command showing how to run Buggregator with only the var-dumper port exposed for minimal setup.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --pull always \\\n  -p 127.0.0.1:9912:9912 \\\n  ghcr.io/buggregator/server:latest\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example environment variables configuration for Ray and Var Dump Server in .env file.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/getting-started.md#2025-04-20_snippet_5\n\nLANGUAGE: code\nCODE:\n```\nRAY_HOST=ray@buggregator\nRAY_PORT=8000\nVAR_DUMPER_FORMAT=server\nVAR_DUMPER_SERVER=buggregator:9912\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Dumping with Trap\nDESCRIPTION: Examples of using trap() to dump single and multiple variables, including named arguments for better clarity.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Dump a simple variable\ntrap($user);\n\n// Dump multiple variables\ntrap($request, $response, $config);\n\n// Use named arguments for better clarity\ntrap(user: $user, request: $request, response: $response);\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Buggregator\nDESCRIPTION: Command to build the necessary Docker images for the Buggregator development environment using make.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: TR Function Signature\nDESCRIPTION: Function signature for the tr() shorthand function that returns mixed values.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction tr(mixed ...$values): mixed\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Command to start the Buggregator application using RoadRunner\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./rr serve\n```\n\n----------------------------------------\n\nTITLE: Symfony Environment Configuration for Monolog\nDESCRIPTION: Environment variable for Symfony to specify the socket host for the Buggregator server.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/monolog.md#2025-04-20_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nMONOLOG_SOCKET_HOST=127.0.0.1:9913\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Profiler\nDESCRIPTION: Example environment variables configuration for the profiler setup\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPROFILER_ENDPOINT=http://profiler@127.0.0.1:8000\nPROFILER_APP_NAME=\"My super app\"\n```\n\n----------------------------------------\n\nTITLE: TD Function Signature\nDESCRIPTION: Function signature for the td() debug and die function that never returns.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/usage.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction td(mixed ...$values): never\n```\n\n----------------------------------------\n\nTITLE: Running the Trap Joke Command\nDESCRIPTION: Command to display a random joke using the Trap framework, which serves as a lightweight way to verify functionality.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/trap/commands.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/trap joke\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Environment Configuration\nDESCRIPTION: Command to create a custom environment configuration file by copying the sample .env file.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Cloning Buggregator Repository\nDESCRIPTION: Command to clone the Buggregator server repository from GitHub to local machine\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:buggregator/server.git\n```\n\n----------------------------------------\n\nTITLE: Stopping the Buggregator Server\nDESCRIPTION: Command to stop the Buggregator server and clean up Docker resources using make.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake down\n```\n\n----------------------------------------\n\nTITLE: Installing RoadRunner\nDESCRIPTION: Command to install RoadRunner application server\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/rr get\n```\n\n----------------------------------------\n\nTITLE: Cloning the Buggregator Repository in Bash\nDESCRIPTION: Commands to clone the Buggregator server repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:buggregator/server.git\ncd server\n```\n\n----------------------------------------\n\nTITLE: Publishing Ray Configuration in Laravel\nDESCRIPTION: This command publishes the Ray configuration file to the project root in a Laravel application.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/ray.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan ray:publish-config\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony VarDumper with Composer\nDESCRIPTION: Command to install Symfony VarDumper as a development dependency in your PHP project using Composer.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/var-dumper.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev symfony/var-dumper\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies\nDESCRIPTION: Command to install PHP dependencies using Composer\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Creating DoltDB Database\nDESCRIPTION: Commands to create a new DoltDB database for Buggregator\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir .db\n./bin/dolt --data-dir=.db sql -q \"create database buggregator;\"\n```\n\n----------------------------------------\n\nTITLE: Running Buggregator Frontend Development Server\nDESCRIPTION: Command to start the NodeJS development server for the Buggregator frontend.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/frontend.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Configuration\nDESCRIPTION: Commands to set up the environment configuration file and generate application key\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.sample .env\nphp app.php encrypt:key --mount=.env\n```\n\n----------------------------------------\n\nTITLE: Installing Buggregator Frontend Dependencies\nDESCRIPTION: Command to install the required dependencies for the Buggregator frontend using Yarn package manager.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/frontend.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Cloning Buggregator Frontend Repository\nDESCRIPTION: Command to clone the Buggregator frontend repository from GitHub.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/frontend.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/buggregator/frontend.git\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies with Composer\nDESCRIPTION: Command to install the required PHP dependencies for the Buggregator project using Composer.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/docker-install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Starting VitePress Development Server for Buggregator Docs\nDESCRIPTION: Command to start the VitePress development server for previewing the Buggregator documentation. This allows contributors to see their changes in real-time.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/docs.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Buggregator Documentation\nDESCRIPTION: Command to install the necessary dependencies for the Buggregator documentation project. This should be run after cloning the repository and navigating to the project directory.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/docs.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning Buggregator Documentation Repository\nDESCRIPTION: Command to clone the Buggregator documentation repository to the local machine. This is the first step in contributing to the documentation.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/contributing/docs.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:buggregator/docs.git\n```\n\n----------------------------------------\n\nTITLE: Installing Vanilla PHP Profiler\nDESCRIPTION: Composer command to install the standalone PHP profiler package\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/xhprof.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev spiral-packages/profiler\n```\n\n----------------------------------------\n\nTITLE: Downloading Required Binaries\nDESCRIPTION: Commands to download and set up Centrifugo and DoltDB binaries\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ./bin\nchmod +x ./get-binaries.sh\n./get-binaries.sh\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands\nDESCRIPTION: Commands to manually stop Centrifugo, DoltDB, and PHP processes\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/cookbook/manual-install.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkillall centrifugo\nkillall dolt\nkillall php\n```\n\n----------------------------------------\n\nTITLE: Configuring WP Sentry in WordPress wp-config.php\nDESCRIPTION: Adds configuration to wp-config.php to enable Sentry error tracking in WordPress when in local development environment.\nSOURCE: https://github.com/buggregator/docs/blob/master/docs/config/sentry.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// NOTE: WP_ENVIRONMENT_TYPE must be defined and set to 'local'.\nif (defined('WP_ENVIRONMENT_TYPE') && 'local' === WP_ENVIRONMENT_TYPE) {\n\tdefine( 'WP_SENTRY_PHP_DSN', 'http://sentry@127.0.0.1:8000/1' );\n\tdefine( 'WP_SENTRY_ERROR_TYPES', E_ALL & ~E_NOTICE & ~E_USER_NOTICE );\n\trequire_once __DIR__ . '/wp-content/plugins/wp-sentry-integration/wp-sentry.php';\n}\n```"
  }
]