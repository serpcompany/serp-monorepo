[
  {
    "owner": "gluonhq",
    "repo": "scenebuilder",
    "content": "TITLE: Complete JavaFX FXML Controller Skeleton Implementation\nDESCRIPTION: A skeleton implementation of a JavaFX FXML controller class that demonstrates FXML annotations, resource injection, UI component references, and initialization patterns. The template includes assertions to verify proper injection of UI elements from the FXML file.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Sample Skeleton for 'test' Controller Class\n */\n\npackage com.oracle.javafx.scenebuilder.kit.skeleton;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TableView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\n\npublic class EmptyController {\n\n    @FXML // ResourceBundle that was given to the FXMLLoader\n    private ResourceBundle resources;\n\n    @FXML // URL location of the FXML file that was given to the FXMLLoader\n    private URL location;\n\n    @FXML // fx:id=\"myTableView\"\n    private TableView<?> myTableView; // Value injected by FXMLLoader\n\n    @FXML // fx:id=\"myVbox\"\n    private VBox myVbox; // Value injected by FXMLLoader\n\n    @FXML\n    void onMyVboxMouseEntered(MouseEvent event) {\n\n    }\n\n    @FXML // This method is called by the FXMLLoader when initialization is complete\n    void initialize() {\n        assert myTableView != null : \"fx:id=\\\"myTableView\\\" was not injected: check your FXML file 'test'.\";\n        assert myVbox != null : \"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\";\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaFX FXML Controller Class in Java\nDESCRIPTION: A basic JavaFX controller class with FXML annotations for UI component references and event handlers. The class includes field declarations for resources, location, and UI components (TableView and VBox), plus an event handler for mouse events and an initialization method with validation checks.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_full.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage com.oracle.javafx.scenebuilder.kit.skeleton;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TableView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\n\npublic class EmptyController {\n\n    @FXML\n    private ResourceBundle resources;\n\n    @FXML\n    private URL location;\n\n    @FXML\n    private TableView<?> myTableView;\n\n    @FXML\n    private VBox myVbox;\n\n    @FXML\n    void onMyVboxMouseEntered(MouseEvent event) {\n\n    }\n\n    @FXML\n    void initialize() {\n        assert myTableView != null : \"fx:id=\\\"myTableView\\\" was not injected: check your FXML file 'test'.\";\n        assert myVbox != null : \"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\";\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup Custom Control in JavaFX\nDESCRIPTION: Defines a custom JavaFX control class for creating popup bubble messages. It includes CSS styling properties, message content management, and skin handling. The control supports customizable text, fonts, and colors through both properties and CSS.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage popup;\n\nimport javafx.beans.NamedArg;\nimport javafx.css.converter.PaintConverter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport javafx.beans.DefaultProperty;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\nimport javafx.beans.value.WritableValue;\nimport javafx.css.CssMetaData;\nimport javafx.css.FontCssMetaData;\nimport javafx.css.StyleOrigin;\nimport javafx.css.Styleable;\nimport javafx.css.StyleableObjectProperty;\nimport javafx.css.StyleableProperty;\nimport javafx.scene.control.Control;\nimport javafx.scene.control.Skin;\nimport javafx.scene.paint.Color;\nimport javafx.scene.paint.Paint;\nimport javafx.scene.text.Font;\n\n@DefaultProperty(\"content\")\npublic class Popup extends Control {\n    \n    public Popup(@NamedArg(\"message\") String message) {\n        getStyleClass().setAll(\"popup\");\n        \n        setContent(message);  \n    }\n    \n    private final StringProperty content = new SimpleStringProperty(this, \"content\", \"Default Message\");\n    public final String getContent() { return content.get(); }\n    public final void setContent(String value) { content.set(value); }\n    public final StringProperty contentProperty() { return content; }\n\n    @Override\n    protected Skin<?> createDefaultSkin() {\n        return new PopupSkin(this);\n    }\n\n    @Override\n    public String getUserAgentStylesheet() {\n        return Popup.class.getResource(\"popup.css\").toExternalForm(); \n    }\n        \n    private ObjectProperty<Paint> bubbleFill;\n    private ObjectProperty<Paint> textFill;\n    private ObjectProperty<Font> textFont;\n    \n    public final Paint getTextFill() {\n        return null == textFill ? Color.BLACK : textFill.get();\n    }\n    public final void setTextFill(Paint value) {\n        textFillProperty().set(value);\n    }\n    public final ObjectProperty<Paint> textFillProperty() {\n        if (null == textFill) {\n            textFill = new StyleableObjectProperty<>(Color.BLACK) {\n\n                @Override public CssMetaData<Popup, Paint> getCssMetaData() { return StyleableProperties.TEXT_FILL; }\n\n                @Override public Object getBean() { return Popup.this; }\n\n                @Override public String getName() { return \"textFill\"; }\n            };\n        }\n        return textFill;\n    }\n    \n    public final Paint getBubbleFill() {\n        return null == bubbleFill ? Color.BLACK : bubbleFill.get();\n    }\n    \n    public final void setBubbleFill(Paint value) {\n        bubbleFillProperty().set(value);\n    }\n    \n    public final ObjectProperty<Paint> bubbleFillProperty() {\n        if (null == bubbleFill) {\n            bubbleFill = new StyleableObjectProperty<>(Color.BLACK) {\n\n                @Override public CssMetaData<Popup, Paint> getCssMetaData() { return StyleableProperties.BUBBLE_FILL; }\n\n                @Override public Object getBean() { return Popup.this; }\n\n                @Override public String getName() { return \"bubbleFill\"; }\n            };\n        }\n        return bubbleFill;\n    }\n    \n    public final Font getTextFont(){\n        return null == textFont ? Font.getDefault() : textFont.get();\n    }\n    \n    public final void setTextFont(Font value) {\n        textFontProperty().set(value);\n    }\n    \n    public final ObjectProperty<Font> textFontProperty() {\n        if (null == textFont) {\n            textFont = new StyleableObjectProperty<>(Font.getDefault()) {\n                private boolean fontSetByCss = false;\n                @Override public void applyStyle(StyleOrigin newOrigin, Font value) {\n                    try {\n                        fontSetByCss = true;\n                        super.applyStyle(newOrigin, value);\n                    } catch(Exception e) {\n                        throw e;\n                    } finally {\n                        fontSetByCss = false;\n                    }\n                }\n                @Override public void set(Font value) {\n                    final Font oldValue = get();\n                    if (value != null ? !value.equals(oldValue) : oldValue != null) {\n                        super.set(value);\n                    }\n                }\n                @Override protected void invalidated() {\n                    if (!fontSetByCss) {\n                        Popup.this.layout();\n                        Popup.this.applyCss();\n                        Popup.this.requestLayout();\n                    }\n                }\n                @Override public CssMetaData<Popup, Font> getCssMetaData() { return StyleableProperties.TEXT_FONT; }\n                @Override public Object getBean() { return Popup.this; }\n                @Override public String getName() { return \"textFont\"; }\n            };\n        }\n        return textFont;\n    }\n    \n    private static class StyleableProperties {\n        \n        private static final CssMetaData<Popup, Paint> BUBBLE_FILL =\n            new CssMetaData<>(\"-bubble-fill\", PaintConverter.getInstance()) {\n\n                @Override public boolean isSettable(Popup bubble) {\n                    return null == bubble.bubbleFill || !bubble.bubbleFill.isBound();\n                }\n\n                @Override public StyleableProperty<Paint> getStyleableProperty(Popup popup) {\n                    return  (StyleableProperty<Paint>)(WritableValue<Paint>) popup.bubbleFillProperty();\n                }\n            };\n        \n        private static final CssMetaData<Popup, Paint> TEXT_FILL =\n            new CssMetaData<Popup, Paint>(\"-text-fill\", PaintConverter.getInstance(), Color.BLACK) {\n\n                @Override public boolean isSettable(Popup bubble) {\n                    return null == bubble.textFill || !bubble.textFill.isBound();\n                }\n\n                @Override public StyleableProperty<Paint> getStyleableProperty(Popup popup) {\n                    return (StyleableProperty<Paint>)(WritableValue<Paint>) popup.textFillProperty();\n                }\n            };\n        \n        private static final FontCssMetaData<Popup> TEXT_FONT =\n            new FontCssMetaData<Popup>(\"-text-font\", Font.getDefault()) {\n\n                @Override public boolean isSettable(Popup bubble) {\n                    return null == bubble.textFont || !bubble.textFont.isBound();\n                }\n\n                @Override public StyleableProperty<Font> getStyleableProperty(Popup bubble) {\n                    return (StyleableProperty<Font>)(WritableValue<Font>)bubble.textFontProperty();\n                }\n            };\n        \n        private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\n        static {\n            final List<CssMetaData<? extends Styleable, ?>> styleables = \n                    new ArrayList<>(Control.getClassCssMetaData());\n            styleables.add(BUBBLE_FILL);\n            styleables.add(TEXT_FILL);\n            styleables.add(TEXT_FONT);\n          \n            STYLEABLES = Collections.unmodifiableList(styleables);\n        }\n        \n    }\n    \n    public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\n        return StyleableProperties.STYLEABLES;\n    }\n    \n    @Override\n    public List<CssMetaData<? extends Styleable, ?>> getControlCssMetaData() {\n        return getClassCssMetaData();\n    }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PopupSkin for JavaFX Custom Control\nDESCRIPTION: Defines the skin implementation for the Popup custom control. It creates the visual layout with a background region and text content, handling the binding of properties from the control to the visual elements and managing the layout of components.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage popup;\n\nimport javafx.beans.binding.Bindings;\nimport javafx.geometry.Insets;\nimport javafx.scene.control.SkinBase;\nimport javafx.scene.layout.Background;\nimport javafx.scene.layout.BackgroundFill;\nimport javafx.scene.layout.CornerRadii;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.Region;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.TextAlignment;\n\npublic class PopupSkin extends SkinBase<Popup> {\n\n    private final Pane pane = new Pane();\n    private final Region region = new Region();\n    private final Text text = new Text();\n    \n    private final Popup control;\n    \n    public PopupSkin(Popup control) {\n        super(control);\n        this.control = control;\n        \n        initialize();\n    }\n\n    private void initialize() {\n        pane.getStyleClass().add(\"popup-pane\");\n        region.getStyleClass().add(\"popup-region\");\n        text.getStyleClass().add(\"popup-text\");\n        \n        region.backgroundProperty().bind(Bindings.createObjectBinding(()->\n                new Background(new BackgroundFill(getSkinnable().getBubbleFill(), CornerRadii.EMPTY, Insets.EMPTY)), \n                getSkinnable().bubbleFillProperty()));\n        \n        text.setTextAlignment(TextAlignment.CENTER);\n        \n        text.textProperty().bind(control.contentProperty());\n        \n        text.fillProperty().bind(control.textFillProperty());\n        text.fontProperty().bind(getSkinnable().textFontProperty());\n        \n        pane.setPrefSize(50, 50);\n        pane.getChildren().addAll(region, text);\n        getChildren().add(pane);\n    }\n\n    @Override\n    protected void layoutChildren(double contentX, double contentY, double contentWidth, double contentHeight) {\n        super.layoutChildren(contentX, contentY, contentWidth, contentHeight); \n        \n        pane.resize(contentWidth, contentHeight);\n        \n        region.setPrefSize(0.8 * contentWidth, 0.8 * contentHeight);\n        region.relocate(0.1 * contentWidth, 0.1 * contentHeight);\n        \n        text.setWrappingWidth(contentWidth / 2d);\n        \n        text.relocate(pane.getWidth() / 2d - text.getBoundsInLocal().getWidth() / 2d, \n                      pane.getHeight() / 2d - text.getBoundsInLocal().getHeight() / 2d);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmptyController Class for JavaFX FXML in Kotlin\nDESCRIPTION: This code defines a Kotlin class named EmptyController that serves as a skeleton for a JavaFX FXML controller. It includes FXML-annotated properties for resources, location, a TableView, and a VBox. The class also contains an empty mouse event handler and an initialize method that performs assertions on injected FXML elements.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Sample Skeleton for 'test' Controller Class\n */\n\npackage com.oracle.javafx.scenebuilder.kit.skeleton\n\nimport java.net.URL\nimport java.util.ResourceBundle\nimport javafx.fxml.FXML\nimport javafx.scene.control.TableView\nimport javafx.scene.input.MouseEvent\nimport javafx.scene.layout.VBox\n\nclass EmptyController {\n\n    @FXML // ResourceBundle that was given to the FXMLLoader\n    private lateinit var resources: ResourceBundle\n\n    @FXML // URL location of the FXML file that was given to the FXMLLoader\n    private lateinit var location: URL\n\n    @FXML // fx:id=\"myTableView\"\n    private lateinit var myTableView: TableView<Any> // Value injected by FXMLLoader\n\n    @FXML // fx:id=\"myVbox\"\n    private lateinit var myVbox: VBox // Value injected by FXMLLoader\n\n    @FXML\n    fun onMyVboxMouseEntered(event: MouseEvent) {\n\n    }\n\n    @FXML // This method is called by the FXMLLoader when initialization is complete\n    fun initialize() {\n        assert(myTableView != null) {\"fx:id=\\\"myTableView\\\" was not injected: check your FXML file 'test'.\" }\n        assert(myVbox != null) {\"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\" }\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaFX Controller Class in Kotlin with FXML Annotations\nDESCRIPTION: This controller class skeleton demonstrates how to create a basic JavaFX controller in Kotlin. It shows FXML field annotations for UI elements that will be injected by the FXMLLoader and includes an event handler method for mouse events. The class uses 'lateinit' for properties that will be initialized by the FXMLLoader.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n/**\n * Sample Skeleton for 'test' Controller Class\n */\n\npackage com.oracle.javafx.scenebuilder.kit.skeleton\n\nimport javafx.fxml.FXML\nimport javafx.scene.control.TableView\nimport javafx.scene.input.MouseEvent\nimport javafx.scene.layout.VBox\n\nclass EmptyController {\n\n    @FXML // fx:id=\"myTableView\"\n    private lateinit var myTableView: TableView<Any> // Value injected by FXMLLoader\n\n    @FXML // fx:id=\"myVbox\"\n    private lateinit var myVbox: VBox // Value injected by FXMLLoader\n\n    @FXML\n    fun onMyVboxMouseEntered(event: MouseEvent) {\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Popup Control in FXML\nDESCRIPTION: This FXML snippet demonstrates the use of a custom Popup control within a JavaFX layout. It shows how to set various properties of the Popup, including its content, fill color, and font styling.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.text.Font?>\n<?import popup.Popup?>\n\n<AnchorPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/21.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\">\n   <children>\n      <Popup bubbleFill=\"#19ee2b\" content=\"This is a message!\" layoutX=\"351.0\" layoutY=\"4.0\" prefHeight=\"219.0\" prefWidth=\"211.0\" textFill=\"#dd0f0f\">\n         <textFont>\n            <Font name=\"Bradley Hand Bold\" size=\"25.0\" />\n         </textFont>\n      </Popup>\n   </children>\n</AnchorPane>\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaFX FXML Controller in Kotlin\nDESCRIPTION: A template implementation of a JavaFX FXML controller class in Kotlin. It includes FXML-injected fields for resources, location, a TableView, and a VBox, along with an event handler method and initialization logic with assertions to verify proper FXML injection.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_full.txt#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage com.oracle.javafx.scenebuilder.kit.skeleton\n\nimport java.net.URL\nimport java.util.ResourceBundle\nimport javafx.fxml.FXML\nimport javafx.scene.control.TableView\nimport javafx.scene.input.MouseEvent\nimport javafx.scene.layout.VBox\n\nclass EmptyController {\n\n    @FXML\n    private lateinit var resources: ResourceBundle\n\n    @FXML\n    private lateinit var location: URL\n\n    @FXML\n    private lateinit var myTableView: TableView<Any>\n\n    @FXML\n    private lateinit var myVbox: VBox\n\n    @FXML\n    fun onMyVboxMouseEntered(event: MouseEvent) {\n\n    }\n\n    @FXML\n    fun initialize() {\n        assert(myTableView != null) {\"fx:id=\\\"myTableView\\\" was not injected: check your FXML file 'test'.\" }\n        assert(myVbox != null) {\"fx:id=\\\"myVbox\\\" was not injected: check your FXML file 'test'.\" }\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaFX Controller Class with FXML Annotations\nDESCRIPTION: This code snippet defines a basic JavaFX controller class with FXML annotations for UI components. It includes fields for a TableView and VBox, as well as an empty event handler method for mouse events on the VBox.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Sample Skeleton for 'test' Controller Class\n */\n\npackage com.oracle.javafx.scenebuilder.kit.skeleton;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TableView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\n\npublic class EmptyController {\n\n    @FXML // fx:id=\"myTableView\"\n    private TableView<?> myTableView; // Value injected by FXMLLoader\n\n    @FXML // fx:id=\"myVbox\"\n    private VBox myVbox; // Value injected by FXMLLoader\n\n    @FXML\n    void onMyVboxMouseEntered(MouseEvent event) {\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example FXML for Testing Custom Control Loading\nDESCRIPTION: A minimal FXML file used by Scene Builder to test if a class can be loaded as a custom control. This example shows how Scene Builder attempts to validate a 'Popup' control by creating a simple FXML reference to it.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<?import popup.Popup?>\n<Popup/>\n```\n\n----------------------------------------\n\nTITLE: Implementing JRubyFX Controller Class in Ruby\nDESCRIPTION: Defines an EmptyController class that includes JRubyFX::Controller module. It sets up FXML integration, defines instance variables for UI elements, and includes initialization and event handling methods.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_ruby_full_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass EmptyController\n    include JRubyFX::Controller\n\n    # java_import 'java.net.URL'\n    # java_import 'java.util.ResourceBundle'\n\n    # Marks this class as being a controller for the given fxml document\n    # This creates @instance_variables for all fx:id\n    fxml 'test.fxml'\n\n    # These @instance_variables will be injected by FXMLLoader & JRubyFX\n    # @myTableView: \tTableView<?>\n    # @myVbox: \tVBox\n\n    # ResourceBundle that was given to the FXMLLoader. Access as self.resources, or @resources if instance_variable is true\n    java_field '@javafx.fxml.FXML java.util.ResourceBundle resources', instance_variable: true\n\n    # URL location of the FXML file that was given to the FXMLLoader. Access as self.location, or @location if instance_variable is true\n    java_field '@javafx.fxml.FXML java.net.URL location', instance_variable: true\n\n    # Called by JRubyFX after FXML loading is complete. Different from Java, same as normal Ruby\n    def initialize()\n        raise 'fx:id=\"myTableView\" was not injected: check your FXML file \"test\".' if @myTableView.nil?\n        raise 'fx:id=\"myVbox\" was not injected: check your FXML file \"test\".' if @myVbox.nil?\n\n    end\n\n    def onMyVboxMouseEntered(event) # event: MouseEvent\n\n    end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing JRubyFX Controller in Ruby\nDESCRIPTION: This code snippet defines an EmptyController class using JRubyFX. It sets up FXML integration, declares instance variables for UI elements, and includes an initialization method that checks for proper injection of FXML elements.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_ruby_full.txt#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass EmptyController\n    include JRubyFX::Controller\n\n    # java_import 'java.net.URL'\n    # java_import 'java.util.ResourceBundle'\n\n    fxml 'test.fxml'\n\n    # @myTableView: \tTableView<?>\n    # @myVbox: \tVBox\n\n    java_field '@javafx.fxml.FXML java.util.ResourceBundle resources', instance_variable: true\n    java_field '@javafx.fxml.FXML java.net.URL location', instance_variable: true\n\n    def initialize()\n        raise 'fx:id=\"myTableView\" was not injected: check your FXML file \"test\".' if @myTableView.nil?\n        raise 'fx:id=\"myVbox\" was not injected: check your FXML file \"test\".' if @myVbox.nil?\n\n    end\n\n    def onMyVboxMouseEntered(event) # event: MouseEvent\n\n    end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Popup Control in JavaFX CSS\nDESCRIPTION: This CSS snippet defines the shape and background color of a custom popup control in JavaFX. It uses an SVG path to create a speech bubble shape and sets the background color to red.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.popup > .popup-pane > .popup-region {\n    /* https://commons.wikimedia.org/wiki/File:Speech_bubble.svg */\n    -fx-shape: \"M 45.673,0 C 67.781,0 85.703,12.475 85.703,27.862 C 85.703,43.249 67.781,55.724 45.673,55.724 C 38.742,55.724 32.224,54.497 26.539,52.34 C 15.319,56.564 0,64.542 0,64.542 C 0,64.542 9.989,58.887 14.107,52.021 C 15.159,50.266 15.775,48.426 16.128,46.659 C 9.618,41.704 5.643,35.106 5.643,27.862 C 5.643,12.475 23.565,0 45.673,0 M 45.673,2.22 C 24.824,2.22 7.862,13.723 7.862,27.863 C 7.862,34.129 11.275,40.177 17.472,44.893 L 18.576,45.734 L 18.305,47.094 C 17.86,49.324 17.088,51.366 16.011,53.163 C 15.67,53.73 15.294,54.29 14.891,54.837 C 18.516,53.191 22.312,51.561 25.757,50.264 L 26.542,49.968 L 27.327,50.266 C 32.911,52.385 39.255,53.505 45.673,53.505 C 66.522,53.505 83.484,42.002 83.484,27.862 C 83.484,13.722 66.522,2.22 45.673,2.22 L 45.673,2.22 z \";\n    -fx-background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaFX Controller Class with FXML Annotations in Java\nDESCRIPTION: This code snippet defines a static inner class 'InnerController' that acts as a controller for a JavaFX UI. It uses FXML annotations to inject UI components and declare an event handler method. The class includes a TableView, a VBox, and a method to handle mouse enter events on the VBox.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_java_nested.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport javafx.fxml.FXML;\nimport javafx.scene.control.TableView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\n\npublic static class InnerController {\n\n    @FXML\n    private TableView<?> myTableView;\n\n    @FXML\n    private VBox myVbox;\n\n    @FXML\n    void onMyVboxMouseEntered(MouseEvent event) {\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JavaFX Inner Controller in Kotlin\nDESCRIPTION: This code snippet defines an InnerController class for a JavaFX application. It includes FXML-annotated properties for a TableView and VBox, as well as a mouse event handler method for the VBox.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_kotlin_nested.txt#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nimport javafx.fxml.FXML\nimport javafx.scene.control.TableView\nimport javafx.scene.input.MouseEvent\nimport javafx.scene.layout.VBox\n\nclass InnerController {\n\n    @FXML\n    private lateinit var myTableView: TableView<Any>\n\n    @FXML\n    private lateinit var myVbox: VBox\n\n    @FXML\n    fun onMyVboxMouseEntered(event: MouseEvent) {\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Package Names for Custom Control Detection in Scene Builder\nDESCRIPTION: A code snippet showing the package name prefixes that Scene Builder excludes when searching for potential custom controls. These packages are typically part of the standard Java and JavaFX libraries or core Scene Builder functionality.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\"java.\", \"javax.\", \"javafx.\", \"com.oracle.javafx.scenebuilder.\", \"com.javafx.\", \"module-info\", \"com.gluonhq.charm.glisten\")}\n```\n\n----------------------------------------\n\nTITLE: Defining a JRubyFX Controller Class with FXML Integration\nDESCRIPTION: This code shows how to create a controller class in JRubyFX that connects to an FXML file. It demonstrates the pattern for including the JRubyFX::Controller module, loading an FXML file with the 'fxml' directive, and defining event handlers for UI components that will be automatically connected to the FXML elements.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_ruby_comments.txt#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n# Sample Skeleton for 'test' Controller Class\nclass EmptyController\n    include JRubyFX::Controller\n\n    # Marks this class as being a controller for the given fxml document\n    # This creates @instance_variables for all fx:id\n    fxml 'test.fxml'\n\n    # These @instance_variables will be injected by FXMLLoader & JRubyFX\n    # @myTableView: \tTableView<?>\n    # @myVbox: \tVBox\n\n    def onMyVboxMouseEntered(event) # event: MouseEvent\n\n    end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Defining JRubyFX Controller Class in Ruby\nDESCRIPTION: This code snippet defines an InnerController class that includes JRubyFX::Controller functionality. It loads an FXML file, declares instance variables for UI components, and includes an empty event handler method.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/kit/src/test/resources/com/oracle/javafx/scenebuilder/kit/skeleton/skeleton_ruby_nested.txt#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nclass InnerController\n    include JRubyFX::Controller\n\n    fxml 'test.fxml'\n\n    # @myTableView: \tTableView<?>\n    # @myVbox: \tVBox\n\n    def onMyVboxMouseEntered(event) # event: MouseEvent\n\n    end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Scene Builder Kit Dependency in Maven XML\nDESCRIPTION: XML snippet showing how to add the Scene Builder Kit dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the Scene Builder Kit.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>com.gluonhq.scenebuilder</groupId>\n  <artifactId>kit</artifactId>\n  <version>$version</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Scene Builder JAR with JavaFX SDK\nDESCRIPTION: Shell command to run the Scene Builder JAR file with the JavaFX SDK. It sets the module path, adds required modules, and specifies the main class to run.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\njava \\\n--module-path /path/to/javafx-sdk-$javafxVersion/lib \\\n--add-modules javafx.web,javafx.fxml,javafx.swing,javafx.media \\\n--add-opens=javafx.fxml/javafx.fxml=ALL-UNNAMED \\\n-cp app/target/lib/scenebuilder-$version-all.jar \\\ncom.oracle.javafx.scenebuilder.app.SceneBuilderApp\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Scene Builder Kit\nDESCRIPTION: Shell command to build and install the Scene Builder Kit in the local Maven repository. This command cleans, compiles, and installs the 'kit' module.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw clean install -f kit\n```\n\n----------------------------------------\n\nTITLE: Installing Scene Builder Dependencies\nDESCRIPTION: Shell command to install all dependencies for Scene Builder locally using Maven Wrapper. This step is necessary before running the application.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw install\n```\n\n----------------------------------------\n\nTITLE: Building Scene Builder with Maven Wrapper\nDESCRIPTION: Shell command to build the Scene Builder services using Maven Wrapper. This command cleans the project, compiles the source code, and packages the application.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Running Scene Builder with Maven\nDESCRIPTION: Shell command to start Scene Builder using Maven and the JavaFX Maven plugin. This command runs the application from the 'app' module.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw javafx:run -f app\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Custom Control with CSS\nDESCRIPTION: Empty CSS file for styling the Popup control. This file is loaded by the Popup control and can be used to customize the appearance of the control through CSS rules that target the .popup class and its children.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/docs/librarymanager.md#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Checkstyle for Code Style Validation\nDESCRIPTION: Shell command to run the Maven Checkstyle plugin for validating code style across the project. This generates reports for each subproject.\nSOURCE: https://github.com/gluonhq/scenebuilder/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw checkstyle:checkstyle\n```"
  }
]