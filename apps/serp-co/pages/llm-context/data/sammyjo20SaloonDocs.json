[
  {
    "owner": "sammyjo20",
    "repo": "saloon-docs",
    "content": "TITLE: Basic Request Pooling Comparison in PHP\nDESCRIPTION: Demonstrates the performance difference between synchronous and concurrent requests using Saloon's pool feature. Shows how to make 1000 API calls with both approaches.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector = new TestConnector;\n\n// ‚¨áÔ∏è Takes 60 seconds... üò™\n\n$requests = function () {\n    for ($i = 0; $i < 1000; $i++) {\n        $connector->send(new GetUserRequest);\n    }\n};\n\n// ‚¨áÔ∏è Takes 2.5 seconds! üî•\n\n$requests = function () {\n    for ($i = 0; $i < 1000; $i++) {\n        yield new GetUserRequest;\n    }\n};\n\n$connector->pool($requests, concurrency: 10)->send()->wait();\n```\n\n----------------------------------------\n\nTITLE: Implementing SDK Base Connector in PHP with Saloon\nDESCRIPTION: Creates a base SDK connector class for Pok√©API that handles authentication, base URL configuration, and default headers. This serves as the main entry point for the SDK.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Pokeapi;\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\Connector;\nuse Saloon\\Http\\Auth\\TokenAuthenticator;\n\nclass Pokeapi extends Connector\n{\n    public function __construct(protected readonly string $token) {}\n\n    public function resolveBaseUrl(): string\n    {\n        return 'https://pokeapi.co/api/v2';\n    }\n\n    protected function defaultHeaders(): array\n    {\n        return [\n            'Accept' => 'application/json',\n            'Content-Type' => 'application/json',\n        ];\n    }\n    \n    protected function defaultAuth(): TokenAuthenticator\n    {\n        return new TokenAuthenticator($this->token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication in Saloon\nDESCRIPTION: Example of using TokenAuthenticator to add an Authorization Bearer header to requests in a Forge connector. The token is stored as a readonly property and provided to the authenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\TokenAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(public readonly string $token) {}\n    \n    protected function defaultAuth(): TokenAuthenticator\n    {\n        return new TokenAuthenticator($this->token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SDK Method Shortcuts\nDESCRIPTION: Shows how to create convenience methods in the connector class for common API operations.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Pokeapi extends Connector\n{\n    // ...\n    \n    public function allPokemon(int $page): Response\n    {\n        return $this->send(new GetAllPokemon($page));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Usage in PHP with Saloon\nDESCRIPTION: Demonstrates basic usage of Saloon's pagination feature to iterate through paginated API results\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spotifyConnector = new SpotifyConnector;\n\n$likedSongs = $spotifyConnector->paginate(new GetLikedSongsRequest);\n\nforeach($likedSongs->items() as $likedSong) {\n    // e.g. Luke Combs - When It Rains It Pours üéµ\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Synchronous Requests with Saloon in PHP\nDESCRIPTION: This snippet demonstrates how to send a synchronous request using a Saloon connector. It instantiates a ForgeConnector, creates a GetServersRequest, and sends the request using the send method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/sending-requests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n$request = new GetServersRequest;\n\n$response = $forge->send($request);\n```\n\n----------------------------------------\n\nTITLE: Using Laravel Collections with Pagination\nDESCRIPTION: Example of using Laravel LazyCollection with Saloon's pagination for advanced data manipulation\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate(new GetLikedSongsRequest);\n$collection = $paginator->collect();\n\n$results = $collection\n    ->filter(function (array $song) {\n        return count($song['artists']) > 1;\n    })\n    ->map(function (array $song) {\n        return $song['name'];\n    })\n    ->sort();\n    \nforeach($results as $song) {\n    // $song: \"When It Rains It Pours\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Authentication Methods in Saloon\nDESCRIPTION: Example of using MultiAuthenticator to combine multiple authenticator classes like a certificate and an authorization token. Both authentication methods are initialized and passed to the MultiAuthenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\MultiAuthenticator;\nuse Saloon\\Http\\Auth\\TokenAuthenticator;\nuse Saloon\\Http\\Auth\\CertificateAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(\n        public readonly string $certificate,\n        public readonly string $token\n    ){}\n    \n    protected function defaultAuth(): MultiAuthenticator\n    {\n        return new MultiAuthenticator(\n            new CertificateAuthenticator($this->certificate),\n            new TokenAuthenticator($this->token),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon PHP via Composer\nDESCRIPTION: Command to install Saloon PHP library version 3.0 or higher using Composer. This is the required installation method to start using Saloon in your PHP projects.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/installation.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require saloonphp/saloon \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authenticator Classes in Saloon\nDESCRIPTION: Example of implementing a custom authenticator by creating a class that implements the Authenticator interface. The set method is used to modify the PendingRequest with custom authentication logic.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\nuse Saloon\\Contracts\\Authenticator;\n\nclass ForgeAuthenticator implements Authenticator\n{\n    public function __construct(public readonly string $token) {}\n\n    public function set(PendingRequest $pendingRequest): void\n    {\n        // $pendingRequest->headers()->add(...);\n        // $pendingRequest->config()->add(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Parameter Authentication in Saloon\nDESCRIPTION: Example of using QueryAuthenticator to add an API key as a query parameter to requests. The token is stored as a readonly property and provided with a parameter name to the authenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\QueryAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(public readonly string $token) {}\n    \n    protected function defaultAuth(): QueryAuthenticator\n    {\n        return new QueryAuthenticator('api-key', $this->token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Request Pool with Configuration\nDESCRIPTION: Shows how to initialize a request pool with optional parameters including requests array, concurrency level, and response handlers.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n\n// Pool has various optional parameters if you want to set them here...\n\n$pool = $forge->pool(\n    requests: [],\n    concurrency: 5,\n    responseHandler: function () { ... },\n    exceptionHandler: function () { ... },\n);\n\n// Initiate the transfer of requests\n\n$promise = $pool->send();\n\n// Force all the requests to be fulfilled\n\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Saloon\nDESCRIPTION: Example of using BasicAuthenticator to add a Base64 encoded Authorization Basic header to requests. Username and password are stored as readonly properties and provided to the authenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\BasicAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(\n        public readonly string $username,\n        public readonly string $password\n    ){}\n    \n    protected function defaultAuth(): BasicAuthenticator\n    {\n        return new BasicAuthenticator($this->username, $this->password);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving HTTP Response Data in Saloon PHP\nDESCRIPTION: Demonstrates how to send a request using Saloon and access basic response properties like status code and body content.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n$request = new GetServersRequest;\n\n$response = $forge->send($request);\n\n$status = $response->status();\n$body = $response->body();\n```\n\n----------------------------------------\n\nTITLE: Registering GuzzleSender as a Singleton in Laravel ServiceProvider\nDESCRIPTION: This snippet shows how to register Saloon's GuzzleSender as a singleton in a Laravel service provider. By binding the GuzzleSender to the container, Laravel will maintain the same instance across requests, allowing connections to remain open between requests or jobs.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/how-to-guides/improving-speed-with-laravel.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Senders\\GuzzleSender;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->singleton(GuzzleSender::class, fn () => new GuzzleSender);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Test with Global MockClient for API Integration in PHP\nDESCRIPTION: Demonstrates how to write a test that mocks an API integration using Saloon's global MockClient. The test verifies that API data is properly stored in the database.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Faking\\MockClient;\nuse Saloon\\Http\\Faking\\MockResponse;\n\ntest('can store servers in the database from laravel forge', function () {\n    MockClient::global([\n        GetServersRequest::class => MockResponse::make(\n            body: [\n                'data' => [\n                    ['name' => 'WEB-1', 'ip' => '192.168.0.1'],\n                    ['name' => 'WEB-2', 'ip' => '192.168.0.2'],\n                ],\n            ],\n            status: 200,\n        ),\n    ]);\n\n    $this->assertDatabaseCount('servers', 0);\n    \n    // Call our controller which will invoke the Saloon request\n\n    $this\n        ->getJson('/api/servers/sync')\n        ->assertOk();\n        \n    // Assert our database has created servers!\n        \n    $this->assertDatabaseCount('servers', 2);\n    \n    $this->assertDatabaseHas('servers', [\n        'name' => 'WEB-1',\n        'ip' => '192.168.0.1',\n    ]);\n    \n    $this->assertDatabaseHas('servers', [\n        'name' => 'WEB-2',\n        'ip' => '192.168.0.2',\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Before Retry in Saloon\nDESCRIPTION: Implements the handleRetry method to modify a request before it's retried. This example shows how to update authentication when a 401 Unauthorized response is received, improving chances of success on retry.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Exceptions\\RequestException;\nuse Saloon\\Http\\Auth\\TokenAuthenticator;\nuse Saloon\\Exceptions\\FatalRequestException;\n\nclass ForgeConnector extends Connector\n{\n    public ?int $tries = 3;\n    \n    public function handleRetry(FatalRequestException|RequestException $exception, Request $request): bool\n    {\n        if ($exception instanceof RequestException && $exception->getResponse()->status() === 401) {\n            $request->authenticate(new TokenAuthenticator($this->getNewToken()));\n        }\n        \n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Settings in Connector\nDESCRIPTION: Demonstrates how to configure OAuth2 settings including client credentials, base URL, token endpoint, and request modifications.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Traits\\OAuth2\\ClientCredentialsGrant;\n\nclass WarehouseConnector extends Connector\n{\n    use ClientCredentialsGrant;\n\n    public function resolveBaseUrl(): string\n    {\n        return 'https://local-warehouse.app';\n    }\n\n    protected function defaultOauthConfig(): OAuthConfig\n    {\n        return OAuthConfig::make()\n            ->setClientId('my-client-id')\n            ->setClientSecret('my-client-secret')\n            ->setDefaultScopes(['inventory.read'])\n            ->setTokenEndpoint('/oauth/token')\n            ->setRequestModifier(function (Request $request) {\n                // Optional: Modify the requests being sent.\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Query Parameters to Saloon Request\nDESCRIPTION: Demonstrates how to dynamically add query parameters to a Saloon request instance using the query method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = new GetServersRequest;\n\n$request->query()->add('sort', 'provider');\n```\n\n----------------------------------------\n\nTITLE: Fixing Connection Leaks with Anonymous Functions in Saloon Connectors\nDESCRIPTION: Demonstrates how to avoid connection leaks in long-running processes like Laravel Queues by properly implementing middleware callbacks. Shows incorrect usage with standard closures and correct implementations using either invokable classes or static functions.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/known-issues.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SDK extends Connector\n{\n    protected Closure $callable;\n\n    public function __construct()\n    {  \n        // ‚ùå This will cause connection leaks\n        $this->middleware()->onRequest(function () {\n            //\n        });\n        \n        // ‚úÖ Using an invokable class will work\n        $this->middleware()->onRequest(new MyRequestMiddleware);\n\n        // ‚úÖ Using static will work\n        $this->middleware()->onRequest(static function () {\n            //\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in Saloon (PHP)\nDESCRIPTION: Demonstrates how to add global middleware in Saloon using the Config class. Global middleware is applied to all requests and should be named to prevent duplicate registration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Config;\n\nConfig::globalMiddleware()->onResponse(new LogResponse, 'logResponse');\n```\n\n----------------------------------------\n\nTITLE: Sending a Request with Retry Functionality in Saloon\nDESCRIPTION: Demonstrates how to initialize a connector with retry functionality and send a request. If the request fails, it will be retried according to the connector's configuration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$forgeConnector = new ForgeConnector;\n\n$response = $forgeConnector->send(new UnreliableRequest);\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Requests with Saloon in PHP\nDESCRIPTION: This snippet shows how to send an asynchronous request using Saloon. It uses the sendAsync method, which returns a PromiseInterface. The code demonstrates handling both successful responses and exceptions using then and otherwise methods.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/sending-requests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector('api-token');\n$promise = $forge->sendAsync(new GetServersRequest);\n\n$promise\n   ->then(function (Response $response) {\n      // Handle Response\n   })\n   ->otherwise(function (RequestException $exception) {\n      // Handle Exception\n   });\n   \n$promise->wait(); // Force the promise to be resolved\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Pagination with getTotalPages\nDESCRIPTION: Implementation of async pagination by adding getTotalPages method to determine total number of pages.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    public function paginate(Request $request): PagedPaginator\n    {\n        return new class(connector: $this, request: $request) extends PagedPaginator\n        {\n            // ...\n            \n            protected function getTotalPages(Response $response): int\n            {\n                return $response->json('total_results');\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth2 Access Tokens in PHP using Saloon\nDESCRIPTION: Demonstrates how to check for expired tokens and refresh them using the Saloon connector. Shows interaction with a user model for storing and retrieving authenticator instances.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// $user in this example is my application's user\n\n$authenticator = $user->getCachedAuthenticator();\n$connector = new SpotifyConnector;\n\nif ($authenticator->hasExpired()) {\n    // We'll refresh the access token which will return a new authenticator\n    // which we can store against our user in our application.\n\n    $authenticator = $connector->refreshAccessToken($authenticator);\n    $user->updateAuthenticator($authenticator);\n}\n\n// Authenticate our connector and send the request\n\n$connector->authenticate($authenticator);\n\n$response = $connector->send(new GetTracksRequest);\n```\n\n----------------------------------------\n\nTITLE: Accessing Response from DTO in PHP using Saloon\nDESCRIPTION: This snippet shows how to access the original response from a DTO by implementing the WithResponse interface and using the HasResponse trait. It allows for easier debugging and access to the underlying response data.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/data-transfer-objects.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Traits\\Responses\\HasResponse;\nuse Saloon\\Contracts\\DataObjects\\WithResponse;\n\nclass Server implements WithResponse\n{\n    use HasResponse;\n\n    public function __construct(\n        public readonly int $id,\n        public readonly string $name,\n        public readonly string $ipAddress,\n    ){}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Response Status and Failure in Saloon\nDESCRIPTION: Shows how to check if a request has failed and access status code and response body information.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n$response = $forge->send(new ErrorRequest);\n\n$response->failed(); // true\n$response->status(); // 500\n$response->body(); // {\"message\": \"Server Error\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Connector in Saloon PHP\nDESCRIPTION: This snippet demonstrates how to create a basic connector class for Laravel Forge API by extending the Saloon Connector class and implementing the required resolveBaseUrl method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\n\nclass ForgeConnector extends Connector\n{\n    public function resolveBaseUrl(): string\n    {\n        return 'https://forge.laravel.com/api/v1';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Pagination\nDESCRIPTION: Example of using async pagination with Promise-based iteration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate(new GetLikedSongsRequest);\n\n$paginator->async();\n\nforeach($paginator as $promise) {\n    // $promise->then()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Constructor Arguments in a Saloon Connector\nDESCRIPTION: This snippet demonstrates how to use constructor arguments to configure a connector dynamically, such as setting the base URL at runtime.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    public function __construct(protected readonly string $baseUrl) {\n        //\n    }\n\n    public function resolveBaseUrl(): string\n    {\n        return $this->baseUrl;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to a Connector Instance\nDESCRIPTION: This snippet demonstrates how to add headers to an existing connector instance using the headers method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$forge = new ForgeConnector;\n\n$forge->headers()->add('Content-Type', 'text/plain');\n```\n\n----------------------------------------\n\nTITLE: Using SDK Resource Methods\nDESCRIPTION: Demonstrates how to use the resource methods to make API calls through the SDK.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$pokeapi = new Pokeapi('my-api-token');\n\n$allPokemon = $pokeapi->pokemon()->all(page: 1);\n\n$giratina = $pokeapi->pokemon()->get(id: 'giratina');\n```\n\n----------------------------------------\n\nTITLE: Manipulating JSON Body in Saloon Request\nDESCRIPTION: This code demonstrates various methods to interact with and modify the JSON body of a Saloon request at runtime, including adding, removing, merging, and retrieving body content.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new CreateServerRequest;\n\n$request->body()->add('ubuntu_version', '22.04');\n\n$request->body()->merge([\n    'type' => 'app',\n    'provider' => 'ocean2',\n]);\n\n$body = $request->body()->all();\n\n// array: [\n//    'ubuntu_version' => '22.04',\n//    'type' => 'app',\n//    'provider' => 'ocean2',\n// ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Authentication in Saloon Connector Class\nDESCRIPTION: Shows how to implement the boot() method in a Saloon connector to handle authentication automatically. The connector obtains an access token before each request except the authentication request itself.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/how-to-guides/per-request-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\nuse Saloon\\Http\\Auth\\TokenAuthenticator;\n\nclass MusicApi extends Connector\n{\n    // You should move any authentication requirements into the constructor\n    // of the connector so your users have to provide the authentication\n    // requirements before instantiating the connector.\n\n    public function __construct(\n        protected string $username,\n        protected string $password,\n    )\n    {\n        //\n    }\n    \n    public function boot(PendingRequest $pendingRequest): void\n    {\n        // Let's start by returning early if the request being sent is the\n        // GetAccessTokenRequest. We don't want to create an infinite loop\n    \n        if ($pendingRequest->getRequest() instanceof GetAccessTokenRequest) {\n            return;\n        }\n        \n        // Now let's make our authentication request. Since we are in the\n        // context of the connector, we can just simply call $this and\n        // make another request!\n        \n        $authResponse = $this->send(new GetAccessTokenRequest($this->username, $this->password));\n        \n        // Now we'll take the token from the auth response and then pass it\n        // into the $pendingRequest which is the original GetSongsByArtistRequest.\n        \n        $pendingRequest->authenticate(new TokenAuthenticator($authResponse->json()['token']));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fixture Class with Redaction in Saloon\nDESCRIPTION: Shows how to create a custom fixture class that redacts sensitive information from API responses before storing them as fixtures, using various redaction methods for headers, JSON data, and regex patterns.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Fixtures\\Forge\\SingleServerFixture;\n\nuse Saloon\\Http\\Faking\\Fixture;\n\nclass SingleServerFixture extends Fixture\n{\n    protected function defineName(): string\n    {\n        return 'forge/singleServer';\n    }\n    \n    protected function defineSensitiveHeaders(): array\n    {\n        return [\n            'Authorization' => 'REDACTED',\n        ];\n    }\n\n    protected function defineSensitiveJsonParameters(): array\n    {\n        return [\n            'name' => 'REDACTED',\n            'password' => function () {\n                return faker()->password;\n            },\n        ];\n    }\n    \n    protected function defineSensitiveRegexPatterns(): array\n    {\n        return [\n            '/@[a-z0-9_]{0,100}/' => 'REDACTED-TWITTER-HANDLE',\n        ];\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Groups for SDK\nDESCRIPTION: Implements a resource pattern to group related API endpoints together using Saloon's BaseResource class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\BaseResource;\nuse Saloon\\Http\\Response;\n\nclass PokemonResource extends BaseResource\n{\n     public function all(int $page): Response\n     {\n         return $this->connector->send(new GetAllPokemon($page));\n     }\n     \n     public function get(int $id): Response\n     {\n         return $this->connector->send(new GetSinglePokemon($id));\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Headers to Saloon Request\nDESCRIPTION: Demonstrates how to dynamically add headers to a Saloon request instance using the headers method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request = new GetServersRequest;\n\n$request->headers()->add('Content-Type', 'text/plain');\n```\n\n----------------------------------------\n\nTITLE: Adding Response Middleware to Saloon Connector (PHP)\nDESCRIPTION: Demonstrates how to add response middleware to a Saloon connector using an anonymous function.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\n\n$forge = new ForgeConnector;\n\n$forge->middleware()->onResponse(function (Response $response) {\n    Logger::recordResponse($response);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a MockClient for API Testing in PHP\nDESCRIPTION: Creates a new MockClient instance to mock API responses for specific request classes or URL patterns. This example shows how to associate a mock response with a GetServersRequest class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Faking\\MockClient;\n\ntest('my test', function () {\n    $mockClient = new MockClient([\n        GetServersRequest::class => MockResponse::make(body: '', status: 200),\n    ]);\n    \n    $connector = new ForgeConnector;\n    $connector->withMockClient($mockClient);\n]);\n```\n\n----------------------------------------\n\nTITLE: Dynamic OAuth2 Configuration in Saloon Connector\nDESCRIPTION: Implementation of dynamic OAuth2 configuration through constructor injection for per-user credentials.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Traits\\OAuth2\\AuthorizationCodeGrant;\n\nclass SpotifyConnector extends Connector\n{\n    use AuthorizationCodeGrant;\n\n    public function __construct(string $clientId, string $clientSecret)\n    {\n        $this->oauthConfig()->setClientId($clientId);\n        $this->oauthConfig()->setClientSecret($clientSecret);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Methods for PagedPaginator in PHP\nDESCRIPTION: Shows how to implement the required isLastPage and getPageItems methods in a PagedPaginator. These methods determine when pagination should stop and extract the items from each page response.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/paged-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\PagedPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): PagedPaginator\n    {\n        return new class(connector: $this, request: $request) extends PagedPaginator\n        {\n            protected function isLastPage(Response $response): bool\n            {\n                return is_null($response->json('next_page_url'));\n            }\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Authenticator with a Connector in Saloon\nDESCRIPTION: Example of implementing the defaultAuth method on a connector to use a custom authenticator class. The method returns an instance of the custom ForgeAuthenticator.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    protected function defaultAuth(): ForgeAuthenticator\n    {\n        return new ForgeAuthenticator($this->token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Methods for CursorPaginator\nDESCRIPTION: Implementation of the three required methods for the CursorPaginator: getNextCursor, isLastPage, and getPageItems. These methods control pagination behavior by determining the next cursor, when to stop paginating, and extracting items from each page.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/cursor-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\CursorPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): CursorPaginator\n    {\n        return new class(connector: $this, request: $request) extends CursorPaginator\n        {\n            protected function getNextCursor(Response $response): int|string\n            {\n                return $response->json('next_cursor');\n            }\n        \n            protected function isLastPage(Response $response): bool\n            {\n                return is_null($response->json('next_cursor'));\n            }\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Custom Pagination Implementation\nDESCRIPTION: Complete example of custom pagination implementation with isLastPage and getPageItems methods.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\PaginationPlugin\\Contracts\\HasRequestPagination;\n\nclass GetLikedSongsRequest extends Request implements HasRequestPagination\n{\n    // {...}\n    \n    public function paginate(Connector $connector): Paginator;\n    {\n        return new class(connector: $connector, request: $this) extends PagedPaginator\n        {\n            protected function isLastPage(Response $response): bool\n            {\n                return is_null($response->json('next_page_url'));\n            }\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Request Pooling\nDESCRIPTION: Demonstrates how to use named/keyed requests in pools for better request tracking and response handling based on request identifiers.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$pool = $forge->pool([\n    'servers' => new GetServersRequest,\n    'sites' => new GetSitesRequest,\n    'user' => new GetUserRequest,\n]);\n\n// You may access the key in the response and error handlers\n\n$pool->withResponseHandler(function (Response $response, string $key) {\n    match($key) {\n        'servers' => $this->updateServersList($response),\n        'sites' => $this->updateSitesList($response),\n        'user' => $this->updateUser($response),\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using DTO to Populate Request Data in PHP with Saloon\nDESCRIPTION: This snippet demonstrates how to use a DTO to populate request data in Saloon. It shows the definition of an UpdateServerRequest class that accepts a Server DTO in its constructor and uses it to set default properties for the request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/data-transfer-objects.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Enums\\Method;\nuse Saloon\\Http\\Response;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass UpdateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n\n    protected Method $method = Method::PUT;\n    \n    public function __construct(readonly protected Server $server)\n    {\n        //\n    }\n    \n    public function resolveEndpoint(): string\n    {\n        return '/servers/' . $this->server->id;\n    }\n    \n    protected function defaultBody(): array\n    {\n        return [\n            'name' => $this->server->name,\n        ];\n    }\n    \n    public function createDtoFromResponse(Response $response): mixed\n    {\n        $data = $response->json();\n    \n        return new Server(\n            id: $data['id'],\n            name: $data['name'],\n            ipAddress: $data['ip'],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete OffsetPaginator with Required Methods\nDESCRIPTION: This snippet shows a complete implementation of the OffsetPaginator with all required properties and methods: perPageLimit, isLastPage, and getPageItems. It demonstrates how to determine the last page using API response metadata and extract page items.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/limit-offset-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\OffsetPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): OffsetPaginator\n    {\n        return new class(connector: $this, request: $request) extends OffsetPaginator\n        {\n            protected ?int $perPageLimit = 100;\n        \n            protected function isLastPage(Response $response): bool\n            {\n                return $this->getOffset() >= (int)$response->json('total');\n            }\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Header Authentication in Saloon\nDESCRIPTION: Example of using HeaderAuthenticator to authenticate with a custom header. The token is stored as a readonly property and provided with a header name to the authenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\HeaderAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(public readonly string $token) {}\n    \n    protected function defaultAuth(): HeaderAuthenticator\n    {\n        return new HeaderAuthenticator($this->token, 'X-API-KEY');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exponential Backoff for Retries in Saloon\nDESCRIPTION: Implements exponential backoff for retries by setting the useExponentialBackoff property. This doubles the retry interval after each unsuccessful attempt, reducing load on stressed APIs.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    public ?int $tries = 3;\n    \n    public ?int $retryInterval = 500;\n    \n    public ?bool $useExponentialBackoff = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boot Method in Saloon Connector (PHP)\nDESCRIPTION: Demonstrates how to extend the boot method in a Saloon connector to add a custom header to every request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Http\\PendingRequest;\n\nclass ForgeConnector extends Connector\n{\n    // ...\n    \n    public function boot(PendingRequest $pendingRequest): void\n    {\n        $pendingRequest->headers()->add('X-Current-Time', new DateTime);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SoloRequest Class in PHP\nDESCRIPTION: This snippet demonstrates how to create a SoloRequest class to make a single request to the Pokemon API. You need to extend SoloRequest instead of the regular Request class and define the method and full URL endpoint.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/solo-requests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\SoloRequest;\nuse Saloon\\Enums\\Method;\n\nclass GetAllPokemonRequest extends SoloRequest\n{\n    protected Method $method = Method::GET;\n    \n    public function resolveEndpoint(): string\n    {\n        return 'https://pokeapi.co/api/v2/pokemon';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth2 Response Handling in Saloon\nDESCRIPTION: Demonstrates how to customize the authentication response handling by extending the createOAuthAuthenticatorFromResponse method to parse custom API responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprotected function createOAuthAuthenticatorFromResponse(SaloonResponse $response, string $fallbackRefreshToken = null): OAuthAuthenticatorInterface\n{\n    $responseData = $response->object();\n\n    $accessToken = $responseData->access_token;\n    $refreshToken = $responseData->refresh_token ?? $fallbackRefreshToken;\n    $expiresAt = new DateTimeImmutable('+' . $responseData->expires_in . ' seconds');\n\n    return $this->createOAuthAuthenticator($accessToken, $refreshToken, $expiresAt);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Responses with Promises in Saloon PHP\nDESCRIPTION: Shows how to work with asynchronous responses using promises, including handling both successful responses and exceptions.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\n\n$forge = new ForgeConnector;\n$promise = $forge->sendAsync(new GetServersRequest);\n\n$promise\n    ->then(function (Response $response) {\n        // Handle successful response\n    })\n    ->otherwise(function (Exception $exception) {\n        // Handle failed request\n    });\n```\n\n----------------------------------------\n\nTITLE: Callable and Invokable Class Request Pool Configuration\nDESCRIPTION: Examples of using callable functions and invokable classes to provide requests to the pool with additional logic execution capabilities.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PoolClass {\n    public function __invoke() {\n        return [\n            new GetServersRequest,\n            new GetSitesRequest,\n            new GetUserRequest,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DTO Objects for Form Body in Saloon\nDESCRIPTION: This example shows using a Data Transfer Object (DTO) to structure and populate the form body. The DTO properties are mapped to form fields in the defaultBody() method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasFormBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasFormBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected Server $server\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return [\n            'ubuntu_version' => $this->server->ubuntuVersion,\n            'type' => $this->server->type,\n            'provider' => $this->server->provider,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Parameter Names in CursorPaginator\nDESCRIPTION: Extending the applyPagination method to customize how pagination parameters are applied to the request, allowing adaptation to APIs with non-standard parameter names.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/cursor-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): CursorPaginator\n{\n    return new class(connector: $this, request: $request) extends CursorPaginator\n    {\n        protected function getNextCursor(Response $response): int|string\n        {\n            return $response->json('next_cursor');\n        }\n    \n        protected function isLastPage(Response $response): bool\n        {\n            return is_null($response->json('next_cursor'));\n        }\n        \n        protected function getPageItems(Response $response, Request $request): array\n        {\n            return $response->json('items');\n        }\n        \n        protected function applyPagination(Request $request): Request\n        {\n            if ($this->currentResponse instanceof Response) {\n                $request->query()->add('pageCursor', $this->getNextCursor($this->currentResponse));\n            }\n    \n            if (isset($this->perPageLimit)) {\n                $request->query()->add('pageSize', $this->perPageLimit);\n            }\n    \n            return $request;\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Retries with Saloon v3\nDESCRIPTION: Shows how to configure automatic retry functionality at the connector level by defining the $tries property, which determines how many times a request should be retried upon failure before giving up.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/whats-new-in-v3.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    /**\n     * The number of times a request should be retried if a failure response is returned.\n     *\n     * Set to null to disable the retry functionality.\n     */\n    public ?int $tries = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OAuth2 Authenticator Creation in Saloon\nDESCRIPTION: Shows how to extend the default authenticator creation process by implementing a custom createOAuthAuthenticator method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprotected function createOAuthAuthenticator(string $accessToken, string $refreshToken, DateTimeImmutable $expiresAt): OAuthAuthenticatorInterface\n{\n    return new SpotifyAuthenticator($accessToken, $refreshToken, $expiresAt);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasBody Interface for Saloon Request in PHP\nDESCRIPTION: This snippet demonstrates how to create a Saloon request class that can send body data. It shows the use of the HasBody interface and setting the HTTP method to POST.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/README.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Sequences for API Testing in PHP\nDESCRIPTION: Configures a sequence of mock responses that will be returned in order regardless of the API call made. This is useful for testing scenarios that involve multiple sequential requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$mockClient = new MockClient([\n    MockResponse::make(body: 'First', status: 200),\n    MockResponse::make(body: 'Second', status: 200),\n    MockResponse::make(body: 'Third', status: 200),\n]);\n```\n\n----------------------------------------\n\nTITLE: Modifying XML Body at Runtime in PHP\nDESCRIPTION: This snippet demonstrates how to interact with the XML body at runtime using various methods provided by Saloon. You can set a new body, retrieve the current body, and check if the body is empty.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/xml-body.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new CreateServerRequest;\n\n$request->body()->set('<?xml version=\"1.0\"?><root></root>');\n\n$body = $request->body()->all();\n\n// string: 'plain-text-response-body'\n```\n\n----------------------------------------\n\nTITLE: Implementing Early Fake Response in Saloon Request Middleware (PHP)\nDESCRIPTION: Shows how to create an early fake response in Saloon request middleware to prevent sending a real request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\nuse Saloon\\Http\\Faking\\FakeResponse;\n\n$request = new GetServersRequest;\n\n$request->middleware()\n    ->onRequest(function (PendingRequest $pendingRequest) {\n        return new FakeResponse(\n            body: ['data' => 'Fake Data!'], \n            status: 200, \n            headers: []\n        );\n    });\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Parameters in PagedPaginator in PHP\nDESCRIPTION: Demonstrates how to override the default pagination parameter names by extending the applyPagination method. This allows adapting to APIs with non-standard pagination parameter naming.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/paged-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): PagedPaginator\n{\n    return new class(connector: $this, request: $request) extends PagedPaginator\n    {\n        protected function isLastPage(Response $response): bool\n        {\n            return is_null($response->json('next_page_url'));\n        }\n        \n        protected function getPageItems(Response $response, Request $request): array\n        {\n            return $response->json('items');\n        }\n        \n        protected function applyPagination(Request $request): Request\n        {\n            $request->query()->add('currentPage', $this->currentPage);\n    \n            if (isset($this->perPageLimit)) {\n                $request->query()->add('pageSize', $this->perPageLimit);\n            }\n    \n            return $request;\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up OAuth2 Connector Class in Saloon\nDESCRIPTION: Basic setup of a connector class with AuthorizationCodeGrant trait for OAuth2 support.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Traits\\OAuth2\\AuthorizationCodeGrant;\n\nclass SpotifyConnector extends Connector;\n{\n    use AuthorizationCodeGrant;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Response Class Resolution at Request Level in Saloon PHP\nDESCRIPTION: Demonstrates how to implement the resolveResponseClass method for more complex custom response class handling at the request level.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass GetServersRequest extends Request\n{\n    // ...\n    \n    public function resolveResponseClass(): string\n    {\n        return CustomResponse::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Authentication in Saloon\nDESCRIPTION: Example of using CertificateAuthenticator to authenticate with a client-side certificate. The certificate path and optional password are stored as readonly properties and provided to the authenticator in the defaultAuth method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Auth\\CertificateAuthenticator;\n\nclass ForgeConnector extends Connector\n{\n    public function __construct(\n        public readonly string $path,\n        public readonly string $password\n    ){}\n    \n    protected function defaultAuth(): CertificateAuthenticator\n    {\n        return new CertificateAuthenticator($this->path, $this->password);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Parameters in OffsetPaginator\nDESCRIPTION: This snippet demonstrates how to customize the pagination parameters by overriding the applyPagination method. In this example, the standard 'limit' and 'offset' parameters are replaced with 'top' and 'skip' to match an API's requirements.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/limit-offset-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): OffsetPaginator\n{\n    return new class(connector: $this, request: $request) extends OffsetPaginator\n    {\n        protected ?int $perPageLimit = 100;\n    \n        protected function isLastPage(Response $response): bool\n        {\n            return $this->getOffset() >= (int)$response->json('total');\n        }\n        \n        protected function getPageItems(Response $response, Request $request): array\n        {\n            return $response->json('items');\n        }\n        \n        protected function applyPagination(Request $request): Request\n        {\n            $request->query()->merge([\n                'top' => $this->perPageLimit,\n                'skip' => $this->getOffset(),\n            ]);\n    \n            return $request;\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Fixtures for Recorded API Responses in PHP\nDESCRIPTION: Shows how to use fixtures to record and replay API responses in tests. This approach makes a real API call the first time and saves the response as a fixture for subsequent test runs.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Faking\\MockClient;\nuse Saloon\\Http\\Faking\\MockResponse;\n\ntest('can store servers in the database from laravel forge', function () {\n    MockClient::global([\n        GetServersRequest::class => MockResponse::fixture('servers'),\n    ]);\n\n    $this->assertDatabaseCount('servers', 0);\n    \n    // Call our controller which will invoke the Saloon request\n\n    $this\n        ->getJson('/api/servers/sync')\n        ->assertOk();\n        \n    // Assert our database has created servers!\n        \n    $this->assertDatabaseCount('servers', 2);\n    \n    $this->assertDatabaseHas('servers', [\n        'name' => 'REAL-SERVER-1',\n        'ip' => '192.168.0.1',\n    ]);\n    \n    $this->assertDatabaseHas('servers', [\n        'name' => 'REAL-SERVER-2',\n        'ip' => '192.168.0.2',\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Per-Page Limit in Paginator\nDESCRIPTION: Shows how to set a default per-page limit as a property in the paginator class for APIs that require page size configuration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/custom-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): Paginator\n{\n    return new class(connector: $this, request: $request) extends Paginator\n    {\n        protected ?int $perPageLimit = 100;\n\n        // ...\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 Flow Example in Saloon\nDESCRIPTION: Demonstrates the three main steps of implementing client credentials grant: creating an access token authenticator, authenticating the connector, and sending requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$connector = new WarehouseConnector;\n\n// 1. Create an access token authenticator\n\n$authenticator = $connector->getAccessToken($scopes);\n\n// 2. Authenticate the connector\n\n$connector->authenticate($authenticator);\n\n// 3. Send your requests\n\n$connector->send(new GetInventoryRequest);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rate Limit Store in Saloon PHP\nDESCRIPTION: Shows how to implement a custom rate limit store by implementing the RateLimitStore interface. Custom stores must implement get and set methods to manage rate limit data in a storage system of choice.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\n\nclass CustomStore implements RateLimitStore\n{\n    /**\n     * Get a rate limit from the store\n     */\n    public function get(string $key): ?string\n    {\n        //\n    }\n\n    /**\n     * Set the rate limit in the store\n     */\n    public function set(string $key, string $value, int $ttl): bool\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array-based Request Pool Configuration\nDESCRIPTION: Demonstrates how to provide an array of requests to the pool using either constructor arguments or the setRequests method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n\n$forge->pool([\n    new GetServersRequest,\n    new GetSitesRequest,\n    new GetUserRequest,\n]);\n\n// Or \n\n$pool = $forge->pool();\n\n$pool->setRequests([\n    new GetServersRequest,\n    new GetSitesRequest,\n    new GetUserRequest,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Guzzle Middleware to Saloon Connector (PHP)\nDESCRIPTION: Demonstrates how to add Guzzle middleware to a Saloon connector. This should be done in the constructor to prevent multiple registrations. The example adds a custom header to the request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    // {...}\n    \n    public function __construct()\n    {\n        $this->sender()->addMiddleware(function (callable $handler) {\n            return function (RequestInterface $request, array $options) use ($handler) {\n                $request->withHeader('X-Custom-Header', 'Hello');\n                \n                return $handler($request, $options);             \n            };\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Debugger Handlers in Saloon\nDESCRIPTION: Creating custom debugging implementations by providing closures to the debugRequest and debugResponse methods, using an example with Ray for debugging.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\PendingRequest;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n// ...\n\n$connector->debugRequest(function (PendingRequest $pendingRequest, RequestInterface $psrRequest) {\n    ray($psrRequest);\n});\n\n$connector->debugResponse(function (Response $response, ResponseInterface $psrResponse) {\n    ray($psrResponse);\n});\n```\n\n----------------------------------------\n\nTITLE: Using AlwaysThrowOnErrors Trait in Saloon Connector\nDESCRIPTION: Demonstrates how to configure a connector to automatically throw exceptions on any failed request (4xx or 5xx responses).\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Traits\\Plugins\\AlwaysThrowOnErrors;\n\nclass ForgeConnector extends Connector\n{\n    use AlwaysThrowOnErrors;\n    \n    // {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Options in a Saloon Connector\nDESCRIPTION: This snippet demonstrates how to configure Guzzle HTTP client options by overriding the defaultConfig method in a connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    // ...\n\n    public function defaultConfig(): array\n    {\n        return [\n            'stream' => true,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Paginator with Saloon\nDESCRIPTION: Shows how to implement a custom paginator by extending Saloon's Paginator abstract class in a connector class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/custom-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\Paginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n\n    public function paginate(Request $request): Paginator\n    {\n        return new class(connector: $this, request: $request) extends Paginator\n        {\n            //\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Limits in Saloon PHP\nDESCRIPTION: This snippet demonstrates how to define multiple rate limits with different intervals using the Limit class in Saloon PHP.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Limit;\n\nprotected function resolveLimits(): array\n{\n    return [\n        Limit::allow(60)->everyMinute(),\n        Limit::allow(1000)->everyDay(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using assertSent/assertNotSent Methods in Saloon\nDESCRIPTION: Demonstrates how to verify that specific requests have been sent using the assertSent method, which can accept either a request class or a closure for more advanced assertions.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$mockClient->assertSent(GetServersRequest::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Invokable Response Middleware Class in Saloon (PHP)\nDESCRIPTION: Demonstrates how to create an invokable response middleware class implementing the ResponseMiddleware interface.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Contracts\\ResponseMiddleware;\n\nclass LogResponse implements ResponseMiddleware\n{\n    public function __invoke(Response $response): void\n    {\n        Logger::recordResponse($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DTO from Response in PHP using Saloon\nDESCRIPTION: This snippet shows how to extend the createDtoFromResponse method in a request class to define a DTO from an API response. It demonstrates accessing the Response object and creating a Server DTO with data from the response.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/data-transfer-objects.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\Response;\n\nclass GetServerRequest extends Request\n{\n    // {...}\n    \n    public function createDtoFromResponse(Response $response): mixed\n    {\n        $data = $response->json();\n    \n        return new Server(\n            id: $data['id'],\n            name: $data['name'],\n            ipAddress: $data['ip'],\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Saloon v3 PHP Connector Classes\nDESCRIPTION: Demonstrates how to define custom pagination in a Saloon v3 connector by implementing the HasPagination interface and returning a PagedPaginator class that handles determining the last page and extracting page items from API responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/whats-new-in-v3.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): PagedPaginator\n    {\n        // You define your own pagination class that extends one of Saloon's\n        // base pagination classes. This makes overwriting super easy.\n    \n        return new class(connector: $this, request: $request) extends PagedPaginator\n        {\n            // Determine if we are on the last page...\n        \n            protected function isLastPage(Response $response): bool\n            {\n                return is_null($response->json('next_page_url'));\n            }\n            \n            // Get page items...\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts in Saloon\nDESCRIPTION: Shows how to customize connection and request timeouts using the HasTimeout trait.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Traits\\Plugins\\HasTimeout;\n\nclass GetServersRequest extends Request\n{\n    use HasTimeout;\n    \n    protected int $connectTimeout = 60;\n    \n    protected int $requestTimeout = 120;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Saloon Connector to Use the Container-Bound GuzzleSender\nDESCRIPTION: This code demonstrates how to override the defaultSender method in a Saloon connector to use the GuzzleSender instance from Laravel's container. This ensures the connector reuses the same GuzzleSender and underlying Guzzle client across multiple requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/how-to-guides/improving-speed-with-laravel.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Contracts\\Sender;\nuse Saloon\\Http\\Senders\\GuzzleSender;\n\nclass SpotifyConnector extends Connector\n{\n    protected function defaultSender(): Sender\n    {\n        return resolve(GuzzleSender::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Throwing on Max Retries in Saloon\nDESCRIPTION: Configures the connector to return the last received response instead of throwing an exception when max retry attempts are reached. This only applies to RequestException, as FatalRequestException will still be thrown.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    public ?int $tries = 3;\n    \n    public ?bool $throwOnMaxTries = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Saloon Connector Constructor (PHP)\nDESCRIPTION: Shows how to register both request and response middleware in a Saloon connector's constructor for consistent application.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    // {...}\n    \n    public function __construct()\n    {\n        $this->middleware()->onRequest(new AuthenticateRequest);\n        $this->middleware()->onResponse(new LogResponse);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DTO Request Handler\nDESCRIPTION: Example of a request class that handles DTO conversion for liked songs from Spotify API.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass GetLikedSongsRequest extends Request\n{\n    // {...}\n    \n    public function createDtoFromResponse(Response $response): array\n    {\n        return array_map(function (array $song) {\n            return Song::fromArray($song);\n        }, $response->json('items'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Response Class Resolution at Connector Level in Saloon PHP\nDESCRIPTION: Demonstrates how to implement the resolveResponseClass method for more complex custom response class handling at the connector level.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    // ...\n    \n    public function resolveResponseClass(): string\n    {\n        return CustomResponse::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generator-based Request Pool Configuration\nDESCRIPTION: Shows how to use PHP generators to create request pools with low memory consumption for handling large numbers of requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$generatorCallback = function (): Generator {\n    for ($i = 0; $i < 3; $i++) {\n        yield $i => new UserRequest;\n    }\n};\n\n$forge = new ForgeConnector;\n$pool = $forge->pool($generatorCallback);\n\n// or\n\n$pool->setRequests($generatorCallback);\n```\n\n----------------------------------------\n\nTITLE: Testing Plugins with Lawman\nDESCRIPTION: Example showing how to test SaloonPHP plugins like pagination, caching, and rate limits using Lawman expectations. The code verifies that a request properly implements these features.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ntest('request')\n    ->expect('App\\Http\\Integrations\\Integration\\Requests\\Request')\n    ->toBeSaloonRequest()\n    ->toSendPostRequest()\n    ->toUsePagedPagination()\n    ->toHaveCaching()\n    ->toHaveRateLimits()\n```\n\n----------------------------------------\n\nTITLE: Accessing PSR-7 Request and Response in Saloon PHP\nDESCRIPTION: Demonstrates how to retrieve PSR-7 request and response objects from a Saloon response. This allows developers to interact with standardized HTTP message interfaces.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/psr-support.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$response = $forgeConnector->send(new GetServersRequest);\n\n$psrResponse = $response->getPsrResponse();\n$psrRequest = $response->getPsrRequest();\n```\n\n----------------------------------------\n\nTITLE: Using Invokable Request Middleware in Saloon Request (PHP)\nDESCRIPTION: Demonstrates how to use an invokable request middleware class with a specific Saloon request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$request = new GetServersRequest;\n$request->middleware()->onRequest(new AuthenticateRequest);\n```\n\n----------------------------------------\n\nTITLE: Using Invokable Response Middleware in Saloon Connector (PHP)\nDESCRIPTION: Shows how to use an invokable response middleware class with a Saloon connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$forge = new ForgeConnector;\n$forge->middleware()->onResponse(new LogResponse);\n```\n\n----------------------------------------\n\nTITLE: Using XML Wrangler Reader for XML Parsing in PHP\nDESCRIPTION: Demonstrates how to use XML Wrangler's reader to convert XML to arrays, query XML with dot notation, and access element attributes. The reader supports converting entire XML documents to arrays and provides methods for precise data extraction.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/xml-wrangler.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\XmlWrangler\\XmlReader;\n\n$reader = XmlReader::fromString($xml);\n\n// Convert XML to an array\n\n$reader->values(); // ['breakfast_menu' => [['name' => '...'], ['name' => '...'], ['name' => '...']]\n\n// Query the XML\n\n$reader->value('food.0')->sole(); // ['name' => 'Belgian Waffles', 'price' => '$5.95', ...]\n\n$reader->xpathValue('//food[@bestSeller=\"true\"]/name')->get(); // ['Belgian Waffles', 'Berry-Berry Belgian Waffles']\n\n$reader->element('food.0')->sole()->getAttributes(); // ['soldOut' => false, 'bestSeller' => true]\n```\n\n----------------------------------------\n\nTITLE: Using the Automatic Authentication Connector in PHP\nDESCRIPTION: Demonstrates how to use the improved connector with automatic authentication. Authentication credentials are provided once when instantiating the connector, and subsequent requests are automatically authenticated.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/how-to-guides/per-request-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$api = new MusicApi(\n    username: 'Sam',\n    password: 'yee-haw',\n);\n\n$response = $api->send(new GetSongsByArtistRequest('Luke Combs'));\n\n// 200 body: [{name: 'When it rains, it pours'}]\n```\n\n----------------------------------------\n\nTITLE: Retrieving DTO from Response in PHP using Saloon\nDESCRIPTION: This snippet shows how to retrieve a DTO from a response using the Saloon library. It demonstrates both the dto() method for creating a DTO regardless of response status and dtoOrFail() for creating a DTO only on successful responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/data-transfer-objects.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector = new ForgeConnector;\n\n$response = $connector->send(new GetServerRequest(id: 12345));\n\n// Create a DTO even if the response was a failure\n$server = $response->dto();\n\n// Create a DTO or throw an exception if the response is not successful\n$server = $response->dtoOrFail();\n```\n\n----------------------------------------\n\nTITLE: Using Invokable Response Middleware in Saloon Request (PHP)\nDESCRIPTION: Demonstrates how to use an invokable response middleware class with a specific Saloon request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$request = new GetServersRequest;\n$request->middleware()->onResponse(new LogResponse);\n```\n\n----------------------------------------\n\nTITLE: Runtime Authentication Override in Saloon\nDESCRIPTION: Example of using the authenticate method to apply or override an authenticator at runtime. This allows dynamically changing the authentication method without modifying the connector class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$forge = new ForgeConnector;\n\n$forge->authenticate(new TokenAuthenticator($user->forge_token));\n\n// $forge->send(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Thresholds for Rate Limits in Saloon PHP\nDESCRIPTION: This snippet demonstrates how to set a custom threshold for rate limits in Saloon PHP, allowing for fine-tuning of when the limit is considered reached.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Limit;\n\nprotected function resolveLimits(): array\n{\n    return [\n        Limit::allow(60, threshold: 0.8)->everyMinute(), // Will fail when at 80% capacity\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 Flow Implementation in PHP using Saloon\nDESCRIPTION: Example showing the complete OAuth2 authorization code flow including authorization URL generation, token retrieval, authentication and token refresh.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$connector = new SpotifyConnector;\n\n// 1. Redirect the user to the authorization URL...\n\n$authorizationUrl = $connector->getAuthorizationUrl($scopes, $state);\n\n// 2. Handle the callback from the API provider and create an access token...\n\n$authenticator = $connector->getAccessToken($code, $state);\n\n// 3. Authenticate the connector\n\n$connector->authenticate($authenticator);\n\n// 4. Send your requests\n\n$connector->send(new GetTracksRequest);\n\n// 5. Refresh your access tokens...\n\n$newAuthenticator = $connector->refreshAccessToken($authenticator);\n```\n\n----------------------------------------\n\nTITLE: Customizing Middleware Execution Order in Saloon Request (PHP)\nDESCRIPTION: Shows how to specify the execution order of middleware in a Saloon request using the PipeOrder enum. This allows for fine-grained control over when middleware is executed in the request lifecycle.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\PendingRequest;\nuse Saloon\\Enums\\PipeOrder;\n\nclass GetServersRequest extends Request\n{\n    // { ... }\n    \n    public function boot(PendingRequest $pendingRequest): void\n    {\n        $request->middleware()->onRequest(new RecordResponse, order: PipeOrder::LAST);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Separate Debuggers for Request and Response in Saloon\nDESCRIPTION: Using debugRequest() and debugResponse() methods independently to debug only the request or response as needed.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector->debugRequest(); // $connector->debugRequest(die: true);\n\n$connector->debugResponse(); // $connector->debugResponse(die: true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginator Pool\nDESCRIPTION: Example of using a paginator pool for concurrent request handling with custom response handlers.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate(new GetLikedSongsRequest);\n\n$pool = $paginator->pool(concurrency: 10);\n\n$pool->withResponseHandler(function (Response $response) { \n    // Handle each response\n\n    $status = $response->status();\n    $data = $response->body(); \n});\n\n$promise = $pool->send();\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Using Invokable Request Middleware in Saloon Connector (PHP)\nDESCRIPTION: Shows how to use an invokable request middleware class with a Saloon connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$forge = new ForgeConnector;\n$forge->middleware()->onRequest(new AuthenticateRequest);\n```\n\n----------------------------------------\n\nTITLE: Customizing 429 Response Handling in Saloon PHP\nDESCRIPTION: Demonstrates how to override the handleTooManyAttempts method to customize behavior when a 429 status code is received from an API. This method checks the response status and sets the limit as exceeded with a release time based on the Retry-After header.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nprotected function handleTooManyAttempts(Response $response, Limit $limit): void\n{\n    if ($response->status() !== 429) {\n        return;\n    }\n\n    $limit->exceeded(\n        releaseInSeconds: RetryAfterHelper::parse($response->header('Retry-After')),\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CursorPaginator in a Saloon Connector\nDESCRIPTION: Initial setup for cursor pagination by implementing the HasPagination interface and returning a CursorPaginator instance from the paginate method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/cursor-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\CursorPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): CursorPaginator\n    {\n        return new class(connector: $this, request: $request) extends CursorPaginator\n        {\n            //\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limits in Saloon PHP Connector\nDESCRIPTION: This snippet demonstrates how to set up rate limiting in a Saloon PHP connector for the Spotify API. It shows how to define multiple rate limits and configure a Redis store for tracking limit hits.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\RateLimitPlugin\\Limit;\nuse Saloon\\Traits\\Plugins\\AcceptsJson;\nuse Saloon\\RateLimitPlugin\\Stores\\RedisStore;\nuse Saloon\\RateLimitPlugin\\Traits\\HasRateLimits;\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\n\nclass SpotifyConnector extends Connector\n{\n    use AcceptsJson;\n    use HasRateLimits;\n\n    public function resolveBaseUrl(): string\n    {\n        return 'https://api.spotify.com/v1';\n    }\n\n    protected function resolveLimits(): array\n    {\n        return [\n            Limit::allow(100)->everyMinute(),\n            Limit::allow(1000)->everyDay(),\n            Limit::allow(5000)->everyMonth(),\n        ];\n    }\n\n    protected function resolveRateLimitStore(): RateLimitStore\n    {\n        $redis = new Redis;\n        $redis->connect('127.0.0.1');\n    \n        return new RedisStore($redis);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Request with Lawman\nDESCRIPTION: Improved version of request testing using Lawman expectations. This demonstrates how Lawman provides more expressive and readable assertions for testing request characteristics.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntest('request')\n    ->expect('App\\Http\\Integrations\\Integration\\Requests\\Request')\n    ->toBeSaloonRequest()\n    ->toSendPostRequest()\n    ->toHaveFormBody()\n    ->toUseAcceptsJsonTrait();\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Interval on a Connector in Saloon\nDESCRIPTION: Sets both the number of retry attempts and the wait interval between retries in milliseconds. This allows controlling how quickly retry attempts are made after failures.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    public ?int $tries = 3;\n    \n    public ?int $retryInterval = 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic OAuth2 Configuration in Constructor\nDESCRIPTION: Shows how to implement dynamic OAuth2 configuration by passing credentials through the constructor.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Traits\\OAuth2\\ClientCredentialsGrant;\n\nclass WarehouseConnector extends Connector\n{\n    use ClientCredentialsGrant;\n\n    public function __construct(string $clientId, string $clientSecret)\n    {\n        $this->oauthConfig()->setClientId($clientId);\n        $this->oauthConfig()->setClientSecret($clientSecret);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using DTO in Saloon Request Constructor for Body\nDESCRIPTION: This snippet illustrates how to use a Data Transfer Object (DTO) in the constructor of a Saloon request class to populate the default body, providing a more structured approach to handling request data.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected Server $server\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return [\n            'ubuntu_version' => $this->server->ubuntuVersion,\n            'type' => $this->server->type,\n            'provider' => $this->server->provider,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HasFormBody Trait to Saloon Request\nDESCRIPTION: This snippet shows how to add the HasFormBody trait to implement URL-encoded form requests. The trait automatically implements the body() method required by the HasBody interface and adds form body functionality.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasFormBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasFormBody;\n\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertions with Saloon's MockClient\nDESCRIPTION: Shows how to use Saloon's built-in assertion methods to verify that the correct requests are being sent to the API. This example demonstrates basic assertion usage in tests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Faking\\MockClient;\nuse Saloon\\Http\\Faking\\MockResponse;\n\ntest('can store servers in the database from laravel forge', function () {\n    $mockClient = MockClient::global([\n        GetServersRequest::class => MockResponse::make(...),\n    ]);\n\n    // Your application code...\n    \n    $mockClient->assertSent(GetServersRequest::class);\n    \n    $mockClient->assertSentCount(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Debugging Output in Saloon\nDESCRIPTION: Example of the debugging output format showing request and response details including connector, request class, method, URI, headers, and body.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSaloon Request (UserRequest) -> array:6 [\n  \"connector\" => \"Saloon\\Tests\\Fixtures\\Connectors\\TestConnector\"\n  \"request\" => \"Saloon\\Tests\\Fixtures\\Requests\\UserRequest\"\n  \"method\" => \"GET\"\n  \"uri\" => \"https://tests.saloon.dev/api/user\"\n  \"headers\" => array:2 [\n    \"Host\" => \"tests.saloon.dev\"\n    \"Accept\" => \"application/json\"\n  ]\n  \"body\" => \"\"\n]\n\nSaloon Response (UserRequest) -> array:3 [\n  \"status\" => 200\n  \"headers\" => []\n  \"body\" => \"{\\\"name\\\":\\\"Sam\\\"}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating XML Request Bodies with XML Wrangler in Saloon\nDESCRIPTION: Demonstrates how to create XML request bodies in Saloon using XML Wrangler. The example shows a Request class that implements HasBody and uses HasXmlBody trait to create structured XML requests from PHP arrays.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/xml-wrangler.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\XmlWrangler\\XmlWriter;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasXmlBody;\nuse Saloon\\XmlWrangler\\Data\\Element;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasXmlBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected readonly string $ubuntuVersion,\n        protected readonly string $type,\n        protected readonly string $provider\n    ){}\n    \n    protected function defaultBody(): string\n    {\n        return XmlWriter::make()->write('root', [\n            'ubuntu-version' => $this->ubuntuVersion,\n            'type' => $this->type,\n            'provider' => $this->provider,\n        ]);\n        \n        // Same as...\n        \n        // <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        // <root>\n        //   <ubuntu-version>ubuntuVersion</ubuntu-version>\n        //   <type>type</type>\n        //   <provider>provider</provider>\n        // </root>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Method for Rate Limits in Saloon PHP\nDESCRIPTION: Shows how to use the sleep method when defining a rate limit. Instead of throwing an exception when a limit is reached, Saloon will wait for the remaining number of seconds before attempting the request again.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Limit;\n\nprotected function resolveLimits(): array\n{\n    return [\n        Limit::allow(60)->sleep(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Plugin in Connector\nDESCRIPTION: Shows how to use the HasLogging trait in a Forge connector class to enable logging for all requests made through this connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/traits.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    use HasLogging;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Request Assertion with Closure in Saloon\nDESCRIPTION: Shows how to use a closure with the assertSent method for more complex request verification, allowing you to inspect both the request and response objects.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$mockClient->assertSent(function (Request $request, Response $response) {\n    return $request instanceof GetServersRequest;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Server DTO Class in PHP\nDESCRIPTION: This snippet defines the Server DTO class with readonly properties for id, name, and ipAddress. It demonstrates the structure of a simple DTO used in the Saloon library.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/data-transfer-objects.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Server\n{\n    public function __construct(\n        public readonly int $id,\n        public readonly string $name,\n        public readonly string $ipAddress,\n    ){}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closures for Dynamic Mock Responses in PHP\nDESCRIPTION: Implements a closure-based approach for creating more advanced mock responses. The closure receives the PendingRequest object, allowing for dynamic response generation based on request details.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$mockClient = new MockClient([\n    GetServersRequest::class => function (PendingRequest $pendingRequest) {\n        return MockResponse::make(...);\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pool Concurrency\nDESCRIPTION: Shows how to customize the concurrency level of request pools using either direct integer values or callable functions.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/concurrency-and-pools.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n$pool = $forge->pool(...);\n\n$pool->setConcurrency(10);\n\n// or\n\n$pool->setConcurrency(function () {\n    return 10;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limit Methods in Saloon PHP Connector\nDESCRIPTION: This snippet shows how to implement the required resolveLimits and resolveRateLimitStore methods in a Saloon PHP connector using a memory store.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Connector;\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\MemoryStore;\nuse Saloon\\RateLimitPlugin\\Traits\\HasRateLimits;\n\nclass SpotifyConnector extends Connector\n{\n    use HasRateLimits;\n    \n    protected function resolveLimits(): array\n    {\n        return [];\n    }\n\n    protected function resolveRateLimitStore(): RateLimitStore\n    {\n        return new MemoryStore;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Request and Response from Connector in Saloon\nDESCRIPTION: Using the debug() method on a connector before sending a request to output request and response information.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$connector = new ForgeConnector;\n\n$connector->debug()->send($request);\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Failure Detection in Connector\nDESCRIPTION: Shows how to extend the hasRequestFailed method in a connector to customize when Saloon considers a request to have failed.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Http\\Response;\n\nclass ForgeConnector extends Connector\n{\n    // {...}\n    \n    public function hasRequestFailed(Response $response): ?bool\n    {\n        return str_contains($response->body(), 'Server Error');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking API Responses with URL Patterns in PHP\nDESCRIPTION: Sets up mock responses using URL patterns with wildcards. This approach allows mocking responses for specific endpoints or for any endpoint within a domain using the asterisk wildcard.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$mockClient = new MockClient([\n    'forge.laravel.com/api/v1/servers' => MockResponse::make(body: '', status: 200),\n    'forge.laravel.com/*' => MockResponse::make(body: '', status: 200),\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth2 Request Classes in Saloon\nDESCRIPTION: Shows how to implement custom request classes for OAuth2 operations by overriding the default resolve methods.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SpotifyConnector extends Connector\n{\n    // ...\n\n    protected function resolveAccessTokenRequest(string $code, OAuthConfig $oauthConfig): Request\n    {\n        return new CustomGetAccessTokenRequest($code, $oauthConfig);\n    }\n\n    protected function resolveRefreshTokenRequest(OAuthConfig $oauthConfig, string $refreshToken): Request\n    {\n        return new CustomGetRefreshTokenRequest($oauthConfig, $refreshToken);\n    }\n\n    protected function resolveUserRequest(OAuthConfig $oauthConfig): Request\n    {\n        return new CustomGetUserRequest($oauthConfig);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Settings in Saloon Connector\nDESCRIPTION: Detailed configuration of OAuth2 settings including client credentials, endpoints, and request modifiers.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Http\\Request;\nuse Saloon\\Helpers\\OAuth2\\OAuthConfig;\nuse Saloon\\Traits\\OAuth2\\AuthorizationCodeGrant;\n\nclass SpotifyConnector extends Connector\n{\n    use AuthorizationCodeGrant;\n\n    public function resolveBaseUrl(): string\n    {\n        // Spotify's API has a different base URL for OAuth2 auth.\n\n        return 'https://api.spotify.com/v1';\n    }\n\n    protected function defaultOauthConfig(): OAuthConfig\n    {\n        return OAuthConfig::make()\n            ->setClientId('my-client-id')\n            ->setClientSecret('my-client-secret')\n            ->setDefaultScopes(['user-read-currently-playing'])\n            ->setRedirectUri('https://my-app.saloon.dev/auth/callback')\n            ->setAuthorizeEndpoint('https://accounts.spotify.com/authorize')\n            ->setTokenEndpoint('https://accounts.spotify.com/api/token')\n            ->setUserEndpoint('/me')\n            ->setRequestModifier(function (Request $request) {\n                // Optional: Modify the requests being sent.\n            })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Body in Saloon Connector\nDESCRIPTION: This example shows how to implement JSON body functionality at the connector level in Saloon, allowing for shared body content across multiple requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasJsonBody;\n\n    protected function defaultBody(): array\n    {\n        return [\n            'name' => 'Sam',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Failure Detection in Request\nDESCRIPTION: Shows how to extend the hasRequestFailed method in a request to customize when Saloon considers a request to have failed.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\Response;\n\nclass ErrorRequest extends Request\n{\n    // {...}\n    \n    public function hasRequestFailed(Response $response): ?bool\n    {\n        return str_contains($response->body(), 'Server Error');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying PSR-7 Request in Saloon PHP Connector\nDESCRIPTION: Shows how to modify a PSR-7 request before it's sent to the HTTP client by extending the handlePsrRequest method in a Saloon connector. This example adds a custom header to the request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/psr-support.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\nuse Psr\\Http\\Message\\RequestInterface;\n\nclass ForgeConnector extends Connector\n{\n    public function handlePsrRequest(RequestInterface $request, PendingRequest $pendingRequest): RequestInterface\n    {\n        $request->withHeader('X-API-Key', 'Howdy!');\n        \n        return $request;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Retry Logic with Lawman\nDESCRIPTION: Example showing how to test retry behavior in a connector using Lawman. This verifies retry attempts, interval configuration, and exponential backoff settings.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntest('connector')\n    ->expect('App\\Http\\Integrations\\Integration\\Connector')\n    ->toBeSaloonConnector()\n    ->toBeTriedAgainOnFailure()\n    ->toHaveRetryInterval()\n    ->toUseExponentialBackoff()\n```\n\n----------------------------------------\n\nTITLE: Try/Catch Approach for Rate Limit Handling in Saloon PHP\nDESCRIPTION: Demonstrates how to use try/catch to handle rate limit exceptions. When a rate limit is exceeded, the code catches the RateLimitReachedException and returns a response to the user indicating how long they need to wait before trying again.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Exceptions\\RateLimitReachedException;\n\n$spotify = new SpotifyConnector;\n\ntry {\n   $response = $spotify->send(new GetPlaylistRequest);\n} catch (RateLimitReachedException $exception) {\n    $seconds = $exception->getLimit()->getRemainingSeconds();\n    \n    // Return our users back to our application with a custom response that could be \n    // shown on the front end.\n\n    return response(\"Too many requests to Spotify's API. Please try again in ${$seconds} seconds.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Manipulation of Form Body in Saloon\nDESCRIPTION: This snippet demonstrates how to interact with and modify a form body at runtime. Methods like add(), merge(), and all() allow for dynamic manipulation of the form data before sending the request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new CreateServerRequest;\n\n$request->body()->add('ubuntu_version', '22.04');\n\n$request->body()->merge([\n    'type' => 'app',\n    'provider' => 'ocean2',\n]);\n\n$body = $request->body()->all();\n\n// array: [\n//    'ubuntu_version' => '22.04',\n//    'type' => 'app',\n//    'provider' => 'ocean2',\n// ]\n```\n\n----------------------------------------\n\nTITLE: Initializing POST Request with HasBody Interface in PHP\nDESCRIPTION: This snippet shows how to create a basic POST request class that implements the HasBody interface, which is required for sending request bodies in Saloon.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Enums\\Method;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connector Setup with ClientCredentialsGrant\nDESCRIPTION: Shows how to create a basic connector class that implements the ClientCredentialsGrant trait.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Traits\\OAuth2\\ClientCredentialsGrant;\n\nclass WarehouseConnector extends Connector\n{\n    use ClientCredentialsGrant;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Response Class at Connector Level in Saloon PHP\nDESCRIPTION: Shows how to define a custom response class at the connector level by setting the $response property.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    // ...\n    \n    protected ?string $response = CustomResponse::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HasStreamBody Trait to Request Class in PHP Saloon\nDESCRIPTION: Implementation of the HasStreamBody trait which provides functionality for handling stream bodies. This example also shows how to define a custom Content-Type header which is required for stream bodies.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/stream-body.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStreamBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasStreamBody;\n\n    protected Method $method = Method::POST;\n    \n    // Define our own Content-Type...\n    \n    protected function defaultHeaders(): array\n    {\n        return [\n            'Content-Type' => 'text/plain',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding String Body Support with Content-Type Header\nDESCRIPTION: Demonstrates implementing HasStringBody trait and setting custom Content-Type header for plain text requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/string-plain-text-body.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStringBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasStringBody;\n\n    protected Method $method = Method::POST;\n    \n    // Define our own Content-Type...\n    \n    protected function defaultHeaders(): array\n    {\n        return [\n            'Content-Type' => 'text/plain',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sleep Behavior for Rate Limits in Saloon PHP\nDESCRIPTION: This snippet shows how to configure a rate limit to use sleep behavior instead of throwing an exception when the limit is reached in Saloon PHP.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Limit;\n\nprotected function resolveLimits(): array\n{\n    return [\n        Limit::allow(60)->sleep(),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Access Token Request Implementation\nDESCRIPTION: Demonstrates how to implement custom request classes for obtaining access tokens when default implementation doesn't meet requirements.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass SpotifyConnector extends Connector\n{\n    // ...\n\n    protected function resolveAccessTokenRequest(OAuthConfig $oauthConfig, array $scopes = [], string $scopeSeparator = ' '): Request\n    {\n        return new GetClientCredentialsTokenRequest($oauthConfig, $scopes, $scopeSeparator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Body Manipulation Example\nDESCRIPTION: Demonstrates how to manipulate the multipart body at runtime using various methods\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new UploadProfilePictureRequest;\n\n$request->body()->add(\n    name: 'picture',\n    contents: 'your-file-contents-or-stream', \n    filename: 'picture.png', // Optional file name\n    headers: [\n       // Optional custom headers\n    ]\n);\n\n// You may also get a multipart value by name.\n\n$request->body()->get('picture'); // MultipartValue class\n```\n\n----------------------------------------\n\nTITLE: Implementing Boot Method in Saloon Request (PHP)\nDESCRIPTION: Shows how to extend the boot method in a Saloon request to add a custom header to a specific request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\PendingRequest;\n\nclass GetServersRequest extends Request\n{\n    // ...\n    \n    public function boot(PendingRequest $pendingRequest): void\n    {\n        $pendingRequest->headers()->add('X-Current-Time', new DateTime);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Individual Requests with withMockClient Method\nDESCRIPTION: Shows how to test individual API requests by creating a local MockClient instance and passing it to a connector. This approach allows testing that the correct data is being sent to the API.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntest('a request sends the correct body', function () {\n    $mockClient = new MockClient([\n        CreateServerRequest::class => MockResponse::make('Server Created', 200),\n    ]);\n\n    $connector = new ForgeConnector;\n    $connector->withMockClient($mockClient);\n    \n    $connector->send(new CreateServerRequest($name, $ip));\n    \n    $mockClient->assertSent(function (Request $request) {\n        return $request->body()->all() === ['name' => $name, 'ip' => $ip];\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Default Headers to Saloon Request\nDESCRIPTION: Shows how to add default headers to a Saloon request by implementing the defaultHeaders method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass GetServersRequest extends Request\n{\n    // ...\n\n    protected function defaultHeaders(): array\n    {\n        return [\n            'Content-Type' => 'application/json',\n            'Accept' => 'application/json',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Requests Through SDK\nDESCRIPTION: Demonstrates how to send requests using the SDK connector by instantiating and sending a request object.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pokeapi\\Pokeapi;\n\n$pokeapi = new Pokeapi('my-api-token');\n$request = new GetAllPokemon(page: 1);\n\n// Developers would just send the request.\n\n$response = $pokeapi->send($request);\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Methods in Connector\nDESCRIPTION: Shows how to add resource accessor methods to the main connector class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Pokeapi extends Connector\n{\n    // ...\n    \n    public function pokemon(): PokemonResource\n    {\n        return new PokemonResource($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic String Body Request in PHP Saloon\nDESCRIPTION: Shows how to create a basic POST request class that implements HasBody interface for string body support.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/string-plain-text-body.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Page Size for CursorPaginator\nDESCRIPTION: Defining a default per-page limit property on the paginator class to control how many items are requested per page by default.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/cursor-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): CursorPaginator\n{\n    return new class(connector: $this, request: $request) extends CursorPaginator\n    {\n        protected ?int $perPageLimit = 100;\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HasXmlBody Trait to Requests in PHP\nDESCRIPTION: Adding the HasXmlBody trait implements the body() method required by the HasBody interface. It also provides the defaultBody() method which can be extended to provide default XML content.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/xml-body.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasXmlBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasXmlBody;\n\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cacheable Request Class in PHP\nDESCRIPTION: Basic setup of a cacheable request class implementing the Cacheable interface and HasCaching trait with required methods.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\CachePlugin\\Contracts\\Driver;\nuse Saloon\\CachePlugin\\Traits\\HasCaching;\nuse Saloon\\CachePlugin\\Contracts\\Cacheable;\n\nclass GetServersRequest extends Request implements Cacheable\n{\n    use HasCaching;\n\n    // ...\n    \n    public function resolveCacheDriver(): Driver\n    {\n        //\n    }\n    \n    public function cacheExpiryInSeconds(): int\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Body on Saloon Connector\nDESCRIPTION: This example shows how to add form body functionality to a Connector class. When both a connector and a request have form bodies, they will be merged together, which is useful for shared properties across requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasFormBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasFormBody;\n\n    protected function defaultBody(): array\n    {\n        return [\n            'name' => 'Sam',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginatable Interface in Request Class\nDESCRIPTION: Shows how to implement the Paginatable interface in a request class to enable pagination support\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\PaginationPlugin\\Contracts\\Paginatable;\n\nclass GetLikedSongsRequest extends Request implements Paginatable\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Iteration Mode\nDESCRIPTION: Shows how to configure the collection to iterate through Response classes instead of items\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate(new GetLikedSongsRequest);\n\n$collection = $paginator->collect(throughItems: false);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Headers in a Saloon Connector\nDESCRIPTION: This example shows how to define default headers for all requests made through a connector by overriding the defaultHeaders method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    // ...\n\n    protected function defaultHeaders(): array\n    {\n        return [\n            'Content-Type' => 'application/json',\n            'Accept' => 'application/json',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Request Middleware to Saloon Connector (PHP)\nDESCRIPTION: Demonstrates how to add request middleware to a Saloon connector using an anonymous function.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$forge = new ForgeConnector;\n\n$forge->middleware()->onRequest(function (PendingRequest $pendingRequest) {\n    $pendingRequest->headers()->add('Authorization', 'Bearer ' . $token);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Plugin Trait in PHP\nDESCRIPTION: Creates a HasLogging trait that implements a plugin for logging requests to Ray debugger. The trait defines a bootHasLogging method that receives a PendingRequest instance.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/traits.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntrait HasLogging\n{\n    public function bootHasLogging(PendingRequest $pendingRequest): void\n    {\n        ray($pendingRequest);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Payload in Saloon Request Constructor\nDESCRIPTION: This example demonstrates how to use an array payload in the constructor of a Saloon request class to populate the default body, useful when there are many body parameters.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected array $payload\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return $this->payload;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR Cache Driver\nDESCRIPTION: Example of implementing the PSR Cache Driver using PhpArrayAdapter.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\CachePlugin\\Drivers\\PsrCacheDriver;\n\npublic function resolveCacheDriver(): Driver\n{\n    // This example uses the PhpArrayAdapter from \n    // the symfony/cache library.\n    \n    return new PsrCacheDriver(new PhpArrayAdapter);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Delay in a Request Class\nDESCRIPTION: Example showing how to define a default delay for a specific request class by extending the defaultDelay method. This adds a 500ms delay every time a GetServersRequest is sent.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/delay.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass GetServersRequest extends Request\n{\n    // Every time this request is sent, a 500ms delay is added\n\n    protected function defaultDelay(): ?int\n    {\n        return 500;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Request Middleware to Saloon Request (PHP)\nDESCRIPTION: Shows how to add request middleware to a specific Saloon request using an anonymous function.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\n$request = new GetServersRequest;\n\n$request->middleware()->onRequest(function (PendingRequest $pendingRequest) {\n    $pendingRequest->headers()->add('Authorization', 'Bearer ' . $token);\n});\n```\n\n----------------------------------------\n\nTITLE: Per-Request OAuth2 Customization in Saloon\nDESCRIPTION: Shows how to modify individual OAuth2 requests by adding custom headers and query parameters using request modifiers.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector->getAccessToken($code, requestModifier: function (Request $request) {\n    $request->query()->add('access_type', 'offline');\n});\n\n$connector->getRefreshToken($code, requestModifier: function (Request $request) {\n    $request->headers()->add('X-App-Key', $appKey);\n});\n\n$connector->getUser($code, requestModifier: function (Request $request) {\n    $request->headers('Accept', 'text/plain');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Attempts on a Connector in Saloon\nDESCRIPTION: Sets the number of retry attempts on a connector class by defining a public $tries property. When requests through this connector fail, they will be retried the specified number of times before giving up.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass ForgeConnector extends Connector\n{\n    public ?int $tries = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Multipart Request Class with HasBody Interface\nDESCRIPTION: Demonstrates how to create a basic request class that implements HasBody interface for handling multipart form data\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass UploadProfilePictureRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a SoloRequest in PHP\nDESCRIPTION: This code shows how to instantiate and send a SoloRequest. Unlike regular Saloon requests, you can call the send method directly on the SoloRequest instance without needing a connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/solo-requests.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new GetAllPokemonRequest;\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Testing Connector Authentication with Lawman\nDESCRIPTION: Example showing how to test authentication methods on a connector using Lawman. This demonstrates support for multiple authentication types on a single connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntest('connector')\n    ->expect('App\\Http\\Integrations\\Integration\\Connector')\n    ->toBeSaloonConnector()\n    ->toUseCertificateAuthentication()\n    ->toUseTokenAuthentication();\n```\n\n----------------------------------------\n\nTITLE: Adding HasRateLimits Trait to Saloon PHP Connector\nDESCRIPTION: This code snippet demonstrates how to add the HasRateLimits trait to a Saloon PHP connector class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Connector;\nuse Saloon\\RateLimitPlugin\\Traits\\HasRateLimits;\n\nclass SpotifyConnector extends Connector\n{\n    use HasRateLimits;\n}\n```\n\n----------------------------------------\n\nTITLE: Global OAuth2 Request Modification in Saloon\nDESCRIPTION: Demonstrates how to configure global request modifications for all OAuth2 requests using OAuthConfig.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\OAuth2\\GetUserRequest;\nuse Saloon\\Http\\OAuth2\\GetAccessTokenRequest;\nuse Saloon\\Http\\OAuth2\\GetRefreshTokenRequest;\n\nprotected function defaultOauthConfig(): OAuthConfig\n{\n    return OAuthConfig::make()\n        ->setClientId('my-client-id')\n        ->setClientSecret('my-client-secret')\n        ->setRedirectUri('https://my-app.saloon.dev/auth/callback')\n        ->setRequestModifier(function (Request $request) {\n            // This callback is invoked on every request, so you\n            // may want to use if-statements or a match statement\n            // to apply conditions based on request.\n\n            if ($request instanceof GetAccessTokenRequest) {\n                $request->query()->add('access_type', 'offline');\n            }\n\n            if ($request instanceof GetRefreshTokenRequest) {\n                $request->headers()->add('X-App-Key', $appKey);\n            }\n\n            if ($request instanceof GetUserRequest) {\n                $request->headers('Accept', 'text/plain');\n            }\n        }),\n}\n```\n\n----------------------------------------\n\nTITLE: Using the throw Method for Response Error Handling\nDESCRIPTION: Shows how to use the throw method on a response to generate exceptions for failed HTTP status codes.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n$response = $forge->send(new ErrorRequest);\n\n// throws InternalServerErrorException (extends ServerException)\n\n$response->throw();\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts in a Saloon Connector\nDESCRIPTION: This example shows how to customize connection and request timeouts by using the HasTimeout trait and setting timeout properties in a connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Traits\\Plugins\\HasTimeout;\n\nclass ForgeConnector extends Connector\n{\n    use HasTimeout;\n    \n    protected int $connectTimeout = 60;\n    \n    protected int $requestTimeout = 120;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Invokable Request Middleware Class in Saloon (PHP)\nDESCRIPTION: Demonstrates how to create an invokable request middleware class implementing the RequestMiddleware interface.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\nuse Saloon\\Contracts\\RequestMiddleware;\n\nclass AuthenticateRequest implements RequestMiddleware\n{\n    public function __invoke(PendingRequest $pendingRequest): void\n    {\n        $pendingRequest->headers()->add('Authorization', 'Bearer ' . $token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Job Middleware for Rate Limit Handling in Saloon PHP\nDESCRIPTION: Demonstrates how to use the included Laravel job middleware to automatically handle rate limit exceptions. The middleware catches RateLimitReachedException and releases the job back to the queue with a delay equal to the remaining wait time.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Helpers\\ApiRateLimited;\n \npublic function middleware(): array\n{\n    return [new ApiRateLimited];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Page Size in PagedPaginator in PHP\nDESCRIPTION: Demonstrates how to set a default per-page limit on the paginator class. This defines how many items should be requested per page when making API requests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/paged-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Request $request): PagedPaginator\n{\n    return new class(connector: $this, request: $request) extends PagedPaginator\n    {\n        protected ?int $perPageLimit = 100;\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing XML Body on Connector Level in PHP\nDESCRIPTION: You can add XML body handling to a connector by implementing HasBody and using HasXmlBody trait. If both connector and request have bodies, the request's body takes priority.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/xml-body.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasXmlBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasXmlBody;\n\n    protected function defaultBody(): string\n    {\n        return '<?xml version=\"1.0\"?><root></root>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Debug Methods in Saloon v3\nDESCRIPTION: Demonstrates how to use the simplified debugging functionality in Saloon v3 to inspect both requests and responses using closure callbacks that give access to the PendingRequest, PSR request, and Response objects.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/whats-new-in-v3.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$connector->debugRequest(static function (PendingRequest $pendingRequest, Requestinterface $psrRequest) {\n    dd($pendingRequest->headers());\n});\n\n$connector->debugResponse(static function (Response $response) {\n    dd($response->body());\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Response Middleware to Saloon Request (PHP)\nDESCRIPTION: Shows how to add response middleware to a specific Saloon request using an anonymous function.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\n\n$request = new GetServersRequest;\n\n$request->middleware()->onResponse(function (Response $response) {\n    Logger::recordResponse($response);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth2 Authenticator Creation\nDESCRIPTION: Demonstrates how to customize the OAuth2 authenticator creation process for special API requirements.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprotected function createOAuthAuthenticator(string $accessToken, ?DateTimeImmutable $expiresAt = null): OAuthAuthenticatorInterface\n{\n    return new WarehouseAuthenticator($accessToken, $expiresAt);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DTO Casting in Saloon Paginator\nDESCRIPTION: Shows how to configure a Spotify connector to cast paginated responses into DTOs using the PagedPaginator class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    public function paginate(Request $request): PagedPaginator\n    {\n        return new class(connector: $this, request: $request) extends PagedPaginator\n        {\n            // ...\n            \n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->dto();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Per-Page Limit in PHP\nDESCRIPTION: Shows how to set the per-page limit dynamically on an instantiated paginator before iteration. This allows for run-time configuration of pagination behavior.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/paged-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate($request);\n\n$paginator->setPerPageLimit(250);\n\n// foreach($paginator as $response) { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Client Config to a Connector Instance\nDESCRIPTION: This example shows how to add configuration options to an existing connector instance using the config method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$forge = new ForgeConnector;\n\n$forge->config()->add('stream', true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Rate Limiting in Saloon PHP\nDESCRIPTION: Demonstrates two approaches to disable rate limiting: setting the rateLimitingEnabled property to false in the constructor, or using the useRateLimitPlugin method to disable it on a per-instance basis.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Connector;\nuse Saloon\\RateLimitPlugin\\Traits\\HasRateLimits;\n\nclass SpotifyConnector extends Connector\n{\n    use HasRateLimits;\n    \n    public function __construct()\n    {\n        $this->rateLimitingEnabled = false;\n    }\n}\n\n// Or...\n\n$connector = new SpotifyConnector;\n$connector->useRateLimitPlugin(false);\n```\n\n----------------------------------------\n\nTITLE: Applying Delay to a Request Instance\nDESCRIPTION: Example showing how to dynamically apply a delay to a specific request instance using the delay() method. This adds a 500ms delay just for this particular GetServersRequest instance.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/delay.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new GetServersRequest;\n\n// Delay just this request instance by 500ms\n\n$request->delay()->set(500);\n```\n\n----------------------------------------\n\nTITLE: Alternative DTO Implementation in getPageItems\nDESCRIPTION: Shows how to implement DTO conversion logic directly in the getPageItems method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected function getPageItems(Response $response, Request $request): array\n{\n    return array_map(function (array $song) {\n        return Song::fromArray($song);\n    }, $response->json('items'));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Paginator Methods\nDESCRIPTION: Example showing implementation of the three required methods in a custom paginator: isLastPage, getPageItems, and applyPagination.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/custom-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\Paginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n\n    public function paginate(Request $request): Paginator\n    {\n        return new class(connector: $this, request: $request) extends Paginator\n        {\n            protected function isLastPage(Response $response): bool\n            {\n                return is_null($response->json('next_page_url'));\n            }\n\n            protected function getPageItems(Response $response, Request $request): array\n            {\n                return $response->json('items');\n            }\n\n            protected function applyPagination(Request $request): Request\n            {\n                $request->headers()->add('X-Page', $this->currentPage);\n\n                $request->headers()->add('X-Per-Page', $this->perPageLimit);\n                return $request;\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Middleware in Saloon (PHP)\nDESCRIPTION: Demonstrates how to assign a unique name to a middleware in Saloon for better organization and potential conditional execution.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new GetServersRequest;\n\n$request->middleware()->onResponse(new LogResponse, 'logResponse');\n```\n\n----------------------------------------\n\nTITLE: Using sendAndRetry Method for On-the-Fly Retries in Saloon\nDESCRIPTION: Demonstrates the deprecated sendAndRetry method which allows configuring retry behavior directly in the method call without setting up connector properties. This provides the same functionality but in a method format.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/retrying-requests.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forgeConnector = new ForgeConnector;\n\n$response = $forgeConnector->sendAndRetry(\n    request: new UnreliableRequest,\n    tries: 3,\n    interval: 500,\n    handleRetry: function (FatalRequestException|RequestException $exception, Request $request) {\n        //\n    },\n    throw: true,\n    useExponentialBackoff: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Lawman via Composer\nDESCRIPTION: Command to install Lawman as a development dependency using Composer. This makes the Lawman expectations available in your PestPHP tests.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require jonpurvis/lawman --dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up PHPUnit for Saloon Testing with Global MockClient in PHP\nDESCRIPTION: Configures PHPUnit to destroy the global MockClient in the setUp method before each test to prevent test pollution. This setup should be added to the TestCase class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Faking\\MockClient;\n\nclass RequestTest extends TestCase\n{\n    protected function setUp(): void\n    {\n        MockClient::destroyGlobal();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Page Limit Dynamically in Saloon Pagination\nDESCRIPTION: Demonstrates how to dynamically configure the per-page limit on an instantiated paginator before iteration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/cursor-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate($request);\n\n$paginator->setPerPageLimit(250);\n\n// foreach($paginator as $response) { ... }\n```\n\n----------------------------------------\n\nTITLE: Applying Delay to a Connector Instance\nDESCRIPTION: Example demonstrating how to dynamically apply a delay to a connector instance using the delay() method. This sets a 500ms delay for all requests sent through this specific ForgeConnector instance.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/delay.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n\n// Delay every request sent with the ForgeConnector by 500ms \n\n$forge->delay()->set(500);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fixture Class in Saloon Tests\nDESCRIPTION: Demonstrates how to use a custom fixture class with redaction capabilities in place of the standard MockResponse::fixture() method in test mocking.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$mockClient = new MockClient([\n    GetServerRequest::class => new SingleServerFixture;\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating MultipartValue Object\nDESCRIPTION: Example of creating a MultipartValue object to handle file uploads with optional parameters\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Data\\MultipartValue;\n\nnew MultipartValue(\n    name: 'picture', // Required: the name of the multipart value\n    value: 'file-path-or-stream', // Required: Absolute path or file stream\n    filename: 'profile.png', // Optional: File name\n    headers: [], // Optional: Headers to be sent with the individual value\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Delay in a Connector Class\nDESCRIPTION: Example showing how to define a default delay for all requests sent through a connector by extending the defaultDelay method. This establishes a 500ms delay for every request processed by the ForgeConnector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/delay.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    // Every request sent through this connector will have a 500ms delay.\n\n    protected function defaultDelay(): ?int\n    {\n        return 500;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Per-Request Pagination Interface\nDESCRIPTION: Implementation of HasRequestPagination interface for custom request-specific pagination.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\PaginationPlugin\\Contracts\\HasRequestPagination;\n\nclass GetLikedSongsRequest extends Request implements HasRequestPagination\n{\n    // {...}\n    \n    public function paginate(Connector $connector): Paginator;\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Encoding Flags in Saloon Request\nDESCRIPTION: This snippet demonstrates how to customize JSON encoding flags in a Saloon request, such as using JSON_UNESCAPED_SLASHES to prevent URL escaping in the JSON body.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n    \n    public function __construct()\n    {\n        $this->body()->setJsonFlags(JSON_UNESCAPED_SLASHES | JSON_THROW_ON_ERROR);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request with Default Body\nDESCRIPTION: Shows how to create a request class with constructor and defaultBody method for handling file uploads\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Data\\MultipartValue;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasMultipartBody;\n\nclass UploadProfilePictureRequest extends Request implements HasBody\n{\n    use HasMultipartBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected string $filePath,\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return [\n            new MultipartValue(name: 'picture', value: $this->filePath)\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel HTTP Sender - Laravel 11+\nDESCRIPTION: Command to install Saloon's Laravel HTTP sender package for Laravel 11 or higher.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require saloonphp/laravel-http-sender \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Registering Saloon Service Provider in Laravel Zero\nDESCRIPTION: Code to register Saloon's service provider in Laravel Zero application's AppServiceProvider.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Laravel\\SaloonServiceProvider;\n\npublic function register()\n{\n    $this->app->register(SaloonServiceProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Specific Request Types in Saloon\nDESCRIPTION: Shows how to verify the count of specific request types sent during testing using the assertSentCount method with a second parameter specifying the request class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$mockClient->assertSentCount(2, GetServersRequest::class);\n$mockClient->assertSentCount(1, CreateServerRequest::class);\n```\n\n----------------------------------------\n\nTITLE: Using Saloon Facade for Testing\nDESCRIPTION: Example of using the Saloon facade in Laravel tests to mock API responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Laravel\\Facades\\Saloon;\n\nSaloon::fake([\n    GetServersRequest::class => MockResponse::make(body: '', status: 200),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Array Payload for Form Body in Saloon\nDESCRIPTION: This approach shows how to accept an array payload in the constructor to populate the form body. This is useful when there are many form fields that would be cumbersome to define as individual constructor parameters.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasFormBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasFormBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected array $payload\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return $this->payload;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Body in Connector Class\nDESCRIPTION: Shows how to implement string body support at the connector level for shared functionality.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/string-plain-text-body.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStringBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasStringBody;\n\n    protected function defaultBody(): string\n    {\n        return 'Howdy, Partner';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Body in Saloon Request Class\nDESCRIPTION: This snippet shows how to implement a defaultBody() method in a Saloon request class to provide default JSON body content based on constructor parameters.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected string $ubuntuVersion,\n        protected string $type,\n        protected string $provider\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return [\n            'ubuntu_version' => $this->ubuntuVersion,\n            'type' => $this->type,\n            'provider' => $this->provider,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Body Method for Streams in PHP Saloon\nDESCRIPTION: Example showing how to implement the defaultBody method to standardize request handling. This implementation accepts a stream as a constructor argument and uses it as the default body content.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/stream-body.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStreamBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasStreamBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected mixed $stream,\n    ){}\n    \n    protected function defaultBody(): mixed\n    {\n        return $this->stream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Pagination\nDESCRIPTION: Example of instantiating a custom paginator with a connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spotifyConnector = new SpotifyConnector;\n$request = new GetLikedSongsRequest;\n\n$paginator = $request->paginate($spotifyConnector);\n```\n\n----------------------------------------\n\nTITLE: Implementing HasBody Interface for XML Requests in PHP\nDESCRIPTION: The first step in creating a request with an XML body is to implement the HasBody interface and use POST, PUT or PATCH method. This enables Saloon to send a request body to the HTTP client.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/xml-body.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating Application After Debugging in Saloon\nDESCRIPTION: Using the die parameter with debug() to terminate the application after receiving and displaying the response.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$connector->debug(die: true)->send($request);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Saloon Request Class\nDESCRIPTION: Demonstrates how to create a basic request class in Saloon by extending the Request abstract class and defining the HTTP method and endpoint.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Enums\\Method;\nuse Saloon\\Http\\Request;\n\nclass GetServersRequest extends Request\n{\n    protected Method $method = Method::GET;\n\n    public function resolveEndpoint(): string\n    {\n        return '/servers';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Body in Saloon Form Request\nDESCRIPTION: This example demonstrates how to create a default form body using constructor parameters in a Saloon request. The defaultBody() method returns an array that will be sent as the form body.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasFormBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasFormBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected string $ubuntuVersion,\n        protected string $type,\n        protected string $provider\n    ){}\n    \n    protected function defaultBody(): array\n    {\n        return [\n            'ubuntu_version' => $this->ubuntuVersion,\n            'type' => $this->type,\n            'provider' => $this->provider,\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up PEST for Saloon Testing with Global MockClient in PHP\nDESCRIPTION: Configures PEST to destroy the global MockClient before each test to prevent test pollution. This setup should be added to the Pest.php file.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Faking\\MockClient;\n\nuses()\n    ->beforeEach(fn () => MockClient::destroyGlobal())\n    ->in(__DIR__);\n```\n\n----------------------------------------\n\nTITLE: Implementing Flysystem Cache Driver\nDESCRIPTION: Example of implementing the Flysystem Cache Driver with AWS S3 adapter.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\CachePlugin\\Drivers\\FlysystemDriver;\n\npublic function resolveCacheDriver(): Driver\n{\n    // This example uses the \"AwsS3V3Adapter\" driver\n    // that is provided by Flysystem.\n\n    return new FlysystemDriver(\n        new Filesystem(new AwsS3V3Adapter($s3Client, 'bucket-name'))\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cacheable Methods\nDESCRIPTION: Example of customizing which HTTP methods should be cached.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Enums\\Method;\n\nclass GetServersRequest extends Request implements Cacheable\n{\n    use HasCaching;\n    \n    protected function getCacheableMethods(): array\n    {\n        return [Method::GET, Method::OPTIONS, Method::POST];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Paginator Results\nDESCRIPTION: Example of counting total pages in a paginator using PHP's count() method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate(new GetLikedSongsRequest);\n\n$pages = count($paginator);\n```\n\n----------------------------------------\n\nTITLE: Using Fixtures for Recorded API Responses in PHP\nDESCRIPTION: Sets up a mock response using fixtures, which record real API responses for reuse in tests. This approach saves time and is suitable for testing larger API responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$mockClient = new MockClient([\n    GetUserRequest::class => MockResponse::fixture('user');\n]);\n```\n\n----------------------------------------\n\nTITLE: Generating SDK from API Specification using Saloon SDK Generator\nDESCRIPTION: Command-line usage for generating a PHP SDK from an API specification file. It includes various options for customizing the output, such as specifying the API type, SDK name, namespace, and output path.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/sdk-generator.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsdkgenerator generate:sdk API_SPEC_FILE.{json|yaml|yml}\n     --type={postman|openapi} \n     [--name=SDK_NAME] \n     [--output=OUTPUT_PATH] \n     [--namespace=Company\\\\Integration] \n     [--force] \n     [--dry] \n     [--zip]\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Status\nDESCRIPTION: Example of checking if a response is cached using isCached() method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$forge = new ForgeConnector;\n\n$response = $forge->send(new GetServersRequest);\n$response->isCached(); // false\n\n// Next time it is sent...\n\n$response = $forge->send(new GetServersRequest);\n$response->isCached(); // true\n```\n\n----------------------------------------\n\nTITLE: Disabling Infinite Loop Detection\nDESCRIPTION: Example of disabling the built-in infinite loop detection in a paginator.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function paginate(Connector $connector): Paginator;\n{\n    return new class(connector: $connector, request: $this) extends PagedPaginator\n    {\n        protected bool $detectInfiniteLoop = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using XML Wrangler with Saloon Responses\nDESCRIPTION: Shows how to utilize XML Wrangler with Saloon HTTP client. The snippet demonstrates accessing the xmlReader() method on responses to parse XML API responses into a structured format.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/xml-wrangler.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = $connector->send($request);\n\n$reader = $response->xmlReader();\n\n// $reader->values();\n// etc...\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic OffsetPaginator with Saloon Connector\nDESCRIPTION: This snippet demonstrates how to create a basic implementation of the OffsetPaginator in a Saloon connector class, specifically for a Spotify API example. It shows the minimal implementation with the paginate method returning an anonymous class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/limit-offset-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\OffsetPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): OffsetPaginator\n    {\n        return new class(connector: $this, request: $request) extends OffsetPaginator\n        {\n            //\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors on Missing Fixtures in PHPUnit\nDESCRIPTION: Demonstrates how to configure Saloon to throw exceptions when fixtures are missing during testing with PHPUnit, preventing unexpected fixture recording.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\MockConfig;\n\nclass TestCase extends BaseTestCase\n{\n    protected function setUp(): void\n    {\n        MockConfig::throwOnMissingFixtures();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Saloon Sender\nDESCRIPTION: Configuration setup in saloon.php to use the Laravel HTTP sender as the default sender for all connectors.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Saloon\\HttpSender\\HttpSender;\n\nreturn [\n    'default_sender' => HttpSender::class,\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Mock Responses with JSON Data in PHP\nDESCRIPTION: Demonstrates how to create a mock response with JSON data. When an array is provided as the body, it is automatically converted to JSON, and custom headers can be specified.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$mockClient = new MockClient([\n    GetUserRequest::class => MockResponse::make(\n        body: ['user' => ['name' => 'Sam']], \n        status: 200, \n        headers: ['Content-Type' => 'application/json']\n    ),\n]);\n```\n\n----------------------------------------\n\nTITLE: Testing a Request with Standard PestPHP\nDESCRIPTION: Example of testing a SaloonPHP request using standard PestPHP expectations. This checks class extension, interface implementation, and trait usage.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ntest('request')\n    ->expect('App\\Http\\Integrations\\Integration\\Requests\\Request')\n    ->toExtend('\\Saloon\\Http\\Request')\n    ->toImplement('Saloon\\Contracts\\Body\\HasBody')\n    ->toUse('Saloon\\Traits\\Body\\HasFormBody')\n    ->toUse('Saloon\\Traits\\Plugins\\AcceptsJson');\n```\n\n----------------------------------------\n\nTITLE: Implementing HasBody Interface for Stream Body in PHP Saloon\nDESCRIPTION: Basic implementation of the HasBody interface on a request class to enable sending request bodies with Saloon. This is the first step required to send any body data including streams.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/stream-body.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PagedPaginator with Anonymous Class Extension in PHP\nDESCRIPTION: Demonstrates how to implement the PagedPaginator by extending it with an anonymous class in a Connector. This sets up the basic structure for pagination functionality.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/paged-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\PagedPaginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): PagedPaginator\n    {\n        return new class(connector: $this, request: $request) extends PagedPaginator\n        {\n            //\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controller for API Integration in PHP\nDESCRIPTION: Showcases a controller implementation that uses Saloon to fetch server data from an external API and store it in the database. This controller would be the target of the previous test.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeController\n{\n    // api/servers/sync\n    \n    public function sync()\n    {\n        $forge = new ForgeConnector;\n        $servers = $forge->send(new GetServersRequest)->array('data');\n\n        foreach($servers as $server) {\n            DB::table('servers')->insert([\n                'name' => $server['name'],\n                'ip' => $server['ip'],\n            ]);\n        }\n\n        return response('Synced servers', 200);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Var Dumper for Saloon Debugging\nDESCRIPTION: Installation command for Symfony's Var Dumper library, which is required for Saloon's default debugging driver if you're not using Laravel.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/var-dumper\n```\n\n----------------------------------------\n\nTITLE: Implementing HasBody Interface in Saloon Request\nDESCRIPTION: The first step to add a body to a Saloon request is to implement the HasBody interface on a request class. This shows the basic structure required to send POST requests with a body.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/form-body-url-encoded.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Body at Connector Level in PHP Saloon\nDESCRIPTION: Example showing how to add stream body handling to a connector. When both connector and request have body implementations, the request's body takes priority, but requests can inherit the connector's body if they don't specify their own.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/stream-body.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStreamBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasStreamBody;\n\n    protected function defaultBody(): mixed\n    {\n        return fopen('cowboy-hat.png', 'r');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Various Limit Intervals in Saloon PHP\nDESCRIPTION: This snippet shows different limit interval configurations available in Saloon PHP, ranging from seconds to the end of the month.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Limit;\n\nLimit::allow(60)->everySeconds(seconds: 5);\nLimit::allow(60)->everyMinute();\nLimit::allow(60)->everyFiveMinutes();\nLimit::allow(60)->everyThirtyMinutes();\nLimit::allow(60)->everyHour();\nLimit::allow(60)->everySixHours();\nLimit::allow(60)->everyTwelveHours();\nLimit::allow(60)->everyDay();\nLimit::allow(60)->everyDayUntil('8pm');\nLimit::allow(60)->untilMidnightTonight();\nLimit::allow(60)->untilEndOfMonth();\n```\n\n----------------------------------------\n\nTITLE: Using assertSentCount Method in Saloon\nDESCRIPTION: Demonstrates how to verify the number of requests sent during testing, with options to check either the total count or the count of a specific request class.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$mockClient->assertSentCount(1);\n```\n\n----------------------------------------\n\nTITLE: Preventing Stray Requests in PHPUnit with Saloon\nDESCRIPTION: Demonstrates how to configure Saloon to prevent real API calls during testing when using PHPUnit by adding configuration to the TestCase setup method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Config;\n\nclass TestCase extends BaseTestCase\n{\n    protected function setUp(): void\n    {\n        parent::setUp();\n        Config::preventStrayRequests();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum TLS Version in Saloon v3\nDESCRIPTION: Shows how to modify the default TLS version in Saloon v3 which uses TLS 1.2 by default. This can be necessary for integrating with older APIs that require a lower TLS security level.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/known-issues.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Config;\n\nConfig::$defaultTlsMethod = STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT;\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Body with Constructor Parameters\nDESCRIPTION: Shows how to create a request class with constructor parameters and default body implementation.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/string-plain-text-body.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasStringBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasStringBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected string $ubuntuVersion,\n        protected string $provider\n    ){}\n    \n    protected function defaultBody(): string\n    {\n        return 'Howdy, Partner. I want a ' . $this->ubuntuVersion . ' server through ' . $this->provider . ' provider!';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multipart Body in Connector\nDESCRIPTION: Shows how to implement multipart body handling at the connector level for shared functionality\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Data\\MultipartValue;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasMultipartBody;\n\nclass ForgeConnector extends Connector implements HasBody\n{\n    use HasMultipartBody;\n\n    protected function defaultBody(): array\n    {\n        return [\n            new MultipartValue(name: 'logo', value: 'image-contents'), \n            new MultipartValue(name: 'logo', value: StreamObject), \n            new MultipartValue(name: 'logo', value: 'image-contents', filename: 'logo.png', headers: [...]),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Laravel Cache Driver\nDESCRIPTION: Example of implementing the Laravel Cache Driver using Redis store.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\nuse Saloon\\CachePlugin\\Drivers\\LaravelCacheDriver;\n\npublic function resolveCacheDriver(): Driver\n{\n    // This example uses Redis cache store that\n    // Laravel provides.\n\n    return new LaravelCacheDriver(Cache::store('redis'));\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors on Missing Fixtures in PEST\nDESCRIPTION: Shows how to configure Saloon to throw exceptions when fixtures are missing during testing with the PEST framework, which is useful for CI environments.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\MockConfig;\n\nMockConfig::throwOnMissingFixtures();\n```\n\n----------------------------------------\n\nTITLE: Basic API Request with Manual Authentication in PHP\nDESCRIPTION: Shows the basic approach of manually obtaining an access token before making an authenticated API request. This demonstrates the problem of repetitive code when each request needs authentication.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/conclusion/how-to-guides/per-request-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$api = new MusicApi();\n$authResponse = $api->send(new GetAccessTokenRequest(username: 'Sam', password: 'yee-haw'));\n$token = $authResponse->json()['token'];\n\n$songsRequest = new GetSongsByArtistRequest('Luke Combs');\n$songsRequest->withTokenAuth($token);\n\n$response = $api->send($songsRequest);\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Response Handling Options in Saloon\nDESCRIPTION: Demonstrates how to configure OAuth2 operations to return raw Response objects instead of Authenticator instances.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector = new SpotifyConnector;\n\n$response = $connector->getAccessToken(\n    returnResponse: true,\n);\n\n$response = $connector->refreshAccessToken(\n    returnResponse: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Request with Default XML Body in PHP\nDESCRIPTION: This example shows how to create a request with a default XML body using constructor parameters. The defaultBody() method generates the XML string with dynamic values from the class properties.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/xml-body.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasXmlBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasXmlBody;\n\n    protected Method $method = Method::POST;\n    \n    public function __construct(\n        protected readonly string $ubuntuVersion,\n        protected readonly string $type,\n        protected readonly string $provider\n    ){}\n    \n    protected function defaultBody(): string\n    {\n        return <<<XML\n            <?xml version=\"1.0\" ?>\n            <root>\n                <ubuntu-version>' . $this->ubuntuVersion . '</ubuntu-version>\n                <type>' . $this->type . '</type>\n                <provider>' . $this->provider . '</provider>\n            </root>\n        XML;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Retry Logic with Updated Parameter Types in Saloon v3\nDESCRIPTION: Example of the sendAndRetry method with a handleRetry callback. In v3, the callback now receives a Request object instead of a PendingRequest object as in v2.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/upgrading-from-v2.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$connector->sendAndRetry(\n    request: $request,\n    tries: 5,\n    interval: 0,\n    handleRetry: static function (Throwable $exception, Request $request) {\n        // $request->headers()->add();\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Saloon's Laravel Facade for Testing\nDESCRIPTION: Shows how to use the Saloon Laravel facade to mock HTTP requests in Laravel applications, which provides a convenient alias for the MockClient::global() method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Laravel\\Facades\\Saloon;\n\nSaloon::fake([\n    GetServersRequest::class => MockResponse::make(body: '', status: 200),\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Exceptions in Connector\nDESCRIPTION: Demonstrates how to provide custom exception classes by extending the getRequestException method in a connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\Http\\Response;\nuse \\Throwable;\n\nclass ForgeConnector extends Connector\n{\n    // {...}\n    \n    public function getRequestException(Response $response, ?Throwable $senderException): ?Throwable\n    {\n        return new CustomException('Oh yee-naw!', $response, $senderException);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum TLS Version in Saloon v3\nDESCRIPTION: Code to set a custom TLS method in Saloon's configuration. This is necessary if your API integrations require a lower TLS version than the default TLS 1.2 enforced in v3.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/upgrading-from-v2.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Config;\n\nConfig::$defaultTlsMethod = STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT;\n```\n\n----------------------------------------\n\nTITLE: Instantiating SDK Connector\nDESCRIPTION: Shows how to instantiate the Pok√©API SDK connector with an API token.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/building-sdks.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pokeapi\\Pokeapi;\n\n$pokeapi = new Pokeapi('my-api-token');\n\n// Ready to make requests!\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Response Class at Request Level in Saloon PHP\nDESCRIPTION: Shows how to define a custom response class at the request level by setting the $response property.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/responses.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass GetServersRequest extends Request\n{\n    // ...\n    \n    protected ?string $response = CustomResponse::class;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon Cache Plugin with Composer\nDESCRIPTION: Command to install the Saloon caching plugin via Composer package manager.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require saloonphp/cache-plugin \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Exceptions in Request\nDESCRIPTION: Demonstrates how to provide custom exception classes by extending the getRequestException method in a request.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Http\\Response;\nuse \\Throwable;\n\nclass ErrorRequest extends Request\n{\n    // {...}\n    \n    public function getRequestException(Response $response, ?Throwable $senderException): ?Throwable\n    {\n        return new CustomException('Oh yee-naw!', $response, $senderException);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Collections Support\nDESCRIPTION: Command to install Laravel collections support for non-Laravel applications\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require illuminate/collections\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Key\nDESCRIPTION: Implementation of custom cache key generation using the PendingRequest instance.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\PendingRequest;\n\nclass GetServersRequest extends Request implements Cacheable\n{\n    use HasCaching;\n    \n    protected function cacheKey(PendingRequest $pendingRequest): ?string\n    {\n        return 'custom-cache-key';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Arguments in Saloon Request\nDESCRIPTION: Demonstrates how to create a request class that accepts constructor arguments for dynamic endpoint generation.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass GetServerRequest extends Request\n{\n    protected Method $method = Method::GET;\n    \n    public function __construct(protected readonly string $id) {\n        //\n    }\n    \n    public function resolveEndpoint(): string\n    {\n        return '/servers/' . $this->id;\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$request = new GetServerRequest('5664b05b-8b32-4523-a0d5-837f5080417a');\n```\n\n----------------------------------------\n\nTITLE: Preventing Stray Requests in PEST with Saloon\nDESCRIPTION: Shows how to configure Saloon to prevent real API calls during testing when using the PEST testing framework by adding configuration to the Pest.php file.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Config;\n\nConfig::preventStrayRequests();\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon Laravel Plugin\nDESCRIPTION: Command to install the Saloon Laravel plugin package using Composer, requiring version 3.0 or higher.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require saloonphp/laravel-plugin \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Various Rate Limit Stores in Saloon PHP\nDESCRIPTION: This set of snippets demonstrates how to configure different rate limit stores in Saloon PHP, including Memory, File, Redis, Predis, PSR Cache, and Laravel Cache stores.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\MemoryStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    return new MemoryStore;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\FileStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    return new FileStore('some/application/directory');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Redis;\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\RedisStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    $client = new Redis;\n    $client->connect('127.0.0.1');\n\n    return new RedisStore($client);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\PredisStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    $client = new Predis\\Client([\n        'scheme' => 'tcp',\n        'host'   => '10.0.0.1',\n        'port'   => 6379,\n    ]);\n\n    return new PredisStore($client);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\PsrStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    return new PsrStore(new SomePsr16Store);\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Cache;\nuse Saloon\\RateLimitPlugin\\Contracts\\RateLimitStore;\nuse Saloon\\RateLimitPlugin\\Stores\\LaravelCacheStore;\n\nprotected function resolveRateLimitStore(): RateLimitStore\n{\n    return new LaravelCacheStore(Cache::store('redis'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using SendAndRetry with Named Arguments in Saloon v3\nDESCRIPTION: Example of using the sendAndRetry method with its updated parameter names. In v3, the 'maxAttempts' parameter has been renamed to 'tries'.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/upgrading-from-v2.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$connector->sendAndRetry(\n    request: $request,\n    tries: 5,\n);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Connector with Constructor Arguments\nDESCRIPTION: This example shows how to create a connector instance when using constructor arguments.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/connectors.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$connector = new ForgeConnector('https://forge.laravel.com/api/v1');\n```\n\n----------------------------------------\n\nTITLE: Adding Default Query Parameters to Saloon Request\nDESCRIPTION: Shows how to add default query parameters to a Saloon request by implementing the defaultQuery method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/requests.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass GetServersRequest extends Request\n{\n    // ...\n    \n    protected function defaultQuery(): array\n    {\n        return [\n            'sort' => 'name', // ?sort=name\n            'filter[active]' => 'true', // ?filter[active]=true\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespacing Fixtures in PHP with Saloon\nDESCRIPTION: Demonstrates how to organize fixture files in folders using namespacing with the slash character to keep multiple API integrations organized.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nMockClient::global([\n   GetServersRequest::class => MockResponse::fixture('forge/servers'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Testing a Connector with Standard PestPHP\nDESCRIPTION: Example of testing a SaloonPHP connector using standard PestPHP expectations. This verifies that the connector extends the base Connector class and uses specific traits.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntest('connector')\n    ->expect('App\\Http\\Integrations\\Integration\\Connector')\n    ->toExtend('Saloon\\Http\\Connector')\n    ->toUse('Saloon\\Traits\\Plugins\\AcceptsJson')\n    ->toUse('Saloon\\Traits\\Plugins\\AlwaysThrowOnErrors');\n```\n\n----------------------------------------\n\nTITLE: Customizing Fixture Storage Location in PHP\nDESCRIPTION: Sets a custom storage path for Saloon fixtures. By default, fixtures are stored in tests/Fixtures/Saloon, but this can be changed using the setFixturePath method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nMockConfig::setFixturePath('tests/other-directory');\n```\n\n----------------------------------------\n\nTITLE: Adding HasMultipartBody Trait to Request Class\nDESCRIPTION: Shows how to implement HasMultipartBody trait to handle multipart form data functionality\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/multipart-form-body.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasMultipartBody;\n\nclass UploadProfilePictureRequest extends Request implements HasBody\n{\n    use HasMultipartBody;\n\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Stream Body at Runtime in PHP Saloon\nDESCRIPTION: Example showing how to manipulate the stream body at runtime using available methods. This allows for dynamic modification of the body content on a per-request basis.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/stream-body.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new CreateServerRequest;\n\n$request->body()->set(fopen('cowboy-hat.png', 'r'));\n\n$body = $request->body()->all(); // Returns PSR StreamInterface\n```\n\n----------------------------------------\n\nTITLE: Implementing HasPagination in Connector Class\nDESCRIPTION: Demonstrates how to implement the HasPagination interface in a connector class\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Connector;\nuse Saloon\\PaginationPlugin\\Paginator;\nuse Saloon\\PaginationPlugin\\Contracts\\HasPagination;\n\nclass SpotifyConnector extends Connector implements HasPagination\n{\n    // ...\n    \n    public function paginate(Request $request): Paginator\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Connector with Lawman\nDESCRIPTION: Improved version of connector testing using Lawman expectations. This shows how Lawman provides more readable and domain-specific assertions for SaloonPHP components.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/lawman.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntest('connector')\n    ->expect('App\\Http\\Integrations\\Integration\\Connector')\n    ->toBeSaloonConnector()\n    ->toUseAcceptsJsonTrait()\n    ->toUseAlwaysThrowOnErrorsTrait();\n```\n\n----------------------------------------\n\nTITLE: Handling Failures with Promises in Saloon\nDESCRIPTION: Demonstrates asynchronous error handling with promises when using sendAsync or request pooling.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/handling-failures.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Response;\n\n$forge = new ForgeConnector('api-token');\n$promise = $forge->sendAsync(new GetServersRequest);\n\n$promise\n    ->then(function (Response $response) {\n        // Handle successful response\n    })\n    ->otherwise(function (RequestException $exception) {\n        // Handle failed request\n    });\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon SDK Generator via Composer\nDESCRIPTION: Command to install the Saloon SDK Generator globally using Composer. This allows for easy CLI access to generate SDKs.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/sdk-generator.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer global require crescat-io/saloon-sdk-generator\n```\n\n----------------------------------------\n\nTITLE: Publishing Saloon Configuration\nDESCRIPTION: Artisan command to publish Saloon's configuration file to the Laravel project.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=saloon-config\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon Rate Limit Plugin via Composer\nDESCRIPTION: This snippet shows the Composer command to install the Saloon rate limit plugin.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require saloonphp/rate-limit-plugin \"^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Using assertNothingSent Method in Saloon\nDESCRIPTION: Demonstrates how to verify that no HTTP requests have been sent during a test using the assertNothingSent method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/testing/README.md#2025-04-20_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$mockClient->assertNothingSent();\n```\n\n----------------------------------------\n\nTITLE: Accessing Guzzle Client and Handler Stack in Saloon (PHP)\nDESCRIPTION: Shows how to access the underlying Guzzle client and handler stack in a Saloon connector. This allows for direct modification of Guzzle components when needed.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/middleware.md#2025-04-20_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ForgeConnector extends Connector\n{\n    // {...}\n    \n    public function __construct()\n    {\n        $guzzleClient = $this->sender()->getGuzzleClient();\n        \n        $handlerStack = $this->sender()->getHandlerStack();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example XML Structure for XML Wrangler Demo\nDESCRIPTION: Sample XML document representing a breakfast menu with food items and their attributes, used to demonstrate the XML Wrangler reader functionality in the previous code snippet.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/xml-wrangler.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<breakfast_menu>\n  <food soldOut=\"false\" bestSeller=\"true\">\n    <name>Belgian Waffles</name>\n    <price>$5.95</price>\n    <description>Two of our famous Belgian Waffles with plenty of real maple syrup</description>\n    <calories>650</calories>\n  </food>\n  <food soldOut=\"false\" bestSeller=\"false\">\n    <name>Strawberry Belgian Waffles</name>\n    <price>$7.95</price>\n    <description>Light Belgian waffles covered with strawberries and whipped cream</description>\n    <calories>900</calories>\n  </food>\n  <food soldOut=\"false\" bestSeller=\"true\">\n    <name>Berry-Berry Belgian Waffles</name>\n    <price>$8.95</price>\n    <description>Light Belgian waffles covered with an assortment of fresh berries and whipped cream</description>\n    <calories>900</calories>\n  </food>\n</breakfast_menu>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Names to Rate Limits in Saloon PHP\nDESCRIPTION: This snippet demonstrates how to add custom names to rate limits in Saloon PHP, useful for scenarios like per-user API rate limits.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected function resolveLimits(): array\n{\n    return [\n        Limit::allow(60)->everyMinute()->name('spotify-limit-user-' . $this->userId),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Saloon Packages with Composer\nDESCRIPTION: Command to update all Saloon packages to their new major versions using Composer. This will update your composer.lock file and vendor directory.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/upgrade/upgrading-from-v2.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update \"saloonphp/*\"\n```\n\n----------------------------------------\n\nTITLE: Debugging Request and Response from Request in Saloon\nDESCRIPTION: Alternative approach to debugging by calling the debug() method on the request object instead of the connector.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/debugging.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$connector = new ForgeConnector;\n\n$connector->send($request->debug());\n```\n\n----------------------------------------\n\nTITLE: Disabling 429 Detection in Saloon PHP Connector\nDESCRIPTION: Shows how to disable automatic detection of 429 Too Many Attempts responses by setting the detectTooManyAttempts property to false in a connector's constructor. This prevents Saloon from automatically handling rate limit responses.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Saloon\\Http\\Connector;\nuse Saloon\\RateLimitPlugin\\Stores\\MemoryStore;\nuse Saloon\\RateLimitPlugin\\Traits\\HasRateLimits;\n\nclass SpotifyConnector extends Connector\n{\n    use HasRateLimits;\n    \n    public function __construct()\n    {\n        $this->detectTooManyAttempts = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Expiry Time\nDESCRIPTION: Implementation of cache expiry duration in seconds.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/caching-responses.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function cacheExpiryInSeconds(): int\n{\n    return 3600; // One Hour\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Per-Page Limit on Instantiated Paginator\nDESCRIPTION: This snippet shows how to change the per-page limit on an already instantiated paginator using the setPerPageLimit method. This must be set before iterating over the paginator.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/limit-offset-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate($request);\n\n$paginator->setPerPageLimit(250);\n\n// foreach($paginator as $response) { ... }\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Limit Prefixes in Saloon PHP\nDESCRIPTION: This snippet shows how to customize the prefix for rate limit names in Saloon PHP by extending the getLimiterPrefix method.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/handling-rate-limits.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function getLimiterPrefix(): ?string\n{\n    return 'spotify-user-' . $this->userId;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Saloon Pagination Plugin\nDESCRIPTION: Command to install the Saloon pagination plugin via Composer\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require saloonphp/pagination-plugin \"^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel HTTP Sender - Laravel 9/10\nDESCRIPTION: Command to install Saloon's Laravel HTTP sender package for Laravel 9 or 10.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/installable-plugins/laravel-integration.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require saloonphp/laravel-http-sender \"^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding HasJsonBody Trait to Request Class in PHP\nDESCRIPTION: This code demonstrates how to add the HasJsonBody trait to a request class, which implements the body() method required by the HasBody interface and provides JSON body functionality.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/json-body.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Saloon\\Http\\Request;\nuse Saloon\\Contracts\\Body\\HasBody;\nuse Saloon\\Traits\\Body\\HasJsonBody;\n\nclass CreateServerRequest extends Request implements HasBody\n{\n    use HasJsonBody;\n\n    protected Method $method = Method::POST;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth2 Response Handling\nDESCRIPTION: Shows how to customize the handling of OAuth2 response data when creating authenticators.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/client-credentials-grant.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nprotected function createOAuthAuthenticatorFromResponse(SaloonResponse $response): OAuthAuthenticatorInterface\n{\n    $responseData = $response->object();\n\n    $accessToken = $responseData->access_token;\n    $expiresAt = new DateTimeImmutable('+' . $responseData->expires_in . ' seconds');\n\n    return $this->createOAuthAuthenticator($accessToken, $expiresAt);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing OAuth2 State and Authentication in Saloon\nDESCRIPTION: Examples of state management, access token creation, and authentication storage in Saloon.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/oauth2-authentication/oauth2-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$connector = new SpotifyConnector;\n$authenticator = $connector->getAccessToken($code);\n\n// Securely store this against your user.\n\n$serialized = $authenticator->serialize();\n\n// Unserialize the authenticator when retrieving it\n\n$authenticator = AccessTokenAuthenticator::unserialize($serialized);\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Page Limit Dynamically\nDESCRIPTION: Demonstrates how to set the per-page limit dynamically on an instantiated paginator before iteration.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/digging-deeper/pagination/custom-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$spotifyConnector = new SpotifyConnector;\n\n$paginator = $spotifyConnector->paginate($request);\n\n$paginator->setPerPageLimit(250);\n\n// foreach($paginator as $response) { ... }\n```\n\n----------------------------------------\n\nTITLE: Body Manipulation Example in PHP Saloon\nDESCRIPTION: Example of runtime body manipulation using Saloon's body methods.\nSOURCE: https://github.com/sammyjo20/saloon-docs/blob/v3/the-basics/request-body-data/string-plain-text-body.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$request = new CreateServerRequest;\n\n$request->body()->set('Howdy, Partner');\n\n$body = $request->body()->all();\n\n// string: 'plain-text-response-body'\n```"
  }
]