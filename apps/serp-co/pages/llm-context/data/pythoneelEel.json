[
  {
    "owner": "python-eel",
    "repo": "eel",
    "content": "TITLE: Exposing Python Functions to JavaScript with Eel\nDESCRIPTION: Example of decorating a Python function to make it callable from JavaScript.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@eel.expose\ndef my_python_function(a, b):\n    print(a, b, a + b)\n```\n\n----------------------------------------\n\nTITLE: Exposing JavaScript Functions to Python with Eel\nDESCRIPTION: JavaScript code showing how to expose a function to be callable from Python.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neel.expose(my_javascript_function);\nfunction my_javascript_function(a, b, c, d) {\n  if (a < b) {\n    console.log(c * d);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting an Eel App in Python\nDESCRIPTION: Basic Python code to initialize an Eel app, specifying the web directory and starting page.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport eel\neel.init('web')\neel.start('main.html')\n```\n\n----------------------------------------\n\nTITLE: Calling Exposed Python Functions from JavaScript\nDESCRIPTION: JavaScript code demonstrating how to call an exposed Python function.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Calling Python...\");\neel.my_python_function(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Calling Exposed JavaScript Functions from Python\nDESCRIPTION: Python code demonstrating how to call an exposed JavaScript function.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nprint('Calling Javascript...')\neel.my_javascript_function(1, 2, 3, 4)\n```\n\n----------------------------------------\n\nTITLE: Including Eel.js in HTML\nDESCRIPTION: HTML script tag to include the Eel JavaScript library in a web page.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"/eel.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Hello World HTML Page with Eel Integration\nDESCRIPTION: Complete HTML example demonstrating Eel usage, including exposing and calling functions between JavaScript and Python.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n\n    <!-- Include eel.js - note this file doesn't exist in the 'web' directory -->\n    <script type=\"text/javascript\" src=\"/eel.js\"></script>\n    <script type=\"text/javascript\">\n      eel.expose(say_hello_js); // Expose this function to Python\n      function say_hello_js(x) {\n        console.log(\"Hello from \" + x);\n      }\n\n      say_hello_js(\"Javascript World!\");\n      eel.say_hello_py(\"Javascript World!\"); // Call a Python function\n    </script>\n  </head>\n\n  <body>\n    Hello, World!\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Operations in Eel - Python\nDESCRIPTION: This snippet showcases how to set up asynchronous operations in Eel, emphasizing the use of greenlets with Gevent to manage threads for web serving and application logic.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport eel\neel.init('web')\n\ndef my_other_thread():\n    while True:\n        print(\"I'm a thread\")\n        eel.sleep(1.0)                  # Use eel.sleep(), not time.sleep()\n\neel.spawn(my_other_thread)\n\neel.start('main.html', block=False)     # Don't block on this call\n\nwhile True:\n    print(\"I'm a main loop\")\n    eel.sleep(1.0)                      # Use eel.sleep(), not time.sleep()\n```\n\n----------------------------------------\n\nTITLE: JavaScript Random Number Function - JavaScript\nDESCRIPTION: This snippet defines a JavaScript function exposed to Python using Eel that generates a random number. The Python code calls the JavaScript function to retrieve a random value asynchronously.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\neel.expose(js_random);\nfunction js_random() {\n  return Math.random();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Eel with pip in Python\nDESCRIPTION: Commands to install the Eel library using pip, including an optional Jinja2 template support.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install eel\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install eel[jinja2]\n```\n\n----------------------------------------\n\nTITLE: Hello World Python Script with Eel\nDESCRIPTION: Basic Python script to set up an Eel application with an exposed function.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport eel\n\n# Set web files folder and optionally specify which file types to check for eel.expose()\n```\n\n----------------------------------------\n\nTITLE: Initializing Eel and Exposing Functions - Python\nDESCRIPTION: This snippet initializes the Eel framework, specifying allowed extensions for files, and defines a Python function that can be called from JavaScript. The function prints a greeting message using the input parameter.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n#   *Default allowed_extensions are: ['.js', '.html', '.txt', '.htm', '.xhtml']\neel.init('web', allowed_extensions=['.js', '.html'])\n\n@eel.expose                         # Expose this function to Javascript\ndef say_hello_py(x):\n    print('Hello from %s' % x)\n\nsay_hello_py('Python World!')\neel.say_hello_js('Python World!')   # Call a Javascript function\n\neel.start('hello.html')             # Start (this blocks and enters loop)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Return Values - Python\nDESCRIPTION: This snippet discusses how to implement asynchronous callbacks and synchronous return fetching from JavaScript to Python using Eel. It highlights the usage of callbacks and inline lambdas.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef print_num(n):\n    print('Got this from Javascript:', n)\n\n# Call Javascript function, and pass explicit callback function\neel.js_random()(print_num)\n\n# Do the same with an inline lambda as callback\neel.js_random()(lambda n: print('Got this from Javascript:', n))\n```\n\n----------------------------------------\n\nTITLE: Synchronous Returns from JavaScript - Python\nDESCRIPTION: This snippet demonstrates how to synchronously retrieve return values from JavaScript in Python using Eel. It requires the browser window to be open before performing the synchronous call.\nSOURCE: https://github.com/python-eel/eel/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nn = eel.js_random()()  # This immediately returns the value\nprint('Got this from Javascript:', n)\n```\n\n----------------------------------------\n\nTITLE: Adding eel.js to CRA index.html\nDESCRIPTION: This snippet shows how to include the `eel.js` script in the `index.html` file of a Create React App. This is necessary for the React application to communicate with the Python backend using Eel. The `src` attribute of the script tag points to the location of the `eel.js` file, which is served by the Eel application.\nSOURCE: https://github.com/python-eel/eel/blob/main/examples/07 - CreateReactApp/README.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<!-- Load eel.js from the port specified in the eel.start options -->\\n<script type=\\\"text/javascript\\\" src=\\\"http://localhost:8080/eel.js\\\"></script>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Eel with Jinja2 Support in Python\nDESCRIPTION: Shows how to install Eel with Jinja2 templating support using pip. This is mentioned in the v0.13.0 update.\nSOURCE: https://github.com/python-eel/eel/blob/main/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install eel[jinja2]\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Eel Dependencies with Version Constraints\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the Eel project. It includes libraries for web server functionality, WebSocket support, concurrency, and type hinting.\nSOURCE: https://github.com/python-eel/eel/blob/main/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbottle<1.0.0\nbottle-websocket<1.0.0\ngevent\ngevent-websocket<1.0.0\ngreenlet>=1.0.0,<2.0.0\npyparsing>=3.0.0,<4.0.0\ntyping-extensions>=4.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment using venv module. The environment name 'venv' is recommended as it's included in .gitignore\nSOURCE: https://github.com/python-eel/eel/blob/main/README-developers.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install production dependencies, test dependencies (pytest and selenium), and meta dependencies (tox) using pip\nSOURCE: https://github.com/python-eel/eel/blob/main/README-developers.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt        # eel's 'prod' requirements\npip3 install -r requirements-test.txt   # pytest and selenium\npip3 install -r requirements-meta.txt   # tox \n```\n\n----------------------------------------\n\nTITLE: Cloning Eel Repository\nDESCRIPTION: Command to clone the Eel repository from GitHub using SSH\nSOURCE: https://github.com/python-eel/eel/blob/main/README-developers.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:python-eel/Eel.git\n```\n\n----------------------------------------\n\nTITLE: Running Tox Tests for Specific Python Version\nDESCRIPTION: Command to run Tox tests for a specific Python version (example shows Python 3.6)\nSOURCE: https://github.com/python-eel/eel/blob/main/README-developers.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py36\n```\n\n----------------------------------------\n\nTITLE: Running Tox Tests for All Supported Versions\nDESCRIPTION: Command to run Tox tests across all supported Python versions\nSOURCE: https://github.com/python-eel/eel/blob/main/README-developers.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Eel Project\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the Eel project. It includes packages for system monitoring, testing, web automation, and development tools.\nSOURCE: https://github.com/python-eel/eel/blob/main/requirements-test.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npsutil>=5.0.0,<6.0.0\npytest>=7.0.0,<8.0.0\npytest-timeout>=2.0.0,<3.0.0\nselenium>=4.0.0,<5.0.0\nwebdriver_manager>=4.0.0,<5.0.0\nmypy>=1.0.0,<2.0.0\npyinstaller\ntypes-setuptools\n```\n\n----------------------------------------\n\nTITLE: Python Package Version Requirements\nDESCRIPTION: Specifies the required Python packages and their version constraints for the development environment. Includes tox for testing, tox-pyenv and tox-gh-actions for CI integration, and core Python packages like virtualenv and setuptools.\nSOURCE: https://github.com/python-eel/eel/blob/main/requirements-meta.txt#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntox>=3.15.2,<4.0.0\ntox-pyenv==1.1.0\ntox-gh-actions==2.0.0\nvirtualenv>=16.7.10\nsetuptools\n```"
  }
]