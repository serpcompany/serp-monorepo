[
  {
    "owner": "handsontable",
    "repo": "handsontable",
    "content": "TITLE: Applying Configuration Options in JavaScript\nDESCRIPTION: Example showing how to initialize Handsontable with configuration options using object literal notation in JavaScript. The example demonstrates setting up a data grid with various features enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/styles/handsontable.css';\nimport 'handsontable/styles/ht-theme-main.css';\n\nconst container = document.querySelector('#example');\nconst hot = new Handsontable(container, {\n  // configuration options, in the object literal notation\n  licenseKey: \"non-commercial-and-evaluation\",\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n  ],\n  width: 400,\n  height: 300,\n  colHeaders: true,\n  rowHeaders: true,\n  customBorders: true,\n  dropdownMenu: true,\n  multiColumnSorting: true,\n  filters: true,\n  manualRowMove: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable Data Grid with CDN Setup in HTML\nDESCRIPTION: This snippet demonstrates how to quickly set up a Handsontable data grid using CDN links. It includes the necessary HTML structure, CSS imports, and JavaScript code to initialize a basic grid with sample data, column definitions, and various configuration options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/README.md#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Handsontable - JavaScript Data Grid Example</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css\"\n    />\n  </head>\n  <body>\n    <div id=\"handsontable-grid\" class=\"ht-theme-main-dark-auto\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js\"></script>\n    <script>\n      const element = document.getElementById(\"handsontable-grid\");\n\n      new Handsontable(element, {\n        data: [\n          { company: \"Tagcat\", country: \"United Kingdom\", rating: 4.4 },\n          { company: \"Zoomzone\", country: \"Japan\", rating: 4.5 },\n          { company: \"Meeveo\", country: \"United States\", rating: 4.6 },\n        ],\n        columns: [\n          { data: \"company\", title: \"Company\", width: 100 },\n          { data: \"country\", title: \"Country\", width: 170, type: \"dropdown\", source: [\"United Kingdom\", \"Japan\", \"United States\"] },\n          { data: \"rating\", title: \"Rating\", width: 100, type: \"numeric\" },\n        ],\n        rowHeaders: true,\n        navigableHeaders: true,\n        tabNavigation: true,\n        multiColumnSorting: true,\n        headerClassName: \"htLeft\",\n        licenseKey: \"non-commercial-and-evaluation\",\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable in JavaScript\nDESCRIPTION: JavaScript code to initialize a Handsontable instance with sample data and basic configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example');\n\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation' // for non-commercial use only\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Cell Type Implementation\nDESCRIPTION: A comprehensive example of creating a custom cell type with custom editor, renderer, validator, and additional properties.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyEditor extends Handsontable.editors.TextEditor {}\n\nfunction customRenderer(instance, td, row, column, prop, value, cellProperties) {\n  // ...renderer logic\n}\n\nfunction customValidator(query, callback) {\n  // ...validator logic\n  callback(/* Pass `true` or `false` */);\n}\n\n// Register an alias\nHandsontable.cellTypes.registerCellType('my.custom', {\n  editor: MyEditor,\n  renderer: customRenderer,\n  validator: customValidator,\n  // You can add additional options to the cell type\n  // based on Handsontable settings\n  className: 'my-cell',\n  allowInvalid: true,\n  // Or you can add custom properties which\n  // will be accessible in `cellProperties`\n  myCustomCellState: 'complete',\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Handsontable Instance in React Components\nDESCRIPTION: This example demonstrates how to create a reference to a Handsontable instance in a React component using refs. It shows how to access instance methods to programmatically select cells and scroll to them.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/react-methods/react-methods.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { useRef } from 'react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef(null);\n  const data = [\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ];\n\n  const selectCell = () => {\n    // The HotTable component's `current` property stores a reference to the Handsontable instance.\n    hotRef.current.hotInstance.selectCell(1, 1);\n  };\n\n  const scrollToCell = () => {\n    hotRef.current.hotInstance.scrollViewportTo(14, 0);\n    hotRef.current.hotInstance.selectCell(14, 0);\n  };\n\n  return (\n    <div className=\"controls example-wrapper\">\n      <div>\n        <button onClick={selectCell}>Select cell B2</button>\n        <button onClick={scrollToCell}>Scroll to row 15</button>\n      </div>\n      <div id=\"hot-app\">\n        <HotTable\n          ref={hotRef}\n          data={data}\n          height={220}\n          colHeaders={true}\n          rowHeaders={true}\n          contextMenu={true}\n          autoRowSize={false}\n        />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Constant Column and Row Sizes in Vanilla JavaScript\nDESCRIPTION: Initialize Handsontable with predefined column widths and row heights to avoid dynamic calculation and improve performance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/performance/performance.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(obj, {\n  colWidths: [50, 150, 45],\n  rowHeights: [40, 40, 40, 40],\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Handsontable React Implementation Example\nDESCRIPTION: A complete example showing how to implement Handsontable in a React component. Demonstrates importing necessary components, registering modules, and creating a data grid with columns and configuration options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/react/README.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable, HotColumn } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/styles/handsontable.min.css';\nimport 'handsontable/styles/ht-theme-main.min.css';\n\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  return (\n    <div class=\"ht-theme-main-dark-auto\">\n      <HotTable\n        data={[\n          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },\n          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },\n          { company: 'Meeveo', country: 'United States', rating: 4.6 },\n        ]}\n        rowHeaders={true}\n        colHeaders={true}\n        navigableHeaders={true}\n        tabNavigation={true}\n        multiColumnSorting={true}\n        headerClassName=\"htLeft\"\n        licenseKey=\"non-commercial-and-evaluation\"\n      >\n        <HotColumn title=\"Company\" data=\"company\" width=\"100\"></HotColumn>\n        <HotColumn title=\"Country\" data=\"country\" width=\"170\" type=\"dropdown\" source={['United Kingdom', 'Japan', 'United States']}></HotColumn>\n        <HotColumn title=\"Rating\" data=\"rating\" width=\"100\" type=\"numeric\"></HotColumn>\n      </HotTable>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable Grid with Configuration\nDESCRIPTION: JavaScript code to initialize a new Handsontable instance with sample data, column definitions, and various grid features enabled. Includes style imports and basic configuration options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/README.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\n// Base CSS rules\nimport 'handsontable/styles/handsontable.min.css';\n// Main theme variables\nimport 'handsontable/styles/ht-theme-main.min.css';\n\nconst element = document.getElementById('handsontable-grid');\n\nnew Handsontable(element, {\n  data: [\n    { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },\n    { company: 'Zoomzone', country: 'Japan', rating: 4.5 },\n    { company: 'Meeveo', country: 'United States', rating: 4.6 },\n  ],\n  columns: [\n    { data: 'company', title: 'Company', width: 100 },\n    { data: 'country', title: 'Country', width: 170, type: 'dropdown', source: ['United Kingdom', 'Japan', 'United States'] },\n    { data: 'rating', title: 'Rating', width: 100, type: 'numeric' },\n  ],\n  rowHeaders: true,\n  navigableHeaders: true,\n  tabNavigation: true,\n  multiColumnSorting: true,\n  headerClassName: 'htLeft',\n  licenseKey: 'non-commercial-and-evaluation',\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Array of Objects to Data Grid\nDESCRIPTION: Demonstrates how to use an array of objects as a data source for the grid, with explicit column definitions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  { id: 1, name: 'Ted Right', address: '' },\n  { id: 2, name: 'Frank Honest', address: '' },\n  { id: 3, name: 'Joan Well', address: '' }\n];\n\nconst container = document.getElementById('example3');\nconst hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: ['ID', 'Full name', 'Address'],\n  height: 'auto',\n  columns: [\n    { data: 'id' },\n    { data: 'name' },\n    { data: 'address' }\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Using SelectEditor in React with HotTable Component\nDESCRIPTION: Example showing how to configure the SelectEditor in a React component using the HotTable wrapper. The second column is configured to use the custom SelectEditor with predefined options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[\n    {},\n    {\n      editor: SelectEditor,\n      selectOptions: ['option1', 'option2', 'option3']\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Type with Custom Validator in React\nDESCRIPTION: Example showing how to configure a numeric column type with a custom validator in React HotTable component\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[{\n    type: 'numeric',\n    // validator function defined elsewhere\n    validator: customValidator\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom HTML in Handsontable Cells - JS/TS\nDESCRIPTION: Demonstrates implementing custom cell renderers to display HTML content safely in different column types. Uses both built-in HTML renderer and custom safe HTML renderer with allowed tags. Includes handling for images and comments with XSS protection.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-renderer/cell-renderer.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst example4 = document.querySelector('#example4');\nconst safeHtmlRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n  const escaped = DOMPurify.sanitize(value);\n  td.innerHTML = escaped;\n  return td;\n};\n\nconst coverRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n  const escaped = Handsontable.helper.stringify(value);\n  td.innerHTML = `<img src=\"${escaped}\" style=\"width: 70px\">`;\n  return td;\n};\n\nconst hot = new Handsontable(example4, {\n  data: [\n    ['Lorem ipsum', 'Jane', 'Lorem ipsum dolor sit amet', 'image1.png'],\n    ['Dolor sit', 'John', 'Dolor sit amet', 'image2.png']\n  ],\n  colHeaders: ['Title', 'Description', 'Comments', 'Cover'],\n  height: 'auto',\n  columns: [\n    { renderer: 'html' },\n    { renderer: 'html' },\n    { renderer: safeHtmlRenderer },\n    { renderer: coverRenderer }\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Cell Type in Handsontable\nDESCRIPTION: Demonstrates how to set up numeric cell types for the entire grid, a single column, or a specific cell. This snippet shows the configuration options for both JavaScript and React implementations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/numeric-cell-type/numeric-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// set the numeric cell type for each cell of the entire grid\ntype: 'numeric',\n\n// set the numeric cell type for each cell of a single column\ncolumns: [\n  {\n    type: 'numeric',\n  },\n]\n\n// set the numeric cell type for a single cell\ncell: [\n  {\n    row: 0,\n    col: 0,\n    type: 'numeric',\n  }\n],\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// set the numeric cell type for each cell of the entire grid\ntype={'numeric'},\n\n// set the numeric cell type for each cell of a single column\ncolumns={[{\n  type: 'numeric',\n}]}\n\n// set the numeric cell type for a single cell\ncell={[{\n  row: 0,\n  col: 0,\n  type: 'numeric',\n}]}\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Registration\nDESCRIPTION: Demonstration of how to register a custom renderer function with Handsontable, including base renderer inheritance and alias registration\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-renderer/cell-renderer.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customRenderer(hotInstance, td, row, column, prop, value, cellProperties) {\n  // Optionally include `BaseRenderer` which is responsible for\n  // adding/removing CSS classes to/from the table cells.\n  Handsontable.renderers.BaseRenderer.apply(this, arguments);\n\n  // ...your custom logic of the renderer\n}\n\n// Register an alias\nHandsontable.renderers.registerRenderer('my.custom', customRenderer);\n```\n\n----------------------------------------\n\nTITLE: Handling Row Creation Event in JavaScript\nDESCRIPTION: Shows how to add an afterCreateRow hook handler in vanilla JavaScript to log information about newly created rows\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/events-and-hooks/events-and-hooks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhot.addHook('afterCreateRow', (row, amount) => {\n  console.log(`${amount} row(s) were created, starting at index ${row}`);\n})\n```\n\n----------------------------------------\n\nTITLE: Using HotTable component in React\nDESCRIPTION: Example of using the HotTable component to create a Handsontable instance in a React application.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react-wrapper';\n\n<div class=\"ht-theme-main-dark-auto\">\n  <HotTable\n    data={[\n      ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n      ['2019', 10, 11, 12, 13],\n      ['2020', 20, 11, 14, 13],\n      ['2021', 30, 15, 12, 13]\n    ]}\n    rowHeaders={true}\n    colHeaders={true}\n    height=\"auto\"\n    autoWrapRow={true}\n    autoWrapCol={true}\n    licenseKey=\"non-commercial-and-evaluation\" // for non-commercial use only\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Cell Validator in Handsontable\nDESCRIPTION: Example of registering a custom validator function under a specific alias using Handsontable.validators.registerValidator(). This allows users to reference the validator by name without knowing the actual implementation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHandsontable.validators.registerValidator('credit-card', creditCardValidator);\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Operations in TypeScript with Handsontable\nDESCRIPTION: TypeScript implementation showcasing the batch() method for optimizing render time in Handsontable. Uses performance API to measure and compare render times when performing multiple operations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(300, 100),\n  width: '100%',\n  height: 320,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nconst runBtn = document.querySelector('#run');\nconst renderTime = document.querySelector('#render-time');\n\nrunBtn.addEventListener('click', () => {\n  // create a dataset to insert\n  const dataToInsert = Handsontable.helper.createSpreadsheetData(5, 5);\n  \n  const t0 = performance.now();\n  \n  hot.batch(() => {\n    // set the dataset at the specific coordinates\n    hot.populateFromArray(5, 2, dataToInsert);\n    \n    // change the header for selected column\n    hot.updateSettings({\n      columns: [{\n        data: 1,\n        renderer(instance, td, row, col, prop, value) {\n          td.innerText = `${value} USD`;\n          td.style.color = '#FF0000'\n          \n          return td;\n        }\n      }]\n    });\n    \n    // change column alignment\n    hot.updateSettings({\n      colWidths: [45, 100, 100, 110, 100]\n    });\n    \n    // alter the table to have more rows\n    hot.alter('insert_row_above', 5, 15);\n    \n    // alter the table to have more columns\n    hot.alter('insert_col_start', 2, 5);\n  });\n  \n  const t1 = performance.now();\n  \n  renderTime.innerText = `${Math.round(t1 - t0)}ms`;\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Editor Implementation\nDESCRIPTION: Full implementation of a custom editor with proper namespace organization and registration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n(Handsontable => {\n  const CustomEditor = Handsontable.editors.BaseEditor.prototype.extend();\n\n  // ...rest of the editor code\n\n  // Put editor in dedicated namespace\n  Handsontable.editors.CustomEditor = CustomEditor;\n\n  // Register alias\n  Handsontable.editors.registerEditor('theBestEditor', CustomEditor);\n\n})(Handsontable);\n```\n\n----------------------------------------\n\nTITLE: Creating a Well-Prepared Custom Validator Function in Handsontable\nDESCRIPTION: A complete example of creating and registering a custom validator function in Handsontable. This pattern encapsulates the validator logic and registers it with a prefixed alias to avoid naming collisions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(Handsontable => {\n  function customValidator(query, callback) {\n    // ...your custom logic of the validator\n\n    callback(/* Pass `true` or `false` based on your logic */);\n  }\n\n  // Register an alias\n  Handsontable.validators.registerValidator('my.custom', customValidator);\n\n})(Handsontable);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Plugin by Extending BasePlugin\nDESCRIPTION: Complete implementation of a custom Handsontable plugin that extends BasePlugin. This example shows all the required methods including lifecycle hooks, configuration handling, and event processing.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-plugins/custom-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport class CustomPlugin extends BasePlugin {\n /**\n  * Define a unique key (a string) for your plugin.\n  * The key becomes the plugin's alias.\n  * Handsontable registers the plugin under that alias.\n  * When an `updateSettings()` call includes the plugin's alias,\n  * your plugin's state gets updated.\n  * You can also use the alias to recognize the plugin's\n  * options passed through the Setting object at Handsontable's initialization.\n  *\n  * @returns {string}\n  */\n  static get PLUGIN_KEY() {\n    return 'customPlugin';\n  }\n\n /**\n  * Define additional setting keys (an array of strings) for your plugin.\n  * When an `updateSettings()` call includes at least one of those setting keys,\n  * your plugin's state gets updated.\n  * If you set SETTING_KEYS() to return `true`, your plugin updates on every `updateSettings()` call.\n  * If you set SETTING_KEYS() to return `false`, your plugin never updates on any `updateSettings()` call.\n  *\n  * @returns {Array|boolean}\n  */\n  static get SETTING_KEYS() {\n    return true;\n  }\n\n  /**\n   * Extend the default constructor and define internal properties for your plugin.\n   *\n   * @param {Handsontable} hotInstance\n   */\n  constructor(hotInstance) {\n     /**\n     * The [`BasePlugin`](@/api/basePlugin.md)'s constructor adds a `this.hot` property to your plugin.\n     * The `this.hot` property:\n     * - Is a reference to the Handsontable instance.\n     * - Can't be overwritten.\n     * - Gives you access to columns' and rows' index mappers.\n     */\n    super(hotInstance);\n\n    // Initialize all your public properties in the class' constructor.\n    this.configuration = {\n      enabled: false,\n      msg: ''\n    };\n  }\n\n  /**\n   * Unifies configuration passed to settings object.\n   *\n   * @returns {object}\n   * @throws {Error}\n   */\n  getUnifiedConfig() {\n    const pluginSettings = this.hot.getSettings()[CustomPlugin.PLUGIN_KEY];\n\n    if (pluginSettings === true) {\n      return {\n        enabled: true,\n        msg: 'default msg boolean'\n      };\n    }\n    if (Object.prototype.toString.call(pluginSettings) === '[object Object]') {\n      return {\n        enabled: true,\n        msg: 'default msg obj',\n        ...pluginSettings\n      };\n    }\n    if (pluginSettings === false) {\n      return {\n        enabled: false,\n        msg: ''\n      };\n    }\n\n    throw new Error(\n      `${CustomPlugin.PLUGIN_KEY} - incorrect plugins configuration.\n      Passed:\n        - type: ${typeof pluginSettings}\n        - value: ${JSON.stringify(pluginSettings, null, ' ')}\n\n      Expected:\n        - boolean\n        - object\n      `\n    );\n  }\n\n  /**\n   * Checks if the plugin is enabled in the settings.\n   */\n  isEnabled() {\n    const pluginSettings = this.getUnifiedConfig();\n\n    return pluginSettings.enabled;\n  }\n\n  /**\n   * The `enablePlugin` method is triggered on the `beforeInit` hook.\n   * It should contain your plugin's initial setup and hook connections.\n   * This method is run only if the `isEnabled` method returns `true`.\n   */\n  enablePlugin() {\n    // Get the plugin's configuration from the initialization object.\n    this.configuration = this.getUnifiedConfig();\n\n    // Add all your plugin hooks here. It's a good idea to use arrow functions to keep the plugin as a context.\n    this.addHook('afterChange', (changes, source) => this.onAfterChange(changes, source));\n\n    // The `super` method sets the `this.enabled` property to `true`.\n    // It is a necessary step to update the plugin's settings properly.\n    super.enablePlugin();\n  }\n\n  /**\n   * The `disablePlugin` method disables the plugin.\n   */\n  disablePlugin() {\n    // Reset all of your plugin class properties to their default values here.\n    this.configuration = null;\n\n    // The `BasePlugin.disablePlugin` method takes care of clearing the hook connections\n    // and assigning the 'false' value to the 'this.enabled' property.\n    super.disablePlugin();\n  }\n\n  /**\n   * The `updatePlugin` method is called on the `afterUpdateSettings` hook\n   * (unless the `updateSettings` method turned the plugin off),\n   * but only if the config object passed to the `updateSettings` method\n   * contains entries relevant to that particular plugin.\n   *\n   * The `updatePlugin` method should contain anything that your plugin needs to do to work correctly\n   * after updating the Handsontable instance settings.\n   */\n  updatePlugin() {\n    // The `updatePlugin` method needs to contain all the code needed to properly re-enable the plugin.\n    // In most cases simply disabling and enabling the plugin should do the trick.\n    const { enabled, msg } = this.getUnifiedConfig();\n\n    // You can decide if updating the settings triggers the the disable->enable routine or not.\n    if (enabled === false && this.enabled === true) {\n      this.disablePlugin();\n\n    } else if (enabled === true && this.enabled === false) {\n      this.enablePlugin();\n    }\n\n    // If you need to update just a single option.\n    if (this.configuration !== null && msg && this.configuration.msg !== msg) {\n      this.configuration.msg = msg;\n    }\n\n    super.updatePlugin();\n  }\n\n  /**\n   * Define your external methods.\n   */\n  externalMethodExample() {\n    // Method definition.\n  }\n\n  /**\n   * The afterChange hook callback.\n   *\n   * @param {CellChange[]} changes An array of changes.\n   * @param {string} source Describes the source of the change.\n   */\n  onAfterChange(changes, source) {\n    // afterChange callback goes here.\n    console.log(\n      `${CustomPlugin.PLUGIN_KEY}.onAfterChange - ${this.configuration.msg}`,\n      changes,\n      source\n    );\n  }\n\n  /**\n   * The `destroy` method is the best place to clean up any instances,\n   * objects or index mappers created during the plugin's lifecycle.\n   */\n  destroy() {\n    // The `super` method cleans up the plugin's event callbacks, hook connections, and properties.\n    super.destroy();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editor-Specific Methods for SelectEditor\nDESCRIPTION: Implementation of required editor methods: getValue(), setValue(), open(), focus(), and close(). The open() method positions the select element over the edited cell with proper dimensions, while other methods handle data access and editor visibility.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngetValue() {\n  return this.select.value;\n}\n\nsetValue(value) {\n  this.select.value = value;\n}\n\nopen() {\n  const {\n    top,\n    start,\n    width,\n    height,\n  } = this.getEditedCellRect();\n  const selectStyle = this.select.style;\n\n  this._opened = true;\n\n  selectStyle.height = `${height}px`;\n  selectStyle.minWidth = `${width}px`;\n  selectStyle.top = `${top}px`;\n  selectStyle[this.hot.isRtl() ? 'right' : 'left'] = `${start}px`;\n  selectStyle.margin = '0px';\n  selectStyle.display = '';\n}\n\nfocus() {\n  this.select.focus();\n}\n\nclose() {\n  this._opened = false;\n  this.select.style.display = 'none';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic with cells Function in JavaScript\nDESCRIPTION: Demonstrates how to implement custom logic for applying configuration to individual grid elements using the cells option. This example applies the readOnly property to specific cells based on a custom condition.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  cells(row, col) {\n    if ((row === 1 || row === 5) && col === 1) {\n      return {\n        readOnly: true,\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Configuration Options in React\nDESCRIPTION: Example showing how to apply configuration options as props to the HotTable component in React. This demonstrates the declarative approach to configuring a Handsontable instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  autoWrapRow={true}\n  autoWrapCol={true}\n  licenseKey=\"non-commercial-and-evaluation\"\n  data={[\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n  ]}\n  width={400}\n  height={300}\n  colHeaders={true}\n  rowHeaders={true}\n  customBorders={true}\n  dropdownMenu={true}\n  multiColumnSorting={true}\n  filters={true}\n  manualRowMove={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Cell Type\nDESCRIPTION: Shows how to register a custom cell type with properties including renderer, className, and readOnly settings.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nHandsontable.cellTypes.registerCellType('custom', {\n  renderer: Handsontable.renderers.TextRenderer,\n  className: 'my-cell',\n  readOnly: true,\n  myCustomProperty: 'foo'\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Grid with Array of Arrays\nDESCRIPTION: Demonstrates binding basic array of arrays data structure to a data grid, suitable for grid-like scenarios where users need to manipulate the grid structure.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n  ['2019', 10, 11, 12, 13],\n  ['2020', 20, 11, 14, 13],\n  ['2021', 30, 15, 12, 13]\n];\n\nconst container = document.getElementById('example1');\nconst hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Bulk Registration of Handsontable Modules\nDESCRIPTION: Example showing how to import and register all Handsontable modules in bulk using helper functions like registerAllCellTypes(), registerAllRenderers(), etc. This approach provides a quick way to register all available modules at once.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// the base module\nimport Handsontable from 'handsontable/base';\n\n// cell type modules\nimport {\n  AutocompleteCellType,\n  CheckboxCellType,\n  DateCellType,\n  DropdownCellType,\n  HandsontableCellType,\n  NumericCellType,\n  PasswordCellType,\n  TextCellType,\n  TimeCellType,\n} from 'handsontable/cellTypes';\n\n// renderer modules\nimport {\n  baseRenderer,\n  autocompleteRenderer,\n  checkboxRenderer,\n  dropdownRenderer,\n  htmlRenderer,\n  numericRenderer,\n  passwordRenderer,\n  textRenderer,\n} from 'handsontable/renderers';\n\n// editor modules\nimport {\n  AutocompleteEditor,\n  BaseEditor,\n  CheckboxEditor,\n  DateEditor,\n  DropdownEditor,\n  HandsontableEditor,\n  NumericEditor,\n  PasswordEditor,\n  SelectEditor,\n  TextEditor,\n} from 'handsontable/editors';\n\n// validator modules\nimport {\n  autocompleteValidator,\n  dateValidator,\n  dropdownValidator,\n  numericValidator,\n  timeValidator,\n} from 'handsontable/validators';\n\n// plugin modules\nimport {\n  AutoColumnSize,\n  AutoRowSize,\n  Autofill,\n  BasePlugin,\n  BindRowsWithHeaders,\n  CollapsibleColumns,\n  ColumnSorting,\n  ColumnSummary,\n  Comments,\n  ContextMenu,\n  CopyPaste,\n  CustomBorders,\n  DragToScroll,\n  DropdownMenu,\n  ExportFile,\n  Filters,\n  Formulas,\n  HiddenColumns,\n  HiddenRows,\n  ManualColumnFreeze,\n  ManualColumnMove,\n  ManualColumnResize,\n  ManualRowMove,\n  ManualRowResize,\n  MergeCells,\n  MultiColumnSorting,\n  MultipleSelectionHandles,\n  NestedHeaders,\n  NestedRows,\n  PersistentState,\n  Search,\n  StretchColumns,\n  TouchScroll,\n  TrimRows,\n  UndoRedo,\n} from 'handsontable/plugins';\n\n// translation modules\nimport {\n  arAR,\n  csCZ,\n  deCH,\n  deDE,\n  enUS,\n  esMX,\n  frFR,\n  hrHR,\n  itIT,\n  jaJP,\n  koKR,\n  lvLV,\n  nbNO,\n  nlNL,\n  plPL,\n  ptBR,\n  ruRU,\n  srSP,\n  zhCN,\n  zhTW,\n} from 'handsontable/i18n';\n\n// registering functions that let you quickly register all modules at once\nimport {\n  registerAllCellTypes,\n  registerAllRenderers,\n  registerAllEditors,\n  registerAllValidators,\n  registerAllPlugins,\n  registerAllModules,\n} from 'handsontable/registry'\n\n// register all cell types at once\nregisterAllCellTypes();\n\n// register all renderers at once\nregisterAllRenderers();\n\n// register all editors at once\nregisterAllEditors();\n\n// register all validators at once\nregisterAllValidators();\n\n// register all plugins at once\nregisterAllPlugins();\n\n// register individual translations\nregisterLanguageDictionary(arAR);\nregisterLanguageDictionary(deCH);\nregisterLanguageDictionary(deDE);\nregisterLanguageDictionary(enUS);\nregisterLanguageDictionary(esMX);\nregisterLanguageDictionary(frFR);\nregisterLanguageDictionary(hrHR);\nregisterLanguageDictionary(itIT);\nregisterLanguageDictionary(jaJP);\nregisterLanguageDictionary(koKR);\nregisterLanguageDictionary(lvLV);\nregisterLanguageDictionary(nbNO);\nregisterLanguageDictionary(nlNL);\nregisterLanguageDictionary(plPL);\nregisterLanguageDictionary(ptBR);\nregisterLanguageDictionary(ruRU);\nregisterLanguageDictionary(srSP);\nregisterLanguageDictionary(zhCN);\nregisterLanguageDictionary(zhTW);\n\n// or, register all of Handsontable's modules at once\nregisterAllModules();\n```\n\n----------------------------------------\n\nTITLE: Setting Data at Specific Cell in Handsontable\nDESCRIPTION: Demonstrates how to replace data in a single cell or perform multiple single-cell data replacements using the setDataAtCell() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Replaces the cell contents at the (0, 2) visual coordinates (0 being the visual row index, 2 - the visual column index) with the supplied value.\nhot.setDataAtCell(0, 2, 'New Value');\n\n// Replaces the cells at `(0,2)`, `(1,2)` and `(2,2)` with the provided values.\nconst changes = [\n  [0, 2, 'New Value'],\n  [1, 2, 'Different Value'],\n  [2, 2, 'Third Replaced Value'],\n];\nhot.setDataAtCell(changes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Renderer in Vue 3 with Handsontable\nDESCRIPTION: JavaScript code that creates a Vue 3 application with a custom cell renderer for Handsontable. The renderer takes an image URL as input and displays the image in the cell, with fallback to the original value if not a valid URL.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-custom-renderer-example/vue3-custom-renderer-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst App = {\n  name: 'ExampleApp',\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['A1', 'https://handsontable.com/docs/img/examples/professional-javascript-developers-nicholas-zakas.jpg'],\n          ['A2', 'https://handsontable.com/docs/img/examples/javascript-the-good-parts.jpg'],\n        ],\n        height: 'auto',\n        autoColumnSize: true,\n        colHeaders: true,\n        rowHeaders: true,\n        stretchH: 'all',\n        // Add custom renderer for the second column using the function notation\n        columns: [\n          {},\n          {\n            renderer(instance, td, row, col, prop, value, cellProperties) {\n              const escaped = Handsontable.helper.stringify(value);\n\n              if (escaped.indexOf('http') === 0) {\n                const img = document.createElement('IMG');\n                img.src = value;\n\n                img.addEventListener('mousedown', event => {\n                  event.preventDefault();\n                });\n\n                td.innerText = '';\n                td.appendChild(img);\n\n              } else {\n                Handsontable.renderers.TextRenderer.apply(this, arguments);\n              }\n\n              return td;\n            }\n          }\n        ],\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  }\n};\n\nconst app = createApp(App);\napp.mount('#example1');\n```\n\n----------------------------------------\n\nTITLE: Sorting Data Programmatically in JavaScript\nDESCRIPTION: Code example showing how to sort data programmatically using the columnSorting.sort() method in JavaScript implementation of Handsontable, including how to clear sorting and return to original order.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  // enable sorting for all columns\n  columnSorting: true,\n};\n\nconst columnSorting = handsontableInstance.getPlugin('columnSorting');\n\ncolumnSorting.sort(\n  // sort data by the first column, in ascending order\n  {\n    column: 0,\n    sortOrder: 'asc', // for descending order, use `'desc'`\n  }\n);\n\n// go back to the original order\ncolumnSorting.clearSort();\n```\n\n----------------------------------------\n\nTITLE: React Example Using Individual Renderer, Editor, and Validator Modules\nDESCRIPTION: Shows how to import and register individual renderer, editor, and validator modules in a React application, then use them in a HotTable component configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { HotTable } from '@handsontable/react-wrapper';\nimport {\n  registerRenderer,\n  numericRenderer,\n} from 'handsontable/renderers';\nimport {\n  registerEditor,\n  NumericEditor,\n} from 'handsontable/editors';\nimport {\n  registerValidator,\n  numericValidator,\n} from 'handsontable/validators';\n\nregisterRenderer(numericRenderer);\nregisterEditor(NumericEditor);\nregisterValidator(numericValidator);\n\n<HotTable\n  columns={[\n    {\n      renderer: 'numeric',\n      editor: 'numeric',\n      validator: 'numeric',\n      dataType: 'number',\n      type: 'numeric',\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Handsontable with Instance Methods\nDESCRIPTION: This TypeScript example demonstrates how to properly type a reference to a Handsontable instance in a React component. It includes methods to select cells and scroll to specific positions with proper type definitions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/react-methods/react-methods.md#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { useRef } from 'react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef<HotTable>(null);\n  const data = [\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ];\n\n  const selectCell = () => {\n    // The HotTable component's `current` property stores a reference to the Handsontable instance.\n    hotRef.current?.hotInstance.selectCell(1, 1);\n  };\n\n  const scrollToCell = () => {\n    hotRef.current?.hotInstance.scrollViewportTo(14, 0);\n    hotRef.current?.hotInstance.selectCell(14, 0);\n  };\n\n  return (\n    <div className=\"controls example-wrapper\">\n      <div>\n        <button onClick={selectCell}>Select cell B2</button>\n        <button onClick={scrollToCell}>Scroll to row 15</button>\n      </div>\n      <div id=\"hot-app\">\n        <HotTable\n          ref={hotRef}\n          data={data}\n          height={220}\n          colHeaders={true}\n          rowHeaders={true}\n          contextMenu={true}\n          autoRowSize={false}\n        />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Editor in React\nDESCRIPTION: Example of using the custom editor in a React HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[{\n    editor: 'theBestEditor'\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Data in Handsontable\nDESCRIPTION: Demonstrates how to replace the entire dataset in an initialized Handsontable instance using the loadData() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhot.loadData(newDataset);\n```\n\n----------------------------------------\n\nTITLE: Using batch() for Multiple API Operations in Handsontable\nDESCRIPTION: Advanced example of batching multiple API calls including plugin operations like filters and sorting in a single render cycle.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhot.batch(() => {\n  hot.alter('insert_row_above', 5, 45);\n  hot.setDataAtCell(1, 1, 'x');\n\n  const filters = hot.getPlugin('filters');\n\n  filters.addCondition(2, 'contains', ['3']);\n  filters.filter();\n  hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n  // The table cache will be recalculated, and table render will be called once after executing the callback\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Handsontable Implementation in Vue 3\nDESCRIPTION: A complete Vue 3 component example showing how to implement Handsontable. Includes template setup with a data grid, necessary imports, module registration, and data definition.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-installation/vue3-installation.md#2025-04-10_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <div class=\"ht-theme-main-dark-auto\">\n    <hot-table :data=\"data\" :rowHeaders=\"true\" :colHeaders=\"true\"></hot-table>\n  </div>\n</template>\n\n<script>\n  import { defineComponent } from 'vue';\n  import { HotTable } from '@handsontable/vue3';\n  import { registerAllModules } from 'handsontable/registry';\n  import 'handsontable/styles/handsontable.min.css';\n  import 'handsontable/styles/ht-theme-main.min.css';\n\n  // register Handsontable's modules\n  registerAllModules();\n\n  export default defineComponent({\n    data() {\n      return {\n        data: [\n          ['', 'Ford', 'Volvo', 'Toyota', 'Honda'],\n          ['2016', 10, 11, 12, 13],\n          ['2017', 20, 11, 14, 13],\n          ['2018', 30, 15, 12, 13]\n        ],\n      };\n    },\n    components: {\n      HotTable,\n    }\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Explicit Registration of Individual Handsontable Modules\nDESCRIPTION: Example demonstrating how to explicitly register individual Handsontable modules by importing and registering each component separately using their respective registration functions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// the base module\nimport Handsontable from 'handsontable/base';\n\n// cell type modules\nimport {\n  registerCellType, // cell types' registering function\n  AutocompleteCellType,\n  CheckboxCellType,\n  DateCellType,\n  DropdownCellType,\n  HandsontableCellType,\n  NumericCellType,\n  PasswordCellType,\n  TextCellType,\n  TimeCellType,\n} from 'handsontable/cellTypes';\n\n// renderer modules\nimport {\n  registerRenderer, // renderers' registering function\n  baseRenderer,\n  autocompleteRenderer,\n  checkboxRenderer,\n  dropdownRenderer,\n  htmlRenderer,\n  numericRenderer,\n  passwordRenderer,\n  textRenderer,\n} from 'handsontable/renderers';\n\n// editor modules\nimport {\n  registerEditor, // editors' registering function\n  AutocompleteEditor,\n  BaseEditor,\n  CheckboxEditor,\n  DateEditor,\n  DropdownEditor,\n  HandsontableEditor,\n  NumericEditor,\n  PasswordEditor,\n  SelectEditor,\n  TextEditor,\n} from 'handsontable/editors';\n\n// validator modules\nimport {\n  registerValidator, // validators' registering function\n  autocompleteValidator,\n  dateValidator,\n  dropdownValidator,\n  numericValidator,\n  timeValidator,\n} from 'handsontable/validators';\n\n// plugin modules\nimport {\n  registerPlugin, // plugins' registering function\n  AutoColumnSize,\n  AutoRowSize,\n  Autofill,\n  BasePlugin,\n  BindRowsWithHeaders,\n  CollapsibleColumns,\n  ColumnSorting,\n  ColumnSummary,\n  Comments,\n  ContextMenu,\n  CopyPaste,\n  CustomBorders,\n  DragToScroll,\n  DropdownMenu,\n  ExportFile,\n  Filters,\n  Formulas,\n  HiddenColumns,\n  HiddenRows,\n  ManualColumnFreeze,\n  ManualColumnMove,\n  ManualColumnResize,\n  ManualRowMove,\n  ManualRowResize,\n  MergeCells,\n  MultiColumnSorting,\n  MultipleSelectionHandles,\n  NestedHeaders,\n  NestedRows,\n  PersistentState,\n  Search,\n  StretchColumns,\n  TouchScroll,\n  TrimRows,\n  UndoRedo,\n} from 'handsontable/plugins';\n\n// translation modules\nimport {\n  registerLanguageDictionary, // translations' registering function\n  arAR,\n  csCZ,\n  deCH,\n  deDE,\n  enUS,\n  esMX,\n  frFR,\n  hrHR,\n  itIT,\n  jaJP,\n  koKR,\n  lvLV,\n  nbNO,\n  nlNL,\n  plPL,\n  ptBR,\n  ruRU,\n  srSP,\n  zhCN,\n  zhTW,\n} from 'handsontable/i18n';\n\n// register individual cell types\nregisterCellType(AutocompleteCellType);\nregisterCellType(CheckboxCellType);\nregisterCellType(DateCellType);\nregisterCellType(DropdownCellType);\nregisterCellType(HandsontableCellType);\nregisterCellType(NumericCellType);\nregisterCellType(PasswordCellType);\nregisterCellType(TimeCellType);\nregisterCellType(TextCellType);\n\n// register individual renderers\nregisterRenderer(baseRenderer);\nregisterRenderer(autocompleteRenderer);\nregisterRenderer(checkboxRenderer);\nregisterRenderer(dropdownRenderer);\nregisterRenderer(htmlRenderer);\nregisterRenderer(numericRenderer);\nregisterRenderer(passwordRenderer);\nregisterRenderer(textRenderer);\n\n// register individual editors\nregisterEditor(BaseEditor);\nregisterEditor(AutocompleteEditor);\nregisterEditor(CheckboxEditor);\nregisterEditor(DateEditor);\nregisterEditor(DropdownEditor);\nregisterEditor(HandsontableEditor);\nregisterEditor(NumericEditor);\nregisterEditor(PasswordEditor);\nregisterEditor(SelectEditor);\nregisterEditor(TextEditor);\n\n// register individual validators\nregisterValidator(autocompleteValidator);\nregisterValidator(dateValidator);\nregisterValidator(dropdownValidator);\nregisterValidator(numericValidator);\nregisterValidator(timeValidator);\n\n// register individual plugins\nregisterPlugin(AutoColumnSize);\nregisterPlugin(Autofill);\nregisterPlugin(AutoRowSize);\nregisterPlugin(BindRowsWithHeaders);\nregisterPlugin(CollapsibleColumns);\nregisterPlugin(ColumnSorting);\nregisterPlugin(ColumnSummary);\nregisterPlugin(Comments);\nregisterPlugin(ContextMenu);\nregisterPlugin(CopyPaste);\nregisterPlugin(CustomBorders);\nregisterPlugin(DragToScroll);\nregisterPlugin(DropdownMenu);\nregisterPlugin(ExportFile);\nregisterPlugin(Filters);\nregisterPlugin(Formulas);\nregisterPlugin(HiddenColumns);\nregisterPlugin(HiddenRows);\nregisterPlugin(ManualColumnFreeze);\nregisterPlugin(ManualColumnMove);\nregisterPlugin(ManualColumnResize);\nregisterPlugin(ManualRowMove);\nregisterPlugin(ManualRowResize);\nregisterPlugin(MergeCells);\nregisterPlugin(MultiColumnSorting);\nregisterPlugin(MultipleSelectionHandles);\nregisterPlugin(NestedHeaders);\nregisterPlugin(NestedRows);\nregisterPlugin(PersistentState);\nregisterPlugin(Search);\nregisterPlugin(StretchColumns);\nregisterPlugin(TouchScroll);\nregisterPlugin(TrimRows);\nregisterPlugin(UndoRedo);\n\n// register individual translations\nregisterLanguageDictionary(arAR);\nregisterLanguageDictionary(deCH);\nregisterLanguageDictionary(deDE);\nregisterLanguageDictionary(enUS);\nregisterLanguageDictionary(esMX);\nregisterLanguageDictionary(frFR);\nregisterLanguageDictionary(hrHR);\nregisterLanguageDictionary(itIT);\nregisterLanguageDictionary(jaJP);\nregisterLanguageDictionary(koKR);\nregisterLanguageDictionary(lvLV);\nregisterLanguageDictionary(nbNO);\nregisterLanguageDictionary(nlNL);\nregisterLanguageDictionary(plPL);\nregisterLanguageDictionary(ptBR);\nregisterLanguageDictionary(ruRU);\nregisterLanguageDictionary(srSP);\nregisterLanguageDictionary(zhCN);\nregisterLanguageDictionary(zhTW);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Formatting in TypeScript with Handsontable\nDESCRIPTION: TypeScript implementation of conditional formatting in Handsontable, using custom cell renderers to apply different styles based on conditions like row position, column type, empty cells, and negative values.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/conditional-formatting/conditional-formatting.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nconst container = document.querySelector('#example1');\nconst data = [\n  ['Tesla', 2017, 'black', 'black', '$5,000.00', '$123,456.00'],\n  ['Nissan', 2018, 'blue', 'blue', '$4,000.00', '$234,567.00'],\n  ['Chrysler', 2019, 'yellow', 'black', '$4,000.00', ''],\n  ['Volvo', 2020, 'white', 'gray', '$5,000.00', '$768,908.00'],\n  ['Jaguar', 2019, 'purple', 'black', '$4,000.00', '$876,543.00'],\n  ['Ford', 2020, 'blue', 'blue', '$5,000.00', '-$9,123.00'],\n  ['Mercedes', 2019, 'blue', 'gray', '$5,000.00', '$123,456.00'],\n];\n\nconst isEmptyRow = (instance: Handsontable, row: number) => {\n  const rowData = instance.getData()[row];\n\n  return rowData.every(element => element === null || element === '');\n};\n\nconst hot = new Handsontable(container as HTMLElement, {\n  data,\n  rowHeaders: true,\n  colHeaders: ['Car', 'Year', 'Chassis color', 'Bumper color', 'Price', 'Total'],\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  cells(row, col, prop) {\n    const cellProperties: any = {};\n    const visualRowIndex = this.instance.toVisualRow(row);\n    const visualColIndex = this.instance.toVisualColumn(col);\n\n    cellProperties.renderer = function(instance, td, row, col, prop, value, cellProperties) {\n      Handsontable.renderers.TextRenderer.apply(this, arguments);\n\n      td.style.fontWeight = 'normal';\n      td.style.color = 'black';\n      td.style.background = 'white';\n\n      if (row === 0) {\n        td.className = 'myBold';\n        td.style.fontWeight = 'bold';\n      }\n\n      if (col === 0 && value === 'Nissan') {\n        td.className = 'myItalic';\n      }\n\n      if (value === null || value === '') {\n        td.className = 'myEmpty';\n      }\n\n      if (value === '') {\n        td.innerHTML = '<div class=\"relative\"><div class=\"uil-reload-css waitingForConnection\" style=\"transform: scale(0.3);\"><div class=\"\"></div></div></div>'\n      }\n      \n      if (value < 0) {\n        td.className = 'myNegative';\n      }\n\n      if (visualRowIndex === 0 && visualColIndex === 0) {\n        td.style.fontStyle = 'italic';\n      }\n\n      if (visualRowIndex === isEmptyRow(instance, visualRowIndex)) {\n        td.style.background = '#EEE';\n      }\n    };\n\n    return cellProperties;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Handsontable Demo in React\nDESCRIPTION: This snippet shows how to create a Handsontable component in a React application. It includes the necessary HTML structure, CSS styling, and JSX code for React implementation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/demo/demo.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/react/example2.html)\n```\n\nLANGUAGE: css\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/react/example2.css)\n```\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/react/example2.jsx)\n```\n\n----------------------------------------\n\nTITLE: Programmatically Triggering Copy and Cut Operations in Handsontable\nDESCRIPTION: This example shows how to programmatically trigger copy and cut operations in Handsontable. It sets up a grid, selects a cell, and provides buttons to execute copy and cut commands.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/clipboard/clipboard.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example3\"></div>\n<div class=\"controls\">\n  <button id=\"copyButton\">Copy</button>\n  <button id=\"cutButton\">Cut</button>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda'],\n    ['2017', 10, 11, 12, 13],\n    ['2018', 20, 11, 14, 13],\n    ['2019', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nconst copyButton = document.querySelector('#copyButton');\nconst cutButton = document.querySelector('#cutButton');\n\ncopyButton.addEventListener('click', () => {\n  hot.selectCell(1, 1);\n  if (hot.isListening()) {\n    document.execCommand('copy');\n  }\n});\n\ncutButton.addEventListener('click', () => {\n  hot.selectCell(1, 1);\n  if (hot.isListening()) {\n    document.execCommand('cut');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Base Handsontable Module in JavaScript\nDESCRIPTION: Demonstrates how to import the base Handsontable module, which provides core functionality and the default text cell type. This import is required before using any optional modules.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\n```\n\n----------------------------------------\n\nTITLE: Accessing a Plugin Instance in React\nDESCRIPTION: Retrieving a reference to the plugin instance in React using a reference to the HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-plugins/custom-plugins.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst hotTableComponentRef = useRef(null);\n\nconst pluginInstance = hotTableComponentRef.current.hotInstance.getPlugin(CustomPlugin.PLUGIN_KEY);\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable Data Grid with CDN in HTML\nDESCRIPTION: This code snippet demonstrates how to set up a basic Handsontable data grid using CDN links for CSS and JavaScript. It includes configuration for data, columns, and various grid options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/README.md#2025-04-10_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Handsontable - JavaScript Data Grid Example</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css\"\n    />\n  </head>\n  <body>\n    <div id=\"handsontable-grid\" class=\"ht-theme-main-dark-auto\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js\"></script>\n    <script>\n      const element = document.getElementById(\"handsontable-grid\");\n\n      new Handsontable(element, {\n        data: [\n          { company: \"Tagcat\", country: \"United Kingdom\", rating: 4.4 },\n          { company: \"Zoomzone\", country: \"Japan\", rating: 4.5 },\n          { company: \"Meeveo\", country: \"United States\", rating: 4.6 },\n        ],\n        columns: [\n          { data: \"company\", title: \"Company\", width: 100 },\n          { data: \"country\", title: \"Country\", width: 170, type: \"dropdown\", source: [\"United Kingdom\", \"Japan\", \"United States\"] },\n          { data: \"rating\", title: \"Rating\", width: 100, type: \"numeric\" },\n        ],\n        rowHeaders: true,\n        navigableHeaders: true,\n        tabNavigation: true,\n        multiColumnSorting: true,\n        headerClassName: \"htLeft\",\n        licenseKey: \"non-commercial-and-evaluation\",\n      });\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable Demo in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic Handsontable instance in JavaScript. It includes HTML structure, CSS styling, and JavaScript initialization code.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/demo/demo.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/javascript/example.html)\n```\n\nLANGUAGE: css\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/javascript/example.css)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/getting-started/demo/javascript/example.js)\n```\n\n----------------------------------------\n\nTITLE: Populating Data from Array in Handsontable\nDESCRIPTION: Shows how to replace a chunk of the dataset by providing start coordinates and a two-dimensional data array using the populateFromArray() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst newValues = [\n  ['A', 'B', 'C'],\n  ['D', 'E', 'F']\n];\n\n// Replaces the values from (1, 1) to (2, 3) visual cell coordinates with the values from the `newValues` array.\nhot.populateFromArray(1, 1, newValues);\n\n// Replaces the values from (1, 1) to (2, 2) visual cell coordinates with the values from the `newValues` array, ommiting the values that would fall outside of the defined range.\nhot.populateFromArray(1, 1, newValues, 2, 2);\n```\n\n----------------------------------------\n\nTITLE: Replacing a Keyboard Shortcut in Handsontable\nDESCRIPTION: Demonstrates how to replace an existing keyboard shortcut with a new one. This example replaces the Ctrl+Z shortcut with Shift+Ctrl+Z by getting, removing, modifying, and re-adding the shortcut.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/navigation/custom-shortcuts/custom-shortcuts.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst gridContext = hot.getShortcutManager().getContext('grid');\nconst undoShortcut = gridContext.getShortcuts(['control/meta', 'z']);\n\ngridContext.removeShortcutsByKeys(['control/meta', 'z']);\n\nundoShortcut.map((shortcut) => {\n  shortcut.keys = [['shift', 'control/meta', 'z']];\n});\n\ngridContext.addShortcuts(undoShortcut);\n```\n\n----------------------------------------\n\nTITLE: Basic Time Cell Type Implementation in JavaScript\nDESCRIPTION: Example showing how to configure a Handsontable instance with time cell type. The implementation includes data initialization, column definition with time formatting, and validation setup.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/time-cell-type/time-cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  licenseKey: 'non-commercial-and-evaluation',\n  data: [\n    { time: '10:35:24 am' },\n    { time: '10:35:28 am' },\n    { time: '' },\n    { time: '10:12:35 am' },\n    { time: '10:35:29 am' }\n  ],\n  height: 'auto',\n  colHeaders: ['Time'],\n  columns: [\n    {\n      data: 'time',\n      type: 'time',\n      timeFormat: 'h:mm:ss a',\n      correctFormat: true\n    }\n  ],\n  afterValidate(isValid, value, row, prop) {\n    if (!isValid) {\n      // warn user via notification library\n      alert('Time format must be h:mm:ss a');\n    }\n  }\n});\n\n// validate all cells on demand\nhot.validateCells();\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Filters Programmatically in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to enable or disable Handsontable's filtering functionality at runtime using the updateSettings() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhandsontableInstance.updateSettings({\n  // enable filtering\n  filters: true,\n  // enable the column menu\n  dropdownMenu: true,\n});\n\nhandsontableInstance.updateSettings({\n  // disable filtering\n  filters: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Virtualization in JavaScript\nDESCRIPTION: Example showing how to implement column virtualization with 1000x1000 grid in vanilla JavaScript. Demonstrates setting up a large data grid with virtualized columns for optimal performance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-virtualization/column-virtualization.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst data = [];\n\nfor (let i = 0; i < 1000; i++) {\n  const row = [];\n  for (let j = 0; j < 1000; j++) {\n    row.push(j);\n  }\n  data.push(row);\n}\n\nconst hot = new Handsontable(container, {\n  data,\n  width: '100%',\n  height: 400,\n  rowHeaders: true,\n  colHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Text Alignment Example in React\nDESCRIPTION: Shows how to implement text alignment in a React component using Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/text-alignment/text-alignment.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/cell-features/text-alignment/react/example1.jsx)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/cell-features/text-alignment/react/example1.tsx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Options in React\nDESCRIPTION: Example of configuring individual columns in React using either the columns prop array or the declarative HotColumn component approach.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[\n    {width: 100}, // column options for the first (by physical index) column\n    {width: 100}, // column options for the second (by physical index) column\n    {width: 100}, // column options for the third (by physical index) column\n  ]}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable>\n  <HotColumn width={100}/>\n  <HotColumn width={100}/>\n  <HotColumn width={100}/>\n</HotTable>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Handsontable Data Grid\nDESCRIPTION: Basic HTML setup for a Handsontable instance with a container div and loading indicator.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/saving-data/saving-data.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n<div id=\"loading\" style=\"display: none\">Saving...</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable in JavaScript\nDESCRIPTION: Importing the full distribution of Handsontable as a JavaScript module.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module for Handsontable\nDESCRIPTION: Sets up the Angular module to use Handsontable. It imports necessary modules, registers all Handsontable modules, and declares the main component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-installation/angular-installation.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { HotTableModule } from '@handsontable/angular';\nimport { registerAllModules } from 'handsontable/registry';\n\n// register Handsontable's modules\nregisterAllModules();\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HotTableModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Data Saving\nDESCRIPTION: JavaScript code showing how to initialize Handsontable with data saving functionality using the afterChange hook and fetch API.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/saving-data/saving-data.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst loading = document.querySelector('#loading');\n\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  width: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  afterChange: (changes) => {\n    if (!changes) {\n      return;\n    }\n\n    loading.style.display = 'block';\n\n    fetch('https://fake-api.com/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ changes })\n    })\n      .then(response => response.json())\n      .then(() => {\n        loading.style.display = 'none';\n      });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Comparator in React\nDESCRIPTION: Shows how to add a custom comparator function for sorting in Handsontable using React. This example provides a basic comparison function that can be tailored for specific sorting requirements.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columnSorting={{\n    compareFunctionFactory: function (sortOrder, columnMeta) {\n      // implement your own comparator\n      return function (value, nextValue) {\n        if (value < nextValue) {\n          return -1;\n        }\n        if (value > nextValue) {\n          return 1;\n        }\n\n        return 0;\n      };\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic Password Cell Type Implementation in JavaScript\nDESCRIPTION: Demonstrates how to implement a password cell type in Handsontable. The password cell behaves like a text cell but masks its value using asterisks in the renderer while using an input type password field for editing.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/password-cell-type/password-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/javascript/example1.js)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/javascript/example1.ts)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Sorting Options in JavaScript\nDESCRIPTION: Advanced configuration for column sorting with options for header action, empty cells handling, sort indicators, initial sort configuration, and custom comparator function.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  columnSorting: {\n    // let the end user sort data by clicking on the column name (set by default)\n    headerAction: true,\n    // don't sort empty cells – move rows that contain empty cells to the bottom (set by default)\n    sortEmptyCells: false,\n    // enable the sort order icon that appears next to the column name (set by default)\n    indicator: true,\n\n    // at initialization, sort data by the first column, in descending order\n    initialConfig: {\n      column: 1,\n      sortOrder: 'desc',\n    },\n\n    // implement your own comparator\n    compareFunctionFactory(sortOrder, columnMeta) {\n      return function (value, nextValue) {\n        // here, add a compare function\n        // that returns `-1`, or `0`, or `1`\n      };\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Layout Direction in TypeScript\nDESCRIPTION: This code demonstrates how to set up a Handsontable grid with RTL (right-to-left) layout direction using TypeScript. It includes configuration for Arabic language support and displays sample data with right-to-left orientation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport { registerLanguageDictionary } from 'handsontable/i18n';\nimport { arAR } from 'handsontable/i18n/languages/ar-AR';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register the language dict\nregisterLanguageDictionary(arAR);\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],\n    ['2017', 10, 11, 12, 13, 15, 16],\n    ['2018', 10, 11, 12, 13, 15, 16],\n    ['2019', 10, 11, 12, 13, 15, 16],\n    ['2020', 10, 11, 12, 13, 15, 16],\n    ['2021', 10, 11, 12, 13, 15, 16]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  contextMenu: true,\n  language: arAR.languageCode,\n  layoutDirection: 'rtl'\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Data Saving\nDESCRIPTION: TypeScript version of the data saving implementation with type definitions for Handsontable instance and change events.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/saving-data/saving-data.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector<HTMLDivElement>('#example1');\nconst loading = document.querySelector<HTMLDivElement>('#loading');\n\nconst hot = new Handsontable(container as HTMLDivElement, {\n  data: [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  width: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  afterChange: (changes) => {\n    if (!changes) {\n      return;\n    }\n\n    loading!.style.display = 'block';\n\n    fetch('https://fake-api.com/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ changes })\n    })\n      .then(response => response.json())\n      .then(() => {\n        loading!.style.display = 'none';\n      });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu in Vue 2 with Handsontable\nDESCRIPTION: JavaScript code that configures a Vue 2 component with Handsontable, implementing a custom context menu. It defines both predefined menu items and custom options with specific functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-custom-context-menu-example/vue-custom-context-menu-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { HotTable } from '@handsontable/vue';\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.css';\n\nnew Vue({\n  el: '#example1',\n  data() {\n    return {\n      hotSettings: {\n        startRows: 5,\n        startCols: 5,\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: {\n          items: {\n            'row_above': {\n              name: 'Insert row above this one (custom name)',\n            },\n            'row_below': {\n              name: 'Insert row below this one (custom name)',\n            },\n            'separator': Handsontable.plugins.ContextMenu.SEPARATOR,\n            'clear_custom': {\n              name: 'Clear all cells (custom)',\n              callback() {\n                this.clear();\n              }\n            },\n            'separator2': Handsontable.plugins.ContextMenu.SEPARATOR,\n            'make_read_only': {},\n            'alignment': {}\n          }\n        },\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Column Display with Array Data\nDESCRIPTION: Shows how to selectively display columns from an array of arrays data source by omitting specific columns from the grid view.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/binding-to-data/binding-to-data.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n  ['2019', 10, 11, 12, 13],\n  ['2020', 20, 11, 14, 13],\n  ['2021', 30, 15, 12, 13]\n];\n\nconst container = document.getElementById('example2');\nconst hot = new Handsontable(container, {\n  data: data,\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  columns: [\n    { data: 0 },\n    { data: 2 },\n    { data: 3 },\n    { data: 4 }\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Handsontable Vue 3 Component with Language Change\nDESCRIPTION: This JavaScript code configures a Vue 3 app with Handsontable, allowing dynamic language changes. It sets up the data, methods, and computed properties needed for the language selector and Handsontable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-language-change-example/vue3-language-change-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport { languages } from 'handsontable/i18n';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nregisterAllModules();\n\nconst app = createApp({\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['A1', 'B1', 'C1', 'D1'],\n          ['A2', 'B2', 'C2', 'D2'],\n          ['A3', 'B3', 'C3', 'D3'],\n          ['A4', 'B4', 'C4', 'D4'],\n        ],\n        colHeaders: true,\n        rowHeaders: true,\n        contextMenu: true,\n        height: 'auto',\n        licenseKey: 'non-commercial-and-evaluation'\n      },\n      language: 'en-US',\n    };\n  },\n  computed: {\n    languages() {\n      return Object.keys(languages);\n    }\n  },\n  components: {\n    HotTable\n  }\n});\n\napp.mount('#example1');\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data to CSV File in React (TSX)\nDESCRIPTION: TypeScript React implementation for exporting grid data to CSV file. It uses useRef to access the Handsontable instance and properly types the components and methods.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { useRef } from 'react';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef<HotTable>(null);\n\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  const exportFile = () => {\n    // The `current` property contains the HotTable instance\n    const hot = hotRef.current.hotInstance;\n    // Get the plugin from the Handsontable instance\n    const exportPlugin = hot.getPlugin('exportFile');\n\n    exportPlugin.downloadFile('csv', {\n      bom: false,\n      columnDelimiter: ',',\n      columnHeaders: false,\n      exportHiddenColumns: true,\n      exportHiddenRows: true,\n      fileExtension: 'csv',\n      filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',\n      mimeType: 'text/csv',\n      rowDelimiter: '\\r\\n',\n      rowHeaders: true\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={exportFile} className=\"button button--primary\">Download CSV</button>\n      </div>\n      <br/>\n\n      <HotTable\n        ref={hotRef}\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        autoWrapRow={true}\n        autoWrapCol={true}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Operations in JavaScript with Handsontable\nDESCRIPTION: JavaScript implementation demonstrating how to use the batch() method to optimize render time when performing multiple operations. Compares and measures performance with batch operations enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(300, 100),\n  width: '100%',\n  height: 320,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nconst runBtn = document.querySelector('#run');\nconst renderTime = document.querySelector('#render-time');\n\nrunBtn.addEventListener('click', () => {\n  // create a dataset to insert\n  const dataToInsert = Handsontable.helper.createSpreadsheetData(5, 5);\n  \n  const t0 = performance.now();\n  \n  hot.batch(() => {\n    // set the dataset at the specific coordinates\n    hot.populateFromArray(5, 2, dataToInsert);\n    \n    // change the header for selected column\n    hot.updateSettings({\n      columns: [{\n        data: 1,\n        renderer(instance, td, row, col, prop, value) {\n          td.innerText = `${value} USD`;\n          td.style.color = '#FF0000'\n          \n          return td;\n        }\n      }]\n    });\n    \n    // change column alignment\n    hot.updateSettings({\n      colWidths: [45, 100, 100, 110, 100]\n    });\n    \n    // alter the table to have more rows\n    hot.alter('insert_row_above', 5, 15);\n    \n    // alter the table to have more columns\n    hot.alter('insert_col_start', 2, 5);\n  });\n  \n  const t1 = performance.now();\n  \n  renderTime.innerText = `${Math.round(t1 - t0)}ms`;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Summary Function in React\nDESCRIPTION: React example demonstrating how to implement a custom summary function in a column summary configuration. This function would calculate a custom summary value based on the column data.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-summary/column-summary.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ncolumnSummary={[{\n    type: 'custom',\n    destinationRow: 0,\n    destinationColumn: 5,\n    reversedRowCoords: true,\n    // add your custom summary function\n    customFunction: function(endpoint) {\n      // implement your function here\n    }\n}]}\n```\n\n----------------------------------------\n\nTITLE: Basic Time Cell Type Implementation in TypeScript\nDESCRIPTION: TypeScript version of the time cell type implementation in Handsontable. It includes type definitions for data structure and configuration options for time formatting and validation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/time-cell-type/time-cell-type.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\ninterface DataObject {\n  time: string;\n}\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container as HTMLElement, {\n  licenseKey: 'non-commercial-and-evaluation',\n  data: [\n    { time: '10:35:24 am' },\n    { time: '10:35:28 am' },\n    { time: '' },\n    { time: '10:12:35 am' },\n    { time: '10:35:29 am' }\n  ] as DataObject[],\n  height: 'auto',\n  colHeaders: ['Time'],\n  columns: [\n    {\n      data: 'time',\n      type: 'time',\n      timeFormat: 'h:mm:ss a',\n      correctFormat: true\n    }\n  ],\n  afterValidate(isValid, value, row, prop) {\n    if (!isValid) {\n      // warn user via notification library\n      alert('Time format must be h:mm:ss a');\n    }\n  }\n});\n\n// validate all cells on demand\nhot.validateCells();\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Autofill with Auto Row Creation in Handsontable (TypeScript)\nDESCRIPTION: TypeScript implementation of Handsontable with vertical-only autofill and automatic row creation. This strongly-typed setup restricts the fill handle to move only vertically and adds new rows when dragging beyond the table's boundaries.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport { HyperFormula } from 'hyperformula';\nimport Handsontable from 'handsontable';\nimport '/common/css/10x10.css';\n\nconst container = document.querySelector('#example2');\n\nconst hot = new Handsontable(container as HTMLElement, {\n  data: createSpreadsheetData(4, 4),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  fillHandle: {\n    direction: 'vertical',\n    autoInsertRow: true\n  },\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nhot.setDataAtCell(3, 1, 30);\n```\n\n----------------------------------------\n\nTITLE: Custom Column Menu Configuration in TypeScript\nDESCRIPTION: Advanced TypeScript implementation showing how to customize the column menu options. The dropdownMenu is configured with specific options including custom items and predefined actions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-menu/column-menu.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// initialize the data array\nconst data: (string | number)[][] = [\n  ['Tesla', 2017, 'black', 'black'],\n  ['Nissan', 2018, 'blue', 'blue'],\n  ['Chrysler', 2019, 'yellow', 'black'],\n  ['Volvo', 2020, 'yellow', 'gray']\n];\n\n// initialize Handsontable\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container as HTMLElement, {\n  data,\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation',\n  // enable and configure dropdown menu\n  dropdownMenu: [\n    'alignment',\n    'filter_by_condition',\n    'filter_by_value',\n    'filter_action_bar',\n    '---------',\n    'col_left',\n    'col_right',\n    'remove_col',\n    '---------',\n    {\n      key: 'custom1',\n      name: 'Custom option',\n      callback() {\n        alert('custom1 clicked');\n      }\n    },\n    {\n      key: 'custom2',\n      name: 'Custom option 2',\n      callback() {\n        alert('custom2 clicked');\n      }\n    },\n    'hidden_columns_hide', // shows 'Hide column' option\n    'hidden_columns_show' // shows 'Show hidden columns' option\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Plugin in React\nDESCRIPTION: Example of initializing the HotTable component with a custom plugin in React, demonstrating different configuration options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-plugins/custom-plugins.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport { CustomPlugin } from './customPlugin';\n\n<HotTable\n  // Pass `true` to enable the plugin with default options.\n  customPlugin={true}\n  // You can also enable the plugin by passing an object with options.\n  customPlugin={{\n    msg: 'user-defined message',\n  }}\n  // You can also initialize the plugin without enabling it at the beginning.\n  customPlugin={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Vue 3 Custom Renderer Example\nDESCRIPTION: HTML template that sets up a Vue 3 application with a Handsontable data grid component. It includes a div with the id 'example1' where the Vue application will be mounted.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-custom-renderer-example/vue3-custom-renderer-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Cell Meta Properties in React\nDESCRIPTION: Example showing how to get and set cell meta properties like readOnly using Handsontable's API methods getCellMeta and setCellMeta.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// for cell (0, 0), the `readOnly` option is the default (`false`)\n// returns `false`\nhot.getCellMeta(0, 0).readOnly;\n\n// for cell (1, 1), the `cell` option overwrote the default `readOnly` value\n// returns `true`\nhot.getCellMeta(1, 1).readOnly;\n\n// changes the `readOnly` option of cell (1, 1) back to `false`\nhot.setCellMeta(1, 1, 'readOnly', false);\n\n// returns `false`\nhot.getCellMeta(1, 1).readOnly;\n```\n\n----------------------------------------\n\nTITLE: Modifying Cell Options with setCellMeta in JavaScript\nDESCRIPTION: Shows how to use the setCellMeta() method to change cell options at runtime. This example initializes Handsontable and then demonstrates changing the readOnly property for a specific cell.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/styles/handsontable.css';\nimport 'handsontable/styles/ht-theme-main.css';\n\nconst container = document.querySelector('#example');\nconst hot = new Handsontable(container, {\n  // top-level grid options that apply to the entire grid\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n  ],\n  licenseKey: 'non-commercial-and-evaluation',\n  width: 'auto',\n  height: 'auto',\n  rowHeaders: true,\n  colHeaders: true,\n});\n\n// changes the `readOnly` option of cell (1, 1) back to `false`\nhot.setCellMeta(1, 1, 'readOnly', false);\n\n// returns `false`\nhot.getCellMeta(1, 1).readOnly;\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Size in JavaScript Configuration\nDESCRIPTION: Examples of setting grid width and height using different units in the Handsontable configuration object.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/grid-size/grid-size.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  width: '100px',\n  height: '100px',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  width: '75%',\n  height: '75%',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  width: 100,\n  height: 100,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Headers in JavaScript\nDESCRIPTION: Sets up a nested headers structure using the colspan attribute to create a multi-level header hierarchy. Each level defines headers that can span multiple columns through label and colspan properties.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-groups/column-groups.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnestedHeaders: [\n  ['A', { label: 'B', colspan: 8 }, 'C'],\n  ['D', { label: 'E', colspan: 4 }, { label: 'F', colspan: 4 }, 'G'],\n  ['H', { label: 'I', colspan: 2 }, { label: 'J', colspan: 2 }, { label: 'K', colspan: 2 }, { label: 'L', colspan: 2 }, 'M'],\n  ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W'],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Operations in React with TypeScript\nDESCRIPTION: TypeScript React implementation demonstrating batch operations in Handsontable with type safety. Measures performance improvements when using the batch() method for multiple table operations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef<HotTable>(null);\n  const [renderTime, setRenderTime] = useState<number>(0);\n  const [renderedData, setRenderedData] = useState<string[][]>(() => {\n    return Array.from({ length: 300 }, (_, row) => \n      Array.from({ length: 100 }, (_, col) => `${String.fromCharCode(65 + (col % 26))}${row + 1}`)\n    );\n  });\n\n  const runBatch = (): void => {\n    const hot = hotRef.current?.hotInstance;\n    if (!hot) return;\n\n    // create a dataset to insert\n    const dataToInsert: string[][] = [];\n    for (let row = 0; row < 5; row++) {\n      const rowData: string[] = [];\n      for (let col = 0; col < 5; col++) {\n        rowData.push(`${String.fromCharCode(65 + (col % 26))}${row + 1}`);\n      }\n      dataToInsert.push(rowData);\n    }\n\n    const t0 = performance.now();\n\n    hot.batch(() => {\n      // set the dataset at the specific coordinates\n      hot.populateFromArray(5, 2, dataToInsert);\n      \n      // change the header for selected column\n      hot.updateSettings({\n        columns: [{\n          data: 1,\n          renderer(instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string | number, value: any): HTMLTableCellElement {\n            td.innerText = `${value} USD`;\n            td.style.color = '#FF0000';\n            \n            return td;\n          }\n        }]\n      });\n      \n      // change column alignment\n      hot.updateSettings({\n        colWidths: [45, 100, 100, 110, 100]\n      });\n      \n      // alter the table to have more rows\n      hot.alter('insert_row_above', 5, 15);\n      \n      // alter the table to have more columns\n      hot.alter('insert_col_start', 2, 5);\n    });\n    \n    const t1 = performance.now();\n    setRenderTime(Math.round(t1 - t0));\n  };\n\n  return (\n    <div>\n      <HotTable\n        ref={hotRef}\n        data={renderedData}\n        width=\"100%\"\n        height={320}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n      \n      <div className=\"controls\">\n        <button onClick={runBatch}>Run</button>\n        <div className=\"timer\">Render time: <span>{renderTime}ms</span></div>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Column Sorting in JavaScript\nDESCRIPTION: Configuration to enable sorting by multiple columns simultaneously in Handsontable, allowing users to apply multiple sets of sort criteria at once.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  // enable sorting by multiple columns, for all columns\n  multiColumnSorting: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Column-Specific Filtering in React\nDESCRIPTION: React code that enables filtering only for specific columns in Handsontable by conditionally hiding filter options in the dropdown menu using a ref to access the hot instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst hotTableComponentRef = useRef(null);\n\nhotTableComponentRef.current.hotInstance.updateSettings({\n  // enable filtering for all columns\n  filters: true,\n  // enable the column menu for all columns\n  // but display only the 'Filter by value' list and the 'OK' and 'Cancel' buttons\n  dropdownMenu: {\n    items: {\n      filter_by_value: {\n        // hide the 'Filter by value' list from all columns but the first one\n        hidden() {\n          return this.getSelectedRangeLast().to.col > 0;\n        },\n      },\n      filter_action_bar: {\n        // hide the 'OK' and 'Cancel' buttons from all columns but the first one\n        hidden() {\n          return this.getSelectedRangeLast().to.col > 0;\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Column Menu Configuration in JavaScript\nDESCRIPTION: Advanced implementation showing how to customize the column menu options. The dropdownMenu is configured with specific options including custom items and predefined actions like hiding columns.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-menu/column-menu.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// initialize the data array\nconst data = [\n  ['Tesla', 2017, 'black', 'black'],\n  ['Nissan', 2018, 'blue', 'blue'],\n  ['Chrysler', 2019, 'yellow', 'black'],\n  ['Volvo', 2020, 'yellow', 'gray']\n];\n\n// initialize Handsontable\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data,\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation',\n  // enable and configure dropdown menu\n  dropdownMenu: [\n    'alignment',\n    'filter_by_condition',\n    'filter_by_value',\n    'filter_action_bar',\n    '---------',\n    'col_left',\n    'col_right',\n    'remove_col',\n    '---------',\n    {\n      key: 'custom1',\n      name: 'Custom option',\n      callback() {\n        alert('custom1 clicked');\n      }\n    },\n    {\n      key: 'custom2',\n      name: 'Custom option 2',\n      callback() {\n        alert('custom2 clicked');\n      }\n    },\n    'hidden_columns_hide', // shows 'Hide column' option\n    'hidden_columns_show' // shows 'Show hidden columns' option\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Cell Type in TypeScript\nDESCRIPTION: TypeScript implementation of select cell type in Handsontable with proper type definitions. Shows configuration of select cells with predefined options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/select-cell-type/select-cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector<HTMLElement>('#example1');\nconst data: (string | number)[][] = [\n  ['2017', 'Honda', 10],\n  ['2018', 'Toyota', 20],\n  ['2019', 'Nissan', 30]\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  colHeaders: ['Year', 'Car', 'Rating'],\n  height: 'auto',\n  columns: [\n    {\n      type: 'select',\n      selectOptions: ['2017', '2018', '2019']\n    },\n    {\n      type: 'select',\n      selectOptions: ['Honda', 'Toyota', 'Nissan']\n    },\n    {}\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data to CSV File in JavaScript\nDESCRIPTION: This snippet shows how to implement a button that, when clicked, downloads the grid data as a CSV file. It uses the downloadFile method from the exportFile plugin.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst button = document.querySelector('#export-file');\n\nconst hot = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nbutton.addEventListener('click', () => {\n  const exportPlugin = hot.getPlugin('exportFile');\n\n  exportPlugin.downloadFile('csv', {\n    bom: false,\n    columnDelimiter: ',',\n    columnHeaders: false,\n    exportHiddenColumns: true,\n    exportHiddenRows: true,\n    fileExtension: 'csv',\n    filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',\n    mimeType: 'text/csv',\n    rowDelimiter: '\\r\\n',\n    rowHeaders: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Formatting in React with TypeScript and Handsontable\nDESCRIPTION: React TSX implementation of conditional formatting in Handsontable, using custom cell renderers to apply different styles based on conditions within a React component with TypeScript typing.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/conditional-formatting/conditional-formatting.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport Handsontable from 'handsontable';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport { useEffect, useRef } from 'react';\nimport { GridSettings } from 'handsontable/settings';\n\nregisterAllModules();\n\nconst ExampleComponent = (): JSX.Element => {\n  const hotRef = useRef<HotTable>(null);\n  const data = [\n    ['Tesla', 2017, 'black', 'black', '$5,000.00', '$123,456.00'],\n    ['Nissan', 2018, 'blue', 'blue', '$4,000.00', '$234,567.00'],\n    ['Chrysler', 2019, 'yellow', 'black', '$4,000.00', ''],\n    ['Volvo', 2020, 'white', 'gray', '$5,000.00', '$768,908.00'],\n    ['Jaguar', 2019, 'purple', 'black', '$4,000.00', '$876,543.00'],\n    ['Ford', 2020, 'blue', 'blue', '$5,000.00', '-$9,123.00'],\n    ['Mercedes', 2019, 'blue', 'gray', '$5,000.00', '$123,456.00'],\n  ];\n\n  const isEmptyRow = (instance: Handsontable, row: number): boolean => {\n    const rowData = instance.getData()[row];\n  \n    return rowData.every(element => element === null || element === '');\n  };\n\n  return (\n    <HotTable\n      data={data}\n      rowHeaders={true}\n      colHeaders={['Car', 'Year', 'Chassis color', 'Bumper color', 'Price', 'Total']}\n      height=\"auto\"\n      licenseKey=\"non-commercial-and-evaluation\"\n      ref={hotRef}\n      cells={(row: number, col: number, prop: string): any => {\n        const cellProperties: any = {};\n        const visualRowIndex = hotRef.current?.hotInstance.toVisualRow(row);\n        const visualColIndex = hotRef.current?.hotInstance.toVisualColumn(col);\n        \n        cellProperties.renderer = function(instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string, value: any, cellProperties: any): void {\n          Handsontable.renderers.TextRenderer.apply(this, arguments as any);\n  \n          td.style.fontWeight = 'normal';\n          td.style.color = 'black';\n          td.style.background = 'white';\n  \n          if (row === 0) {\n            td.className = 'myBold';\n            td.style.fontWeight = 'bold';\n          }\n  \n          if (col === 0 && value === 'Nissan') {\n            td.className = 'myItalic';\n          }\n  \n          if (value === null || value === '') {\n            td.className = 'myEmpty';\n          }\n  \n          if (value === '') {\n            td.innerHTML = '<div class=\"relative\"><div class=\"uil-reload-css waitingForConnection\" style=\"transform: scale(0.3);\"><div class=\"\"></div></div></div>'\n          }\n          \n          if (value < 0) {\n            td.className = 'myNegative';\n          }\n  \n          if (visualRowIndex === 0 && visualColIndex === 0) {\n            td.style.fontStyle = 'italic';\n          }\n  \n          if (visualRowIndex !== null && visualRowIndex === isEmptyRow(instance, visualRowIndex)) {\n            td.style.background = '#EEE';\n          }\n        };\n  \n        return cellProperties;\n      }}\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Invalid Cell Class Names for Specific Columns in JavaScript\nDESCRIPTION: Example of configuring different custom CSS class names for invalid cells on a per-column basis in JavaScript. This allows for different styling based on the column type.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [\n  { data: 'firstName', invalidCellClassName: 'myInvalidClass' },\n  { data: 'lastName', invalidCellClassName: 'myInvalidSecondClass' },\n  { data: 'address' }\n]\n```\n\n----------------------------------------\n\nTITLE: Row Creation Validation with HyperFormula in React\nDESCRIPTION: Shows how to validate row creation using HyperFormula engine integration in React\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/events-and-hooks/events-and-hooks.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  beforeCreateRow={(row, amount) => {\n    if (!hyperFormula.isItPossibleToAddRows(0, [row, amount])) {\n      return false;\n    }\n}}/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Redux Integration with Custom Components in TypeScript\nDESCRIPTION: A TypeScript implementation demonstrating advanced Handsontable integration with Redux, featuring custom editor and renderer components that communicate through the Redux state.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/react-redux/react-redux.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { HotTable } from '@handsontable/react-wrapper';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport { createStore, Dispatch, Action } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { HexColorPicker } from 'react-colorful';\nimport StarRatingComponent from 'react-star-rating-component';\nimport Handsontable from 'handsontable';\n\n// register Handsontable's modules\nregisterAllModules();\n\ninterface AppState {\n  data: (string | number)[][];\n  isEditorOpened: boolean;\n  editedCarIndex: number;\n}\n\nconst initialState: AppState = {\n  data: [\n    ['BMW', 'blue', 4],\n    ['Volvo', 'steelblue', 5],\n    ['Toyota', 'yellow', 3],\n    ['Mercedes', 'red', 2],\n    ['Mitsubishi', 'green', 4]\n  ],\n  isEditorOpened: false,\n  editedCarIndex: 0\n};\n\nconst TOGGLE_EDITOR = 'TOGGLE_EDITOR';\nconst SET_EDITED_CAR = 'SET_EDITED_CAR';\n\ninterface ToggleEditorAction extends Action {\n  type: typeof TOGGLE_EDITOR;\n  value: boolean;\n}\n\ninterface SetEditedCarAction extends Action {\n  type: typeof SET_EDITED_CAR;\n  value: number;\n}\n\ntype AppActions = ToggleEditorAction | SetEditedCarAction;\n\nconst rootReducer = (state: AppState = initialState, action: AppActions): AppState => {\n  switch (action.type) {\n    case TOGGLE_EDITOR:\n      return Object.assign({}, state, {\n        isEditorOpened: action.value\n      });\n    case SET_EDITED_CAR:\n      return Object.assign({}, state, {\n        editedCarIndex: action.value\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst toggleEditor = (value: boolean): ToggleEditorAction => {\n  return {\n    type: TOGGLE_EDITOR,\n    value: value\n  };\n};\n\nconst setEditedCar = (value: number): SetEditedCarAction => {\n  return {\n    type: SET_EDITED_CAR,\n    value: value\n  };\n};\n\nconst store = createStore(rootReducer);\n\ninterface StateProps {\n  hotData: (string | number)[][];\n  isEditorOpened: boolean;\n  editedCarIndex: number;\n}\n\ninterface DispatchProps {\n  toggleEditor: (value: boolean) => void;\n  setEditedCar: (value: number) => void;\n}\n\ntype ReduxProps = StateProps & DispatchProps;\n\ninterface ColorEditorProps extends ReduxProps {\n  row: number;\n  value: string;\n  onFinishEditing: (value?: string) => void;\n}\n\ninterface ColorEditorState {\n  value: string | null;\n}\n\nconst mapStateToProps = (state: AppState): StateProps => {\n  return {\n    hotData: state.data,\n    isEditorOpened: state.isEditorOpened,\n    editedCarIndex: state.editedCarIndex\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AppActions>): DispatchProps => {\n  return {\n    toggleEditor: (value: boolean) => dispatch(toggleEditor(value)),\n    setEditedCar: (value: number) => dispatch(setEditedCar(value))\n  };\n};\n\nclass ColorEditor extends React.Component<ColorEditorProps, ColorEditorState> {\n  constructor(props: ColorEditorProps) {\n    super(props);\n\n    this.state = {\n      value: null\n    };\n\n    this.valueChangeCallback = this.valueChangeCallback.bind(this);\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.setValue(this.props.value);\n\n    this.props.toggleEditor(true);\n    this.props.setEditedCar(this.props.row);\n  }\n\n  componentWillUnmount() {\n    this.props.toggleEditor(false);\n  }\n\n  setValue(value: string) {\n    this.setState({\n      value: value\n    });\n  }\n\n  getValue() {\n    return this.state.value;\n  }\n\n  valueChangeCallback(value: string) {\n    this.setState({\n      value\n    });\n\n    this.finishEditing();\n  }\n\n  finishEditing() {\n    if (this.props.onFinishEditing) {\n      try {\n        this.props.onFinishEditing(this.state.value || undefined);\n\n      } catch (error) {\n        console.log('An error has occurred while closing the editor.');\n      }\n    }\n  }\n\n  keyDownHandler(event: React.KeyboardEvent) {\n    if (event.key === 'Escape') {\n      this.props.onFinishEditing();\n    }\n  }\n\n  render() {\n    const style = {\n      width: '100%',\n      height: '100%',\n      backgroundColor: this.state.value || undefined\n    };\n\n    return (\n      <div style={style} onKeyDown={this.keyDownHandler}>\n        <HexColorPicker\n          color={this.state.value || undefined}\n          onChange={this.valueChangeCallback}\n          style={{ width: '100%', height: '100%' }}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedColorEditor = connect(mapStateToProps, mapDispatchToProps)(ColorEditor);\n\ninterface ColorRendererProps extends ReduxProps {\n  row: number;\n  value: string;\n}\n\nclass ColorRenderer extends React.Component<ColorRendererProps> {\n  render() {\n    const style = {\n      width: '100%',\n      height: '100%',\n      backgroundColor: this.props.value,\n      color: '#eeeeee'\n    };\n\n    const className = this.props.isEditorOpened && this.props.editedCarIndex === this.props.row ? 'car-edited' : '';\n\n    return (\n      <div style={style} className={className}>\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nconst ConnectedColorRenderer = connect(mapStateToProps, mapDispatchToProps)(ColorRenderer);\n\ninterface StarRendererProps extends ReduxProps {\n  row: number;\n  value: number;\n}\n\nclass StarRenderer extends React.Component<StarRendererProps> {\n  render() {\n    const className = this.props.isEditorOpened && this.props.editedCarIndex === this.props.row ? 'car-edited' : '';\n\n    return (\n      <div className={className}>\n        <StarRatingComponent\n          name=\"rating\"\n          editing={false}\n          starCount={5}\n          value={this.props.value}\n        />\n      </div>\n    );\n  }\n}\n\nconst ConnectedStarRenderer = connect(mapStateToProps, mapDispatchToProps)(StarRenderer);\n\nconst renderColor = (instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string | number, value: any, cellProperties: Handsontable.CellProperties) => {\n  cellProperties.renderer = ConnectedColorRenderer;\n  cellProperties.editor = ConnectedColorEditor;\n\n  return td;\n};\n\nconst renderStar = (instance: Handsontable, td: HTMLTableCellElement, row: number, col: number, prop: string | number, value: any, cellProperties: Handsontable.CellProperties) => {\n  cellProperties.renderer = ConnectedStarRenderer;\n\n  return td;\n};\n\nclass HotTableComponent extends React.Component<ReduxProps> {\n  render() {\n    const columns = [\n      {},\n      {\n        renderer: renderColor\n      },\n      {\n        renderer: renderStar\n      }\n    ];\n\n    const colHeaders = [\"Car\", \"Color\", \"Rating\"];\n\n    return (\n      <div id=\"example-container\">\n        <HotTable\n          id=\"hot\"\n          data={this.props.hotData}\n          colHeaders={colHeaders}\n          rowHeaders={true}\n          columns={columns}\n          width=\"100%\"\n          height=\"300px\"\n          licenseKey=\"non-commercial-and-evaluation\"\n        />\n      </div>\n    );\n  }\n}\n\nconst HotTableContainer = connect(mapStateToProps, mapDispatchToProps)(HotTableComponent);\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <HotTableContainer />\n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Row Pre-population Implementation\nDESCRIPTION: Example showing how to pre-populate rows with template values using cell renderers and the beforeChange hook in Handsontable. When a cell in an empty row is edited, the template values are automatically filled in.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-prepopulating/row-prepopulating.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/rows/row-prepopulating/javascript/example1.js)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/rows/row-prepopulating/javascript/example1.ts)\n```\n\n----------------------------------------\n\nTITLE: Full Column Configuration with Password Type in React\nDESCRIPTION: Complete example showing password type configuration with custom validator implementation in React\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nfunction customValidator(query, callback) {\n  // ...validator logic\n  callback(/* Pass `true` or `false` */);\n}\n\n<HotTable\n  columns={[{\n    renderer: Handsontable.renderers.PasswordRenderer,\n    editor: Handsontable.editors.PasswordEditor,\n    validator: undefined\n  }, {\n    renderer: Handsontable.renderers.TextRenderer,\n    editor: Handsontable.editors.TextEditor,\n    validator: customValidator\n  },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Handsontable with Copy with Headers Options\nDESCRIPTION: This snippet shows how to configure Handsontable to enable copying with column headers. It sets up a grid with nested headers and enables various copy with headers options in the context menu.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/clipboard/clipboard.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda'],\n    ['2017', 10, 11, 12, 13],\n    ['2018', 20, 11, 14, 13],\n    ['2019', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  nestedHeaders: [\n    ['', 'Car brands', '', '', ''],\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda']\n  ],\n  contextMenu: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  copyPaste: {\n    copyColumnHeaders: true,\n    copyColumnGroupHeaders: true,\n    copyColumnHeadersOnly: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Data by Multiple Columns in React\nDESCRIPTION: Code example showing how to sort data by multiple columns using the multiColumnSorting.sort() method in React implementation of Handsontable, including setting primary and secondary sort criteria.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  // enable sorting by multiple columns, for all columns\n  multiColumnSorting={true}\n  ref={hotTableComponentRef}\n/>;\n\nconst hotTableComponentRef = useRef(null);\n// get the `ColumnSorting` plugin\nconst multiColumnSorting = hotTableComponentRef.current.hotInstance.getPlugin('multiColumnSorting');\n\nmultiColumnSorting.sort([\n  // sort data by the first column, in ascending order\n  {\n    column: 0,\n    sortOrder: 'asc',\n  },\n  // within the above sort criteria,\n  // sort data by the second column, in descending order\n  {\n    column: 1,\n    sortOrder: 'desc',\n  },\n]);\n\n// go back to the original order\nmultiColumnSorting.clearSort();\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkbox Values in JavaScript\nDESCRIPTION: This example shows how to use custom values for checkbox states in Handsontable. It uses 'checkedTemplate' and 'uncheckedTemplate' to define custom values for checked and unchecked states.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: [\n    { car: 'Mercedes A 160', year: 2017, available: 'yes', comesInBlack: 'yes' },\n    { car: 'Citroen C4 Coupe', year: 2018, available: 'no', comesInBlack: 'yes' },\n    { car: 'Audi A4 Avant', year: 2019, available: 'yes', comesInBlack: 'no' },\n    { car: 'Opel Astra', year: 2020, available: 'no', comesInBlack: 'yes' },\n    { car: 'BMW 320i Coupe', year: 2021, available: 'no', comesInBlack: 'no' }\n  ],\n  columns: [\n    { data: 'car', type: 'text' },\n    { data: 'year', type: 'numeric' },\n    {\n      data: 'available',\n      type: 'checkbox',\n      checkedTemplate: 'yes',\n      uncheckedTemplate: 'no'\n    },\n    {\n      data: 'comesInBlack',\n      type: 'checkbox',\n      checkedTemplate: 'yes',\n      uncheckedTemplate: 'no'\n    }\n  ],\n  colHeaders: ['Car', 'Year', 'Available', 'Comes in black'],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Context Menu Options in React (JSX)\nDESCRIPTION: React implementation showing how to configure Handsontable with selected context menu options. This JSX example demonstrates integration of Handsontable's context menu within a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/context-menu/context-menu.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/context-menu/react/example2.jsx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete Strict Mode in JavaScript\nDESCRIPTION: This example shows the autocomplete cell type in strict mode, where cells only accept values defined in the source array. It also demonstrates the behavior with different allowInvalid settings.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],\n    ['2017', 10, 11, 12, 13, 15, 16],\n    ['2018', 10, 11, 12, 13, 15, 16],\n    ['2019', 10, 11, 12, 13, 15, 16],\n    ['2020', 10, 11, 12, 13, 15, 16],\n    ['2021', 10, 11, 12, 13, 15, 16]\n  ],\n  columns: [\n    {},\n    {\n      type: 'autocomplete',\n      source: ['BMW', 'Chrysler', 'Nissan', 'Suzuki', 'Toyota', 'Volvo'],\n      strict: true\n    },\n    {\n      type: 'autocomplete',\n      source: ['Citroen', 'Fiat', 'Honda', 'Jaguar', 'Mercedes', 'Nissan', 'Renault', 'Suzuki', 'Toyota', 'Volvo'],\n      strict: true,\n      allowInvalid: false\n    },\n    {\n      type: 'autocomplete',\n      source: ['Audi', 'BMW', 'Chrysler', 'Ford', 'Honda', 'Mazda', 'Mercedes', 'Nissan', 'Toyota', 'Volvo'],\n      strict: true,\n      allowInvalid: true\n    },\n    {}, {}, {}\n  ],\n  colHeaders: ['', 'Autocomplete<br/>(allowInvalid: true)', 'Autocomplete<br/>(allowInvalid: false)', 'Autocomplete<br/>(allowInvalid: true)', '', '', ''],\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Integration with Handsontable in React\nDESCRIPTION: A simple example showing how to implement Handsontable React wrapper with a readOnly toggle switch using Redux state management.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/react-redux/react-redux.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { HotTable } from '@handsontable/react-wrapper';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst initialState = {\n  data: [\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5']\n  ],\n  isReadOnly: false\n};\n\nconst TOGGLE_READMODE = 'TOGGLE_READMODE';\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_READMODE:\n      return Object.assign({}, state, {\n        isReadOnly: action.value\n      });\n    default:\n      return state;\n  }\n};\n\nconst toggleReadMode = (value) => {\n  return {\n    type: TOGGLE_READMODE,\n    value: value\n  };\n};\n\nconst store = createStore(rootReducer);\n\nconst mapStateToProps = state => {\n  return {\n    hotData: state.data,\n    isReadOnly: state.isReadOnly\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleReadMode: (value) => dispatch(toggleReadMode(value))\n  };\n};\n\nclass HotTableComponent extends React.Component {\n  render() {\n    return (\n      <div id=\"example-container\">\n        <div id=\"example-caption\">This Handsontable is {this.props.isReadOnly ? '' : 'not'} read-only</div>\n        <div id=\"toggle-boxes\">\n          <input id=\"readOnlyYes\" type=\"radio\"\n            name=\"readOnly\" value=\"Yes\"\n            checked={this.props.isReadOnly === true}\n            onChange={() => this.props.toggleReadMode(true)}\n          />\n          <label htmlFor=\"readOnlyYes\">Yes</label>\n\n          <input id=\"readOnlyNo\" type=\"radio\"\n            name=\"readOnly\" value=\"No\"\n            checked={this.props.isReadOnly === false}\n            onChange={() => this.props.toggleReadMode(false)}\n          />\n          <label htmlFor=\"readOnlyNo\">No</label>\n        </div>\n\n        <HotTable\n          data={this.props.hotData}\n          readOnly={this.props.isReadOnly}\n          width=\"100%\"\n          height=\"300px\"\n          licenseKey=\"non-commercial-and-evaluation\"\n        />\n      </div>\n    );\n  }\n}\n\nconst HotTableContainer = connect(mapStateToProps, mapDispatchToProps)(HotTableComponent);\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <HotTableContainer />\n    </Provider>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Filtering in JavaScript\nDESCRIPTION: Demonstrates how to enable basic filtering functionality in Handsontable using JavaScript. It sets up filters and dropdown menu options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  // enable filtering\n  filters: true,\n  // enable the column menu\n  dropdownMenu: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via npm\nDESCRIPTION: Command to install Handsontable using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Cell Type in JavaScript\nDESCRIPTION: Example showing how to implement a dropdown cell type in JavaScript using Handsontable. The code demonstrates setting up a data grid with a dropdown column containing car manufacturer options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/cell-types/dropdown-cell-type/javascript/example1.js)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-defined Comments in React\nDESCRIPTION: React implementation showing how to add pre-defined comments to specific cells in a Handsontable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/comments/comments.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ncell={[\n  { row: 1, col: 1, comment: { value: 'Hello world!' } }\n]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Editor in Vue 2 JavaScript\nDESCRIPTION: This JavaScript code defines a custom editor class 'CustomEditor' and sets up a Vue 2 instance with Handsontable. It demonstrates how to use the custom editor within the Handsontable configuration and provides sample data and column settings.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-custom-editor-example/vue-custom-editor-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { HotTable } from '@handsontable/vue';\nimport Handsontable from 'handsontable';\n\nclass CustomEditor extends Handsontable.editors.TextEditor {\n  createElements() {\n    super.createElements();\n\n    this.TEXTAREA = document.createElement('input');\n    this.TEXTAREA.setAttribute('placeholder', 'Custom placeholder');\n    this.TEXTAREA.setAttribute('data-hot-input', true);\n    this.textareaStyle = this.TEXTAREA.style;\n    Handsontable.dom.empty(this.TEXTAREA_PARENT);\n    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n  }\n}\n\nnew Vue({\n  el: '#example1',\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['A1', 'B1', 'C1', 'D1'],\n          ['A2', 'B2', 'C2', 'D2'],\n          ['A3', 'B3', 'C3', 'D3'],\n          ['A4', 'B4', 'C4', 'D4']\n        ],\n        columns: [\n          {},\n          {},\n          {},\n          {\n            editor: CustomEditor\n          }\n        ],\n        colHeaders: true,\n        rowHeaders: true,\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo and Redo in React with Handsontable (JSX)\nDESCRIPTION: React implementation of the undo and redo functionality in a Handsontable data grid using JSX. This demonstrates how to integrate the undo/redo feature within a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/undo-redo/undo-redo.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/undo-redo/react/example.jsx)\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data to CSV File in React (JSX)\nDESCRIPTION: React implementation for exporting grid data to CSV file. It uses a reference to access the Handsontable instance and the exportFile plugin to trigger the download when a button is clicked.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef(null);\n\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  const exportFile = () => {\n    // The `current` property contains the HotTable instance\n    const hot = hotRef.current.hotInstance;\n    // Get the plugin from the Handsontable instance\n    const exportPlugin = hot.getPlugin('exportFile');\n\n    exportPlugin.downloadFile('csv', {\n      bom: false,\n      columnDelimiter: ',',\n      columnHeaders: false,\n      exportHiddenColumns: true,\n      exportHiddenRows: true,\n      fileExtension: 'csv',\n      filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',\n      mimeType: 'text/csv',\n      rowDelimiter: '\\r\\n',\n      rowHeaders: true\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={exportFile} className=\"button button--primary\">Download CSV</button>\n      </div>\n      <br/>\n\n      <HotTable\n        ref={hotRef}\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        autoWrapRow={true}\n        autoWrapCol={true}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Renderers from Handsontable\nDESCRIPTION: Imports various cell renderers from Handsontable. These renderers control how different types of data are displayed in the grid cells.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { checkboxRenderer } from 'handsontable/renderers/checkboxRenderer';\nimport { dropdownRenderer } from 'handsontable/renderers/dropdownRenderer';\nimport { htmlRenderer } from 'handsontable/renderers/htmlRenderer';\nimport { numericRenderer } from 'handsontable/renderers/numericRenderer';\nimport { passwordRenderer } from 'handsontable/renderers/passwordRenderer';\nimport { textRenderer } from 'handsontable/renderers/textRenderer';\n```\n\n----------------------------------------\n\nTITLE: Custom Column Menu Configuration in React with TypeScript\nDESCRIPTION: React TypeScript implementation showing how to customize column menu options. The dropdownMenu property of HotTable is configured with specific options including custom items with callbacks.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-menu/column-menu.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  // initialize the data array\n  const data: (string | number)[][] = [\n    ['Tesla', 2017, 'black', 'black'],\n    ['Nissan', 2018, 'blue', 'blue'],\n    ['Chrysler', 2019, 'yellow', 'black'],\n    ['Volvo', 2020, 'yellow', 'gray']\n  ];\n\n  return (\n    <HotTable\n      data={data}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      autoWrapRow={true}\n      autoWrapCol={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n      // enable and configure dropdown menu\n      dropdownMenu={[\n        'alignment',\n        'filter_by_condition',\n        'filter_by_value',\n        'filter_action_bar',\n        '---------',\n        'col_left',\n        'col_right',\n        'remove_col',\n        '---------',\n        {\n          key: 'custom1',\n          name: 'Custom option',\n          callback() {\n            alert('custom1 clicked');\n          }\n        },\n        {\n          key: 'custom2',\n          name: 'Custom option 2',\n          callback() {\n            alert('custom2 clicked');\n          }\n        },\n        'hidden_columns_hide', // shows 'Hide column' option\n        'hidden_columns_show' // shows 'Show hidden columns' option\n      ]}\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Sorting Options in React\nDESCRIPTION: Advanced configuration for column sorting in React components with options for header action, empty cells handling, sort indicators, initial sort configuration, and custom comparator function.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columnSorting={{\n    // let the end user sort data by clicking on the column name (set by default)\n    headerAction: true,\n    // don't sort empty cells – move rows that contain empty cells to the bottom (set by default)\n    sortEmptyCells: false,\n    // enable the sort order icon that appears next to the column name (set by default)\n    indicator: true,\n\n    // at initialization, sort data by the first column, in descending order\n    initialConfig: {\n      column: 1,\n      sortOrder: 'desc',\n    },\n\n    // implement your own comparator\n    compareFunctionFactory(sortOrder, columnMeta) {\n      return function(value, nextValue) {\n        // here, add a compare function\n        // that returns `-1`, or `0`, or `1`\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component-Based Editor with useHotEditor Hook\nDESCRIPTION: Example of creating a custom cell editor as a React functional component using the useHotEditor hook, which provides value handling and editing lifecycle events.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useHotEditor } from \"@handsontable/react-wrapper\";\n\nconst EditorComponent = () => {\n  const { value, setValue, finishEditing } = useHotEditor({\n    onOpen: () => {\n      // Open logic\n    },\n    onClose: () => {\n      // Close logic\n    },\n  });\n\n  // Component logic here\n\n  // Any elements that should be rendered within the editor\n  return (\n    <div>\n      <button onClick={finishEditing}>Apply</button>\n    </div>\n  );\n};\n\n// ...\n\n<HotTable\n  editor={ EditorComponent }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Formatting in JavaScript with Handsontable\nDESCRIPTION: JavaScript implementation of conditional formatting in Handsontable, using custom cell renderers to apply different styles based on conditions such as row position, column type, empty cells, and negative values.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/conditional-formatting/conditional-formatting.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nconst container = document.querySelector('#example1');\nconst data = [\n  ['Tesla', 2017, 'black', 'black', '$5,000.00', '$123,456.00'],\n  ['Nissan', 2018, 'blue', 'blue', '$4,000.00', '$234,567.00'],\n  ['Chrysler', 2019, 'yellow', 'black', '$4,000.00', ''],\n  ['Volvo', 2020, 'white', 'gray', '$5,000.00', '$768,908.00'],\n  ['Jaguar', 2019, 'purple', 'black', '$4,000.00', '$876,543.00'],\n  ['Ford', 2020, 'blue', 'blue', '$5,000.00', '-$9,123.00'],\n  ['Mercedes', 2019, 'blue', 'gray', '$5,000.00', '$123,456.00'],\n];\n\nconst isEmptyRow = (instance, row) => {\n  const rowData = instance.getData()[row];\n\n  return rowData.every(element => element === null || element === '');\n};\n\nconst hot = new Handsontable(container, {\n  data,\n  rowHeaders: true,\n  colHeaders: ['Car', 'Year', 'Chassis color', 'Bumper color', 'Price', 'Total'],\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  cells(row, col, prop) {\n    const cellProperties = {};\n    const visualRowIndex = this.instance.toVisualRow(row);\n    const visualColIndex = this.instance.toVisualColumn(col);\n\n    cellProperties.renderer = function(instance, td, row, col, prop, value, cellProperties) {\n      Handsontable.renderers.TextRenderer.apply(this, arguments);\n\n      td.style.fontWeight = 'normal';\n      td.style.color = 'black';\n      td.style.background = 'white';\n\n      if (row === 0) {\n        td.className = 'myBold';\n        td.style.fontWeight = 'bold';\n      }\n\n      if (col === 0 && value === 'Nissan') {\n        td.className = 'myItalic';\n      }\n\n      if (value === null || value === '') {\n        td.className = 'myEmpty';\n      }\n\n      if (value === '') {\n        td.innerHTML = '<div class=\"relative\"><div class=\"uil-reload-css waitingForConnection\" style=\"transform: scale(0.3);\"><div class=\"\"></div></div></div>'\n      }\n      \n      if (value < 0) {\n        td.className = 'myNegative';\n      }\n\n      if (visualRowIndex === 0 && visualColIndex === 0) {\n        td.style.fontStyle = 'italic';\n      }\n\n      if (visualRowIndex === isEmptyRow(instance, visualRowIndex)) {\n        td.style.background = '#EEE';\n      }\n    };\n\n    return cellProperties;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Merge Cells Configuration in React\nDESCRIPTION: React-specific syntax for configuring merged cells in Handsontable, showing how to provide cell merging details as a prop.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/merge-cells/merge-cells.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nmergeCells={[{ row: 1, col: 1, rowspan: 2, colspan: 2 }]}\n```\n\n----------------------------------------\n\nTITLE: Basic Handsontable Cell Type Example - TypeScript\nDESCRIPTION: Shows the TypeScript implementation of a Handsontable cell type with a spreadsheet editor popup.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/handsontable-cell-type/handsontable-cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/cell-types/handsontable-cell-type/javascript/example1.ts)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Column Sorting with Column-Specific Options in React\nDESCRIPTION: Advanced configuration for multi-column sorting in React with the ability to disable sorting for specific columns using the headerAction property.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  // enable sorting by multiple columns, for all columns\n  multiColumnSorting={true}\n  columns={[\n    {\n      // disable sorting by multiple columns for the first column\n      columnSorting: {\n        headerAction: false,\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing SelectEditor Class with DOM Element Creation in Handsontable\nDESCRIPTION: Creates a custom SelectEditor class that extends BaseEditor. The init() method creates a SELECT element, adds CSS class for styling, and appends it to the DOM. This approach ensures that DOM manipulation is performed only once during initialization.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\n\nclass SelectEditor extends Handsontable.editors.BaseEditor {\n  /**\n   * Initializes editor instance, DOM Element and mount hooks.\n   */\n  init() {\n    // Create detached node, add CSS class and make sure its not visible\n    this.select = this.hot.rootDocument.createElement('SELECT');\n    this.select.classList.add('htSelectEditor');\n    this.select.style.display = 'none';\n\n    // Attach node to DOM, by appending it to the container holding the table\n    this.hot.rootElement.appendChild(this.select);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Formulas Plugin in React\nDESCRIPTION: Implementation of the Formulas plugin configuration in a React component using HotTable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/formulas/formula-calculation/formula-calculation.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  formulas={{\n    engine: HyperFormula,\n    // [plugin configuration]\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Filters Programmatically in React\nDESCRIPTION: React code showing how to enable or disable Handsontable's filtering functionality at runtime by accessing the hot instance through a ref.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst hotTableComponentRef = useRef(null);\n\nhotTableComponentRef.current.hotInstance.updateSettings({\n  // enable filtering\n  filters: true,\n  // enable the column menu\n  dropdownMenu: true,\n});\n\nhotTableComponentRef.current.hotInstance.updateSettings({\n  // disable filtering\n  filters: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable React Wrapper\nDESCRIPTION: Command to install Handsontable and its React wrapper using npm. This is the first step to integrate Handsontable into a React application.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/react/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/react\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox Cell Type in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic checkbox cell type in Handsontable using JavaScript. It sets up a data grid with checkbox columns for 'checked', 'checked2', and 'checked3'.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: [\n    { car: 'Mercedes A 160', year: 2017, available: true, comesInBlack: 'yes' },\n    { car: 'Citroen C4 Coupe', year: 2018, available: false, comesInBlack: 'yes' },\n    { car: 'Audi A4 Avant', year: 2019, available: true, comesInBlack: 'no' },\n    { car: 'Opel Astra', year: 2020, available: false, comesInBlack: 'yes' },\n    { car: 'BMW 320i Coupe', year: 2021, available: false, comesInBlack: 'no' }\n  ],\n  columns: [\n    { data: 'car', type: 'text' },\n    { data: 'year', type: 'numeric' },\n    { data: 'available', type: 'checkbox' },\n    { data: 'comesInBlack', type: 'checkbox' }\n  ],\n  colHeaders: ['Car', 'Year', 'Available', 'Comes in black'],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Row Creation Event in React\nDESCRIPTION: Demonstrates how to handle the afterCreateRow hook in React to log information about newly created rows\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/events-and-hooks/events-and-hooks.md#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable afterCreateRow={(row, amount) => {\n  console.log(`${amount} row(s) were created, starting at index ${row}`);\n}}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Headers in React\nDESCRIPTION: React implementation of nested headers configuration using JSX syntax. Defines multiple levels of headers with varying column spans to create a hierarchical header structure.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-groups/column-groups.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nnestedHeaders={[\n  ['A', { label: 'B', colspan: 8 }, 'C'],\n  ['D', { label: 'E', colspan: 4 }, { label: 'F', colspan: 4 }, 'G'],\n  ['H', { label: 'I', colspan: 2 }, { label: 'J', colspan: 2 }, { label: 'K', colspan: 2 }, { label: 'L', colspan: 2 }, 'M'],\n  ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W']\n]}\n```\n\n----------------------------------------\n\nTITLE: Using Sorting Hooks in JavaScript\nDESCRIPTION: Illustrates how to use Handsontable hooks for custom sorting behavior in JavaScript. This example shows how to use beforeColumnSort and afterColumnSort hooks to execute custom logic before and after sorting.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  beforeColumnSort() {\n    // add your code here\n    return false; // to block front-end sorting\n  },\n  afterColumnSort() {\n    // add your code here\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Making Specific Cells Read-Only in Handsontable\nDESCRIPTION: This example demonstrates how to make specific cells read-only based on their content. It uses the cells callback function to check each cell's value and sets the readOnly property to true for cells containing the word 'Nissan'.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/disabled-cells/disabled-cells.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst data = [\n  ['Tesla', 2017, 'black', 'black'],\n  ['Nissan', 2018, 'blue', 'blue'],\n  ['Chrysler', 2019, 'yellow', 'black'],\n  ['Volvo', 2020, 'white', 'gray']\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  colHeaders: ['Car', 'Year', 'Chassis color', 'Bumper color'],\n  licenseKey: 'non-commercial-and-evaluation',\n  height: 'auto',\n  cells(row, column) {\n    const cellProperties = {};\n\n    if (this.instance.getData()[row][0] === 'Nissan') {\n      cellProperties.readOnly = true;\n    }\n\n    return cellProperties;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example Using Individual Renderer, Editor, and Validator Modules\nDESCRIPTION: Demonstrates how to import and register individual renderer, editor, and validator modules instead of using a complete cell type. This provides more granular control over which components are included.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport {\n  registerRenderer,\n  numericRenderer,\n} from 'handsontable/renderers';\nimport {\n  registerEditor,\n  NumericEditor,\n} from 'handsontable/editors';\nimport {\n  registerValidator,\n  numericValidator,\n} from 'handsontable/validators';\n\nregisterRenderer(numericRenderer);\nregisterEditor(NumericEditor);\nregisterValidator(numericValidator);\n\nnew Handsontable(container, {\n  columns: [\n    {\n      renderer: 'numeric',\n      editor: 'numeric',\n      validator: 'numeric',\n      dataType: 'number',\n      type: 'numeric',\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Renderer in Angular for Handsontable\nDESCRIPTION: JavaScript code that configures a Handsontable instance in Angular with a custom image renderer function. The custom renderer transforms URLs into image elements and handles cell content appropriately.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-custom-renderer-example/angular-custom-renderer-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport * as Handsontable from 'handsontable';\n\n@Component({\n  selector: 'example-component',\n  templateUrl: './example1.html'\n})\nexport class ExampleComponent {\n  hotSettings: Handsontable.GridSettings = {\n    data: [\n      ['https://handsontable.com/docs/9.0/img/examples/professional-javascript-developers-nicholas-zakas.jpg', 'Professional JavaScript for Web Developers', 'Nicholas C. Zakas'],\n      ['https://handsontable.com/docs/9.0/img/examples/javascript-the-good-parts.jpg', 'JavaScript: The Good Parts', 'Douglas Crockford'],\n      ['https://handsontable.com/docs/9.0/img/examples/javascript-the-definitive-guide.jpg', 'JavaScript: The Definitive Guide', 'David Flanagan'],\n      ['https://handsontable.com/docs/9.0/img/examples/speaking-javascript.jpg', 'Speaking JavaScript', 'Axel Rauschmayer'],\n      ['https://handsontable.com/docs/9.0/img/examples/programming-javascript-applications.jpg', 'Programming JavaScript Applications', 'Eric Elliott'],\n      ['https://handsontable.com/docs/9.0/img/examples/eloquent-javascript.jpg', 'Eloquent JavaScript: A Modern Introduction to Programming', 'Marijn Haverbeke'],\n      ['https://handsontable.com/docs/9.0/img/examples/understanding-ecmascript-6.jpg', 'Understanding ECMAScript 6', 'Nicholas C. Zakas']\n    ],\n    colHeaders: ['Title', 'Description', 'Author'],\n    height: 'auto',\n    contextMenu: true,\n    rowHeaders: true,\n    licenseKey: 'non-commercial-and-evaluation',\n    columns: [\n      {\n        renderer(instance, td, row, col, prop, value, cellProperties) {\n          const img = document.createElement('IMG');\n          img.src = value;\n\n          // Some styles\n          img.style.width = '40px';\n          img.style.height = '55px';\n\n          Handsontable.dom.empty(td);\n          td.appendChild(img);\n\n          return td;\n        }\n      }, {}, {}\n    ]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Context Menu with Column Hiding Options\nDESCRIPTION: Shows how to add specific column hiding items to the context menu configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: {\n    columns: [1, 2, 5],\n    indicators: true\n  },\n  contextMenu: ['hidden_columns_show', 'hidden_columns_hide'],\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Sorting for Specific Columns in React\nDESCRIPTION: Code example showing how to enable or disable column sorting for specific columns using the updateSettings() method in React implementation of Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nconst hotTableComponentRef = useRef(null);\n\nhotTableComponentRef.current.hotInstance.updateSettings({\n  columns: [\n    {\n      // enable sorting for the first column\n      columnSorting: {\n        headerAction: true,\n      },\n    },\n    {\n      // disable sorting for the second column\n      columnSorting: {\n        headerAction: false,\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: React Component with Row Freezing (TSX)\nDESCRIPTION: TypeScript React component implementation of row freezing using TSX syntax with type safety.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-freezing/row-freezing.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@/content/guides/rows/row-freezing/react/example1.tsx\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Editable Specific Cells in Handsontable\nDESCRIPTION: This example demonstrates how to make specific cells non-editable based on their content. It uses the cells callback function to check cell values and sets the editor property to false for cells containing the word 'Nissan'.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/disabled-cells/disabled-cells.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example4');\nconst data = [\n  ['Tesla', 2017, 'black', 'black'],\n  ['Nissan', 2018, 'blue', 'blue'],\n  ['Chrysler', 2019, 'yellow', 'black'],\n  ['Volvo', 2020, 'white', 'gray']\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  colHeaders: ['Car', 'Year', 'Chassis color', 'Bumper color'],\n  licenseKey: 'non-commercial-and-evaluation',\n  height: 'auto',\n  cells(row, column) {\n    const cellProperties = {};\n\n    if (this.instance.getData()[row][0] === 'Nissan') {\n      cellProperties.editor = false;\n    }\n\n    return cellProperties;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Grid Dimensions in JavaScript\nDESCRIPTION: Example of applying width and height configuration options to the entire grid using the Handsontable constructor in JavaScript.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  // top-level grid options that apply to the entire grid\n  width: 400,\n  height: 300\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Editable Columns in Handsontable\nDESCRIPTION: This example shows how to configure non-editable columns by setting the editor property to false. Unlike read-only cells, non-editable cells still allow copy-paste and drag-to-fill operations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/disabled-cells/disabled-cells.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\n\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  columns: [\n    {},\n    {\n      editor: false\n    },\n    {},\n    {},\n    {}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Formulas Plugin in JavaScript\nDESCRIPTION: Basic configuration of the Formulas plugin in Handsontable with HyperFormula engine.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/formulas/formula-calculation/formula-calculation.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  formulas: {\n    engine: HyperFormula,\n    // [plugin configuration]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete Flexible Mode in JavaScript\nDESCRIPTION: This example demonstrates the autocomplete cell type in flexible mode, allowing users to choose from suggested options or enter custom values.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],\n  ],\n  columns: [\n    {\n      type: 'autocomplete',\n      source: ['Acura', 'Audi', 'BMW', 'Buick', 'Cadillac', 'Chevrolet', 'Chrysler', 'Citroen', 'Dodge', 'Eagle', 'Ferrari', 'Ford', 'General Motors', 'GMC', 'Honda', 'Hummer', 'Hyundai', 'Infiniti', 'Isuzu', 'Jaguar', 'Jeep', 'Kia', 'Lamborghini', 'Land Rover', 'Lexus', 'Lincoln', 'Lotus', 'Mazda', 'Mercedes-Benz', 'Mercury', 'Mitsubishi', 'Nissan', 'Oldsmobile', 'Peugeot', 'Pontiac', 'Porsche', 'Regal', 'Renault', 'Saab', 'Saturn', 'Subaru', 'Suzuki', 'Toyota', 'Volkswagen', 'Volvo'],\n      strict: false\n    }\n  ],\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Plugins from Handsontable\nDESCRIPTION: Imports plugin registration function and various plugin classes. Plugins add additional functionality to the Handsontable grid, such as sorting, filtering, and context menus.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from 'handsontable/plugins/registry';\nimport { AutoColumnSize } from 'handsontable/plugins/autoColumnSize';\nimport { Autofill } from 'handsontable/plugins/autofill';\nimport { AutoRowSize } from 'handsontable/plugins/autoRowSize';\nimport { BasePlugin } from 'handsontable/plugins/base';\nimport { BindRowsWithHeaders } from 'handsontable/plugins/bindRowsWithHeaders';\nimport { CollapsibleColumns } from 'handsontable/plugins/collapsibleColumn';\nimport { ColumnSorting } from 'handsontable/plugins/columnSorting';\nimport { Comments } from 'handsontable/plugins/comments';\nimport { ContextMenu } from 'handsontable/plugins/contextMenu';\nimport { CopyPaste } from 'handsontable/plugins/copyPaste';\nimport { CustomBorders } from 'handsontable/plugins/customBorders';\nimport { DragToScroll } from 'handsontable/plugins/dragToScroll';\nimport { DropdownMenu } from 'handsontable/plugins/dropdownMenu';\nimport { ExportFile } from 'handsontable/plugins/exportFile';\nimport { Filters } from 'handsontable/plugins/filters';\nimport { HiddenColumns } from 'handsontable/plugins/hiddenColumns';\nimport { HiddenRows } from 'handsontable/plugins/hiddenRows';\nimport { ManualColumnFreeze } from 'handsontable/plugins/manualColumnFreeze';\nimport { ManualColumnMove } from 'handsontable/plugins/manualColumnMove';\nimport { ManualColumnResize } from 'handsontable/plugins/manualColumnResize';\nimport { ManualRowMove } from 'handsontable/plugins/manualRowMove';\nimport { ManualRowResize } from 'handsontable/plugins/manualRowResize';\nimport { MergeCells } from 'handsontable/plugins/mergeCells';\nimport { MultipleSelectionHandles } from 'handsontable/plugins/multipleSelectionHandles';\nimport { NestedHeaders } from 'handsontable/plugins/nestedHeaders';\nimport { NestedRows } from 'handsontable/plugins/nestedRows';\nimport { PersistentState } from 'handsontable/plugins/persistentState';\nimport { Search } from 'handsontable/plugins/search';\nimport { StretchColumns } from 'handsontable/plugins/stretchColumns';\nimport { TouchScroll } from 'handsontable/plugins/touchScroll';\nimport { TrimRows } from 'handsontable/plugins/trimRows';\nimport { UndoRedo } from 'handsontable/plugins/undoRedo';\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Handsontable Translation Implementation\nDESCRIPTION: JavaScript code that implements language switching functionality in a Vue 3 Handsontable component, including data configuration, language settings, and event handling.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-setting-up-a-language/vue3-setting-up-a-language.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport numbro from 'numbro';\nimport languages from 'numbro/dist/languages.min';\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport { languages as handsontableLanguages } from 'handsontable/i18n';\nimport { createApp } from 'vue';\n\n// register Handsontable's modules\nregisterAllModules();\n\n// register languages for numbro\nlanguages.forEach(language => numbro.registerLanguage(language));\n\nconst app = createApp({\n  data() {\n    return {\n      selectedLanguage: 'en-US',\n      hotSettings: {\n        data: [\n          ['Mercedes', 'A 160', 2009, 6999.95],\n          ['Citroen', 'C4 Coupe', '2012', '8330'],\n          ['Audi', 'A4 Avant', '2011', '33900'],\n          ['Opel', 'Astra', 2014, 5000],\n          ['BMW', '320i Coupe', 2015, 30500],\n        ],\n        colHeaders: ['Car', 'Model', 'Year', 'Price ($)'],\n        columns: [\n          { type: 'text' },\n          { type: 'text' },\n          { type: 'numeric' },\n          {\n            type: 'numeric',\n            numericFormat: {\n              pattern: '0,0.00',\n              culture: 'en-US'\n            }\n          }\n        ],\n        height: 'auto',\n        language: 'en-US',\n        licenseKey: 'non-commercial-and-evaluation'\n      },\n      hotInstance: null\n    };\n  },\n  methods: {\n    onLanguageChange() {\n      const priceColumn = this.hotSettings.columns[3];\n      priceColumn.numericFormat.culture = this.selectedLanguage;\n      this.hotSettings.language = this.selectedLanguage;\n      this.hotInstance.render();\n    }\n  },\n  components: {\n    HotTable\n  }\n});\n\napp.mount('#example1');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Image Renderer in Vue 2 with Handsontable\nDESCRIPTION: This example shows how to create a custom renderer for Handsontable in a Vue 2 application. The renderer takes an image URL as input and displays the image in the cell. It includes both HTML template and JavaScript code for the Vue component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-custom-renderer-example/vue-custom-renderer-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\">\n  <hot-table :settings=\"hotSettings\"></hot-table>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HotTable } from '@handsontable/vue';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst imageRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n  const escaped = Handsontable.helper.stringify(value);\n  let img = null;\n\n  if (escaped.indexOf('http') === 0) {\n    img = document.createElement('IMG');\n    img.src = value;\n\n    img.addEventListener('mousedown', event => {\n      event.preventDefault();\n    });\n\n    td.innerText = '';\n    td.appendChild(img);\n\n  } else {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n  }\n\n  return td;\n};\n\nnew Vue({\n  el: '#example1',\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['https://handsontable.com/docs/7.1.0/img/examples/professional-javascript-developers-nicholas-zakas.jpg'],\n          ['https://handsontable.com/docs/7.1.0/img/examples/javascript-the-good-parts.jpg'],\n          ['https://handsontable.com/docs/7.1.0/img/examples/eloquent-javascript.jpg'],\n          ['https://handsontable.com/docs/7.1.0/img/examples/javascript-the-definitive-guide.jpg']\n        ],\n        colHeaders: true,\n        rowHeaders: true,\n        height: 'auto',\n        columns: [{\n          renderer: imageRenderer\n        }],\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Validator in Handsontable React Component\nDESCRIPTION: Example of referencing a custom validator by its alias in Handsontable configuration options for React. This demonstrates how to apply validation in a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[{\n    validator: 'my.custom'\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Optional Handsontable Modules in Vue 3\nDESCRIPTION: Demonstrates importing specific cell types and plugins with their registration functions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-modules/vue3-modules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  registerCellType, // cell types' registering function\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nimport {\n  registerPlugin, // plugins' registering function\n  UndoRedo,\n} from 'handsontable/plugins';\n```\n\n----------------------------------------\n\nTITLE: Setting Grid-wide Locale in React\nDESCRIPTION: Example of setting the locale for an entire Handsontable grid using the React HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/locale/locale.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  // set the entire grid's locale to Polish\n  locale=\"pl-PL\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Column Summary with Reversed Row Coordinates in React\nDESCRIPTION: React example showing how to make room for column summary results by adding an empty row at the bottom of the grid and using reversedRowCoords to display summary results at the bottom.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-summary/column-summary.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ncolumnSummary={[{\n    sourceColumn: 1,\n    // set the `type` option to `'custom'`\n    type: 'custom',\n    destinationRow: 0,\n    destinationColumn: 5,\n    reversedRowCoords: true\n}]}\n```\n\n----------------------------------------\n\nTITLE: React Component with Column Virtualization in JSX\nDESCRIPTION: React implementation of column virtualization showing how to integrate Handsontable's virtualization features in a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-virtualization/column-virtualization.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  const data = [];\n\n  for (let i = 0; i < 1000; i++) {\n    const row = [];\n    for (let j = 0; j < 1000; j++) {\n      row.push(j);\n    }\n    data.push(row);\n  }\n\n  return (\n    <HotTable\n      data={data}\n      width=\"100%\"\n      height={400}\n      rowHeaders={true}\n      colHeaders={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsible Columns in React\nDESCRIPTION: React implementation of collapsible columns configuration that specifies which nested headers should have collapse/expand functionality using row and column indices.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-groups/column-groups.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ncollapsibleColumns={[\n  { row: -4, col: 1, collapsible: true }, // Add the button to the 4th-level header of the 1st column - counting from the first table row upwards.\n  { row: -3, col: 5, collapsible: true } // Add the button to the 3rd-level header of the 5th column - counting from the first table row upwards.\n]}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes in JavaScript\nDESCRIPTION: JavaScript implementation showing how to initialize Handsontable with custom cell classes and table configuration\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/formatting-cells/formatting-cells.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  ['A1', 'B1', 'C1', 'D1'],\n  ['A2', 'B2', 'C2', 'D2'],\n  ['A3', 'B3', 'C3', 'D3'],\n  ['A4', 'B4', 'C4', 'D4']\n];\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data,\n  className: 'custom-table',\n  cell: [\n    {\n      row: 0,\n      col: 0,\n      className: 'custom-cell'\n    }\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Full Column Configuration with Password Type in JavaScript\nDESCRIPTION: Complete example showing password type configuration with custom validator implementation\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customValidator(query, callback) {\n  // ...validator logic\n  callback(/* Pass `true` or `false` */);\n}\n\nconst hot = new Handsontable(container, {\n  columns: [{\n    renderer: Handsontable.renderers.PasswordRenderer,\n    editor: Handsontable.editors.PasswordEditor,\n    validator: undefined\n  }, {\n    renderer: Handsontable.renderers.TextRenderer,\n    editor: Handsontable.editors.TextEditor,\n    validator: customValidator\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Context Menu Options in React (JSX)\nDESCRIPTION: Example showing how to create custom context menu options in Handsontable with React. This implementation demonstrates adding user-defined menu items alongside built-in options for extended functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/context-menu/context-menu.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/context-menu/react/example4.jsx)\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Data Saving\nDESCRIPTION: React component implementation showing how to integrate Handsontable with data saving functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/saving-data/saving-data.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  const data = [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ];\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChange = (changes) => {\n    if (!changes) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    fetch('https://fake-api.com/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ changes })\n    })\n      .then(response => response.json())\n      .then(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"controls\">\n      <HotTable\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        afterChange={handleChange}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n      {isLoading && <div>Saving...</div>}\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: React Implementation of Dropdown Cell Type\nDESCRIPTION: Example showing how to use dropdown cell type in a React component with Handsontable, including component configuration and dropdown options setup.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/cell-types/dropdown-cell-type/react/example1.jsx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context Menu in Vue 3 Component\nDESCRIPTION: This JavaScript code defines a Vue 3 component that uses Handsontable with a custom context menu. It sets up the data, methods, and computed properties needed to customize the context menu functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-custom-context-menu-example/vue3-custom-context-menu-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport { createApp } from 'vue';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst app = createApp({\n  data() {\n    return {\n      hotData: [\n        ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n        ['2019', 10, 11, 12, 13],\n        ['2020', 20, 11, 14, 13],\n        ['2021', 30, 15, 12, 13]\n      ],\n    };\n  },\n  computed: {\n    hotSettings() {\n      return {\n        data: this.hotData,\n        colHeaders: true,\n        rowHeaders: true,\n        height: 'auto',\n        autoWrapRow: true,\n        autoWrapCol: true,\n        licenseKey: 'non-commercial-and-evaluation',\n        contextMenu: {\n          items: {\n            'row_above': {\n              name: 'Insert row above this one (custom name)',\n            },\n            'row_below': {},\n            'seperator': '---------',\n            'clear_custom': {\n              name: 'Clear all cells (custom)',\n              callback: function() {\n                this.clear();\n              }\n            }\n          }\n        },\n      };\n    }\n  }\n});\n\napp.component('HotTable', HotTable);\n\napp.mount('#example1');\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with Numeric Cell Type in JavaScript\nDESCRIPTION: Shows how to create a new Handsontable instance with a numeric cell type applied to all columns, and then retrieve the cell functions associated with that type.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-function/cell-function.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/styles/handsontable.css';\nimport 'handsontable/styles/ht-theme-main.css';\n\nconst container = document.querySelector('#container');\nconst hot = new Handsontable(container, {\n  columns: [{\n    // set a cell type for the entire grid\n    type: 'numeric'\n  }]\n});\n\n// get cell properties for cell [0, 0]\nconst cellProperties = hot.getCellMeta(0, 0);\n\ncellProperties.renderer; // numericRenderer\ncellProperties.editor; // NumericEditor\ncellProperties.validator; // numericValidator\ncellProperties.type; // numeric\n```\n\n----------------------------------------\n\nTITLE: Basic Column Hiding Configuration in JavaScript\nDESCRIPTION: Basic example showing how to enable column hiding functionality in Handsontable using the hiddenColumns option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: true,\n  colHeaders: true,\n  rowHeaders: true,\n  contextMenu: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting in React\nDESCRIPTION: Shows how to enable sorting by multiple columns in Handsontable using React. This configuration sorts data first by the first column in ascending order, then by the second column in descending order.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  // enable sorting by multiple columns\n  multiColumnSorting={{\n    initialConfig: [\n      // at initialization, sort data by the first column, in ascending order\n      {\n        column: 0,\n        sortOrder: 'asc',\n      },\n      // at initialization, sort data by the second column, in descending order\n      {\n        column: 1,\n        sortOrder: 'desc',\n      },\n    ],\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Cell Type in JavaScript\nDESCRIPTION: Example showing how to configure a select cell type in Handsontable using JavaScript. The code demonstrates setting up a data grid with select cells containing predefined options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/select-cell-type/select-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst data = [\n  ['2017', 'Honda', 10],\n  ['2018', 'Toyota', 20],\n  ['2019', 'Nissan', 30]\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  colHeaders: ['Year', 'Car', 'Rating'],\n  height: 'auto',\n  columns: [\n    {\n      type: 'select',\n      selectOptions: ['2017', '2018', '2019']\n    },\n    {\n      type: 'select',\n      selectOptions: ['Honda', 'Toyota', 'Nissan']\n    },\n    {}\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Using Handsontable Component in Angular HTML\nDESCRIPTION: Demonstrates how to use the Handsontable component in an Angular template. It sets up a basic table with column and row headers, and specifies the license key.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-installation/angular-installation.md#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ht-theme-main-dark-auto\">\n  <hot-table\n    [colHeaders]=\"true\"\n    [rowHeaders]=\"true\"\n    autoWrapRow={true}\n    autoWrapCol={true}\n    licenseKey=\"non-commercial-and-evaluation\">\n  </hot-table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Renderer Implementation in React\nDESCRIPTION: Example of implementing a custom renderer in a React Handsontable component\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-renderer/cell-renderer.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={someData}\n  columns={[{\n    renderer: 'my.custom'\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Autofill in All Directions in Handsontable (JavaScript)\nDESCRIPTION: Example demonstrating how to configure Handsontable with autofill functionality enabled in all directions. This allows users to drag the fill handle to repeat values from the selected cell in any direction.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport '/common/css/10x10.css';\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: createSpreadsheetData(4, 4),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nhot.setDataAtCell(3, 1, 30);\n```\n\n----------------------------------------\n\nTITLE: TypeScript React Implementation of Dropdown Cell Type\nDESCRIPTION: TypeScript version of the React implementation showing proper type definitions and configuration for dropdown cell type in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/cell-types/dropdown-cell-type/react/example1.tsx)\n```\n\n----------------------------------------\n\nTITLE: Enabling Column-Specific Filtering in JavaScript\nDESCRIPTION: JavaScript code that enables filtering only for specific columns in Handsontable by conditionally hiding filter options in the dropdown menu for other columns.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhandsontableInstance.updateSettings({\n  // enable filtering, for all columns\n  filters: true,\n  // enable the column menu, for all columns\n  // but display only the 'Filter by value' list and the 'OK' and 'Cancel' buttons\n  dropdownMenu: {\n    items: {\n      filter_by_value: {\n        // hide the 'Filter by value' list from all columns but the first one\n        hidden() {\n          return this.getSelectedRangeLast().to.col > 0;\n        },\n      },\n      filter_action_bar: {\n        // hide the 'OK' and 'Cancel' buttons from all columns but the first one\n        hidden() {\n          return this.getSelectedRangeLast().to.col > 0;\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Autofill in All Directions in Handsontable (React JSX)\nDESCRIPTION: React JSX implementation showcasing Handsontable's autofill functionality in all directions. This component renders a data grid where users can drag the fill handle to repeat values.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport '/common/css/10x10.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const hot = hotRef.current.hotInstance;\n\n    hot.setDataAtCell(3, 1, 30);\n  }, []);\n\n  return (\n    <HotTable\n      ref={hotRef}\n      data={createSpreadsheetData(4, 4)}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Custom Border Configuration\nDESCRIPTION: Implementation of custom cell borders using the customBorders plugin configuration\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/formatting-cells/formatting-cells.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3']\n  ],\n  customBorders: [\n    {\n      range: {\n        from: {\n          row: 1,\n          col: 1\n        },\n        to: {\n          row: 2,\n          col: 2\n        }\n      },\n      start: {\n        width: 2,\n        color: 'red'\n      },\n      end: {\n        width: 2,\n        color: 'red'\n      },\n      top: {\n        width: 2,\n        color: 'red'\n      },\n      bottom: {\n        width: 2,\n        color: 'red'\n      }\n    }\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Language Files with CommonJS in React\nDESCRIPTION: Demonstrates how to load and register a language dictionary using CommonJS in React. It requires Handsontable, the language dictionary, and sets the language in the HotTable props.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/language/language.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Handsontable = require('handsontable/base').default;\nconst { registerLanguageDictionary, deDE } = require('handsontable/i18n');\n\nregisterLanguageDictionary(deDE);\n\nconst App = () => {\n  return (\n    <HotTable\n      language={deDE.languageCode}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Validator in Handsontable JavaScript Configuration\nDESCRIPTION: Example of referencing a custom validator by its alias in Handsontable configuration options for JavaScript. This approach allows easy reuse of validation logic across different columns or tables.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#container')\nconst hot = new Handsontable(container, {\n  columns: [{\n    validator: 'my.custom'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Cell Alignment in React\nDESCRIPTION: Example of setting global horizontal text alignment using the className prop in React.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/text-alignment/text-alignment.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclassName=\"htCenter\"\n```\n\n----------------------------------------\n\nTITLE: Registering Handsontable Modules in Vue 2\nDESCRIPTION: Register the imported Handsontable modules to make them recognizable by Handsontable. This example registers the numeric cell type and UndoRedo plugin.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-modules/vue-modules.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregisterCellType(NumericCellType);\nregisterPlugin(UndoRedo);\n```\n\n----------------------------------------\n\nTITLE: Populating Select with Options in prepare() Method\nDESCRIPTION: Implementation of the prepare() method that populates the select element with options. It handles both array and object formats for selectOptions, and supports dynamic option generation via functions. This is called each time a cell with this editor is selected.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Create options in prepare() method\nprepare(row, col, prop, td, originalValue, cellProperties) {\n  // Remember to invoke parent's method\n  super.prepare(row, col, prop, td, originalValue, cellProperties);\n\n  const selectOptions = this.cellProperties.selectOptions;\n  let options;\n\n  if (typeof selectOptions === 'function') {\n    options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));\n  } else {\n    options = this.prepareOptions(selectOptions);\n  }\n\n  this.select.innerText = '';\n\n  Object.keys(options).forEach((key) => {\n    const optionElement = this.hot.rootDocument.createElement('OPTION');\n    optionElement.value = key;\n    optionElement.innerText = options[key];\n    this.select.appendChild(optionElement);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Merge Cells Configuration in JavaScript\nDESCRIPTION: Example showing how to initialize Handsontable with predefined merged cells by setting the mergeCells option to an array of cell configurations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/merge-cells/merge-cells.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmergeCells: [{ row: 1, col: 1, rowspan: 2, colspan: 2 }]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Invalid Cell Class Names for Specific Columns in React\nDESCRIPTION: Example of configuring different custom CSS class names for invalid cells on a per-column basis in React. This allows for different styling based on column type in React components.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ncolumns={[\n  { data: 'firstName', invalidCellClassName: 'myInvalidClass' },\n  { data: 'lastName', invalidCellClassName: 'myInvalidSecondClass' },\n  { data: 'address' }\n]}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell Properties in React Handsontable Component\nDESCRIPTION: Demonstrates how to access a Handsontable instance in a React component using refs, then retrieve cell metadata for a specific cell in the grid.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-function/cell-function.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleComponent = () => {\n  const hotRef = useRef(null);\n\n  useEffect(() => {\n    const hot = hotRef.current.hotInstance;\n\n    // get cell properties for cell [0, 0]\n    const cellProperties = hot.getCellMeta(0, 0);\n\n    cellProperties.renderer; // \"numeric\"\n    cellProperties.editor; // \"numeric\"\n    cellProperties.validator; // \"numeric\"\n    cellProperties.type; // \"numeric\"\n  });\n\n  return (\n    <HotTable\n      ref={hotRef}\n      // set a cell type for the entire grid\n      type=\"numeric\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Handsontable in Vue 2 Component\nDESCRIPTION: This snippet demonstrates how to use Handsontable in a Vue 2 component. It includes importing necessary modules, registering Handsontable modules, and setting up a basic table with sample data.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-installation/vue-installation.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div class=\"ht-theme-main-dark-auto\">\n    <hot-table :data=\"data\" :rowHeaders=\"true\" :colHeaders=\"true\"></hot-table>\n  </div>\n</template>\n\n<script>\n  import { HotTable } from '@handsontable/vue';\n  import { registerAllModules } from 'handsontable/registry';\n  import 'handsontable/styles/handsontable.min.css';\n  import 'handsontable/styles/ht-theme-main.min.css';\n\n  // register Handsontable's modules\n  registerAllModules();\n\n  export default {\n    data: function() {\n      return {\n        data: [\n          [\"\", \"Ford\", \"Volvo\", \"Toyota\", \"Honda\"],\n          [\"2016\", 10, 11, 12, 13],\n          [\"2017\", 20, 11, 14, 13],\n          [\"2018\", 30, 15, 12, 13]\n        ],\n      };\n    },\n    components: {\n      HotTable\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Translation Modules\nDESCRIPTION: Demonstrates how to import available translation modules for internationalizing Handsontable. Includes support for multiple languages and regions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  registerLanguageDictionary, // translations' registering function\n  arAR,\n  csCZ,\n  deCH,\n  deDE,\n  enUS,\n  esMX,\n  faIR,\n  frFR,\n  hrHR,\n  itIT,\n  jaJP,\n  koKR,\n  lvLV,\n  nbNO,\n  nlNL,\n  plPL,\n  ptBR,\n  ruRU,\n  srSP,\n  zhCN,\n  zhTW,\n} from 'handsontable/i18n';\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Trimming in React\nDESCRIPTION: Configuration to enable the TrimRows plugin in a React component using the HotTable component. This allows row trimming in React applications.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-trimming/row-trimming.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// enable the `TrimRows` plugin\n\n<HotTable\n  trimRows={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell Functions Using getCellMeta in JavaScript\nDESCRIPTION: Demonstrates how to access cell renderer, editor, validator, and type properties using the getCellMeta method on a Handsontable instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-function/cell-function.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// get cell properties for cell [0, 0]\nconst cellProperties = hot.getCellMeta(0, 0);\n\ncellProperties.renderer; // get cell renderer\ncellProperties.editor; // get cell editor\ncellProperties.validator; // get cell validator\ncellProperties.type; // get cell type\n```\n\n----------------------------------------\n\nTITLE: React Example Using Numeric Cell Type\nDESCRIPTION: Demonstrates how to use Handsontable's numeric cell type in a React application by importing and registering the cell type, then using it in a HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { HotTable } from '@handsontable/react-wrapper';\nimport {\n  registerCellType,\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nregisterCellType(NumericCellType);\n\nconst container = document.querySelector('#example1');\n\n<HotTable\n  columns={[\n    {\n      type: 'numeric'\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Manual Column Freezing in TypeScript\nDESCRIPTION: TypeScript version of manual column freezing implementation with type-safe configuration options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-freezing/column-freezing.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector<HTMLDivElement>('#example2');\n\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  rowHeaders: true,\n  colHeaders: true,\n  manualColumnFreeze: true,\n  contextMenu: true,\n  width: '100%',\n  height: 320,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Autofill with Auto Row Creation in Handsontable (React JSX)\nDESCRIPTION: React JSX implementation showcasing Handsontable's vertical-only autofill with automatic row creation. This component renders a data grid where users can drag the fill handle vertically, with new rows added automatically.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport '/common/css/10x10.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const hot = hotRef.current.hotInstance;\n\n    hot.setDataAtCell(3, 1, 30);\n  }, []);\n\n  return (\n    <HotTable\n      ref={hotRef}\n      data={createSpreadsheetData(4, 4)}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      fillHandle={{\n        direction: 'vertical',\n        autoInsertRow: true\n      }}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Importing Optional Handsontable Modules in Vue 2\nDESCRIPTION: Import optional Handsontable modules along with their registering functions. This example imports the numeric cell type and UndoRedo plugin modules.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-modules/vue-modules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  registerCellType, // cell types' registering function\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nimport {\n  registerPlugin, // plugins' registering function\n  UndoRedo,\n} from 'handsontable/plugins';\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Column Sorting in React\nDESCRIPTION: Configuration to enable sorting by multiple columns simultaneously in a Handsontable React component, allowing users to apply multiple sets of sort criteria at once.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  // enable sorting by multiple columns, for all columns\n  multiColumnSorting={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Security Policy for Handsontable on CDN\nDESCRIPTION: This HTML meta tag sets up a Content Security Policy (CSP) for Handsontable when hosted on a CDN (cdn.jsdelivr.net). It allows scripts and styles from both the app's origin and the CDN, with 'unsafe-inline' allowed for styles.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/security/security/security.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src 'self' cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' cdn.jsdelivr.net\">\n```\n\n----------------------------------------\n\nTITLE: Custom Editor TypeScript Implementation\nDESCRIPTION: Angular component implementation that defines a custom editor class extending Handsontable's default editor with placeholder support and custom initialization logic.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-custom-editor-example/angular-custom-editor-example.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { TextEditor } from 'handsontable/editors/textEditor';\nimport { HotTableModule } from '@handsontable/angular';\n\nclass CustomEditor extends TextEditor {\n  constructor(props) {\n    super(props);\n  }\n\n  createElements() {\n    super.createElements();\n\n    this.TEXTAREA = document.createElement('input');\n    this.TEXTAREA.setAttribute('placeholder', 'Custom placeholder');\n    this.textareaStyle = this.TEXTAREA.style;\n    this.div.appendChild(this.TEXTAREA);\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  customEditorComponent = CustomEditor;\n  dataset = [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Column Freezing in JavaScript\nDESCRIPTION: Implementation of user-triggered column freezing functionality using the manualColumnFreeze option, allowing users to freeze/unfreeze columns via context menu.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-freezing/column-freezing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\n\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  rowHeaders: true,\n  colHeaders: true,\n  manualColumnFreeze: true,\n  contextMenu: true,\n  width: '100%',\n  height: 320,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Vuex Store and Vue Component for Handsontable Integration\nDESCRIPTION: This JavaScript code sets up a Vuex store and a Vue component to manage the state of a Handsontable instance. It includes actions for swapping data and mutations for updating the store state. The Vue component uses the Handsontable component and binds to the Vuex store.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-vuex-example/vue-vuex-example.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { HotTable } from '@handsontable/vue';\nimport Handsontable from 'handsontable';\n\nVue.use(Vuex);\n\nconst store = new Vuex.Store({\n  state: {\n    hotData: Handsontable.helper.createSpreadsheetData(6, 10),\n    hotSettings: {\n      readOnly: false,\n    },\n  },\n  mutations: {\n    updateData(state, data) {\n      state.hotData = data;\n    },\n    updateSettings(state, settings) {\n      state.hotSettings = settings;\n    },\n  },\n  actions: {\n    swapData({ commit, state }) {\n      if (state.hotData.length === 6) {\n        commit('updateData', Handsontable.helper.createSpreadsheetData(10, 6));\n      } else {\n        commit('updateData', Handsontable.helper.createSpreadsheetData(6, 10));\n      }\n    },\n  },\n});\n\nnew Vue({\n  el: '#example1',\n  store,\n  data() {\n    return {\n      readOnly: false,\n    };\n  },\n  mounted() {\n    this.$store.commit('updateSettings', {\n      data: this.$store.state.hotData,\n      readOnly: false,\n      colHeaders: true,\n      rowHeaders: true,\n      height: 'auto',\n      licenseKey: 'non-commercial-and-evaluation',\n    });\n  },\n  methods: {\n    swapData() {\n      this.$store.dispatch('swapData');\n    },\n  },\n  watch: {\n    readOnly(val) {\n      this.$store.commit('updateSettings', {\n        ...this.$store.state.hotSettings,\n        readOnly: val,\n      });\n    },\n  },\n  computed: {\n    hotSettings() {\n      return this.$store.state.hotSettings;\n    },\n  },\n  components: {\n    HotTable,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Columns in Handsontable\nDESCRIPTION: This snippet shows how to make specific columns read-only while keeping others editable. It uses the columns configuration option to set the 'readOnly' property for particular columns and applies custom renderers for visual indication.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/disabled-cells/disabled-cells.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\n\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  columns: [\n    {},\n    {\n      readOnly: true\n    },\n    {},\n    {},\n    {}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using PasswordEditor in Handsontable Configuration (JavaScript)\nDESCRIPTION: Demonstrates how to use the custom PasswordEditor in a Handsontable instance configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#container')\nconst hot = new Handsontable(container, {\n  columns: [\n    {\n      type: 'text'\n    },\n    {\n      editor: PasswordEditor\n      // If you want to use string 'password' instead of passing\n      // the actual editor class check out section \"Registering editor\"\n    }\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Freezing in JavaScript\nDESCRIPTION: Example showing how to configure fixed rows in Handsontable using JavaScript. Sets up two fixed rows at the top using fixedRowsTop configuration option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-freezing/row-freezing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@/content/guides/rows/row-freezing/javascript/example1.js\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable Vue 3 Wrapper via npm\nDESCRIPTION: Command to install Handsontable and its Vue 3 wrapper using npm. This is the recommended method for integrating Handsontable into a Vue 3 project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue3/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/vue3\n```\n\n----------------------------------------\n\nTITLE: Quick Filtering in JavaScript\nDESCRIPTION: Implements an external quick filter for searching a specific phrase in a column using JavaScript. It uses the filters.addCondition() and filters.filter() methods.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst filters = hot.getPlugin('filters');\nfilters.addCondition(1, 'contains', [phrase]);\nfilters.filter();\n```\n\n----------------------------------------\n\nTITLE: Configuring Translations in Angular Component for Handsontable\nDESCRIPTION: Angular component implementation that sets up translation support for Handsontable. It initializes sample data and provides a method to change the language dynamically.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-setting-up-a-translation/angular-setting-up-a-translation.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@angular/core';\n\nimport { registerAllModules } from 'handsontable/registry';\nimport { registerLanguageDictionary, deDE, enUS, plPL, jaJP } from 'handsontable/i18n';\n\nregisterAllModules();\n\nregisterLanguageDictionary(deDE);\nregisterLanguageDictionary(enUS);\nregisterLanguageDictionary(plPL);\nregisterLanguageDictionary(jaJP);\n\n@Component({\n  selector: 'example-component',\n  templateUrl: './example.component.html',\n})\nexport class ExampleComponent {\n  selectedLanguage = 'en-US';\n  data = [\n    [1, 100],\n    [2, 200],\n    [3, 300],\n    [4, 400],\n    [5, 500],\n    [6, 600],\n    [7, 700],\n    [8, 800],\n    [9, 900],\n    [10, 1000]\n  ];\n\n  setLanguage(languageCode) {\n    this.selectedLanguage = languageCode;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data as Blob Object in React (JSX)\nDESCRIPTION: React implementation for exporting grid data as a JavaScript Blob object. It uses a reference to the HotTable component to access the Handsontable instance and export plugin.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { useRef } from 'react';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef(null);\n\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  const exportBlob = () => {\n    // The `current` property contains the HotTable instance\n    const hot = hotRef.current.hotInstance;\n    // Get the plugin from the Handsontable instance\n    const exportPlugin = hot.getPlugin('exportFile');\n\n    const blob = exportPlugin.exportAsBlob('csv', {\n      bom: false,\n      columnDelimiter: ',',\n      columnHeaders: false,\n      exportHiddenColumns: true,\n      exportHiddenRows: true,\n      mimeType: 'text/csv',\n      rowDelimiter: '\\r\\n',\n      rowHeaders: true\n    });\n\n    console.log(blob);\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={exportBlob} className=\"button button--primary\">Export as Blob (see browser console)</button>\n      </div>\n      <br/>\n\n      <HotTable\n        ref={hotRef}\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        autoWrapRow={true}\n        autoWrapCol={true}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Shortcut in Handsontable\nDESCRIPTION: Shows how to add a basic custom shortcut to a context using the addShortcut method. This example adds an Enter key shortcut to the grid context with a specific group ID.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/navigation/custom-shortcuts/custom-shortcuts.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gridContext = hot.getShortcutManager().getContext('grid');\n\ngridContext.addShortcut({\n  group: 'group_ID', // a string value; the user can decide on its name. \n  // Each shortcut should be assigned to the group.\n  keys: [['enter']],\n  callback: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Building Angular Package\nDESCRIPTION: Command to build the @handsontable/angular package for multiple module systems. This places the output in the /wrappers/angular/dist/hot-table/ directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Method for Custom Editor in JavaScript\nDESCRIPTION: Example implementation of the focus method for a custom editor class. This method focuses on the editor input element.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomEditor extends TextEditor {\n  focus() {\n    this.editorInput.focus();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Editor HTML Template in Angular\nDESCRIPTION: HTML template that sets up a Handsontable instance with custom editor configuration and data binding using Angular directives.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-custom-editor-example/angular-custom-editor-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<hot-table [data]=\"dataset\" [colHeaders]=\"true\" [rowHeaders]=\"true\" height=\"200\" licenseKey=\"non-commercial-and-evaluation\">\n  <hot-column [editor]=\"customEditorComponent\"></hot-column>\n  <hot-column></hot-column>\n  <hot-column></hot-column>\n  <hot-column></hot-column>\n</hot-table>\n```\n\n----------------------------------------\n\nTITLE: Importing Validators from Handsontable\nDESCRIPTION: Imports validator registration function and various validator functions. Validators are used to check if cell values meet specific criteria before accepting changes.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerValidator } from 'handsontable/validators/registry';\nimport { autocompleteValidator } from 'handsontable/validators/autocompleteValidator';\nimport { dateValidator } from 'handsontable/validators/dateValidator';\nimport { dropdownValidator } from 'handsontable/validators/dropdownValidator';\nimport { numericValidator } from 'handsontable/validators/numericValidator';\nimport { timeValidator } from 'handsontable/validators/timeValidator';\n```\n\n----------------------------------------\n\nTITLE: Setting License Key in React Component Props\nDESCRIPTION: Demonstrates how to provide a Handsontable license key as a prop in a React component. The license key is passed as a string attribute.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/technical-specification/software-license/software-license.md#2025-04-10_snippet_1\n\nLANGUAGE: react\nCODE:\n```\nlicenseKey=\"00000-00000-00000-00000-00000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Sort Order in JavaScript\nDESCRIPTION: Demonstrates how to set an initial sort order for Handsontable using the columnSorting option. This example sorts data by the first column in ascending order.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  columnSorting: {\n    // at initialization, sort data by the first column, in ascending order\n    initialConfig: {\n      column: 0,\n      sortOrder: 'asc', // for descending order, use `'desc'`\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Blocking Keyboard Shortcuts with beforeKeyDown Hook in React\nDESCRIPTION: Shows how to block specific keyboard shortcuts using the beforeKeyDown prop in React components. This example prevents the Enter key from functioning in a React implementation of Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/navigation/custom-shortcuts/custom-shortcuts.md#2025-04-10_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  beforeKeyDown={(event) => {\n    // the `Enter` shortcut won't work\n    if (event.key === 'enter') {\n      return false;\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Language Files with ES Modules in React\nDESCRIPTION: Shows how to load and register a language dictionary using ES modules in React. It imports Handsontable, HotTable component, the language dictionary, and sets the language in the HotTable props.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/language/language.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { HotTable } from '@handsontable/react-wrapper';\nimport { registerLanguageDictionary, deDE } from 'handsontable/i18n';\n\nregisterLanguageDictionary(deDE);\n\nconst App = () => {\n  return (\n    <HotTable\n      language={deDE.languageCode}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrow Key Navigation in Custom Editor\nDESCRIPTION: Event handler implementation for Up/Down arrow keys to change selected values in a select-type editor while preventing default cell navigation behavior.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nonBeforeKeyDown() {\n  const previousOptionIndex = this.select.selectedIndex - 1;\n  const nextOptionIndex = this.select.selectedIndex + 1;\n\n  switch (event.keyCode) {\n    case 38: // Arrow Up\n      if (previousOptionIndex >= 0) {\n        this.select[previousOptionIndex].selected = true;\n      }\n\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      break;\n\n    case 40: // Arrow Down\n      if (nextOptionIndex <= this.select.length - 1){\n        this.select[nextOptionIndex].selected=true;\n      }\n\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      break;\n\n    default:\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Module Registration Example\nDESCRIPTION: Complete example showing how to import and register a translation module (Polish language) with Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport {\n  registerLanguageDictionary,\n  plPL,\n} from 'handsontable/i18n';\n\nregisterLanguageDictionary(plPL);\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable Theme CSS Files with ESM\nDESCRIPTION: Shows how to import the required base and theme CSS files using ECMAScript modules (ESM). Both the structural styles and theme-specific styles must be imported for proper rendering.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM (ECMAScript modules)\nimport 'handsontable/styles/handsontable.min.css';\nimport 'handsontable/styles/ht-theme-main.min.css';\n\n// CommonJS\nrequire('handsontable/styles/handsontable.min.css');\nrequire('handsontable/styles/ht-theme-main.min.css');\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 UMD Format\nDESCRIPTION: Command to create Vue 2 wrapper bundles compatible with Universal Module Definition. Creates both standard and map files in the /wrappers/vue/dist/ directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:umd\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Template Definition in Vue 3\nDESCRIPTION: HTML template defining the structure for a Vue 3 component that implements a Handsontable data grid with custom editor functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-custom-editor-example/vue3-custom-editor-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\">\n  <hot-table :settings=\"hotSettings\">\n  </hot-table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting RTL Layout Direction in JavaScript\nDESCRIPTION: Demonstrates how to explicitly set right-to-left layout direction in Handsontable regardless of document settings.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  layoutDirection: 'rtl',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Handsontable in a Vue 3 Component\nDESCRIPTION: A complete Vue 3 component example demonstrating how to use Handsontable. It includes importing necessary modules, registering components, setting up data, and configuring the data grid with various options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue3/README.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"ht-theme-main-dark-auto\">\n    <hot-table\n      :data=\"data\"\n      :row-headers=true\n      :col-headers=true\n      :navigable-headers=true\n      :tab-navigation=true\n      :multi-column-sorting=true\n      header-class-name=\"htLeft\"\n      license-key=\"non-commercial-and-evaluation\"\n    >\n      <hot-column title=\"Company\" data=\"company\" width=100></hot-column>\n      <hot-column title=\"Country\" data=\"country\" width=170 type=\"dropdown\" :source=\"['United Kingdom', 'Japan', 'United States']\"></hot-column>\n      <hot-column title=\"Rating\" data=\"rating\" width=100 type=\"numeric\"></hot-column>\n    </hot-table>\n  </div>\n</template>\n\n<script>\n  import { defineComponent } from 'vue';\n  import { HotTable, HotColumn } from '@handsontable/vue3';\n  import { registerAllModules } from 'handsontable/registry';\n  import 'handsontable/styles/handsontable.min.css';\n  import 'handsontable/styles/ht-theme-main.min.css';\n\n  // register Handsontable's modules\n  registerAllModules();\n\n  const ExampleComponent = defineComponent({\n    data() {\n      return {\n        data: [\n          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },\n          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },\n          { company: 'Meeveo', country: 'United States', rating: 4.6 },\n        ]\n      };\n    },\n    components: {\n      HotTable,\n      HotColumn,\n    }\n  });\n\n  export default ExampleComponent;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Handsontable Cell Type Example - JavaScript\nDESCRIPTION: Demonstrates how to implement a basic Handsontable cell type with a spreadsheet editor popup in vanilla JavaScript.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/handsontable-cell-type/handsontable-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/cell-types/handsontable-cell-type/javascript/example1.js)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cell Type in React\nDESCRIPTION: Example of using a registered custom cell type in React Handsontable component column configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ncolumns={[{\n  type: 'custom'\n}]}\n```\n\n----------------------------------------\n\nTITLE: Column Moving with Default Headers - JavaScript\nDESCRIPTION: Shows how column moving works with default column headers (A, B, C) which stay in place during column movement.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-moving/column-moving.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst example2 = document.querySelector('#example2');\n\nconst hot = new Handsontable(example2, {\n  data: [\n    ['Tesla', 2017, 'black', 'black'],\n    ['Nissan', 2018, 'blue', 'blue'],\n    ['Chrysler', 2019, 'yellow', 'black'],\n    ['Volvo', 2020, 'white', 'gray']\n  ],\n  colHeaders: true,\n  manualColumnMove: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: New Index Mapping in JavaScript\nDESCRIPTION: Updated approach using rowIndexMapper to modify row indexes in Handsontable 8.0\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhotInstance.rowIndexMapper.moveIndexes([1, 0], 0);\nhotInstance.render();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Context Menu for Column Hiding\nDESCRIPTION: Demonstrates how to enable context menu with automatic column hiding options integration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: {\n    columns: [1, 2, 5],\n    indicators: true\n  },\n  contextMenu: true,\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Language Dictionary Registration from Handsontable\nDESCRIPTION: Imports the function to register language dictionaries for internationalization in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerLanguageDictionary } from 'handsontable/i18n/registry';\n```\n\n----------------------------------------\n\nTITLE: Custom Column Menu Configuration in React with JSX\nDESCRIPTION: React JSX implementation showing how to customize column menu options. The dropdownMenu property of HotTable is configured with specific options including custom items with callbacks.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-menu/column-menu.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  // initialize the data array\n  const data = [\n    ['Tesla', 2017, 'black', 'black'],\n    ['Nissan', 2018, 'blue', 'blue'],\n    ['Chrysler', 2019, 'yellow', 'black'],\n    ['Volvo', 2020, 'yellow', 'gray']\n  ];\n\n  return (\n    <HotTable\n      data={data}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      autoWrapRow={true}\n      autoWrapCol={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n      // enable and configure dropdown menu\n      dropdownMenu={[\n        'alignment',\n        'filter_by_condition',\n        'filter_by_value',\n        'filter_action_bar',\n        '---------',\n        'col_left',\n        'col_right',\n        'remove_col',\n        '---------',\n        {\n          key: 'custom1',\n          name: 'Custom option',\n          callback() {\n            alert('custom1 clicked');\n          }\n        },\n        {\n          key: 'custom2',\n          name: 'Custom option 2',\n          callback() {\n            alert('custom2 clicked');\n          }\n        },\n        'hidden_columns_hide', // shows 'Hide column' option\n        'hidden_columns_show' // shows 'Show hidden columns' option\n      ]}\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data as String in React (TSX)\nDESCRIPTION: TypeScript React implementation for exporting grid data as a string. It uses TypeScript to properly type the HotTable reference and other components, ensuring type safety.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { useRef } from 'react';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef<HotTable>(null);\n\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  const exportString = () => {\n    // The `current` property contains the HotTable instance\n    const hot = hotRef.current.hotInstance;\n    // Get the plugin from the Handsontable instance\n    const exportPlugin = hot.getPlugin('exportFile');\n\n    const csvContent = exportPlugin.exportAsString('csv', {\n      bom: false,\n      columnDelimiter: ',',\n      columnHeaders: false,\n      exportHiddenColumns: true,\n      exportHiddenRows: true,\n      rowDelimiter: '\\r\\n',\n      rowHeaders: true\n    });\n\n    console.log(csvContent);\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={exportString} className=\"button button--primary\">Export as string (see browser console)</button>\n      </div>\n      <br/>\n\n      <HotTable\n        ref={hotRef}\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        autoWrapRow={true}\n        autoWrapCol={true}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 Minified Bundles\nDESCRIPTION: Command to create minified Vue 2 wrapper bundles. Creates both minified and map files in the /wrappers/vue/dist/ directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:min\n```\n\n----------------------------------------\n\nTITLE: Inline Style Formatting with Cell Renderer\nDESCRIPTION: Example showing how to apply inline styles to cells using a custom renderer function\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/formatting-cells/formatting-cells.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3']\n  ],\n  renderer(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n\n    if (row === 0 && col === 0) {\n      td.style.fontWeight = 'bold';\n      td.style.color = 'green';\n      td.style.background = '#CEC';\n    }\n  },\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Key Bindings with beforeKeyDown in Handsontable\nDESCRIPTION: This code snippet demonstrates how to use the beforeKeyDown callback in Handsontable to modify key bindings for Delete, Backspace, and Enter keys. It implements custom behavior for deleting cells and inserting new rows.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/events-and-hooks/events-and-hooks.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation',\n  beforeKeyDown: function(event) {\n    const selection = this.getSelectedRangeLast();\n\n    if (!selection) {\n      return;\n    }\n\n    // DELETE or BACKSPACE\n    if (event.keyCode === 8 || event.keyCode === 46) {\n      event.stopImmediatePropagation();\n      // Get the first cell of the selected range\n      const startRow = selection.from.row;\n      const startCol = selection.from.col;\n      // Get the data from the selected column\n      const columnData = this.getDataAtCol(startCol);\n      // Remove the value of the current cell\n      columnData.splice(startRow, 1);\n      // Add a new value at the end of the column\n      columnData.push('');\n      // Set the updated data to the column\n      this.populateFromArray(0, startCol, [columnData], undefined, undefined, 'beforeKeyDown');\n    }\n\n    // ENTER\n    if (event.keyCode === 13 && !this.isEditing()) {\n      event.stopImmediatePropagation();\n      // Get the first cell of the selected range\n      const startRow = selection.from.row;\n      const startCol = selection.from.col;\n      // Get the data from the selected column\n      const columnData = this.getDataAtCol(startCol);\n      // Insert an empty string at the position of the current cell\n      columnData.splice(startRow, 0, '');\n      // Remove the last element of the column\n      columnData.pop();\n      // Set the updated data to the column\n      this.populateFromArray(0, startCol, [columnData], undefined, undefined, 'beforeKeyDown');\n    }\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable';\n\nconst container = document.querySelector('#example2');\n\nif (container) {\n  const hot = new Handsontable(container, {\n    data: Handsontable.helper.createSpreadsheetData(5, 5),\n    colHeaders: true,\n    rowHeaders: true,\n    height: 'auto',\n    licenseKey: 'non-commercial-and-evaluation',\n    beforeKeyDown: function(this: Handsontable, event: KeyboardEvent) {\n      const selection = this.getSelectedRangeLast();\n\n      if (!selection) {\n        return;\n      }\n\n      // DELETE or BACKSPACE\n      if (event.keyCode === 8 || event.keyCode === 46) {\n        event.stopImmediatePropagation();\n        // Get the first cell of the selected range\n        const startRow = selection.from.row;\n        const startCol = selection.from.col;\n        // Get the data from the selected column\n        const columnData = this.getDataAtCol(startCol);\n        // Remove the value of the current cell\n        columnData.splice(startRow, 1);\n        // Add a new value at the end of the column\n        columnData.push('');\n        // Set the updated data to the column\n        this.populateFromArray(0, startCol, [columnData], undefined, undefined, 'beforeKeyDown');\n      }\n\n      // ENTER\n      if (event.keyCode === 13 && !this.isEditing()) {\n        event.stopImmediatePropagation();\n        // Get the first cell of the selected range\n        const startRow = selection.from.row;\n        const startCol = selection.from.col;\n        // Get the data from the selected column\n        const columnData = this.getDataAtCol(startCol);\n        // Insert an empty string at the position of the current cell\n        columnData.splice(startRow, 0, '');\n        // Remove the last element of the column\n        columnData.pop();\n        // Set the updated data to the column\n        this.populateFromArray(0, startCol, [columnData], undefined, undefined, 'beforeKeyDown');\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Module Registration Example\nDESCRIPTION: Complete example showing how to import and register a plugin module (ContextMenu) with Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport {\n  registerPlugin,\n  ContextMenu,\n} from 'handsontable/plugins';\n\nregisterPlugin(ContextMenu);\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering a Single Cell Type (NumericCellType)\nDESCRIPTION: Demonstrates importing the base module along with a specific cell type (NumericCellType) and registering it using the registerCellType function.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport {\n  registerCellType,\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nregisterCellType(NumericCellType);\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Column Sorting in JavaScript\nDESCRIPTION: Basic configuration to enable row sorting for all columns in a Handsontable instance using the columnSorting option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst configurationOptions = {\n  // enable sorting for all columns\n  columnSorting: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keys in Handsontable Translation Dictionary\nDESCRIPTION: This example shows how to extend an existing language dictionary with custom keys. It retrieves the en-US dictionary, adds a custom key, re-registers the dictionary, and then demonstrates how to access the custom translation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/language/language.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst enUSDictionary = Handsontable.languages.getLanguageDictionary('en-US');\n\nenUSDictionary.customKey = 'Hello world';\n\nHandsontable.languages.registerLanguageDictionary(enUSDictionary); // re-registration\nHandsontable.languages.getTranslatedPhrase('en-US', 'customKey'); // 'Hello world'\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Moving in React with TypeScript\nDESCRIPTION: This example shows how to implement row moving functionality in a React application using Handsontable with TypeScript. It demonstrates the proper component configuration to enable manual row reordering.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-moving/row-moving.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/rows/row-moving/react/example1.tsx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendar Editor Methods in JavaScript\nDESCRIPTION: Example implementation of getValue and setValue methods for a custom CalendarEditor class. These methods interact with a hypothetical calendar object to get and set dates.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass CalendarEditor extends TextEditor {\n  constructor(hotInstance) {\n    super(hotInstance);\n  }\n\n  getValue() {\n    // returns currently selected date, for example \"2023/09/15\"\n    return calendar.getDate();\n  }\n\n  setValue(newValue) {\n    // highlights given date on calendar\n    calendar.highlightDate(newValue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Custom Cell Type Properties in JavaScript\nDESCRIPTION: Shows the equivalent explicit property configuration when using a custom cell type in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [{\n  editor: false,\n  renderer: Handsontable.renderers.TextRenderer,\n  className: 'my-cell',\n  readOnly: true,\n  myCustomProperty: 'foo'\n}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo and Redo in TypeScript with Handsontable\nDESCRIPTION: TypeScript implementation of the undo and redo functionality in a Handsontable data grid. This provides the same functionality as the JavaScript example but with type definitions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/undo-redo/undo-redo.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/undo-redo/javascript/example.ts)\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 UMD Format\nDESCRIPTION: Command to create Vue 3 wrapper bundles compatible with Universal Module Definition. Creates both standard and map files in the /wrappers/vue3/dist/ directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:umd\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Autofill with Auto Row Creation in Handsontable (JavaScript)\nDESCRIPTION: Example demonstrating how to configure Handsontable with vertical-only autofill and automatic row creation. This setup restricts the fill handle to move only vertically and adds new rows when dragging beyond the table's boundaries.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport '/common/css/10x10.css';\n\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: createSpreadsheetData(4, 4),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  fillHandle: {\n    direction: 'vertical',\n    autoInsertRow: true\n  },\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nhot.setDataAtCell(3, 1, 30);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Menu in Vue 3 HTML Template\nDESCRIPTION: This HTML snippet sets up the structure for a Vue 3 component that uses Handsontable with a custom context menu. It includes a div with an id of 'example1' and uses the HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-custom-context-menu-example/vue3-custom-context-menu-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\">\n  <HotTable\n    :settings=\"hotSettings\"\n  >\n  </HotTable>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Handsontable in Vue Component\nDESCRIPTION: Complete Vue component example showing how to implement Handsontable data grid with basic configuration and column definitions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/README.md#2025-04-10_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"ht-theme-main-dark-auto\">\n    <hot-table\n      :data=\"data\"\n      :row-headers=true\n      :col-headers=true\n      :navigable-headers=true\n      :tab-navigation=true\n      :multi-column-sorting=true\n      header-class-name=\"htLeft\"\n      license-key=\"non-commercial-and-evaluation\"\n    >\n      <hot-column title=\"Company\" data=\"company\" width=100></hot-column>\n      <hot-column title=\"Country\" data=\"country\" width=170 type=\"dropdown\" :source=\"['United Kingdom', 'Japan', 'United States']\"></hot-column>\n      <hot-column title=\"Rating\" data=\"rating\" width=100 type=\"numeric\"></hot-column>\n    </hot-table>\n  </div>\n</template>\n\n<script>\n  import { HotTable, HotColumn } from '@handsontable/vue';\n  import { registerAllModules } from 'handsontable/registry';\n  import 'handsontable/styles/handsontable.min.css';\n  import 'handsontable/styles/ht-theme-main.min.css';\n\n  // register Handsontable's modules\n  registerAllModules();\n\n  export default {\n    data() {\n      return {\n        data: [\n          { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },\n          { company: 'Zoomzone', country: 'Japan', rating: 4.5 },\n          { company: 'Meeveo', country: 'United States', rating: 4.6 },\n        ]\n      };\n    },\n    components: {\n      HotTable,\n      HotColumn,\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling UI Indicators for Hidden Columns\nDESCRIPTION: Shows how to enable visual indicators for hidden columns by setting the indicators property to true.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: {\n    columns: [1, 2, 5],\n    indicators: true\n  },\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Options in JavaScript\nDESCRIPTION: Example of configuring individual columns using the columns option in JavaScript. This demonstrates how to make specific columns read-only.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/configuration-options/configuration-options.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  columns: [\n    {},\n    {},\n    // column options, apply to each cell of the third (by physical index) column\n    {\n      readOnly: true,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Theme in React Component\nDESCRIPTION: Shows how to set the theme for a Handsontable component in React using the themeName prop. This applies the auto dark mode of the main theme.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  themeName=\"ht-theme-main-dark-auto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Summary Source and Destination\nDESCRIPTION: This snippet demonstrates how to configure the source column and destination cell for column summaries. It sets up two summaries for different columns and specifies where to display the results.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-summary/column-summary.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnSummary: [\n  {\n    sourceColumn: 0,\n    type: 'sum',\n    // set this column summary to display its result in cell (4, 0)\n    destinationRow: 4,\n    destinationColumn: 0\n  },\n  {\n    sourceColumn: 1,\n    type: 'min',\n    // set this column summary to display its result in cell (4, 1)\n    destinationRow: 4,\n    destinationColumn: 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable in Vue 2 Component\nDESCRIPTION: JavaScript code that initializes a Vue 2 application with Handsontable. It creates a new Vue instance, imports the HotTable component, and configures the data grid with sample data and settings.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-simple-example/vue-simple-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport { HotTable } from '@handsontable/vue';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.css';\n\n// register all Handsontable modules\nregisterAllModules();\n\nnew Vue({\n  el: '#example1',\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['A1', 'B1', 'C1', 'D1', 'E1'],\n          ['A2', 'B2', 'C2', 'D2', 'E2'],\n          ['A3', 'B3', 'C3', 'D3', 'E3'],\n          ['A4', 'B4', 'C4', 'D4', 'E4'],\n          ['A5', 'B5', 'C5', 'D5', 'E5'],\n        ],\n        colHeaders: true,\n        height: 'auto',\n        autoWrapRow: true,\n        autoWrapCol: true,\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  },\n  template: `\n    <hot-table :settings=\"hotSettings\"></hot-table>\n  `\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Password Cell Type Implementation in React\nDESCRIPTION: Shows how to implement a password cell type in a React component using Handsontable. This implementation masks confidential values while maintaining the actual data in the data source as plain text.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/password-cell-type/password-cell-type.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/react/example1.jsx)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/react/example1.tsx)\n```\n\n----------------------------------------\n\nTITLE: Complete Vue 3 Handsontable Module Integration\nDESCRIPTION: Complete example showing the full integration of Handsontable modules in a Vue 3 application including app initialization.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-modules/vue3-modules.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\n\nimport Handsontable from 'handsontable/base';\n\nimport {\n  registerCellType,\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nimport {\n  registerPlugin,\n  UndoRedo,\n} from 'handsontable/plugins';\n\nregisterCellType(NumericCellType);\nregisterPlugin(UndoRedo);\n\ncreateApp(App).use(router).mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the local development server on port 8080\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Autocorrection in React\nDESCRIPTION: This snippet demonstrates how to enable or disable automatic correction of invalid dates in Handsontable using React configuration syntax.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/date-cell-type/date-cell-type.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ndateFormat={'YYYY-MM-DD'}\n\n// default behavior\n// date entered as `30/12/2022` will be invalid\ncorrectFormat={false}\n\n// date entered as `30/12/2022` will be corrected to `2022/12/30`\ncorrectFormat={true}\n```\n\n----------------------------------------\n\nTITLE: Autofill in All Directions in Handsontable (TypeScript)\nDESCRIPTION: TypeScript implementation of Handsontable with autofill functionality enabled in all directions. This allows users to drag the fill handle to repeat values from the selected cell in any direction.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport { HyperFormula } from 'hyperformula';\nimport Handsontable from 'handsontable';\nimport '/common/css/10x10.css';\n\nconst container = document.querySelector('#example1');\n\nconst hot = new Handsontable(container as HTMLElement, {\n  data: createSpreadsheetData(4, 4),\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nhot.setDataAtCell(3, 1, 30);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Plugin in JavaScript\nDESCRIPTION: Example of initializing Handsontable with a custom plugin in JavaScript, showing different ways to enable and configure the plugin.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-plugins/custom-plugins.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport { CustomPlugin } from './customPlugin';\n\nconst hotInstance = new Handsontable(container, {\n  // Pass `true` to enable the plugin with default options.\n  [CustomPlugin.PLUGIN_KEY]: true,\n  // You can also enable the plugin by passing an object with options.\n  [CustomPlugin.PLUGIN_KEY]: {\n    msg: 'user-defined message',\n  },\n  // You can also initialize the plugin without enabling it at the beginning.\n  [CustomPlugin.PLUGIN_KEY]: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Handsontable Component in Vue 3 HTML Template\nDESCRIPTION: This HTML snippet defines the structure for rendering the Handsontable component in a Vue 3 application. It creates a div element with an id of 'example1' where the Handsontable component will be rendered.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-simple-example/vue3-simple-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Enabling CollapsibleColumns and HiddenColumns Plugins in React (Post-8.0.0)\nDESCRIPTION: Updated React configuration for enabling CollapsibleColumns and HiddenColumns plugins in Handsontable 8.0.0+. HiddenColumns must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\ncollapsibleColumns={true}\nhiddenColumns={true}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Invalid Cell Class Name in React Handsontable\nDESCRIPTION: Example of configuring a custom CSS class name for invalid cells in a React Handsontable component. This provides styling control for cells that fail validation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ninvalidCellClassName=\"myInvalidClass\"\n```\n\n----------------------------------------\n\nTITLE: Configuring and Interacting with Handsontable in Vue 3\nDESCRIPTION: JavaScript code for a Vue 3 component that sets up a Handsontable instance and provides methods to interact with it. It includes configuration for the table, data loading, and methods to manipulate the table's data programmatically.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-hot-reference/vue3-hot-reference.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport default {\n  name: 'ExampleComponent',\n  data() {\n    return {\n      hotSettings: {\n        startRows: 5,\n        startCols: 5,\n        colHeaders: true,\n        minSpareRows: 1,\n        contextMenu: true,\n        licenseKey: 'non-commercial-and-evaluation'\n      },\n      hotData: null\n    };\n  },\n  components: {\n    HotTable\n  },\n  methods: {\n    loadData() {\n      const hotInstance = this.$refs.hotTableComponent.hotInstance;\n\n      // Generate new data\n      this.hotData = [\n        ['A1', 'B1', 'C1', 'D1', 'E1'],\n        ['A2', 'B2', 'C2', 'D2', 'E2'],\n        ['A3', 'B3', 'C3', 'D3', 'E3'],\n        ['A4', 'B4', 'C4', 'D4', 'E4'],\n        ['A5', 'B5', 'C5', 'D5', 'E5']\n      ];\n\n      hotInstance.loadData(this.hotData);\n    },\n    clearData() {\n      const hotInstance = this.$refs.hotTableComponent.hotInstance;\n\n      hotInstance.clear();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Handsontable in Angular TypeScript Component\nDESCRIPTION: TypeScript code for the Angular component that implements Handsontable. It imports necessary modules, configures the component with sample data, and sets up the component structure.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-simple-example/angular-simple-example.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { HotTableModule } from '@handsontable/angular';\nimport { registerAllModules } from 'handsontable/registry';\nimport { getData } from './data.js';\n\n// register Handsontable's modules\nregisterAllModules();\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <div class=\"example-container\">\n      <div id=\"example1\">\n        <hot-table\n          [data]=\"dataset\"\n          [colHeaders]=\"true\"\n          [rowHeaders]=\"true\"\n          height=\"auto\"\n          licenseKey=\"non-commercial-and-evaluation\"\n        >\n        </hot-table>\n      </div>\n    </div>\n  `,\n  standalone: true,\n  imports: [HotTableModule],\n})\nexport class AppComponent {\n  dataset = getData();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Implementation Changes\nDESCRIPTION: Demonstrates the transition from class-based to function-based custom editors using the useHotEditor hook.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-14.6-to-15.0/migrating-from-14.6-to-15.0.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass EditorComponent extends BaseEditorComponent {\\n  // ...\\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst EditorComponent = () => {\\n  // ...\\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useHotEditor } from '@handsontable/react-wrapper';\\n\\nconst EditorComponent = () => {\\n  const { value, setValue, finishEditing } = useHotEditor({\\n    onOpen: () => {\\n      // Open logic\\n    },\\n    onClose: () => {\\n      // Close logic\\n    },\\n  });\\n\\n  // Component logic here\\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\\n  <div>\\n    <button onClick={finishEditing}>Apply</button>\\n  </div>\\n);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HotColumn width={250}>\\n  <EditorComponent hot-editor />\\n</HotColumn>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HotColumn width={250} editor={EditorComponent} />\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Demo\nDESCRIPTION: Command to launch the local development server on port 8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Vertical-only Autofill with Auto Row Creation in Handsontable (React TSX)\nDESCRIPTION: React TypeScript implementation showcasing Handsontable's vertical-only autofill with automatic row creation. This strongly-typed component renders a data grid where users can drag the fill handle vertically, with new rows added automatically.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/autofill-values/autofill-values.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { createSpreadsheetData } from '/common/helper/data.mjs';\nimport 'handsontable/dist/handsontable.full.min.css';\nimport '/common/css/10x10.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = React.useRef<HotTable>(null);\n\n  React.useEffect(() => {\n    const hot = hotRef.current?.hotInstance;\n\n    hot?.setDataAtCell(3, 1, 30);\n  }, []);\n\n  return (\n    <HotTable\n      ref={hotRef}\n      data={createSpreadsheetData(4, 4)}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      fillHandle={{\n        direction: 'vertical',\n        autoInsertRow: true\n      }}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Row Headers Implementation in React JSX\nDESCRIPTION: React component implementation showing how to set up Handsontable with row headers and row binding functionality using JSX.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-header/row-header.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  return (\n    <HotTable\n      data={data}\n      rowHeaders={true}\n      colHeaders={true}\n      height=\"auto\"\n      manualRowMove={true}\n      bindRowsWithHeaders={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Individual Module Imports for Legacy Bundlers\nDESCRIPTION: Example showing how to import individual Handsontable modules from their respective source files for compatibility with older bundlers like Parcel and webpack 3.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerCellType } from 'handsontable/cellTypes/registry';\nimport { AutocompleteCellType } from 'handsontable/cellTypes/autocompleteType';\nimport { CheckboxCellType } from 'handsontable/cellTypes/checkboxType';\nimport { DateCellType } from 'handsontable/cellTypes/dateType';\nimport { DropdownCellType } from 'handsontable/cellTypes/dropdownType';\nimport { HandsontableCellType } from 'handsontable/cellTypes/handsontableType';\nimport { NumericCellType } from 'handsontable/cellTypes/numericType';\nimport { PasswordCellType } from 'handsontable/cellTypes/passwordType';\nimport { TextCellType } from 'handsontable/cellTypes/textType';\nimport { TimeCellType } from 'handsontable/cellTypes/timeType';\n\nimport { registerRenderer } from 'handsontable/renderers/registry';\nimport { autocompleteRenderer } from 'handsontable/renderers/autocompleteRenderer';\nimport { baseRenderer } from 'handsontable/renderers/baseRenderer';\n```\n\n----------------------------------------\n\nTITLE: Column Width Modification in JavaScript\nDESCRIPTION: Demonstrates how to modify column widths using middleware functionality in vanilla JavaScript\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/events-and-hooks/events-and-hooks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhot.addHook('modifyColWidth', (width, column) => {\n  if (column > 10) {\n    return 150;\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable via CDN\nDESCRIPTION: HTML code to include Handsontable and its Vue wrapper via CDN, including required CSS stylesheets.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/README.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@handsontable/vue/dist/vue-handsontable.min.js\"></script>\n\n<link href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Array of Objects Column Configuration\nDESCRIPTION: Shows how to work with an array of objects for the hot-column component by providing precise column data structure information using the data property.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-hot-column/vue-hot-column.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<hot-table :settings=\"hotSettings\">\n  <hot-column v-for=\"n in 2\" :width=\"120\" v-bind:key=\"'col' + n\">\n    <color-picker hot-editor hot-renderer></color-picker>\n  </hot-column>\n</hot-table>\n```\n\n----------------------------------------\n\nTITLE: Row Virtualization in React Component (JSX)\nDESCRIPTION: React implementation of row virtualization using JSX, showing how to integrate Handsontable's virtualization features within a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-virtualization/row-virtualization.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  const data = [];\n\n  for (let row = 0; row < 1000; row++) {\n    const rowData = [];\n\n    for (let col = 0; col < 1000; col++) {\n      rowData.push(`${row}, ${col}`);\n    }\n    data.push(rowData);\n  }\n\n  return (\n    <HotTable\n      data={data}\n      width=\"100%\"\n      height={400}\n      rowHeaders={true}\n      colHeaders={true}\n      renderAllRows={false}\n      viewportRowRenderingOffset={70}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with NestedRows Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to enable the NestedRows plugin in Handsontable using JavaScript. It sets the nestedRows option to true when initializing a new Handsontable instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-parent-child/row-parent-child.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  nestedRows: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Demo\nDESCRIPTION: Executes test specs for the Handsontable demo project. The development server must be running before running this command.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/accessibility/README.md#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring Copy/Paste Behavior for Hidden Columns\nDESCRIPTION: Example showing how to exclude hidden columns from copy and paste operations using the copyPasteEnabled option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: {\n    columns: [1, 2, 5],\n    indicators: true,\n    copyPasteEnabled: false\n  },\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Handsontable with Translations in Angular HTML Template\nDESCRIPTION: HTML template for integrating Handsontable with translation support in an Angular application. Defines a select dropdown for language selection and the hot-table component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-setting-up-a-translation/angular-setting-up-a-translation.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div class=\"form-group\">\n    <label for=\"languageField\">Selected language:</label>\n    <select id=\"languageField\" class=\"form-control\" #language (change)=\"setLanguage(language.value)\">\n      <option value=\"en-US\">English (United States)</option>\n      <option value=\"de-DE\">German (Germany)</option>\n      <option value=\"ja-JP\">Japanese (Japan)</option>\n      <option value=\"pl-PL\">Polish (Poland)</option>\n    </select>\n  </div>\n\n  <hot-table\n    [data]=\"data\"\n    [colHeaders]=\"true\"\n    [rowHeaders]=\"true\"\n    [height]=\"'auto'\"\n    [language]=\"selectedLanguage\"\n    licenseKey=\"non-commercial-and-evaluation\">\n    <hot-column\n      [width]=\"100\">\n    </hot-column>\n    <hot-column\n      type=\"numeric\"\n      [numericFormat]=\"{\n        pattern: '0,0.00 $'\n      }\"\n      [width]=\"100\">\n    </hot-column>\n  </hot-table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing All Available Cell Type Modules\nDESCRIPTION: Shows how to import all available cell type modules including the registering function. Each module represents a different cell type that can be registered and used in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  registerCellType, // cell types' registering function\n  AutocompleteCellType,\n  CheckboxCellType,\n  DateCellType,\n  DropdownCellType,\n  HandsontableCellType,\n  NumericCellType,\n  PasswordCellType,\n  SelectCellType,\n  TextCellType,\n  TimeCellType,\n} from 'handsontable/cellTypes';\n```\n\n----------------------------------------\n\nTITLE: Vue 2 Handsontable Instance Implementation\nDESCRIPTION: JavaScript implementation showing how to initialize Handsontable in Vue 2, including data management and instance referencing via refs.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-hot-reference/vue-hot-reference.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HotTable } from '@handsontable/vue';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.css';\n\nregisterAllModules();\n\nconst App = {\n  name: 'ExampleComponent',\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['A1', 'B1', 'C1', 'D1'],\n          ['A2', 'B2', 'C2', 'D2'],\n          ['A3', 'B3', 'C3', 'D3'],\n          ['A4', 'B4', 'C4', 'D4']\n        ],\n        colHeaders: true,\n        height: 'auto',\n        autoWrapRow: true,\n        autoWrapCol: true,\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  methods: {\n    swapHotData(data) {\n      this.$refs.hotTableComponent.hotInstance.loadData(data);\n    },\n    updateData() {\n      // The new data to be loaded into the Handsontable instance.\n      const newData = [\n        ['A1-new', 'B1-new', 'C1-new', 'D1-new'],\n        ['A2-new', 'B2-new', 'C2-new', 'D2-new'],\n        ['A3-new', 'B3-new', 'C3-new', 'D3-new'],\n        ['A4-new', 'B4-new', 'C4-new', 'D4-new']\n      ];\n\n      this.swapHotData(newData);\n    }\n  },\n  components: {\n    HotTable\n  }\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Component for Handsontable with Custom ID\nDESCRIPTION: Angular component class that provides data for the Handsontable grid. It initializes a sample dataset with columns for ID, name, and address information that will be displayed in the grid with the custom ID.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-custom-id/angular-custom-id.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'example-component',\n  templateUrl: './example1.html'\n})\nexport class AppComponent {\n  data = [\n    ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n    ['2019', 10, 11, 12, 13],\n    ['2020', 20, 11, 14, 13],\n    ['2021', 30, 15, 12, 13]\n  ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: New Autofill Hooks Implementation in React\nDESCRIPTION: Shows the updated implementation of beforeAutofill and afterAutofill hooks in version 9.0 with new parameter structure in React.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-8.4-to-9.0/migrating-from-8.4-to-9.0.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={data}\n  beforeAutofill={(selectionData, sourceRange, targetRange, direction) {\n    const start = targetRange.from // used to be `start`\n    const end = targetRange.to // used to be `end`\n    const data = selectionData // used to be `data`\n  }}\n  afterAutofill={(fillData, sourceRange, targetRange, direction) {\n    const start = targetRange.from // used to be `start`\n    const end = targetRange.to // used to be `end`\n    const data = fillData // used to be `data`\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Layout Direction in JavaScript\nDESCRIPTION: This code demonstrates how to set up a Handsontable grid with RTL (right-to-left) layout direction using JavaScript. It includes configuration for Arabic language support and displays sample data with right-to-left orientation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport { registerLanguageDictionary, getLanguageDictionary } from 'handsontable/i18n';\nimport { arAR } from 'handsontable/i18n/languages/ar-AR';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register the language dict\nregisterLanguageDictionary(arAR);\n\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],\n    ['2017', 10, 11, 12, 13, 15, 16],\n    ['2018', 10, 11, 12, 13, 15, 16],\n    ['2019', 10, 11, 12, 13, 15, 16],\n    ['2020', 10, 11, 12, 13, 15, 16],\n    ['2021', 10, 11, 12, 13, 15, 16]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  contextMenu: true,\n  language: arAR.languageCode,\n  layoutDirection: 'rtl'\n});\n```\n\n----------------------------------------\n\nTITLE: Array of Objects with HotColumn in Vue 3\nDESCRIPTION: Shows how to work with an array of objects using the hot-column component by specifying the data structure for columns using the data property.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-hot-column/vue3-hot-column.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<hot-table :data=\"data\">\n  <hot-column\n    data=\"id\"\n    title=\"ID\"\n    read-only>\n  </hot-column>\n  <hot-column\n    data=\"name.first\"\n    title=\"First name\">\n  </hot-column>\n  <hot-column\n    data=\"name.last\"\n    title=\"Last name\">\n  </hot-column>\n</hot-table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = {\n  data() {\n    return {\n      data: [\n        { id: 1, name: { first: 'Chris', last: 'Right' } },\n        { id: 2, name: { first: 'John', last: 'Honest' } },\n        { id: 3, name: { first: 'Greg', last: 'Well' } }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Close Method for Custom Editor in JavaScript\nDESCRIPTION: Example implementation of the close method for a custom editor class. This method hides the editor element.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomEditor extends TextEditor {\n  close() {\n    this.editorDiv.style.display = 'none';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable React Demo\nDESCRIPTION: Executes test specs for the Handsontable React demo project. Requires the development server to be running first.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Custom HTML in Handsontable Headers - HTML/JS/TS\nDESCRIPTION: Shows how to implement custom HTML in row and column headers with event handling. Uses class names instead of IDs for DOM element selection due to header duplication in the DOM tree.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-renderer/cell-renderer.md#2025-04-10_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example5\"></div>\n<style>\n  .checkboxContainer {\n    margin-left: 5px;\n  }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst example5 = document.querySelector('#example5');\n\nconst hot = new Handsontable(example5, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  colHeaders: true,\n  rowHeaders(index) {\n    return `<b>Row</b> ${index} <input type=\"checkbox\" class=\"checkboxContainer\">`;\n  },\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\ndocument.addEventListener('click', (event) => {\n  if (event.target.matches('.checkboxContainer')) {\n    console.log('checkbox clicked');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Handsontable Modules\nDESCRIPTION: Code to register all Handsontable modules. This is necessary to enable the full functionality of Handsontable in your React application.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/react/README.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerAllModules } from 'handsontable/registry';\n\nregisterAllModules();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Invalid Cell Class Name for the Entire Handsontable Grid\nDESCRIPTION: Example of configuring a custom CSS class name for invalid cells across the entire table. This allows for custom styling of cells that fail validation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-validator/cell-validator.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninvalidCellClassName: 'myInvalidClass'\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable Theme CSS Files via CDN\nDESCRIPTION: Demonstrates how to include Handsontable's CSS files from CDN sources like JSDelivr or cdnjs using HTML link tags. This approach is useful for projects not using module bundlers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css\" />\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable Styles in SCSS\nDESCRIPTION: Imports the necessary Handsontable styles into the project's SCSS file. This ensures that the Handsontable component is properly styled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-installation/angular-installation.md#2025-04-10_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import '~handsontable/styles/handsontable.min.css';\n@import '~handsontable/styles/ht-theme-main.min.css';\n```\n\n----------------------------------------\n\nTITLE: Basic Column Settings Declaration in Vue 2\nDESCRIPTION: Demonstrates how to declare column-specific settings using hot-column properties, either individually or wrapped in a settings property.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-hot-column/vue-hot-column.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<hot-table :settings=\"hotSettings\">\n  <hot-column :width=\"120\">\n    <stars-rating hot-renderer></stars-rating>\n  </hot-column>\n  <hot-column v-for=\"n in 2\" :width=\"120\" v-bind:key=\"'col' + n\">\n    <color-picker hot-editor hot-renderer></color-picker>\n  </hot-column>\n</hot-table>\n```\n\n----------------------------------------\n\nTITLE: Configuring RTL Layout Direction in React JSX\nDESCRIPTION: This code demonstrates how to set up a Handsontable grid with RTL (right-to-left) layout direction in a React component using JSX. It includes configuration for Arabic language support and displays sample data with right-to-left orientation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerLanguageDictionary } from 'handsontable/i18n';\nimport { arAR } from 'handsontable/i18n/languages/ar-AR';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register the language dict\nregisterLanguageDictionary(arAR);\n\nexport const ExampleComponent = () => {\n  return (\n    <HotTable\n      data={[\n        ['', 'Tesla', 'Nissan', 'Toyota', 'Honda', 'Mazda', 'Ford'],\n        ['2017', 10, 11, 12, 13, 15, 16],\n        ['2018', 10, 11, 12, 13, 15, 16],\n        ['2019', 10, 11, 12, 13, 15, 16],\n        ['2020', 10, 11, 12, 13, 15, 16],\n        ['2021', 10, 11, 12, 13, 15, 16]\n      ]}\n      rowHeaders={true}\n      colHeaders={true}\n      contextMenu={true}\n      language={arAR.languageCode}\n      layoutDirection=\"rtl\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Basic Row Hiding Configuration Example\nDESCRIPTION: Demonstrates how to enable basic row hiding functionality in Handsontable using the hiddenRows option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-hiding/row-hiding.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  rowHeaders: true,\n  colHeaders: true,\n  hiddenRows: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Running Visual Tests in Bash\nDESCRIPTION: Command to execute the visual regression tests after golden images have been generated. This compares the current state against the reference images.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/tests/README-TEST.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:visual-test\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable Base Module in Angular\nDESCRIPTION: Demonstrates how to import the required base module from Handsontable in an Angular application's entry point file.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-modules/angular-modules.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\n```\n\n----------------------------------------\n\nTITLE: Renderer Implementation in JavaScript\nDESCRIPTION: Example of implementing a custom renderer in a JavaScript Handsontable instance\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-renderer/cell-renderer.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#container');\nconst hot = new Handsontable(container, {\n  data: someData,\n  columns: [{\n    renderer: 'my.custom'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Handsontable modules in React\nDESCRIPTION: Importing and registering all Handsontable modules in a React application.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { registerAllModules } from 'handsontable/registry';\n\nregisterAllModules();\n```\n\n----------------------------------------\n\nTITLE: Handling populateFromArray Changes in JavaScript\nDESCRIPTION: Updated event handling for the populateFromArray method in JavaScript. This reflects the changes in how the method triggers hooks and handles data population in version 11.0.0.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-10.0-to-11.0/migrating-from-10.0-to-11.0.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew Handsontable(element, {\n  afterChange: (changes, source) => {\n    if (source === 'populateFromArray') {\n      changes.forEach(change =>  handleChange(change))\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Cell Type in JavaScript\nDESCRIPTION: Example of setting a column's cell type to 'password' in Handsontable, which automatically applies password-specific editors and renderers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncolumns: [{\n  type: 'password'\n}]\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Theme CSS Files\nDESCRIPTION: Example of importing a custom theme CSS file after the base Handsontable CSS. This shows how to load a custom 'falcon' theme that would be created by the developer.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'handsontable/styles/handsontable.min.css';\nimport 'handsontable/styles/ht-theme-falcon.min.css';\n```\n\n----------------------------------------\n\nTITLE: Basic HotColumn Configuration in Vue 3\nDESCRIPTION: Demonstrates how to declare column-specific settings using the hot-column properties in Vue 3. Settings can be passed either separately or wrapped in a settings property.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-hot-column/vue3-hot-column.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<hot-table :data=\"data\">\n  <hot-column title=\"First column\" read-only>\n  </hot-column>\n  <hot-column title=\"Second column\" :settings=\"{\n    type: 'numeric',\n    numericFormat: {\n      pattern: '0,0.00 $'\n    }\n  }\">\n  </hot-column>\n</hot-table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = {\n  data() {\n    return {\n      data: [\n        ['', ''],\n        ['', ''],\n        ['', '']\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Row Heights with a Function in Handsontable\nDESCRIPTION: This example illustrates how to use a function to dynamically set row heights based on the row index in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-height/row-height.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeights: (index) => 20 * (index + 1),\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeights: (index: number) => 20 * (index + 1),\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable 8.0 Core\nDESCRIPTION: NPM installation command for updating to Handsontable version 8.0\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable@8\n```\n\n----------------------------------------\n\nTITLE: Handsontable Cell Validators\nDESCRIPTION: List of built-in cell validators available in Handsontable including autocomplete, date, dropdown, numeric and time validators.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nautocompleteValidator\ndateValidator\ndropdownValidator\nnumericValidator\ntimeValidator\n```\n\n----------------------------------------\n\nTITLE: Enabling ColumnSorting and ObserveChanges Plugins in JavaScript (Post-8.0.0)\nDESCRIPTION: Updated configuration for enabling ColumnSorting and ObserveChanges plugins in Handsontable 8.0.0+. ObserveChanges must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnSorting: true,\nobserveChanges: true\n```\n\n----------------------------------------\n\nTITLE: Custom Component Renderer Implementation\nDESCRIPTION: Example of creating custom renderers using Vue 2 components. Shows how to mark a component as a Handsontable renderer using the hot-renderer attribute.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-hot-column/vue-hot-column.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Component implementation example\nVue.component('stars-rating', {\n  data() {\n    return {\n      value: 0\n    }\n  },\n  template: `\n    <div class=\"stars-rating\">\n      <span v-for=\"n in 5\" :key=\"n\" @click=\"setValue(n)\">\n        ★\n      </span>\n    </div>\n  `,\n  methods: {\n    setValue(val) {\n      this.value = val;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Password Cell Type with Custom Hash Symbol in React\nDESCRIPTION: Shows how to use a custom hash symbol for password masking in a React component. The hashSymbol option allows using any character or HTML entity for masking confidential data.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/password-cell-type/password-cell-type.md#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/react/example3.jsx)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/react/example3.tsx)\n```\n\n----------------------------------------\n\nTITLE: Direct Cell Function Configuration in JavaScript\nDESCRIPTION: Demonstrates explicit configuration of renderer, editor and validator in Handsontable\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  columns: [{\n    renderer: Handsontable.renderers.TextRenderer,\n    editor: Handsontable.editors.TextEditor,\n    validator: customValidator\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Including Handsontable with Theme-Based Styles\nDESCRIPTION: HTML code for implementing Handsontable with theme-based styles. Shows both standard and minified versions, where [name] represents the theme name (main or horizon).\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/packages/packages.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.js\"></script>\n<link href=\"styles/handsontable.css\" rel=\"stylesheet\">\n<link href=\"styles/ht-theme-[name].css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.min.js\"></script>\n<link href=\"styles/handsontable.min.css\" rel=\"stylesheet\">\n<link href=\"styles/ht-theme-[name].min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Row Headers Implementation in React TSX\nDESCRIPTION: TypeScript React component showing how to implement Handsontable with row headers and row binding functionality using TSX.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-header/row-header.md#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst ExampleComponent = () => {\n  const data: string[][] = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  return (\n    <HotTable\n      data={data}\n      rowHeaders={true}\n      colHeaders={true}\n      height=\"auto\"\n      manualRowMove={true}\n      bindRowsWithHeaders={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Freezing in TypeScript\nDESCRIPTION: TypeScript implementation of row freezing in Handsontable, demonstrating type-safe configuration of fixed rows.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-freezing/row-freezing.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@/content/guides/rows/row-freezing/javascript/example1.ts\n```\n\n----------------------------------------\n\nTITLE: New Index Mapping in React\nDESCRIPTION: Updated approach using rowIndexMapper with React references in Handsontable 8.0\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nconst hotTableComponentRef = useRef(null);\n\nhotTableComponentRef.current.hotInstance.rowIndexMapper.moveIndexes([1, 0], 0);\nhotTableComponentRef.current.hotInstance.render();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Theme in JavaScript Configuration\nDESCRIPTION: Demonstrates configuring a custom theme ('falcon') using the themeName option in the Handsontable initialization.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  themeName: 'ht-theme-falcon',\n  // other options\n});\n```\n\n----------------------------------------\n\nTITLE: Registering All Modules for React/Angular/Vue Wrappers in JavaScript\nDESCRIPTION: Code to register all Handsontable modules when using React, Angular, or Vue wrappers. This is required starting from version 11.0.0 to continue using all modules.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-10.0-to-11.0/migrating-from-10.0-to-11.0.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// import the registerAllModules() method\nimport { registerAllModules } from 'handsontable/registry';\n\n// register all Handsontable modules\nregisterAllModules();\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Component with Handsontable Data\nDESCRIPTION: Angular component that defines sample data for use with Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/angular/README.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ],\n})\nexport class AppComponent  {\n  data: any[] = [\n    { company: 'Tagcat', country: 'United Kingdom', rating: 4.4 },\n    { company: 'Zoomzone', country: 'Japan', rating: 4.5 },\n    { company: 'Meeveo', country: 'United States', rating: 4.6 },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Type with Custom Validator in JavaScript\nDESCRIPTION: Example showing how to configure a numeric column type with a custom validator in Handsontable\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  columns: [{\n    type: 'numeric',\n    // validator function defined elsewhere\n    validator: customValidator\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with Context Menu for Clipboard Operations\nDESCRIPTION: This snippet demonstrates how to initialize Handsontable with a context menu that includes copy and cut options. It sets up a basic grid with sample data and enables the context menu with specific options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/clipboard/clipboard.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: [\n    ['', 'Tesla', 'Nissan', 'Toyota', 'Honda'],\n    ['2017', 10, 11, 12, 13],\n    ['2018', 20, 11, 14, 13],\n    ['2019', 30, 15, 12, 13]\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  contextMenu: ['copy', 'cut'],\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Cell Type\nDESCRIPTION: Example showing how registering a cell type with an existing name will overwrite the original cell type functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nHandsontable.cellTypes.registerCellType('password', {\n  editor: copyablePasswordEditor,\n  renderer: copyablePasswordRenderer,\n});\n\n// Now 'password' alias points to the newly created\n// object, not Handsontable.cellTypes.password\n```\n\n----------------------------------------\n\nTITLE: Updating Data in React Components\nDESCRIPTION: Shows how to update data in React components using both updateSettings() and loadData() methods, using a ref to access the Handsontable instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-11.1-to-12.0/migrating-from-11.1-to-12.0.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nconst hotTableComponentRef = useRef(null);\n\n// Handsontable 12.0: this doesn't reset your configuration options and index mapper information\nhotTableComponentRef.current.hotInstance.updateSettings({\n  data: newDataset\n});\n\n// Handsontable 12.0: this does reset your configuration options and index mapper information\nhotTableComponentRef.current.hotInstance.loadData(newDataset);\n```\n\n----------------------------------------\n\nTITLE: Basic Row Headers Example in TypeScript\nDESCRIPTION: TypeScript implementation of Handsontable initialization with row headers and row binding functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-header/row-header.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector<HTMLElement>('#example1');\nconst data: string[][] = [\n  ['A1', 'B1', 'C1', 'D1'],\n  ['A2', 'B2', 'C2', 'D2'],\n  ['A3', 'B3', 'C3', 'D3'],\n  ['A4', 'B4', 'C4', 'D4'],\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  manualRowMove: true,\n  bindRowsWithHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: New Trimming Implementation\nDESCRIPTION: Updated approach using TrimmingMap for row trimming in Handsontable 8.0\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TrimmingMap } from \"handsontable/es/translations\";\n\nconst customTrimmingMap = new TrimmingMap();\n\nhotInstance.rowIndexMapper.registerMap('customTrimmingMap', customTrimmingMap);\ncustomTrimmingMap.setValueAtIndex(0, true); // trimming index 0\nhotInstance.render();\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Modules with Types in TypeScript\nDESCRIPTION: Example of importing individual Handsontable modules with correct types in TypeScript. This demonstrates the new ability to import specific modules introduced in version 11.0.0.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-10.0-to-11.0/migrating-from-10.0-to-11.0.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { registerPlugin, HiddenRows } from 'handsontable/plugins';\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Sorting Modules in Handsontable\nDESCRIPTION: Code example showing how to import only the necessary modules for sorting functionality in Handsontable to reduce bundle size, including the base module and ColumnSorting plugin.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/rows-sorting/rows-sorting.md#2025-04-10_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// import the base module\nimport Handsontable from 'handsontable/base';\n\n// import Handsontable's CSS\nimport 'handsontable/styles/handsontable.css';\nimport 'handsontable/styles/ht-theme-main.css';\n\n// import the ColumnSorting plugin (or the MultiColumnSorting plugin)\nimport { registerPlugin, ColumnSorting } from 'handsontable/plugins';\n\n// register the ColumnSorting (or MultiColumnSorting plugin)\nregisterPlugin(ColumnSorting);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cell Type in React HotTable Component\nDESCRIPTION: Example of using a custom cell type in a React HotTable component's column configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[{\n    type: 'my.custom'\n  }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Editor in JavaScript\nDESCRIPTION: Example of using the custom editor in a Handsontable instance configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#container')\nconst hot = new Handsontable(container, {\n  columns: [{\n    editor: 'theBestEditor'\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML container for Handsontable in Vue 2\nDESCRIPTION: HTML markup that defines the container where the Handsontable Vue component will be rendered. It creates a div with id 'example1' as the mounting point.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-simple-example/vue-simple-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Legacy Autofill Hooks Implementation in React\nDESCRIPTION: Shows the implementation of beforeAutofill and afterAutofill hooks before version 9.0 in React.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-8.4-to-9.0/migrating-from-8.4-to-9.0.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={data}\n  beforeAutofill={(start, end, data) {}}\n  afterAutofill={(start, end, data) {}}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Row Pre-population Implementation\nDESCRIPTION: React-specific implementation of row pre-population functionality in Handsontable. Demonstrates how to use cell renderers and hooks to automatically fill template values in empty rows upon cell editing.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-prepopulating/row-prepopulating.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/rows/row-prepopulating/react/example1.jsx)\n```\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/rows/row-prepopulating/react/example1.tsx)\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 Package from Root Directory\nDESCRIPTION: Command to build the Vue 2 wrapper package from the Handsontable root directory. This builds only the Vue 2 package.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run in vue build\n```\n\n----------------------------------------\n\nTITLE: Enabling ColumnSorting Plugin in JavaScript (Pre-8.0.0)\nDESCRIPTION: Configuration for enabling ColumnSorting plugin before Handsontable 8.0.0. This automatically enabled ObserveChanges.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncolumnSorting: true\n```\n\n----------------------------------------\n\nTITLE: Registering Handsontable Modules in Vue 3\nDESCRIPTION: Shows how to register imported cell types and plugins for use with Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-modules/vue3-modules.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nregisterCellType(NumericCellType);\nregisterPlugin(UndoRedo);\n```\n\n----------------------------------------\n\nTITLE: Handling populateFromArray Changes in React\nDESCRIPTION: Updated event handling for the populateFromArray method in a React component. This demonstrates how to adapt to the changes in hook triggering and data population introduced in Handsontable 11.0.0.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-10.0-to-11.0/migrating-from-10.0-to-11.0.md#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  afterChange={(changes, source) => {\n    if (source === 'populateFromArray') {\n      changes.forEach(change =>  handleChange(change))\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handsontable Plugin List\nDESCRIPTION: Comprehensive list of available plugins for Handsontable including functionality for column/row manipulation, sorting, filtering, and various UI enhancements.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nAutoColumnSize\nAutofill\nAutoRowSize\nBasePlugin\nBindRowsWithHeaders\nCollapsibleColumns\nColumnSorting\nColumnSummary\nComments\nContextMenu\nCopyPaste\nCustomBorders\nDragToScroll\nDropdownMenu\nExportFile\nFilters\nFormulas\nHiddenColumns\nHiddenRows\nManualColumnFreeze\nManualColumnMove\nManualColumnResize\nManualRowMove\nManualRowResize\nMergeCells\nMultiColumnSorting\nMultipleSelectionHandles\nNestedHeaders\nNestedRows\nPersistentState\nSearch\nStretchColumns\nTouchScroll\nTrimRows\nUndoRedo\n```\n\n----------------------------------------\n\nTITLE: Equivalent Custom Cell Type Properties in React\nDESCRIPTION: Shows the equivalent explicit property configuration when using a custom cell type in React Handsontable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\ncolumns={[{\n  editor: false,\n  renderer: Handsontable.renderers.TextRenderer,\n  className: 'my-cell',\n  readOnly: true,\n  myCustomProperty: 'foo',\n}]}\n```\n\n----------------------------------------\n\nTITLE: Enabling CollapsibleColumns and HiddenColumns Plugins in JavaScript (Post-8.0.0)\nDESCRIPTION: Updated configuration for enabling CollapsibleColumns and HiddenColumns plugins in Handsontable 8.0.0+. HiddenColumns must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncollapsibleColumns: true,\nhiddenColumns: true\n```\n\n----------------------------------------\n\nTITLE: Enabling ManualColumnFreeze Plugin in React (Pre-8.0.0)\nDESCRIPTION: React configuration for enabling ManualColumnFreeze plugin before Handsontable 8.0.0. This automatically enabled ManualColumnMove.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nmanualColumnFreeze={true}\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Type with setCellMeta() in JavaScript\nDESCRIPTION: Fixed an issue where changing a cell's type through setCellMeta() didn't properly set the cell's editor and renderer.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/changelog/changelog.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nhot.setCellMeta(row, col, 'type', 'date');\n```\n\n----------------------------------------\n\nTITLE: Basic Column Moving Implementation - JavaScript\nDESCRIPTION: Demonstrates how to enable basic column moving functionality in Handsontable by setting the manualColumnMove option to true.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-moving/column-moving.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst example1 = document.querySelector('#example1');\n\nconst hot = new Handsontable(example1, {\n  data: [\n    ['Tesla', 2017, 'black', 'black'],\n    ['Nissan', 2018, 'blue', 'blue'],\n    ['Chrysler', 2019, 'yellow', 'black'],\n    ['Volvo', 2020, 'white', 'gray']\n  ],\n  colHeaders: true,\n  manualColumnMove: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling CollapsibleColumns Plugin in React (Pre-8.0.0)\nDESCRIPTION: React configuration for enabling CollapsibleColumns plugin before Handsontable 8.0.0. This automatically enabled HiddenColumns.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\ncollapsibleColumns={true}\n```\n\n----------------------------------------\n\nTITLE: Enabling ManualColumnFreeze and ManualColumnMove Plugins in JavaScript (Post-8.0.0)\nDESCRIPTION: Updated configuration for enabling ManualColumnFreeze and ManualColumnMove plugins in Handsontable 8.0.0+. ManualColumnMove must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmanualColumnFreeze: true,\nmanualColumnMove: true\n```\n\n----------------------------------------\n\nTITLE: Handsontable Export as String HTML Template\nDESCRIPTION: HTML template for the export as string example. It provides a container for the Handsontable grid and a button to trigger the export functionality, with a note to check the browser console.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example3\"></div>\n<div class=\"controls\">\n  <button id=\"export-string\" class=\"button button--primary\">Export as string (see browser console)</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Cell Type in React\nDESCRIPTION: Example of setting a column's cell type to 'password' in React Handsontable component, which automatically applies password-specific editors and renderers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/cell-type/cell-type.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncolumns={[{\n  type: 'password'\n}]}\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable and Vue 2 wrapper with npm\nDESCRIPTION: Use npm to install the Handsontable library and its Vue 2 wrapper. This step is necessary to use Handsontable in a Vue 2 project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-installation/vue-installation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/vue\n```\n\n----------------------------------------\n\nTITLE: Enabling NestedRows and Filters Plugins in React (Pre-8.0.0)\nDESCRIPTION: React configuration for enabling NestedRows and Filters plugins before Handsontable 8.0.0. These plugins automatically enabled TrimRows.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nnestedRows={true}\n\nfilters={true}\n```\n\n----------------------------------------\n\nTITLE: Adding Rows and Columns with alter() Method in JavaScript\nDESCRIPTION: New parameter values were added to the alter() method to allow inserting rows and columns at specific positions. The insert_row and insert_col parameters are now deprecated.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/changelog/changelog.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nalter('insert_row_above');\nalter('insert_row_below');\nalter('insert_col_start');\nalter('insert_col_end');\n```\n\n----------------------------------------\n\nTITLE: Configuring Handsontable Component in Vue 3 JavaScript\nDESCRIPTION: This JavaScript code sets up a Vue 3 application that uses the Handsontable component. It imports necessary dependencies, defines the component structure, and configures Handsontable with data and options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-simple-example/vue3-simple-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport { HotTable } from '@handsontable/vue3';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst app = createApp({\n  data() {\n    return {\n      hotSettings: {\n        data: [\n          ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n          ['2019', 10, 11, 12, 13],\n          ['2020', 20, 11, 14, 13],\n          ['2021', 30, 15, 12, 13]\n        ],\n        colHeaders: true,\n        rowHeaders: true,\n        height: 'auto',\n        licenseKey: 'non-commercial-and-evaluation'\n      }\n    };\n  },\n  components: {\n    HotTable\n  }\n});\n\napp.mount('#example1');\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Alignment with Layout Direction\nDESCRIPTION: Example demonstrating how to set custom text alignment for columns while using different layout directions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example5');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  layoutDirection: 'rtl',\n  columns: [\n    { className: 'htLeft' },\n    { className: 'htCenter' },\n    { className: 'htRight' },\n    { className: 'htLeft' },\n    { className: 'htCenter' }\n  ],\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Source Data in JavaScript (Pre-8.0.0)\nDESCRIPTION: Example of modifying source data directly by reference before Handsontable 8.0.0. This approach is no longer supported in version 8.0.0+.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndata[0][0] = 'A1';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhotInstance.getSourceData()[0][0] = 'A1';\n```\n\n----------------------------------------\n\nTITLE: Setting License Key in JavaScript Configuration\nDESCRIPTION: Shows how to enter a Handsontable license key in a JavaScript configuration. The license key should be provided as a string in the configuration object.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/technical-specification/software-license/software-license.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlicenseKey: '00000-00000-00000-00000-00000',\n```\n\n----------------------------------------\n\nTITLE: Enabling ManualColumnFreeze and ManualColumnMove Plugins in React (Post-8.0.0)\nDESCRIPTION: Updated React configuration for enabling ManualColumnFreeze and ManualColumnMove plugins in Handsontable 8.0.0+. ManualColumnMove must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nmanualColumnFreeze={true}\nmanualColumnMove={true}\n```\n\n----------------------------------------\n\nTITLE: Enabling NestedRows and Filters Plugins in JavaScript (Pre-8.0.0)\nDESCRIPTION: Configuration for enabling NestedRows and Filters plugins before Handsontable 8.0.0. These plugins automatically enabled TrimRows.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnestedRows: true\n\nfilters: true\n```\n\n----------------------------------------\n\nTITLE: Default Query Method Implementation in JavaScript\nDESCRIPTION: The default query method used by the Search plugin to determine if a cell's value matches the search query. It performs a case-insensitive substring match.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/navigation/searching-values/searching-values.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DEFAULT_QUERY_METHOD = function(query, value) {\n  if (isUndefined(query) || query === null || !query.toLowerCase || query.length === 0) {\n    return false;\n  }\n  if (isUndefined(value) || value === null) {\n    return false;\n  }\n\n  return value.toString().toLowerCase().indexOf(query.toLowerCase()) !== -1;\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Language Files with CommonJS in JavaScript\nDESCRIPTION: Shows how to load and register a language dictionary using CommonJS in JavaScript. It requires Handsontable, the language dictionary, and sets the language in the Handsontable configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/language/language.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Handsontable = require('handsontable/base').default;\nconst { registerLanguageDictionary, deDE } = require('handsontable/i18n');\n\nregisterLanguageDictionary(deDE);\n\nconst hot = new Handsontable(container, {\n  language: deDE.languageCode,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Security Policy for Handsontable on Same Origin\nDESCRIPTION: This HTML meta tag sets up a Content Security Policy (CSP) for Handsontable when hosted on the same origin as the app. It restricts script and style sources to the same origin, with 'unsafe-inline' allowed for styles.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/security/security/security.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'\">\n```\n\n----------------------------------------\n\nTITLE: Vue 2 Handsontable Template Structure\nDESCRIPTION: HTML template structure showing how to set up a Handsontable component in Vue 2 with buttons for data manipulation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-hot-reference/vue-hot-reference.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\">\n  <div class=\"controls\">\n    <button v-on:click=\"updateData\" class=\"button button--primary\">Load new data</button>\n  </div>\n  <br/>\n  <hot-table :settings=\"hotSettings\" ref=\"hotTableComponent\"></hot-table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Column-specific Locales in React\nDESCRIPTION: Example of setting different locales for individual columns using the React HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/locale/locale.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[{\n      // set the first column's locale to Polish\n      locale: 'pl-PL',\n    }, {\n      // set the second column's locale to German\n      locale: 'de-DE',\n    }, {\n      // set the third column's locale to Japanese\n      locale: 'ja-JP',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Workaround for minSpareRows behavior in JavaScript\nDESCRIPTION: Provides a workaround to maintain the previous behavior of minSpareRows when used with TrimRows in Handsontable 8.0.0. It uses the beforeCreateRow hook to block row creation under certain conditions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst hotInstance = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ],\n  trimRows: [0],\n  beforeCreateRow(index, amount, source) {\n    const rowIndexMapper = this.rowIndexMapper;\n    // if any row was skipped then block a creation of row execution.\n    if (source === 'auto' && rowIndexMapper.getNotSkippedIndexesLength() < rowIndexMapper.getNumberOfIndexes()) {\n      return false;\n    }\n  },\n  minSpareRows: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling ColumnSorting and ObserveChanges Plugins in React (Post-8.0.0)\nDESCRIPTION: Updated React configuration for enabling ColumnSorting and ObserveChanges plugins in Handsontable 8.0.0+. ObserveChanges must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\ncolumnSorting={true}\nobserveChanges={true}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Plugin Instance in JavaScript\nDESCRIPTION: Retrieving a reference to the plugin instance in JavaScript to access its methods and properties.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-plugins/custom-plugins.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst pluginInstance = hotInstance.getPlugin(CustomPlugin.PLUGIN_KEY);\n\npluginInstance.externalMethodExample();\n```\n\n----------------------------------------\n\nTITLE: Angular Component Implementation for Language Change\nDESCRIPTION: JavaScript code implementing the language change functionality in an Angular component, including data initialization and language change handler.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-language-change-example/angular-language-change-example.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './example1.html'\n})\nexport class AppComponent {\n  language = 'en-US';\n\n  hotSettings: any = {\n    data: [\n      ['A1', 'B1', 'C1', 'D1', 'E1'],\n      ['A2', 'B2', 'C2', 'D2', 'E2'],\n      ['A3', 'B3', 'C3', 'D3', 'E3'],\n      ['A4', 'B4', 'C4', 'D4', 'E4'],\n      ['A5', 'B5', 'C5', 'D5', 'E5']\n    ],\n    colHeaders: true,\n    contextMenu: true,\n    height: 'auto',\n    licenseKey: 'non-commercial-and-evaluation'\n  };\n\n  onLanguageChange(event: Event) {\n    this.language = (event.target as HTMLSelectElement).value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable Styles in CSS\nDESCRIPTION: CSS import statements for including Handsontable's required stylesheets in a project. These styles are necessary for proper rendering of the data grid.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue3/README.md#2025-04-10_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '~handsontable/styles/handsontable.min.css';\n@import '~handsontable/styles/ht-theme-main.min.css';\n```\n\n----------------------------------------\n\nTITLE: Creating a container for Handsontable\nDESCRIPTION: HTML markup for creating a container div to hold the Handsontable instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/installation/installation.md#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example\" class=\"ht-theme-main-dark-auto\"></div>\n```\n\n----------------------------------------\n\nTITLE: Handsontable Language Translations\nDESCRIPTION: Available language translation codes for internationalizing Handsontable interface across different locales and regions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/modules/modules.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\narAR csCZ deCH deDE enUS esMX\nfrFR faIR hrHR itIT jaJP koKR\nlvLV nbNO nlNL plPL\nptBR ruRU srSP zhCN zhTW\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Angular Handsontable with Custom Context Menu\nDESCRIPTION: HTML template that includes the Handsontable component with custom context menu configuration. The template binds the Handsontable component to data and settings defined in the component class.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-custom-context-menu-example/angular-custom-context-menu-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<hot-table [settings]=\"hotSettings\" [data]=\"data\" licenseKey=\"non-commercial-and-evaluation\"></hot-table>\n```\n\n----------------------------------------\n\nTITLE: Handling Out-of-Range Indexes in Handsontable 8.0.0\nDESCRIPTION: Demonstrates how to handle indexes that exceed the data length in Handsontable 8.0.0. The toPhysicalRow method now returns null for out-of-range indexes instead of the index itself.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst visualRow = 20;\nconst physicalRow = hotInstance.toPhysicalRow(visualRow) ?? visualRow;\n// physicalRow === 20\n```\n\n----------------------------------------\n\nTITLE: Filtering Header Selection Indexes in React\nDESCRIPTION: Shows how to filter negative header indexes from selection range in a React component using useRef hook and mapping values to non-negative numbers\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_40\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from 'react';\n\nconst hotTableComponentRef = useRef(null);\n\nhotTableComponentRef.current.hotInstance.getSelectedLast().map((indexIncludingHeader) => {\n  return Math.max(0, indexIncludingHeader);\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Source Data in JavaScript (Post-8.0.0)\nDESCRIPTION: Updated method for modifying source data in Handsontable 8.0.0+ using the new API method setSourceDataAtCell.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nhotInstance.setSourceDataAtCell(0, 0, 'A1');\n```\n\n----------------------------------------\n\nTITLE: Updating getNearestNotHiddenIndex Usage in JavaScript\nDESCRIPTION: Example showing how to migrate from the deprecated getFirstNotHiddenIndex() method to the new getNearestNotHiddenIndex() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-12.4-to-13.0/migrating-from-12.4-to-13.0.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhandsontableInstance.getFirstNotHiddenIndex(0, 1, true, 1);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhandsontableInstance.getNearestNotHiddenIndex(0, 1, true);\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Column Headers in Handsontable\nDESCRIPTION: This example demonstrates how to enable default column headers in Handsontable by setting the colHeaders option to true.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-header/column-header.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: true,\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: true,\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Image Icon in SVG\nDESCRIPTION: SVG path definition for an image icon, typically used to represent image insertion or manipulation functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_34\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.091,16.849C6.051,16.915,6.099,17,6.177,17H10h2h5.806c0.081,0,0.129-0.092,0.081-0.158l-4.798-6.718c-0.042-0.059-0.13-0.055-0.167,0.007l-2.436,4.06c-0.039,0.065-0.133,0.065-0.171,0l-1.229-2.047c-0.039-0.065-0.133-0.065-0.171,0L6.091,16.849z\"/><path d=\"M19,3H5H3.1C3.045,3,3,3.045,3,3.1V5v14v1.9C3,20.955,3.045,21,3.1,21H5h14h1.9c0.055,0,0.1-0.045,0.1-0.1V19V5V3.1C21,3.045,20.955,3,20.9,3H19z M18.9,19H5.1C5.045,19,5,18.955,5,18.9V5.1C5,5.045,5.045,5,5.1,5h13.8C18.955,5,19,5.045,19,5.1v13.8C19,18.955,18.955,19,18.9,19z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Link Icon in SVG\nDESCRIPTION: SVG path definition for an insert link icon, typically used to represent hyperlink insertion functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_38\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.627,9.174c0.619-0.276,1.322-0.177,1.985-0.176C9.365,8.998,10.119,8.999,10.873,9c0.03,0,0.063-0.001,0.087-0.019C10.996,8.955,11,8.903,11,8.859C11,8.292,11,7.725,11,7.158c0-0.031,0-0.064-0.017-0.091c-0.03-0.048-0.096-0.054-0.153-0.055C9.843,6.997,8.855,6.982,7.867,6.966c-0.68-0.011-1.429-0.049-2.2,0.326c-1.309,0.637-2.009,1.808-2.417,3.11c-0.344,1.099-0.335,2.293,0.076,3.373c0.381,0.999,1.086,1.863,1.986,2.439C6.111,16.726,7.051,17,8,17h2.9c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1c0,0-2.899,0-2.9,0c-1.136,0-2.199-0.667-2.697-1.687c-0.36-0.737-0.362-1.583-0.101-2.351C5.449,10.234,5.91,9.493,6.627,9.174z M18.257,7.151c-0.336-0.118-0.697-0.165-1.081-0.164C15.842,6.994,14.508,7,13.174,7.006c-0.053,0-0.113,0.004-0.147,0.044C13,7.082,12.999,7.128,12.999,7.171C12.999,7.735,13,8.299,13.001,8.863c0,0.042,0.003,0.09,0.035,0.117c0.025,0.02,0.06,0.021,0.093,0.021C14.063,9,14.997,8.999,15.931,8.998c0.694-0.001,1.461-0.1,1.993,0.443c0.85,0.87,1.31,2.285,0.936,3.466c-0.026,0.081-0.055,0.16-0.087,0.238C18.313,14.255,17.201,15,16,15h-2.9c-0.055,0-0.1,0.045-0.1,0.1v1.8c0,0.055,0.045,0.1,0.1,0.1c0,0,2.9,0,2.9,0c1.179,0,2.334-0.425,3.232-1.188c0.889-0.755,1.726-1.937,1.747-3.77c0.019-1.701-0.392-2.608-1.439-3.91c-0.132-0.165-0.274-0.323-0.429-0.466C18.849,7.425,18.564,7.259,18.257,7.151z M8.1,13h7.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H8.1C8.045,11,8,11.045,8,11.1v1.8C8,12.955,8.045,13,8.1,13z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable Angular Wrapper with npm\nDESCRIPTION: Command to install Handsontable and its Angular wrapper using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/angular/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/angular\n```\n\n----------------------------------------\n\nTITLE: Modifying Cell Text Overflow with CSS\nDESCRIPTION: CSS for changing the default text wrapping behavior to display ellipsis for overflowing text. This targets all cells within the Handsontable container.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/styling/themes/themes.md#2025-04-10_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#handsontable-example .handsontable td {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Autofill Hooks Implementation in JavaScript\nDESCRIPTION: Shows the implementation of beforeAutofill and afterAutofill hooks before version 9.0 in JavaScript.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-8.4-to-9.0/migrating-from-8.4-to-9.0.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew Handsontable(container, {\n  data,\n  beforeAutofill(start, end, data) {},\n  afterAutofill(start, end, data) {}\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Header Selection Indexes in JavaScript\nDESCRIPTION: Demonstrates how to filter out negative header indexes from selection range by mapping values to non-negative numbers using Math.max()\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nhotInstance.getSelectedLast().map((indexIncludingHeader) => {\n  return Math.max(0, indexIncludingHeader);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Moving in React with JavaScript\nDESCRIPTION: This example demonstrates how to implement row moving functionality in a React application using Handsontable's ManualRowMove plugin with JavaScript. It shows the component setup required for enabling draggable row reordering.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-moving/row-moving.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/rows/row-moving/react/example1.jsx)\n```\n\n----------------------------------------\n\nTITLE: Defining Currency USD Icon in SVG\nDESCRIPTION: SVG definition for a US dollar currency icon, showing the dollar symbol ($) in a circular design suitable for financial interfaces.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_10\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12.57,10.64a14.81,14.81,0,0,1,1.86.48,3,3,0,0,1,2.34,3.05c0,2-1.57,3.41-4.2,3.67V19.3H11.52V17.84c-2.62-.16-4.2-1.55-4.29-3.77H9.71c.09,1.08.64,1.6,1.81,1.7V12.88a11.76,11.76,0,0,1-1.78-.52,3,3,0,0,1-2.27-3c0-2,1.57-3.34,4.05-3.49V4.7h1.05V5.91a3.77,3.77,0,0,1,3.85,3.51H14A1.58,1.58,0,0,0,12.57,8ZM11.52,8a2.29,2.29,0,0,0-.64.14A1.2,1.2,0,0,0,10,9.18c0,.63.47,1,1.52,1.25Zm1.05,7.8c1-.09,1.61-.59,1.61-1.27s-.48-1.12-1.61-1.38Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Add Icon in SVG\nDESCRIPTION: SVG definition for a database icon with a plus symbol, representing database addition operations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_15\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11,8.92c-5.57,0-6.5-1.17-6.5-1.17v2.33s.93,1.17,6.5,1.17,6.5-1.17,6.5-1.17V7.75S16.57,8.92,11,8.92Zm0-1.17c3.59,0,6.5-.78,6.5-1.75S14.59,4.25,11,4.25,4.5,5,4.5,6,7.41,7.75,11,7.75Zm1,8.15-1,0c-5.57,0-6.5-1.17-6.5-1.17v2.33s.93,1.17,6.5,1.17c.56,0,1.06,0,1.54,0a3.84,3.84,0,0,1-.54-2A2.09,2.09,0,0,1,12,15.9Zm-1-3.48c-5.57,0-6.5-1.17-6.5-1.17v2.33s.93,1.17,6.5,1.17c.47,0,.9,0,1.3,0A4,4,0,0,1,16,12.25a3.94,3.94,0,0,1,1.5.3v-1.3S16.57,12.42,11,12.42Z\"/><path d=\"M16,12.75a3.5,3.5,0,1,0,3.5,3.5A3.5,3.5,0,0,0,16,12.75Zm2,4H16.5v1.5h-1v-1.5H14v-1h1.5v-1.5h1v1.5H18Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Commercial License Key in JavaScript\nDESCRIPTION: Example showing how to set the license key for non-commercial use of Handsontable. This is required for projects covered by the free non-commercial license.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue3/README.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n'non-commercial-and-evaluation'\n```\n\n----------------------------------------\n\nTITLE: HTML Template Structure for Vue 3 with Vuex\nDESCRIPTION: Template structure showing Handsontable integration with Vue 3 and Vuex, including a readOnly toggle switch and data display.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue3/vue3-vuex-example/vue3-vuex-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\">\n  <div id=\"example-preview\">\n    <div class=\"toggle-help\">\n      <label><input type=\"checkbox\" v-model=\"readOnly\" /> Toggle <code>readOnly</code> for the entire table</label>\n    </div>\n    <hot-table\n      :settings=\"hotSettings\"\n      :data=\"data\"\n      :width=\"width\"\n      :height=\"height\"\n      @afterChange=\"onAfterChange\"\n      licenseKey=\"non-commercial-and-evaluation\">\n    </hot-table>\n    <div class=\"dump-example-print-BTN\">\n      <div class=\"header-text\">Vuex store dump:</div>\n      <pre class=\"console\">{{ storeDump }}</pre>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Collection for UI Elements\nDESCRIPTION: A comprehensive collection of SVG icons representing various UI functions such as text formatting, user management, navigation controls, and viewing options. Each icon is contained within a div element with descriptive class names.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_43\n\nLANGUAGE: HTML\nCODE:\n```\n<div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M9.687,14.337l-0.968-1.851c-0.02-0.039-0.013-0.086,0.018-0.117l2.381-2.381c0.032-0.032,0.081-0.039,0.121-0.016l1.781,1.027c0.039,0.023,0.089,0.016,0.121-0.016l1.763-1.763c0.048-0.048,0.035-0.128-0.025-0.16L5.17,4.034c-0.039-0.02-0.086-0.013-0.117,0.018L3.05,6.055c-0.03,0.03-0.038,0.076-0.019,0.114l4.793,9.94c0.03,0.062,0.112,0.076,0.161,0.027l1.684-1.683C9.7,14.423,9.707,14.375,9.687,14.337z M5.99,6.942l3.314,1.912c0.057,0.033,0.067,0.111,0.021,0.157l-1.512,1.512c-0.048,0.048-0.128,0.035-0.159-0.024L5.852,7.076C5.805,6.987,5.903,6.892,5.99,6.942z M15.514,7.171l1.88,1.88c0.039,0.039,0.039,0.102,0,0.141L6.878,19.707c-0.039,0.039-0.039,0.102,0,0.141l1.273,1.273c0.039,0.039,0.102,0.039,0.141,0l10.515-10.515c0.039-0.039,0.102-0.039,0.141,0l1.88,1.88C20.892,12.549,21,12.505,21,12.415V7.1C21,7.045,20.955,7,20.9,7h-5.315C15.495,7,15.451,7.108,15.514,7.171z\"/></svg><span>text-rotation</span></div>\n```\n\n----------------------------------------\n\nTITLE: Migration of Settings Property Usage\nDESCRIPTION: Demonstrates the change from using the settings prop to direct prop passing in the new React wrapper.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-14.6-to-15.0/migrating-from-14.6-to-15.0.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst settings = { rowHeaders: true, colHeaders: true };\\n\\n<HotTable settings={settings} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable \\n  rowHeaders={true} \\n  colHeaders={true}\\n  // Other options are available as props\\n/>\n```\n\n----------------------------------------\n\nTITLE: Including Moment.js Dependency for Time Cell Type in Handsontable\nDESCRIPTION: Script tag required to include the Moment.js library, which is needed for the time cell type to function properly in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/time-cell-type/time-cell-type.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Normalizing Selection Range in JavaScript\nDESCRIPTION: Shows how to use the normalize() method to handle negative header indexes in selection range\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nhotInstance.getSelectedRangeLast().from.clone().normalize()\n```\n\n----------------------------------------\n\nTITLE: Including Handsontable with Classic Styles\nDESCRIPTION: HTML code for including the full distribution of Handsontable with classic styles. Includes both standard and minified file options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/packages/packages.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.js\"></script>\n<link href=\"dist/handsontable.full.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.min.js\"></script>\n<link href=\"dist/handsontable.full.min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 CommonJS Format\nDESCRIPTION: Command to transpile the Vue 2 wrapper files into CommonJS format. This places the output in /wrappers/vue/commonjs/vue-handsontable.js.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:commonjs\n```\n\n----------------------------------------\n\nTITLE: Building Angular Package from Root\nDESCRIPTION: Command to build only the Angular package from the root directory of the Handsontable monorepo.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run in angular build\n```\n\n----------------------------------------\n\nTITLE: Importing HotTable Component\nDESCRIPTION: Importing the main Handsontable React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/react-wrapper/README.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react-wrapper';\n```\n\n----------------------------------------\n\nTITLE: Defining Indent Decrease Icon in SVG\nDESCRIPTION: SVG path definition for an indent decrease icon, typically used in text formatting to reduce indentation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_35\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3.1,19h17.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H3.1C3.045,17,3,17.045,3,17.1v1.8C3,18.955,3.045,19,3.1,19z\"/><path d=\"M3.107,12.08l3.733,2.8C6.906,14.929,7,14.882,7,14.8V9.2c0-0.082-0.094-0.129-0.16-0.08l-3.733,2.8C3.053,11.96,3.053,12.04,3.107,12.08z\"/><path d=\"M9.1,15h11.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H9.1C9.045,13,9,13.045,9,13.1v1.8C9,14.955,9.045,15,9.1,15z\"/><path d=\"M9.1,11h11.8c0.055,0,0.1-0.045,0.1-0.1V9.1C21,9.045,20.955,9,20.9,9H9.1C9.045,9,9,9.045,9,9.1v1.8C9,10.955,9.045,11,9.1,11z\"/><path d=\"M3,5.1v1.8C3,6.955,3.045,7,3.1,7h17.8C20.955,7,21,6.955,21,6.9V5.1C21,5.045,20.955,5,20.9,5H3.1C3.045,5,3,5.045,3,5.1z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Implementation Changes\nDESCRIPTION: Shows the transition from old to new syntax for implementing custom renderers, including TypeScript support.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-14.6-to-15.0/migrating-from-14.6-to-15.0.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HotColumn width={250}>\\n  <RendererComponent hot-renderer />\\n</HotColumn>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<HotColumn width={250} renderer={RendererComponent} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotRendererProps } from '@handsontable/react-wrapper';\\n\\nconst MyRenderer = (props: HotRendererProps) => {\\n  const { value, row, col, cellProperties } = props;\\n  return (\\n    <div style={{ backgroundColor: cellProperties.readOnly ? '#f0f0f0' : '#fff' }}>\\n      {`${value.name}: ${value.value} at (${row}, ${col})`}\\n    </div>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Selected Context Menu Options in Handsontable (TypeScript)\nDESCRIPTION: TypeScript implementation for configuring Handsontable with specific context menu options. This example shows how to select and configure built-in context menu actions with type safety.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/context-menu/context-menu.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/context-menu/javascript/example2.ts)\n```\n\n----------------------------------------\n\nTITLE: Loading Handsontable Angular Wrapper from CDN\nDESCRIPTION: HTML code to include Handsontable and its Angular wrapper from CDN, including necessary stylesheets.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/angular/README.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@handsontable/angular/bundles/handsontable-angular.umd.min.js\"></script>\n\n<link href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/handsontable.min.css\" rel=\"stylesheet\">\n<link href=\"https://cdn.jsdelivr.net/npm/handsontable/styles/ht-theme-main.min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Importing Optional Handsontable Modules in Angular\nDESCRIPTION: Shows how to import specific optional modules (numeric cell type and UndoRedo plugin) along with their registering functions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-modules/angular-modules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  registerCellType, // cell types' registering function\n  NumericCellType,\n} from 'handsontable/cellTypes';\n\nimport {\n  registerPlugin, // plugins' registering function\n  UndoRedo,\n} from 'handsontable/plugins';\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable 8.0 with Angular\nDESCRIPTION: NPM installation command for Handsontable 8.0 with Angular wrapper\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable@8 @handsontable/angular@6\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable 8.0 with Vue\nDESCRIPTION: NPM installation command for Handsontable 8.0 with Vue wrapper\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/vue@5\n```\n\n----------------------------------------\n\nTITLE: Workaround for Cell Selection Behavior in Handsontable 8.0.0\nDESCRIPTION: Provides a workaround to maintain the previous cell selection behavior when clicking on the top-left corner. In 8.0.0, this action selects all cells by default, but this code allows selection of only the first cell.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeOnCellMouseDown(event, coords) {\n  if (coords.col === -1 && coords.row === -1) {\n    event.stopImmediatePropagation();\n    const visualRow = this.rowIndexMapper.getVisualFromRenderableIndex(0);\n    const visualColumn = this.columnIndexMapper.getVisualFromRenderableIndex(0);\n\n    this.selectCell(visualRow, visualColumn);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Preview Icon in SVG\nDESCRIPTION: SVG definition for a document icon with a magnifying glass, representing document preview functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_22\n\nLANGUAGE: SVG\nCODE:\n```\n<path d=\"M5.42,18.24A.47.47,0,0,1,5,17.78V4.85a.47.47,0,0,1,.47-.46h6V6.7A1.38,1.38,0,0,0,12.8,8.08h2.31v3a4,4,0,0,1,.92.25V7.16L12.3,3.47H5.42A1.38,1.38,0,0,0,4,4.85V17.78a1.38,1.38,0,0,0,1.39,1.38h7.32a4.16,4.16,0,0,1-1.34-.92ZM12.34,4.81l2.35,2.35H12.8a.47.47,0,0,1-.46-.46Zm.46,6.51H7.26v.92h4.18A4.36,4.36,0,0,1,12.8,11.32ZM7.26,15v.92h3a4.91,4.91,0,0,1-.06-.67c0-.09,0-.17,0-.25Zm3.5-1.85H7.26v.92h3.11A5,5,0,0,1,10.76,13.16Zm6.69,4s0,0,0-.06A3.38,3.38,0,0,0,18,15.24a3.55,3.55,0,1,0-3.55,3.47,3.6,3.6,0,0,0,2.27-.8,0,0,0,0,1,.06,0l2.48,2.6a0,0,0,0,0,.07,0l.64-.67a.06.06,0,0,0,0-.08Zm-3,.71a2.6,2.6,0,1,1,2.67-2.6A2.63,2.63,0,0,1,14.43,17.84Z\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Version of TypeScript Code Example\nDESCRIPTION: Command to generate a JavaScript version of a TypeScript code example. This is part of the workflow for maintaining both TS/TSX and JS/JSX versions of code examples in the documentation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:code-examples:generate-js content/guides/some/example.ts\n```\n\n----------------------------------------\n\nTITLE: Building Handsontable and Installing Documentation Dependencies\nDESCRIPTION: Commands to build Handsontable packages and install documentation dependencies. This is the first step in setting up a local documentation server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Selected Context Menu Options in React (TSX)\nDESCRIPTION: TypeScript React implementation for configuring Handsontable with context menu options. This TSX example shows how to integrate Handsontable with typed context menu configuration in a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/context-menu/context-menu.md#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/context-menu/react/example2.tsx)\n```\n\n----------------------------------------\n\nTITLE: Building All Handsontable Packages\nDESCRIPTION: Command to build all Handsontable packages from the root directory. This includes JavaScript, React, Angular, Vue, and other packages.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Context Menu Integration for Row Hiding\nDESCRIPTION: Shows how to enable context menu integration for row hiding operations by enabling both ContextMenu and HiddenRows plugins.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-hiding/row-hiding.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  rowHeaders: true,\n  colHeaders: true,\n  contextMenu: true,\n  hiddenRows: {\n    rows: [1, 3, 5],\n    indicators: true\n  },\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable with npm\nDESCRIPTION: Command for installing the Handsontable package using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Project\nDESCRIPTION: These commands start the development server and then run the test specs for the Handsontable project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/vue/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Document Key Down Event Handler\nDESCRIPTION: Shows the implementation of an afterDocumentKeyDown hook handler, demonstrating the behavior change in how keyboard events are handled in version 12.0.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-11.1-to-12.0/migrating-from-11.1-to-12.0.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nafterDocumentKeyDown() {\n  // when you navigate the grid, the console message gets logged on every key press\n  // when you navigate the context menu, the console message doesn't get logged at all\n  console.log('key pressed');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Decrease Icon in SVG\nDESCRIPTION: SVG definition for a decimal decrease icon that shows a number with a downward arrow, typically used to decrease decimal precision.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_17\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3.1,14h1.8C4.955,14,5,13.955,5,13.9v-1.8C5,12.045,4.955,12,4.9,12H3.1C3.045,12,3,12.045,3,12.1v1.8C3,13.955,3.045,14,3.1,14z M11.716,4.533c-0.187-0.167-0.398-0.307-0.64-0.406C10.478,3.881,9.788,3.86,9.161,3.995C8.299,4.181,7.602,4.742,7.17,5.501C6.706,6.317,6.509,7.315,6.509,8.763c0,1.434,0.197,2.39,0.661,3.233c0.534,0.998,1.518,1.589,2.643,1.589c1.139,0,2.123-0.59,2.657-1.589c0.45-0.815,0.66-1.813,0.66-3.177c0-1.182-0.138-2.439-0.768-3.478C12.181,5.041,11.97,4.761,11.716,4.533z M9.826,11.897c-0.913,0-1.391-1.068-1.391-3.149c0-2.066,0.478-3.135,1.378-3.135c0.928,0,1.391,1.069,1.391,3.177C11.204,10.829,10.726,11.897,9.826,11.897z M16.6,16.875c-0.055,0-0.1-0.045-0.1-0.1V15l-2.429,2.429c-0.039,0.039-0.039,0.102,0,0.141L16.5,20v-1.775c0-0.055,0.045-0.1,0.1-0.1H21v-1.25H16.6z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Illustration of LRU Cache Structure\nDESCRIPTION: Visual representation of the doubly-linked list structure used in the LRU cache implementation, showing the relationships between entries and the head/tail pointers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/src/lib/lru/README.md#2025-04-10_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n           entry             entry             entry             entry        \n          | head |.newer => |      |.newer => |      |.newer => | tail |      \n.oldest = |  A   |          |  B   |          |  C   |          |  D   | = .newest\n          |______| <= older.|______| <= older.|______| <= older.|______|      \n                                                                             \n       removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data to CSV File in TypeScript\nDESCRIPTION: TypeScript implementation for exporting grid data to CSV file. It demonstrates binding a click event to a button that triggers the CSV export using exportFile plugin's downloadFile method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector<HTMLDivElement>('#example1');\nconst button = document.querySelector<HTMLButtonElement>('#export-file');\n\nconst hot = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ],\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  autoWrapRow: true,\n  autoWrapCol: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n\nbutton.addEventListener('click', () => {\n  const exportPlugin = hot.getPlugin('exportFile');\n\n  exportPlugin.downloadFile('csv', {\n    bom: false,\n    columnDelimiter: ',',\n    columnHeaders: false,\n    exportHiddenColumns: true,\n    exportHiddenRows: true,\n    fileExtension: 'csv',\n    filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',\n    mimeType: 'text/csv',\n    rowDelimiter: '\\r\\n',\n    rowHeaders: true\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building React Package from Root\nDESCRIPTION: Commands to build the React package (both class-based and functional) from the root directory of the Handsontable monorepo.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run in react build\nnpm run in react-wrapper build\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Hidden Columns\nDESCRIPTION: Example demonstrating how to specify which columns should be hidden by default using the columns configuration option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-hiding/column-hiding.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  hiddenColumns: {\n    columns: [1, 2, 5]\n  },\n  colHeaders: true,\n  rowHeaders: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to execute test specifications after the development server is running.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/js/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Angular Demo\nDESCRIPTION: Commands to start the development server and run test specs for the Handsontable Angular demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: LRU Cache Extension Example\nDESCRIPTION: Shows how to extend the LRU cache implementation by wrapping the shift method to add custom finalization logic when items are evicted.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/src/lib/lru/README.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet c = new LRUMap(123);\nc.shift = function() {\n  let entry = LRUMap.prototype.shift.call(this);\n  doSomethingWith(entry);\n  return entry;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Commercial License Key in React\nDESCRIPTION: Example of setting a commercial license key as a prop in a React component for Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/license-key/license-key.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable settings={settings} licenseKey=\"00000-00000-00000-00000-00000\" />\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: UpdateSettings Data Handling\nDESCRIPTION: Changed implementation of updateSettings() to improve performance by updating data without resetting states. This affects how data updates are handled across frameworks.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Previous behavior\nhot.updateSettings({ data: newData }); // Would reset states\n\n// New behavior\nhot.updateSettings({ data: newData }); // Updates data while preserving states\n```\n\n----------------------------------------\n\nTITLE: LRU Cache Usage Example\nDESCRIPTION: Demonstrates basic usage of the LRU cache implementation including setting values, getting values, and automatic eviction when capacity is reached.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/src/lib/lru/README.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet c = new LRUMap(3)\nc.set('adam',   29)\nc.set('john',   26)\nc.set('angela', 24)\nc.toString()        // -> \"adam:29 < john:26 < angela:24\"\nc.get('john')       // -> 26\n\n// Now 'john' is the most recently used entry, since we just requested it\nc.toString()        // -> \"adam:29 < angela:24 < john:26\"\nc.set('zorro', 141) // -> {key:adam, value:29}\n\n// Because we only have room for 3 entries, adding 'zorro' caused 'adam'\n// to be removed in order to make room for the new entry\nc.toString()        // -> \"angela:24 < john:26 < zorro:141\"\n```\n\n----------------------------------------\n\nTITLE: Running Test Specs\nDESCRIPTION: Command to execute the project's test specifications after the development server is running.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Exporting Handsontable Grid Data as Blob Object in React (TSX)\nDESCRIPTION: TypeScript React implementation for exporting grid data as a JavaScript Blob object. It uses TypeScript to properly type the HotTable reference and other components, providing better type safety.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/export-to-csv/export-to-csv.md#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport { useRef } from 'react';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef<HotTable>(null);\n\n  const data = [\n    ['A1', 'B1', 'C1', 'D1'],\n    ['A2', 'B2', 'C2', 'D2'],\n    ['A3', 'B3', 'C3', 'D3'],\n    ['A4', 'B4', 'C4', 'D4'],\n  ];\n\n  const exportBlob = () => {\n    // The `current` property contains the HotTable instance\n    const hot = hotRef.current.hotInstance;\n    // Get the plugin from the Handsontable instance\n    const exportPlugin = hot.getPlugin('exportFile');\n\n    const blob = exportPlugin.exportAsBlob('csv', {\n      bom: false,\n      columnDelimiter: ',',\n      columnHeaders: false,\n      exportHiddenColumns: true,\n      exportHiddenRows: true,\n      mimeType: 'text/csv',\n      rowDelimiter: '\\r\\n',\n      rowHeaders: true\n    });\n\n    console.log(blob);\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={exportBlob} className=\"button button--primary\">Export as Blob (see browser console)</button>\n      </div>\n      <br/>\n\n      <HotTable\n        ref={hotRef}\n        data={data}\n        rowHeaders={true}\n        colHeaders={true}\n        height=\"auto\"\n        autoWrapRow={true}\n        autoWrapCol={true}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 Package from Root Directory\nDESCRIPTION: Command to build the Vue 3 wrapper package from the Handsontable root directory. This builds only the Vue 3 package.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run in vue3 build\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Classes for Cell Formatting\nDESCRIPTION: Example CSS that defines custom styles for table cells and headers. Includes styling for highlighting specific cells and table headers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/formatting-cells/formatting-cells.md#2025-04-10_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.custom-cell {\n  background: #F00;\n  color: #FFF;\n  font-weight: bold;\n}\n\n.custom-table thead th {\n  background: #CCC;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 TypeScript Project for Production\nDESCRIPTION: This command performs type-checking, compilation, and minification of the project for production deployment.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Handsontable Demo\nDESCRIPTION: Launches a local development server for the Handsontable demo project. After running this command, the project can be viewed at http://localhost:5173.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/accessibility/README.md#2025-04-10_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 Package\nDESCRIPTION: Command to build the Vue 2 wrapper package for Handsontable. This builds only the Vue 2 package and should be run from the /wrappers/vue directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Frontmatter for Handsontable Documentation\nDESCRIPTION: Example of additional frontmatter tags used to customize the documentation site map using the vuepress-plugin-sitemap.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsitemap:\n  exclude: false\n  changefreq: hourly\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Cloud Icon in SVG\nDESCRIPTION: SVG path definition for a cloud icon.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M17,9.94a3.48,3.48,0,0,0-.79.09,5,5,0,0,0-9.37-.47,4,4,0,0,0-1.11.26,3.67,3.67,0,0,0-2.09,2.32A4.15,4.15,0,0,0,4.1,15.6a4.06,4.06,0,0,0,2.69,1.81,8.55,8.55,0,0,0,1.41.09h8.19a4.07,4.07,0,0,0,3.81-2.38,3.69,3.69,0,0,0,.33-1.68A3.5,3.5,0,0,0,17,9.94Zm2.26,4.76a3.09,3.09,0,0,1-2.9,1.8h-8A8.75,8.75,0,0,1,7,16.43a3.07,3.07,0,0,1-2.33-4,2.62,2.62,0,0,1,1.5-1.69,3,3,0,0,1,1.06-.2h.38l.12-.34a4,4,0,0,1,7.7.55l.11.61.57-.24a2.45,2.45,0,0,1,1-.19,2.5,2.5,0,0,1,2.5,2.5A2.83,2.83,0,0,1,19.29,14.7Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Column Headers with a Function in Handsontable\nDESCRIPTION: This example demonstrates how to use a function to dynamically set column headers in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-header/column-header.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders(index) {\n    return `${index} + 1`;\n  },\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example3');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders(index: number) {\n    return `${index} + 1`;\n  },\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable via NPM\nDESCRIPTION: Command to install Handsontable package using NPM package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable\n```\n\n----------------------------------------\n\nTITLE: Initializing with Specific Trimmed Rows in React\nDESCRIPTION: Configuration to enable row trimming and specify which rows to trim at initialization time in a React component. This example trims rows 5, 10, and 15.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-trimming/row-trimming.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// enable the `TrimRows` plugin\n// at Handsontable's initialization, trim rows 5, 10, and 15\n\n<HotTable\n  trimRows={[5, 10, 15]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Demo\nDESCRIPTION: Installs all necessary dependencies for the Handsontable demo project using npm.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/accessibility/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable TypeScript Demo\nDESCRIPTION: Installs all necessary dependencies for the Handsontable TypeScript demo project using npm.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/ts/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Angular Demo\nDESCRIPTION: Command to start the local development server for the Handsontable Angular demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Setting Layout Direction Automatically in JavaScript\nDESCRIPTION: Example showing how to configure Handsontable to automatically inherit layout direction from the HTML document's dir attribute.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/layout-direction/layout-direction.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  // layoutDirection: 'inherit' is the default setting\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Editor in Handsontable 8.0.0\nDESCRIPTION: Shows how to update a custom editor to use the new data-hot-input attribute instead of the previously required handsontableInput class name. This change allows for more flexible CSS class naming.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ncreateElements() {\n  ...\n  this.TEXTAREA.className = 'anythingYouWant';\n  this.TEXTAREA.setAttribute('data-hot-input', true);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document PDF Icon in SVG\nDESCRIPTION: SVG definition for a document icon with PDF text, representing PDF file format.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_21\n\nLANGUAGE: SVG\nCODE:\n```\n<path d=\"M13.79,12H8.25v.92h5.54Zm.65,5.85h-.51v.78h.51a.52.52,0,0,0,.36-.1.38.38,0,0,0,.12-.29A.37.37,0,0,0,14.8,18,.52.52,0,0,0,14.44,17.85Zm-.65-4H8.25v.92h5.54Zm2.53,4H15.9v1.67h.4c.5,0,.75-.27.75-.85a1,1,0,0,0-.15-.58A.62.62,0,0,0,16.32,17.85Zm.7-1.23V7.85L13.3,4.15H6.41A1.39,1.39,0,0,0,5,5.54V18.46a1.39,1.39,0,0,0,1.39,1.39h6.44v1H20V16.62ZM13.33,5.49l2.35,2.36H13.79a.47.47,0,0,1-.46-.47Zm-.48,13.43H6.41A.45.45,0,0,1,6,18.46V5.54a.45.45,0,0,1,.46-.46h6v2.3a1.38,1.38,0,0,0,1.38,1.39H16.1v7.85H13.79v-.93H8.25v.93h4.6Zm2.17-.2a.79.79,0,0,1-.6.17h-.49v.91h-.32V17.57h.78a.9.9,0,0,1,.62.16.63.63,0,0,1,.22.51A.6.6,0,0,1,15,18.72Zm1.34,1.08h-.78V17.57h.81a.86.86,0,0,1,.78.36,1.26,1.26,0,0,1,.2.73A1,1,0,0,1,16.36,19.8Zm2.95-1.95H18.13v.66h1v.27h-1v1h-.32V17.57h1.5Z\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to execute the test suite after starting the development server\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Basic Column Menu Implementation in React with JSX\nDESCRIPTION: React implementation of the column menu feature using JSX. The HotTable component is configured with dropdownMenu set to true to enable the default dropdown menu functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-menu/column-menu.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  // initialize the data array\n  const data = [\n    ['Tesla', 2017, 'black', 'black'],\n    ['Nissan', 2018, 'blue', 'blue'],\n    ['Chrysler', 2019, 'yellow', 'black'],\n    ['Volvo', 2020, 'yellow', 'gray']\n  ];\n\n  return (\n    <HotTable\n      data={data}\n      colHeaders={true}\n      rowHeaders={true}\n      height=\"auto\"\n      autoWrapRow={true}\n      autoWrapCol={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n      // enable dropdown menu\n      dropdownMenu={true}\n    />\n  );\n};\n\nexport default ExampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Command\nDESCRIPTION: Command to launch the local development server on port 8080\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react-wrapper/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing Handsontable with Bare Distribution\nDESCRIPTION: HTML code for bare distribution implementation, which requires loading Handsontable JS, CSS, and all external dependencies separately. Useful for customized implementations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/packages/packages.md#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Required dependencies (as external scripts) -->\n<script src=\"https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@handsontable/pikaday@1.0.0/pikaday.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/numbro@2.1.2/dist/numbro.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/dompurify@2.4.5/dist/purify.js\"></script>\n\n<!-- Handsontable bare files -->\n<script src=\"dist/handsontable.js\"></script>\n<link href=\"styles/handsontable.css\" rel=\"stylesheet\">\n<link href=\"styles/ht-theme-main.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Copying Template Directory Structure in Bash\nDESCRIPTION: Command to copy the JavaScript template directory to create a new example folder.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp -r templates/js next/docs/js/sorting-data-custom-order\n```\n\n----------------------------------------\n\nTITLE: Defining Common Package.json Properties for Handsontable Examples\nDESCRIPTION: JSON snippet showing the common properties in package.json that should not be modified for new code examples, including version, homepage, and repository information.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/README.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.0.0\",\n  \"homepage\": \"https://handsontable.com/\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/handsontable/handsontable.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/handsontable/handsontable/issues\"\n  },\n  \"author\": \"Handsoncode <hello@handsontable.com>\",\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"dependencies\": {\n    \"handsontable\": \"latest\",\n    \"@handsontable/{{ WRAPPER NAME }}\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable React Demo\nDESCRIPTION: This command starts the local development server for the Handsontable React demo project. After running this command, the project can be viewed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react-wrapper/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Workaround for minSpareRows behavior in React\nDESCRIPTION: Demonstrates a workaround for maintaining the previous minSpareRows behavior in a React component using Handsontable 8.0.0. It uses the beforeCreateRow hook to prevent automatic row creation under specific conditions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_34\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={[\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ]}\n  trimRows={[0]}\n  beforeCreateRow={(index, amount, source) => {\n    const rowIndexMapper = this.rowIndexMapper;\n    // if any row was skipped then block a creation of row execution.\n    if (source === 'auto' && rowIndexMapper.getNotSkippedIndexesLength() < rowIndexMapper.getNumberOfIndexes()) {\n      return false;\n    }\n  }}\n  minSpareRows={2}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Highlight Icon in SVG\nDESCRIPTION: SVG path definition for a highlight icon, typically used to represent text highlighting or emphasis functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_32\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12.907,15.455l-3.894-1.894c-0.052,0.018-0.081,0.028-0.134,0.046L8.051,15.3l1.019,0.495l-1.495,3.059c-0.032,0.066,0.016,0.143,0.089,0.144l2.203,0.007c0.092,0,0.176-0.052,0.216-0.134l1.023-2.085l1.019,0.495l0.828-1.693C12.935,15.536,12.925,15.507,12.907,15.455z M12.882,5.354l-3.42,7.055c-0.024,0.05-0.003,0.11,0.046,0.134l3.894,1.894c0.05,0.024,0.11,0.003,0.134-0.046l3.42-7.055c0.024-0.05,0.003-0.11-0.046-0.134l-3.894-1.894C12.966,5.283,12.906,5.304,12.882,5.354z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with Column Summary Plugin\nDESCRIPTION: This snippet demonstrates how to initialize Handsontable with the ColumnSummary plugin enabled. It sets up a basic data grid and configures column summaries.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-summary/column-summary.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable';\nimport 'handsontable/styles/handsontable.css';\nimport 'handsontable/styles/ht-theme-main.css';\n\nconst hot = new Handsontable(document.querySelector('#example'), {\n  licenseKey: 'non-commercial-and-evaluation',\n  data: [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15]\n  ],\n  colHeaders: true,\n  rowHeaders: true,\n  // set the `columnSummary` configuration option to an array of objects\n  columnSummary: [\n    {},\n    {}\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable React Demo\nDESCRIPTION: This command installs all necessary dependencies from npm for the Handsontable React demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react-wrapper/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-defined Comments in JavaScript\nDESCRIPTION: Example of how to pre-define a comment for a specific cell in Handsontable using cell metadata.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/comments/comments.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncell: [\n  { row: 1, col: 1, comment: { value: 'Hello world!' } }\n]\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Pushing New Example Code\nDESCRIPTION: Sequence of Git commands to add, commit, and push the new example code to the repository.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add examples\ngit commit\ngit push\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable React Demo\nDESCRIPTION: Installs all necessary dependencies from npm for the Handsontable React demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/react-wrapper/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoresizing in React Component\nDESCRIPTION: Example of disabling the default autoresizing behavior in a React HotTable component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/grid-size/grid-size.md#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable beforeRefreshDimensions={() => false} />\n```\n\n----------------------------------------\n\nTITLE: Extending Row Objects in JavaScript (Pre-8.0.0 vs Post-8.0.0)\nDESCRIPTION: Comparison of extending row objects in array of objects data before and after Handsontable 8.0.0. The setDataAtRowProp method is replaced with setSourceDataAtCell.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: [\n    { model: 'Roadster', company: 'Tesla' },\n    { model: 'i3', company: 'BMW' },\n  ],\n});\n\nhot.setDataAtRowProp(0, 'available', true) // in 8.0.0, this throws an error\nhot.setSourceDataAtCell(0, 'available', true) // in 8.0.0, this sets a new property\n```\n\n----------------------------------------\n\nTITLE: Defining Idea Icon in SVG\nDESCRIPTION: SVG path definition for an idea icon, typically used to represent innovative features or suggestions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_33\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M9.1,21h5.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H9.1C9.045,19,9,19.045,9,19.1v1.8C9,20.955,9.045,21,9.1,21z M9.1,18h5.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H9.1C9.045,16,9,16.045,9,16.1v1.8C9,17.955,9.045,18,9.1,18z M7.791,4.771c-1.317,1.291-2.066,3.175-1.703,5.262C6.391,11.768,7.477,13.309,9,14.191V15h6v-0.809c1.792-1.038,3-2.971,3-5.191c0-2.185-1.227-4.241-3.149-5.281C12.355,2.369,9.561,3.035,7.791,4.771z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Example\nDESCRIPTION: Command to start the local development server for the Handsontable project example. After running this command, the project can be viewed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/react-wrapper/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: React Component with Row Freezing (JSX)\nDESCRIPTION: React component implementation showing row freezing functionality using JSX syntax.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-freezing/row-freezing.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@/content/guides/rows/row-freezing/react/example1.jsx\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Demo\nDESCRIPTION: Command to install all necessary dependencies from npm for the Handsontable demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Commercial License Key in JavaScript\nDESCRIPTION: Example of setting a commercial license key in the Handsontable configuration object using JavaScript.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/license-key/license-key.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst settings = {\n  licenseKey: '00000-00000-00000-00000-00000',\n  //... other options\n}\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/js/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation to Staging Environment\nDESCRIPTION: Commands for building and pushing the Docker image for the staging environment. This deploys the documentation to the staging server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-DEPLOYMENT.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:docker:build\n\ndocker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:next\n```\n\n----------------------------------------\n\nTITLE: Enabling ColumnSorting Plugin in React (Pre-8.0.0)\nDESCRIPTION: React configuration for enabling ColumnSorting plugin before Handsontable 8.0.0. This automatically enabled ObserveChanges.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\ncolumnSorting={true}\n```\n\n----------------------------------------\n\nTITLE: Defining Sort Ascending Icon SVG Path\nDESCRIPTION: SVG path definition for a sort ascending icon, showing a series of horizontal bars increasing in length from bottom to top with an upward arrow.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_42\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M13,18.9v-1.8c0-0.055-0.045-0.1-0.1-0.1H3.1C3.045,17,3,17.045,3,17.1v1.8C3,18.955,3.045,19,3.1,19h9.8C12.955,19,13,18.955,13,18.9z M3,13.1v1.8C3,14.955,3.045,15,3.1,15h6.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H3.1C3.045,13,3,13.045,3,13.1z M3,9.1v1.8C3,10.955,3.045,11,3.1,11h4.8C7.955,11,8,10.955,8,10.9V9.1C8,9.045,7.955,9,7.9,9H3.1C3.045,9,3,9.045,3,9.1z M3,5.1v1.8C3,6.955,3.045,7,3.1,7h1.8C4.955,7,5,6.955,5,6.9V5.1C5,5.045,4.955,5,4.9,5H3.1C3.045,5,3,5.045,3,5.1z M17.071,18.929l3.759-3.759C20.892,15.108,20.848,15,20.759,15H18.1c-0.055,0-0.1-0.045-0.1-0.1V5.1C18,5.045,17.955,5,17.9,5h-1.8C16.045,5,16,5.045,16,5.1v9.8c0,0.055-0.045,0.1-0.1,0.1h-2.659c-0.089,0-0.134,0.108-0.071,0.171l3.759,3.759C16.968,18.968,17.032,18.968,17.071,18.929z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Basic Row Headers Example in JavaScript\nDESCRIPTION: Demonstrates how to initialize Handsontable with row headers and bind them to rows. Uses the bindRowsWithHeaders option to maintain header-row relationships during row movements.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-header/row-header.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst data = [\n  ['A1', 'B1', 'C1', 'D1'],\n  ['A2', 'B2', 'C2', 'D2'],\n  ['A3', 'B3', 'C3', 'D3'],\n  ['A4', 'B4', 'C4', 'D4'],\n];\n\nconst hot = new Handsontable(container, {\n  data,\n  rowHeaders: true,\n  colHeaders: true,\n  height: 'auto',\n  manualRowMove: true,\n  bindRowsWithHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable React Demo\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/react/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Column Headers with an Array in Handsontable\nDESCRIPTION: This example shows how to set custom column headers in Handsontable using an array of labels.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-header/column-header.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example2');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling NestedRows, Filters, and TrimRows Plugins in JavaScript (Post-8.0.0)\nDESCRIPTION: Updated configuration for enabling NestedRows, Filters, and TrimRows plugins in Handsontable 8.0.0+. TrimRows must be explicitly enabled.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nnestedRows: true,\ntrimRows: true\n\nfilters: true,\ntrimRows: true\n```\n\n----------------------------------------\n\nTITLE: Locating and Interacting with Table Cell\nDESCRIPTION: Uses the findCell helper to locate a specific cell in the table and perform an action on it.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst cell = helpers.tbody.locator(helpers.findCell({ row: 2, cell: 2, cellType: 'td' }));\n\nawait cell.click();\n```\n\n----------------------------------------\n\nTITLE: UI Indicators for Hidden Rows\nDESCRIPTION: Demonstrates how to enable visual indicators for hidden rows by setting the indicators property to true in the hiddenRows configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-hiding/row-hiding.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  rowHeaders: true,\n  colHeaders: true,\n  hiddenRows: {\n    rows: [1, 3, 5],\n    indicators: true\n  },\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Vue Demo\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Walkontable Reference in JavaScript\nDESCRIPTION: Example showing the property name change from 'wt' to '_wt' when accessing Handsontable's internal rendering engine. This change emphasizes that Walkontable is not part of the public API.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-11.1-to-12.0/migrating-from-11.1-to-12.0.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhandsontableInstance.view.wt  // Before\nhandsontableInstance.view._wt // After\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Project\nDESCRIPTION: This command installs all necessary dependencies for the Handsontable project using npm.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/vue/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Custom Context Menu with Row Hiding Options\nDESCRIPTION: Demonstrates how to add specific row hiding menu items to the context menu configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-hiding/row-hiding.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  data: getData(),\n  rowHeaders: true,\n  colHeaders: true,\n  contextMenu: ['hidden_rows_show', 'hidden_rows_hide'],\n  hiddenRows: {\n    rows: [1, 3, 5],\n    indicators: true\n  },\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Vue Demo\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with minSpareRows and TrimRows in React\nDESCRIPTION: Shows how to set up Handsontable with minSpareRows and TrimRows in a React component, demonstrating the new behavior in version 8.0.0 where spare rows are always present.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={[\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ]}\n  minSpareRows={2}\n  trimRows={[1, 2, 3, 4]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Spreadsheet Icons via NPM\nDESCRIPTION: Command to install the Handsontable spreadsheet icons package using NPM package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @handsontable/spreadsheet-icons\n```\n\n----------------------------------------\n\nTITLE: Copying Example to Separate Repository using Bash Commands\nDESCRIPTION: Series of bash commands demonstrating how to copy a Handsontable example into a new Git repository while handling dependencies and symbolic links correctly. Includes steps for initialization, dependency installation, and project startup.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# make a local clone of the repo, if you haven't already\ngit clone https://github.com/handsontable/handsontable.git\n\n# verify that you are in the folder of the example by checking that the README.md file is the one that you are reading right now\ncat README.md\n\n# if it exists, delete the \"node_modules\" folder of the example, because our NPM workspace sets it up as a symlink in the monorepo (which will not be useful in your fork)\nrm -rf node_modules\n\n# copy the example into a new folder called \"forked-example\" that is a sibling folder of the monorepo\ncp -r . ../../../../../../forked-example\n\n# go to your fork\ncd ../../../../../../forked-example\n\n# if you want, initiate a new Git repo there\ngit init\ngit add .\ngit commit -m \"initial commit in my fork of the Handsontable example\"\n\n# install dependencies and start the example\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Vue Demo\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable Vue demo project using npm.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Row Heights in Handsontable\nDESCRIPTION: This example demonstrates how to set a fixed height of 40px for all rows in a Handsontable grid using the rowHeights option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-height/row-height.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeights: 40,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example1');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeights: 40,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable TypeScript Demo\nDESCRIPTION: Executes test specs for the Handsontable TypeScript demo project. Requires the development server to be running before running the tests.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/ts/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing Handsontable with minSpareRows and TrimRows in JavaScript\nDESCRIPTION: Demonstrates the new behavior of minSpareRows when used with the TrimRows plugin in Handsontable 8.0.0. Spare rows are now always present and cannot be removed by trimming.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst hotInstance = new Handsontable(container, {\n  data: [\n    ['A1', 'B1', 'C1', 'D1', 'E1'],\n    ['A2', 'B2', 'C2', 'D2', 'E2'],\n    ['A3', 'B3', 'C3', 'D3', 'E3'],\n    ['A4', 'B4', 'C4', 'D4', 'E4'],\n    ['A5', 'B5', 'C5', 'D5', 'E5'],\n  ],\n  minSpareRows: 2,\n  trimRows: [1, 2, 3, 4]\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Handsontable Project\nDESCRIPTION: This command starts a local development server for the Handsontable project. After running this, the project can be accessed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/vue/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Demo\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/js/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Moving in JavaScript Handsontable\nDESCRIPTION: This example demonstrates how to enable the ManualRowMove plugin in Handsontable by setting the manualRowMove option to true. This allows users to drag and reorder rows using a handle that appears above the row header.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-moving/row-moving.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/rows/row-moving/javascript/example1.js)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Angular Demo\nDESCRIPTION: Installs all necessary dependencies for the project using npm.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/angular/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Extending Row Objects in React (Pre-8.0.0 vs Post-8.0.0)\nDESCRIPTION: Comparison of extending row objects in array of objects data in a React component before and after Handsontable 8.0.0. The setDataAtRowProp method is replaced with setSourceDataAtCell.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={[\n    { model: 'Roadster', company: 'Tesla' },\n    { model: 'i3', company: 'BMW' },\n  ]}\n/>\n\nhotTableComponentRef.current.hotInstance.setDataAtRowProp(0, 'available', true) // in 8.0.0, this throws an error\nhotTableComponentRef.current.hotInstance.setSourceDataAtCell(0, 'available', true) // in 8.0.0, this sets a new property\n```\n\n----------------------------------------\n\nTITLE: Configuring Collapsible Columns in JavaScript\nDESCRIPTION: Specifies which headers should have collapse/expand functionality by defining an array of objects with row, col, and collapsible properties. The row parameter uses negative values to count from the top header row.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-groups/column-groups.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncollapsibleColumns: [\n  { row: -4, col: 1, collapsible: true }, // Add the button to the 4th-level header of the 1st column - counting from the first table row upwards.\n  { row: -3, col: 5, collapsible: true }, // Add the button to the 3rd-level header of the 5th column - counting from the first table row upwards.\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server for the Handsontable example project. After running this command, the project will be accessible at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/react/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to launch the local development server on port 8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/js/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Preparing Nested Data Structure for Handsontable in TypeScript\nDESCRIPTION: This TypeScript example shows how to structure data for use with the NestedRows plugin in Handsontable. It defines interfaces for the data structure and creates a nested object representing Grammy nominees.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-parent-child/row-parent-child.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Nominee {\n  artist: string;\n  title: string;\n}\n\ninterface Category {\n  category: string;\n  __children?: Nominee[];\n}\n\nconst data: Category[] = [\n  {\n    category: 'Best Rock Performance',\n    __children: [\n      { artist: 'Alabama Shakes', title: \"Don't Wanna Fight\" },\n      { artist: 'Florence & The Machine', title: 'What Kind Of Man' },\n      { artist: 'Foo Fighters', title: 'Something From Nothing' },\n      { artist: 'Elle King', title: \"Ex's & Oh's\" },\n      { artist: 'Wolf Alice', title: 'Moaning Lisa Smile' }\n    ]\n  },\n  {\n    category: 'Best Rock Song',\n    __children: [\n      { artist: 'Alabama Shakes', title: \"Don't Wanna Fight\" },\n      { artist: 'Florence & The Machine', title: 'What Kind Of Man' },\n      { artist: 'Foo Fighters', title: 'Something From Nothing' },\n      { artist: 'Elle King', title: \"Ex's & Oh's\" },\n      { artist: 'James Bay', title: 'Hold Back The River' }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Angular Demo\nDESCRIPTION: Launches a local development server for the project. After running this command, the project can be viewed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/angular/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Example\nDESCRIPTION: Commands to run test specs for the Handsontable project example. The development server must be running before executing the tests.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/react-wrapper/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Angular Demo\nDESCRIPTION: Executes test specs for the project. The development server must be running before executing this command.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/angular/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Accessing and Using the TrimRows Plugin API\nDESCRIPTION: Examples of how to access the TrimRows plugin instance and use its API methods to programmatically trim and untrim rows. These methods can be used to manipulate row visibility dynamically.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-trimming/row-trimming.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin = hot.getPlugin('trimRows');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugin.trimRow(4);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugin.trimRow(0, 4, 6);\n// or\nplugin.trimRows([0, 4, 6]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugin.untrimRow(4);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugin.untrimRow(0, 4, 6);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nplugin.untrimRows([0, 4, 6]);\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Demo\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/angular/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Including Handsontable Internationalization Files in HTML\nDESCRIPTION: Shows how to include language files for Handsontable's internationalization support. Demonstrates options for including specific language packs or all languages at once.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/dist/README.md#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Internationalization, Polish - Poland language-country file -->\n<script src=\"dist/languages/pl-PL.js\"></script>\n\n<!-- Internationalization, all available language files in one file -->\n<script src=\"dist/languages/all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Column-specific Locales in JavaScript\nDESCRIPTION: Example of configuring different locales for individual columns in a Handsontable grid instance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/internationalization/locale/locale.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hot = new Handsontable(container, {\n  columns: [\n    {\n      // set the first column's locale to Polish\n      locale: 'pl-PL',\n    },\n    {\n      // set the second column's locale to German\n      locale: 'de-DE',\n    },\n    {\n      // set the third column's locale to Japanese\n      locale: 'ja-JP',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with npm\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable example project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/angular/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable React Demo\nDESCRIPTION: Executes test specs for the Handsontable React demo project. The development server must be running before running this command.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/react-wrapper/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Using PasswordEditor in Handsontable Configuration (React)\nDESCRIPTION: Shows how to use the custom PasswordEditor in a React component with HotTable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  columns={[\n    {\n      type: 'text'\n    },\n    {\n      editor: PasswordEditor\n      // If you want to use string 'password' instead of passing\n      // the actual editor class check out section \"Registering editor\"\n    }\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required npm packages for the Vue 3 TypeScript project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Including Bare Handsontable Distribution with External Dependencies in HTML\nDESCRIPTION: Demonstrates how to include the bare Handsontable distribution along with all required external dependencies. This approach requires manually including additional libraries like Pikaday, Moment.js, Numbro, and DOMPurify.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/dist/README.md#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Required dependencies (as external scripts) -->\n<link href=\"https://cdn.jsdelivr.net/npm/pikaday@1.5.1/css/pikaday.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.jsdelivr.net/npm/moment@2.20.1/moment.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/pikaday@1.5.1/pikaday.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/numbro@2/dist/numbro.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/dompurify@2.0.8/dist/purify.js\"></script>\n\n<!-- Optional dependencies -->\n<script src=\"https://cdn.jsdelivr.net/npm/hyperformula@0.6.0/dist/hyperformula.full.min.js\"></script>\n\n<!-- Handsontable bare files -->\n<script src=\"dist/handsontable.js\"></script>\n<link href=\"dist/handsontable.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server with hot-reload functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Demo\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/react/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Using SelectEditor in Handsontable Configuration\nDESCRIPTION: Example of how to use the custom SelectEditor in a Handsontable configuration. The second column uses the SelectEditor with predefined dropdown options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#container')\nconst hot = new Handsontable(container, {\n  columns: [\n    {},\n    {\n      editor: SelectEditor,\n      selectOptions: ['option1', 'option2', 'option3']\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all necessary project dependencies using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/js/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Including Minified Full Handsontable Distribution in HTML\nDESCRIPTION: Shows how to include the minified version of the full Handsontable distribution, which is optimized for production use with smaller file sizes.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/dist/README.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.min.js\"></script>\n<link href=\"dist/handsontable.full.min.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Autocorrection in JavaScript\nDESCRIPTION: This snippet illustrates how to enable or disable automatic correction of invalid dates in Handsontable using JavaScript configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/date-cell-type/date-cell-type.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndateFormat: 'YYYY-MM-DD',\n\n// default behavior\n// date entered as `30/12/2022` will be invalid\ncorrectFormat: false,\n\n// date entered as `30/12/2022` will be corrected to `2022/12/30`\ncorrectFormat: true,\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 TypeScript Project for Production\nDESCRIPTION: Command to type-check, compile, and minify the Vue 3 TypeScript project for production deployment. This creates optimized build files ready for hosting.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the local development server on port 8080\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Manual Resizing of Handsontable Grid\nDESCRIPTION: Example of manually triggering a grid resize using the refreshDimensions() method.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/getting-started/grid-size/grid-size.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhot.refreshDimensions();\n```\n\n----------------------------------------\n\nTITLE: Deploying Documentation to Production Environment\nDESCRIPTION: Commands for building and pushing the Docker image for the production environment. This deploys the documentation to the production server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-DEPLOYMENT.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:docker:build:production\n\ndocker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1\n```\n\n----------------------------------------\n\nTITLE: Including Full Handsontable Distribution in HTML\nDESCRIPTION: Shows how to include the full distribution of Handsontable using standard JS and CSS files. This approach is recommended as it bundles all dependencies into two files.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/dist/README.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"dist/handsontable.full.js\"></script>\n<link href=\"dist/handsontable.full.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable React Demo\nDESCRIPTION: Launches a local development server for the Handsontable React demo project. After running this command, the project can be viewed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/react-wrapper/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable and Angular Wrapper with npm\nDESCRIPTION: Uses npm to install the Handsontable library and its Angular wrapper. This is the first step in setting up Handsontable in an Angular project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-angular/angular-installation/angular-installation.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/angular\n```\n\n----------------------------------------\n\nTITLE: Reverting Production Deployment\nDESCRIPTION: Series of Docker commands to revert a production deployment to a previous version. This includes pulling a specific version, re-tagging it, and pushing it back to the registry.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-DEPLOYMENT.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1-[COMMIT_HASH]\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1-[COMMIT_HASH] docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker push docker.pkg.github.com/handsontable/handsontable/handsontable-documentation:v12.1\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Menu Width with CSS\nDESCRIPTION: CSS code to adjust the width of the filter menu in Handsontable. This allows better display of long text data in filters by setting the width to 300 pixels.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-filter/column-filter.md#2025-04-10_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.handsontable .htDropdownMenu table.htCore {\n  width: 300px !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Cell Type with Custom Hash Symbol in JavaScript\nDESCRIPTION: Demonstrates how to customize the hash symbol used for password masking using the hashSymbol option. This allows using any character, entity, or HTML as the masking symbol instead of the default asterisk.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/password-cell-type/password-cell-type.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/javascript/example3.js)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@[code](@/content/guides/cell-types/password-cell-type/javascript/example3.ts)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Angular Demo\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/angular/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Vue 2 and Handsontable Integration\nDESCRIPTION: This HTML snippet sets up the structure for a Vue 2 application with Handsontable integration. It includes a toggle switch for the readOnly property and a div for displaying the Vuex store dump.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-vuex-example/vue-vuex-example.md#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"example1\">\n  <div>\n    <label><input type=\"checkbox\" v-model=\"readOnly\"> Toggle <code>readOnly</code> for the entire table</label>\n  </div>\n  <br>\n  <hot-table :settings=\"hotSettings\"></hot-table>\n  <br>\n  <div class=\"controls\">\n    <button v-on:click=\"swapData\" class=\"button button--primary\">Swap data</button>\n  </div>\n  <div id=\"vuex-dump\">\n    <strong>Vuex store dump:</strong>\n    <br>\n    <pre>{{ JSON.stringify(this.$store.state.hotData, null, 2) }}</pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Golden Images for Visual Tests in Bash\nDESCRIPTION: Command to generate initial golden/reference images for visual comparison testing. This needs to be run before executing the actual tests for the first time.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/tests/README-TEST.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:visual-test:update-screenshot\n```\n\n----------------------------------------\n\nTITLE: Updated Custom Editor Class Definition in TypeScript\nDESCRIPTION: New way of defining a custom editor class in TypeScript, reflecting the changes in editor interfaces introduced in Handsontable 11.0.0.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-10.0-to-11.0/migrating-from-10.0-to-11.0.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomEditor extends Handsontable.editors.BaseEditor implements Handsontable.editors.BaseEditor ()\n```\n\n----------------------------------------\n\nTITLE: Example HTML Structure for Batch Operations Demo in Handsontable\nDESCRIPTION: HTML template for demonstrating batch operations in Handsontable, containing a container for the grid and elements to display render time statistics.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n<div class=\"controls\">\n  <button id=\"run\">Run</button>\n  <div class=\"timer\">Render time: <span id=\"render-time\">0ms</span></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Vue 2 ESM Format\nDESCRIPTION: Command to transpile the Vue 2 wrapper files into ESM format. This places the output in /wrappers/vue/es/vue-handsontable.mjs.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:es\n```\n\n----------------------------------------\n\nTITLE: Updating Data with updateSettings vs loadData in JavaScript\nDESCRIPTION: Demonstrates the difference between using updateSettings() and loadData() methods for updating data in Handsontable 12.0. While updateSettings() no longer resets configuration options and index mapper information, loadData() maintains this reset behavior.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-11.1-to-12.0/migrating-from-11.1-to-12.0.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Handsontable 12.0: this doesn't reset your configuration options and index mapper information\nhotInstance.updateSettings({\n  data: newDataset\n});\n\n// Handsontable 12.0: this does reset your configuration options and index mapper information\nhotInstance.loadData(newDataset);\n```\n\n----------------------------------------\n\nTITLE: Preparing Nested Data Structure for Handsontable in JavaScript\nDESCRIPTION: This example demonstrates how to structure data for use with the NestedRows plugin in Handsontable. It creates a nested object representing Grammy nominees with parent categories and child nominees.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-parent-child/row-parent-child.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  {\n    category: 'Best Rock Performance',\n    __children: [\n      { artist: 'Alabama Shakes', title: \"Don't Wanna Fight\" },\n      { artist: 'Florence & The Machine', title: 'What Kind Of Man' },\n      { artist: 'Foo Fighters', title: 'Something From Nothing' },\n      { artist: 'Elle King', title: \"Ex's & Oh's\" },\n      { artist: 'Wolf Alice', title: 'Moaning Lisa Smile' }\n    ]\n  },\n  {\n    category: 'Best Rock Song',\n    __children: [\n      { artist: 'Alabama Shakes', title: \"Don't Wanna Fight\" },\n      { artist: 'Florence & The Machine', title: 'What Kind Of Man' },\n      { artist: 'Foo Fighters', title: 'Something From Nothing' },\n      { artist: 'Elle King', title: \"Ex's & Oh's\" },\n      { artist: 'James Bay', title: 'Hold Back The River' }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Vue 3 TypeScript Project\nDESCRIPTION: This command installs all necessary dependencies for the Vue 3 TypeScript project as defined in the package.json file.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Operations in React with JSX\nDESCRIPTION: React implementation using JSX showing how to leverage the batch() method in Handsontable for improved performance when making multiple table modifications.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/batch-operations/batch-operations.md#2025-04-10_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect, useRef } from 'react';\nimport { HotTable } from '@handsontable/react';\nimport { registerAllModules } from 'handsontable/registry';\nimport 'handsontable/dist/handsontable.full.min.css';\n\n// register Handsontable's modules\nregisterAllModules();\n\nexport const ExampleComponent = () => {\n  const hotRef = useRef(null);\n  const [renderTime, setRenderTime] = useState(0);\n  const [renderedData, setRenderedData] = useState(() => {\n    return Array.from({ length: 300 }, (_, row) => \n      Array.from({ length: 100 }, (_, col) => `${String.fromCharCode(65 + (col % 26))}${row + 1}`)\n    );\n  });\n\n  const runBatch = () => {\n    const hot = hotRef.current.hotInstance;\n\n    // create a dataset to insert\n    const dataToInsert = [];\n    for (let row = 0; row < 5; row++) {\n      const rowData = [];\n      for (let col = 0; col < 5; col++) {\n        rowData.push(`${String.fromCharCode(65 + (col % 26))}${row + 1}`);\n      }\n      dataToInsert.push(rowData);\n    }\n\n    const t0 = performance.now();\n\n    hot.batch(() => {\n      // set the dataset at the specific coordinates\n      hot.populateFromArray(5, 2, dataToInsert);\n      \n      // change the header for selected column\n      hot.updateSettings({\n        columns: [{\n          data: 1,\n          renderer(instance, td, row, col, prop, value) {\n            td.innerText = `${value} USD`;\n            td.style.color = '#FF0000';\n            \n            return td;\n          }\n        }]\n      });\n      \n      // change column alignment\n      hot.updateSettings({\n        colWidths: [45, 100, 100, 110, 100]\n      });\n      \n      // alter the table to have more rows\n      hot.alter('insert_row_above', 5, 15);\n      \n      // alter the table to have more columns\n      hot.alter('insert_col_start', 2, 5);\n    });\n    \n    const t1 = performance.now();\n    setRenderTime(Math.round(t1 - t0));\n  };\n\n  return (\n    <div>\n      <HotTable\n        ref={hotRef}\n        data={renderedData}\n        width=\"100%\"\n        height={320}\n        licenseKey=\"non-commercial-and-evaluation\"\n      />\n      \n      <div className=\"controls\">\n        <button onClick={runBatch}>Run</button>\n        <div className=\"timer\">Render time: <span>{renderTime}ms</span></div>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 ESM Format\nDESCRIPTION: Command to transpile the Vue 3 wrapper files into ESM format. This places the output in /wrappers/vue3/es/vue-handsontable.mjs.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:es\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Context Menu Options in React (TSX)\nDESCRIPTION: TypeScript React implementation for creating custom context menu options in Handsontable. This example shows how to extend the default context menu with custom, type-safe functionality in a React component.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/context-menu/context-menu.md#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n@[code](@/content/guides/accessories-and-menus/context-menu/react/example4.tsx)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable Demo\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/prs/react/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Handsontable Modules in JavaScript\nDESCRIPTION: Demonstrates how to import only the base Handsontable module and the ContextMenu plugin instead of the complete package to reduce bundle size.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/bundle-size/bundle-size.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Handsontable from 'handsontable/base';\nimport { registerPlugin, ContextMenu } from 'handsontable/plugins';\n\nregisterPlugin(ContextMenu);\n\nnew Handsontable(container, {\n  contextMenu: true,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition Update\nDESCRIPTION: Updated TypeScript definition for setDataAtCell() method to improve type safety and documentation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Updated TypeScript definition\nsetDataAtCell(row: number, column: number, value: any, source?: string): void;\n```\n\n----------------------------------------\n\nTITLE: Enabling Comments in Handsontable with React\nDESCRIPTION: React component configuration to enable the comments feature in a Handsontable data grid, allowing users to add notes to cells.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-features/comments/comments.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HotTable\n  data={[\n    ['A1', 'B1', 'C1'],\n    ['A2', 'B2', 'C2'],\n  ]}\n  comments={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Column Headers with Custom CSS in Handsontable\nDESCRIPTION: This example demonstrates how to apply custom CSS styles to column headers in Handsontable using the headerClassName option.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-header/column-header.md#2025-04-10_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.custom-header {\n  font-weight: bold;\n  color: #ff0000;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example5');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: true,\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation',\n  columns: [\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' }\n  ]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example5');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  width: '100%',\n  height: 'auto',\n  colHeaders: true,\n  rowHeaders: true,\n  licenseKey: 'non-commercial-and-evaluation',\n  columns: [\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' },\n    { headerClassName: 'custom-header' }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack to Ignore Moment.js Locales\nDESCRIPTION: Webpack configuration to ignore all Moment.js locale files using webpack's IgnorePlugin, reducing the bundle size by excluding unnecessary locales.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/bundle-size/bundle-size.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require('webpack');\n\nmodule.exports = {\n  //...\n  plugins: [\n    // ignore all Moment.js locale files\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue References\nDESCRIPTION: Reference links to GitHub issues and pull requests documenting changes\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/changelog/changelog.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#11388](https://github.com/handsontable/handsontable/pull/11388)\n[#11420](https://github.com/handsontable/handsontable/pull/11420)\n[#11436](https://github.com/handsontable/handsontable/pull/11436)\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable CSS Files\nDESCRIPTION: Importing required CSS files for Handsontable base styles and main theme variables.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/react-wrapper/README.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Base CSS rules\nimport 'handsontable/styles/handsontable.min.css';\n// Main theme variables\nimport 'handsontable/styles/ht-theme-main.min.css';\n```\n\n----------------------------------------\n\nTITLE: Using Batch Operations to Suspend Rendering\nDESCRIPTION: Use the batch method to group multiple operations and delay rendering until all operations are complete. This reduces the number of render calls and improves performance.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/optimization/performance/performance.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhot.batch(() => {\n  hot.alter('insert_row_above', 5, 45);\n  hot.setDataAtCell(1, 1, 'x');\n\n  const filters = hot.getPlugin('filters');\n\n  filters.addCondition(2, 'contains', ['3']);\n  filters.filter();\n  hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n  // The table cache will be recalculated and table render will be called once after executing the callback\n});\n```\n\n----------------------------------------\n\nTITLE: Border Bottom Icon SVG Path\nDESCRIPTION: SVG path definition for a bottom border icon showing a grid with emphasized bottom line\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_2\n\nLANGUAGE: SVG\nCODE:\n```\n<path d=\"M4.9,3H3.1C3.045,3,3,3.045,3,3.1v1.8C3,4.955,3.045,5,3.1,5h1.8C4.955,5,5,4.955,5,4.9V3.1C5,3.045,4.955,3,4.9,3z M4.9,7H3.1C3.045,7,3,7.045,3,7.1v1.8C3,8.955,3.045,9,3.1,9h1.8C4.955,9,5,8.955,5,8.9V7.1C5,7.045,4.955,7,4.9,7z M4.9,15H3.1C3.045,15,3,15.045,3,15.1v1.8C3,16.955,3.045,17,3.1,17h1.8C4.955,17,5,16.955,5,16.9v-1.8C5,15.045,4.955,15,4.9,15z M3.1,21h17.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H3.1C3.045,19,3,19.045,3,19.1v1.8C3,20.955,3.045,21,3.1,21z\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Editor in Vue 2 HTML Template\nDESCRIPTION: This HTML template sets up the structure for a Vue 2 component using Handsontable with a custom editor. It includes a div with the id 'example1' where the HotTable component will be rendered.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/integrate-with-vue/vue-custom-editor-example/vue-custom-editor-example.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"example1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Default Callback Implementation in JavaScript\nDESCRIPTION: The default callback function used by the Search plugin to set the isSearchResult property on cell metadata based on the search result.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/navigation/searching-values/searching-values.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {\n  instance.getCellMeta(row, col).isSearchResult = testResult;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Settings Configuration\nDESCRIPTION: Demonstrates how to configure a custom plugin's SETTING_KEYS to control when the plugin gets updated during updateSettings() calls.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-11.1-to-12.0/migrating-from-11.1-to-12.0.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get SETTING_KEYS() {\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definitions\nDESCRIPTION: Collection of SVG path definitions for various UI icons including borders, bullets, calendars, carets, checkboxes, and other interface elements. Each icon is defined with a 24x24 viewBox.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_4\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n  <path d=\"M19.1,21h1.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1h-1.8c-0.055,0-0.1,0.045-0.1,0.1v1.8C19,20.955,19.045,21,19.1,21z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Initializing Fixed Columns in JavaScript\nDESCRIPTION: Example showing how to initialize Handsontable with fixed columns using the fixedColumnsStart option. The grid container requires width and overflow:hidden CSS properties.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/columns/column-freezing/column-freezing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example1');\n\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 10),\n  rowHeaders: true,\n  colHeaders: true,\n  fixedColumnsStart: 2,\n  width: '100%',\n  height: 320,\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Using updateData() to Insert Formulas in JavaScript\nDESCRIPTION: Fixed an issue where formulas inserted programmatically using updateData() were not evaluated.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/changelog/changelog.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nhot.updateData([[1, 2, '=SUM(A1:B1)']]);\n```\n\n----------------------------------------\n\nTITLE: Defining Clock Icon in SVG\nDESCRIPTION: SVG path definition for a clock icon, including hour and minute hands.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_5\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12,4a8,8,0,1,0,8,8A8,8,0,0,0,12,4Zm0,15.11A7.11,7.11,0,1,1,19.11,12,7.12,7.12,0,0,1,12,19.11Z\"/><circle cx=\"12\" cy=\"6.22\" r=\"0.44\"/><circle cx=\"12\" cy=\"17.78\" r=\"0.44\"/><circle cx=\"17.78\" cy=\"12\" r=\"0.44\"/><circle cx=\"6.22\" cy=\"12\" r=\"0.44\"/><path d=\"M16.09,15.64a.44.44,0,0,0-.32.13.45.45,0,0,0,0,.63.44.44,0,0,0,.32.13.43.43,0,0,0,.31-.13.45.45,0,0,0,0-.63A.43.43,0,0,0,16.09,15.64Z\"/><path d=\"M7.91,7.47a.43.43,0,0,0-.31.13.45.45,0,0,0,0,.63.43.43,0,0,0,.31.13.44.44,0,0,0,.32-.13.45.45,0,0,0,0-.63A.44.44,0,0,0,7.91,7.47Z\"/><path d=\"M16.09,7.47a.44.44,0,0,0-.32.13.45.45,0,0,0,0,.63.44.44,0,0,0,.32.13.43.43,0,0,0,.31-.13.45.45,0,0,0,0-.63A.43.43,0,0,0,16.09,7.47Z\"/><path d=\"M7.91,15.64a.43.43,0,0,0-.31.13.45.45,0,0,0,0,.63.43.43,0,0,0,.31.13.44.44,0,0,0,.32-.13.45.45,0,0,0,0-.63A.44.44,0,0,0,7.91,15.64Z\"/><path d=\"M14.28,13.64l-1.79-1.79V8.45a.45.45,0,1,0-.89,0V12h0a.45.45,0,0,0,.13.32l1.92,1.92a.45.45,0,0,0,.63-.63Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Editor\nDESCRIPTION: Example of registering a custom editor with a unique alias in Handsontable.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nHandsontable.editors.registerEditor('select', SelectEditor);\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Row Resizing in Handsontable\nDESCRIPTION: This example shows how to enable manual row resizing in Handsontable by setting the manualRowResize option to true and enabling row headers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-height/row-height.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = document.querySelector('#example4');\nconst hot = new Handsontable(container, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeaders: true,\n  manualRowResize: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst container = document.querySelector('#example4');\nconst hot = new Handsontable(container as HTMLElement, {\n  data: Handsontable.helper.createSpreadsheetData(5, 5),\n  rowHeaders: true,\n  manualRowResize: true,\n  height: 'auto',\n  licenseKey: 'non-commercial-and-evaluation'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Handsontable\nDESCRIPTION: HTML markup that creates a container for the Handsontable grid with an ID and theme class.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/README.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Set the container's ID and apply the desired theme -->\n<div id=\"handsontable-example\" class=\"ht-theme-main-dark-auto\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Close Icon in SVG\nDESCRIPTION: SVG path definition for a close (X) icon.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_6\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.136,7.136l-1.273-1.273c-0.039-0.039-0.102-0.039-0.141,0l-4.523,4.523c-0.039,0.039-0.102,0.039-0.141,0L7.535,5.864c-0.039-0.039-0.102-0.039-0.141,0L6.121,7.136c-0.039,0.039-0.039,0.102,0,0.141l4.523,4.523c0.039,0.039,0.039,0.102,0,0.141l-4.523,4.523c-0.039,0.039-0.039,0.102,0,0.141l1.273,1.273c0.039,0.039,0.102,0.039,0.141,0l4.523-4.523c0.039-0.039,0.102-0.039,0.141,0l4.523,4.523c0.039,0.039,0.102,0.039,0.141,0l1.273-1.273c0.039-0.039,0.039-0.102,0-0.141l-4.523-4.523c-0.039-0.039-0.039-0.102,0-0.141l4.523-4.523C18.175,7.239,18.175,7.175,18.136,7.136z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Styling the SelectEditor in CSS\nDESCRIPTION: CSS styles for the htSelectEditor class that ensure proper positioning and appearance of the select dropdown. Includes a WebKit-specific hack to allow changing the dimensions of the select element.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-functions/cell-editor/cell-editor.md#2025-04-10_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.htSelectEditor {\n  /*\n   * This hack enables to change <select> dimensions in WebKit browsers\n   */\n  -webkit-appearance: menulist-button !important;\n  position: absolute;\n  width: auto;\n  z-index: 300;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Container for Handsontable Grid\nDESCRIPTION: HTML markup for creating the container element that will hold the Handsontable grid instance. Includes theme class for styling.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/handsontable/README.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"handsontable-example\" class=\"ht-theme-main-dark-auto\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Cloud Download Icon in SVG\nDESCRIPTION: SVG path definition for a cloud with download arrow icon.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M17,9.94a3.48,3.48,0,0,0-.79.09,5,5,0,0,0-9.37-.47,4,4,0,0,0-1.11.26,3.67,3.67,0,0,0-2.09,2.32A4.15,4.15,0,0,0,4.1,15.6a4.06,4.06,0,0,0,2.69,1.81,8.55,8.55,0,0,0,1.41.09h8.19a4.07,4.07,0,0,0,3.81-2.38,3.69,3.69,0,0,0,.33-1.68A3.5,3.5,0,0,0,17,9.94Zm2.26,4.76a3.09,3.09,0,0,1-2.9,1.8h-8A8.75,8.75,0,0,1,7,16.43a3.07,3.07,0,0,1-2.33-4,2.62,2.62,0,0,1,1.5-1.69,3,3,0,0,1,1.06-.2h.38l.12-.34a4,4,0,0,1,7.7.55l.11.61.57-.24a2.45,2.45,0,0,1,1-.19,2.5,2.5,0,0,1,2.5,2.5A2.83,2.83,0,0,1,19.29,14.7ZM12,10H11v3H9.46l2,2,2-2H12Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Icon in SVG\nDESCRIPTION: SVG definition for a simple dash/minus icon, typically used for subtraction, collapsing elements, or as a horizontal divider in interfaces.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_13\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M17.9,11H6.1C6.045,11,6,11.045,6,11.1v1.8C6,12.955,6.045,13,6.1,13h11.8c0.055,0,0.1-0.045,0.1-0.1v-1.8C18,11.045,17.955,11,17.9,11z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Trimming in JavaScript\nDESCRIPTION: Basic configuration to enable the TrimRows plugin in Handsontable using JavaScript. This setting allows the table to support row trimming functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/rows/row-trimming/row-trimming.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// enable the `TrimRows` plugin\ntrimRows: true,\n```\n\n----------------------------------------\n\nTITLE: Legacy vs New Formula Plugin Initialization in React\nDESCRIPTION: Shows how to initialize the formula plugin in React before and after version 9.0, demonstrating the requirement to import and pass HyperFormula as an external dependency.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-8.4-to-9.0/migrating-from-8.4-to-9.0.md#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HyperFormula } from 'hyperformula';\n\nformulas={{\n      engine: HyperFormula\n}}\n```\n\n----------------------------------------\n\nTITLE: Defining Cut Icon in SVG\nDESCRIPTION: SVG definition for a scissor/cut icon that visually represents the cutting action, typically used for edit operations in interfaces.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_12\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M20.002,8.569c0.855-0.784,0.037-2.251-1-1.732l-5.621,3.245c-0.037,0.021-0.085,0.015-0.117-0.012c-0.562-0.477-0.971-0.824-1.095-0.929c-0.606-0.512,0.222-2.289-0.559-2.813c-5.932-3.98-6.94,2.827-6.477,3.188c0.009,0.007,0.018,0.011,0.028,0.017l4.435,2.561c0.067,0.038,0.067,0.135,0,0.173l-4.451,2.57c-0.494,0.247,0.5,6.455,6.464,3.196c0.825-0.451-0.047-2.3,0.559-2.813C12.775,14.708,20.002,8.569,20.002,8.569z M8.719,18.167c-1.179,0-2.135-0.956-2.135-2.135c0-1.179,0.956-2.135,2.135-2.135s2.135,0.956,2.135,2.135C10.854,17.211,9.898,18.167,8.719,18.167z M8.719,10.333c-1.179,0-2.135-0.956-2.135-2.135c0-1.179,0.956-2.135,2.135-2.135s2.135,0.956,2.135,2.135C10.854,9.377,9.898,10.333,8.719,10.333z M17.144,13.321c-0.04-0.034-0.099-0.032-0.136,0.005l-1.905,1.905c-0.047,0.047-0.036,0.124,0.021,0.157l3.878,2.135c1.037,0.519,1.855-0.948,1-1.732C20.002,15.792,18.917,14.827,17.144,13.321z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Building Vue 3 Minified Bundles\nDESCRIPTION: Command to create minified Vue 3 wrapper bundles. Creates both minified and map files in the /wrappers/vue3/dist/ directory.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/tools-and-building/custom-builds/custom-builds.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:min\n```\n\n----------------------------------------\n\nTITLE: New Autofill Hooks Implementation in JavaScript\nDESCRIPTION: Shows the updated implementation of beforeAutofill and afterAutofill hooks in version 9.0 with new parameter structure in JavaScript.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-8.4-to-9.0/migrating-from-8.4-to-9.0.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Handsontable(container, {\n  data,\n  beforeAutofill(selectionData, sourceRange, targetRange, direction) {\n    const start = targetRange.from // used to be `start`\n    const end = targetRange.to // used to be `end`\n    const data = selectionData // used to be `data`\n  },\n  afterAutofill(fillData, sourceRange, targetRange, direction) {\n    const start = targetRange.from // used to be `start`\n    const end = targetRange.to // used to be `end`\n    const data = fillData // used to be `data`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Increase Icon in SVG\nDESCRIPTION: SVG definition for a decimal increase icon that shows a number with an upward arrow, typically used to increase decimal precision.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_18\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3.1,14h1.8C4.955,14,5,13.955,5,13.9v-1.8C5,12.045,4.955,12,4.9,12H3.1C3.045,12,3,12.045,3,12.1v1.8C3,13.955,3.045,14,3.1,14z M11.698,4.556c-0.293-0.236-0.644-0.413-1.061-0.511c-0.548-0.128-1.128-0.127-1.671,0.027C8.2,4.29,7.563,4.811,7.17,5.501C6.706,6.317,6.509,7.315,6.509,8.763c0,1.434,0.197,2.39,0.661,3.233c0.534,0.998,1.518,1.589,2.643,1.589c1.139,0,2.123-0.59,2.657-1.589c0.45-0.815,0.66-1.813,0.66-3.177C13.13,7.373,12.868,5.498,11.698,4.556z M9.826,11.897c-0.913,0-1.391-1.068-1.391-3.149c0-2.066,0.478-3.135,1.378-3.135c0.928,0,1.391,1.069,1.391,3.177C11.204,10.829,10.726,11.897,9.826,11.897z M17.683,13.584c1.139,0,2.123-0.59,2.657-1.589C20.79,11.181,21,10.183,21,8.819c0-1.12-0.091-2.323-0.635-3.326c-0.637-1.176-1.944-1.767-3.259-1.513c-0.102,0.02-0.202,0.044-0.301,0.074c-0.757,0.226-1.386,0.758-1.765,1.448c-0.464,0.815-0.661,1.813-0.661,3.261c0,1.434,0.197,2.39,0.661,3.233C15.574,12.994,16.558,13.584,17.683,13.584z M17.683,5.614c0.928,0,1.391,1.069,1.391,3.177c0,2.038-0.478,3.107-1.378,3.107c-0.913,0-1.391-1.068-1.391-3.149C16.305,6.682,16.783,5.614,17.683,5.614z M18.5,16.775c0,0.055-0.045,0.1-0.1,0.1H14v1.25h4.4c0.055,0,0.1,0.045,0.1,0.1V20l2.429-2.429c0.039-0.039,0.039-0.102,0-0.141L18.5,15V16.775z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable CSS Styles\nDESCRIPTION: CSS imports for Handsontable's required stylesheets.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/README.md#2025-04-10_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '~handsontable/styles/handsontable.min.css';\n@import '~handsontable/styles/ht-theme-main.min.css';\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Definitions\nDESCRIPTION: Collection of SVG icon definitions with associated labels. Each icon is defined with specific viewBox and path parameters for use in UI elements.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"icons-wrapper\">\n  <div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3.126 3.114l6.853 8.812c.014.017.02.04.02.06v6.904c0 .038.02.073.055.09l3.8 1.9a.1.1 0 0 0 .145-.089v-8.804c0-.022.007-.044.02-.06l6.853-8.812a.1.1 0 0 0-.079-.161H3.204c-.083 0-.13.096-.078.16z\"/></svg><span>active-filter</span></div>\n  <!-- Additional icons omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Handsontable Cell Type Example - JSX\nDESCRIPTION: Demonstrates how to implement a Handsontable cell type with spreadsheet editor popup in React using JSX.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/cell-types/handsontable-cell-type/handsontable-cell-type.md#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@[code](@/content/guides/cell-types/handsontable-cell-type/react/example1.jsx)\n```\n\n----------------------------------------\n\nTITLE: Defining Formula Icon in SVG\nDESCRIPTION: SVG path definition for a formula icon, representing mathematical or spreadsheet formula functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_26\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M8.577,17.167l2.051-8.162h1.913l0.479-1.901H11.11l0.202-0.805c0.182-0.723,0.318-0.785,0.936-0.785c0.176,0,0.497-0.003,0.686,0.029l0.458,0.08l0.5-1.994L13.35,3.545C13.068,3.501,12.912,3.5,12.598,3.5c-1.803,0-2.797,0.759-3.225,2.461L9.086,7.104H7.695L7.217,9.005h1.393l-2.05,8.162H8.577z M11.617,9.765l1.803,3.461l-4.098,3.941h2.485l2.426-2.396l1.234,2.396h2.178l-1.995-3.743l3.776-3.659h-2.479l-2.118,2.088l-1.056-2.088H11.617z M4,19v2h16v-2H4z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Locating and Interacting with Dropdown Menu Expander\nDESCRIPTION: Uses the findDropdownMenuExpander helper to locate and interact with a column menu button.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst changeTypeButton = table.locator(helpers.findDropdownMenuExpander({ col: 2 }));\n\nawait changeTypeButton.click();\n```\n\n----------------------------------------\n\nTITLE: Creating Non-editable Examples with HandsontablePreview\nDESCRIPTION: Shows how to embed a non-editable example using the HandsontablePreview component to display just the result of the code.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<HandsontablePreview>\n```js\n  // enter the Handsontable-related code here.\n  const containerElement = document.querySelector('#hot');\n\n  new Handsontable(containerElement, {});\n```\n</HandsontablePreview>\n```\n\n----------------------------------------\n\nTITLE: Defining Share Icon SVG Path\nDESCRIPTION: SVG path definition for a share icon, featuring an arrow pointing out of a box.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_41\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19.9,14h-1.8c-0.055,0-0.1,0.045-0.1,0.1v3.8c0,0.055-0.045,0.1-0.1,0.1H5.1C5.045,18,5,17.955,5,17.9V6.1C5,6.045,5.045,6,5.1,6h5.8C10.955,6,11,5.955,11,5.9V4.1C11,4.045,10.955,4,10.9,4H3.1C3.045,4,3,4.045,3,4.1v15.8C3,19.955,3.045,20,3.1,20h16.8c0.055,0,0.1-0.045,0.1-0.1v-5.8C20,14.045,19.955,14,19.9,14z M17.312,4.176c-0.276-0.276-0.8-0.388-0.8,0.288c0,0.231-0.012,2.257-0.012,2.257c-6.149,0.021-8.613,2.755-9.596,5.075c-0.831,1.962,0.489,5.304,0.489,5.304l0.104-1.052c0.305-3.089,2.835-6.382,9.002-6.51v2.108c-0.006,0.341,0.516,0.398,0.694,0.229c0.212-0.2,3.808-3.486,3.808-3.486c0.14-0.143,0.14-0.372,0-0.514L17.312,4.176z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Checking for Mac OS in Tests\nDESCRIPTION: Shows how to use the isMac helper to perform Mac-specific actions in tests.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (helpers.isMac) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Set for Handsontable UI\nDESCRIPTION: Collection of SVG path definitions that define various UI icons including formatting controls (italic, keyboard), navigation arrows, cell merging tools, and other interface elements. Each icon is defined using precise path coordinates and styling attributes.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_39\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19,6.937V5.063C19,5.028,18.972,5,18.937,5H9.063C9.028,5,9,5.028,9,5.063v1.874C9,6.972,9.028,7,9.063,7H12.3c0.042,0,0.073,0.041,0.06,0.081l-2.731,8.874C9.621,15.982,9.596,16,9.569,16H6.063C6.028,16,6,16.028,6,16.063v1.874C6,17.972,6.028,18,6.063,18h9.874C15.972,18,16,17.972,16,17.937v-1.874C16,16.028,15.972,16,15.937,16H12.7c-0.042,0-0.073-0.041-0.06-0.081l2.731-8.874C15.379,7.018,15.404,7,15.431,7h3.506C18.972,7,19,6.972,19,6.937z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Using Named Imports in React\nDESCRIPTION: Demonstrates the proper way to use named imports in React components rather than accessing methods through the React object.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRef } from 'react';\nuseRef(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom-out Icon with SVG in Handsontable\nDESCRIPTION: SVG definition for a zoom-out icon used in Handsontable spreadsheet component. The SVG draws a magnifying glass with a minus symbol inside to represent zoom-out functionality. The implementation includes path data and styling to render the icon properly.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_44\n\nLANGUAGE: HTML\nCODE:\n```\n<div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M6.6,11.5h6.8c0.055,0,0.1-0.045,0.1-0.1V9.6c0-0.055-0.045-0.1-0.1-0.1H6.6c-0.055,0-0.1,0.045-0.1,0.1v1.8C6.5,11.455,6.545,11.5,6.6,11.5z M15.955,14.041c-0.033-0.033-0.037-0.083-0.011-0.122C16.61,12.925,17,11.755,17,10.5C17,6.916,13.859,4,10,4s-7,2.916-7,6.5S6.141,17,10,17c1.696,0,3.251-0.566,4.464-1.502c0.039-0.03,0.093-0.027,0.127,0.008l4.881,4.881c0.039,0.039,0.102,0.039,0.141,0l1.273-1.273c0.039-0.039,0.039-0.102,0-0.141L15.955,14.041z M10,15.375c-2.895,0-5.25-2.187-5.25-4.875S7.105,5.625,10,5.625s5.25,2.187,5.25,4.875S12.895,15.375,10,15.375z\"/></svg><span>zoom-out</span></div>\n```\n\n----------------------------------------\n\nTITLE: Using Modifier Key in Keyboard Actions\nDESCRIPTION: Demonstrates how to use the modifier key (Ctrl for Windows, Meta for Mac) in keyboard actions.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.keyboard.press(`${helpers.modifier}+c`);\n```\n\n----------------------------------------\n\nTITLE: Defining Data Outside JSX in React Components\nDESCRIPTION: Demonstrates the recommended pattern of defining data as a constant outside of JSX and then referencing it in props.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n  ['', 'Tesla', 'Volvo', 'Toyota', 'Ford'],\n  ['2019', 10, 11, 12, 13],\n  ['2020', 20, 11, 14, 13],\n  ['2021', 30, 15, 12, 13]\n];\n\nreturn <HotTable data={data} />\n```\n\n----------------------------------------\n\nTITLE: Taking Cross-Browser Screenshot in Playwright Test\nDESCRIPTION: Captures a screenshot for cross-browser tests with additional parameters for identification.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.screenshot({ path: helpers.screenshotMultiUrlPath(testFileName, url, suffix) });\n```\n\n----------------------------------------\n\nTITLE: SVG Icon Collection for Handsontable Interface\nDESCRIPTION: A comprehensive collection of SVG icons used throughout the Handsontable interface. Each icon is defined with specific paths and viewBox attributes, with a descriptive span showing the icon name.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<div><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.9,5H5.1a.09.09,0,0,0-.1.1V18.9a.09.09,0,0,0,.1.1H18.9a.09.09,0,0,0,.1-.1V5.1A.09.09,0,0,0,18.9,5ZM20,19.89a.11.11,0,0,1-.11.11H4.11A.11.11,0,0,1,4,19.89V4.11A.11.11,0,0,1,4.11,4H19.89a.11.11,0,0,1,.11.11Z\"/><path d=\"M14.33,12.44H9.67v-.88h4.66Z\"/></svg><span>minus-square</span></div>\n```\n\n----------------------------------------\n\nTITLE: Generating API Reference and Starting Local Documentation Server\nDESCRIPTION: Commands to generate the API reference and start a local documentation server without cache. These steps complete the setup process for running Handsontable documentation locally.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:api\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:watch:no-cache\n```\n\n----------------------------------------\n\nTITLE: Running Specific Playwright Test\nDESCRIPTION: Executes a specific visual test using Playwright's test runner.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test {{ file name }}\n```\n\n----------------------------------------\n\nTITLE: Importing Handsontable Styles in CSS\nDESCRIPTION: CSS imports for Handsontable styles, including the main theme.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/angular/README.md#2025-04-10_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '~handsontable/styles/handsontable.min.css';\n@import '~handsontable/styles/ht-theme-main.min.css';\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Versioned Code Examples\nDESCRIPTION: Commands for building and testing versioned code examples. This includes building examples for a specific version and running tests across all code examples for that version.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run examples:build <version_number>\nnpm run examples:test <version_number>\n```\n\n----------------------------------------\n\nTITLE: Handsontable Documentation Directory Structure\nDESCRIPTION: A tree representation of the Handsontable documentation directory structure, showing the main directories and files along with brief descriptions of their purposes.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocs                            # All documentation files\n├── .vuepress                   # All VuePress files\n│   ├── components              # Vue components\n│   ├── containers              # Markdown containers\n│   │   ├── examples            # Code examples container\n│   │   └── sourceCodeLink.js   # `source-code-link` container.\n│   ├── handsontable-manager    # A module that runs Handsontable examples in different Handsontable versions and frameworks\n│   ├── plugins                 # VuePress plugins\n|   |   ├── active-header-links                # Plugin responsible for updating the URL with hash after scrolling the page to the nearest anchor\n|   |   ├── dump-docs-data                     # Plugin responsible for generating the all available Docs version and canonical URLs to the JSON file. Then, the file is consumed by other Docs Docker images as source of true about Docs versions and canonicals.\n|   |   ├── extend-page-data                   # Plugin responsible for extending `$page` object and rewriting some properties to add framework ID/name\n|   |   ├── generate-nginx-redirects           # Plugin responsible for generating nginx redirects\n|   |   ├── generate-nginx-variables           # Plugin responsible for generating nginx variables\n|   |   ├── markdown-it-header-injection       # Plugin responsible for injecting `<FRAMEWORK NAME> Data Grid` string before the first header\n|   |   ├── markdown-it-conditional-container  # Plugin responsible for creating conditional containers used for displaying/hiding blocks of content relevant to specific frameworks\n│   ├── public                  # The documentation's public (static) assets\n│   ├── theme                   # Theme overwrites and customizations\n│   ├── tools                   # Our custom documentation tools\n│   │   ├── build.mjs           # Builds the documentation for staging or production\n│   │   ├── check-links.js      # The documentation's link checker\n│   │   ├── jsdoc-convert       # JSDoc-to-Markdown converter\n│   │   ├── utils.js            # Tools utilities\n│   │   ├── watch.mjs           # Watch script for running local server\n│   ├── config.js               # VuePress configuration\n│   ├── docs-links.js           # Lets us link within the currently-selected docs version and framework with `@` (e.g. [link](@/guides/path/file/file.md).)\n│   ├── enhanceApp.js           # VuePress app-level enhancements\n│   ├── helpers.js              # Common helpers that set up sidebars and the documentation version and framework picker\n│   └── highlight.js            # Code highlight configuration\n├── docker                      # Docker configuration\n│   ├── ...                     # Docker configuration files\n│   └── redirects.conf          # File that allows create custom redirects for documentation\n├── content                     # The documentation content files\n│   ├── api                     # The API reference output, generated automatically from JSDoc. Do not edit for \"next\" Docs version!\n│   ├── guides                  # The guides' source files: Markdown content\n│   └── sidebars.js             # Sidebars configuration\n├── .build-tmp                  # Temporary directory created for storing symlinked directories, containing .MD files. It's needed for generating multi-frameworked Docs content.\n│   ├── javascript-data-grid    # Symbolic link to content directory. Do not edit! Make changes in the source content directory.\n│   └── react-data-grid         # As above\n├── README-DEPLOYMENT.md        # Documentation deployment guidelines\n├── README-EDITING.md           # Documentation editing guidelines\n└── README.md                   # The file you're looking at right now!\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable Vue Wrapper via npm\nDESCRIPTION: Command to install Handsontable and its Vue wrapper using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable @handsontable/vue\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands to install project dependencies and start a development server for running arbitrary code examples. After execution, the code example will be available at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable example project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/react/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running test suite\nDESCRIPTION: Command to run the test specs for the Handsontable example project after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/angular/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Organizing Handsontable Documentation Branches in Bash\nDESCRIPTION: Shows the structure of documentation production branches including fixed version branches (12.0, 12.1) and the develop branch for the next version. Each branch contains directories for VuePress configuration, documentation content, and Docker configuration.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[branch] `prod-docs/12.0`       # All documentation files related to documentation 12.0\n  docs\n  ├── .vuepress                 # All VuePress files\n  ├── content                   # The documentation content files\n  └── docker                    # Docker configuration\n[branch] `prod-docs/12.1`       # All documentation files related to documentation 12.1\n  docs\n  ├── .vuepress                 # All VuePress files\n  ├── content                   # The documentation content files\n  └── docker                    # Docker configuration\n[branch] `develop`              # All documentation files related to the \"next\" documentation version\n  docs\n  ├── .vuepress                 # All VuePress files\n  ├── content                   # The documentation content files\n  └── docker                    # Docker configuration\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Example\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable project example.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/react-wrapper/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting local development server\nDESCRIPTION: Command to start the local development server, which makes the example project available at localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/templates/angular/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Demo\nDESCRIPTION: Command to launch the local development server which runs on port 5173.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/prs/react/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Vue 3 TypeScript Project\nDESCRIPTION: Command to start the development server with hot-reload functionality. This allows for real-time updates while developing the Vue 3 TypeScript application.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Handsontable Documentation\nDESCRIPTION: Example of frontmatter configuration for a Handsontable documentation page, including various metadata fields and framework-specific overrides.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nid: 1ezrscdc\ntitle: Introduction\nmetaTitle: Installation - Guide - Handsontable Documentation for Javascript\ndescription: Easily install the data grid using your preferred package manager or import Handsontable assets directly from the CDN.\npermalink: /api/\ncanonicalUrl: /api/\nreact:\n  id: xyr8fg2e # The page id should be different for different for other framework variations\n  metaTitle: Installation - Guide - Handsontable Documentation for React\n  description: Install the wrapper for React via npm, import stylesheets, and use it to get up and running your application.\n  customValue: Custom # Custom value that can be used within template and will be available only for React framework\ntags:\n  - api\n  - api ref\nsearchCategory: API Reference # The list of categories can be found here ./docs/.vuepress/config.js#L258\n---\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Type-Checking\nDESCRIPTION: Command to run type-checking, compile, and minify the application for production deployment.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building for Production with Type-Checking\nDESCRIPTION: Command to run type-checking, compile, and minify the application for production deployment.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vue 3 TypeScript Project\nDESCRIPTION: Command to install all necessary dependencies for the Vue 3 TypeScript project. This should be run before starting development or building the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Vue 3 TypeScript Project\nDESCRIPTION: This command starts the development server with hot-reloading enabled, allowing for real-time updates during development.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Command to install all project dependencies specified in package.json.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue3/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying Handsontable Documentation Locally at a Specific Commit\nDESCRIPTION: Bash command for deploying the Handsontable documentation locally at a specific commit using Docker.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:review [COMMIT_HASH]\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable Vue Demo\nDESCRIPTION: Command to launch the local development server for the Handsontable Vue demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable Vue demo project using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/vue/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Command to execute test specifications after starting the development server\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react-wrapper/basic-example/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Handsontable TypeScript Demo\nDESCRIPTION: Launches a local development server for the Handsontable TypeScript demo project. After starting, the project can be accessed at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/ts/demo/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Using Page Variables in Markdown\nDESCRIPTION: Demonstrates how to include metadata from VuePress or frontmatter in content using the $page object.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nWelcome the users of {{ $page.frameworkName }}!\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Handsontable React Demo\nDESCRIPTION: Executes test specs for the Handsontable React demo project. Requires the development server to be running first.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable React Demo\nDESCRIPTION: Installs all necessary dependencies from npm for the Handsontable React demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Command to execute test specifications after starting the development server.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react/accessibility/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Command\nDESCRIPTION: Command to launch the local development server on port 5173.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react/accessibility/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Code Example with Multiple Language Tabs\nDESCRIPTION: Demonstrates how to create a full example with HTML, JavaScript and CSS tabs using the example container.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n::: example #exampleId .class :react-redux --html 1 --js 2 --css 3 --no-edit --tab preview\n    ```html\n    <div id=\"exampleId\"></div>\n    ```\n    ```js\n    // code here\n    ```\n    ```css\n    /* custom css here */\n    ```\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all required npm dependencies for the project\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/js/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Command to install all required npm dependencies for the project\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/react-wrapper/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Logging into GitHub Container Registry\nDESCRIPTION: Commands for logging into the GitHub Container Registry (ghcr.io) using Docker. This is required before deploying documentation for the first time.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-DEPLOYMENT.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker login --registry docker.pkg.github.com\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Angular Demo\nDESCRIPTION: Command to install all required npm dependencies for the project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Build and Example Checker\nDESCRIPTION: Commands for building the documentation and running the example-checker script to verify correctness of examples.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs:test:example-checker\n```\n\n----------------------------------------\n\nTITLE: Setting Argos Token in Environment File\nDESCRIPTION: Creates a .env file in the ./visual-tests/ directory and adds the Argos token for authentication.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nARGOS_TOKEN=xxx\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Handsontable Angular Demo\nDESCRIPTION: Command to install all necessary dependencies for the Handsontable Angular demo project.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot in Playwright Test\nDESCRIPTION: Captures a screenshot during a Playwright test and saves it to a file using a helper function.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/visual-tests/README.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait page.screenshot({ path: helpers.screenshotPath() });\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the local development server which will be accessible at http://localhost:8080.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/basic-example/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Yen Icon in SVG\nDESCRIPTION: SVG definition for a Japanese Yen currency icon, displaying the Yen symbol (¥) in a clean, geometric design for financial interfaces.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_11\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><polygon points=\"17.33 6 14.38 6 11.96 11 9.67 6 6.67 6 9.87 12.03 7.51 12.03 7.51 13.5 10.64 13.5 10.64 13.98 7.51 13.98 7.51 15.46 10.64 15.46 10.64 18 13.34 18 13.34 15.46 16.51 15.46 16.51 13.98 13.34 13.98 13.34 13.5 16.51 13.5 16.51 12.03 14.13 12.03 17.33 6\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to perform type checking, compilation, and minification for production deployment.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue3/demo/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all required project dependencies using npm package manager.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/docs/angular-17/basic-example/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via NPM\nDESCRIPTION: Command to install all necessary project dependencies using npm package manager\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/examples/next/visual-tests/vue/demo/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Using React Fragment Shorthand Syntax\nDESCRIPTION: Shows the recommended way to use React Fragment shorthand syntax instead of explicit React.Fragment.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n  <>\n    <HotTable/>\n    <div className=\"controls\">\n    // (...)\n    </div>\n  </>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Icon in SVG\nDESCRIPTION: SVG definition for a database icon that visually represents a database structure with stacked cylindrical layers.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_14\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12,8.5c3.59,0,6.5-.78,6.5-1.75S15.59,5,12,5s-6.5.78-6.5,1.75S8.41,8.5,12,8.5Zm0,1.17C6.43,9.67,5.5,8.5,5.5,8.5v2.33S6.43,12,12,12s6.5-1.17,6.5-1.17V8.5S17.57,9.67,12,9.67Zm0,3.5C6.43,13.17,5.5,12,5.5,12v2.33S6.43,15.5,12,15.5s6.5-1.17,6.5-1.17V12S17.57,13.17,12,13.17Zm0,3.5c-5.57,0-6.5-1.17-6.5-1.17v2.33S6.43,19,12,19s6.5-1.17,6.5-1.17V15.5S17.57,16.67,12,16.67Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Installing Handsontable 8.0 with React\nDESCRIPTION: NPM installation command for Handsontable 8.0 with React wrapper\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handsontable@8 @handsontable/react@4\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Containers for Examples\nDESCRIPTION: Shows the syntax for creating a code example using Markdown containers with various options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/README-EDITING.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n::: example #exampleId .class :preset --html 1 --js 2\n\n// code example\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Legacy Row Modification Hook\nDESCRIPTION: Example of the deprecated modifyRow hook usage before version 8.0\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodifyRow(row) {\n  if (row === 0) {\n    return 1;\n  }\n\n  if (row === 1) {\n    return 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Changes in Handsontable 8.x\nDESCRIPTION: Not enough context for detailed code analysis - the content consists primarily of release notes and issue references rather than code snippets.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Defining Database Remove Icon in SVG\nDESCRIPTION: SVG definition for a database icon with a delete/remove symbol, representing database deletion operations.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19.59,14.39,18.18,13l-1.77,1.76L14.64,13l-1.41,1.41L15,16.16l-1.76,1.77,1.41,1.41,1.77-1.77,1.77,1.77,1.41-1.41-1.77-1.77ZM10.91,8.16c3.59,0,6.5-.78,6.5-1.75s-2.91-1.75-6.5-1.75-6.5.78-6.5,1.75S7.32,8.16,10.91,8.16Zm0,3.5c5.57,0,6.5-1.17,6.5-1.17V8.16s-.93,1.17-6.5,1.17-6.5-1.17-6.5-1.17v2.33S5.34,11.66,10.91,11.66Zm4,.89.07.07L16.41,14l1-1V11.66S17,12.2,14.92,12.55Zm-4,2.61c.88,0,1.63,0,2.3-.08l-.69-.69.35-.35,1.4-1.4a26.8,26.8,0,0,1-3.36.19c-5.57,0-6.5-1.17-6.5-1.17V14S5.34,15.16,10.91,15.16Zm2,2.41,1.42-1.41,0,0a26.8,26.8,0,0,1-3.36.19c-5.57,0-6.5-1.17-6.5-1.17v2.33s.93,1.17,6.5,1.17c.87,0,1.61,0,2.26-.08l-.65-.65Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Enabling ManualColumnFreeze Plugin in JavaScript (Pre-8.0.0)\nDESCRIPTION: Configuration for enabling ManualColumnFreeze plugin before Handsontable 8.0.0. This automatically enabled ManualColumnMove.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmanualColumnFreeze: true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example\nDESCRIPTION: Shows how to import the LRU cache implementation in TypeScript from different sources including local files, AMD, and NPM.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/wrappers/vue/src/lib/lru/README.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LRUMap} from './lru'\n// import {LRUMap} from 'lru'     // when using via AMD\n// import {LRUMap} from 'lru_map' // when using from NPM\nconsole.log('LRUMap:', LRUMap)\n```\n\n----------------------------------------\n\nTITLE: Enabling CollapsibleColumns Plugin in JavaScript (Pre-8.0.0)\nDESCRIPTION: Configuration for enabling CollapsibleColumns plugin before Handsontable 8.0.0. This automatically enabled HiddenColumns.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/upgrade-and-migration/migrating-from-7.4-to-8.0/migrating-from-7.4-to-8.0.md#2025-04-10_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncollapsibleColumns: true\n```\n\n----------------------------------------\n\nTITLE: Defining Document CSV Icon in SVG\nDESCRIPTION: SVG definition for a document icon with CSV text, representing CSV file format.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_20\n\nLANGUAGE: SVG\nCODE:\n```\n<polygon points=\"13.79 12.92 13.79 12.01 13.79 12 9.61 12 8.25 12 8.25 12.91 8.25 12.92 12.43 12.92 13.79 12.92\"/><polygon points=\"13.79 14.77 13.79 13.85 13.79 13.85 9.61 13.85 8.25 13.85 8.25 14.76 8.25 14.77 12.43 14.77 13.79 14.77\"/><path d=\"M17,16.62V7.85L13.3,4.15H6.41A1.39,1.39,0,0,0,5,5.54V18.46a1.39,1.39,0,0,0,1.39,1.39h6.44v1H20V16.62ZM13.33,5.49l2.35,2.36H13.79a.47.47,0,0,1-.46-.47Zm-.48,13.43H6.41A.45.45,0,0,1,6,18.46V5.54a.45.45,0,0,1,.46-.46h6v2.3a1.38,1.38,0,0,0,1.38,1.39H16.1v7.85H13.79v-.93H8.25v.93h4.6Zm2.35.54a.89.89,0,0,1-.75.37.91.91,0,0,1-.76-.37,1.26,1.26,0,0,1-.24-.77,1,1,0,0,1,1-1.12.84.84,0,0,1,.88.7l-.3,0a.56.56,0,0,0-.58-.45c-.41,0-.68.33-.68.84s.27.88.67.88a.62.62,0,0,0,.62-.6h.31A.92.92,0,0,1,15.2,19.46Zm1.41.37a.84.84,0,0,1-.94-.81H16a.56.56,0,0,0,.63.54c.31,0,.53-.15.53-.37s-.11-.27-.34-.32l-.49-.12c-.39-.1-.57-.27-.57-.56s.31-.62.81-.62a.74.74,0,0,1,.83.71h-.32a.46.46,0,0,0-.53-.44c-.29,0-.48.12-.48.31s.12.26.39.32l.35.07a1,1,0,0,1,.49.21.56.56,0,0,1,.18.42C17.47,19.58,17.14,19.83,16.61,19.83Zm2.08,0h-.34l-.76-2.16h.33l.46,1.4.15.47c0-.22.08-.31.13-.47l.45-1.4h.33Z\"/>\n```\n\n----------------------------------------\n\nTITLE: New Data Update Method Implementation\nDESCRIPTION: Introduction of updateData() method for replacing data while preserving cell, row and column states.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New method\nhot.updateData(newData); // Updates data without resetting states\n```\n\n----------------------------------------\n\nTITLE: Defining Document Remove Icon in SVG\nDESCRIPTION: SVG path definitions for a document remove icon, including visual elements for a document outline and a minus symbol.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_23\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M11.75,13.85H8.25v.92h3.11A4.71,4.71,0,0,1,11.75,13.85Z\"/><path d=\"M6.41,18.92A.45.45,0,0,1,6,18.46V5.54a.45.45,0,0,1,.46-.46h6v2.3a1.38,1.38,0,0,0,1.38,1.39H16.1v3A4,4,0,0,1,17,12V7.85L13.3,4.15H6.41A1.39,1.39,0,0,0,5,5.54V18.46a1.39,1.39,0,0,0,1.39,1.39h7.32a4.43,4.43,0,0,1-1.33-.93ZM13.33,5.49l2.35,2.36H13.79a.47.47,0,0,1-.46-.47Z\"/><path d=\"M8.25,15.69v.93h3a3.82,3.82,0,0,1-.07-.68,2.42,2.42,0,0,1,0-.25Z\"/><path d=\"M15.43,12.36A3.55,3.55,0,1,0,19,15.9,3.55,3.55,0,0,0,15.43,12.36ZM17,16.15H13.78v-.91H17Z\"/><path d=\"M13.79,12H8.25v.92h4.18A4.33,4.33,0,0,1,13.79,12Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Document XLS Icon in SVG\nDESCRIPTION: SVG path definitions for a document XLS icon, including visual elements for a document outline and an XLS file type indicator.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_24\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M13.79,13.85H8.25v.92h5.54Zm0-1.85H8.25v.92h5.54ZM17,16.62V7.85L13.3,4.15H6.41A1.39,1.39,0,0,0,5,5.54V18.46a1.39,1.39,0,0,0,1.39,1.39h6.44v1H20V16.62ZM13.33,5.49l2.35,2.36H13.79a.47.47,0,0,1-.46-.47Zm-.48,13.43H6.41A.45.45,0,0,1,6,18.46V5.54a.45.45,0,0,1,.46-.46h6v2.3a1.38,1.38,0,0,0,1.38,1.39H16.1v7.85H13.79v-.93H8.25v.93h4.6Zm2.18.89-.6-.91-.57.91h-.39l.78-1.16-.75-1.09h.38l.55.84.55-.84h.38l-.75,1.09.79,1.16Zm2.16,0H15.7V17.56H16v2h1.17Zm1.18.05a.88.88,0,0,1-1-.84h.34a.58.58,0,0,0,.65.56c.33,0,.56-.16.56-.39s-.12-.28-.36-.33l-.51-.13c-.41-.09-.59-.27-.59-.58s.32-.64.84-.64a.76.76,0,0,1,.86.74h-.32a.49.49,0,0,0-.56-.46c-.3,0-.5.13-.5.32s.12.27.41.33l.36.08a1,1,0,0,1,.51.22.55.55,0,0,1,.18.43C19.26,19.6,18.92,19.86,18.37,19.86Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Download Icon in SVG\nDESCRIPTION: SVG path definition for a download icon, featuring an arrow pointing downwards into a receptacle.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_25\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M19,12.1v6.8c0,0.055-0.045,0.1-0.1,0.1H5.1C5.045,19,5,18.955,5,18.9v-6.8C5,12.045,4.955,12,4.9,12H3.1C3.045,12,3,12.045,3,12.1v8.8C3,20.955,3.045,21,3.1,21h17.8c0.055,0,0.1-0.045,0.1-0.1v-8.8c0-0.055-0.045-0.1-0.1-0.1h-1.8C19.045,12,19,12.045,19,12.1z M15.759,12H13.1c-0.055,0-0.1-0.045-0.1-0.1V3.1C13,3.045,12.955,3,12.9,3h-1.8C11.045,3,11,3.045,11,3.1v8.8c0,0.055-0.045,0.1-0.1,0.1H8.241c-0.089,0-0.134,0.108-0.071,0.171l3.759,3.759c0.039,0.039,0.102,0.039,0.141,0l3.759-3.759C15.892,12.108,15.848,12,15.759,12z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Google Sheets Icon in SVG\nDESCRIPTION: SVG path definition for a Google Sheets icon, representing functionality related to Google Sheets integration or similar spreadsheet features.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_28\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M14.15,15.35h-2.5v.76h2.5Zm0-2.77h-2.5v.88h2.5Zm0,1.41h-2.5v.83h2.5Zm0-4.76a1.5,1.5,0,0,1-1.5-1.49V4.35H7.38a.88.88,0,0,0-.88.88V18.77a.88.88,0,0,0,.88.88h9.24a.88.88,0,0,0,.88-.88V9.23Zm.66,7.59H9.14v-5h5.72Zm-.66-8.2h3.29L15,6.09l-1.7-1.74h0V7.74A.88.88,0,0,0,14.2,8.62Zm-3.26,6.73H9.85v.76h1.09Zm0-2.77H9.85v.88h1.09Zm0,1.41H9.85v.83h1.09Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Hamburger Menu Icon in SVG\nDESCRIPTION: SVG path definition for a hamburger menu icon, typically used to represent a collapsible menu or navigation options.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_29\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M4.1,5.5a.09.09,0,0,0-.1.1V8.5H20v-3Z\"/><path d=\"M4,10.6v2.9H20v-3H4.1A.09.09,0,0,0,4,10.6Z\"/><path d=\"M4,15.6v2.9H20v-3H4.1A.09.09,0,0,0,4,15.6Z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Help Icon in SVG\nDESCRIPTION: SVG path definition for a help icon, typically used to represent access to help or support features.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_30\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12,3c-4.971,0-9,4.029-9,9c0,4.971,4.029,9,9,9s9-4.029,9-9C21,7.029,16.971,3,12,3z M8.281,5.846c0.04-0.025,0.094-0.018,0.127,0.016l1.855,1.855c0.049,0.049,0.032,0.13-0.032,0.157c-1.057,0.455-1.902,1.3-2.356,2.356c-0.028,0.064-0.108,0.081-0.157,0.032L5.862,8.407C5.828,8.374,5.822,8.321,5.846,8.28C6.45,7.286,7.286,6.45,8.281,5.846z M10.262,16.283l-1.855,1.855c-0.033,0.033-0.087,0.04-0.127,0.016c-0.995-0.604-1.831-1.439-2.434-2.434c-0.024-0.04-0.018-0.094,0.016-0.127l1.855-1.855c0.049-0.049,0.13-0.032,0.157,0.032c0.455,1.057,1.3,1.902,2.357,2.357C10.294,16.154,10.312,16.234,10.262,16.283z M9,12c0-1.657,1.343-3,3-3s3,1.343,3,3s-1.343,3-3,3S9,13.657,9,12z M15.719,18.154c-0.04,0.024-0.094,0.018-0.127-0.016l-1.855-1.855c-0.049-0.049-0.032-0.13,0.032-0.157c1.057-0.455,1.902-1.3,2.357-2.357c0.028-0.064,0.108-0.081,0.157-0.032l1.855,1.855c0.033,0.033,0.04,0.087,0.016,0.127C17.55,16.714,16.714,17.55,15.719,18.154z M18.138,8.407l-1.855,1.855c-0.049,0.049-0.13,0.032-0.157-0.032c-0.455-1.057-1.3-1.902-2.356-2.356c-0.064-0.028-0.081-0.108-0.032-0.157l1.855-1.855c0.033-0.033,0.087-0.04,0.127-0.016c0.995,0.604,1.831,1.439,2.434,2.434C18.178,8.321,18.172,8.374,18.138,8.407z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Icon in SVG\nDESCRIPTION: SVG path definition for a hidden icon, typically used to represent hidden elements or visibility toggle functionality.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_31\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M16.586,5l-2.297,2.297c-0.025,0.025-0.061,0.034-0.095,0.025C13.492,7.124,12.76,7,12,7c-4.687,0-8.276,4.394-8.707,4.944c-0.028,0.036-0.028,0.076,0,0.112c0.233,0.296,1.384,1.704,3.128,2.942c0.05,0.035,0.058,0.107,0.015,0.151L4,17.586c-0.039,0.039-0.039,0.102,0,0.141L5.272,19c0.039,0.039,0.102,0.039,0.141,0L18,6.414c0.039-0.039,0.039-0.102,0-0.141L16.728,5C16.689,4.961,16.625,4.961,16.586,5z M12.532,9.054C12.359,9.023,12.182,9,12,9c-1.657,0-3,1.343-3,3c0,0.182,0.023,0.359,0.054,0.532l-0.807,0.807C8.096,12.919,8,12.472,8,12c0-2.209,1.791-4,4-4c0.472,0,0.919,0.096,1.339,0.247L12.532,9.054z M12,15c1.657,0,3-1.343,3-3c0-0.182-0.023-0.359-0.054-0.532l-3.479,3.479C11.641,14.977,11.818,15,12,15z M17.462,8.952l-1.666,1.666c-0.026,0.026-0.035,0.064-0.023,0.099C15.912,11.121,16,11.549,16,12c0,2.209-1.791,4-4,4c-0.472,0-0.919-0.096-1.339-0.247L9.755,16.66C10.467,16.867,11.216,17,12,17c4.681,0,8.485-4.382,8.952-4.941c0.031-0.037,0.031-0.08,0-0.117c-0.256-0.305-1.512-1.751-3.359-3.001C17.552,8.913,17.496,8.918,17.462,8.952z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Indent Increase Icon in SVG\nDESCRIPTION: SVG path definition for an indent increase icon, typically used in text formatting to increase indentation.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_36\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M3,5.1v1.8C3,6.955,3.045,7,3.1,7h17.8C20.955,7,21,6.955,21,6.9V5.1C21,5.045,20.955,5,20.9,5H3.1C3.045,5,3,5.045,3,5.1z M3.1,19h17.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H3.1C3.045,17,3,17.045,3,17.1v1.8C3,18.955,3.045,19,3.1,19z M9.1,15h11.8c0.055,0,0.1-0.045,0.1-0.1v-1.8c0-0.055-0.045-0.1-0.1-0.1H9.1C9.045,13,9,13.045,9,13.1v1.8C9,14.955,9.045,15,9.1,15z M9.1,11h11.8c0.055,0,0.1-0.045,0.1-0.1V9.1C21,9.045,20.955,9,20.9,9H9.1C9.045,9,9,9.045,9,9.1v1.8C9,10.955,9.045,11,9.1,11z M3,9.2v5.6c0,0.082,0.094,0.129,0.16,0.08l3.733-2.8c0.053-0.04,0.053-0.12,0-0.16L3.16,9.12C3.094,9.071,3,9.118,3,9.2z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Info Icon in SVG\nDESCRIPTION: SVG path definition for an info icon, typically used to represent additional information or details.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/docs/content/guides/accessories-and-menus/icon-pack/icon-pack.md#2025-04-10_snippet_37\n\nLANGUAGE: SVG\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M18.446,5.527c-1.275-1.309-2.936-2.11-4.865-2.396c-1.493-0.221-3.06-0.136-4.495,0.351c-0.236,0.08-0.468,0.17-0.696,0.27c-2.815,1.234-4.854,3.898-5.296,6.941c-0.284,1.951,0.077,4.032,0.965,5.789c0.916,1.812,2.435,3.043,4.315,3.768c2.06,0.795,4.351,0.994,6.466,0.291c2.784-0.925,4.994-3.223,5.808-6.042c0.683-2.365,0.328-5.008-0.871-7.17C19.4,6.649,18.953,6.048,18.446,5.527z M12.1,6c0.939,0,1.7,0.761,1.7,1.7c0,0.939-0.761,1.7-1.7,1.7c-0.939,0-1.7-0.761-1.7-1.7C10.4,6.761,11.161,6,12.1,6z M13.388,16.8H10.91c0.002-0.174,0.002-5.386,0-5.459l2.478-1.2C13.388,10.18,13.388,16.653,13.388,16.8z\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: No code snippets present\nDESCRIPTION: This file contains only changelog entries and release notes without any code snippets.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Adding Rows and Columns with alter() in Handsontable\nDESCRIPTION: New feature added in version 12.2.0 that allows adding rows and columns at specific positions using the alter() method with new parameter values.\nSOURCE: https://github.com/handsontable/handsontable/blob/develop/CHANGELOG.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nalter('insert_row_above');\nalter('insert_row_below');\nalter('insert_col_start');\nalter('insert_col_end');\n```"
  }
]