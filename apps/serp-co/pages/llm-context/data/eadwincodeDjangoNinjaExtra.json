[
  {
    "owner": "eadwincode",
    "repo": "django-ninja-extra",
    "content": "TITLE: Defining a Basic Controller in Django Ninja Extra\nDESCRIPTION: This snippet demonstrates how to create a basic controller by inheriting from ControllerBase and using the api_controller decorator. It sets up a controller for handling user-related operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/index.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ControllerBase, api_controller\n\n@api_controller('/users')\nclass UserControllerBase(ControllerBase):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Management Controller in Django Ninja Extra\nDESCRIPTION: This example demonstrates a full-featured user management controller. It includes methods for creating, updating, deleting, listing, and retrieving individual users. It also showcases pagination and various HTTP method decorators.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/index.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\nfrom ninja import ModelSchema\nfrom ninja_extra import (\n    http_get, http_post, http_generic, http_delete,\n    api_controller, status, ControllerBase, pagination\n)\nfrom ninja_extra.controllers.response import Detail\nfrom django.contrib.auth import get_user_model\n\n\nclass UserSchema(ModelSchema):\n    class Config:\n        model = get_user_model()\n        model_fields = ['username', 'email', 'first_name']\n\n\n@api_controller('/users')\nclass UsersController(ControllerBase):\n    user_model = get_user_model()\n\n    @http_post()\n    def create_user(self, user: UserSchema):\n        # just simulating created user\n        return dict(id=uuid.uuid4())\n\n    @http_generic('/{int:user_id}', methods=['put', 'patch'], response=UserSchema)\n    def update_user(self, user_id: int):\n        \"\"\" Django Ninja will serialize Django ORM model to schema provided as `response`\"\"\"\n        user = self.get_object_or_exception(self.user_model, id=user_id)\n        return user\n\n    @http_delete('/{int:user_id}', response=Detail(status_code=status.HTTP_204_NO_CONTENT))\n    def delete_user(self, user_id: int):\n        user = self.get_object_or_exception(self.user_model, id=user_id)\n        user.delete()\n        return self.create_response('', status_code=status.HTTP_204_NO_CONTENT)\n\n    @http_get(\"\", response=pagination.PaginatedResponseSchema[UserSchema])\n    @pagination.paginate(pagination.PageNumberPaginationExtra, page_size=50)\n    def list_user(self):\n        return self.user_model.objects.all()\n\n    @http_get('/{user_id}', response=UserSchema)\n    def get_user_by_id(self, user_id: int):\n        user = self.get_object_or_exception(self.user_model, id=user_id)\n        return user\n```\n\n----------------------------------------\n\nTITLE: Setting up Basic API with Django Ninja Extra\nDESCRIPTION: Example of setting up a basic API using Django Ninja Extra. It demonstrates both function-based and class-based approaches to defining API endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI, api_controller, http_get\n\napi = NinjaExtraAPI()\n\n# Function-based endpoint example\n@api.get(\"/hello\", tags=['Basic'])\ndef hello(request, name: str = \"World\"):\n    return {\"message\": f\"Hello, {name}!\"}\n\n\n# Class-based controller example\n@api_controller('/math', tags=['Math'])\nclass MathController:\n    @http_get('/add')\n    def add(self, a: int, b: int):\n        \"\"\"Add two numbers\"\"\"\n        return {\"result\": a + b}\n\n    @http_get('/multiply')\n    def multiply(self, a: int, b: int):\n        \"\"\"Multiply two numbers\"\"\"\n        return {\"result\": a * b}\n\n# Register your controllers\napi.register_controllers(MathController)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Model Controller for Django Models\nDESCRIPTION: Implementation of a basic Model Controller for the Event model that automatically generates CRUD endpoints. This example demonstrates the minimal setup required to create a fully functional API.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    api_controller,\n    NinjaExtraAPI\n)\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n    )\n\n# Register the controller with your API\napi = NinjaExtraAPI()\napi.register_controllers(EventModelController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality in Django Ninja Extra Controller\nDESCRIPTION: Complete example demonstrating how to implement search functionality in a Django Ninja Extra controller with different search configurations. Shows user model schema definition and multiple endpoint implementations with various search field configurations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/searching.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja_extra.searching import searching, Searching\nfrom ninja_extra import api_controller, route, NinjaExtraAPI\nfrom ninja import ModelSchema\nfrom django.contrib.auth import get_user_model\n\nuser_model = get_user_model()\n\n\nclass UserSchema(ModelSchema):\n    class Config:\n        model = user_model\n        model_fields = ['username', 'email']\n\n\n@api_controller('/users')\nclass UserController:\n    @route.get('', response=List[UserSchema])\n    @searching(Searching, search_fields=['username', 'email'])\n    def get_users(self):\n        return user_model.objects.all()\n\n    @route.get('/iexact-email', response=List[UserSchema])\n    @searching(search_fields=['=email'])\n    def get_users_with_search_iexact_email(self):\n        return [u for u in user_model.objects.all()]\n\n\napi = NinjaExtraAPI(title='Searching Test')\napi.register_controllers(UserController)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Model Controller for Django Model\nDESCRIPTION: Implementation of a ModelController for the Event model using api_controller decorator and ModelConfig class. This sets up schema configuration with read-only fields and registers the controller with the API.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n    NinjaExtraAPI\n)\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(\n            read_only_fields=[\"id\", \"category\"],\n            # if you want to extra configuration to the generated schemas\n            # extra_config_dict={\n            #     'title': 'EventCustomTitle',\n            #      'populate_by_name': True\n            # } \n        ),\n    )\n    \napi = NinjaExtraAPI()\napi.register_controllers(EventModelController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection with Services in Django Ninja Extra\nDESCRIPTION: Example of using dependency injection with services in Django Ninja Extra. It shows how to create a service class and inject it into a controller for better separation of concerns.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom injector import inject\nfrom ninja_extra import api_controller, http_get\n\n\n# Service class\nclass UserService:\n    def get_user_details(self, user_id: int):\n        return {\"user_id\": user_id, \"status\": \"active\"}\n\n\n# Controller with dependency injection\n@api_controller('/users', tags=['Users'])\nclass UserController:\n    def __init__(self, user_service: UserService):\n        self.user_service = user_service\n\n    @http_get('/{user_id}')\n    def get_user(self, user_id: int):\n        return self.user_service.get_user_details(user_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ModelService with Business Logic in Django Ninja Extra\nDESCRIPTION: Demonstrates how to extend the default ModelService to add custom business logic for CRUD operations, including permission checks, filtering, and validation.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, List, Union\nfrom django.db.models import QuerySet\nfrom ninja_extra import ModelService\nfrom pydantic import BaseModel\n\nclass EventModelService(ModelService):\n    def get_one(self, pk: Any, **kwargs: Any) -> Event:\n        # Add custom logic for retrieving an event\n        event = super().get_one(pk, **kwargs)\n        if not event.is_published and not kwargs.get('is_admin'):\n            raise PermissionError(\"Event not published\")\n        return event\n    \n    def get_all(self, **kwargs: Any) -> Union[QuerySet, List[Any]]:\n        # Filter events based on criteria\n        queryset = self.model.objects.all()\n        if not kwargs.get('is_admin'):\n            queryset = queryset.filter(is_published=True)\n        return queryset\n    \n    def create(self, schema: BaseModel, **kwargs: Any) -> Any:\n        # Add custom creation logic\n        data = schema.model_dump(by_alias=True)\n        data['created_by'] = kwargs.get('user_id')\n        \n        instance = self.model._default_manager.create(**data)\n        return instance\n    \n    def update(self, instance: Event, schema: BaseModel, **kwargs: Any) -> Any:\n        # Add validation before update\n        if instance.is_locked:\n            raise ValueError(\"Cannot update locked event\")\n        return super().update(instance, schema, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication and Permissions in Django Ninja Extra\nDESCRIPTION: Example of using authentication and custom permissions in Django Ninja Extra. It demonstrates how to create a custom permission class and apply permissions at both controller and route levels.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom ninja_extra.permissions import IsAuthenticated, PermissionBase\n\n# Custom permission\nclass IsAdmin(PermissionBase):\n    def has_permission(self, context):\n        return context.request.user.is_staff\n\n@api_controller('/admin', tags=['Admin'], permissions=[IsAuthenticated, IsAdmin])\nclass AdminController:\n    @http_get('/stats')\n    def get_stats(self):\n        return {\"status\": \"admin only data\"}\n    \n    @http_get('/public', permissions=[])  # Override to make public\n    def public_stats(self):\n        return {\"status\": \"public data\"}\n```\n\n----------------------------------------\n\nTITLE: Creating TodoController with Dependency Injection\nDESCRIPTION: Implements a TodoController with endpoints for creating, listing, and toggling todos. The controller receives TodoService as a dependency which handles the business logic operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get, http_post, http_put\nfrom ninja import Body\n\n# Request Models\nclass CreateTodoRequest(BaseModel):\n    title: str\n\n@api_controller(\"/todos\")\nclass TodoController:\n    def __init__(self, todo_service: TodoService):\n        self.todo_service = todo_service\n    \n    @http_post(\"\")\n    def create_todo(self, request: CreateTodoRequest = Body(...)):\n        todo = self.todo_service.create_todo(request.title)\n        return todo\n    \n    @http_get(\"\")\n    def list_todos(self):\n        return self.todo_service.get_todos()\n    \n    @http_put(\"/{todo_id}/toggle\")\n    def toggle_todo(self, todo_id: int):\n        todo = self.todo_service.toggle_todo(todo_id)\n        if not todo:\n            return {\"error\": \"Todo not found\"}, 404\n        return todo\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication and Permissions with Django Ninja Extra\nDESCRIPTION: Example of creating custom permissions and using them at controller and route levels. Shows how to create a controller with global permissions and override them for specific routes.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom ninja_extra.permissions import IsAuthenticated, PermissionBase\n\n# Custom permission\nclass IsAdmin(PermissionBase):\n    def has_permission(self, context):\n        return context.request.user.is_staff\n\n@api_controller('/admin', tags=['Admin'], permissions=[IsAuthenticated, IsAdmin])\nclass AdminController:\n    @http_get('/stats')\n    def get_stats(self):\n        return {\"status\": \"admin only data\"}\n    \n    @http_get('/public', permissions=[])  # Override to make public\n    def public_stats(self):\n        return {\"status\": \"public data\"}\n```\n\n----------------------------------------\n\nTITLE: Defining API Operations Using APIController\nDESCRIPTION: Demonstrates how to create an APIController class with various HTTP method decorators for defining API endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/index.md#2025-04-18_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import (\n    api_controller, \n    http_get, http_post, http_put, http_delete, http_patch, http_generic\n)\nfrom ninja.constants import NOT_SET\n\n@api_controller('', tags=['My Operations'], auth=NOT_SET, permissions=[])\nclass MyAPIController:\n    @http_get(\"/path\")\n    def get_operation(self):\n        ...\n    \n    @http_post(\"/path\")\n    def post_operation(self):\n        ...\n    \n    @http_put(\"/path\")\n    def put_operation(self):\n        ...\n    \n    @http_delete(\"/path\")\n    def delete_operation(self):\n        ...\n    \n    @http_patch(\"/path\")\n    def patch_operation(self):\n        ...\n    \n    # If you need to handle multiple methods with a single function, you can use the `generic` method as shown above\n    @http_generic([\"POST\", \"PATCH\"]) \n    def mixed(request):\n        ...\n\napi.register_controllers(MyAPIController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection with Services in Django Ninja Extra\nDESCRIPTION: Demonstration of dependency injection with a service layer in Django Ninja Extra. Shows how to create a service class and inject it into a controller for better separation of concerns.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom injector import inject\nfrom ninja_extra import api_controller, http_get\n\n\n# Service class\nclass UserService:\n    def get_user_details(self, user_id: int):\n        return {\"user_id\": user_id, \"status\": \"active\"}\n\n\n# Controller with dependency injection\n@api_controller('/users', tags=['Users'])\nclass UserController:\n    def __init__(self, user_service: UserService):\n        self.user_service = user_service\n\n    @http_get('/{user_id}')\n    def get_user(self, user_id: int):\n        return self.user_service.get_user_details(user_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for Model Controllers\nDESCRIPTION: Example Django models defining Category and Event classes with their fields and relationships. These models will be used as the basis for Model Controllers.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Category(models.Model):\n    title = models.CharField(max_length=100)\n\nclass Event(models.Model):\n    title = models.CharField(max_length=100)\n    category = models.OneToOneField(\n        Category, null=True, blank=True, \n        on_delete=models.SET_NULL, \n        related_name='events'\n    )\n    start_date = models.DateField()\n    end_date = models.DateField()\n\n    def __str__(self):\n        return self.title\n```\n\n----------------------------------------\n\nTITLE: Mixing Sync and Async Permissions in Django Ninja Extra\nDESCRIPTION: Example showing how to mix regular (sync) permissions with async permissions in Django Ninja Extra. The framework automatically handles conversions between sync and async contexts using sync_to_async and async_to_sync.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom ninja_extra.permissions import IsAuthenticated, IsAdminUser, AsyncBasePermission\n\n# Custom async permission\nclass IsProjectMemberAsync(AsyncBasePermission):\n    async def has_permission_async(self, request, controller):\n        project_id = controller.kwargs.get('project_id')\n        if not project_id:\n            return False\n        \n        # Async database query\n        return await is_member_of_project(request.user.id, project_id)\n\n@api_controller(\"/projects\")\nclass ProjectController:\n    # Mixing sync and async permissions\n    @http_get(\"/{project_id}/details\", permissions=[IsAuthenticated() & IsProjectMemberAsync()])\n    async def project_details(self, request, project_id: int):\n        # The framework automatically handles the conversion between sync and async\n        project = await get_project_by_id(project_id)\n        return project\n```\n\n----------------------------------------\n\nTITLE: Defining Services for Todo Application\nDESCRIPTION: Defines data models and services for a Todo application including TodoItem model, TodoRepository service for data operations, and TodoService for business logic. Shows proper use of dependency injection between services.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom pydantic import BaseModel\nfrom injector import inject\n\n# Data Models\nclass TodoItem(BaseModel):\n    id: int\n    title: str\n    completed: bool = False\n    created_at: datetime\n\n# Repository Service\nclass TodoRepository:\n    def __init__(self):\n        self._todos: List[TodoItem] = []\n        self._counter = 0\n    \n    def add(self, title: str) -> TodoItem:\n        self._counter += 1\n        todo = TodoItem(\n            id=self._counter,\n            title=title,\n            created_at=datetime.now()\n        )\n        self._todos.append(todo)\n        return todo\n    \n    def get_all(self) -> List[TodoItem]:\n        return self._todos\n    \n    def get_by_id(self, todo_id: int) -> Optional[TodoItem]:\n        return next((todo for todo in self._todos if todo.id == todo_id), None)\n    \n    def toggle_complete(self, todo_id: int) -> Optional[TodoItem]:\n        todo = self.get_by_id(todo_id)\n        if todo:\n            todo.completed = not todo.completed\n        return todo\n\n# Business Logic Service\nclass TodoService:\n    @inject\n    def __init__(self, repository: TodoRepository):\n        self.repository = repository\n    \n    def create_todo(self, title: str) -> TodoItem:\n        return self.repository.add(title)\n    \n    def get_todos(self) -> List[TodoItem]:\n        return self.repository.get_all()\n    \n    def toggle_todo(self, todo_id: int) -> Optional[TodoItem]:\n        return self.repository.toggle_complete(todo_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model for Controller Example\nDESCRIPTION: Example Django model definitions for Category and Event models that will be used with a Model Controller. The Event model includes a relationship to Category through a OneToOneField.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Category(models.Model):\n    title = models.CharField(max_length=100)\n\nclass Event(models.Model):\n    title = models.CharField(max_length=100)\n    category = models.OneToOneField(\n        Category, null=True, blank=True, on_delete=models.SET_NULL, related_name='events'\n    )\n    start_date = models.DateField()\n    end_date = models.DateField()\n\n    def __str__(self):\n        return self.title\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication in Django Ninja Extra\nDESCRIPTION: This snippet demonstrates how to implement bearer token authentication using the HttpBearer class. It includes an authentication class and an API controller with a protected route.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/authentication.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja.security import HttpBearer\nfrom ninja_extra import api_controller, route\nfrom ninja.constants import NOT_SET\n\n\nclass AuthBearer(HttpBearer):\n    def authenticate(self, request, token):\n        if token == \"supersecret\":\n            return token\n\n@api_controller(tags=['My Operations'], auth=NOT_SET, permissions=[])\nclass MyController:\n    @route.get(\"/bearer\", auth=AuthBearer())\n    def bearer(self):\n        return {\"token\": self.context.request.auth}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-Based Permissions in Django Ninja Extra\nDESCRIPTION: Shows how to create a role-based permission system that checks if users have specific permissions for different operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get, http_post, http_delete\n\nclass HasRole(permissions.BasePermission):\n    def __init__(self, required_role: str):\n        self.required_role = required_role\n    \n    def has_permission(self, request, controller):\n        return request.user.has_perm(self.required_role)\n\n\n@api_controller(\"/articles\", permissions=[permissions.IsAuthenticated])\nclass ArticleController:\n    @http_get(\"/\", permissions=[HasRole(\"articles.view\")])\n    def list_articles(self):\n        return {\"articles\": [\"Article 1\", \"Article 2\"]}\n    \n    @http_post(\"/\", permissions=[HasRole(\"articles.add\")])\n    def create_article(self, title: str):\n        return {\"message\": f\"Article '{title}' created\"}\n    \n    @http_delete(\"/{id}\", permissions=[HasRole(\"articles.delete\")])\n    def delete_article(self, id: int):\n        return {\"message\": f\"Article {id} deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Parameters in Django-Ninja-Extra API Controller\nDESCRIPTION: This snippet demonstrates how to create an API controller with Django-Ninja-Extra that handles query parameters. The example shows a weapons listing endpoint that accepts 'limit' and 'offset' query parameters for pagination.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/query.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import constants\nfrom ninja_extra import api_controller, route\n\n\n@api_controller('', tags=['My Operations'], auth=constants.NOT_SET, permissions=[])\nclass MyAPIController:\n    weapons = [\"Ninjato\", \"Shuriken\", \"Katana\", \"Kama\", \"Kunai\", \"Naginata\", \"Yari\"]\n    \n    @route.get(\"/weapons\")\n    def list_weapons(self, limit: int = 10, offset: int = 0):\n        return self.weapons[offset: offset + limit]\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Django Ninja Extra API Controller\nDESCRIPTION: This comprehensive example demonstrates how to implement pagination in a Django Ninja Extra API controller. It includes two endpoints: one using PageNumberPaginationExtra with custom page size, and another using the default LimitOffsetPagination.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/pagination.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja_extra.pagination import (\n    paginate, PageNumberPaginationExtra, PaginatedResponseSchema\n)\nfrom ninja_extra import api_controller, route, NinjaExtraAPI\nfrom ninja import ModelSchema\nfrom django.contrib.auth import get_user_model\n\nuser_model = get_user_model()\n\n\nclass UserSchema(ModelSchema):\n    class Config:\n        model = user_model\n        model_fields = ['username', 'email']\n\n        \n@api_controller('/users')\nclass UserController:\n    @route.get('', response=PaginatedResponseSchema[UserSchema])\n    @paginate(PageNumberPaginationExtra, page_size=50)\n    def get_users(self):\n        return user_model.objects.all()\n    \n    @route.get('/limit', response=List[UserSchema])\n    @paginate\n    def get_users_with_limit(self):\n        # this will use default paginator class - ninja_extra.pagination.LimitOffsetPagination\n        return user_model.objects.all()\n\n    \napi = NinjaExtraAPI(title='Pagination Test')\napi.register_controllers(UserController)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom API Key Permission in Django Ninja Extra\nDESCRIPTION: Demonstrates how to create a custom permission class that validates API keys from request headers.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\nfrom django.http import HttpRequest\n\nclass HasAPIKey(permissions.BasePermission):\n    def has_permission(self, request: HttpRequest, controller):\n        api_key = request.headers.get('X-API-Key')\n        return api_key == 'your-secret-key'\n\n@api_controller(permissions=[HasAPIKey])\nclass APIKeyProtectedController:\n    @http_get(\"/protected\")\n    def protected_endpoint(self):\n        return {\"message\": \"Access granted with valid API key\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pagination with Ninja's LimitOffsetPagination\nDESCRIPTION: Example showing how to configure pagination for a Model Controller using Ninja's LimitOffsetPagination with a custom pagination schema response.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import LimitOffsetPagination\nfrom ninja_extra.schemas import NinjaPaginationResponseSchema\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    api_controller,\n    ModelPagination\n)\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        pagination=ModelPagination(\n            klass=LimitOffsetPagination, \n            pagination_schema=NinjaPaginationResponseSchema\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Model Controller with Custom Service in Django Ninja Extra\nDESCRIPTION: Shows how to configure an async model controller with a custom async model service by enabling async_routes in the ModelConfig.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass AsyncEventModelController(ModelControllerBase):\n    service_type = AsyncEventModelService\n    model_config = ModelConfig(\n        model=Event,\n        async_routes=True\n    )\n```\n\n----------------------------------------\n\nTITLE: Object-Level Permissions Implementation in Django Ninja Extra\nDESCRIPTION: Shows how to implement object-level permissions using the has_object_permission_async method. This example demonstrates creating an IsOwnerAsync permission that checks if the current user is the owner of a specific object.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass IsOwnerAsync(AsyncBasePermission):\n    async def has_object_permission_async(self, request, controller, obj):\n        # Async check on the object\n        return obj.owner_id == request.user.id\n\n@api_controller(\"/posts\")\nclass PostController:\n    @http_get(\"/{post_id}\")\n    async def get_post(self, request, post_id: int):\n        # The async_check_object_permissions method will be called automatically\n        # when using aget_object_or_exception or aget_object_or_none\n        post = await self.aget_object_or_exception(Post, id=post_id)\n        return {\"title\": post.title, \"content\": post.content}\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with Permissions in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use dependency injection with the permission system in Django Ninja Extra. This example shows creating a reusable FeaturePermission class that injects a FeatureService to check user access to specific features.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom injector import inject\nfrom ninja_extra import api_controller, http_get, service_resolver\nfrom ninja_extra.permissions import AsyncBasePermission\n\nclass FeatureService:\n    def has_feature_access(self, user, feature):\n        # Check if user has access to a specific feature\n        return getattr(user, f'has_{feature}', False)\n\n\nclass FeaturePermission(AsyncBasePermission):\n    __features__ = {}\n\n    feature: str = \"basic\"\n\n    @inject\n    def __init__(self, feature_service: FeatureService):\n        self.feature_service = feature_service\n        self.message = f\"Must have access to {self.feature} feature\"\n        \n    # Async version of permission check\n    async def has_permission_async(self, request, controller):\n        return self.feature_service.has_feature_access(request.user, self.feature)\n    \n    @classmethod\n    def create_as(cls, feature: str) -> Type[FeaturePermission]:\n        # Create a new permission class with the same attributes\n        if feature in cls.__features__:\n            return cls.__features__[feature]\n        permission_type =  type(f\"{cls.__name__}_{feature}\", (cls,), {\"feature\": feature})\n        cls.__features__[feature] = permission_type\n        return permission_type\n\n\n@api_controller('features')\nclass FeatureController(ControllerBase):\n    @http_get('basic/', permissions=[FeaturePermission.create_as(\"basic\")])\n    async def basic_feature(self):\n        return {\"feature\": \"basic\"}\n        \n    @http_get('premium/', permissions=[FeaturePermission.create_as(\"premium\")])\n    async def premium_feature(self):\n        return {\"feature\": \"premium\"}\n        \n    # You can even combine injected permissions with operators\n    @http_get('both/', permissions=[FeaturePermission.create_as(\"basic\") & FeaturePermission.create_as(\"premium\")])\n    async def both_features(self):\n        return {\"feature\": \"both\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Model Service\nDESCRIPTION: Definition of a custom Model Service for handling more complex model operations. This example shows overriding the create method to customize how Event instances are saved.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ModelService\n\nclass EventModelService(ModelService):\n    def create(self, schema: PydanticModel, **kwargs: Any) -> Any:\n        data = schema.dict(by_alias=True)\n        data.update(kwargs)\n        \n        instance = self.model._default_manager.create(**data)\n        return instance\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordering in Django Ninja Extra API Controller\nDESCRIPTION: Demonstrates how to use the ordering decorator with a Django Ninja Extra API controller to enable result ordering. Shows implementation with both specific ordering fields and automatic field detection.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/ordering.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja_extra.ordering import ordering, Ordering\nfrom ninja_extra import api_controller, route, NinjaExtraAPI\nfrom ninja import ModelSchema\nfrom django.contrib.auth import get_user_model\n\nuser_model = get_user_model()\n\n\nclass UserSchema(ModelSchema):\n    class Config:\n        model = user_model\n        model_fields = ['username', 'email']\n\n\n@api_controller('/users')\nclass UserController:\n    @route.get('', response=List[UserSchema])\n    @ordering(Ordering, ordering_fields=['username', 'email'])\n    def get_users(self):\n        return user_model.objects.all()\n\n    @route.get('/all-sort', response=List[UserSchema])\n    @ordering\n    def get_users_with_all_field_ordering(self):\n        return [u for u in user_model.objects.all()]\n\n\napi = NinjaExtraAPI(title='Ordering Test')\napi.register_controllers(UserController)\n```\n\n----------------------------------------\n\nTITLE: Detailed Schema Configuration in Python\nDESCRIPTION: Shows comprehensive schema configuration options using ModelSchemaConfig including field inclusion/exclusion, read/write permissions, and Pydantic config options.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ModelConfig, ModelSchemaConfig\n\n# Detailed schema configuration\nschema_config = ModelSchemaConfig(\n    # Include specific fields (use \"__all__\" for all fields)\n    include=[\"title\", \"description\", \"start_date\"],\n    \n    # Exclude specific fields\n    exclude={\"internal_notes\", \"secret_key\"},\n    \n    # Fields that should be read-only (excluded from create/update schemas)\n    read_only_fields=[\"id\", \"created_at\", \"updated_at\"],\n    \n    # Fields that should be write-only (excluded from retrieve schemas)\n    write_only_fields=[\"password\"],\n    \n    # Depth of relationship traversal\n    depth=1,\n    \n    # Additional Pydantic config options\n    extra_config_dict={\n        \"title\": \"EventSchema\",\n        \"description\": \"Schema for Event model\",\n        \"populate_by_name\": True\n    }\n)\n\nmodel_config = ModelConfig(\n    model=Event,\n    schema_config=schema_config\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Services with Injector Module\nDESCRIPTION: Defines a TodoModule class that configures the dependency injection bindings for the Todo application. Shows how to set different scopes (singleton, noscope) for services based on their needs.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom injector import Module, singleton, noscope, Binder\n\nclass TodoModule(Module):\n    def configure(self, binder: Binder) -> None:\n        # Singleton scope - same instance for entire application\n        # TodoRepository maintains application state (the todos list)\n        binder.bind(TodoRepository, to=TodoRepository, scope=singleton)\n        \n        # Singleton scope - stateless service that only contains business logic\n        binder.bind(TodoService, to=TodoService, scope=singleton)\n\n        # Example of when to use noscope\n        # binder.bind(RequestContextService, to=RequestContextService, scope=noscope)\n```\n\n----------------------------------------\n\nTITLE: Async Parameter Handling in Ninja Extra Model Controller\nDESCRIPTION: Shows how to handle parameters asynchronously in a Ninja Extra Model Controller using an async ModelService.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncCustomParamsModelService(ModelService):\n    async def get_filtered_events(self, **kwargs):\n        @sync_to_async\n        def get_events():\n            queryset = self.model.objects.all()\n            \n            if kwargs.get('category'):\n                queryset = queryset.filter(category_id=kwargs['category'])\n            if kwargs.get('status'):\n                queryset = queryset.filter(status=kwargs['status'])\n                \n            return queryset\n            \n        return await get_events()\n\n@api_controller(\"/events\")\nclass AsyncEventModelController(ModelControllerBase):\n    service_type = AsyncCustomParamsModelService\n    model_config = ModelConfig(\n        model=Event,\n        async_routes=True\n    )\n    \n    list_events = ModelEndpointFactory.list(\n        path=\"/?category=int&status=str\",\n        schema_out=EventSchema,\n        queryset_getter=lambda self, **kwargs: self.service.get_filtered_events(**kwargs)\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Async Permission Class in Django Ninja Extra\nDESCRIPTION: Example of creating a custom async permission by inheriting from AsyncBasePermission and implementing the has_permission_async method. This permission checks if a user has a premium subscription using async database operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.permissions import AsyncBasePermission\n\nclass IsUserPremiumAsync(AsyncBasePermission):\n    async def has_permission_async(self, request, controller):\n        # You can perform async database operations here\n        user = request.user\n        \n        # Async check (example using Django's async ORM methods)\n        subscription = await user.subscription.aget()\n        return subscription and subscription.is_premium\n        \n    # The sync version is automatically handled for you\n    # through async_to_sync conversion\n```\n\n----------------------------------------\n\nTITLE: Creating EventModelService with Dependency Injection in Python\nDESCRIPTION: Implements the main EventModelService that uses dependency injection to incorporate EmailService and UserActivityService. Handles event creation, updates, and deletion with integrated notifications and activity tracking.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass EventModelService(ModelService):\n    \"\"\"\n    Event service with email notifications and activity tracking.\n    Dependencies are automatically injected by the framework.\n    \"\"\"\n    @inject\n    def __init__(\n        self, \n        model: Event,\n        email_service: EmailService,\n        activity_service: UserActivityService\n    ):\n        super().__init__(model=model)\n        self.email_service = email_service\n        self.activity_service = activity_service\n\n    def create(self, schema: BaseModel, **kwargs: Any) -> Any:\n        # Create the event\n        event = super().create(schema, **kwargs)\n        \n        # Track the creation activity\n        if user_id := kwargs.get('user_id'):\n            self.activity_service.track_activity(\n                user_id=user_id,\n                action=\"event_created\",\n                details={\n                    \"event_id\": event.id,\n                    \"title\": event.title\n                }\n            )\n        \n        # Send notification to organizer\n        if organizer_email := kwargs.get('organizer_email'):\n            self.email_service.send_event_notification(\n                event_data=schema.model_dump(),\n                recipient_email=organizer_email\n            )\n        \n        return event\n\n    def update(self, instance: Event, schema: BaseModel, **kwargs: Any) -> Any:\n        # Update the event\n        updated_event = super().update(instance, schema, **kwargs)\n        \n        # Track the update activity\n        if user_id := kwargs.get('user_id'):\n            self.activity_service.track_activity(\n                user_id=user_id,\n                action=\"event_updated\",\n                details={\n                    \"event_id\": updated_event.id,\n                    \"title\": updated_event.title,\n                    \"changes\": schema.model_dump()\n                }\n            )\n        \n        # Notify relevant parties about the update\n        if notify_participants := kwargs.get('notify_participants'):\n            for participant in updated_event.participants.all():\n                self.email_service.send_event_notification(\n                    event_data=schema.model_dump(),\n                    recipient_email=participant.email\n                )\n        \n        return updated_event\n\n    def delete(self, instance: Event, **kwargs: Any) -> Any:\n        event_data = {\n            \"id\": instance.id,\n            \"title\": instance.title\n        }\n        \n        # Delete the event\n        super().delete(instance, **kwargs)\n        \n        # Track the deletion\n        if user_id := kwargs.get('user_id'):\n            self.activity_service.track_activity(\n                user_id=user_id,\n                action=\"event_deleted\",\n                details=event_data\n            )\n        \n        # Notify participants about cancellation\n        if notify_participants := kwargs.get('notify_participants'):\n            for participant in instance.participants.all():\n                self.email_service.send_event_notification(\n                    event_data={\n                        **event_data,\n                        \"message\": \"Event has been cancelled\"\n                    },\n                    recipient_email=participant.email\n                )\n```\n\n----------------------------------------\n\nTITLE: Using Custom Model Service with a Model Controller\nDESCRIPTION: Example showing how to use a custom Model Service implementation with a Model Controller by setting the service property to an instance of the custom service class.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n)\nfrom .service import EventModelService\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service = EventModelService(model=Event)\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Controller with Authentication and Permissions\nDESCRIPTION: This example shows a more complex controller implementation. It includes authentication, permissions, and defines routes for getting and creating users. It uses ModelSchema for request/response serialization.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom ninja_extra import api_controller, ControllerBase, permissions, route\nfrom django.contrib.auth.models import User\nfrom ninja.security import APIKeyQuery\nfrom ninja import ModelSchema\n\n\nclass UserSchema(ModelSchema):\n    class Config:\n        model = User\n        model_fields = ['username', 'email', 'first_name']\n\n\n@api_controller('users/', auth=[APIKeyQuery()], permissions=[permissions.IsAuthenticated])\nclass UsersController(ControllerBase):\n    @route.get('', response={200: typing.List[UserSchema]})\n    def get_users(self):\n        # Logic to handle GET request to the /users endpoint\n        users = User.objects.all()\n        return users\n\n    @route.post('create/', response={200: UserSchema})\n    def create_user(self, payload: UserSchema):\n        # Logic to handle POST request to the /users endpoint\n        new_user = User.objects.create(\n            username=payload.username,\n            email=payload.email,\n            first_name=payload.first_name,\n        )\n        new_user.set_password('password')\n        return new_user\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Authentication in Django Ninja Extra\nDESCRIPTION: This code snippet shows how to configure global authentication for all routes in a Django Ninja Extra API using the NinjaExtraAPI constructor.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/authentication.md#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\nfrom ninja.security import HttpBearer\n\n\nclass GlobalAuth(HttpBearer):\n    def authenticate(self, request, token):\n        if token == \"supersecret\":\n            return token\n\n\napi = NinjaExtraAPI(auth=GlobalAuth())\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Throttling Constraints in Django Ninja Extra\nDESCRIPTION: Example showing how to apply multiple throttling rates to a single endpoint. This implementation limits a user to 60 requests per minute and 1000 requests per day by creating custom throttling classes.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\nfrom ninja_extra.throttling import UserRateThrottle\napi = NinjaExtraAPI()\n\nclass User60MinRateThrottle(UserRateThrottle):\n    rate = \"60/min\"\n    scope = \"minutes\"\n\n\nclass User1000PerDayRateThrottle(UserRateThrottle):\n    rate = \"1000/day\"\n    scope = \"days\"\n\n@api.get('/users', throttle=[User60MinRateThrottle(), User1000PerDayRateThrottle()])\ndef my_throttled_endpoint(request):\n    return 'foo'\n```\n\n----------------------------------------\n\nTITLE: Basic API Setup with Function and Class-based Controllers\nDESCRIPTION: Example of creating a Django Ninja Extra API with both function-based endpoints and class-based controllers. Shows how to define routes and register controllers with the API instance.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI, api_controller, http_get\n\napi = NinjaExtraAPI()\n\n# Function-based endpoint example\n@api.get(\"/hello\", tags=['Basic'])\ndef hello(request, name: str = \"World\"):\n    return {\"message\": f\"Hello, {name}!\"}\n\n# Class-based controller example\n@api_controller('/math', tags=['Math'])\nclass MathController:\n    @http_get('/add')\n    def add(self, a: int, b: int):\n        \"\"\"Add two numbers\"\"\"\n        return {\"result\": a + b}\n\n    @http_get('/multiply')\n    def multiply(self, a: int, b: int):\n        \"\"\"Multiply two numbers\"\"\"\n        return {\"result\": a * b}\n\n# Register your controllers\napi.register_controllers(MathController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Object-Level Permissions in Django Ninja Extra\nDESCRIPTION: Shows how to create object-level permissions that check if a user has permission to access a specific object instance.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\nfrom django.http import HttpRequest\nfrom django.shortcuts import get_object_or_404\nfrom .models import Post\n\nclass IsPostAuthor(permissions.BasePermission):\n    def has_object_permission(self, request: HttpRequest, controller, obj: Post):\n        return obj.author == request.user\n\n@api_controller(\"/posts\")\nclass PostController:\n    @http_get(\"/{post_id}\", permissions=[permissions.IsAuthenticated & IsPostAuthor()])\n    def get_post(self, request, post_id: int):\n        # The has_object_permission method will be called automatically\n        # when using get_object_or_exception or get_object_or_none\n        post = self.get_object_or_exception(Post, id=post_id)\n        return {\"title\": post.title, \"content\": post.content}\n```\n\n----------------------------------------\n\nTITLE: Combining Permissions with Logical Operators in Django Ninja Extra\nDESCRIPTION: Demonstrates how to combine permission classes using logical operators (&, |, ~) to create complex permission rules.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\n\nclass HasPremiumSubscription(permissions.BasePermission):\n    def has_permission(self, request, controller):\n        return request.user.has_perm('premium_subscription')\n\n@api_controller(\"/content\")\nclass ContentController:\n    @http_get(\"/basic\", permissions=[permissions.IsAuthenticated | HasPremiumSubscription()])\n    def basic_content(self):\n        return {\"content\": \"Basic content\"}\n    \n    @http_get(\"/premium\", permissions=[permissions.IsAuthenticated & HasPremiumSubscription()])\n    def premium_content(self):\n        return {\"content\": \"Premium content\"}\n    \n    @http_get(\"/non-premium\", permissions=[permissions.IsAuthenticated & ~HasPremiumSubscription()])\n    def non_premium_content(self):\n        return {\"content\": \"Content for non-premium users\"}\n```\n\n----------------------------------------\n\nTITLE: Combining Path and Query Parameters in Ninja Extra Model Controller\nDESCRIPTION: Shows how to combine both path and query parameters in a single endpoint using a custom ModelService in a Ninja Extra Model Controller.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass EventQueryParamsModelService(ModelService):\n    def get_category_events(\n        self, \n        category_id: int, \n        status: Optional[str] = None, \n        date: Optional[date] = None, \n        **kwargs\n    ):\n        queryset = self.model.objects.filter(category_id=category_id)\n        if status:\n            queryset = queryset.filter(status=status)\n        if date:\n            queryset = queryset.filter(start_date=date)\n        return queryset\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service = EventQueryParamsModelService(model=Event)\n    # Path and query parameters together\n    get_category_events = ModelEndpointFactory.list(\n        path=\"/{int:category_id}/events?status=str&date=date\",\n        schema_out=EventSchema,\n        queryset_getter=lambda self, **kwargs: self.service.get_category_events(**kwargs)\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Business Logic APIs with Django Ninja Extra\nDESCRIPTION: This snippet demonstrates how to create separate APIs for different components or areas, such as public and private APIs. It shows how to use different authentication methods and namespaces for each API instance.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/versioning.md#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n...\n\n\napi = NinjaExtraAPI(auth=token_auth, urls_namespace='public_api')\n...\n\napi_private = NinjaExtraAPI(auth=session_auth, urls_namespace='private_api')\n...\n\n\nurlpatterns = [\n    ...\n    path('api/', api.urls),\n    path('internal-api/', api_private.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Pydantic Schemas for Django Models\nDESCRIPTION: Example of automatically generated Pydantic schemas for the Event model. These schemas handle input validation, output serialization, and automatic OpenAPI documentation.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Auto-generated create/update schema\nclass EventCreateSchema(Schema):\n    title: str\n    start_date: date\n    end_date: date\n    category: Optional[int] = None\n\n# Auto-generated retrieve schema\nclass EventSchema(Schema):\n    id: int\n    title: str\n    start_date: date\n    end_date: date\n    category: Optional[int] = None\n```\n\n----------------------------------------\n\nTITLE: Custom Pydantic Schema Implementation\nDESCRIPTION: Example of using custom Pydantic schemas instead of auto-generated ones for create and retrieve operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom pydantic import BaseModel, Field\n\nclass EventCreateSchema(BaseModel):\n    title: str = Field(..., max_length=100)\n    start_date: date\n    end_date: date\n    category_id: int | None = None\n\nclass EventRetrieveSchema(BaseModel):\n    id: int\n    title: str\n    start_date: date\n    end_date: date\n    category_id: int | None\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        create_schema=EventCreateSchema,\n        retrieve_schema=EventRetrieveSchema,\n        update_schema=EventCreateSchema,  # Reuse create schema for updates\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining an async GET endpoint in Django-Ninja-Extra\nDESCRIPTION: This example shows how to create an asynchronous GET endpoint using Django-Ninja-Extra. It demonstrates the use of the '@http_get' decorator and async/await syntax for handling delayed responses.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_route.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom ninja_extra import http_get, api_controller\n\n@api_controller\nclass MyController:\n    @http_get(\"/say-after\")\n    async def say_after(self, delay: int, word: str):\n        await asyncio.sleep(delay)\n        return {'saying': word}\n```\n\n----------------------------------------\n\nTITLE: Merging ModelController with ModelService\nDESCRIPTION: Shows how to combine a ModelController with a ModelService by inheriting from both classes and properly initializing the service.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n)\nfrom .service import EventModelService\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase, EventModelService):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n    \n    def __init__(self):\n        EventModelService.__init__(self, model=Event)\n        self.service = self  # This will expose the functions to the service attribute\n```\n\n----------------------------------------\n\nTITLE: Implementing API Version 1 with Django Ninja Extra\nDESCRIPTION: This snippet shows how to create a Version 1 API using NinjaExtraAPI and a custom controller. It defines a controller with two endpoints and registers it with the API.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/versioning.md#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI, route, api_controller\n\n@api_controller\nclass MyV1Controller:\n    @route.get('/hello')\n    def hello(self):\n        return {'message': 'Hello from V1'}\n    \n    @route.get('/example')\n    def example(self):\n        return {'message': 'Hello from V1 Example'}\n\n    \napi = NinjaExtraAPI(version='1.0.0')\napi.register_controllers(MyV1Controller)\n```\n\n----------------------------------------\n\nTITLE: Basic ModelConfig Implementation in Python\nDESCRIPTION: Demonstrates basic usage of ModelConfig class with schema configuration, route settings, and model definition for an Event controller.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n)\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(\n            read_only_fields=[\"id\", \"created_at\"],\n            write_only_fields=[\"password\"],\n            include=[\"title\", \"start_date\", \"end_date\", \"category\"],\n            exclude=set(),  # Fields to exclude\n            depth=1,  # Nesting depth for related fields\n        ),\n        async_routes=False,  # Enable/disable async routes\n        allowed_routes=[\"create\", \"find_one\", \"update\", \"patch\", \"delete\", \"list\"],\n    )\n```\n\n----------------------------------------\n\nTITLE: Using LimitOffsetPagination with NinjaPaginationResponseSchema in Django Ninja Extra\nDESCRIPTION: This snippet demonstrates how to use the LimitOffsetPagination with NinjaPaginationResponseSchema as the response wrapper. It applies the paginate decorator to a route function that returns a queryset.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/pagination.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.schemas import NinjaPaginationResponseSchema\n\n...\n\n@route.get('', response=NinjaPaginationResponseSchema[UserSchema])\n@paginate()\ndef list_items(self):\n    return item_model.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Implementing API Version 2 with Django Ninja Extra\nDESCRIPTION: This snippet demonstrates creating a Version 2 API by inheriting from the V1 controller and overriding a specific route. It shows how to reuse APIControllers and make modifications to specific endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/versioning.md#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI, route, api_controller\nfrom .api_v1 import MyV1Controller\n\n@api_controller\nclass MyV2Controller(MyV1Controller):\n    @route.get('/example')\n    def example(self):\n        return {'message': 'Hello from V2 Example'}\n\n    \napi = NinjaExtraAPI(version='2.0.0')\napi.register_controllers(MyV2Controller)\n```\n\n----------------------------------------\n\nTITLE: Implementing EventModelController with API Endpoints in Python\nDESCRIPTION: Creates an API controller for event management with endpoints for creating and updating events. Uses ModelEndpointFactory to generate the API endpoints with custom handlers.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.controllers import ModelEndpointFactory, ModelControllerBase, ModelConfig\nfrom ninja_extra import api_controller\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service_type = EventModelService\n    model_config = ModelConfig(model=Event, allowed_routes=['find_one', 'list'])\n    \n    create_new_event = ModelEndpointFactory.create(\n        path=\"/?organizer_email=str\",\n        schema_in=model_config.create_schema,\n        schema_out=model_config.retrieve_schema,\n        custom_handler=lambda self, data, **kw: self.service.create(data, **kw)\n    )\n    \n    update_event = ModelEndpointFactory.update(\n        path=\"/{int:event_id}/?notify_participants=str\",\n        lookup_param=\"event_id\",\n        schema_in=model_config.update_schema,\n        schema_out=model_config.retrieve_schema,\n        object_getter=lambda self, pk, **kw: self.get_object_or_exception(self.model_config.model, pk=pk),\n        custom_handler=lambda self, **kw: self.service.update(**kw),\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing Default ModelService in Django Ninja Extra\nDESCRIPTION: Shows the default ModelService class that implements both synchronous and asynchronous model operations by inheriting from ModelServiceBase and AsyncModelServiceBase.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.controllers.model.interfaces import ModelServiceBase, AsyncModelServiceBase\n\nclass ModelService(ModelServiceBase, AsyncModelServiceBase):\n    def __init__(self, model):\n        super().__init__(model=model)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Multiple API Versions in Django\nDESCRIPTION: This snippet shows how to set up URL patterns in Django to support multiple API versions. It demonstrates importing and configuring different API versions in the urls.py file.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/versioning.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n...\nfrom api_v1 import api as api_v1\nfrom api_v2 import api as api_v2\n\n\nurlpatterns = [\n    ...\n    path('api/v1/', api_v1.urls),\n    path('api/v2/', api_v2.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Service to Model Controller in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use custom model services with ModelControllerBase by setting the service_type attribute and configuring the model.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service_type = EventModelService\n    model_config = ModelConfig(model=Event)\n```\n\n----------------------------------------\n\nTITLE: Defining Different Path Parameter Types in Ninja Extra Model Controller\nDESCRIPTION: Shows how to define various path parameter types including integer, string, UUID, and date in a Ninja Extra Model Controller.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    # Integer parameter\n    get_by_id = ModelEndpointFactory.find_one(\n        path=\"/{int:id}\",\n        lookup_param=\"id\",\n        schema_out=EventSchema\n    )\n    \n    # String parameter\n    get_by_slug = ModelEndpointFactory.find_one(\n        path=\"/{str:slug}\",\n        lookup_param=\"slug\",\n        schema_out=EventSchema\n    )\n    \n    # UUID parameter\n    get_by_uuid = ModelEndpointFactory.find_one(\n        path=\"/{uuid:uuid}\",\n        lookup_param=\"uuid\",\n        schema_out=EventSchema\n    )\n    \n    # Date parameter\n    get_by_date = ModelEndpointFactory.find_one(\n        path=\"/{date:event_date}\",\n        lookup_param=\"event_date\",\n        schema_out=EventSchema\n    )\n```\n\n----------------------------------------\n\nTITLE: Advanced Multiple Dependency Injection\nDESCRIPTION: Shows how to inject multiple services into a controller. This example combines AuthService, LoggingService, and TodoService to implement an admin controller with access control and logging.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom injector import inject\n\nclass AuthService:\n    def is_admin(self) -> bool:\n        return True  # Example implementation\n\nclass LoggingService:\n    def log_access(self, endpoint: str):\n        print(f\"Accessed: {endpoint}\")  # Example implementation\n\n@api_controller(\"/admin\")\nclass AdminController:\n    def __init__(\n        self, \n        auth_service: AuthService,\n        logging_service: LoggingService,\n        todo_service: TodoService\n    ):\n        self.auth_service = auth_service\n        self.logging_service = logging_service\n        self.todo_service = todo_service\n    \n    @http_get(\"/todos\")\n    def get_todos(self):\n        if not self.auth_service.is_admin():\n            return {\"error\": \"Unauthorized\"}, 403\n        \n        self.logging_service.log_access(\"admin/todos\")\n        return self.todo_service.get_todos()\n```\n\n----------------------------------------\n\nTITLE: Using ModelEndpointFactory for Custom Endpoints\nDESCRIPTION: Demonstrates creating custom endpoints using ModelEndpointFactory with custom schemas and handlers for adding events to categories.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom pydantic import BaseModel\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n    ModelEndpointFactory\n)\nfrom .models import Event, Category\n\nclass CreateCategorySchema(BaseModel):\n    title: str\n\nclass CategorySchema(BaseModel):\n    id: str\n    title: str\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n\n    add_event_to_new_category = ModelEndpointFactory.create(\n        path=\"/{int:event_id}/new-category\",\n        schema_in=CreateCategorySchema,\n        schema_out=CategorySchema,\n        custom_handler=lambda self, data, **kw: self.handle_add_event_to_new_category(data, **kw)\n    )\n\n    def handle_add_event_to_new_category(\n        self, data: CreateCategorySchema, event_id: int, **kw: Any\n    ) -> Category:\n        event = self.service.get_one(pk=event_id)\n        category = Category.objects.create(title=data.title)\n        event.category = category\n        event.save()\n        return category\n```\n\n----------------------------------------\n\nTITLE: Implementing API Controller with Mixed Permissions in Python\nDESCRIPTION: Creates a UserController with different endpoints using various permission schemes, including AllowAny, IsAuthenticated, and the custom IsStaffOrOwnerAsync permission.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/users\", permissions=[IsAuthenticated])\nclass UserController(ControllerBase):\n    @http_get(\"/\", permissions=[AllowAny])\n    async def list_users(self, request):\n        # Public endpoint\n        users = await sync_to_async(list)(User.objects.values('id', 'username')[:10])\n        return users\n    \n    @http_get(\"/{user_id}\")\n    async def get_user(self, request, user_id: int):\n        # Protected by IsAuthenticated from the controller\n        user = await self.aget_object_or_exception(User, id=user_id)\n        return {\"id\": user.id, \"username\": user.username}\n    \n    @http_post(\"/update/{user_id}\", permissions=[IsStaffOrOwnerAsync()])\n    async def update_user(self, request, user_id: int, data: dict):\n        # Protected by custom async permission\n        user = await self.aget_object_or_exception(User, id=user_id)\n        # Update user data\n        return {\"status\": \"success\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Endpoints to a Model Controller\nDESCRIPTION: Example showing how to add custom endpoints to an existing Model Controller, in this case adding a subtract method that accepts two integers and returns their difference.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get, ModelControllerBase, ModelConfig, ModelSchemaConfig\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        allowed_routes=['find_one', 'list'],\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n\n    @http_get('/subtract',)\n    def subtract(self, a: int, b: int):\n        \"\"\"Subtracts a from b\"\"\"\n        return {\"result\": a - b}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async ModelEndpointFactory\nDESCRIPTION: Shows how to use ModelAsyncEndpointFactory to create asynchronous endpoints with custom handlers and schemas.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nfrom pydantic import BaseModel\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n    ModelAsyncEndpointFactory\n)\nfrom .models import Event, Category\n\nclass CreateCategorySchema(BaseModel):\n    title: str\n\nclass CategorySchema(BaseModel):\n    id: str\n    title: str\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n\n    add_event_to_new_category = ModelAsyncEndpointFactory.create(\n        path=\"/{int:event_id}/new-category\",\n        schema_in=CreateCategorySchema,\n        schema_out=CategorySchema,\n        custom_handler=lambda self, data, **kw: self.handle_add_event_to_new_category(data, **kw)\n    )\n\n    async def handle_add_event_to_new_category(\n        self, data: CreateCategorySchema, event_id: int, **kw: Any\n    ) -> Category:\n        event = await self.service.get_one_async(pk=event_id)\n        category = Category.objects.create(title=data.title)\n        event.category = category\n        event.save()\n        return category\n```\n\n----------------------------------------\n\nTITLE: Combining Pagination and Ordering in Django Ninja Extra\nDESCRIPTION: Shows the correct order for using pagination and ordering decorators together, with pagination applied after ordering for proper results.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/ordering.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   @route.get('', response=List[UserSchema])\n   @paginate\n   @ordering(Ordering, ordering_fields=['username', 'email'])\n   def get_users(self):\n       return user_model.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Using DynamicRateThrottle with Different Scopes\nDESCRIPTION: Demonstration of DynamicRateThrottle that allows dynamically setting the throttling scope for different endpoints. This enables applying different throttling rates to different API endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# api.py\nfrom ninja_extra import NinjaExtraAPI\nfrom ninja_extra.throttling import DynamicRateThrottle\napi = NinjaExtraAPI()\n\n@api.get('/users', throttle=DynamicRateThrottle(scope='burst'))\ndef get_users(request):\n    return 'foo'\n\n@api.get('/users/<int:id>', throttle=DynamicRateThrottle(scope='sustained'))\ndef get_user_by_id(request, id: int):\n    return 'foo'\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Bearer Token Authentication in Django Ninja Extra\nDESCRIPTION: This example demonstrates how to use the AsyncHttpBearer class for asynchronous authentication in Django Ninja Extra. It includes an asynchronous authentication class and an API controller with an async protected route.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/authentication.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja_extra.security import AsyncHttpBearer\nfrom ninja.constants import NOT_SET\n\n\nclass AuthBearer(AsyncHttpBearer):\n    async def authenticate(self, request, token):\n        # await some actions\n        if token == \"supersecret\":\n            return token\n\n\n@api_controller(tags=['My Operations'], auth=NOT_SET, permissions=[])\nclass MyController:\n    @route.get(\"/bearer\", auth=AuthBearer())\n    async def bearer(self):\n        return {\"token\": self.context.request.auth}\n```\n\n----------------------------------------\n\nTITLE: Using IsAdminUser Permission in Django Ninja Extra\nDESCRIPTION: Shows how to restrict API access to admin users (users with is_staff=True) using the IsAdminUser permission class.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\n\n@api_controller(\"/admin\", permissions=[permissions.IsAdminUser])\nclass AdminController:\n    @http_get(\"/stats\")\n    def get_stats(self):\n        return {\"active_users\": 100, \"total_posts\": 500}\n```\n\n----------------------------------------\n\nTITLE: Combining Pagination, Ordering and Searching Decorators\nDESCRIPTION: Example showing the correct order of decorators when combining pagination, ordering, and searching functionality in a single endpoint.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/searching.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@route.get('', response=List[UserSchema])\n@paginate\n@ordering(Ordering, ordering_fields=['username', 'email'])\n@searching(Searching, search_fields=['username', 'email'])\ndef get_users(self):\n    return user_model.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Handling in Ninja Extra Model Controller\nDESCRIPTION: Demonstrates custom parameter handling using object getters in a Ninja Extra Model Controller with a custom ModelService.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CustomParamsModelService(ModelService):\n    def get_by_slug(self, slug: str) -> Event:\n        return self.model.objects.get(slug=slug)\n\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service = CustomParamsModelService(model=Event)\n    get_event = ModelEndpointFactory.find_one(\n        path=\"/{str:slug}\",\n        lookup_param=\"slug\",\n        schema_out=EventSchema,\n        object_getter=lambda self, slug, **kwargs: self.service.get_by_slug(slug)\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Permissions with Async Views in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use Django Ninja Extra's built-in permissions like IsAuthenticated and IsAdminUser with async views. The framework automatically handles both sync and async operations for built-in permissions.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom ninja_extra.permissions import IsAuthenticated, IsAdminUser\n\n@api_controller(permissions=[IsAuthenticated])\nclass UserController:\n    @http_get(\"/profile\", permissions=[IsAdminUser])\n    async def get_admin_profile(self, request):\n        # Only accessible to admin users\n        # IsAdminUser works with async views automatically\n        return {\"message\": \"Admin profile\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple User Throttle Rates with Custom Scopes\nDESCRIPTION: Example demonstrating how to create multiple user throttle rates with custom scopes. These custom throttling classes can be used to apply different throttling strategies.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# example/throttles.py\nfrom ninja_extra.throttling import UserRateThrottle\n\n\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n\n\nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation using Pydantic in Ninja Extra Model Controller\nDESCRIPTION: Demonstrates how to add validation to parameters using Pydantic models in a Ninja Extra Model Controller with a custom ModelService.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\nclass EventQueryParams(BaseModel):\n    category_id: Optional[int] = None\n    status: Optional[str] = Field(None, pattern=\"^(active|inactive|draft)$\")\n    date_from: Optional[date] = None\n    date_to: Optional[date] = None\n\n\nclass EventQueryParamsModelService(ModelService):\n    def get_filtered_events(self, params: EventQueryParams):\n        queryset = self.model.objects.all()\n        \n        if params.category_id:\n            queryset = queryset.filter(category_id=params.category_id)\n        if params.status:\n            queryset = queryset.filter(status=params.status)\n        if params.date_from:\n            queryset = queryset.filter(start_date__gte=params.date_from)\n        if params.date_to:\n            queryset = queryset.filter(end_date__lte=params.date_to)\n            \n        return queryset\n\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service_type = EventQueryParamsModelService\n    model_config = ModelConfig(\n        model=Event,\n        async_routes=True\n    )\n\n    list_events = ModelEndpointFactory.list(\n        path=\"/\",\n        schema_in=EventQueryParams,\n        schema_out=EventSchema,\n        queryset_getter=lambda self, query: self.service.get_filtered_events(query)\n    )\n```\n\n----------------------------------------\n\nTITLE: Using IsAuthenticated Permission in Django Ninja Extra\nDESCRIPTION: Shows how to restrict API access to authenticated users only using the IsAuthenticated permission class.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\n\n@api_controller(permissions=[permissions.IsAuthenticated])\nclass PrivateController:\n    @http_get(\"/profile\")\n    def get_profile(self, request):\n        return {\n            \"username\": request.user.username,\n            \"email\": request.user.email\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Routes in Django Ninja ModelController\nDESCRIPTION: Demonstrates how to enable async routes in a ModelController by setting async_routes=True in the ModelConfig. This allows the controller to generate asynchronous endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n)\nfrom .service import EventModelService\nfrom .models import Event\n\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    service = EventModelService(model=Event)\n    model_config = ModelConfig(\n        model=Event,\n        async_routes=True,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data in Django-Ninja-Extra API Controller\nDESCRIPTION: This snippet demonstrates how to create an API controller that handles form data as parameters. It uses the Form class from django-ninja to process username and password fields from a login form.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/form.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Form, constants\nfrom ninja_extra import api_controller, http_post, router\n\n\n@api_controller('', tags=['My Operations'], auth=constants.NOT_SET, permissions=[])\nclass MyAPIController:\n    @http_post(\"/login\")\n    def login(self, username: str = Form(...), password: str = Form(...)):\n        return {'username': username, 'password': '*****'}\n```\n\n----------------------------------------\n\nTITLE: Implementing IsAuthenticatedOrReadOnly Permission in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use IsAuthenticatedOrReadOnly permission to allow read access to everyone but restrict write operations to authenticated users.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get, http_post\n\n@api_controller(\"/posts\", permissions=[permissions.IsAuthenticatedOrReadOnly])\nclass BlogController:\n    @http_get(\"/\")  # Accessible to everyone\n    def list_posts(self):\n        return {\"posts\": [\"Post 1\", \"Post 2\"]}\n    \n    @http_post(\"/\")  # Only accessible to authenticated users\n    def create_post(self, request, title: str):\n        return {\"message\": f\"Post '{title}' created by {request.user.username}\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Model Service in Django Ninja Extra\nDESCRIPTION: Shows how to create custom asynchronous model operations by overriding the async methods and using Django's sync_to_async utility for database operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ModelService\nfrom asgiref.sync import sync_to_async\n\n\nclass AsyncEventModelService(ModelService):\n    async def get_all_async(self, **kwargs: Any) -> QuerySet:\n        # Custom async implementation\n        @sync_to_async\n        def get_filtered_events():\n            queryset = self.model.objects.all()\n            if kwargs.get('category'):\n                queryset = queryset.filter(category_id=kwargs['category'])\n            return queryset\n        \n        return await get_filtered_events()\n    \n    async def create_async(self, schema: BaseModel, **kwargs: Any) -> Any:\n        # Custom async creation\n        @sync_to_async\n        def create_event():\n            data = schema.model_dump(by_alias=True)\n            data['created_by'] = kwargs.get('user_id')\n            return self.model._default_manager.create(**data)\n            \n        return await create_event()\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Model Controller\nDESCRIPTION: Example demonstrating how to restrict a Model Controller to only allow read operations by configuring the allowed_routes parameter to include only find_one and list operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, ModelControllerBase, ModelConfig, ModelSchemaConfig\nfrom .models import Event\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        allowed_routes=['find_one', 'list'],\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Controller Routes in Django Ninja Extra\nDESCRIPTION: Example of limiting which routes are generated for a Model Controller by specifying the allowed_routes parameter. This allows fine-grained control over the API endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        allowed_routes=[\"list\", \"find_one\"]  # Only generate GET and GET/{id} endpoints\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Dependency Injection in Django Ninja Extra Controller\nDESCRIPTION: A simple example demonstrating dependency injection in a controller where a UserService is injected into a UserController to provide user count functionality.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom injector import inject\n\nclass UserService:\n    def get_user_count(self) -> int:\n        return 42  # Example implementation\n\n@api_controller(\"/users\")\nclass UserController:\n    @inject\n    def __init__(self, user_service: UserService):  # Type annotation is required\n        self.user_service = user_service\n    \n    @http_get(\"/count\")\n    def get_count(self):\n        return {\"count\": self.user_service.get_user_count()}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Controller Routes with TestAsyncClient in Python\nDESCRIPTION: Example showing how to test an asynchronous math operation endpoint using TestAsyncClient. Includes controller definition with async route and test case verifying the addition operation response.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/testing.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja_extra.testing import TestAsyncClient\n\n\n@api_controller('', tags=['Math'])\nclass MyMathController:\n    @route.get('/add',)\n    async def add(self, a: int, b: int):\n        \"\"\"add a to b\"\"\"\n        return {\"result\": a - b}\n\n    \nclass TestMyMathController:\n    def test_get_users_async(self):\n        client = TestAsyncClient(MyMathController)\n        response = client.get('/add', query=dict(a=3, b=5))\n        assert response.status_code == 200\n        assert response.json() == {\"result\": -2}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Support in Model Controllers\nDESCRIPTION: Enabling asynchronous operation for Model Controllers by setting the async_routes parameter to True. This allows the controller to work with async database operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        async_routes=True  # Enable async routes\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller-Level Throttling in Django Ninja Extra\nDESCRIPTION: Example showing how to apply throttling at both controller class level and individual endpoint level. This demonstrates endpoint-specific throttling (endpoint_1) overriding controller-level throttling.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# api.py\nfrom ninja_extra import (\n    NinjaExtraAPI, api_controller, ControllerBase,\n    http_get\n)\nfrom ninja_extra.throttling import DynamicRateThrottle\napi = NinjaExtraAPI()\n\n@api_controller(\"/throttled-controller\", throttle=[DynamicRateThrottle(scope=\"sustained\")])\nclass ThrottlingControllerSample(ControllerBase):\n    @http_get(\"/endpoint_1\", throttle=DynamicRateThrottle(scope=\"burst\"))\n    def endpoint_1(self, request):\n        # this will override the generally throttling applied at the controller\n        return \"foo\"\n\n    @http_get(\"/endpoint_2\")\n    def endpoint_2(self, request):\n        return \"foo\"\n\n    @http_get(\"/endpoint_3\")\n    def endpoint_3(self, request):\n        return \"foo\"\n\n\napi.register_controllers(ThrottlingControllerSample)\n```\n\n----------------------------------------\n\nTITLE: Implementing Email and User Activity Services in Python\nDESCRIPTION: Defines two service classes - EmailService for handling email notifications and UserActivityService for tracking user activities. These services provide core functionality that will be injected into the main Event service.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import Any, Optional\nfrom django.core.mail import send_mail\nfrom ninja_extra import ModelService, api_controller, ModelConfig\nfrom pydantic import BaseModel\nfrom injector import inject\n\n\nclass EmailService:\n    \"\"\"Service for handling email notifications\"\"\"\n    def send_event_notification(self, event_data: dict, recipient_email: str):\n        subject = f\"Event Update: {event_data['title']}\"\n        message = (\n            f\"Event Details:\\n\"\n            f\"Title: {event_data['title']}\\n\"\n            f\"Date: {event_data['start_date']} to {event_data['end_date']}\\n\"\n        )\n        send_mail(\n            subject=subject,\n            message=message,\n            from_email=\"events@example.com\",\n            recipient_list=[recipient_email],\n            fail_silently=False,\n        )\n\n\nclass UserActivityService:\n    \"\"\"Service for tracking user activities\"\"\"\n    def track_activity(self, user_id: int, action: str, details: dict):\n        UserActivity.objects.create(\n            user_id=user_id,\n            action=action,\n            details=details,\n            timestamp=datetime.now()\n        )\n```\n\n----------------------------------------\n\nTITLE: Accessing RouteContext in Controller Methods\nDESCRIPTION: Example of a controller class that demonstrates how to access the RouteContext object through self.context to get request user information and modify response headers.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ControllerBase, api_controller, route\nfrom ninja_extra.permissions import IsAuthenticated\nfrom ninja_jwt.authentication import JWTAuth\n\n@api_controller(\"/api\", auth=JWTAuth(), permissions=[IsAuthenticated])\nclass UserController(ControllerBase):\n    \n    @route.get(\"/me\")\n    def get_user_info(self):\n        # Access the authenticated user from request\n        user = self.context.request.user\n        return {\n            \"email\": user.email,\n            \"username\": user.username\n        }\n    \n    @route.post(\"/update-profile\")\n    def update_profile(self):\n        # Access and modify the response headers\n        self.context.response.headers[\"X-Profile-Updated\"] = \"true\"\n        return {\"status\": \"profile updated\"}\n\n    @route.get(\"/context-demo\")\n    def demo_context(self):\n        # Access various context properties\n        return {\n            \"request_method\": self.context.request.method,\n            \"route_kwargs\": self.context.kwargs,\n            \"permissions\": [p.__class__.__name__ for p in self.context.permission_classes]\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Parameter Access in Django-Ninja-Extra Permission Class\nDESCRIPTION: Example showing how to create a custom permission class that checks feature access based on query parameters. The code demonstrates parameter extraction using controller context and implementation of a feature check endpoint. Requires Django-Ninja-Extra framework and proper user authentication setup.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get, ControllerBase\nfrom django.http import HttpRequest\n\nclass HasFeatureAccess(permissions.BasePermission):\n    def has_permission(self, request: HttpRequest, controller: ControllerBase):\n        controller.context.compute_route_parameters()\n        \n        # Access query parameters\n        feature_name = controller.context.kwargs.get('feature')\n        environment = controller.context.kwargs.get('env', 'production')\n        \n        return request.user.has_feature_access(feature_name, environment)\n\n@api_controller(\"/features\")\nclass FeatureController:\n    @http_get(\"/check\", permissions=[HasFeatureAccess()])\n    def check_feature(self, feature: str, env: str = \"production\"):\n        return {\n            \"feature\": feature,\n            \"environment\": env,\n            \"status\": \"enabled\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection Module in Python\nDESCRIPTION: Sets up the dependency injection configuration using a custom EventModule and Django settings. Binds the EmailService and UserActivityService as singletons.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/03_model_service.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom injector import Module, singleton\n\n\nclass EventModule(Module):\n    def configure(self, binder):\n        binder.bind(EmailService, to=EmailService, scope=singleton)\n        binder.bind(UserActivityService, to=UserActivityService, scope=singleton)\n\n## settings.py\nNINJA_EXTRA = {\n    'INJECTOR_MODULES': [\n        'your_app.injector_module.EventModule'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Service Resolver Outside Controllers\nDESCRIPTION: Demonstrates how to use the service_resolver utility to obtain service instances outside of controllers, which is useful for accessing services from non-controller contexts.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import service_resolver\n\n# Resolve a single service\ntodo_service = service_resolver(TodoService)\ntodos = todo_service.get_todos()\n\n# Resolve multiple services\ntodo_service, auth_service = service_resolver(TodoService, AuthService)\n```\n\n----------------------------------------\n\nTITLE: Path and Query Parameters in ModelEndpointFactory\nDESCRIPTION: Demonstrates how to handle path and query parameters in ModelEndpointFactory endpoints with parameter type conversion.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlist_post_tags = ModelEndpointFactory.list(\n    path=\"/{int:id}/tags/{post_id}?query=int&query1=int\",\n    schema_out=model_config.retrieve_schema,\n    queryset_getter=lambda self, **kw: self.list_post_tags_query(**kw)\n)\n\ndef list_post_tags_query(self, **kwargs):\n    assert kwargs['id']\n    assert kwargs['query']\n    assert kwargs['query1']\n    post_id = kwargs['post_id']\n    return Post.objects.filter(id=post_id).first().tags.all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Injector\nDESCRIPTION: Shows how to configure Django settings to include the custom injector modules for dependency injection. This setup connects the module with the rest of the Django Ninja Extra framework.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nNINJA_EXTRA = {\n    'INJECTOR_MODULES': [\n        'your_app.modules.TodoModule'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using RouteContext for Parameter Access in Permissions in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use RouteContext to access route function parameters within permission classes before the route function is executed.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get, ControllerBase\nfrom django.http import HttpRequest\n\nclass IsOwner(permissions.BasePermission):\n    def has_permission(self, request: HttpRequest, controller: ControllerBase):\n        # Access route context and compute parameters\n        controller.context.compute_route_parameters()\n        \n        # Now you can access path and query parameters\n        user_id = controller.context.kwargs.get('user_id')\n        return request.user.id == user_id\n\n@api_controller(\"/users\")\nclass UserController:\n    @http_get(\"/{user_id}/profile\", permissions=[IsOwner()])\n    def get_user_profile(self, user_id: int):\n        return {\"message\": f\"Access granted to profile {user_id}\"}\n```\n\n----------------------------------------\n\nTITLE: URL Configuration for Django Ninja Extra API\nDESCRIPTION: URL configuration to mount the Django Ninja Extra API at a specific endpoint in the Django project's URL patterns.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom .api import api\n\nurlpatterns = [\n    path(\"api/\", api.urls),  # This will mount your API at /api/\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Todo Repository and Module in Django Ninja Extra\nDESCRIPTION: This code snippet shows the implementation of a MockTodoRepository and MockTodoModule for testing purposes. It includes methods for managing todo items and configures the dependency injection bindings.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# your_app/services/mock_todo_service.py\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom .todo_service import TodoItem, TodoService\n\nclass MockTodoRepository:\n    def __init__(self):\n        self._todos = [\n            TodoItem(id=1, title=\"Test Todo\", completed=False, created_at=datetime.now())\n        ]\n    \n    def get_all(self) -> List[TodoItem]:\n        return self._todos\n    \n    def get_by_id(self, todo_id: int) -> Optional[TodoItem]:\n        return self._todos[0] if todo_id == 1 else None\n    \n    def add(self, title: str) -> TodoItem:\n        return self._todos[0]\n    \n    def toggle_complete(self, todo_id: int) -> Optional[TodoItem]:\n        todo = self.get_by_id(todo_id)\n        if todo:\n            todo.completed = not todo.completed\n        return todo\n\n# your_app/modules.py\nfrom injector import Module, singleton, Binder\nfrom .services.mock_todo_service import MockTodoRepository\nfrom .services.todo_service import TodoService, TodoRepository\n\nclass MockTodoModule(Module):\n    def configure(self, binder: Binder) -> None:\n        binder.bind(TodoRepository, to=MockTodoRepository, scope=singleton)\n        binder.bind(TodoService, to=TodoService, scope=singleton)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Throttling in Django Ninja Extra\nDESCRIPTION: Example of applying throttling to an API endpoint using AnonRateThrottle and UserRateThrottle. Note that with default settings these won't throttle requests since the default scope is 'none'.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\nfrom ninja_extra.throttling import UserRateThrottle, AnonRateThrottle\napi = NinjaExtraAPI()\n\n@api.get('/users', throttle=[AnonRateThrottle(), UserRateThrottle()])\ndef my_throttled_endpoint(request):\n    return 'foo'\n```\n\n----------------------------------------\n\nTITLE: Advanced RouteContext Usage for Complex Permissions in Django Ninja Extra\nDESCRIPTION: Shows advanced examples of using RouteContext to implement complex permission scenarios that require access to multiple route parameters.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get, http_post, ControllerBase\nfrom django.http import HttpRequest\nfrom typing import Optional\n\nclass HasTeamAccess(permissions.BasePermission):\n    def has_permission(self, request: HttpRequest, controller: ControllerBase):\n        # Compute parameters to access both path and query parameters\n        controller.context.compute_route_parameters()\n        \n        team_id = controller.context.kwargs.get('team_id')\n        role = controller.context.kwargs.get('role', 'member')  # Default to 'member'\n        \n        return request.user.has_team_permission(team_id, role)\n\nclass HasProjectAccess(permissions.BasePermission):\n    def __init__(self, required_role: str):\n        self.required_role = required_role\n\n    def has_permission(self, request: HttpRequest, controller: ControllerBase):\n        controller.context.compute_route_parameters()\n        \n        # Access multiple parameters\n        project_id = controller.context.kwargs.get('project_id')\n        team_id = controller.context.kwargs.get('team_id')\n        \n        return (\n            request.user.is_authenticated and\n            request.user.has_project_permission(project_id, team_id, self.required_role)\n        )\n\n@api_controller(\"/teams\")\nclass TeamProjectController:\n    @http_get(\"/{team_id}/projects/{project_id}\", permissions=[HasTeamAccess() & HasProjectAccess(\"viewer\")])\n    def get_project(self, team_id: int, project_id: int):\n        return {\"message\": f\"Access granted to project {project_id} in team {team_id}\"}\n    \n    @http_post(\"/{team_id}/projects\", permissions=[HasTeamAccess() & HasProjectAccess(\"admin\")])\n    def create_project(self, team_id: int, name: str, description: Optional[str] = None):\n        return {\n            \"message\": f\"Created project '{name}' in team {team_id}\",\n            \"description\": description\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining RouteContext Class in Django Ninja Extra\nDESCRIPTION: Definition of the RouteContext class that provides access to request-related information including permissions, request/response objects, and arguments.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, List, Union\nfrom django.http import HttpRequest, HttpResponse\nfrom ninja.types import DictStrAny\nfrom pydantic import BaseModel, Field\n\nclass RouteContext(BaseModel):\n    permission_classes: List[Any] = Field([])  # Permission classes for the route\n    request: Union[HttpRequest, None] = None   # Django HttpRequest object\n    response: Union[HttpResponse, None] = None # Response object being built\n    args: List[Any] = Field([])               # Positional arguments\n    kwargs: DictStrAny = Field({})            # Keyword arguments\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Throttling Settings in Django\nDESCRIPTION: Setting up global throttling rates in Django settings.py. This configuration defines default throttling rates for authenticated users (1000/day) and anonymous users (100/day).\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# django settings.py\nNINJA_EXTRA = {\n    'THROTTLE_RATES': {\n        'user': '1000/day',\n        'anon': '100/day',\n    },\n    'NUM_PROXIES': None\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET endpoint using route decorator in Python\nDESCRIPTION: This snippet demonstrates how to use the 'route' decorator to define a GET endpoint in a Controller class. It shows the basic usage of the '@route.get' decorator to create a simple test endpoint.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_route.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import route, api_controller\n\n@api_controller\nclass MyController:\n    @route.get('/test')\n    def test(self):\n        return {'message': 'test'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Body Schema in Django Ninja\nDESCRIPTION: Demonstrates how to create a data model using Schema class and implement an API controller for handling POST requests. The Item schema includes required and optional fields with type hints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/body_request.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema, constants\nfrom ninja_extra import api_controller, route\n\n\nclass Item(Schema):\n    name: str\n    description: str = None\n    price: float\n    quantity: int\n\n    \n@api_controller(tags=['My Operations'], auth=constants.NOT_SET, permissions=[])\nclass MyAPIController:\n    @route.post(\"/items\")\n    def create(self, item: Item):\n        return item\n\n```\n\n----------------------------------------\n\nTITLE: Combining Permissions with Logical Operators in Django Ninja Extra\nDESCRIPTION: Shows how to combine permissions using logical operators (&, |, ~) in Django Ninja Extra. This example demonstrates creating complex permission requirements with AND, OR, and NOT operators that work with both sync and async permissions.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, http_get\nfrom ninja_extra.permissions import IsAuthenticated, IsAdminUser, AsyncBasePermission\n\n# Custom async permission\nclass HasPremiumSubscriptionAsync(AsyncBasePermission):\n    async def has_permission_async(self, request, controller):\n        # Async check\n        user_profile = await request.user.profile.aget()\n        return user_profile.has_premium_subscription\n\n@api_controller(\"/content\")\nclass ContentController:\n    # User must be authenticated AND have premium subscription\n    @http_get(\"/premium\", permissions=[IsAuthenticated() & HasPremiumSubscriptionAsync()])\n    async def premium_content(self, request):\n        return {\"content\": \"Premium content\"}\n    \n    # User must be authenticated OR an admin\n    @http_get(\"/special\", permissions=[IsAuthenticated() | IsAdminUser()])\n    async def special_content(self, request):\n        return {\"content\": \"Special content\"}\n    \n    # User must be authenticated but NOT an admin\n    @http_get(\"/regular\", permissions=[IsAuthenticated() & ~IsAdminUser()])\n    async def regular_content(self, request):\n        return {\"content\": \"Regular user content\"}\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for Todo API in Django Ninja Extra\nDESCRIPTION: This snippet demonstrates how to write tests for a Todo API using the TestClient from ninja_extra.testing. It includes tests for listing todos and creating a new todo item.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# tests/test_todo_api.py\nimport pytest\nfrom ninja_extra import testing\nfrom your_app.controllers import TodoController\n\n@pytest.mark.django_db\nclass TestTodoController:\n    def test_list_todos(self):\n        client = testing.TestClient(TodoController)\n        response = client.get(\"/api/todos\")\n\n        assert response.status_code == 200\n        data = response.json()\n\n        assert len(data) == 1\n        assert data[0][\"title\"] == \"Test Todo\"\n\n    def test_create_todo(self):\n        client = testing.TestClient(TodoController)\n        response = client.post(\"/api/todos\", {\"title\": \"New Todo\"})\n\n        assert response.status_code == 200\n        data = response.json()\n\n        assert data[\"title\"] == \"Test Todo\"  # Returns mock data\n```\n\n----------------------------------------\n\nTITLE: Testing Async Permissions with pytest-asyncio in Python\nDESCRIPTION: Demonstrates how to test async permissions using pytest-asyncio, including creating a custom async permission for testing and testing it with different user types.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom unittest.mock import Mock\nfrom django.contrib.auth.models import AnonymousUser\nfrom ninja_extra.permissions import AsyncBasePermission, IsAdminUser\n\n# Custom async permission for testing\nclass CustomAsyncPermission(AsyncBasePermission):\n    async def has_permission_async(self, request, controller):\n        return request.user.is_authenticated\n\n@pytest.mark.asyncio\nasync def test_async_permission():\n    # Create a mock request\n    authenticated_request = Mock(user=Mock(is_authenticated=True))\n    anonymous_request = Mock(user=AnonymousUser())\n    \n    # Test the permission\n    permission = CustomAsyncPermission()\n    assert await permission.has_permission_async(authenticated_request, None) is True\n    assert await permission.has_permission_async(anonymous_request, None) is False\n    \n    # Test with operators\n    combined = CustomAsyncPermission() & IsAdminUser()\n    \n    admin_request = Mock(user=Mock(is_authenticated=True, is_staff=True))\n    assert await combined.has_permission_async(admin_request, None) is True\n    assert await combined.has_permission_async(authenticated_request, None) is False\n\n    assert combined.has_permission(admin_request, None) is True\n    assert combined.has_permission(authenticated_request, None) is False\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Async Permission in Python\nDESCRIPTION: Defines a custom async permission class 'IsStaffOrOwnerAsync' that checks if the user is authenticated and either a staff member or the owner of an object.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass IsStaffOrOwnerAsync(AsyncBasePermission):\n    async def has_permission_async(self, request, controller):\n        return request.user.is_authenticated\n    \n    async def has_object_permission_async(self, request, controller, obj):\n        # Either the user is staff or owns the object\n        return request.user.is_staff or obj.owner_id == request.user.id\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous Controller Routes with TestClient in Python\nDESCRIPTION: Example demonstrating how to test a synchronous GET request to the /users endpoint using Django Ninja Extra's TestClient. Shows setup of test class with pytest and assertion checking for response status and JSON content.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom .controllers import UserController\nfrom ninja_extra.testing import TestClient\n\n\n@pytest.mark.django_db\nclass TestMyMathController:\n    def test_get_users(self):\n        client = TestClient(UserController)\n        response = client.get('/users')\n        assert response.status_code == 200\n        assert response.json()[0] == {\n            'first_name': 'Ninja Extra',\n            'username': 'django_ninja',\n            'email': 'john.doe@gmail.com'\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Global Throttling Settings with UserRateThrottle\nDESCRIPTION: Implementation showing how to use the globally configured throttling rates without defining custom throttling classes. This endpoint will use the 'user' rate defined in settings.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\nfrom ninja_extra.throttling import UserRateThrottle\n\napi = NinjaExtraAPI()\n\n@api.get('/users', throttle=UserRateThrottle())\ndef my_throttled_endpoint(request):\n    return 'foo'\n```\n\n----------------------------------------\n\nTITLE: Implementing AllowAny Permission in Django Ninja Extra\nDESCRIPTION: Demonstrates how to use the AllowAny permission class to create a public controller with unrestricted access to endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_permission.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import permissions, api_controller, http_get\n\n@api_controller(permissions=[permissions.AllowAny])\nclass PublicController:\n    @http_get(\"/public\")\n    def public_endpoint(self):\n        return {\"message\": \"This endpoint is public\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Controller with Async Permissions in Python\nDESCRIPTION: Shows how to perform integration tests for a controller with async permissions, using a TestAsyncClient to simulate requests with different user types.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.asyncio\nasync def test_controller_with_permissions():\n    @api_controller(\"/test\")\n    class TestController(ControllerBase):\n        @http_get(\"/protected\", permissions=[CustomAsyncPermission()])\n        async def protected_route(self):\n            return {\"success\": True}\n    \n    # Create async test client\n    client = TestAsyncClient(TestController)\n    \n    # Test with anonymous user\n    response = await client.get(\"/protected\", user=AnonymousUser())\n    assert response.status_code == 403\n    \n    # Test with authenticated user\n    auth_user = Mock(is_authenticated=True)\n    response = await client.get(\"/protected\", user=auth_user)\n    assert response.status_code == 200\n    assert response.json() == {\"success\": True}\n```\n\n----------------------------------------\n\nTITLE: Registering Controllers with NinjaExtraAPI\nDESCRIPTION: Demonstrates how to register the controllers with the NinjaExtraAPI to make them available for processing HTTP requests.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/index.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(TodoController)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Permissions with RouteContext\nDESCRIPTION: Example of implementing and accessing custom permission classes using RouteContext to secure API endpoints.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja_extra.permissions import BasePermission\n\nclass HasAPIKey(BasePermission):\n    def has_permission(self, request, controller):\n        return request.headers.get('X-API-Key') == 'valid-key'\n\n@api_controller(\"/api\", permissions=[HasAPIKey])\nclass SecureController(ControllerBase):\n    \n    @route.get(\"/secure\")\n    def secure_endpoint(self):\n        # Access current permissions\n        applied_permissions = self.context.permission_classes\n        \n        return {\n            \"message\": \"Access granted\",\n            \"permissions\": [p.__class__.__name__ for p in applied_permissions]\n        }\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Async Permissions in Django Ninja Extra\nDESCRIPTION: A complete example showing imports for implementing asynchronous permissions in Django Ninja Extra. This snippet includes necessary imports from Django's auth models, asgiref.sync, and ninja_extra permission classes.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/api_controller_async_permission.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom asgiref.sync import sync_to_async\nfrom ninja_extra import api_controller, http_get, http_post, ControllerBase\nfrom ninja_extra.permissions import AsyncBasePermission, IsAuthenticated, AllowAny\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Settings in Django Ninja Extra\nDESCRIPTION: This snippet shows the configuration for development settings in Django Ninja Extra. It imports base settings and specifies the real TodoModule for dependency injection.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom .base import *\n\nNINJA_EXTRA = {\n    'INJECTOR_MODULES': [\n        'your_app.modules.TodoModule'  # Uses real implementation\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters in Django Ninja Extra Controllers\nDESCRIPTION: This snippet demonstrates how to create an API controller with a route that contains a path parameter. The 'user_id' parameter is defined in the route path using Python format-string syntax and is automatically passed to the handler function as an argument with type hinting.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/path.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import api_controller, route\nfrom ninja import constants\n\n\n@api_controller('', tags=['My Operations'], auth=constants.NOT_SET, permissions=[])\nclass MyAPIController:\n    @route.get('/users/{user_id}')\n    def get_user_by_id(self, user_id: int):\n        return {'user_id': user_id}\n```\n\n----------------------------------------\n\nTITLE: Using RouteContext in Schema Validation\nDESCRIPTION: Example of accessing the RouteContext during schema validation using service_resolver to get request information for URL construction.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import service_resolver\nfrom ninja_extra.context import RouteContext\nfrom ninja import ModelSchema\nfrom pydantic import field_validator\nfrom django.urls import reverse\n\nclass UserProfileSchema(ModelSchema):\n    avatar_url: str\n    \n    class Config:\n        model = UserProfile\n        model_fields = [\"avatar_url\", \"bio\"]\n\n    @field_validator(\"avatar_url\", mode=\"before\")\n    def make_absolute_url(cls, value):\n        # Get RouteContext to access request\n        context: RouteContext = service_resolver(RouteContext)\n        \n        # Convert relative URL to absolute using request\n        if value and not value.startswith(('http://', 'https://')):\n            return context.request.build_absolute_uri(value)\n        return value\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Path Parameters in Ninja Extra Model Controller\nDESCRIPTION: Demonstrates how to define a basic path parameter for event ID in a Ninja Extra Model Controller using ModelEndpointFactory.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import ModelEndpointFactory, ModelControllerBase\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    # Basic path parameter for event ID\n    get_event = ModelEndpointFactory.find_one(\n        path=\"/{int:id}\",  # int converter for ID\n        lookup_param=\"id\",\n        schema_out=EventSchema\n    )\n```\n\n----------------------------------------\n\nTITLE: Modifying Response Headers with RouteContext\nDESCRIPTION: Example of using RouteContext to access and modify response headers in a controller method.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/api\")\nclass HeaderController(ControllerBase):\n    \n    @route.get(\"/custom-headers\")\n    def add_custom_headers(self):\n        # Add custom headers to the response\n        response = self.context.response\n        response.headers[\"X-Custom-Header\"] = \"custom value\"\n        response.headers[\"X-API-Version\"] = \"1.0\"\n        \n        return {\"message\": \"Response includes custom headers\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Ordering Class in Django Settings\nDESCRIPTION: Shows how to change the default ordering class by adding NINJA_EXTRA configuration to Django's settings.py file with the ORDERING_CLASS parameter.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/ordering.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\nINSTALLED_APPS = [\n    ...\n]\nNINJA_EXTRA={\n    'ORDERING_CLASS': 'someapp.somemodule.CustomOrdering'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Ninja Extra Model Controller\nDESCRIPTION: Demonstrates how to handle query parameters for filtering events in a Ninja Extra Model Controller using ModelEndpointFactory.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/04_parameters.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom ninja_extra import ModelEndpointFactory\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    # Endpoint with query parameters\n    list_events = ModelEndpointFactory.list(\n        path=\"/?category=int&status=str\",  # Define query parameters\n        schema_out=EventSchema,\n        queryset_getter=lambda self, **kwargs: self.get_filtered_events(**kwargs)\n    )\n    \n    def get_filtered_events(self, category: Optional[int] = None, \n                          status: Optional[str] = None, **kwargs):\n        queryset = self.model.objects.all()\n        \n        if category:\n            queryset = queryset.filter(category_id=category)\n        if status:\n            queryset = queryset.filter(status=status)\n            \n        return queryset\n```\n\n----------------------------------------\n\nTITLE: Configuring URL patterns for Django Ninja Extra API\nDESCRIPTION: URL configuration in Django's urls.py file to mount the Django Ninja Extra API. This makes the API accessible at the specified URL path.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom .api import api\n\nurlpatterns = [\n    path(\"api/\", api.urls),  # This will mount your API at /api/\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pagination Class in Django Settings\nDESCRIPTION: This snippet shows how to change the default pagination class by adding a NINJA_EXTRA configuration to the Django project's settings.py file. It sets PageNumberPaginationExtra as the default pagination class.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/pagination.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\nINSTALLED_APPS = [\n    ...\n]\nNINJA_EXTRA={\n    'PAGINATION_CLASS': 'ninja_extra.pagination.PageNumberPaginationExtra'\n}\n```\n\n----------------------------------------\n\nTITLE: Route Configuration in Python\nDESCRIPTION: Customization of individual route behaviors using route info dictionaries for create, list, and find operations.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        # Customize specific route configurations\n        create_route_info={\n            \"summary\": \"Create a new event\",\n            \"description\": \"Creates a new event with the provided data\",\n            \"tags\": [\"events\"],\n            \"deprecated\": False,\n        },\n        list_route_info={\n            \"summary\": \"List all events\",\n            \"description\": \"Retrieves a paginated list of all events\",\n            \"tags\": [\"events\"],\n            \"schema_out\": CustomListSchema,\n        },\n        find_one_route_info={\n            \"summary\": \"Get event details\",\n            \"description\": \"Retrieves details of a specific event\",\n            \"tags\": [\"events\"],\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Django-Ninja-Extra Settings in Django settings.py\nDESCRIPTION: Example configuration showing all available Django-Ninja-Extra settings that can be overridden in Django's settings.py file. These settings control pagination, dependency injection, throttling, ordering, searching, and route context behavior.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/settings.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\n\n\nNINJA_EXTRA = {\n    'PAGINATION_CLASS':\"ninja_extra.pagination.PageNumberPaginationExtra\",\n    'PAGINATION_PER_PAGE': 100,\n    'INJECTOR_MODULES': [],\n    'THROTTLE_CLASSES': [\n        \"ninja_extra.throttling.AnonRateThrottle\",\n        \"ninja_extra.throttling.UserRateThrottle\",\n    ],\n    'THROTTLE_RATES': {\n        'user': '1000/day',\n        'anon': '100/day',\n    },\n    'NUM_PROXIES': None,\n    'ORDERING_CLASS':\"ninja_extra.ordering.Ordering\",\n    'SEARCHING_CLASS':\"ninja_extra.searching.Searching\",\n    'ROUTE_CONTEXT_CLASS':\"ninja_extra.context.RouteContext\",\n}\n```\n\n----------------------------------------\n\nTITLE: ModelConfig Inheritance in Python\nDESCRIPTION: Example of configuration inheritance using a base ModelConfig class with common settings.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.controllers import ModelConfig\n\nclass BaseModelConfig(ModelConfig):\n    async_routes = True\n    schema_config = ModelSchemaConfig(\n        read_only_fields=[\"id\", \"created_at\", \"updated_at\"],\n        depth=1\n    )\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = BaseModelConfig(\n        model=Event,\n        # Override or extend base configuration\n        allowed_routes=[\"list\", \"find_one\"]\n    )\n```\n\n----------------------------------------\n\nTITLE: Pagination Configuration in Python\nDESCRIPTION: Configuration of pagination settings for list endpoints using LimitOffsetPagination.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import LimitOffsetPagination\nfrom ninja_extra import (\n    ModelConfig,\n    ModelPagination\n)\nfrom ninja_extra.pagination import NinjaPaginationResponseSchema\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        # Configure pagination\n        pagination=ModelPagination(\n            klass=LimitOffsetPagination,\n            pagination_schema=NinjaPaginationResponseSchema,\n            paginator_kwargs={\n                \"limit\": 20,\n                \"offset\": 100\n            }\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Settings in Django Ninja Extra\nDESCRIPTION: This snippet demonstrates the configuration for testing settings in Django Ninja Extra. It imports base settings and specifies the MockTodoModule for dependency injection during testing.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom .base import *\n\nNINJA_EXTRA = {\n    'INJECTOR_MODULES': [\n        'your_app.modules.MockTodoModule'  # Uses mock implementation\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Async Routes Configuration in Python\nDESCRIPTION: Implementation of async routes with specific configurations and custom async service.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/02_model_configuration.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api_controller(\"/events\")\nclass AsyncEventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        # Async-specific configurations\n        async_routes=True,\n        schema_config=ModelSchemaConfig(\n            read_only_fields=[\"id\"],\n            depth=1\n        )\n    )\n    \n    # Custom async service implementation\n    service = AsyncEventModelService(model=Event)\n```\n\n----------------------------------------\n\nTITLE: Using QueryGetter and ObjectGetter in ModelEndpointFactory\nDESCRIPTION: Examples of using QueryGetter and ObjectGetter with ModelEndpointFactory for custom object retrieval and filtering.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra import (\n    ModelConfig,\n    ModelControllerBase,\n    ModelSchemaConfig,\n    api_controller,\n    ModelEndpointFactory\n)\nfrom .models import Event, Category\n\n@api_controller(\"/events\")\nclass EventModelController(ModelControllerBase):\n    model_config = ModelConfig(\n        model=Event,\n        schema_config=ModelSchemaConfig(read_only_fields=[\"id\", \"category\"]),\n    )\n\n    get_event_category = ModelEndpointFactory.find_one(\n        path=\"/{int:event_id}/category\",\n        schema_out=CategorySchema,\n        lookup_param='event_id',\n        object_getter=lambda self, pk, **kw: self.service.get_one(pk=pk).category\n    )\n\n    get_events_by_category = ModelEndpointFactory.list(\n        path=\"/category/{int:category_id}/\",\n        schema_out=model_config.retrieve_schema,\n        lookup_param='category_id',\n        queryset_getter=lambda self, **kw: Category.objects.filter(pk=kw['category_id']).first().events.all()\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Throttle Rates in Django Settings\nDESCRIPTION: Django settings configuration for custom throttle scopes. This defines rates for 'burst' (60/min) and 'sustained' (1000/day) throttling scenarios.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# django settings.py\nNINJA_EXTRA = {\n    'THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Backend for Throttling in Django Ninja Extra\nDESCRIPTION: Example showing how to define a custom cache backend for a throttling model. This allows using a different cache than the default one for specific throttling needs.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/throttling.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.cache import caches\nfrom ninja_extra.throttling import AnonRateThrottle\n\n\nclass CustomAnonRateThrottle(AnonRateThrottle):\n    cache = caches['alternate']\n```\n\n----------------------------------------\n\nTITLE: Initializing NinjaExtraAPI and Defining a Hello World Endpoint\nDESCRIPTION: Creates a NinjaExtraAPI instance and defines a simple GET endpoint using the function-based approach.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/index.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\n\n# function definition using Django-Ninja default router\n@api.get(\"/hello\")\ndef hello(request):\n    return \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Request User with RouteContext\nDESCRIPTION: Example of accessing the authenticated user from the request object using RouteContext.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@route.get(\"/profile\")\ndef get_profile(self):\n    user = self.context.request.user\n    return {\"username\": user.username}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Arguments with RouteContext\nDESCRIPTION: Example of accessing route parameters through the kwargs property of RouteContext.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@route.get(\"/items/{item_id}\")\ndef get_item(self, item_id: int):\n    # Access route parameters\n    print(self.context.kwargs)  # {'item_id': 123}\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Patterns for Django Ninja Extra API\nDESCRIPTION: Updates the Django project's urls.py to include the API routes.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/index.md#2025-04-18_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path\nfrom .api import api\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Response Headers for File Downloads\nDESCRIPTION: Example of adding Content-Disposition header for file downloads using RouteContext's response property.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/route_context.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@route.get(\"/download\")\ndef download_file(self):\n    self.context.response.headers[\"Content-Disposition\"] = \"attachment; filename=doc.pdf\"\n    return {\"file_url\": \"path/to/file\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for Custom Search Class\nDESCRIPTION: Example showing how to configure a custom searching class in Django settings.py by setting the NINJA_EXTRA dictionary with SEARCHING_CLASS parameter.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/searching.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Django project settings.py\nINSTALLED_APPS = [\n    ...\n]\nNINJA_EXTRA={\n    'SEARCHING_CLASS': 'someapp.somemodule.CustomSearching'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Django Ninja Extra to INSTALLED_APPS in Django settings\nDESCRIPTION: Configuration snippet to add 'ninja_extra' to the INSTALLED_APPS list in Django settings. This is required to enable Django Ninja Extra in your project.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'ninja_extra',\n]\n```\n\n----------------------------------------\n\nTITLE: Minimal Request Body Example\nDESCRIPTION: JSON example showing a minimal valid request body without the optional description field.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/body_request.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Katana\",\n    \"price\": 299.00,\n    \"quantity\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Configuration\nDESCRIPTION: Lists package dependencies by referencing other requirement files and includes pre-commit hooks for development environment setup. Uses -e for editable install of current package and references additional requirement files for documentation and testing.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-e .\n-r requirements-docs.txt\n-r requirements-tests.txt\n\npre-commit\n```\n\n----------------------------------------\n\nTITLE: Adding Django Ninja Extra to INSTALLED_APPS\nDESCRIPTION: Configuration snippet to add the ninja_extra package to the Django project's INSTALLED_APPS setting.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'ninja_extra',\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja Extra\nDESCRIPTION: Command to install Django Ninja Extra using pip and configuration to add it to INSTALLED_APPS in Django settings.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-ninja-extra\n```\n\nLANGUAGE: Python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'ninja_extra',\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja Extra with pip\nDESCRIPTION: Command to install the Django Ninja Extra package using pip package manager.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-ninja-extra\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja Extra and ninja-schema\nDESCRIPTION: Command to install the required packages for using Model Controllers in Django Ninja Extra. The ninja-schema package is optional but recommended for schema generation.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller/01_getting_started.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-ninja-extra ninja-schema\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Schema Generation\nDESCRIPTION: Command to install the ninja-schema package, which is required for automatic schema generation in Model Controllers.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/api_controller/model_controller.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install ninja-schema\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja Extra using pip\nDESCRIPTION: Command to install the Django Ninja Extra package using pip. This is the first step in setting up Django Ninja Extra in your project.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-ninja-extra\n```\n\n----------------------------------------\n\nTITLE: Querying Django-Ninja Endpoints with Query Parameters\nDESCRIPTION: This snippet shows the URL format for accessing an API endpoint with query parameters. It demonstrates how to pass 'offset' and 'limit' parameters in the URL to control pagination of results.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/query.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:8000/api/weapons?offset=0&limit=10\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install development libraries and pre-commit hooks using Make.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake install-full\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest.ini for Django Settings in Testing\nDESCRIPTION: This INI snippet demonstrates how to configure pytest.ini to use the testing settings module for Django tests.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\nDJANGO_SETTINGS_MODULE = config.settings.testing\n```\n\n----------------------------------------\n\nTITLE: Complete Request Body Example\nDESCRIPTION: JSON example showing a complete request body with all fields including the optional description field.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/body_request.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Katana\",\n    \"description\": \"An optional description\",\n    \"price\": 299.00,\n    \"quantity\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Command\nDESCRIPTION: Command to run code formatting tools to ensure consistency.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment - Linux/macOS\nDESCRIPTION: Commands to create and activate a Python virtual environment on Linux or macOS systems.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate  # Linux/macOS\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create and checkout a new feature branch for development.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature-branch\n```\n\n----------------------------------------\n\nTITLE: Checking Test Coverage\nDESCRIPTION: Command to generate and view test coverage reports.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake test-cov\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment - Windows\nDESCRIPTION: Commands to create and activate a Python virtual environment on Windows systems.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n.\\venv\\Scripts\\activate  # Windows\n```\n\n----------------------------------------\n\nTITLE: Code Linting Command\nDESCRIPTION: Command to run mypy and ruff linting tools for code quality checks.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Setting Django Settings Module for Development and Testing\nDESCRIPTION: This bash snippet shows how to set the Django settings module environment variable for development and testing environments.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/dependency-injection/testing.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# For development\nexport DJANGO_SETTINGS_MODULE=config.settings.development\n\n# For testing\nexport DJANGO_SETTINGS_MODULE=config.settings.testing\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies Configuration\nDESCRIPTION: Specifies required Python packages and their versions for development and testing. Includes MyPy for type checking, pytest for testing, and ninja-schema for schema validation.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/requirements-tests.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndjango-stubs\nmypy == 1.14.1\nninja-schema>=0.14.1\npytest\npytest-asyncio==0.24.0\npytest-cov\npytest-django\nruff ==0.11.2\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the pytest test suite.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote\nDESCRIPTION: Git command to push local changes to the forked repository.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Flit Package Manager\nDESCRIPTION: Command to install the Flit package manager globally using pip.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/contribution.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install flit\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies Configuration\nDESCRIPTION: Lists required Python packages with version specifications for documentation generation, including mkdocs, markdown processors, and related plugins.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/requirements-docs.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmarkdown-include\nmdx-include >=1.4.1,<2.0.0\nmkdocs >=1.1.2,<2.0.0\nmkdocs-markdownextradata-plugin >=0.1.7,<0.3.0\nmkdocs-material >=7.1.9,<10.0.0\nmkdocstrings\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom APIException in Django-Ninja-Extra\nDESCRIPTION: This code demonstrates how to create a custom exception class by extending APIException, define an API controller with a route that raises the custom exception, and register the controller with a NinjaExtraAPI instance.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/custom_exception.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja_extra.exceptions import APIException\nfrom ninja_extra import api_controller, route, NinjaExtraAPI, status\nfrom ninja import constants\n\n\nclass CustomAPIException(APIException):\n    status_code = status.HTTP_401_UNAUTHORIZED\n    default_detail = 'UnAuthorized'\n\n    \n@api_controller('', tags=['My Operations'], auth=constants.NOT_SET, permissions=[])\nclass MyController:\n    @route.get('/exception')\n    def custom_exception(self):\n        raise CustomAPIException()\n\n\napi = NinjaExtraAPI(title='Exception Test')\napi.register_controllers(MyController)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Django Project\nDESCRIPTION: Command to create a new Django project using django-admin.\nSOURCE: https://github.com/eadwincode/django-ninja-extra/blob/master/docs/tutorial/index.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject myproject\n```"
  }
]