[
  {
    "owner": "alchemyplatform",
    "repo": "alchemy-sdk-js",
    "content": "TITLE: Retrieving Tokens for Owner in TypeScript\nDESCRIPTION: Gets the tokens owned by a specific address, including token amounts and metadata. Takes an address and optional configuration options as parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokensForOwner(addressOrName: string, options?: GetTokensForOwnerOptions): Promise<GetTokensForOwnerResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving BAYC NFT Owners using Alchemy SDK in TypeScript\nDESCRIPTION: This code snippet shows how to use the Alchemy SDK to get all the owners of Bored Ape Yacht Club (BAYC) NFTs. It iterates through all BAYC NFTs and retrieves the owners for each token ID.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Bored Ape Yacht Club contract address.\nconst baycAddress = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D';\n\nasync function main() {\n  for await (const nft of alchemy.nft.getNftsForContractIterator(baycAddress, {\n    // Omit the NFT metadata for smaller payloads.\n    omitMetadata: true\n  })) {\n    await alchemy.nft\n      .getOwnersForNft(nft.contract.address, nft.tokenId)\n      .then(response =>\n        console.log('owners:', response.owners, 'tokenId:', nft.tokenId)\n      );\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Using Alchemy SDK API Methods\nDESCRIPTION: Examples of using various Alchemy SDK features including core methods, NFT API, and WebSocket subscriptions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, AlchemySubscription } from 'alchemy-sdk';\n\n// Using default settings - pass in a settings object to specify your API key and network\nconst alchemy = new Alchemy();\n\n// Access standard Ethers.js JSON-RPC node request\nalchemy.core.getBlockNumber().then(console.log);\n\n// Access Alchemy Enhanced API requests\nalchemy.core\n  .getTokenBalances('0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE')\n  .then(console.log);\n\n// Access the Alchemy NFT API\nalchemy.nft.getNftsForOwner('vitalik.eth').then(console.log);\n\n// Access WebSockets and Alchemy-specific WS methods\nalchemy.ws.on(\n  {\n    method: AlchemySubscription.PENDING_TRANSACTIONS\n  },\n  res => console.log(res)\n);\n```\n\n----------------------------------------\n\nTITLE: Simulating Transaction Execution in Alchemy SDK\nDESCRIPTION: Method to simulate a transaction's execution and return detailed traces and logs without running it on the blockchain. Useful for debugging and testing transaction effects.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsimulateExecution(transaction, blockIdentifier?): Promise<SimulateExecutionResponse>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy SDK\nDESCRIPTION: Basic setup and configuration of the Alchemy SDK with optional settings for API key and network selection.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, Network } from 'alchemy-sdk';\n\n// Optional config object, but defaults to the API key 'demo' and Network 'eth-mainnet'.\nconst settings = {\n  apiKey: 'demo', // Replace with your Alchemy API key.\n  network: Network.ETH_MAINNET // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n```\n\n----------------------------------------\n\nTITLE: Querying NFTs Owned by an Address using Alchemy SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Alchemy SDK to retrieve NFTs owned by a specific Ethereum address. It shows how to get the total count of NFTs, iterate through all NFTs to get their media URLs, and how to filter out spam NFTs.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, NftExcludeFilters } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Get how many NFTs an address owns.\nalchemy.nft.getNftsForOwner('vitalik.eth').then(nfts => {\n  console.log(nfts.totalCount);\n});\n\n// Get all the image urls for all the NFTs an address owns.\nasync function main() {\n  for await (const nft of alchemy.nft.getNftsForOwnerIterator('vitalik.eth')) {\n    console.log(nft.media);\n  }\n}\n\nmain();\n\n// Filter out spam NFTs.\nalchemy.nft\n  .getNftsForOwner('vitalik.eth', {\n    excludeFilters: [NftExcludeFilters.SPAM]\n  })\n  .then(console.log);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for AssetTransfersResult in Alchemy SDK\nDESCRIPTION: TypeScript interface that represents a transfer event returned by Alchemy's Asset Transfers API. It includes properties for transaction information, addresses, token details, and metadata for different token standards (ERC721, ERC1155, etc.).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersResult.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AssetTransfersResult {\n  asset: null | string;\n  blockNum: string;\n  category: AssetTransfersCategory;\n  erc1155Metadata: null | ERC1155Metadata[];\n  erc721TokenId: null | string;\n  from: string;\n  hash: string;\n  rawContract: RawContract;\n  to: null | string;\n  tokenId: null | string;\n  uniqueId: string;\n  value: null | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for a Transaction in TypeScript\nDESCRIPTION: This method estimates the amount of gas required to execute a transaction. It takes a transaction object as a parameter and returns a BigNumber representing the estimated gas amount.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nestimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>\n```\n\n----------------------------------------\n\nTITLE: Simulating Asset Changes for Multiple Transactions in Alchemy SDK\nDESCRIPTION: Method to simulate asset changes for a sequence of transactions without executing them on the blockchain. Returns asset changes for each transaction in the sequence.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsimulateAssetChangesBundle(transactions, blockIdentifier?): Promise<SimulateAssetChangesResponse[]>\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Listeners with Alchemy SDK\nDESCRIPTION: Demonstrates how to set up WebSocket listeners for blockchain events using Alchemy SDK. Shows examples of listening to blocks, monitoring specific transactions, and managing WebSocket connections.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, AlchemySubscription } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Listen to all new pending transactions.\nalchemy.ws.on('block', res => console.log(res));\n\n// Listen to only the next transaction on the USDC contract.\nalchemy.ws.once(\n  {\n    method: AlchemySubscription.PENDING_TRANSACTIONS,\n    toAddress: 'vitalik.eth'\n  },\n  res => console.log(res)\n);\n\n// Remove all listeners.\nalchemy.ws.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract in TypeScript\nDESCRIPTION: Deploys a new instance of the contract with the provided constructor arguments. Returns a Promise that resolves to the deployed Contract instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeploy(...args): Promise<Contract>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy SDK with Configuration\nDESCRIPTION: Sets up the Alchemy SDK with optional configuration parameters including API key and network selection. This is the typical initialization pattern to begin using the SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, Network } from 'alchemy-sdk';\n\n// Optional config object, but defaults to the API key 'demo' and Network 'eth-mainnet'.\nconst settings = {\n  apiKey: 'demo', // Replace with your Alchemy API key.\n  network: Network.ETH_MAINNET // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Balances using Alchemy SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Alchemy SDK to fetch all outbound transfers for a given Ethereum address (in this case, 'vitalik.eth').\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nalchemy.core.getTokenBalances('vitalik.eth').then(console.log);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for AssetTransfersParams in Alchemy SDK\nDESCRIPTION: TypeScript interface that defines the parameters for the getAssetTransfers method in the Alchemy SDK. It includes options for filtering asset transfers by addresses, block ranges, categories, and other criteria.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersParams.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AssetTransfersParams {\n  category: AssetTransfersCategory[];\n  contractAddresses?: string[];\n  excludeZeroValue?: boolean;\n  fromAddress?: string;\n  fromBlock?: string;\n  maxCount?: number;\n  order?: SortingOrder;\n  pageKey?: string;\n  toAddress?: string;\n  toBlock?: string;\n  withMetadata?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Smart Contract Method in TypeScript\nDESCRIPTION: This method executes a transaction without changing the blockchain state, useful for calling getter methods on smart contracts. It takes a transaction object and optional block tag as parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncall(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Using Alchemy SDK Core Features and Subscriptions\nDESCRIPTION: Demonstrates how to use different namespaces of the Alchemy SDK including core methods, NFT API access, and WebSocket subscriptions. Shows integration with both standard Ethers.js methods and Alchemy-specific enhancements.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, AlchemySubscription } from 'alchemy-sdk';\n\n// Using default settings - pass in a settings object to specify your API key and network\nconst alchemy = new Alchemy();\n\n// Access standard Ethers.js JSON-RPC node request\nalchemy.core.getBlockNumber().then(console.log);\n\n// Access Alchemy Enhanced API requests\nalchemy.core\n  .getTokenBalances('0x3f5CE5FBFe3E9af3971dD833D26bA9b5C936f0bE')\n  .then(console.log);\n\n// Access the Alchemy NFT API\nalchemy.nft.getNftsForOwner('vitalik.eth').then(console.log);\n\n// Access WebSockets and Alchemy-specific WS methods\nalchemy.ws.on(\n  {\n    method: AlchemySubscription.PENDING_TRANSACTIONS\n  },\n  res => console.log(res)\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Details in TypeScript\nDESCRIPTION: Retrieves details of a transaction by its hash. Returns null if the transaction is unknown. Searches the transaction pool for pending transactions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTransaction(transactionHash: string | Promise<string>): Promise<null | TransactionResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Balances for an Address using Alchemy SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Alchemy SDK to retrieve token balances for a specific Ethereum address (in this case, 'vitalik.eth').\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nalchemy.core.getTokenBalances('vitalik.eth').then(console.log);\n```\n\n----------------------------------------\n\nTITLE: NFT Pagination Implementation with Alchemy SDK\nDESCRIPTION: Shows how to implement pagination for NFT queries using Alchemy SDK's iterator pattern. The example demonstrates fetching all NFTs owned by a specific address using async iteration.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nasync function main() {\n  const ownerAddress = 'vitalik.eth';\n  for await (const nft of alchemy.nft.getNftsForOwnerIterator(ownerAddress)) {\n    console.log('ownedNft:', nft);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Defining DebugCallTrace Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for DebugCallTrace which includes properties like type, from, to, value, gas, gasUsed, input, output, error, revertReason, and recursive calls. This interface is used to represent Ethereum transaction call traces from debugging.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DebugCallTrace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **type**: `string`\n\nThe type of call: `CALL` or `CREATE` for the top-level call.\n\n#### Defined in\n\n[src/types/types.ts:1525](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1525)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **from**: `string`\n\nFrom address of the transaction.\n\n#### Defined in\n\n[src/types/types.ts:1527](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1527)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **to**: `string`\n\nTo address of the transaction.\n\n#### Defined in\n\n[src/types/types.ts:1529](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1529)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **value**: `string`\n\nAmount of value transfer as a hex string.\n\n#### Defined in\n\n[src/types/types.ts:1531](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1531)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **gas**: `string`\n\nGas provided for call as a hex string.\n\n#### Defined in\n\n[src/types/types.ts:1533](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1533)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **gasUsed**: `string`\n\nGas used during the call as a hex string.\n\n#### Defined in\n\n[src/types/types.ts:1535](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1535)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **input**: `string`\n\nCall data.\n\n#### Defined in\n\n[src/types/types.ts:1537](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1537)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **output**: `string`\n\nReturn data.\n\n#### Defined in\n\n[src/types/types.ts:1539](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1539)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **error**: `string`\n\nOptional error field.\n\n#### Defined in\n\n[src/types/types.ts:1541](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1541)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **revertReason**: `string`\n\nSolidity revert reason, if the call reverted.\n\n#### Defined in\n\n[src/types/types.ts:1543](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1543)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **calls**: [`DebugCallTrace`](DebugCallTrace.md)[]\n\nArray of sub-calls executed as part of the original call.\n\n#### Defined in\n\n[src/types/types.ts:1545](https://github.com/alchemyplatform/alchemy-sdk-js/blob/8f119ad1/src/types/types.ts#L1545)\n```\n\n----------------------------------------\n\nTITLE: Constructing a ContractFactory in TypeScript\nDESCRIPTION: Creates a new ContractFactory instance with a contract interface, bytecode, and optional signer. This is used for deploying new contracts to the blockchain.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ContractFactory(contractInterface, bytecode, signer?)\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFTs Owned by an Address using Alchemy SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Alchemy SDK to get NFTs owned by a specific address, including counting total NFTs, retrieving image URLs, and filtering out spam NFTs.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, NftExcludeFilters } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Get how many NFTs an address owns.\nalchemy.nft.getNftsForOwner('vitalik.eth').then(nfts => {\n  console.log(nfts.totalCount);\n});\n\n// Get all the image urls for all the NFTs an address owns.\nasync function main() {\n  for await (const nft of alchemy.nft.getNftsForOwnerIterator('vitalik.eth')) {\n    console.log(nft.media);\n  }\n}\n\nmain();\n\n// Filter out spam NFTs.\nalchemy.nft\n  .getNftsForOwner('vitalik.eth', {\n    excludeFilters: [NftExcludeFilters.SPAM]\n  })\n  .then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Implementing Alchemy WebSocket Listeners in TypeScript\nDESCRIPTION: Demonstrates how to set up WebSocket listeners for blockchain events using Alchemy SDK. Shows examples of listening to blocks, monitoring specific transactions, and managing WebSocket connections.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy, AlchemySubscription } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Listen to all new pending transactions.\nalchemy.ws.on('block', res => console.log(res));\n\n// Listen to only the next transaction on the USDC contract.\nalchemy.ws.once(\n  {\n    method: AlchemySubscription.PENDING_TRANSACTIONS,\n    toAddress: 'vitalik.eth'\n  },\n  res => console.log(res)\n);\n\n// Remove all listeners.\nalchemy.ws.removeAllListeners();\n```\n\n----------------------------------------\n\nTITLE: Implementing waitForTransaction Method in TypeScript\nDESCRIPTION: Method that returns a promise which resolves when a specified transaction hash is mined. Takes transaction hash, optional confirmation count, and timeout parameters. Returns null if confirmations=0 and transaction not mined, otherwise waits for specified confirmation blocks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwaitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<null | TransactionReceipt>\n```\n\n----------------------------------------\n\nTITLE: Defining AlchemyProvider Class in TypeScript\nDESCRIPTION: Defines the AlchemyProvider class which extends JsonRpcProvider and implements CommunityResourcable. It includes properties for the API key and batching requests, as well as various inherited properties and methods for interacting with Ethereum networks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n  readonly apiKey: string;\n  readonly batchRequests: boolean;\n  // ... other properties and methods\n}\n```\n\n----------------------------------------\n\nTITLE: AddressActivityWebhook Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface declaration for AddressActivityWebhook that extends the base Webhook interface. This interface includes properties for webhook identification, configuration, and status, with a specific type property set to ADDRESS_ACTIVITY.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AddressActivityWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AddressActivityWebhook extends Webhook {\n  type: WebhookType.ADDRESS_ACTIVITY;\n}\n```\n\n----------------------------------------\n\nTITLE: FeeData Interface Definition in TypeScript\nDESCRIPTION: Defines the FeeData interface used to represent Ethereum transaction fee data. It includes properties for gasPrice, lastBaseFeePerGas, maxFeePerGas, and maxPriorityFeePerGas, all of which can be either null or BigNumber instances.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/FeeData.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FeeData {\n  gasPrice: null | BigNumber;\n  lastBaseFeePerGas: null | BigNumber;\n  maxFeePerGas: null | BigNumber;\n  maxPriorityFeePerGas: null | BigNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Token Prices by Symbol in TypeScript\nDESCRIPTION: Method that retrieves historical token prices by token symbol. It takes a symbol, start time, end time, and interval parameters to obtain price data over a specified time period.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/PricesNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetHistoricalPriceBySymbol(symbol, startTime, endTime, interval): Promise<HistoricalPriceBySymbolResponse>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Confirmation in TypeScript\nDESCRIPTION: Returns a promise which will not resolve until the specified transaction hash is mined. It can be configured to wait for a certain number of confirmations and has a timeout option.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **waitForTransaction**(`transactionHash`, `confirmations?`, `timeout?`): `Promise`<``null`` | [`TransactionReceipt`](../interfaces/TransactionReceipt.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining AlchemySettings Interface in TypeScript\nDESCRIPTION: This code snippet defines the AlchemySettings interface with various optional properties used to configure the Alchemy SDK. It includes settings for API key, network, request timeout, and other configuration options.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemySettings.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AlchemySettings {\n  apiKey?: string;\n  network?: Network;\n  maxRetries?: number;\n  url?: string;\n  authToken?: string;\n  requestTimeout?: number;\n  batchRequests?: boolean;\n  connectionInfoOverrides?: Partial<ConnectionInfo>;\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Signed Transaction in TypeScript\nDESCRIPTION: Submits a signed transaction to the network to be mined. The transaction must be valid with correct nonce and sufficient balance. This is an alias for TransactNamespace.getTransaction.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **sendTransaction**(`signedTransaction`): `Promise`<[`TransactionResponse`](../interfaces/TransactionResponse.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining GetNftsForOwnerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetNftsForOwnerOptions interface with various optional properties for customizing NFT retrieval. It includes options for contract filtering, pagination, metadata handling, and result ordering.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftsForOwnerOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetNftsForOwnerOptions {\n  contractAddresses?: string[];\n  excludeFilters?: NftFilters[];\n  includeFilters?: NftFilters[];\n  omitMetadata?: boolean;\n  orderBy?: TRANSFERTIME;\n  pageKey?: string;\n  pageSize?: number;\n  tokenUriTimeoutInMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Interface in TypeScript\nDESCRIPTION: This code snippet defines the Block interface, which extends the _Block interface. It includes various properties related to Ethereum block data, such as difficulty, gas limits, timestamps, and transaction hashes.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/Block.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Block extends _Block {\n  _difficulty: BigNumber;\n  baseFeePerGas?: null | BigNumber;\n  difficulty: number;\n  extraData: string;\n  gasLimit: BigNumber;\n  gasUsed: BigNumber;\n  hash: string;\n  miner: string;\n  nonce: string;\n  number: number;\n  parentHash: string;\n  timestamp: number;\n  transactions: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Contract Deployer in TypeScript\nDESCRIPTION: This beta method finds the address that deployed a given contract and the block number it was deployed in. It performs a binary search across all blocks since genesis, which can be time-consuming.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfindContractDeployer(contractAddress: string): Promise<DeployResult>\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy SDK Instance\nDESCRIPTION: Updated syntax for instantiating the Alchemy SDK object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst alchemy = new Alchemy(settings)\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Transfers with Metadata in TypeScript\nDESCRIPTION: This method retrieves asset transfer transactions for specific addresses, including additional metadata. It requires the 'withMetadata' parameter to be set to true in the AssetTransfersWithMetadataParams object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetTransfers(params: AssetTransfersWithMetadataParams): Promise<AssetTransfersWithMetadataResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching BAYC NFT Owners using Alchemy SDK in TypeScript\nDESCRIPTION: This example shows how to use the Alchemy SDK to retrieve all owners of the Bored Ape Yacht Club NFT collection. It iterates through all NFTs in the contract and fetches the owners for each token.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\n// Bored Ape Yacht Club contract address.\nconst baycAddress = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D';\n\nasync function main() {\n  for await (const nft of alchemy.nft.getNftsForContractIterator(baycAddress, {\n    // Omit the NFT metadata for smaller payloads.\n    omitMetadata: true\n  })) {\n    await alchemy.nft\n      .getOwnersForNft(nft.contract.address, nft.tokenId)\n      .then(response =>\n        console.log('owners:', response.owners, 'tokenId:', nft.tokenId)\n      );\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Defining NftNamespace Class with NFT-related Methods in JavaScript\nDESCRIPTION: Class definition for NftNamespace containing methods for interacting with NFTs. Includes functions for getting metadata, ownership info, sales data, and more for NFTs and NFT contracts.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass NftNamespace {\n  computeRarity(contractAddress, tokenId) {\n    // Implementation\n  }\n\n  getCollectionMetadata(collectionSlug) {\n    // Implementation\n  }\n\n  getContractMetadata(contractAddress) {\n    // Implementation\n  }\n\n  getContractMetadataBatch(contractAddresses) {\n    // Implementation\n  }\n\n  getContractsForOwner(owner, options) {\n    // Implementation\n  }\n\n  getFloorPrice(contractAddress) {\n    // Implementation\n  }\n\n  getMintedNfts(owner, options) {\n    // Implementation\n  }\n\n  getNftMetadata(contractAddress, tokenId, options) {\n    // Implementation\n  }\n\n  getNftMetadataBatch(tokens, options) {\n    // Implementation\n  }\n\n  getNftSales(options) {\n    // Implementation\n  }\n\n  getNftsForContract(contractAddress, options) {\n    // Implementation\n  }\n\n  // Additional methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Collection Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of an NFT collection object. Contains optional and required properties for collection metadata including name, description, social links, and floor price information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftCollection.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftCollection {\n  name: string;\n  slug?: string;\n  floorPrice?: NftCollectionFloorPrice;\n  description?: string;\n  externalUrl?: string;\n  twitterUsername?: string;\n  discordUrl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Transfers without Metadata in TypeScript\nDESCRIPTION: This method retrieves asset transfer transactions for specific addresses without additional metadata. It takes an AssetTransfersParams object as a parameter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetAssetTransfers(params: AssetTransfersParams): Promise<AssetTransfersResponse>\n```\n\n----------------------------------------\n\nTITLE: Custom Event Listener Implementation in TypeScript\nDESCRIPTION: Methods for handling WebSocket event subscriptions with Alchemy-specific functionality including on(), once(), and off() implementations.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\non(eventName: AlchemyEventType, listener: Listener): AlchemyWebSocketProvider\nonce(eventName: AlchemyEventType, listener: Listener): AlchemyWebSocketProvider\noff(eventName: AlchemyEventType, listener?: Listener): AlchemyWebSocketProvider\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Block Number in TypeScript\nDESCRIPTION: This method returns the block number of the most recently mined block on the network.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetBlockNumber(): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Getting Token Balances in TypeScript\nDESCRIPTION: Retrieves token balances for a specific address. Has multiple overloads to support different options for fetching ERC-20 or other token balances.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenBalances(addressOrName: string): Promise<TokenBalancesResponseErc20>\n\ngetTokenBalances(addressOrName: string, contractAddresses?: string[]): Promise<TokenBalancesResponse>\n\ngetTokenBalances(addressOrName: string, options: TokenBalancesOptionsErc20): Promise<TokenBalancesResponseErc20>\n\ngetTokenBalances(addressOrName: string, options: TokenBalancesOptionsDefaultTokens): Promise<TokenBalancesResponse>\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for Transactions in Alchemy SDK\nDESCRIPTION: Method to estimate the gas required for a transaction. Returns an approximate gas amount needed, though estimates may not be completely accurate due to potential state changes from other transactions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nestimateGas(transaction): Promise<BigNumber>\n```\n\n----------------------------------------\n\nTITLE: Defining GetNftSalesResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure of NFT sales response data. Contains properties for an array of NFT sales, an optional page key for pagination, and block validation information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftSalesResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetNftSalesResponse {\n    nftSales: NftSale[];\n    pageKey?: string;\n    validAt: NftSaleValidAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Metadata in TypeScript\nDESCRIPTION: Retrieves metadata for a given token contract address. Takes the contract address as a parameter and returns token metadata.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenMetadata(address: string): Promise<TokenMetadataResponse>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Level in Alchemy SDK\nDESCRIPTION: This function sets the verbosity of logging in the Alchemy SDK. It takes a LogLevel parameter and configures the logging accordingly, with options ranging from debug to silent.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetLogLevel(logLevel: LogLevel): void\n```\n\n----------------------------------------\n\nTITLE: Defining NftContract Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftContract interface with properties such as address, tokenType, name, symbol, and others. It represents an Alchemy representation of an NFT contract with metadata information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContract.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftContract {\n  address: string;\n  tokenType: NftTokenType;\n  name?: string;\n  symbol?: string;\n  totalSupply?: string;\n  openSeaMetadata: OpenSeaCollectionMetadata;\n  contractDeployer?: string;\n  deployedBlockNumber?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Prices by Symbol in TypeScript\nDESCRIPTION: Method that retrieves token prices by token symbol. It takes an array of token symbols and returns price data for each token.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/PricesNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenPriceBySymbol(symbols): Promise<GetTokenPriceBySymbolResponse>\n```\n\n----------------------------------------\n\nTITLE: Sending Signed Transaction in AlchemyWebSocketProvider\nDESCRIPTION: Sends a signed transaction to the Ethereum network and returns a TransactionResponse.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs for Owner in TypeScript\nDESCRIPTION: This method retrieves NFTs owned by a specific address. It supports both full NFT data and base NFT data (without metadata) retrieval.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetNftsForOwner(owner: string, options: GetBaseNftsForOwnerOptions): Promise<OwnedBaseNftsResponse>\n\ngetNftsForOwner(owner: string, options?: GetNftsForOwnerOptions): Promise<OwnedNftsResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Information in TypeScript\nDESCRIPTION: This method returns block information based on the provided block number or hash. Transactions are represented as an array of transaction hashes.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetBlock(blockHashOrBlockTag: BlockTag | Promise<BlockTag>): Promise<Block>\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Transfers for a Contract in TypeScript\nDESCRIPTION: This method retrieves all NFT transfers for a given NFT contract address. It accepts the contract address as a parameter and an optional options object. It returns a Promise that resolves to a TransfersNftResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTransfersForContract(contract: string, options?: GetTransfersForContractOptions): Promise<TransfersNftResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fee Data in TypeScript\nDESCRIPTION: Gets the recommended fee data to use in a transaction, including maxFeePerGas and maxPriorityFeePerGas for EIP-1559 transactions. Returns a Promise that resolves to a FeeData object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetFeeData(): Promise<FeeData>\n```\n\n----------------------------------------\n\nTITLE: Connecting a Signer in TypeScript\nDESCRIPTION: Creates a new ContractFactory instance with the same interface and bytecode, but connected to a different signer for deployment.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnect(signer): ContractFactory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block with Full Transaction Details in TypeScript\nDESCRIPTION: This method returns block information with full transaction details based on the provided block number or hash. Transactions are represented as an array of TransactionResponse objects.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetBlockWithTransactions(blockHashOrBlockTag: BlockTag | Promise<BlockTag>): Promise<BlockWithTransactions>\n```\n\n----------------------------------------\n\nTITLE: Reverse ENS Lookup in TypeScript\nDESCRIPTION: Performs a reverse lookup of the address in ENS using the Reverse Registrar. Returns a Promise that resolves to either null or a string containing the ENS name.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **lookupAddress**(`address`): `Promise`<``null`` | `string`>\n```\n\n----------------------------------------\n\nTITLE: Getting Token Prices by Contract Address in TypeScript\nDESCRIPTION: Method that retrieves token prices by network and contract address pairs. It takes an array of TokenAddressRequest objects and returns price data.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/PricesNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenPriceByAddress(addresses): Promise<GetTokenPriceByAddressResponse>\n```\n\n----------------------------------------\n\nTITLE: Contract Class Constructor - Alchemy SDK TypeScript\nDESCRIPTION: Constructor for initializing a new Contract instance. Takes contract address/name, interface ABI, and optional signer/provider parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider)\n```\n\n----------------------------------------\n\nTITLE: Sending RPC Request in AlchemyWebSocketProvider\nDESCRIPTION: Sends an RPC request with the specified method and optional parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nsend(method: string, params?: any[]): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Verifying NFT Ownership in TypeScript\nDESCRIPTION: This method checks if an address owns one or more NFTs from a specific contract or multiple contracts. It has two overloads, one for a single contract and another for multiple contracts, returning a boolean or an object mapping contract addresses to ownership status respectively.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nverifyNftOwnership(owner: string, contractAddress: string): Promise<boolean>\n\nverifyNftOwnership(owner: string, contractAddresses: string[]): Promise<{ [contractAddress: string]: boolean }>\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Filter Interface in TypeScript\nDESCRIPTION: Interface definition for NFT filtering in webhook implementations. Contains contractAddress as a required string property and an optional tokenId property of BigNumberish type. Used in NftActivityWebhook and NftMetadataUpdateWebhook.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftFilter.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftFilter {\n  contractAddress: string;\n  tokenId?: BigNumberish;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners in AlchemyWebSocketProvider\nDESCRIPTION: Removes all listeners for a specified event type or all events if no event name is provided. Returns the AlchemyWebSocketProvider instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveAllListeners(eventName?: AlchemyEventType): AlchemyWebSocketProvider\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details in Alchemy SDK\nDESCRIPTION: Method to fetch transaction information by its hash. Returns the transaction data or null if the transaction is unknown. It searches both confirmed transactions and the transaction pool.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetTransaction(transactionHash): Promise<null | TransactionResponse>\n```\n\n----------------------------------------\n\nTITLE: Fetching NFTs for Contract in TypeScript\nDESCRIPTION: This method retrieves NFTs for a given contract address. It supports both full NFT data and base NFT data (without metadata) retrieval.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetNftsForContract(contractAddress: string, options?: GetNftsForContractOptions): Promise<NftContractNftsResponse>\n\ngetNftsForContract(contractAddress: string, options?: GetBaseNftsForContractOptions): Promise<NftContractBaseNftsResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Entries in TypeScript\nDESCRIPTION: Gets an array of log entries that match the provided filter criteria. Takes a Filter or FilterByBlockHash object as a parameter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Log[]>\n```\n\n----------------------------------------\n\nTITLE: Simulating Asset Changes for a Transaction in Alchemy SDK\nDESCRIPTION: Method to simulate the asset changes resulting from a transaction without actually executing it on the blockchain. Returns a list of all asset changes that would occur during transaction execution.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsimulateAssetChanges(transaction, blockIdentifier?): Promise<SimulateAssetChangesResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Transfers for an Owner in TypeScript\nDESCRIPTION: This method gets all NFT transfers for a given owner's address. It takes the owner's address, a transfer category, and optional options as parameters. It returns a Promise that resolves to a TransfersNftResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTransfersForOwner(owner: string, category: GetTransfersForOwnerTransferType, options?: GetTransfersForOwnerOptions): Promise<TransfersNftResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Log Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of blockchain event logs, including properties for block details, transaction information, log data and topics. Used for typing event log objects returned from blockchain queries.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/Log.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Log {\n    address: string;\n    blockHash: string;\n    blockNumber: number;\n    data: string;\n    logIndex: number;\n    removed: boolean;\n    topics: string[];\n    transactionHash: string;\n    transactionIndex: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForContractOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies optional parameters for fetching NFT contract owners. Includes options for specifying block number, pagination key, owner count inclusion, and token balance details.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForContractOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetOwnersForContractOptions {\n  withTokenBalances?: boolean;\n  block?: string;\n  pageKey?: string;\n  includeCount?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing removeAllListeners Method in TypeScript\nDESCRIPTION: Removes all listeners for a specific event or all events. Takes an optional eventName parameter and returns the WebSocketNamespace instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **removeAllListeners**(`eventName?`): [`WebSocketNamespace`](WebSocketNamespace.md)\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition specifying the properties of an NFT object including contract details, token information, metadata, and collection data. The interface extends BaseNft and is extended by OwnedNft and TransferredNft.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/Nft.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Nft {\n  acquiredAt?: AcquiredAt;\n  collection?: BaseNftCollection;\n  contract: NftContractForNft;\n  description?: string;\n  image: NftImage;\n  mint?: NftMint;\n  name?: string;\n  raw: NftRawMetadata;\n  timeLastUpdated: string;\n  tokenId: string;\n  tokenType: NftTokenType;\n  tokenUri?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Token Prices by Contract Address in TypeScript\nDESCRIPTION: Method that retrieves historical token prices by network and contract address. It takes network, address, start time, end time, and interval parameters to obtain price data over a specified time period.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/PricesNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetHistoricalPriceByAddress(network, address, startTime, endTime, interval): Promise<HistoricalPriceByAddressResponse>\n```\n\n----------------------------------------\n\nTITLE: Tracing Transaction Call with CallTracer in TypeScript\nDESCRIPTION: Method to run an eth_call with context of a provided block execution using the CallTracer. Takes transaction details, block identifier, and tracer configuration as parameters and returns a Promise with the debug call trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceCall(transaction: DebugTransaction, blockIdentifier: string, tracer: DebugCallTracer): Promise<DebugCallTrace>\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Receipts for a Block in TypeScript\nDESCRIPTION: Gets all transaction receipts for a given block by number or block hash. It returns a Promise that resolves to a TransactionReceiptsResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **getTransactionReceipts**(`params`): `Promise`<[`TransactionReceiptsResponse`](../interfaces/TransactionReceiptsResponse.md)>\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Events in TypeScript\nDESCRIPTION: Method for querying events from a contract. It accepts an event name or filter and optional block range parameters, returning a promise that resolves to an array of Event objects.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **queryFilter**(`event`: `string` | `EventFilter`, `fromBlockOrBlockhash?`: [`BlockTag`](../modules.md#blocktag), `toBlock?`: [`BlockTag`](../modules.md#blocktag)): `Promise`<`Event`[]>\n```\n\n----------------------------------------\n\nTITLE: Retrieving WebSocketProvider in TypeScript\nDESCRIPTION: Method to get an AlchemyWebSocketProvider instance which supports Alchemy's Subscription APIs, automatic backfilling, and other performance improvements. Only one WebSocket provider is created per Alchemy instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyConfig.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **getWebSocketProvider**(): `Promise`<[`AlchemyWebSocketProvider`](AlchemyWebSocketProvider.md)>\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for GetBaseNftsForOwnerOptions in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies optional parameters for fetching NFTs without metadata. It includes properties for pagination, filtering, ordering, and timeout settings when retrieving NFTs for a specific owner.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetBaseNftsForOwnerOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetBaseNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing [OwnedBaseNftsResponse](OwnedBaseNftsResponse.md) or\n   * [OwnedNftsResponse](OwnedNftsResponse.md)to use for pagination.\n   */\n  pageKey?: string;\n\n  /**\n   * Optional list of contract addresses to filter the results by. Limit is 20.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * Optional boolean flag to include NFT metadata. Defaults to `false`.\n   */\n  omitMetadata: true;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: TRANSFERTIME;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing off Method in TypeScript\nDESCRIPTION: Removes a specific listener or all listeners for an event. Takes eventName and optional listener parameter, returns the WebSocketNamespace instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **off**(`eventName`, `listener?`): [`WebSocketNamespace`](WebSocketNamespace.md)\n```\n\n----------------------------------------\n\nTITLE: Getting Account Balance in TypeScript\nDESCRIPTION: This method returns the balance of a given address as of the provided block. It takes an address or name and an optional block tag as parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>\n```\n\n----------------------------------------\n\nTITLE: Iterating NFTs for Contract in TypeScript\nDESCRIPTION: This method provides an async iterator for fetching all NFTs of a contract. It supports both full NFT data and base NFT data iteration.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetNftsForContractIterator(contractAddress: string, options?: GetNftsForContractOptions): AsyncIterable<Nft>\n\ngetNftsForContractIterator(contractAddress: string, options?: GetBaseNftsForContractOptions): AsyncIterable<BaseNft>\n```\n\n----------------------------------------\n\nTITLE: Contract Method - queryFilter\nDESCRIPTION: Method declaration for querying events from a contract with optional block range parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nqueryFilter(event: string | EventFilter, fromBlockOrBlockhash?: number | string, toBlock?: number): Promise<Event[]>\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name to Address in TypeScript\nDESCRIPTION: Returns the underlying owner address for the provided ENS address, or null if the ENS name does not have an underlying address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **resolveName**(`name`): `Promise`<``null`` | `string`>\n```\n\n----------------------------------------\n\nTITLE: Fetching Owners for NFT Contract in TypeScript\nDESCRIPTION: This method retrieves all owners for a given NFT contract. It supports optional inclusion of token balances for each owner.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetOwnersForContract(contractAddress: string, options: GetOwnersForContractWithTokenBalancesOptions): Promise<GetOwnersForContractWithTokenBalancesResponse>\n\ngetOwnersForContract(contractAddress: string, options?: GetOwnersForContractOptions): Promise<GetOwnersForContractResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining GetContractMetadataBatchResponse Interface in TypeScript\nDESCRIPTION: This code defines the GetContractMetadataBatchResponse interface with a contracts property that is an array of NftContract objects. The interface is used to structure responses from batch requests for NFT contract metadata.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetContractMetadataBatchResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **contracts**: [`NftContract`](NftContract.md)[]\n```\n\n----------------------------------------\n\nTITLE: Defining NftFiltersResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftFiltersResponse interface with three properties: filters (an array of NftFilter objects), totalCount (a number), and an optional pageKey (a string). It is used to structure the response from the getNftFilters method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftFiltersResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftFiltersResponse {\n  filters: NftFilter[];\n  totalCount: number;\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTransfersWithMetadataResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AssetTransfersWithMetadataResponse, which contains an array of AssetTransfersWithMetadataResult objects and an optional pageKey string for pagination. This interface is used as the return type for the CoreNamespace.getAssetTransfers method when using metadata parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersWithMetadataResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AssetTransfersWithMetadataResponse {\n  transfers: AssetTransfersWithMetadataResult[];\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Constants in TypeScript\nDESCRIPTION: Constant string definitions for various blockchain networks including mainnet and testnet environments. These constants are used throughout the Alchemy SDK to specify network targets for API calls and configurations.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/Network.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nFANTOM_TESTNET = \"fantom-testnet\"\nFLOW_MAINNET = \"flow-mainnet\"\nFLOW_TESTNET = \"flow-testnet\"\nFRAX_MAINNET = \"frax-mainnet\"\nFRAX_SEPOLIA = \"frax-sepolia\"\nGEIST_MAINNET = \"geist-mainnet\"\nGEIST_POLTER = \"geist-polter\"\nGNOSIS_CHIADO = \"gnosis-chiado\"\nGNOSIS_MAINNET = \"gnosis-mainnet\"\nINK_MAINNET = \"ink-mainnet\"\nINK_SEPOLIA = \"ink-sepolia\"\nLENS_SEPOLIA = \"lens-sepolia\"\nLINEA_MAINNET = \"linea-mainnet\"\nLINEA_SEPOLIA = \"linea-sepolia\"\nLUMIA_PRISM = \"lumia-prism\"\nLUMIA_TESTNET = \"lumia-testnet\"\nMANTLE_MAINNET = \"mantle-mainnet\"\nMANTLE_SEPOLIA = \"mantle-sepolia\"\nMATIC_AMOY = \"polygon-amoy\"\nMATIC_MAINNET = \"polygon-mainnet\"\nMATIC_MUMBAI = \"polygon-mumbai\"\nMETIS_MAINNET = \"metis-mainnet\"\nOPBNB_MAINNET = \"opbnb-mainnet\"\nOPBNB_TESTNET = \"opbnb-testnet\"\nOPT_GOERLI = \"opt-goerli\"\nOPT_MAINNET = \"opt-mainnet\"\nOPT_SEPOLIA = \"opt-sepolia\"\nPOLYGONZKEVM_CARDONA = \"polygonzkevm-cardona\"\nPOLYGONZKEVM_MAINNET = \"polygonzkevm-mainnet\"\nPOLYGONZKEVM_TESTNET = \"polygonzkevm-testnet\"\nPOLYNOMIAL_MAINNET = \"polynomial-mainnet\"\nPOLYNOMIAL_SEPOLIA = \"polynomial-sepolia\"\nROOTSTOCK_MAINNET = \"rootstock-mainnet\"\nROOTSTOCK_TESTNET = \"rootstock-testnet\"\nSCROLL_MAINNET = \"scroll-mainnet\"\nSCROLL_SEPOLIA = \"scroll-sepolia\"\nSHAPE_MAINNET = \"shape-mainnet\"\nSHAPE_SEPOLIA = \"shape-sepolia\"\nSONEIUM_MAINNET = \"soneium-mainnet\"\nSONEIUM_MINATO = \"soneium-minato\"\nSONIC_BLAZE = \"sonic-blaze\"\nSONIC_MAINNET = \"sonic-mainnet\"\nUNICHAIN_SEPOLIA = \"unichain-sepolia\"\nWORLDCHAIN_MAINNET = \"worldchain-mainnet\"\nWORLDCHAIN_SEPOLIA = \"worldchain-sepolia\"\nXMTP_TESTNET = \"xmtp-testnet\"\nZETACHAIN_MAINNET = \"zetachain-mainnet\"\nZETACHAIN_TESTNET = \"zetachain-testnet\"\nZKSYNC_MAINNET = \"zksync-mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Address is a Smart Contract in TypeScript\nDESCRIPTION: Checks if the provided address is a smart contract. Returns a Promise that resolves to a boolean value.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **isContractAddress**(`address`): `Promise`<`boolean`>\n```\n\n----------------------------------------\n\nTITLE: BigNumber Constructor Definition\nDESCRIPTION: Constructor for creating new BigNumber instances. Takes a constructor guard parameter and a hex string representation of the number.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/BigNumber.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(constructorGuard: any, hex: string)\n```\n\n----------------------------------------\n\nTITLE: Checking if an NFT is an Airdrop in TypeScript\nDESCRIPTION: This method determines whether a token is marked as an airdrop. It takes the contract address and token ID as parameters and returns a Promise that resolves to an IsAirdropNftResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nisAirdropNft(contractAddress: string, tokenId: string): Promise<IsAirdropNftResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Data in TypeScript\nDESCRIPTION: Gets the value stored at a specific position for an address. Takes the address, storage position, and optional block tag as parameters. Returns the value as a hexadecimal string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Getting All Webhooks Method\nDESCRIPTION: Method to retrieve all webhooks associated with a team based on the provided auth token.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetAllWebhooks(): Promise<GetAllWebhooksResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining NftWebhookParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftWebhookParams interface with two properties: filters (an array of NftFilter objects) and an optional network property of type Network. It's used when calling the createWebhook method to set up NFT-related webhooks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftWebhookParams.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftWebhookParams {\n  filters: NftFilter[];\n  network?: Network;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomGraphqlWebhookParams Interface in TypeScript\nDESCRIPTION: This code defines the CustomGraphqlWebhookParams interface with properties for appId, graphqlQuery, network, and skipEmptyMessages. It includes detailed comments explaining each property and its purpose.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/CustomGraphqlWebhookParams.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CustomGraphqlWebhookParams {\n  appId?: string;\n  graphqlQuery: string;\n  network?: Network;\n  skipEmptyMessages?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokensForOwnerResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetTokensForOwnerResponse interface with two properties: an optional pageKey for pagination and a tokens array containing OwnedToken objects. It is used as the response type for the getTokensForOwner method in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetTokensForOwnerResponse {\n  pageKey?: string;\n  tokens: OwnedToken[];\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Individual NFT Metadata in TypeScript\nDESCRIPTION: This method refreshes the cached metadata for a specific NFT. It takes the contract address and token ID as parameters and returns a Promise that resolves to a boolean indicating whether the metadata was refreshed.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshNftMetadata(contractAddress: string, tokenId: BigNumberish): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining parseUnits Function in TypeScript\nDESCRIPTION: Defines a function to parse a string value and unit name into a BigNumber.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseUnits(value: string, unitName?: BigNumberish): BigNumber\n```\n\n----------------------------------------\n\nTITLE: TransactionResponse Interface Definition in TypeScript\nDESCRIPTION: Defines the TransactionResponse interface that extends the Transaction type with additional properties for handling Ethereum transaction responses. Includes properties for block details, transaction parameters, and a wait method for confirmations.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransactionResponse extends Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    confirmations: number;\n    from: string;\n    hash: string;\n    raw?: string;\n    timestamp?: number;\n    wait(confirmations?: number): Promise<TransactionReceipt>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ethers.js Provider\nDESCRIPTION: New promise-based syntax for accessing the full Ethers.js provider.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nalchemy.config.getProvider()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spam Contracts in TypeScript\nDESCRIPTION: This method returns a list of all spam contracts marked by Alchemy. It takes no parameters and returns a Promise that resolves to a GetSpamContractsResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSpamContracts(): Promise<GetSpamContractsResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining NftMetadataUpdateWebhook Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftMetadataUpdateWebhook interface, which extends the Webhook interface. It includes properties such as id, network, url, isActive, timeCreated, signingKey, version, and type. The type property is specifically set to NFT_METADATA_UPDATE.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadataUpdateWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftMetadataUpdateWebhook extends Webhook {\n  type: WebhookType.NFT_METADATA_UPDATE;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining toUtf8Bytes Function in TypeScript\nDESCRIPTION: Defines a function to convert a string to UTF-8 bytes, with optional Unicode normalization.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoUtf8Bytes(str: string, form?: UnicodeNormalizationForm): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining Alchemy SDK Client Properties in TypeScript\nDESCRIPTION: Definition of readonly properties for the Alchemy class, including configuration, core functionality, and various API namespaces.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Alchemy.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n• `Readonly` **config**: [`AlchemyConfig`](AlchemyConfig.md)\n\n• `Readonly` **core**: [`CoreNamespace`](CoreNamespace.md)\n\n• `Readonly` **debug**: [`DebugNamespace`](DebugNamespace.md)\n\n• `Readonly` **nft**: [`NftNamespace`](NftNamespace.md)\n\n• `Readonly` **notify**: [`NotifyNamespace`](NotifyNamespace.md)\n\n• `Readonly` **prices**: [`PricesNamespace`](PricesNamespace.md)\n\n• `Readonly` **transact**: [`TransactNamespace`](TransactNamespace.md)\n\n• `Readonly` **ws**: [`WebSocketNamespace`](WebSocketNamespace.md)\n```\n\n----------------------------------------\n\nTITLE: Iterating NFTs for Owner in TypeScript\nDESCRIPTION: This method provides an async iterator for fetching all NFTs owned by an address. It supports both full NFT data and base NFT data iteration.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetNftsForOwnerIterator(owner: string, options?: GetNftsForOwnerOptions): AsyncIterable<OwnedNft>\n\ngetNftsForOwnerIterator(owner: string, options?: GetBaseNftsForOwnerOptions): AsyncIterable<OwnedBaseNft>\n```\n\n----------------------------------------\n\nTITLE: Simulating Execution of Multiple Transactions in Alchemy SDK\nDESCRIPTION: Method to simulate the execution of multiple transactions in sequence without running them on the blockchain. Returns traces and logs for each transaction in the sequence.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsimulateExecutionBundle(transactions, blockIdentifier?): Promise<SimulateExecutionResponse[]>\n```\n\n----------------------------------------\n\nTITLE: Tracing Transaction Execution with PrestateTracer in TypeScript\nDESCRIPTION: Overloaded method to replay a transaction exactly as it was executed on the network using the PrestateTracer. Takes a transaction hash, tracer configuration, and optional timeout parameter and returns a Promise with the debug prestate trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceTransaction(transactionHash: string, tracer: DebugPrestateTracer, timeout?: string): Promise<DebugPrestateTrace>\n```\n\n----------------------------------------\n\nTITLE: Defining ComputeRarityResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the ComputeRarityResponse interface which contains a single property 'rarities' as an array of NftAttributeRarity objects. The interface is used as the return type for the NftNamespace.computeRarity method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/ComputeRarityResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **rarities**: [`NftAttributeRarity`](NftAttributeRarity.md)[]\n```\n\n----------------------------------------\n\nTITLE: Defining TransfersNftResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransfersNftResponse interface with two properties: nfts (an array of TransferredNft objects) and an optional pageKey for pagination. It is used in NFT-related methods of the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransfersNftResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransfersNftResponse {\n  nfts: TransferredNft[];\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Blockchain Data\nDESCRIPTION: Core type definitions used throughout the SDK for representing blockchain data structures like transactions, blocks, and events. Includes complex types like AddressWebhookUpdate and AlchemyEventFilter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddressWebhookUpdate = WebhookStatusUpdate | RequireAtLeastOne<WebhookAddressUpdate> | WebhookAddressOverride;\n\ntype AlchemyEventFilter = AlchemyMinedTransactionsEventFilter | AlchemyPendingTransactionsEventFilter;\n\ntype BlockIdentifier = string | CommitmentLevel;\n```\n\n----------------------------------------\n\nTITLE: Defining AlchemySubscription Enumeration in TypeScript\nDESCRIPTION: This code snippet defines an enumeration called AlchemySubscription with two members: PENDING_TRANSACTIONS and MINED_TRANSACTIONS. These represent method names for Alchemy's custom Subscription API endpoints.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/AlchemySubscription.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum AlchemySubscription {\n  PENDING_TRANSACTIONS = \"alchemy_pendingTransactions\",\n  MINED_TRANSACTIONS = \"alchemy_minedTransactions\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Webhook Method\nDESCRIPTION: Method to create a new CustomGraphqlWebhook for tracking events on every block. Takes a URL, webhook type and query parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateWebhook(url: string, type: GRAPHQL, params: CustomGraphqlWebhookParams): Promise<CustomGraphqlWebhook>\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Count in TypeScript\nDESCRIPTION: Retrieves the number of transactions sent from an address. Takes the address and optional block tag as parameters. Returns the transaction count as a number.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Address in TypeScript\nDESCRIPTION: Static method that computes the deterministic address where a contract will be deployed based on the sender's address and nonce.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getContractAddress(tx: { from: string; nonce: number | BytesLike | BigNumber }): string\n```\n\n----------------------------------------\n\nTITLE: Defining EventFilter Interface in TypeScript\nDESCRIPTION: Defines the EventFilter interface with optional properties for address and topics. The address property can be a string or array of strings, while topics is an array that can contain null, string, or string array elements.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/EventFilter.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface EventFilter {\n  address?: string | string[];\n  topics?: (null | string | string[])[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransferredNft Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TransferredNft that extends the base Nft interface. It adds transfer-specific properties like from/to addresses, block number, and transaction hash while inheriting core NFT properties like contract details, metadata, and token information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransferredNft.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransferredNft extends Nft {\n  from: string;\n  to?: string;\n  blockNumber: string;\n  transactionHash: string;\n  acquiredAt?: AcquiredAt;\n  collection?: BaseNftCollection;\n  contract: NftContractForNft;\n  description?: string;\n  image: NftImage;\n  mint?: NftMint;\n  name?: string;\n  raw: NftRawMetadata;\n  timeLastUpdated: string;\n  tokenId: string;\n  tokenType: NftTokenType;\n  tokenUri?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlchemyMinedTransactionsEventFilter Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AlchemyMinedTransactionsEventFilter, which configures the parameters for subscribing to mined transactions using Alchemy's WebSocket provider. The interface includes properties for filtering by addresses, controlling response format, and handling removed transactions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemyMinedTransactionsEventFilter.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmethod: [`MINED_TRANSACTIONS`](../enums/AlchemySubscription.md#mined_transactions)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Optional` addresses: [`NonEmptyArray`](../modules.md#nonemptyarray)<[`AlchemyMinedTransactionsAddress`](../modules.md#alchemyminedtransactionsaddress)>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Optional` includeRemoved: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`Optional` hashesOnly: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining NftActivityWebhook Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for NftActivityWebhook that extends the base Webhook interface. Contains properties for webhook identification, configuration, and status tracking including id, network, url, signing key, and webhook version.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftActivityWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftActivityWebhook extends Webhook {\n  appId?: string;\n  id: string;\n  isActive: boolean;\n  network: Network;\n  signingKey: string;\n  timeCreated: string;\n  type: NFT_ACTIVITY;\n  url: string;\n  version: WebhookVersion;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Activity Webhook Method\nDESCRIPTION: Method to create a new NftActivityWebhook for tracking NFT transfers. Takes URL, webhook type and NFT parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateWebhook(url: string, type: NFT_ACTIVITY, params: NftWebhookParams): Promise<NftActivityWebhook>\n```\n\n----------------------------------------\n\nTITLE: Implementing listeners Method in TypeScript\nDESCRIPTION: Returns an array of listeners for a specific event or all events. Takes an optional eventName parameter and returns a Promise containing an array of Listener objects.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **listeners**(`eventName?`): `Promise`<`Listener`[]\\>\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionReceipt Interface in TypeScript\nDESCRIPTION: Interface definition for Ethereum transaction receipts that includes properties for block information, transaction details, gas usage, and status. Used by the Alchemy SDK to handle transaction receipt data returned from the Ethereum network.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionReceipt.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TransactionReceipt {\n    blockHash: string;\n    blockNumber: number;\n    byzantium: boolean;\n    confirmations: number;\n    contractAddress: string;\n    cumulativeGasUsed: BigNumber;\n    effectiveGasPrice: BigNumber;\n    from: string;\n    gasUsed: BigNumber;\n    logs: Log[];\n    logsBloom: string;\n    root?: string;\n    status?: number;\n    to: string;\n    transactionHash: string;\n    transactionIndex: number;\n    type: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Private Transactions in Alchemy SDK\nDESCRIPTION: Method to cancel a previously submitted private transaction. It requires the transaction hash and can only cancel transactions signed by the same key as the original submission. Fast mode transactions cannot be canceled.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncancelPrivateTransaction(transactionHash): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining NftContractBaseNftsResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the response structure for getNftsForContract function. Contains an array of NFTs without metadata and an optional pagination key for fetching subsequent NFTs.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractBaseNftsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftContractBaseNftsResponse {\n    nfts: BaseNft[];\n    pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseNft Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the base NFT representation in Alchemy SDK. Contains two required properties: contractAddress (string) for the NFT contract address and tokenId (string) for the token identifier.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/BaseNft.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseNft {\n  contractAddress: string;\n  tokenId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTransfersResponse Interface in TypeScript\nDESCRIPTION: Defines the AssetTransfersResponse interface with two properties: an optional pageKey for pagination and an array of AssetTransfersResult objects. This interface is used to structure the response from the getAssetTransfers method in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AssetTransfersResponse {\n  pageKey?: string;\n  transfers: AssetTransfersResult[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalancesResponse Interface in TypeScript\nDESCRIPTION: Interface definition for token balance responses. Contains an address string property and an array of TokenBalance objects. This interface serves as a base interface that is extended by TokenBalancesResponseErc20.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalancesResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TokenBalancesResponse {\n    address: string;\n    tokenBalances: TokenBalance[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Mined Transaction Webhook Method\nDESCRIPTION: Method to create a new MinedTransactionWebhook for tracking mined transactions associated with a specific app ID.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateWebhook(url: string, type: MINED_TRANSACTION, params: TransactionWebhookParams): Promise<MinedTransactionWebhook>\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Listener from Contract in TypeScript\nDESCRIPTION: Method for removing a specific event listener from a contract. It requires both the event name or filter and the listener function to be removed, returning the contract instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **removeListener**(`eventName`: `string` | `EventFilter`, `listener`: `Listener`): [`Contract`](Contract.md)\n```\n\n----------------------------------------\n\nTITLE: Detecting Network Connection in TypeScript Provider\nDESCRIPTION: Method that overrides the base detectNetwork() functionality in ethers.js StaticJsonRpcProvider class. Called when invoking methods on the parent BaseProvider class.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndetectNetwork(): Promise<Network> {\n    // Overrides method in ethers.js's StaticJsonRpcProvider class\n    // Called when calling methods on parent BaseProvider class\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Block Execution with CallTracer in TypeScript\nDESCRIPTION: Method to replay a block that has already been mined using the CallTracer. Takes a block identifier and tracer configuration as parameters and returns a Promise with the debug call trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceBlock(blockIdentifier: string | number, tracer: DebugCallTracer): Promise<DebugCallTrace>\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTransfersMetadata Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AssetTransfersMetadata, which contains metadata for asset transfer results when the withMetadata parameter is enabled. It includes a blockTimestamp property that represents the timestamp of the block from which the transaction event originated.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersMetadata.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **blockTimestamp**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining NftRawMetadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftRawMetadata interface with three properties: error (optional string), metadata (Record of string to any), and tokenUri (optional string). It provides type definitions for NFT raw metadata in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftRawMetadata.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftRawMetadata {\n  error?: string;\n  metadata: Record<string, any>;\n  tokenUri?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedBaseNft Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for OwnedBaseNft that extends BaseNft. It includes properties for token balance (balance), NFT contract address (contractAddress), and token ID (tokenId), with all values represented as strings.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedBaseNft.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OwnedBaseNft extends BaseNft {\n  balance: string;\n  contractAddress: string;\n  tokenId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection Destruction in TypeScript\nDESCRIPTION: Method to cleanly destroy the WebSocket connection and cleanup resources. Overrides the base WebSocketProvider destroy() method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ndestroy(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Fetching Owners for Specific NFT in TypeScript\nDESCRIPTION: This method retrieves all owners for a specific NFT identified by contract address and token ID.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetOwnersForNft(contractAddress: string, tokenId: BigNumberish, options?: GetOwnersForNftOptions): Promise<GetOwnersForNftResponse>\n```\n\n----------------------------------------\n\nTITLE: Tracing Transaction Execution with CallTracer in TypeScript\nDESCRIPTION: Method to replay a transaction exactly as it was executed on the network using the CallTracer. Takes a transaction hash, tracer configuration, and optional timeout parameter and returns a Promise with the debug call trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceTransaction(transactionHash: string, tracer: DebugCallTracer, timeout?: string): Promise<DebugCallTrace>\n```\n\n----------------------------------------\n\nTITLE: Custom JSON-RPC Request Handler in TypeScript\nDESCRIPTION: Method that overrides the base JsonRpcProvider send method to implement custom logic for sending requests to Alchemy API endpoints.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsend(method: string, params: any[]): Promise<any> {\n  // Overrides the base {@link JsonRpcProvider.send} method to implement custom\n  // logic for sending requests to Alchemy.\n\n  /**\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy SDK with npm\nDESCRIPTION: Command to install the Alchemy SDK package via npm.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install alchemy-sdk\n```\n\n----------------------------------------\n\nTITLE: Defining HistoricalPriceDataPoint Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for historical price data points containing a timestamp in ISO format and a price value stored as a string for precision. This interface is used in the Alchemy SDK for handling historical price data.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/HistoricalPriceDataPoint.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoricalPriceDataPoint {\n    value: string;      // Price value as a string to preserve precision\n    timestamp: string;  // ISO timestamp for the price data point\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenPrice Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenPrice interface with three properties: currency (string), value (string), and lastUpdatedAt (string). It provides type definitions for token price information in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenPrice.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenPrice {\n  currency: string;\n  value: string;\n  lastUpdatedAt: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimulateAssetType Enum in TypeScript\nDESCRIPTION: Enumeration defining different asset types that can be returned from transaction simulations. Includes native currencies (like ETH), standard token types (ERC20, ERC721, ERC1155), and special NFT cases like CryptoKitties and CryptoPunks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/SimulateAssetType.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum SimulateAssetType {\n  NATIVE = \"NATIVE\",\n  ERC20 = \"ERC20\",\n  ERC721 = \"ERC721\",\n  ERC1155 = \"ERC1155\",\n  SPECIAL_NFT = \"SPECIAL_NFT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenMetadataResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenMetadataResponse interface with properties for token metadata. It includes decimals, logo, name, and symbol, each with their respective types and descriptions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenMetadataResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenMetadataResponse {\n  decimals: null | number;\n  logo: null | string;\n  name: null | string;\n  symbol: null | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Establishment in TypeScript\nDESCRIPTION: Returns a Promise which will stall until the network has been established, ignoring errors due to the target node not being active yet. Useful for testing or attaching scripts to wait until the node is up and running smoothly.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **ready**(): `Promise`<`Network`>\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTransfersWithMetadataResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AssetTransfersWithMetadataResult, which extends AssetTransfersResult to include additional metadata about transfer events. This interface represents a transfer event returned when using AssetTransfersWithMetadataParams.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AssetTransfersWithMetadataResult.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Interface: AssetTransfersWithMetadataResult\n\n// Represents a transfer event that is returned in a\n// [AssetTransfersResponse](AssetTransfersResponse.md) when [AssetTransfersWithMetadataParams](AssetTransfersWithMetadataParams.md) are used.\n\n// Hierarchy\n// - [`AssetTransfersResult`](AssetTransfersResult.md)\n//   ↳ **`AssetTransfersWithMetadataResult`**\n\n/**\n * Properties:\n * - asset: Returns the token's symbol or ETH for other transfers. `null` if the information was not available.\n * - blockNum: The block number where the transfer occurred.\n * - category: The category of the transfer.\n * - erc1155Metadata: A list of ERC1155 metadata objects if the asset transferred is an ERC1155 token. `null` if not an ERC1155 transfer.\n * - erc721TokenId: The raw ERC721 token id of the transfer as a hex string. `null` if not an ERC721 transfer.\n * - from: The from address of the transfer.\n * - hash: The transaction hash of the transfer transaction.\n * - metadata: Additional metadata about the transfer event.\n * - rawContract: Information about the raw contract of the asset transferred.\n * - to: The to address of the transfer.\n * - tokenId: The token id of the token transferred.\n * - uniqueId: The unique ID of the transfer.\n * - value: Converted asset transfer value as a number (raw value divided by contract decimal). `null` if ERC721 transfer or contract decimal not available.\n */\ninterface AssetTransfersWithMetadataResult extends AssetTransfersResult {\n  metadata: AssetTransfersMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying if a Contract is Spam in TypeScript\nDESCRIPTION: This method checks whether a contract is marked as spam by Alchemy. It takes the contract address as a parameter and returns a Promise that resolves to an IsSpamContractResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nisSpamContract(contractAddress: string): Promise<IsSpamContractResponse>\n```\n\n----------------------------------------\n\nTITLE: Accessing WebSocket Provider\nDESCRIPTION: New promise-based syntax for accessing the WebSocket provider.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nalchemy.config.getWebSocketProvider()\n```\n\n----------------------------------------\n\nTITLE: Tracing Block Execution with PrestateTracer in TypeScript\nDESCRIPTION: Overloaded method to replay a block that has already been mined using the PrestateTracer. Takes a block identifier and tracer configuration as parameters and returns a Promise with the debug prestate trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceBlock(blockIdentifier: string | number, tracer: DebugPrestateTracer): Promise<DebugPrestateTrace>\n```\n\n----------------------------------------\n\nTITLE: Defining TokenPriceByAddressResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenPriceByAddressResult interface with four properties: address, network, prices, and error. It provides type information for token price data returned by the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenPriceByAddressResult.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenPriceByAddressResult {\n  address: string;\n  network: string;\n  prices: TokenPrice[];\n  error: null | TokenPriceError;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftContractOwner Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftContractOwner interface with two properties: ownerAddress and tokenBalances. It specifies the structure for representing NFT ownership and token balances within the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractOwner.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftContractOwner {\n  ownerAddress: string;\n  tokenBalances: NftContractTokenBalance[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransfersForOwnerOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the GetTransfersForOwnerOptions interface with optional properties for filtering NFT transfers by contract addresses, token types, and pagination. It includes types and descriptions for each property.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTransfersForOwnerOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetTransfersForOwnerOptions {\n  contractAddresses?: string[];\n  pageKey?: string;\n  tokenType?: NftTokenType.ERC721 | NftTokenType.ERC1155;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AlchemyProvider in TypeScript\nDESCRIPTION: Method to get an AlchemyProvider instance which is a wrapper around ethers' AlchemyProvider class. It supports Alchemy's Enhanced APIs and only creates one provider per Alchemy instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyConfig.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **getProvider**(): `Promise`<[`AlchemyProvider`](AlchemyProvider.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining NftImage Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for NFT image data. It includes optional properties for cached, original, PNG, and thumbnail URLs, along with content type and size information for NFT media assets.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftImage.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftImage {\n    cachedUrl?: string;      // URL of the image stored in Alchemy's cache\n    thumbnailUrl?: string;   // URL of a thumbnail sized image\n    pngUrl?: string;        // URL of the image in png format\n    contentType?: string;   // The type of the media image\n    size?: number;          // The size of the media asset in bytes\n    originalUrl?: string;   // The original URL of the image as stored on the contract\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedNftsResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the OwnedNftsResponse interface with properties for owned NFTs, pagination, total count, and block information. It is used to structure the response from NFT ownership queries in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedNftsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OwnedNftsResponse {\n  ownedNfts: OwnedNft[];\n  pageKey?: string;\n  totalCount: number;\n  validAt: OwnedNftsValidAt;\n}\n```\n\n----------------------------------------\n\nTITLE: SimulateAssetChangesChange Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for asset changes in transaction simulations. Contains fields for tracking asset type, change type, amounts, addresses, and token metadata. Used by the TransactNamespace.simulateAssetChanges method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulateAssetChangesChange.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SimulateAssetChangesChange {\n  amount?: string;\n  assetType: SimulateAssetType;\n  changeType: SimulateChangeType;\n  contractAddress?: string;\n  decimals?: number;\n  from: string;\n  logo?: string;\n  name?: string;\n  rawAmount?: string;\n  symbol?: string;\n  to: string;\n  tokenId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy SDK via NPM\nDESCRIPTION: Command to install the Alchemy SDK package using npm package manager.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install alchemy-sdk\n```\n\n----------------------------------------\n\nTITLE: AlchemyPendingTransactionsEventFilter Interface Definition in TypeScript\nDESCRIPTION: This TypeScript interface defines the filter parameters for Alchemy's custom 'alchemy_pendingTransactions' endpoint. It allows filtering pending transactions by from and to addresses, and supports returning only transaction hashes for reduced payload size.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemyPendingTransactionsEventFilter.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **fromAddress**: `string` \\| `string`[]\n\nFilter pending transactions sent FROM the provided address or array of\naddresses.\n\nIf a [AlchemyPendingTransactionsEventFilter.toAddress](AlchemyPendingTransactionsEventFilter.md#toaddress) is also\npresent, then this filter will return transactions sent from the\n`fromAddress` OR transactions received by the `toAddress`.\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedBaseNftsResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the OwnedBaseNftsResponse interface with properties for owned NFTs, pagination, total count, and block information. It is used to structure the response from NFT ownership queries in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedBaseNftsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OwnedBaseNftsResponse {\n  ownedNfts: OwnedBaseNft[];\n  pageKey?: string;\n  totalCount: number;\n  validAt: OwnedNftsValidAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokensForOwnerOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines optional parameters for token ownership queries. Includes contractAddresses for filtering token contracts and pageKey for pagination support.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetTokensForOwnerOptions {\n  contractAddresses?: string[] | TokenBalanceType;\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Transaction Call with PrestateTracer in TypeScript\nDESCRIPTION: Overloaded method to run an eth_call with context of a provided block execution using the PrestateTracer. Takes transaction details, block identifier, and tracer configuration as parameters and returns a Promise with the debug prestate trace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/DebugNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntraceCall(transaction: DebugTransaction, blockIdentifier: string, tracer: DebugPrestateTracer): Promise<DebugPrestateTrace>\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Listener in AlchemyWebSocketProvider\nDESCRIPTION: Removes a specific listener for a given event type. Returns the Provider instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveListener(eventName: EventType, listener: Listener): Provider\n```\n\n----------------------------------------\n\nTITLE: Sending Private Transactions to Flashbots in Alchemy SDK\nDESCRIPTION: Method to submit private transactions to Flashbots. The transaction remains private until mined and Flashbots will attempt inclusion for 25 blocks. Returns the transaction hash upon submission.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsendPrivateTransaction(signedTransaction, maxBlockNumber?, options?): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining SimulateExecutionResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the SimulateExecutionResponse interface with two properties: calls and logs. The calls property is an array of SimulationCallTrace objects, representing the execution traces of the simulated transaction. The logs property is an array of SimulationDebugLog objects, containing logs emitted during the simulation.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulateExecutionResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SimulateExecutionResponse {\n  calls: SimulationCallTrace[];\n  logs: SimulationDebugLog[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Alchemy SDK Package\nDESCRIPTION: Updated package installation command reflecting the new package name.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install alchemy-sdk\n```\n\n----------------------------------------\n\nTITLE: Defining SendPrivateTransactionOptions Interface in TypeScript\nDESCRIPTION: Interface definition for private transaction options that includes a fast property to enable fast-mode transactions. Fast-mode transactions cannot be cancelled using the cancelPrivateTransaction method and integrate with Flashbots Protect RPC.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SendPrivateTransactionOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SendPrivateTransactionOptions {\n    fast: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: DecodedLogInput Interface Definition in TypeScript\nDESCRIPTION: Definition of the DecodedLogInput interface that extends DecodedCallParam. It includes properties for working with decoded log inputs from smart contracts, with the additional 'indexed' property that indicates whether the log is marked as indexed in the contract.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DecodedLogInput.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DecodedLogInput extends DecodedCallParam {\n  indexed: boolean;\n  name: string;\n  type: string;\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for NFT Contract Owner Data\nDESCRIPTION: Interface definition for NftContractForOwner that extends NftContract. Contains properties for tracking NFT ownership, contract metadata, and token balances. Used in GetContractsForOwnerResponse to represent NFT contract data specific to an owner.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractForOwner.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftContractForOwner extends NftContract {\n  address: string;\n  contractDeployer?: string;\n  deployedBlockNumber?: number;\n  displayNft: DisplayNftForContract;\n  image: NftImage;\n  isSpam: boolean;\n  name?: string;\n  numDistinctTokensOwned: string;\n  openSeaMetadata: OpenSeaCollectionMetadata;\n  symbol?: string;\n  tokenType: NftTokenType;\n  totalBalance: string;\n  totalSupply?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Webhook Methods\nDESCRIPTION: Methods to delete a webhook either by passing the webhook object or the webhook ID.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteWebhook(webhook: Webhook): Promise<void>\ndeleteWebhook(webhookId: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining GetNftsForContractOptions Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition specifying optional parameters for NFT contract queries. Includes properties for pagination (pageKey, pageSize), metadata handling (omitMetadata), and timeout settings (tokenUriTimeoutInMs).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftsForContractOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetNftsForContractOptions {\n  omitMetadata?: boolean;\n  pageKey?: string;\n  pageSize?: number;\n  tokenUriTimeoutInMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimulateAssetChangesResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the SimulateAssetChangesResponse interface with three properties: changes (an array of SimulateAssetChangesChange objects), error (an optional SimulateAssetChangesError object), and gasUsed (an optional string representing gas used as a hex value).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulateAssetChangesResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SimulateAssetChangesResponse {\n  changes: SimulateAssetChangesChange[];\n  error?: SimulateAssetChangesError;\n  gasUsed?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: NFT Sale Interface Definition in TypeScript\nDESCRIPTION: Defines a TypeScript interface for representing NFT sale data including block information, marketplace details, participant addresses, fees, and transaction details. Used to structure the response data for NFT sales queries.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftSale.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftSale {\n  blockNumber: number;\n  bundleIndex: number;\n  buyerAddress: string;\n  contractAddress: string;\n  logIndex: number;\n  marketplace: NftSaleMarketplace;\n  marketplaceAddress: string;\n  protocolFee: NftSaleFeeData;\n  quantity: string;\n  royaltyFee: NftSaleFeeData;\n  sellerAddress: string;\n  sellerFee: NftSaleFeeData;\n  taker: NftSaleTakerType;\n  tokenId: string;\n  transactionHash: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForNftOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetOwnersForNftOptions interface with two optional properties: pageKey for pagination and pageSize for controlling the number of results. It is used to configure the getOwnersForNft method when fetching NFT owner addresses.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForNftOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetOwnersForNftOptions {\n  pageKey?: string;\n  pageSize?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT AcquiredAt Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for tracking when an NFT was acquired. Contains optional properties for block number and block timestamp.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AcquiredAt.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AcquiredAt {\n    blockNumber?: number;    // Block number of the block at which an NFT was last acquired\n    blockTimestamp?: string; // Timestamp of the block at which an NFT was last acquired\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoricalPriceInterval Enumeration in TypeScript\nDESCRIPTION: This enumeration defines valid time intervals for historical price data queries. It includes FIVE_MINUTE (5m), ONE_HOUR (1h), and ONE_DAY (1d) intervals. These are used to specify the granularity of historical price data requests in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/HistoricalPriceInterval.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum HistoricalPriceInterval {\n  FIVE_MINUTE = \"5m\",\n  ONE_HOUR = \"1h\",\n  ONE_DAY = \"1d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Priority Fee in Alchemy SDK\nDESCRIPTION: Method to retrieve the recommended priority fee (tip) for transaction inclusion in the current block. The returned value is in wei and can be used for setting the maxPriorityFeePerGas field in a transaction request.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetMaxPriorityFeePerGas(): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Message to Alchemy Backend in TypeScript\nDESCRIPTION: Allows sending a raw message to the Alchemy backend. Takes a method name and an array of parameters, and returns a Promise that resolves to the response.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **send**(`method`, `params`): `Promise`<`any`>\n```\n\n----------------------------------------\n\nTITLE: Defining DebugPrestate Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of a debug pre-state for an account. It includes properties for balance (in wei), bytecode, nonce, and contract storage slots. This interface is used in the Alchemy SDK for transaction debugging.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DebugPrestate.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DebugPrestate {\n    /**\n     * Balance of the account in wei as a hex string.\n     */\n    balance: string;\n\n    /**\n     * Nonce\n     */\n    nonce: number;\n\n    /**\n     * Hex-encoded bytecode.\n     */\n    code: string;\n\n    /**\n     * Storage slots of the contract.\n     */\n    storage: Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForNftResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetOwnersForNftResponse interface with two properties: owners (an array of owner addresses) and an optional pageKey for pagination. It is part of the Alchemy SDK's NFT-related types.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForNftResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetOwnersForNftResponse {\n  owners: string[];\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Marketplace Enum in TypeScript\nDESCRIPTION: Enum definition for supported NFT marketplaces in the Alchemy SDK. Used by the getNftSales method to identify different marketplace platforms where NFT sales occur.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftSaleMarketplace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum NftSaleMarketplace {\n  BLUR = \"blur\",\n  CRYPTOPUNKS = \"cryptopunks\",\n  LOOKSRARE = \"looksrare\",\n  SEAPORT = \"seaport\",\n  UNKNOWN = \"unknown\",\n  WYVERN = \"wyvern\",\n  X2Y2 = \"x2y2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Attribute Rarity Interface in TypeScript\nDESCRIPTION: Interface definition for NFT attribute rarity that includes the attribute value, trait type, and prevalence within a collection. The prevalence is represented as a number between 0 and 1 indicating how common the attribute is.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftAttributeRarity.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftAttributeRarity {\n  /** Name of the NFT's attribute. */\n  value: string;\n\n  /** The type of NFT attribute. */\n  traitType: string;\n\n  /** \n   * A number from 0 to 1 representing the prevalence of this value for this\n   * trait type in the current collection.\n   */\n  prevalence: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DebugCallTracer Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DebugCallTracer that specifies properties for transaction tracing. It includes the tracer type property set to CALL_TRACER and an optional boolean flag to control whether to only trace top-level calls.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DebugCallTracer.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DebugCallTracer {\n    /**\n     * Specified type is `CALL_TRACER`.\n     */\n    type: CALL_TRACER;\n\n    /**\n     * Whether to only trace the main (top-level) calls and ignore sub-calls.\n     * Defaults to `false`.\n     */\n    onlyTopCall?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftContractNftsResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftContractNftsResponse interface with two properties: nfts (an array of Nft objects) and an optional pageKey (string). It represents the response structure for retrieving NFTs from a contract.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractNftsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftContractNftsResponse {\n  nfts: Nft[];\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Enumeration in TypeScript\nDESCRIPTION: This enumeration defines all the supported networks by Alchemy. It includes mainnet and testnet networks for various blockchain platforms. Each network is represented as a string constant.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/Network.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Network {\n  ABSTRACT_TESTNET = \"abstract-testnet\",\n  APECHAIN_CURTIS = \"apechain-curtis\",\n  APECHAIN_MAINNET = \"apechain-mainnet\",\n  ARBNOVA_MAINNET = \"arbnova-mainnet\",\n  ARB_GOERLI = \"arb-goerli\",\n  ARB_MAINNET = \"arb-mainnet\",\n  ARB_SEPOLIA = \"arb-sepolia\",\n  ASTAR_MAINNET = \"astar-mainnet\",\n  AVAX_FUJI = \"avax-fuji\",\n  AVAX_MAINNET = \"avax-mainnet\",\n  BASE_GOERLI = \"base-goerli\",\n  BASE_MAINNET = \"base-mainnet\",\n  BASE_SEPOLIA = \"base-sepolia\",\n  BERACHAIN_BARTIO = \"berachain-bartio\",\n  BERACHAIN_MAINNET = \"berachain-mainnet\",\n  BLAST_MAINNET = \"blast-mainnet\",\n  BLAST_SEPOLIA = \"blast-sepolia\",\n  BNB_MAINNET = \"bnb-mainnet\",\n  BNB_TESTNET = \"bnb-testnet\",\n  CELO_ALFAJORES = \"celo-alfajores\",\n  CELO_MAINNET = \"celo-mainnet\",\n  CROSSFI_MAINNET = \"crossfi-mainnet\",\n  CROSSFI_TESTNET = \"crossfi-testnet\",\n  DEGEN_MAINNET = \"degen-mainnet\",\n  ETH_GOERLI = \"eth-goerli\",\n  ETH_HOLESKY = \"eth-holesky\",\n  ETH_MAINNET = \"eth-mainnet\",\n  ETH_SEPOLIA = \"eth-sepolia\",\n  FANTOM_MAINNET = \"fantom-mainnet\"\n  // ... (other network definitions)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Filters for NFT Activity Webhooks in TypeScript\nDESCRIPTION: Functions to retrieve all NFT filters tracked for a specified NFT Activity Webhook. Accepts either an NftActivityWebhook object or a webhook ID along with optional pagination parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n**getNftFilters**(`nftWebhook`, `options?`): `Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**getNftFilters**(`webhookId`, `options?`): `Promise`<[`NftFiltersResponse`](../interfaces/NftFiltersResponse.md)>\n```\n\n----------------------------------------\n\nTITLE: Resetting Events Block in AlchemyWebSocketProvider\nDESCRIPTION: Resets the events block to the specified block number.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nresetEventsBlock(blockNumber: number): void\n```\n\n----------------------------------------\n\nTITLE: Defining AssetTransfersCategory Enum in TypeScript\nDESCRIPTION: Enumeration defining different categories of asset transfers supported by the Alchemy SDK. Includes ERC token standards and transaction types for filtering asset transfers in the getAssetTransfers API endpoint.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/AssetTransfersCategory.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AssetTransfersCategory {\n  ERC1155 = \"erc1155\",\n  ERC20 = \"erc20\",\n  ERC721 = \"erc721\",\n  EXTERNAL = \"external\",\n  INTERNAL = \"internal\",\n  SPECIALNFT = \"specialnft\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hashMessage Function in TypeScript\nDESCRIPTION: Defines a function to hash a message, accepting either a string or Bytes input and returning a string hash.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhashMessage(message: string | Bytes): string\n```\n\n----------------------------------------\n\nTITLE: Defining IsAirdropNftResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the response structure for checking if an NFT was airdropped. Contains a single boolean property 'isAirdrop' that indicates whether the NFT was distributed via airdrop.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/IsAirdropNftResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IsAirdropNftResponse {\n  isAirdrop: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetSpamContractsResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetSpamContractsResponse interface with a single property 'contractAddresses' of type string array. It is used to represent the response structure for getting spam contracts.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetSpamContractsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetSpamContractsResponse {\n  contractAddresses: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Contract Token Balance Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for tracking NFT token ownership and balances. Contains two required string properties: tokenId for the owned NFT token identifier and balance for the token quantity owned by a particular address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractTokenBalance.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftContractTokenBalance {\n  balance: string;\n  tokenId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Code in TypeScript\nDESCRIPTION: This method returns the contract code deployed at the specified address. If no contract is deployed, it returns '0x'. It takes an address or name and an optional block tag as parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Retrieving GraphQL Queries for Custom Webhooks in TypeScript\nDESCRIPTION: Functions to retrieve the GraphQL query used by a Custom GraphQL webhook. Supports two parameter types: either a CustomGraphqlWebhook object or a webhook ID string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n**getGraphqlQuery**(`customGraphqlWebhook`): `Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**getGraphqlQuery**(`webhookId`): `Promise`<[`CustomGraphqlWebhookConfig`](../interfaces/CustomGraphqlWebhookConfig.md)>\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForContractResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of the response object for getting NFT contract owners. Contains an array of owner addresses, an optional page key for pagination when there are more than 50,000 owners, and an optional total count of unique owners.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForContractResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetOwnersForContractResponse {\n    owners: string[];\n    pageKey?: string;\n    totalCount?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalancesOptionsErc20 Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenBalancesOptionsErc20 interface with two properties: pageKey for pagination and type for specifying the ERC-20 token type. It is used as an optional parameter in the getTokenBalances() function to fetch all ERC-20 token balances.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalancesOptionsErc20.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenBalancesOptionsErc20 {\n  pageKey?: string;\n  type: TokenBalanceType.ERC20;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining arrayify Function in TypeScript\nDESCRIPTION: Defines a function to convert various input types to a Uint8Array. It accepts a value of type number, BytesLike, or Hexable, and an optional DataOptions parameter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\narrayify(value: number | BytesLike | Hexable, options?: DataOptions): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Getting Event Topic Hash in TypeScript\nDESCRIPTION: Static method that computes the topic hash for an event, used in event logs filtering.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Utils.Interface.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getEventTopic(eventFragment: EventFragment): string\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionReceiptsBlockHash Interface in TypeScript\nDESCRIPTION: This snippet defines the TransactionReceiptsBlockHash interface with a single property 'blockHash'. The blockHash is a string representing the block hash for which transaction receipts are to be retrieved.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionReceiptsBlockHash.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransactionReceiptsBlockHash {\n  blockHash: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeployResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for contract deployment results. Contains two properties: a required blockNumber (number) indicating the deployment block, and an optional deployerAddress (string) for the contract deployer.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DeployResult.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeployResult {\n    blockNumber: number;\n    deployerAddress?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Webhook Interface Properties\nDESCRIPTION: Core property definitions for the Webhook interface including webhook ID, network, type, URL, status, signing key, and version information. This interface serves as the base for specialized webhook types like MinedTransaction and AddressActivity webhooks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/Webhook.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Webhook {\n  appId?: string;\n  id: string;\n  network: Network;\n  type: WebhookType;\n  url: string;\n  isActive: boolean;\n  timeCreated: string;\n  signingKey: string;\n  version: WebhookVersion;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Different Types of Webhooks in TypeScript\nDESCRIPTION: Overloaded function to update various types of webhooks including NFT Activity, NFT Metadata, Custom GraphQL, and Address Activity webhooks. Supports updating webhook status, filters, or tracked addresses.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`nftWebhook`, `update`): `Promise`<`void`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`nftWebhookId`, `update`): `Promise`<`void`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`nftMetadataWebhookId`, `update`): `Promise`<`void`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`customGraphqlWebhookId`, `update`): `Promise`<`void`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`addressWebhook`, `update`): `Promise`<`void`>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n**updateWebhook**(`addressWebhookId`, `update`): `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Defining GetFloorPriceResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetFloorPriceResponse interface with two properties: looksRare and openSea. Each property can be either a FloorPriceMarketplace or FloorPriceError type.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetFloorPriceResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetFloorPriceResponse {\n  looksRare: FloorPriceMarketplace | FloorPriceError;\n  openSea: FloorPriceMarketplace | FloorPriceError;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimulationCallTrace Interface in TypeScript\nDESCRIPTION: Interface definition for SimulationCallTrace that extends Omit<DebugCallTrace>. Contains properties for tracking transaction execution details including addresses, gas usage, call data, and debug information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulationCallTrace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SimulationCallTrace extends Omit<DebugCallTrace, \"revertReason\" | \"calls\"> {\n  type: DebugCallType;\n  decoded?: DecodedDebugCallTrace;\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  gasUsed: string;\n  input: string;\n  output: string;\n  error?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Metadata Interface in TypeScript\nDESCRIPTION: Interface definition for NFT metadata that includes optional fields for common NFT properties. The interface extends Record<string, any> to allow for additional custom fields since there is no standardized metadata format.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadata.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftMetadata extends Record<string, any> {\n  /** Name of the NFT asset. */\n  name?: string;\n\n  /** A human-readable description of the NFT asset. */\n  description?: string;\n\n  /** URL to the NFT asset image. */\n  image?: string;\n\n  /** The image URL that appears along the top of the NFT asset page. */\n  external_url?: string;\n\n  /** Background color of the NFT item. Usually defined as a 6 character hex string. */\n  background_color?: string;\n\n  /** The traits, attributes, and characteristics for the NFT asset. */\n  attributes?: Record<string, any>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetNftMetadataOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetNftMetadataOptions interface with three optional properties: refreshCache, tokenType, and tokenUriTimeoutInMs. These options are used to customize the behavior of the getNftMetadata method in the NftNamespace class.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftMetadataOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetNftMetadataOptions {\n  refreshCache?: boolean;\n  tokenType?: NftTokenType;\n  tokenUriTimeoutInMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalancesOptionsDefaultTokens Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenBalancesOptionsDefaultTokens interface with a single property 'type' of enum type DEFAULT_TOKENS. It is used to specify the option to fetch the top 100 tokens in the getTokenBalances() function.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalancesOptionsDefaultTokens.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenBalancesOptionsDefaultTokens {\n  type: TokenBalanceType.DEFAULT_TOKENS;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining pageSize Property in GetBaseNftsForContractOptions Interface\nDESCRIPTION: Defines the optional pageSize property which controls the number of NFTs returned in a response. It defaults to 100 and has a maximum value of 100.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetBaseNftsForContractOptions.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\npageSize?: number\n```\n\n----------------------------------------\n\nTITLE: Defining FloorPriceMarketplace Interface in TypeScript\nDESCRIPTION: The TypeScript interface for FloorPriceMarketplace which captures NFT collection floor price data from various marketplaces. It includes properties for the floor price value, currency denomination, marketplace collection URL, and timestamp of when the data was retrieved.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/FloorPriceMarketplace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FloorPriceMarketplace {\n  floorPrice: number;\n  priceCurrency: string;\n  collectionUrl: string;\n  retrievedAt: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookType Enum in TypeScript\nDESCRIPTION: Enumeration defining the various types of webhooks supported in the Alchemy SDK. Includes webhook types for mined transactions, dropped transactions, address activity monitoring, NFT activity tracking, NFT metadata updates, and GraphQL events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/WebhookType.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum WebhookType {\n  MINED_TRANSACTION = \"MINED_TRANSACTION\",\n  DROPPED_TRANSACTION = \"DROPPED_TRANSACTION\",\n  ADDRESS_ACTIVITY = \"ADDRESS_ACTIVITY\",\n  NFT_ACTIVITY = \"NFT_ACTIVITY\",\n  NFT_METADATA_UPDATE = \"NFT_METADATA_UPDATE\",\n  GRAPHQL = \"GRAPHQL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Information in TypeScript\nDESCRIPTION: Gets information about the Ethereum network Alchemy is connected to. Returns a Promise that resolves to a Network object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetNetwork(): Promise<Network>\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionReceiptsResponse Interface in TypeScript\nDESCRIPTION: Interface definition for the transaction receipts response object that contains an array of TransactionReceipt objects or null. This interface is used as the return type for the CoreNamespace.getTransactionReceipts method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionReceiptsResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **receipts**: ``null`` | [`TransactionReceipt`](TransactionReceipt.md)[]\n```\n\n----------------------------------------\n\nTITLE: Defining parseEther Function in TypeScript\nDESCRIPTION: Defines a function to parse a string representation of Ether into a BigNumber.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseEther(ether: string): BigNumber\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for AddressActivityResponse in Alchemy SDK\nDESCRIPTION: The AddressActivityResponse interface defines the structure of the response returned by the NotifyNamespace.getAddresses method. It includes an array of addresses, the total count of addresses, and an optional pageKey for pagination.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AddressActivityResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Response object for the [NotifyNamespace.getAddresses](../classes/NotifyNamespace.md#getaddresses) method.\n */\ninterface AddressActivityResponse {\n  /**\n   * The addresses for the webhook.\n   */\n  addresses: string[];\n  \n  /**\n   * The total number of addresses.\n   */\n  totalCount: number;\n  \n  /**\n   * Optional page key used to fetch the remaining addresses.\n   */\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting 'name' Property in DisplayNftForContract\nDESCRIPTION: This code snippet shows the TypeScript property definition and JSDoc comment for the optional 'name' property in the DisplayNftForContract interface. It represents the name of the NFT, if available.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DisplayNftForContract.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * The name of the NFT, if available.\n */\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining tokenUriTimeoutInMs Property in GetBaseNftsForContractOptions Interface\nDESCRIPTION: Defines the optional tokenUriTimeoutInMs property which sets a timeout for metadata server responses. Setting this to 0 will only access cached metadata without live fetching for cache misses.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetBaseNftsForContractOptions.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntokenUriTimeoutInMs?: number\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokenPriceBySymbolResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetTokenPriceBySymbolResponse interface with a single property 'data'. The data property is an array of TokenPriceBySymbolResult objects, representing token price data for each requested symbol.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokenPriceBySymbolResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetTokenPriceBySymbolResponse {\n  data: TokenPriceBySymbolResult[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AlchemyConfig in TypeScript\nDESCRIPTION: Constructor for the AlchemyConfig class that accepts optional configuration settings. This is used to instantiate a new configuration object for the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyConfig.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **new AlchemyConfig**(`config?`)\n```\n\n----------------------------------------\n\nTITLE: Defining GetContractsForOwnerResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetContractsForOwnerResponse interface with three properties: contracts (an array of NftContractForOwner objects), pageKey (an optional string for pagination), and totalCount (a number representing the total NFT contracts held).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetContractsForOwnerResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetContractsForOwnerResponse {\n  contracts: NftContractForOwner[];\n  pageKey?: string;\n  totalCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedToken Interface in TypeScript\nDESCRIPTION: This code snippet defines the OwnedToken interface with various properties representing token information. It includes optional fields for balance, decimals, error messages, logo URLs, and token metadata.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedToken.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OwnedToken {\n  balance?: string;\n  contractAddress: string;\n  decimals?: number;\n  error?: string;\n  logo?: string;\n  name?: string;\n  rawBalance?: string;\n  symbol?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FloorPriceError Interface in TypeScript\nDESCRIPTION: This code snippet defines the FloorPriceError interface with a single property 'error' of type string. It is used to represent errors when fetching floor prices from a marketplace.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/FloorPriceError.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FloorPriceError {\n  error: string;\n}\n```\n\n----------------------------------------\n\nTITLE: BigNumber Type Check Method\nDESCRIPTION: Static type guard method to check if a value is a BigNumber instance\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/BigNumber.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic isBigNumber(value: any): value is BigNumber\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Tracer Type Enum in TypeScript\nDESCRIPTION: Enum declaration that specifies the available tracer types for debug methods in the Alchemy SDK. Contains two values: 'callTracer' and 'prestateTracer' which can be used to specify the type of debugging trace to perform.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/DebugTracerType.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum DebugTracerType {\n  CALL_TRACER = \"callTracer\",\n  PRESTATE_TRACER = \"prestateTracer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetMintedNftsOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for optional parameters when querying minted NFTs. Includes properties for contract address filtering, pagination, and token type filtering between ERC721 and ERC1155.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetMintedNftsOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetMintedNftsOptions {\n  contractAddresses?: string[];\n  pageKey?: string;\n  tokenType?: 'ERC721' | 'ERC1155';\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is Indexed in TypeScript\nDESCRIPTION: Static method that acts as a type guard to check if a value is an Indexed value. This is useful when working with event logs and topics in Ethereum contracts.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n▸ `Static` **isIndexed**(`value`: `any`): value is Indexed\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedNft Interface in TypeScript\nDESCRIPTION: Declares the OwnedNft interface that extends the Nft interface. It includes properties for NFT ownership details such as balance, along with inherited properties for NFT metadata and contract information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedNft.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OwnedNft extends Nft {\n  balance: string;\n  // Other inherited properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookAddressUpdate Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for managing webhook address updates. Contains two string array properties: addAddresses for new addresses to track and removeAddresses for existing addresses to remove from tracking.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/WebhookAddressUpdate.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebhookAddressUpdate {\n    addAddresses: string[];\n    removeAddresses: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalanceType Enum in TypeScript\nDESCRIPTION: Enum defining token balance types for getTokenBalances() endpoint. DEFAULT_TOKENS represents top 100 tokens by 24-hour volume on mainnet chains, while ERC20 represents all historically held ERC-20 tokens for an address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/TokenBalanceType.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum TokenBalanceType {\n  DEFAULT_TOKENS = \"DEFAULT_TOKENS\",\n  ERC20 = \"erc20\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoricalPriceByAddressResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the HistoricalPriceByAddressResponse interface, which extends BaseHistoricalPriceResponse. It includes properties for address, currency, data, and network, with their respective types and descriptions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/HistoricalPriceByAddressResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface HistoricalPriceByAddressResponse extends BaseHistoricalPriceResponse {\n  address: string;\n  currency: string;\n  data: HistoricalPriceDataPoint[];\n  network: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Deployment Transaction in TypeScript\nDESCRIPTION: Creates a transaction object for deploying the contract with the provided constructor arguments, without actually sending it.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDeployTransaction(...args): TransactionRequest\n```\n\n----------------------------------------\n\nTITLE: Defining SearchContractMetadataResponse Interface in TypeScript\nDESCRIPTION: Interface declaration for NFT contract metadata search response containing an array of NftContract objects. This interface is used to type the response from NFT contract search operations in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SearchContractMetadataResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontracts: NftContract[]\n```\n\n----------------------------------------\n\nTITLE: Defining IsSpamContractResponse Interface in TypeScript\nDESCRIPTION: Interface definition for the response received when checking if an NFT contract is spam. Contains a single property 'isSpamContract' of type boolean that indicates whether the contract is marked as spam.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/IsSpamContractResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IsSpamContractResponse {\n  isSpamContract: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Interface Definition in TypeScript for Alchemy SDK\nDESCRIPTION: Defines the Filter interface that extends EventFilter to filter logs by block number range when using CoreNamespace.getLogs. It includes optional properties for address filtering, block range specification (fromBlock and toBlock), and topic filtering.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/Filter.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Filter extends EventFilter {\n  /**\n   * The starting block (inclusive) to search for logs matching the filter.\n   */\n  fromBlock?: BlockTag;\n\n  /**\n   * The end block (inclusive) to search for logs matching the filter.\n   */\n  toBlock?: BlockTag;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenSeaCollectionMetadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the OpenSeaCollectionMetadata interface with various properties representing metadata for an NFT collection on OpenSea. It includes fields for collection details, image URLs, social media links, and other relevant information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OpenSeaCollectionMetadata.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface OpenSeaCollectionMetadata {\n  bannerImageUrl?: string;\n  collectionName?: string;\n  collectionSlug?: string;\n  description?: string;\n  discordUrl?: string;\n  externalUrl?: string;\n  floorPrice?: number;\n  imageBannerUrl?: string;\n  imageUrl?: string;\n  lastIngestedAt: string;\n  safelistRequestStatus?: OpenSeaSafelistRequestStatus;\n  twitterUsername?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalanceSuccess Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenBalanceSuccess interface with three properties: contractAddress (string), tokenBalance (string), and error (null). It is part of the Alchemy SDK's type definitions.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalanceSuccess.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenBalanceSuccess {\n  contractAddress: string;\n  tokenBalance: string;\n  error: null;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Key Property Definition\nDESCRIPTION: Optional property definition for pagination using a page key from an existing TransfersNftResponse.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetMintedNftsOptions.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npageKey?: string\n```\n\n----------------------------------------\n\nTITLE: Attaching a Contract in TypeScript\nDESCRIPTION: Attaches to an existing contract at the specified address. Returns a Contract instance that can be used to interact with the contract.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nattach(address): Contract\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1155Metadata Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ERC1155Metadata with two required properties: tokenId and value. This interface is used in the AssetTransfersResult object when the transferred asset is an ERC1155 token.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/ERC1155Metadata.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ERC1155Metadata {\n  tokenId: string;\n  value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalancesResponseErc20 Interface in TypeScript\nDESCRIPTION: Interface that extends TokenBalancesResponse to include pagination support for ERC20 token balance queries. Contains properties for address, token balances array, and an optional page key for pagination.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalancesResponseErc20.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TokenBalancesResponseErc20 extends TokenBalancesResponse {\n    address: string;\n    pageKey?: string;\n    tokenBalances: TokenBalance[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DebugTransaction Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DebugTransaction that specifies the structure of transaction objects used in debugging and simulation methods like traceCall, simulateAssetChanges, and simulateExecution. It includes optional properties for transaction addresses, gas settings, and data/value information.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DebugTransaction.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DebugTransaction {\n    /**\n     * The address the transaction is directed to.\n     */\n    to?: string;\n\n    /**\n     * The address the transaction is sent from.\n     */\n    from?: string;\n\n    /**\n     * The gas provided for the transaction execution, as a hex string.\n     */\n    gas?: string;\n\n    /**\n     * The gas price to use as a hex string.\n     */\n    gasPrice?: string;\n\n    /**\n     * The value associated with the transaction as a hex string.\n     */\n    value?: string;\n\n    /**\n     * The data associated with the transaction.\n     */\n    data?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Address from Transaction in TypeScript\nDESCRIPTION: Static method to compute a contract address from a transaction. It takes an object with the sender address and transaction nonce, returning the deterministic contract address as a string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n▸ `Static` **getContractAddress**(`transaction`: `Object`): `string`\n```\n\n----------------------------------------\n\nTITLE: Defining formatEther Function in TypeScript\nDESCRIPTION: Defines a function to format a BigNumberish value as Ether units, returning a string representation.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatEther(wei: BigNumberish): string\n```\n\n----------------------------------------\n\nTITLE: Implementing listenerCount Method in TypeScript\nDESCRIPTION: Returns the number of listeners for a specified event or total listeners across all events. Takes an optional eventName parameter and returns a Promise containing the count.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **listenerCount**(`eventName?`): `Promise`<`number`\\>\n```\n\n----------------------------------------\n\nTITLE: Refreshing NFT Contract Metadata in TypeScript\nDESCRIPTION: This method triggers a metadata refresh for all NFTs in the provided contract address. It's useful after an NFT collection is revealed. It returns a Promise that resolves to a RefreshContractResult object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshContract(contractAddress: string): Promise<RefreshContractResult>\n```\n\n----------------------------------------\n\nTITLE: Getting Interface from Contract Definition in TypeScript\nDESCRIPTION: Static method to create an Interface instance from a contract interface definition. This is used for ABI parsing and encoding/decoding contract data.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n▸ `Static` **getInterface**(`contractInterface`: `ContractInterface`): [`Interface`](Utils.Interface.md)\n```\n\n----------------------------------------\n\nTITLE: Defining BaseNftCollection Interface in TypeScript\nDESCRIPTION: This code snippet defines the BaseNftCollection interface with four optional properties: bannerImageUrl, externalUrl, name, and slug. Each property is typed and includes a description of its purpose.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/BaseNftCollection.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface BaseNftCollection {\n  bannerImageUrl?: string;\n  externalUrl?: string;\n  name: string;\n  slug?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForContractWithTokenBalancesOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetOwnersForContractWithTokenBalancesOptions interface with three properties: block, pageKey, and withTokenBalances. It is used to configure options when fetching owner addresses of a provided contract in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForContractWithTokenBalancesOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetOwnersForContractWithTokenBalancesOptions {\n  block?: string;\n  pageKey?: string;\n  withTokenBalances: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimulateChangeType Enum in TypeScript\nDESCRIPTION: Defines an enumeration with two members: APPROVE for permission-related changes and TRANSFER for token transfer operations. APPROVE can be used with or without token ID/amount parameters, while TRANSFER represents direct token movements between addresses.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/SimulateChangeType.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum SimulateChangeType {\n  APPROVE = \"APPROVE\",\n  TRANSFER = \"TRANSFER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hexDataLength Function in TypeScript\nDESCRIPTION: Defines a function to calculate the length of hexadecimal data.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexDataLength(data: BytesLike): number\n```\n\n----------------------------------------\n\nTITLE: Defining NftMint Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftMint interface with optional properties for block number, mint address, timestamp, and transaction hash. Each property is documented with its purpose and data type.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMint.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftMint {\n  blockNumber?: number;\n  mintAddress?: string;\n  timestamp?: string;\n  transactionHash?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining splitSignature Function in TypeScript\nDESCRIPTION: Defines a function to split a signature into its components.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nsplitSignature(signature: SignatureLike): Signature\n```\n\n----------------------------------------\n\nTITLE: Type Checking for Interface Instances in TypeScript\nDESCRIPTION: Static method that performs type checking to determine if a value is an Interface instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Utils.Interface.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic isInterface(value: any): value is Interface\n```\n\n----------------------------------------\n\nTITLE: Contract Event Listener Methods\nDESCRIPTION: Method declarations for attaching event listeners to contracts including on(), once(), and off() for handling contract events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\non(event: string | EventFilter, listener: Listener): Contract\nonce(event: string | EventFilter, listener: Listener): Contract\noff(eventName: string | EventFilter, listener: Listener): Contract\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBalanceFailure Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenBalanceFailure interface with three properties: contractAddress (string), tokenBalance (null), and error (string). It's used to represent a failure state when retrieving token balances in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalanceFailure.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenBalanceFailure {\n  contractAddress: string;\n  tokenBalance: null;\n  error: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Historical Price Response\nDESCRIPTION: Interface definition for historical cryptocurrency price responses that extends BaseHistoricalPriceResponse. Contains properties for currency denomination, array of price data points, and queried token symbol.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/HistoricalPriceBySymbolResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoricalPriceBySymbolResponse extends BaseHistoricalPriceResponse {\n  currency: string;      // Currency the prices are denominated in\n  data: HistoricalPriceDataPoint[];  // Array of historical price data points\n  symbol: string;       // Token symbol that was queried\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the DebugPrestateTracer Interface in TypeScript\nDESCRIPTION: Interface definition for DebugPrestateTracer with properties for specifying tracer type and configuration options. This interface is used to track state changes during transaction execution and provides enough information for local transaction execution simulation.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DebugPrestateTracer.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DebugPrestateTracer {\n    /**\n     * Specified type is `PRESTATE_TRACER`.\n     */\n    type: PRESTATE_TRACER;\n\n    /**\n     * Whether to only trace the main (top-level) calls and ignore sub-calls.\n     * Defaults to `false`.\n     */\n    onlyTopCall?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshContractResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the RefreshContractResult interface with three properties: contractAddress, progress, and refreshState. It includes type annotations and JSDoc comments for each property.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/RefreshContractResult.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RefreshContractResult {\n  /**\n   * The NFT contract address that was passed in to be refreshed.\n   */\n  contractAddress: string;\n\n  /**\n   * The current state of the refresh request.\n   */\n  refreshState: NftRefreshState;\n\n  /**\n   * Percentage of tokens currently refreshed, represented as an integer string.\n   * Field can be null if the refresh has not occurred.\n   */\n  progress: null | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OwnedNftsValidAt Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the structure for NFT validation data at a specific block. Includes block hash for reorg detection, optional block number for timing validation, and optional block timestamp.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/OwnedNftsValidAt.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OwnedNftsValidAt {\n    blockHash: string;        // The block hash. Used to detect reorgs.\n    blockNumber?: number;     // The block number the sale information is valid at.\n    blockTimestamp?: string;  // The timestamp for the block.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenPriceBySymbolResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenPriceBySymbolResult interface with three properties: symbol (string), prices (array of TokenPrice objects), and error (null or TokenPriceError object). It provides type information for token price query results in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenPriceBySymbolResult.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenPriceBySymbolResult {\n  symbol: string;\n  prices: TokenPrice[];\n  error: null | TokenPriceError;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Key Property Definition\nDESCRIPTION: Property definition for pageKey parameter used for pagination. Takes a string value from an existing GetTokensForOwnerResponse to paginate through results.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerOptions.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npageKey?: string\n```\n\n----------------------------------------\n\nTITLE: Removing All Listeners from Contract in TypeScript\nDESCRIPTION: Method for removing all event listeners from a contract. It accepts an optional event name or filter parameter and returns the contract instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Contract.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **removeAllListeners**(`eventName?`: `string` | `EventFilter`): [`Contract`](Contract.md)\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayNftForContract Interface in TypeScript\nDESCRIPTION: This code snippet defines the DisplayNftForContract interface with two properties: an optional 'name' string and a required 'tokenId' string. It is used to display placeholder info for an NFT owned on a contract.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DisplayNftForContract.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DisplayNftForContract {\n  name?: string;\n  tokenId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftMetadataBatchOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies optional configuration parameters for NFT metadata batch retrieval. It includes refreshCache for controlling cache behavior and tokenUriTimeoutInMs for setting metadata fetch timeout limits.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadataBatchOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftMetadataBatchOptions {\n    refreshCache?: boolean;\n    tokenUriTimeoutInMs?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for NFT Sales Query Options\nDESCRIPTION: TypeScript interface that specifies optional parameters for filtering NFT sales data. Includes properties for block range limits, sorting order, marketplace filtering, address filtering, pagination, and result limiting.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftSalesOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetNftSalesOptions {\n  buyerAddress?: string;\n  fromBlock?: number | \"latest\";\n  limit?: number;\n  marketplace?: NftSaleMarketplace;\n  order?: SortingOrder;\n  pageKey?: string;\n  sellerAddress?: string;\n  taker?: NftSaleTakerType;\n  toBlock?: number | \"latest\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FilterByBlockHash Interface in TypeScript\nDESCRIPTION: Interface definition for FilterByBlockHash that extends EventFilter. Used for filtering blockchain logs by block hash in the Alchemy SDK. Includes optional properties for address filtering, block hash specification, and topic filtering.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/FilterByBlockHash.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FilterByBlockHash extends EventFilter {\n    address?: string | string[];\n    blockHash?: string;\n    topics?: (null | string | string[])[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hexlify Function in TypeScript\nDESCRIPTION: Defines a function to convert various input types to a hexadecimal string, with optional data options.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexlify(value: number | bigint | BytesLike | Hexable, options?: DataOptions): string\n```\n\n----------------------------------------\n\nTITLE: Defining MinedTransactionWebhook Interface in TypeScript\nDESCRIPTION: This code snippet defines the MinedTransactionWebhook interface, which extends the Webhook interface. It includes properties specific to mined transaction webhooks, such as appId and type.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/MinedTransactionWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MinedTransactionWebhook extends Webhook {\n  appId?: string;\n  type: WebhookType.MINED_TRANSACTION;\n}\n```\n\n----------------------------------------\n\nTITLE: hashesOnly Property Definition in AlchemyPendingTransactionsEventFilter\nDESCRIPTION: The hashesOnly property controls whether to return only transaction hashes instead of full transaction objects. When set to true, it reduces the payload size of the response.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemyPendingTransactionsEventFilter.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **hashesOnly**: `boolean`\n\nWhether to only include transaction hashes and exclude the rest of the\ntransaction response for a smaller payload. Defaults to false (by default,\nthe entire transaction response is included).\n\nNote that setting only [hashesOnly](AlchemyPendingTransactionsEventFilter.md#hashesonly) to true will return the same\nresponse as subscribing to `newPendingTransactions`.\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name in AlchemyWebSocketProvider\nDESCRIPTION: Resolves an Ethereum Name Service (ENS) name to its corresponding Ethereum address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nresolveName(name: string | Promise<string>): Promise<null | string>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenSeaSafelistRequestStatus Enum in TypeScript\nDESCRIPTION: This code defines an enumeration for OpenSea collection approval statuses. It includes four states: VERIFIED for verified collections, APPROVED for collections that can be found in search results, REQUESTED for collections that have requested safelisting, and NOT_REQUESTED for brand new collections.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/OpenSeaSafelistRequestStatus.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum OpenSeaSafelistRequestStatus {\n  VERIFIED = \"verified\",\n  APPROVED = \"approved\",\n  REQUESTED = \"requested\",\n  NOT_REQUESTED = \"not_requested\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing NFT Methods\nDESCRIPTION: Updated method call syntax using the new namespaced structure.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nalchemy.nft.getNftsByOwner('vitalik.eth')\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for NFT Sales Options with Contract Address\nDESCRIPTION: TypeScript interface extending GetNftSalesOptions to provide filtering capabilities for NFT sales data by contract address. Includes comprehensive options for filtering sales data including buyer/seller addresses, block ranges, pagination, and token-specific parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftSalesOptionsByContractAddress.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetNftSalesOptionsByContractAddress extends GetNftSalesOptions {\n  buyerAddress?: string;\n  contractAddress: string;\n  fromBlock?: number | 'latest';\n  limit?: number;\n  marketplace?: NftSaleMarketplace;\n  order?: SortingOrder;\n  pageKey?: string;\n  sellerAddress?: string;\n  taker?: NftSaleTakerType;\n  toBlock?: number | 'latest';\n  tokenId?: BigNumberish;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransfersForContractOptions Interface in TypeScript\nDESCRIPTION: Interface definition specifying optional parameters for querying NFT transfers. Includes fromBlock and toBlock for specifying block range, order for sorting direction, and pageKey for pagination support.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTransfersForContractOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetTransfersForContractOptions {\n  fromBlock?: BlockTag;\n  toBlock?: BlockTag;\n  order?: SortingOrder;\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hexValue Function in TypeScript\nDESCRIPTION: Defines a function to convert various input types to a hexadecimal string representation.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexValue(value: number | bigint | BytesLike | Hexable): string\n```\n\n----------------------------------------\n\nTITLE: Defining RawContract Interface in TypeScript\nDESCRIPTION: Defines the RawContract interface with properties for address, decimal, and value. The address is nullable and represents the contract address or null for internal/external transfers. Decimal is the number of decimals in hex string format, and value is the raw transfer value for non-ERC721/ERC1155 tokens.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/RawContract.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RawContract {\n  address: null | string;\n  decimal: null | string;\n  value: null | string;\n}\n```\n\n----------------------------------------\n\nTITLE: method Property Definition in AlchemyPendingTransactionsEventFilter\nDESCRIPTION: The method property specifies the subscription type, which must be set to PENDING_TRANSACTIONS from the AlchemySubscription enum for this filter to work correctly.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemyPendingTransactionsEventFilter.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **method**: [`PENDING_TRANSACTIONS`](../enums/AlchemySubscription.md#pending_transactions)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Confirmation in AlchemyWebSocketProvider\nDESCRIPTION: Waits for a transaction to be confirmed and returns the TransactionReceipt.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nwaitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>\n```\n\n----------------------------------------\n\nTITLE: Defining DecodingAuthority Enumeration in TypeScript\nDESCRIPTION: Definition of the DecodingAuthority enumeration which currently only includes ETHERSCAN as the authority for decoding calls and logs in the TransactNamespace.simulateExecution method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/DecodingAuthority.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **ETHERSCAN** = `\"ETHERSCAN\"`\n```\n\n----------------------------------------\n\nTITLE: Getting Contract Instance in TypeScript\nDESCRIPTION: Static method that creates a Contract instance at a specified address with a given interface and optional signer.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getContract(address, contractInterface, signer?): Contract\n```\n\n----------------------------------------\n\nTITLE: Defining GetNftMetadataBatchResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for NFT metadata batch responses. The interface specifies a single property 'nfts' that contains an array of Nft objects, which store metadata for multiple NFTs.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetNftMetadataBatchResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetNftMetadataBatchResponse {\n  nfts: Nft[];\n}\n```\n\n----------------------------------------\n\nTITLE: Address Validation in Interface Class in TypeScript\nDESCRIPTION: Static method that normalizes and validates an Ethereum address, returning the checksum format.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Utils.Interface.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getAddress(address: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining DroppedTransactionWebhook Interface in TypeScript\nDESCRIPTION: This code snippet defines the DroppedTransactionWebhook interface, which extends the Webhook interface. It includes properties for webhook identification, status, network, and specific fields for dropped transaction notifications.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DroppedTransactionWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DroppedTransactionWebhook extends Webhook {\n  appId?: string;\n  id: string;\n  isActive: boolean;\n  network: Network;\n  signingKey: string;\n  timeCreated: string;\n  type: WebhookType.DROPPED_TRANSACTION;\n  url: string;\n  version: WebhookVersion;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining joinSignature Function in TypeScript\nDESCRIPTION: Defines a function to join the components of a signature into a single string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\njoinSignature(signature: SignatureLike): string\n```\n\n----------------------------------------\n\nTITLE: Defining tokens Property in GetTokensForOwnerResponse\nDESCRIPTION: This code snippet defines the tokens property in the GetTokensForOwnerResponse interface. It is an array of OwnedToken objects representing the owned tokens for the provided addresses along with relevant metadata.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerResponse.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntokens: OwnedToken[];\n```\n\n----------------------------------------\n\nTITLE: Getting Gas Price Estimate in TypeScript\nDESCRIPTION: Retrieves the current estimated gas price to use for transactions. Returns a Promise that resolves to a BigNumber representing the gas price.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetGasPrice(): Promise<BigNumber>\n```\n\n----------------------------------------\n\nTITLE: GetTransfersForOwnerTransferType FROM Member Definition\nDESCRIPTION: Defines the FROM member of the GetTransfersForOwnerTransferType enumeration which represents outgoing transfers from the owner's address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/GetTransfersForOwnerTransferType.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **FROM** = `\"FROM\"`\n```\n\n----------------------------------------\n\nTITLE: Defining pageKey Property in GetTokensForOwnerResponse\nDESCRIPTION: This code snippet shows the definition of the optional pageKey property in the GetTokensForOwnerResponse interface. It represents the page key for the next page of results, if one exists.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerResponse.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npageKey?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokenPriceByAddressResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the response structure for token price data. Contains a data property that holds an array of TokenPriceByAddressResult objects.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokenPriceByAddressResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **data**: [`TokenPriceByAddressResult`](TokenPriceByAddressResult.md)[]\n```\n\n----------------------------------------\n\nTITLE: Defining SimulationDebugLog Interface in TypeScript\nDESCRIPTION: This code snippet defines the SimulationDebugLog interface with properties for address, data, decoded log, and topics. It includes type annotations and optional fields.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulationDebugLog.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SimulationDebugLog {\n  address: string;\n  data: string;\n  decoded?: DecodedLog;\n  topics: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomGraphqlWebhook Interface in TypeScript\nDESCRIPTION: This code snippet defines the CustomGraphqlWebhook interface, which extends the Webhook interface. It includes properties for webhook identification, network, status, and configuration. The interface is designed to represent a custom webhook that can track various blockchain events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/CustomGraphqlWebhook.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CustomGraphqlWebhook extends Webhook {\n  type: WebhookType.GRAPHQL;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isValidName Function in TypeScript\nDESCRIPTION: Defines a function to check if a string is a valid Ethereum name.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nisValidName(name: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessors in AlchemyProvider\nDESCRIPTION: Defines getter and setter accessors for various properties inherited from JsonRpcProvider, such as _cache, blockNumber, network, polling, pollingInterval, and ready.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AlchemyProvider extends JsonRpcProvider {\n  get _cache(): Record<string, Promise<any>> { /* ... */ }\n  get blockNumber(): number { /* ... */ }\n  get network(): Network { /* ... */ }\n  get polling(): boolean { /* ... */ }\n  set polling(value: boolean) { /* ... */ }\n  get pollingInterval(): number { /* ... */ }\n  set pollingInterval(value: number) { /* ... */ }\n  get ready(): Promise<Network> { /* ... */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Receipt in TypeScript\nDESCRIPTION: Returns a Promise that resolves to either null or a TransactionReceipt object. This method is defined in the core-namespace.ts file.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/CoreNamespace.md#2025-04-19_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n▸ **getTransactionReceipt**(`transactionHash`): `Promise`<``null`` | [`TransactionReceipt`](../interfaces/TransactionReceipt.md)>\n```\n\n----------------------------------------\n\nTITLE: Contract Addresses Property Definition\nDESCRIPTION: Property definition for contractAddresses parameter that accepts an array of contract addresses or TokenBalanceType enum. Defaults to TokenBalanceType.ERC20 if omitted.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokensForOwnerOptions.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontractAddresses?: string[] | TokenBalanceType\n```\n\n----------------------------------------\n\nTITLE: Defining DecodedDebugCallTrace Interface in TypeScript\nDESCRIPTION: This code snippet defines the DecodedDebugCallTrace interface with properties for authority, inputs, methodName, and outputs. It represents a decoded representation of a call trace in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DecodedDebugCallTrace.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DecodedDebugCallTrace {\n  authority: ETHERSCAN;\n  inputs: DecodedCallParam[];\n  methodName: string;\n  outputs: DecodedCallParam[];\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Addresses Method\nDESCRIPTION: Method to retrieve all addresses tracked for an AddressActivityWebhook with optional pagination.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetAddresses(addressWebhook: AddressActivityWebhook, options?: GetAddressesOptions): Promise<AddressActivityResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAddressRequest Interface in TypeScript\nDESCRIPTION: This code snippet defines the TokenAddressRequest interface with two properties: network and address. It is used to specify the network and contract address when querying token prices using the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenAddressRequest.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TokenAddressRequest {\n  network: Network;\n  address: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Balance Response Property Definitions\nDESCRIPTION: Property definitions for the TokenBalancesResponseErc20 interface showing inheritance from TokenBalancesResponse and additional pagination support.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenBalancesResponseErc20.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// From TokenBalancesResponse\naddress: string;\n\n// Optional page key for pagination\npageKey?: string;\n\n// Array of token balances\ntokenBalances: TokenBalance[];\n```\n\n----------------------------------------\n\nTITLE: Community Resource Check in TypeScript Provider\nDESCRIPTION: Method that overrides ethers.js isCommunityResource() to determine if using default API key. Returns boolean indicating if current key is the default.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nisCommunityResource(): boolean {\n    // Overrides ether's isCommunityResource() method\n    // Returns true if current api key is default key\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions to the Network in Alchemy SDK\nDESCRIPTION: Method to submit a signed transaction to the blockchain network for mining. The transaction must be properly signed and valid with correct nonce and sufficient account balance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/TransactNamespace.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsendTransaction(signedTransaction): Promise<TransactionResponse>\n```\n\n----------------------------------------\n\nTITLE: Checking for Null Value in TypeScript\nDESCRIPTION: This function checks if a given value is null. It returns a boolean indicating whether the input is null or not.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nisNullValue(value: unknown): boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing isCommunityResource in TypeScript\nDESCRIPTION: Method that overrides ethers' isCommunityResource() to check if the current API key is the default key.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nisCommunityResource(): boolean {\n  return true if api key is default key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DecodedCallParam Interface in TypeScript\nDESCRIPTION: This TypeScript code defines the DecodedCallParam interface with three properties: value (a string representing the parameter value), name (a string representing the parameter name), and type (a string representing the parameter type).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DecodedCallParam.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DecodedCallParam {\n  value: string;\n  name: string;\n  type: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZkSync Sepolia Network Constant in TypeScript\nDESCRIPTION: Constant definition for the zkSync Sepolia test network identifier.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/Network.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nZKSYNC_SEPOLIA = \"zksync-sepolia\"\n```\n\n----------------------------------------\n\nTITLE: Getting Function or Error Signature Hash in TypeScript\nDESCRIPTION: Static method that computes the function or error selector (sighash) from a fragment.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Utils.Interface.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getSighash(fragment: ErrorFragment | FunctionFragment): string\n```\n\n----------------------------------------\n\nTITLE: Defining NftMetadataBatchToken Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for NFT token metadata batch requests. Includes required properties for contract address and token ID, plus an optional token type specifier limited to ERC721 and ERC1155 tokens.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadataBatchToken.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftMetadataBatchToken {\n    contractAddress: string;\n    tokenId: BigNumberish;\n    tokenType?: NftTokenType.ERC721 | NftTokenType.ERC1155;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Request Formatter in TypeScript\nDESCRIPTION: Private method that overrides the base Formatter class to support custom fields in Ethers response types. This allows returning additional fields not defined in the standard ethers Formatter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nprivate modifyFormatter(): void {\n  // Overrides the base `Formatter` class inherited from ethers to support\n  // returning custom fields in Ethers response types.\n\n  // For context, ethers has a `Formatter` class that is used to format the\n  // response from a JSON-RPC request. Any fields that are not defined in the\n  // `Formatter` class are removed from the returned response. By modifying the\n  // `Formatter` class in this method, we can add support for fields that are\n  // not defined in ethers.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining formatUnits Function in TypeScript\nDESCRIPTION: Defines a function to format a BigNumberish value into a specified unit, returning a string representation.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatUnits(value: BigNumberish, unitName?: BigNumberish): string\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Ethers.js Provider\nDESCRIPTION: Example of accessing the complete Ethers.js provider functionality through the Alchemy SDK configuration.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nasync function runAlchemy() {\n  const ethersProvider = await alchemy.config.getProvider();\n  console.log(ethersProvider.formatter);\n}\nrunAlchemy();\n```\n\n----------------------------------------\n\nTITLE: Defining DecodedLog Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DecodedLog that specifies the structure of decoded transaction logs. Contains three main properties: authority (source of decoding), eventName (decoded event name), and inputs (array of decoded log inputs).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DecodedLog.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DecodedLog {\n    authority: ETHERSCAN;\n    eventName: string;\n    inputs: DecodedLogInput[];\n}\n```\n\n----------------------------------------\n\nTITLE: BigNumber Static Method Definition\nDESCRIPTION: Static factory method to create BigNumber instances from any value type\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/BigNumber.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic from(value: any): BigNumber\n```\n\n----------------------------------------\n\nTITLE: Defining hexConcat Function in TypeScript\nDESCRIPTION: Defines a function to concatenate an array of BytesLike items into a single hexadecimal string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexConcat(items: readonly BytesLike[]): string\n```\n\n----------------------------------------\n\nTITLE: Implementing refreshCache Property\nDESCRIPTION: Optional boolean property that determines whether to refresh NFT metadata cache before returning the response. Defaults to false for better performance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadataBatchOptions.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOptional refreshCache: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Zora Mainnet Network Constant in TypeScript\nDESCRIPTION: Constant definition for the Zora mainnet network identifier.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/Network.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nZORA_MAINNET = \"zora-mainnet\"\n```\n\n----------------------------------------\n\nTITLE: Defining hexDataSlice Function in TypeScript\nDESCRIPTION: Defines a function to slice hexadecimal data, returning a substring as a hexadecimal string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexDataSlice(data: BytesLike, offset: number, endOffset?: number): string\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods in AlchemyProvider\nDESCRIPTION: Defines various methods for the AlchemyProvider class, including overrides and implementations of inherited methods from JsonRpcProvider.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AlchemyProvider extends JsonRpcProvider {\n  _startPending(): void {\n    // Implementation\n  }\n\n  // Other method implementations...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOwnersForContractWithTokenBalancesResponse Interface in TypeScript\nDESCRIPTION: This snippet defines the GetOwnersForContractWithTokenBalancesResponse interface with two properties: owners (an array of NftContractOwner objects) and an optional pageKey (string). The owners property contains an array of owner addresses for the provided contract address, while the pageKey is returned when a collection has more than 50,000 owners.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetOwnersForContractWithTokenBalancesResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetOwnersForContractWithTokenBalancesResponse {\n  owners: NftContractOwner[];\n  pageKey?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftContractForNft Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftContractForNft interface, which extends NftContract and adds spam-related properties. It includes various properties such as contract address, name, symbol, token type, and spam classifications.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftContractForNft.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftContractForNft extends NftContract {\n  address: string;\n  contractDeployer?: string;\n  deployedBlockNumber?: number;\n  isSpam?: boolean;\n  name?: string;\n  openSeaMetadata: OpenSeaCollectionMetadata;\n  spamClassifications: NftSpamClassification[];\n  symbol?: string;\n  tokenType: NftTokenType;\n  totalSupply?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookNftFilterUpdate Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for updating NFT webhook filters. Contains two properties: addFilters for new filters to track and removeFilters for existing filters to remove from tracking.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/WebhookNftFilterUpdate.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebhookNftFilterUpdate {\n    addFilters: NftFilter[];\n    removeFilters: NftFilter[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining zeroPad Function in TypeScript\nDESCRIPTION: Defines a function to pad a byte array with leading zeros to a specified length.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nzeroPad(value: BytesLike, length: number): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining omitMetadata Property in GetBaseNftsForContractOptions Interface\nDESCRIPTION: Defines the omitMetadata property which is a boolean flag to control NFT metadata inclusion. For this interface, it's explicitly set to false as this interface is for fetching NFTs without metadata.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetBaseNftsForContractOptions.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nomitMetadata: false\n```\n\n----------------------------------------\n\nTITLE: Defining id Function in TypeScript\nDESCRIPTION: Defines a function to generate a unique identifier from a text string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nid(text: string): string\n```\n\n----------------------------------------\n\nTITLE: Implementing once Method in TypeScript\nDESCRIPTION: Adds a one-time event listener that is removed after first trigger. Takes eventName and listener parameters, returns the WebSocketNamespace instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **once**(`eventName`, `listener`): [`WebSocketNamespace`](WebSocketNamespace.md)\n```\n\n----------------------------------------\n\nTITLE: Defining NftSaleFeeData Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftSaleFeeData interface with four optional properties: amount, decimals, symbol, and tokenAddress. It provides type information for fee details in NFT sales.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftSaleFeeData.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftSaleFeeData {\n  amount?: string;\n  decimals?: number;\n  symbol?: string;\n  tokenAddress?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookStatusUpdate Interface in TypeScript\nDESCRIPTION: This code snippet defines the WebhookStatusUpdate interface with a single property 'isActive' of type boolean. It is used to update the status of a webhook in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/WebhookStatusUpdate.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface WebhookStatusUpdate {\n  isActive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionWebhookParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransactionWebhookParams interface with an appId property. It is used when calling NotifyNamespace.createWebhook to create MinedTransactionWebhook or DroppedTransactionWebhook instances.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionWebhookParams.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransactionWebhookParams {\n  appId: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Verification in TypeScript\nDESCRIPTION: Private method that verifies the configuration settings before performing webhook operations. Used internally to ensure proper setup before making API calls.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n`Private` **verifyConfig**(): `void`\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Listeners Method in TypeScript\nDESCRIPTION: Private method that retrieves an array of listeners for Alchemy event types. Extends the ethers.js BaseProvider implementation to handle Alchemy-specific subscription events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _listeners(eventName?: AlchemyEventType): Listener[]\n```\n\n----------------------------------------\n\nTITLE: Defining stripZeros Function in TypeScript\nDESCRIPTION: Defines a function to remove leading zero bytes from a Uint8Array.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nstripZeros(value: BytesLike): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining Zora Sepolia Network Constant in TypeScript\nDESCRIPTION: Constant definition for the Zora Sepolia test network identifier.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/Network.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nZORA_SEPOLIA = \"zora-sepolia\"\n```\n\n----------------------------------------\n\nTITLE: Defining pageKey Property in GetBaseNftsForContractOptions Interface\nDESCRIPTION: Defines the optional pageKey property which is used for pagination in NFT queries. It accepts a string value from a previous response to continue pagination.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetBaseNftsForContractOptions.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npageKey?: string\n```\n\n----------------------------------------\n\nTITLE: Defining GetTokenPriceBySymbolRequest Interface in TypeScript\nDESCRIPTION: Interface definition for token price requests by symbol. Contains a single property 'symbols' which accepts an array of token symbol strings for price querying through the PricesNamespace.getTokenPriceBySymbol method.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetTokenPriceBySymbolRequest.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **symbols**: `string`[]\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Sale Block Validation Interface in TypeScript\nDESCRIPTION: Interface definition for validating NFT sales at specific blocks. Contains optional blockHash for reorg detection, required blockNumber for validation point, and optional blockTimestamp for temporal reference.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftSaleValidAt.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NftSaleValidAt {\n    blockHash?: string;  // The block hash. Used to detect reorgs.\n    blockNumber: number;  // The block number the sale information is valid at.\n    blockTimestamp?: string;  // The timestamp for the block.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenPriceError Interface in TypeScript\nDESCRIPTION: Interface definition for token price request error handling. Contains a single message property of type string that describes why the price request failed.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TokenPriceError.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TokenPriceError {\n  message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Listener Management Methods in TypeScript\nDESCRIPTION: Helper methods for managing WebSocket event listeners including listenerCount() and listeners() implementations.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlistenerCount(eventName?: AlchemyEventType): number\nlisteners(eventName?: AlchemyEventType): Listener[]\n```\n\n----------------------------------------\n\nTITLE: Defining NftOrdering Enum in TypeScript\nDESCRIPTION: Defines an enumeration containing ordering options for NFT-related queries. Currently includes TRANSFERTIME as the only ordering option. This enum is marked as beta functionality.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftOrdering.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **TRANSFERTIME** = \"TRANSFERTIME\"\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Alchemy JS SDK\nDESCRIPTION: This command runs the integration tests for the Alchemy JS SDK using Yarn. It requires setting up an Alchemy API key in the alchemy.env file before execution.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-integration\n```\n\n----------------------------------------\n\nTITLE: Token Type Property Definition\nDESCRIPTION: Optional property definition for filtering NFTs by token standard type, supporting either ERC721 or ERC1155.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetMintedNftsOptions.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntokenType?: 'ERC721' | 'ERC1155'\n```\n\n----------------------------------------\n\nTITLE: Defining dnsEncode Function in TypeScript\nDESCRIPTION: Defines a function to encode a DNS name as a string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndnsEncode(name: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining isBytesLike Function in TypeScript\nDESCRIPTION: Defines a type guard function to check if a value is BytesLike.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nisBytesLike(value: any): value is BytesLike\n```\n\n----------------------------------------\n\nTITLE: Getting ABI Coder from Interface Class in TypeScript\nDESCRIPTION: Static method that returns an AbiCoder instance for encoding and decoding ABI data.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Utils.Interface.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getAbiCoder(): AbiCoder\n```\n\n----------------------------------------\n\nTITLE: Preparing Request in AlchemyWebSocketProvider\nDESCRIPTION: Prepares a request with the given method and parameters. Returns a tuple containing the method string and an array of parameters.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nprepareRequest(method: string, params: any): [string, any[]]\n```\n\n----------------------------------------\n\nTITLE: Defining NftSpamClassification Enum in TypeScript\nDESCRIPTION: A TypeScript enumeration that defines various reasons why an NFT contract might be classified as spam. It includes classifications related to dishonest token supply, ownership distribution, honey pot detection, and suspicious activity patterns.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftSpamClassification.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum NftSpamClassification {\n  Erc721TooManyOwners = \"Erc721TooManyOwners\",\n  Erc721TooManyTokens = \"Erc721TooManyTokens\",\n  Erc721DishonestTotalSupply = \"Erc721DishonestTotalSupply\",\n  MostlyHoneyPotOwners = \"MostlyHoneyPotOwners\",\n  OwnedByMostHoneyPots = \"OwnedByMostHoneyPots\",\n  LowDistinctOwnersPercent = \"LowDistinctOwnersPercent\",\n  HighHoneyPotOwnerPercent = \"HighHoneyPotOwnerPercent\",\n  HighHoneyPotPercent = \"HighHoneyPotPercent\",\n  HoneyPotsOwnMultipleTokens = \"HoneyPotsOwnMultipleTokens\",\n  NoSalesActivity = \"NoSalesActivity\",\n  HighAirdropPercent = \"HighAirdropPercent\",\n  Unknown = \"Unknown\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isHexString Function in TypeScript\nDESCRIPTION: Defines a function to check if a value is a valid hexadecimal string, optionally of a specific length.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nisHexString(value: any, length?: number): boolean\n```\n\n----------------------------------------\n\nTITLE: toAddress Property Definition in AlchemyPendingTransactionsEventFilter\nDESCRIPTION: The toAddress property enables filtering transactions by their recipient address. It can be used independently or in combination with fromAddress to get transactions that match either condition.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AlchemyPendingTransactionsEventFilter.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n• `Optional` **toAddress**: `string` \\| `string`[]\n\nFilter pending transactions sent TO the provided address or array of\naddresses.\n\nIf a [AlchemyPendingTransactionsEventFilter.fromAddress](AlchemyPendingTransactionsEventFilter.md#fromaddress) is also\npresent, then this filter will return transactions sent from the\n`fromAddress` OR transactions received by the `toAddress`.\n```\n\n----------------------------------------\n\nTITLE: Documenting 'tokenId' Property in DisplayNftForContract\nDESCRIPTION: This code snippet shows the TypeScript property definition and JSDoc comment for the required 'tokenId' property in the DisplayNftForContract interface. It represents a token ID of an NFT owned by the owner on the contract.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/DisplayNftForContract.md#2025-04-19_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * A token id of an NFT owned by the owner on the contract.\n */\ntokenId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining hexZeroPad Function in TypeScript\nDESCRIPTION: Defines a function to pad a hexadecimal string with leading zeros to a specified length.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexZeroPad(value: BytesLike, length: number): string\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransfersForOwnerTransferType Enumeration in TypeScript\nDESCRIPTION: This code defines the GetTransfersForOwnerTransferType enumeration with two members: TO and FROM. The TO option is used for incoming transfers (including minted NFTs) while FROM is used for outgoing transfers.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/GetTransfersForOwnerTransferType.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **TO** = `\"TO\"`\n```\n\n----------------------------------------\n\nTITLE: Defining DebugCallType Enumeration in TypeScript\nDESCRIPTION: Enumeration of call types used in Ethereum debug call traces. The enumeration includes CALL (standard call), CREATE (contract creation), STATICCALL (read-only call), and DELEGATECALL (uses caller's context).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/DebugCallType.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum DebugCallType {\n  CALL = \"CALL\",\n  CREATE = \"CREATE\",\n  DELEGATECALL = \"DELEGATECALL\",\n  STATICCALL = \"STATICCALL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftRefreshState Enumeration in TypeScript\nDESCRIPTION: Defines the NftRefreshState enumeration with six possible states for NFT contract refresh operations: ALREADY_QUEUED, DOES_NOT_EXIST, FINISHED, IN_PROGRESS, QUEUED, and QUEUE_FAILED. Each state includes a descriptive comment explaining its meaning.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftRefreshState.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum NftRefreshState {\n  ALREADY_QUEUED = \"already_queued\",\n  DOES_NOT_EXIST = \"does_not_exist\",\n  FINISHED = \"finished\",\n  IN_PROGRESS = \"in_progress\",\n  QUEUED = \"queued\",\n  QUEUE_FAILED = \"queue_failed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining namehash Function in TypeScript\nDESCRIPTION: Defines a function to compute the namehash of an Ethereum name.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nnamehash(name: string): string\n```\n\n----------------------------------------\n\nTITLE: Private Webhook Request Handler in TypeScript\nDESCRIPTION: Private method used internally to send webhook-related API requests to the Alchemy platform. Handles REST API calls with parameters and optional Axios request configuration overrides.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NotifyNamespace.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n`Private` **sendWebhookRequest**<`Response`>(`restApiName`, `methodName`, `params`, `overrides?`): `Promise`<`Response`>\n```\n\n----------------------------------------\n\nTITLE: Defining NftCollectionFloorPrice Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftCollectionFloorPrice interface with three optional properties: floorPrice, marketplace, and priceCurrency. It is used to represent the floor price information for an NFT collection.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftCollectionFloorPrice.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftCollectionFloorPrice {\n  floorPrice?: number;\n  marketplace?: OPENSEA;\n  priceCurrency?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining toUtf8String Function in TypeScript\nDESCRIPTION: Defines a function to convert UTF-8 bytes to a string, with an optional error handler.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Hexadecimal String in TypeScript\nDESCRIPTION: This utility function converts a number to its hexadecimal string representation. It takes a number as input and returns the corresponding hex string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoHex(num: number): string\n```\n\n----------------------------------------\n\nTITLE: Defining CommitmentLevel Enum in TypeScript\nDESCRIPTION: Enumeration defining different block commitment levels in Ethereum network. Includes PENDING (next inferred block), LATEST (most recent canonical block), SAFE (crypto-economically secure block), FINALIZED (accepted by validators), and EARLIEST (first available block).\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/CommitmentLevel.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum CommitmentLevel {\n  PENDING = \"pending\",\n  LATEST = \"latest\",\n  SAFE = \"safe\",\n  FINALIZED = \"finalized\",\n  EARLIEST = \"earliest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the NftSaleTakerType Enumeration in TypeScript\nDESCRIPTION: This code defines an enumeration with two values: BUYER and SELLER, representing the possible taker types for NFT sales. This is used to filter NFT sales data when calling the getNftSales method in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftSaleTakerType.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **BUYER** = `\"buyer\"`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **SELLER** = `\"seller\"`\n```\n\n----------------------------------------\n\nTITLE: Defining concat Function in TypeScript\nDESCRIPTION: Defines a function to concatenate an array of BytesLike items into a single Uint8Array.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconcat(items: readonly BytesLike[]): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Defining AlchemyProvider Class Properties in TypeScript\nDESCRIPTION: Defines readonly properties for the AlchemyProvider class, including disableCcipRead, formatter, and maxRetries.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyProvider.md#2025-04-19_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AlchemyProvider extends JsonRpcProvider {\n  disableCcipRead: boolean;\n  formatter: Formatter;\n  readonly maxRetries: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookVersion Enumeration in TypeScript\nDESCRIPTION: TypeScript enumeration defining webhook version options in the Alchemy SDK. It contains two values: V1 and V2, with V2 being the default for all newly created webhooks.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/WebhookVersion.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **V1** = `\"V1\"`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n• **V2** = `\"V2\"`\n```\n\n----------------------------------------\n\nTITLE: Hex String Conversion Functions in TypeScript\nDESCRIPTION: Utility functions for converting between hexadecimal and decimal numbers and validating hex strings. Includes fromHex() to convert hex to decimal and isHex() to validate hex strings.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fromHex(hexString: string): number {\n  // Code not shown in snippet\n}\n\nfunction isHex(possibleHexString: string): boolean {\n  // Code not shown in snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SimulateAssetChangesError Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SimulateAssetChangesError that extends Record<string,any> and includes a message property to store error messages from asset change simulations.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/SimulateAssetChangesError.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SimulateAssetChangesError extends Record<string, any> {\n  message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetAllWebhooksResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the webhook response object that includes an array of Webhook objects and a total count. This interface is used to type the response from the getAllWebhooks method in the NotifyNamespace class.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetAllWebhooksResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetAllWebhooksResponse {\n    totalCount: number;    // The total number of webhooks\n    webhooks: Webhook[];   // All webhooks attached to the provided auth token\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Marketplace Enum in TypeScript\nDESCRIPTION: Typescript enumeration that defines supported NFT marketplaces for use with the NftCollectionFloorPrice interface. Currently only includes OpenSea as a marketplace option.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftCollectionMarketplace.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum NftCollectionMarketplace {\n  OPENSEA = \"OpenSea\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining hexStripZeros Function in TypeScript\nDESCRIPTION: Defines a function to remove leading zeros from a hexadecimal string.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nhexStripZeros(value: BytesLike): string\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Listener Count Method in TypeScript\nDESCRIPTION: Private method that counts listeners for Alchemy event types. Extends the original ethers.js BaseProvider implementation to support Alchemy-specific subscription events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprivate _listenerCount(eventName?: AlchemyEventType): number\n```\n\n----------------------------------------\n\nTITLE: Implementing on Method in TypeScript\nDESCRIPTION: Adds an event listener for Alchemy Subscription API events. Takes eventName and listener parameters, returns the WebSocketNamespace instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/WebSocketNamespace.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n▸ **on**(`eventName`, `listener`): [`WebSocketNamespace`](WebSocketNamespace.md)\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookNftMetadataFilterUpdate Interface in TypeScript\nDESCRIPTION: This code snippet defines the WebhookNftMetadataFilterUpdate interface with two properties: addMetadataFilters and removeMetadataFilters. Both properties are arrays of NftFilter objects used to add or remove filters for NFT metadata updates.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/WebhookNftMetadataFilterUpdate.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface WebhookNftMetadataFilterUpdate {\n  addMetadataFilters: NftFilter[];\n  removeMetadataFilters: NftFilter[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftFilters Enum in TypeScript\nDESCRIPTION: Defines the NftFilters enumeration with two members: SPAM for NFTs classified as spam, and AIRDROPS for NFTs that have been airdropped to a user. Used with NFT-related API requests in the Alchemy SDK.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftFilters.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum NftFilters {\n  SPAM = \"SPAM\",\n  AIRDROPS = \"AIRDROPS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isBytes Function in TypeScript\nDESCRIPTION: Defines a type guard function to check if a value is of type Bytes.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/modules/Utils.md#2025-04-19_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nisBytes(value: any): value is Bytes\n```\n\n----------------------------------------\n\nTITLE: Implementing Private WebSocket Event Removal in TypeScript\nDESCRIPTION: Private method that removes a specific event listener. Code copied from ethers.js BaseProvider.off() with modifications to support Alchemy subscription events using getAlchemyEventTag instead of getEventTag().\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _off(eventName: AlchemyEventType, listener?: Listener): AlchemyWebSocketProvider\n```\n\n----------------------------------------\n\nTITLE: Implementing tokenUriTimeoutInMs Property\nDESCRIPTION: Optional numeric property that sets the timeout in milliseconds for metadata website responses. Setting to 0 forces cache-only access without live fetching.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftMetadataBatchOptions.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nOptional tokenUriTimeoutInMs: number\n```\n\n----------------------------------------\n\nTITLE: Defining WebhookAddressOverride Interface in TypeScript\nDESCRIPTION: This code snippet defines the WebhookAddressOverride interface with a single property 'newAddresses'. It is used in the NotifyNamespace.updateWebhook method to replace all existing addresses for an AddressActivityWebhook.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/WebhookAddressOverride.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface WebhookAddressOverride {\n  newAddresses: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Token Type Enumeration in TypeScript\nDESCRIPTION: This code defines an enumeration called NftTokenType which specifies different token types for NFTs in the Alchemy SDK. It includes standard NFT token types (ERC721, ERC1155) and error states to handle different edge cases when identifying NFT contracts.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/NftTokenType.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nERC721 = \"ERC721\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nERC1155 = \"ERC1155\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nNO_SUPPORTED_NFT_STANDARD = \"NO_SUPPORTED_NFT_STANDARD\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nNOT_A_CONTRACT = \"NOT_A_CONTRACT\"\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nUNKNOWN = \"UNKNOWN\"\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Event Listener Removal in TypeScript\nDESCRIPTION: Private method that removes all listeners for a given event type. Copied from ethers.js BaseProvider.removeAllListeners() with modifications for Alchemy subscription events.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate _removeAllListeners(eventName: AlchemyEventType): AlchemyWebSocketProvider\n```\n\n----------------------------------------\n\nTITLE: Defining SortingOrder Enum in TypeScript\nDESCRIPTION: Enumeration that defines the two possible sorting orders used in the Alchemy API: ASCENDING (\"asc\") and DESCENDING (\"desc\"). Used for controlling the sort order of API results.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/enums/SortingOrder.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum SortingOrder {\n  ASCENDING = \"asc\",\n  DESCENDING = \"desc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionReceiptsBlockNumber Interface in TypeScript\nDESCRIPTION: Defines the TransactionReceiptsBlockNumber interface with a single property 'blockNumber' of type string. This interface is used to specify the block number when querying transaction receipts.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/TransactionReceiptsBlockNumber.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TransactionReceiptsBlockNumber {\n  blockNumber: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Event Emission in TypeScript\nDESCRIPTION: Private generic method for emitting events to subscribers with virtual IDs and typed results.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate emitEvent<T>(virtualId: string, result: T): void\n```\n\n----------------------------------------\n\nTITLE: Creating Interface from Contract Interface in TypeScript\nDESCRIPTION: Static method that creates an Interface instance from a contract interface specification.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getInterface(contractInterface): Interface\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Alchemy JS SDK\nDESCRIPTION: This command runs the unit tests for the Alchemy JS SDK using Yarn.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Defining Events Array in AlchemyWebSocketProvider Class\nDESCRIPTION: Initialization of the _events property in the AlchemyWebSocketProvider class, which overrides the WebSocketProvider's _events property. This array stores EthersEvent objects for event tracking.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/AlchemyWebSocketProvider.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n_events: EthersEvent[] = []\n```\n\n----------------------------------------\n\nTITLE: Contract Addresses Property Definition\nDESCRIPTION: Optional property definition for filtering NFT mints by contract addresses. Takes an array of strings representing contract addresses.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/GetMintedNftsOptions.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontractAddresses?: string[]\n```\n\n----------------------------------------\n\nTITLE: NFT Pagination Implementation with Alchemy SDK\nDESCRIPTION: Shows how to implement pagination for NFT data retrieval using Alchemy SDK's iterator functionality. The example demonstrates fetching all NFTs owned by a specific Ethereum address.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nasync function main() {\n  const ownerAddress = 'vitalik.eth';\n  for await (const nft of alchemy.nft.getNftsForOwnerIterator(ownerAddress)) {\n    console.log('ownedNft:', nft);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Accessing the Full Ethers.js Provider\nDESCRIPTION: Shows how to access the underlying Ethers.js Provider for advanced use cases that aren't exposed as top-level methods in the Alchemy SDK core namespace. This allows access to methods like provider.formatter.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Alchemy } from 'alchemy-sdk';\n\nconst alchemy = new Alchemy();\n\nasync function runAlchemy() {\n  const ethersProvider = await alchemy.config.getProvider();\n  console.log(ethersProvider.formatter);\n}\nrunAlchemy();\n```\n\n----------------------------------------\n\nTITLE: Searching Contract Metadata in TypeScript\nDESCRIPTION: This method searches for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts. It takes a query string as a parameter and returns a Promise that resolves to a SearchContractMetadataResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nsearchContractMetadata(query: string): Promise<SearchContractMetadataResponse>\n```\n\n----------------------------------------\n\nTITLE: Summarizing NFT Attributes in TypeScript\nDESCRIPTION: This method retrieves a summary of attribute prevalence for an NFT collection. It takes the contract address as a parameter and returns a Promise that resolves to an NftAttributesResponse object.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nsummarizeNftAttributes(contractAddress: string): Promise<NftAttributesResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining AddressWebhookParams Interface in TypeScript\nDESCRIPTION: Interface definition that specifies the parameters required for creating an address activity webhook. It includes an array of addresses to monitor and an optional network parameter to specify which blockchain network to use.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/AddressWebhookParams.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AddressWebhookParams {\n  addresses: string[];\n  network?: Network;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NftAttributesResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the NftAttributesResponse interface with three properties: contractAddress, summary, and totalSupply. It provides type information and descriptions for each property.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/interfaces/NftAttributesResponse.md#2025-04-19_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NftAttributesResponse {\n  contractAddress: string;\n  summary: Record<string, Record<string, number>>;\n  totalSupply: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Spam Contracts in TypeScript\nDESCRIPTION: This method is used to report a contract as spam to Alchemy. It takes the contract address as a parameter and returns a Promise that resolves to void.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/NftNamespace.md#2025-04-19_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nreportSpam(contractAddress: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating ContractFactory from Solidity in TypeScript\nDESCRIPTION: Static method that creates a ContractFactory from a Solidity compiler output, with an optional signer for deployment.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/ContractFactory.md#2025-04-19_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic fromSolidity(compilerOutput, signer?): ContractFactory\n```\n\n----------------------------------------\n\nTITLE: Initializing Alchemy SDK Client in TypeScript\nDESCRIPTION: Constructor for the Alchemy class. It takes an optional AlchemySettings parameter to configure the SDK instance.\nSOURCE: https://github.com/alchemyplatform/alchemy-sdk-js/blob/master/docs-md/classes/Alchemy.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **new Alchemy**(`settings?`)\n```"
  }
]