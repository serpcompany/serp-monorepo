[
  {
    "owner": "hasura",
    "repo": "graphql-engine",
    "content": "TITLE: Creating and Seeding Database Tables with SQL in Hasura\nDESCRIPTION: SQL script to create a todos table with a foreign key relationship to users, add a country column to the users table, and insert sample data into both tables. This establishes the basic data model for a to-do application.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE todos (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255),\n    description TEXT,\n    is_completed BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP DEFAULT NOW(),\n    updated_at TIMESTAMP DEFAULT NOW(),\n    user_id INTEGER REFERENCES \"users\" (id)\n);\n\nALTER TABLE \"users\" ADD COLUMN country VARCHAR(255);\n\nINSERT INTO \"users\" (name, email, password, country) VALUES\n    ('John', 'john@example.com', 'password123', 'US'),\n    ('Jane', 'jane@example.com', 'password456', 'GB');\n\nINSERT INTO todos (title, description, user_id) VALUES\n    ('Buy groceries', 'Milk, eggs, bread', 1),\n    ('Clean apartment', 'Vacuum, dust, do laundry', 1),\n    ('Finish project', 'Complete tasks A, B, and C', 2),\n    ('Schedule meeting', 'With client X', 2);\n```\n\n----------------------------------------\n\nTITLE: Basic Query/Subscription Syntax in Hasura GraphQL\nDESCRIPTION: The basic syntax structure for GraphQL queries and subscriptions in Hasura. Includes the operation name, object to query, and optional arguments such as filters and ordering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquery|subscription [<op-name>] {\n  object [([argument])]{\n    object-fields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Table in Hasura GraphQL\nDESCRIPTION: API request to track a table/view named 'author' in the public schema. This makes the table available for GraphQL operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"track_table\",\n    \"args\": {\n        \"schema\": \"public\",\n        \"name\": \"author\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables in Hasura CLI\nDESCRIPTION: YAML configuration to track tables and expose them over the GraphQL API in Hasura CLI. This snippet shows how to add table entries to the tables.yaml file in the metadata directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: <table name>\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Rating or Date Using _or Operator in GraphQL\nDESCRIPTION: This GraphQL query demonstrates the use of the _or operator to filter articles based on multiple criteria. It fetches articles that are either rated more than 4 or published after January 1, 2018.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/boolean-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    where: {\n      _or: [\n        {rating: {_gte: 4}},\n        {published_on: {_gte: \"2018-01-01\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Objects using GraphQL Postgres Mutation\nDESCRIPTION: This GraphQL schema is auto-generated for performing insert mutations on a Postgres table named 'article'. The mutation allows inserting one or multiple article objects while offering options to handle conflicts using upserts. The response includes affected rows and the inserted data with possibilities for nested data retrieval. This is applicable from version v1.2.0 onwards, and it requires certain permissions on the Postgres table to access specific functionalities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninsert_article (\n  objects: [article_insert_input!]!\n  on_conflict: article_on_conflict\n): article_mutation_response\n\n# response of any mutation on the table \"article\"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object insert (supported from v1.2.0)\ninsert_article_one (\n  object: article_insert_input!\n  on_conflict: article_on_conflict\n): article\n```\n\n----------------------------------------\n\nTITLE: Hasura Gateway Help Command Output\nDESCRIPTION: Shows the complete help output for the Hasura Gateway CLI, listing all available commands, usage patterns, and global options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   gateway - Manage your gateway Hasura instance\n\nUSAGE:\n   gateway [global options] command [command options] [arguments...]\n\nCOMMANDS:\n   build    Append the given remote schema configuration in the gateway metadata and print it to stdout\n   check    Check if the configuration of current Hasura project is compatible as remote schema in your gateway Hasura instance\n   publish  Add the configuration of current Hasura project as remote schema in your gateway Hasura instance\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --gateway-url value                 The URL of your gateway Hasura instance\n   --gateway-headers value             The headers required to access your gateway Hasura instance\n   --gateway-configuration-file value  Path to the configuration of your current Hasura instance i.e. the remote-schema configuration that must go into the metadata of the gateway Hasura\n   --admin-secret value                The admin secret of Gateway Hasura instance\n   --help, -h                          show help\n\nUse \"gateway [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Defining Select Permissions with YAML for Hasura\nDESCRIPTION: This YAML snippet sets row level permissions for a 'select' operation on a products table. It restricts access to rows where the price is less than 1000 for the role 'user'. This is useful for roles that should only access low-priced products.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"- table:\\n    schema: public\\n    name: products\\n  select_permissions:\\n    - role: user\\n      permission:\\n        columns: []\\n        filter:\\n          price:\\n          _lt: 1000\"\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission with Hasura Schema/Metadata API\nDESCRIPTION: This snippet demonstrates how to create an insert permission for the 'user' role on the 'article' table. It enforces the constraint that users can only insert articles for themselves by checking that the author_id matches the user's ID, limiting column access, and automatically setting values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"set\":{\n                \"id\":\"X-HASURA-USER-ID\"\n            },\n            \"columns\":[\"name\",\"author_id\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TRUE Expression Query in GraphQL\nDESCRIPTION: Query example using the empty object operator to filter authors who have articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(where: { articles: {} }) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native Query in GraphQL\nDESCRIPTION: Example of how to use a created native query in a GraphQL request. It shows the structure for specifying arguments, filters, sorting, and pagination options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  <root field name>(\n    [args: {\"<argument name>\": <argument value>, ...},]\n    [where: ...,]\n    [order_by: ..., distinct_on: ...,]\n    [limit: ..., offset: ...]\n  ) {\n    <field 1>\n    <field 2>\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Type Definition\nDESCRIPTION: Auto-generated GraphQL type definition for the articles table showing field structure and types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/tables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# Object type\ntype Articles {\n  id: Int\n  title: String\n  content: String\n  rating: Int\n  author_id: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom numeric scalar type for precise decimal values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    numeric_col: 0.00000008\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nested Inserts with Relationships\nDESCRIPTION: Demonstrating advanced object insertion, this GraphQL mutation shows inserting 'author' objects alongside their related 'address' and 'articles' objects in a nested manner. The example covers one-to-one and one-to-many relationships, highlighting how related objects are inserted with relationship awareness. The process ensures dependencies are respected without manual linkage in the request data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertData {\n  insert_authors\n    (objects: [\n      {\n        name: \"John\",\n        address: {\n          data: {\n            location: \"San Francisco\"\n          }\n        },\n        articles: {\n          data: [\n            {\n              title: \"GraphQL Guide\",\n              content: \"Let's see what we can do with GraphQL\"\n            },\n            {\n              title: \"Authentication Guide\",\n              content: \"Let's look at best practices for authentication\"\n            }\n          ]\n        }\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      address_id\n      address {\n        id\n        location\n      }\n      articles {\n        id\n        title\n        author_id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generated GraphQL Query Schema for Postgres Table\nDESCRIPTION: This snippet shows the auto-generated GraphQL schema for querying a Postgres table named 'author'. It includes fields for selecting multiple rows with filtering and sorting options, as well as selecting a single row by primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nauthor (\n  distinct_on: [author_select_column]\n  where: author_bool_exp\n  limit: Int\n  offset: Int\n  order_by:  [author_order_by!]\n): [author]\n\n# single object select\nauthor_by_pk (\n  # all primary key columns args\n  id: Int!\n): author\n```\n\n----------------------------------------\n\nTITLE: Sample SQL Query With Permission Restrictions\nDESCRIPTION: Illustrates a SELECT SQL query applied within the constraints of Hasura's permission rules, simulating row and column level access control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name, org_id FROM users WHERE name LIKE '%john%' AND org_id = '1234';\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata via CLI\nDESCRIPTION: A bash command to apply the Hasura metadata. This command will apply the changes made to the `tables.yaml` file, which tracks the `authors` and `articles` tables and exposes them over the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Basic Query Caching in GraphQL\nDESCRIPTION: Demonstrates how to add caching to a GraphQL query using the @cached directive to retrieve product information\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyProducts @cached {\n  products {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in Hasura GraphQL Query\nDESCRIPTION: This example demonstrates how to create and use a fragment in a GraphQL query to reuse a set of fields across multiple query parts, reducing repetition and improving maintainability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment articleFields on articles {\n  id\n  title\n}\nquery getArticles {\n  articles {\n    ...articleFields\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    ...articleFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Database to Neon Using pg_dump\nDESCRIPTION: This command demonstrates how to migrate an existing Postgres database to Neon using the pg_dump utility. It exports data from the source database and pipes it directly into the Neon database via its connection string.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/neon.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h <host> -U <username> <dbname> | psql <neon-connection-string>\n```\n\n----------------------------------------\n\nTITLE: Implementing Location Search Function in PostgreSQL\nDESCRIPTION: PL/SQL function that searches for landmarks near a user within a specified distance using PostGIS ST_Distance\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION search_landmarks_near_user(userid integer, distance_kms integer)\nRETURNS SETOF user_landmarks AS $$\n    SELECT  A.user_id, A.location,\n    (SELECT json_agg(row_to_json(B)) FROM landmark B\n     WHERE (\n       ST_Distance(\n         ST_Transform(B.location::Geometry, 3857),\n         ST_Transform(A.location::Geometry, 3857)\n       ) /1000) < distance_kms\n     ) AS nearby_landmarks\n    FROM user_location A where A.user_id = userid\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authorization Check for Row-Level Security\nDESCRIPTION: A JSON expression for row-level security that restricts users to only view their own data by comparing the user ID to the X-Hasura-User-Id session variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": { \"_eq\": \"X-Hasura-User-Id\" } }\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Search Function in SQL\nDESCRIPTION: Defines a custom SQL function to search articles by title or content using a text input parameter. The function uses ILIKE for case-insensitive partial matching and returns a set of matching article records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION search_articles(search text)\nRETURNS SETOF article AS $$\n    SELECT *\n    FROM article\n    WHERE\n      title ilike ('%' || search || '%')\n      OR content ilike ('%' || search || '%')\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fragments in GraphQL Queries\nDESCRIPTION: This example demonstrates how to create and use fragments in GraphQL queries. It defines a fragment for common article fields and then uses it in multiple parts of the query to reduce repetition and improve readability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment articleFields on articles {\n  id\n  title\n}\nquery getArticles {\n  articles {\n    ...articleFields\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    ...articleFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting and Starting Hasura with Migrations and Metadata\nDESCRIPTION: This example illustrates how to use the Hasura cli-migrations Docker image to run the Hasura GraphQL Engine after applying migrations and metadata. It demonstrates the use of Docker volume mounts to specify the location of migrations and metadata directories, plus setting the necessary environment variables required for the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/auto-apply-migrations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 \\\n       -v /home/me/my-project/migrations:/hasura-migrations \\\n       -v /home/me/my-project/metadata:/hasura-metadata \\\n       -e HASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://postgres:@postgres:5432/postgres \\\n       hasura/graphql-engine:<version>.cli-migrations-v3\n```\n\n----------------------------------------\n\nTITLE: Querying Profiles with GraphQL\nDESCRIPTION: A simple GraphQL query to fetch all profiles from the database, retrieving both the ID and name fields. This demonstrates basic GraphQL query functionality after setting up a Hasura project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/getting-started-cloud.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  profiles {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Column Types\nDESCRIPTION: This snippet presents the numeric, character, date/time, boolean, and JSON types used in PostgreSQL, along with their aliases and descriptions. These types are essential for defining the structure of tables in a PostgreSQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n| Type               | Alias     | Description                          |\n| ------------------ | --------- | ------------------------------------ |\n| `serial`           |           | autoincrementing integer             |\n| `bigserial`        |           | autoincrementing bigint              |\n| `integer`          |           | 4 bytes, typical choice for integer  |\n| `smallint`         |           | 2 bytes                              |\n| `bigint`           |           | 8 bytes                              |\n| `real`             | `float4`  | 6 decimal digits precision, inexact  |\n| `double precision` | `float8`  | 15 decimal digits precision, inexact |\n| `numeric`          | `decimal` | arbitrary precision, exact           |\n\n| Type      | Alias  | Description                             |\n| --------- | ------ | --------------------------------------- |\n| `varchar` | `text` | typical choice for storing string types |\n\n| Type                       | Alias         | Description                                                                                                                                                            |\n| -------------------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `timestamp with time zone` | `timestamptz` | both date and time, with time zone. Allowed values should be of ISO8601 format. E.g. 2016-07-20T17:30:15Z, 2016-07-20T17:30:15+05:30, 2016-07-20T17:30:15.234890+05:30 |\n| `time with time zone`      | `timetz`      | time of day only, with time zone. Allowed values should be of ISO8601 format. E.g. 17:30:15Z, 17:30:15+05:30, 17:30:15.234890+05:30                                    |\n| `date`                     |               | date (no time of day). Allowed values are yyyy-mm-dd                                                                                                                   |\n\n| Type      | Alias | Description            |\n| --------- | ----- | ---------------------- |\n| `boolean` |       | state of true or false |\n\n| Type    | Alias | Description                                  |\n| ------- | ----- | -------------------------------------------- |\n| `json`  |       | Stored as plain text                         |\n| `jsonb` |       | Stored in a binary format and can be indexed |\n```\n\n----------------------------------------\n\nTITLE: Configuring ES256 JWT Authentication with PEM Public Key in Hasura\nDESCRIPTION: This snippet demonstrates how to configure JWT authentication using an ES256 algorithm with a public key in PEM format. It's used to verify JWTs signed with ECDSA using a 256-bit key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ES256\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9\\nq9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==\\n-----END PUBLIC KEY-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Remote Table\nDESCRIPTION: Creates an object relationship named 'details' on the author table using a foreign key constraint on the author_details table's author_id column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_object_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"details\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\": \"author_details\",\n                \"columns\": [\"author_id\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Element at Specific Path in JSONB Column in Hasura GraphQL\nDESCRIPTION: This mutation deletes an element at a specific JSON path in a JSONB column. It uses the _delete_at_path operator to remove the \"first\" key from the \"name\" object in the extra_info column of the author table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_15\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation update_extra_info {\n  update_author(\n    where: {id: {_eq: 1}},\n    _delete_at_path: {extra_info: [\"name\", \"first\"]}  # initial value \"{\"name\": {\"first\": \"first_name\", \"last\": \"last_name\"}}\"\n  ) {\n    affected_rows\n    returning {\n      id\n      extra_info\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Secret for Hasura GraphQL Engine\nDESCRIPTION: YAML configuration to set an admin secret key for securing the GraphQL endpoint and Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v2.0.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Transform for Hasura Actions using YAML\nDESCRIPTION: This YAML snippet outlines the configuration for response transformation for the 'create_user' action in Hasura. It specifies the template to transform the response body appropriately.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  response_transform:\n    template_engine: Kriti\n    version: 2\n    body: '{\"action\": \"transform\", \"template\": \"{\\n  \\\"test\\\":{{$body.input.arg1.id}}\\n}\"}'\n```\n\n----------------------------------------\n\nTITLE: Executing hasura metadata reload command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'hasura metadata reload' command. It is used to reload Hasura GraphQL Engine schema when there are changes in the underlying data sources that Hasura should be aware of.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_reload.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata reload [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating an enum table for user roles in Postgres\nDESCRIPTION: This SQL snippet creates the `user_role` table, which serves as an enum for user roles. It has a `value` column as the primary key and a `comment` column for descriptions. The script also includes inserting values to the table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE user_role (\\n  value text PRIMARY KEY,\\n  comment text\\n);\\n\\nINSERT INTO user_role (value, comment) VALUES\\n  ('user', 'Ordinary users'),\\n  ('moderator', 'Users with the privilege to ban users'),\\n  ('administrator', 'Users with the privilege to set users’ roles');\"\n```\n\n----------------------------------------\n\nTITLE: Creating a profiles table in Postgres through Hasura\nDESCRIPTION: SQL definition for creating a simple 'profiles' table with an auto-incrementing primary key and a text field for names. This table will be used to demonstrate Hasura's GraphQL capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/docker-simple.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nprofiles (\n  id SERIAL PRIMARY KEY, -- serial -> auto-incrementing integer\n  name TEXT\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Float Parser in Haskell\nDESCRIPTION: Parser implementation for float values that handles both GraphQL and JSON input formats, with type checking and conversion logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\nfloat :: MonadParse m => Parser 'Both m Double\nfloat = Parser\n  { pType = schemaType\n  , pParser =\n      -- we first unpack the variable, if any:\n      peelVariable (toGraphQLType schemaType) >=> \\case\n        -- we deal with valid GraphQL values\n        GraphQLValue (VFloat f)   -> convertWith scientificToFloat f\n        GraphQLValue (VInt   i)   -> convertWith scientificToFloat $ fromInteger i\n        -- we deal with valid JSON values\n        JSONValue    (A.Number n) -> convertWith scientificToFloat n\n        -- we reject everything else\n        v                         -> typeMismatch floatScalar \"a float\" v\n  }\n  where\n    schemaType = NonNullable $ TNamed $ Definition \"Float\" Nothing TIScalar\n```\n\n----------------------------------------\n\nTITLE: Inserting Author with Null Age Field using GraphQL\nDESCRIPTION: This mutation inserts an author with a null age field by omitting the field. It shows how to handle nullable fields in GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: \"Jeff\"\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema using Apollo CLI in Bash\nDESCRIPTION: This snippet details how to export the GraphQL schema using the Apollo CLI, showing the command to use both with and without an admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/export-graphql-schema.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# If the GraphQL Engine is running at https://my-graphql-engine.com/v1/graphql,\n# without an admin secret\napollo schema:download --endpoint https://my-graphql-engine.com/v1/graphql\n\n# If Hasura GraphQL Engine is running with an admin secret\napollo schema:download --endpoint https://my-graphql-engine.com/v1/graphql --header 'X-Hasura-Admin-Secret: adminsecretkey'\n```\n\n----------------------------------------\n\nTITLE: Using Implicit Types in GraphQL Query\nDESCRIPTION: Examples of using implicitly supported PostgreSQL types as strings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    time_col: \"04:05:06.789\"\n  }\n]\n```\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    macaddr_col: \"08:00:2b:01:02:03\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering by Aggregation Results in GraphQL\nDESCRIPTION: GraphQL query demonstrating how to filter a collection (Invoice) based on the results of aggregations applied to array relationships and nested arrays.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice(\n    where: {\n      _and: [\n        {\n          # Filter by invoices that have at least one invoice line that is priced in the AUD currency ...\n          InvoiceLines_aggregate: {\n            filter_input: { where: { UnitPrice: { Currency: { _eq: \"AUD\" } } } } # Filters the collection before aggregating (optional)\n            predicate: { _count: { _gt: 0 } } # The predicate over the results of aggregations\n          }\n        }\n        {\n          # ... and that the average quantity of across invoice lines is greater than 5\n          InvoiceLines_aggregate: {\n            predicate: { Quantity: { _avg: { _gt: 5 } } }\n          }\n        }\n      ]\n    }\n  ) {\n    InvoiceId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Article Rating in GraphQL\nDESCRIPTION: This GraphQL query fetches authors who have written at least one article with a rating of 1. It demonstrates filtering on an array relationship where any of the nested objects (articles) satisfy the condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      articles: {rating: {_eq: 1}}\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations Using Hasura CLI\nDESCRIPTION: This snippet demonstrates how to apply migrations using the Hasura CLI. It requires the `hasura` command line tool and a set of migrations created manually. The `hasura migrate apply` command applies the migrations specified in the `up.sql` file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with GraphQL Mutation in Hasura\nDESCRIPTION: Demonstrates how to insert data into a table using a GraphQL mutation. The example inserts an article with a title, content, and author ID, and returns the inserted article's ID and title.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_article {\n  insert_article(objects: [{ title: \"Software is gluttonous\", content: \"Something happened in HP\", author_id: 3 }]) {\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationships in SQL\nDESCRIPTION: This SQL snippet defines a one-to-many relationship between 'authors' and 'articles' tables using primary and foreign key constraints. The 'author_id' column in the 'articles' table references the 'id' column in the 'authors' table. This ensures data integrity between the two tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-many.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nauthors (\n  id SERIAL PRIMARY KEY,\n  name TEXT\n)\n\narticles (\n  id SERIAL PRIMARY KEY,\n  author_id INT\n  title TEXT\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with GraphQL Mutation in Hasura\nDESCRIPTION: This mutation inserts a new review into the 'reviews' table with rating, text, user_id, and product_id parameters. It returns the id and text of the newly created review.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertReview($rating: Int!, $text: String!, $user_id: uuid!, $product_id: uuid!) {\n  insert_reviews_one(object: {rating: $rating, text: $text, user_id: $user_id, product_id: $product_id}) {\n    id\n    text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Upsert Mutation Example\nDESCRIPTION: Sample GraphQL mutation showing how to perform an upsert operation on an author table with matching and update conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-upsert-mutations.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  insert_author(\n    objects: { id: 1, name: \"aaa\" }\n    if_matched: { match_columns: author_pkey, update_columns: name }\n  ) {\n    returning {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Function for Author Validation\nDESCRIPTION: This snippet defines a Postgres function that checks if an author is active before allowing article operations. It throws an exception if the author is not active, preventing the operation from completing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION check_author_active()\n    RETURNS trigger AS $BODY$\n    DECLARE active_author BOOLEAN;\n    BEGIN\n    SELECT author.is_active INTO active_author FROM \"authors\" author WHERE author.id = NEW.\"author_id\";\n    IF active_author != TRUE THEN\n        RAISE EXCEPTION 'Author must be active';\n    END IF;\n    RETURN NEW;\n    END;\n    $BODY$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Objects Using Object Relationships in BigQuery with GraphQL\nDESCRIPTION: This query demonstrates how to fetch a list of articles along with each article's author using an object relationship. It retrieves the id and title of articles, plus the name of the author associated with each article.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/nested-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Trigger with Hasura Metadata API\nDESCRIPTION: Creates or replaces an Event Trigger that captures database changes and sends them to a webhook. Supports configuration of operations (insert/update/delete), custom headers, cleanup settings and retry logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"table\": {\n           \"name\": \"users\",\n           \"schema\": \"public\"\n        },\n        \"source\": \"default\",\n        \"webhook\": \"https://httpbin.org/post\",\n        \"insert\": {\n            \"columns\": \"*\",\n            \"payload\": [\"username\"]\n        },\n        \"update\": {\n            \"columns\": [\"username\", \"real_name\"],\n            \"payload\": \"*\"\n        },\n        \"delete\": {\n            \"columns\": \"*\"\n        },\n        \"headers\":[\n          {\n              \"name\": \"X-Hasura-From-Val\",\n              \"value\": \"myvalue\"\n          },\n          {\n              \"name\": \"X-Hasura-From-Env\",\n              \"value_from_env\": \"EVENT_WEBHOOK_HEADER\"\n          }\n        ],\n        \"cleanup_config\": {\n            \"schedule\": \"0 0 * * *\",\n            \"batch_size\": 10000,\n            \"clear_older_than\": 168,\n            \"timeout\": 60,\n            \"clean_invocation_logs\": false,\n            \"paused\": false\n        },\n        \"replace\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Hasura Deploy Command\nDESCRIPTION: Examples demonstrating how to use the 'hasura deploy' command in different scenarios, including basic usage, applying seeds, using with admin secret, and specifying an endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_deploy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply metadata and migrations on Hasura GraphQL Engine\nhasura deploy\n\n# Apply metadata, migrations and seeds on Hasura GraphQL Engine\nhasura deploy --with-seeds\n\n# Use with admin secret:\nhasura deploy --admin-secret \"<admin-secret>\"\n\n# Use with endpoint:\nhasura deploy --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Update Article by Primary Key\nDESCRIPTION: This snippet illustrates how to update an article by its primary key and what the response looks like upon success or failure. It demonstrates the mutation structure and provides an example of the query for updating an article's published status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_an_article {\n  update_article_by_pk (\n    pk_columns: {id: 1}\n    _set: { is_published: true }\n  ) {\n    id\n    is_published\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_an_article {\n  update_article_by_pk (\n    pk_columns: {id: 100}\n    _set: { is_published: true }\n  ) {\n    id\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive User Search with _ilike in GraphQL\nDESCRIPTION: This query returns all users whose name contains 'john', regardless of case, using the _ilike operator for case-insensitive searching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { name: { _ilike: \"%john%\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Record by Primary Key with GraphQL Mutation in Hasura\nDESCRIPTION: Shows how to update a specific record using its primary key. The example updates the 'is_published' field of an article and returns the updated article's ID and title.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_articles {\n  update_article_by_pk(pk_columns: { id: 1 }, _set: { is_published: true }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migration with Hasura CLI\nDESCRIPTION: This bash command uses the Hasura CLI to apply migrations, specifically useful after adding or removing SQL constraints. Requires Hasura CLI installed and configured.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregated Data of Articles in GraphQL\nDESCRIPTION: This query fetches a list of articles with aggregated data of their ratings, including count, sum, average, and maximum rating. It also retrieves individual article details like id, title, and rating.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/aggregation-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles_aggregate {\n    aggregate {\n      count\n      sum {\n        rating\n      }\n      avg {\n        rating\n      }\n      max {\n        rating\n      }\n    }\n    nodes {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RESTified GraphQL Endpoint using Schema/Metadata API\nDESCRIPTION: This snippet demonstrates how to create a RESTified GraphQL endpoint using the `create_rest_endpoint` mutation in the Schema/Metadata API. The request defines the endpoint's name, URL, supported HTTP methods, associated GraphQL query, and an optional comment. The endpoint associates a URL template with a query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/restified-endpoints.mdx#2025-04-17_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_rest_endpoint\",\n    \"args\": {\n        \"name\": \"example-name\",\n        \"url\": \"example\",\n        \"methods\": [\"POST\",\"PUT\",\"PATCH\"],\n        \"definition\": {\n            \"query\": {\n              \"query_name\": \"example_mutation\",\n              \"collection_name\": \"test_collection\"\n            }\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Object Argument Specification in GraphQL\nDESCRIPTION: Specifies the structure for a single object argument in mutations, detailing fields and their types, including the treatment of relationships for inserts and updates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nobject: {\n  field1: value,\n  field2: value,\n  <object-rel-name>: {\n    data: <Input-Object>!,\n    on_conflict: <Conflict-Clause>\n  },\n  <array-rel-name>: {\n    data: [<Input-Object>!]!,\n    on_conflict: <Conflict-Clause>\n  }\n  ..\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Role with YAML Permissions\nDESCRIPTION: Define a new user role with select permissions for a products table, limiting access to products under 1000 price\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: products\n  select_permissions:\n    - role: user\n      permission:\n        columns: []\n        filter:\n          price:\n          _lt: 1000\n```\n\n----------------------------------------\n\nTITLE: Creating a Hasura Cloud Project using GraphQL\nDESCRIPTION: This mutation creates a new Hasura Cloud project with specified cloud provider, region, and environment variables. It returns the project ID and name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createProject {\n  createTenant(\n    cloud: \"aws\"\n    region: \"us-east-2\"\n    envs: [{ key: \"HASURA_GRAPHQL_CORS_DOMAIN\", value: \"*\" }, { key: \"MY_ENV_VAR_1\", value: \"my value 1\" }]\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Kubernetes Manifest Files\nDESCRIPTION: Commands to download the required Kubernetes deployment and service manifest files from the Hasura GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/kubernetes/deployment.yaml\n$ wget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/kubernetes/svc.yaml\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors by Name Ascending - GraphQL\nDESCRIPTION: Fetches a list of authors sorted by their names in ascending order using the GraphQL `order_by` argument. This code snippet demonstrates the request structure and expected response format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  authors (\n    order_by: {name: asc}\n  ) {\n    id\n    name\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 5,\n        \"name\": \"Amii\"\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Anjela\"\n      },\n      {\n        \"id\": 8,\n        \"name\": \"April\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\"\n      },\n      {\n        \"id\": 7,\n        \"name\": \"Berti\"\n      },\n      {\n        \"id\": 6,\n        \"name\": \"Corny\"\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Casting Geometry to Geography for Distance Filtering in GraphQL\nDESCRIPTION: This GraphQL query shows how to cast a geometry field to geography type for accurate distance-based filtering of cities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery cities_near($point: geography!, $distance: Float!) {\n  cities(\n    where: {location: {\n      _cast: {geography: {\n        _st_d_within: {from: $point, distance: $distance}\n      }}\n    }}\n  ) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Docker Compose file with curl for Hasura GraphQL Engine\nDESCRIPTION: Command to download the Docker Compose configuration file using curl, which defines the setup for Hasura GraphQL Engine and Postgres database containers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/docker-simple.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Access Control\nDESCRIPTION: Permission configuration for logged-in users to access only their own data using user ID matching\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\ncarts(where: {user_id: {_eq: \"X-Hasura-User-Id\"}}) {\n  id\n  items\n}\n```\n\n----------------------------------------\n\nTITLE: Set Custom Types API Request\nDESCRIPTION: HTTP request to define custom types for the action via Hasura metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [],\n    \"objects\": [\n      {\n        \"name\": \"LoginResponse\",\n        \"fields\": [\n          {\n            \"name\": \"accessToken\",\n            \"type\": \"String!\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with MongoDB in Docker Compose\nDESCRIPTION: Command to create and run the Hasura containers in detached mode using Docker Compose. This starts the Hasura GraphQL Engine, Postgres, MongoDB, and MongoDB connector.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Querying Products with Country Information in GraphQL\nDESCRIPTION: A GraphQL query that fetches products from the local database and includes country information from the remote schema. It demonstrates the relationship between the products table and the remote countries API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products {\n\t\tid\n\t\tname\n    countryInfo {\n      emoji\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Trigger with HTTP POST in Hasura Schema/Metadata API\nDESCRIPTION: This snippet demonstrates creating a new event trigger named 'sample_trigger' that monitors the 'users' table for insert, update, and delete operations and sends notifications to a webhook. It includes configuration for columns to monitor, payload content, custom headers, and other trigger settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/event-triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"table\": {\n           \"name\": \"users\",\n           \"schema\": \"public\"\n        },\n        \"webhook\": \"https://httpbin.org/post\",\n        \"insert\": {\n            \"columns\": \"*\",\n            \"payload\": [\"username\"]\n        },\n        \"update\": {\n            \"columns\": [\"username\", \"real_name\"],\n            \"payload\": \"*\"\n        },\n        \"delete\": {\n            \"columns\": \"*\"\n        },\n        \"headers\":[\n          {\n              \"name\": \"X-Hasura-From-Val\",\n              \"value\": \"myvalue\"\n          },\n          {\n              \"name\": \"X-Hasura-From-Env\",\n              \"value_from_env\": \"EVENT_WEBHOOK_HEADER\"\n          }\n        ],\n        \"replace\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Only Permissions via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to create an insert permission with the `backend_only` flag set to `true` using the Hasura Metadata API.  The request body defines the table, role, and permission settings, including specifying that the insert mutation should only be accessible when the `x-hasura-use-backend-only-permissions` header is present and set to true. This configuration ensures that only authorized backend services can perform insert operations on the `users` table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/backend-only.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n  \"type\": \"pg_create_insert_permission\",\n  \"args\": {\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"role\": \"user\",\n    \"permission\": {\n      \"check\": {},\n      \"columns\": [\n        \"id\"\n      ],\n      \"set\": {},\n      \"backend_only\": true\n    },\n    \"source\": \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users and Their To-Do Items with GraphQL\nDESCRIPTION: GraphQL query that retrieves all users with their associated to-do items, demonstrating the relationship between tables and how to access nested data in a single query. This showcases Hasura's automatically generated GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllUsersAndTodos {\n  users {\n    id\n    name\n    todos {\n      id\n      title\n      is_completed\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with Admin Secret\nDESCRIPTION: This snippet demonstrates how to run the Hasura GraphQL Engine Docker container with an admin secret and an optional authentication webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -P -d hasura/graphql-engine:latest graphql-engine \\\n           --database-url postgres://username:password@host:5432/dbname \\\n             serve \\\n             --admin-secret XXXXXXXXXXXXXXXX\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -P -d hasura/graphql-engine:latest graphql-engine \\\n           --database-url postgres://username:password@host:5432/dbname \\\n             serve \\\n             --admin-secret XXXXXXXXXXXXXXXX\n             --auth-hook https://myauth.mywebsite.com/user/session-info\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with Highly Rated Articles in GraphQL\nDESCRIPTION: This GraphQL query shows how to filter authors who have articles with a rating greater than 4, and also filter the returned articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Project with Hasura CLI - Bash\nDESCRIPTION: This snippet demonstrates how to create a new Hasura project locally with the specified name. The command initializes the project structure necessary for managing Hasura metadata and migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura init cli-demo\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Object Types in GraphQL SDL\nDESCRIPTION: Shows how to create nested object types in Hasura GraphQL Engine (v2.2.0+). The example defines a UserInfo type that includes a nested UserObj type, demonstrating the ability to create more complex data structures.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype UserInfo {\n  accessToken: String!\n  userId: Int!\n  user: UserObj!\n}\n\ntype UserObj {\n  name: String!\n  favFood: String!\n  isAdmin: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding GraphQL Schema with JSX\nDESCRIPTION: This section of the JSX is used to create a gallery of quick guides and cards, providing links to various resources such as importing data from CSVs, using custom SQL functions, and extending schemas with Postgres views. Each card inside the gallery uses the VersionedLink component to provide navigable links within the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"overview-gallery\">\n  <VersionedLink to=\"/schema/postgres/postgres-guides/import-data-from-csv/\">\n    <div className=\"card\">\n      <h3>Import data from a CSV</h3>\n      <p>\n        Learn how to quickly and easily import data from a CSV file into a table in your Postgres database using psql.\n      </p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/schema/postgres/custom-functions/\">\n    <div className=\"card\">\n      <h3>Extend your GraphQL schema with SQL functions</h3>\n      <p>\n        Learn how to extend your GraphQL schema with SQL functions. This is useful when you want to add custom business\n        logic to your GraphQL API.\n      </p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/schema/postgres/views/\">\n    <div className=\"card\">\n      <h3>Extend your GraphQL schema with Postgres views</h3>\n      <p>\n        Learn how to extend your GraphQL schema with Postgres views. This is allows you to view the results of a custom\n        query as a virtual table.\n      </p>\n    </div>\n  </VersionedLink>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fetching Author by Primary Key using GraphQL Query in Hasura\nDESCRIPTION: This GraphQL query retrieves a single author using their primary key (id). It shows how to fetch a specific object using its unique identifier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/simple-object-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors_by_pk(id: 1) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Objects Using Object Relationship in GraphQL\nDESCRIPTION: This query demonstrates how to fetch a list of articles and the name of each article's author using an object relationship between articles and authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/nested-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectFilterExpressionType in OpenDD YAML\nDESCRIPTION: A new YAML definition for the ObjectFilterExpressionType kind that allows specifying filterable fields and operators. This type creates reusable filter expressions that can be referenced across models and commands.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-boolean-expression-types.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectFilterExpressionType\nversion: v1\ndefinition:\n  name: AuthorFilterExpression\n  objectType: Author\n  dataConnectorName: my_db\n  dataConnectorObjectType: author\n  filterableFields:\n    - fieldName: id\n      comparisonExpression:\n        operators:\n            enableAll: true\n    - fieldName: name\n      comparisonExpression:\n        operators:\n          enableSpecific: [\"_eq\", \"_like\"]\n    graphql:\n      typeName: Author_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Fetching List of Authors using GraphQL Query in Hasura\nDESCRIPTION: This GraphQL query fetches a list of authors, returning their id and name. It demonstrates how to retrieve multiple objects of the same type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/simple-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Name in Postgres\nDESCRIPTION: Example of a SQL query that retrieves author information by name, demonstrating a common use case where an index would be beneficial for performance optimization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/indexes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM authors WHERE name = 'J.K. Rowling';\n```\n\n----------------------------------------\n\nTITLE: Simple Object Syntax Definition in Hasura GraphQL\nDESCRIPTION: Syntax definition for a simple object in Hasura GraphQL. Shows how to structure objects with fields, nested objects, JSON fields with paths, and aggregate nested objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nobject-name {\n  field1\n  field2\n  json_field[(path: String)]\n  ..\n  nested object1\n  nested object2\n  aggregate nested object1\n  ..\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Hasura GraphQL Query\nDESCRIPTION: This example shows how to use aliases in a GraphQL query to fetch multiple sets of articles with different criteria and give them distinct names in the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles {\n  articles {\n    title\n    rating\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    title\n    rating\n  }\n  worstArticle: articles(\n    order_by: {rating: asc},\n    limit: 1\n  ) {\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Author Subscription Example with Filtering and Ordering\nDESCRIPTION: Example GraphQL subscription that retrieves and monitors author data filtered by article ratings and ordered by name. The subscription re-delivers results whenever matching data changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription AuthorSubscription {\n  author(where: { articles: { rating: { _gte: 4 } } }, order_by: { name: asc }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Article with Tags in Many-to-Many Relationship using GraphQL\nDESCRIPTION: This mutation inserts an article along with associated tags using a many-to-many relationship. It demonstrates nested inserts and handling of conflicts for existing tags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertArticle {\n  insert_articles(objects: [\n    {\n      title: \"How to make fajitas\",\n      content: \"Guide on making the best fajitas in the world\",\n      author_id: 3,\n      article_tags: {\n        data: [\n          {\n            tag: {\n              data: {\n                label: \"Recipes\"\n              },\n              on_conflict: {\n                constraint: tags_label_key,\n                update_columns: [label]\n              }\n            }\n          },\n          {\n            tag: {\n              data: {\n                label: \"Cooking\"\n              },\n              on_conflict: {\n                constraint: tags_label_key,\n                update_columns: [label]\n              }\n            }\n          }  \n        ]\n      }\n    }\n  ]) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      author_id\n      article_tags {\n        tag {\n          label\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Query and Mutation Fields\nDESCRIPTION: Auto-generated GraphQL query and mutation field definitions for the articles table including CRUD operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/tables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n# Query field\narticles (\n  where: articles_bool_exp\n  limit: Int\n  offset: Int\n  order_by: [articles_order_by!]\n): [articles!]!\n\n# insert/upsert mutation field\ninsert_articles (\n  objects: [articles_insert_input!]!\n  on_conflict: articles_on_conflict\n): articles_mutation_response\n\n# update mutation field\nupdate_articles (\n  where: articles_bool_exp!\n  _inc: articles_inc_input\n  _set: articles_set_input\n): articles_mutation_response\n\n# delete mutation field\ndelete_articles (\n  where: articles_bool_exp!\n): articles_mutation_response\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects Based on Nested Fields in GraphQL\nDESCRIPTION: Shows deletion of articles in the 'article' table by conditions on nested fields, specifically removing articles written by a specific author. The example returns the count of affected rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_authors_articles {\n  delete_article(\n    where: {author: {name: {_eq: \"Corny\"}}}\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PaginationExp in GraphQL Queries\nDESCRIPTION: This example demonstrates how to use PaginationExp to limit and offset query results in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesPagination {\n  article(limit: 6, offset: 2) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Author with JSONB Address Field using GraphQL\nDESCRIPTION: This mutation inserts a new author object with a JSONB address field. It demonstrates how to handle complex JSON data structures in GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_author($address: jsonb) {\n  insert_author (\n    objects: [\n      {\n        name: \"Ash\",\n        address: $address\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      address\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking BigQuery Table in Hasura GraphQL Engine\nDESCRIPTION: This snippet demonstrates how to use the bigquery_track_table API to add a BigQuery table or view to the GraphQL schema. It includes the dataset and table name, and allows for customization of root field names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"bigquery_track_table\",\n    \"args\": {\n      \"table\": {\n        \"dataset\": \"hasura\",\n        \"name\": \"author\",\n      },\n      \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret in JSON for Hasura\nDESCRIPTION: The snippet demonstrates setting a JWT secret in JSON format. It is essential for configuring JWT-based authentication in Hasura, where 'HS256' is the hashing algorithm, and a secure key is required.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"oursupersecretsupersecurekey1234567890\",\n  \"type\": \"HS256\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Author Validation in Action Handler\nDESCRIPTION: JavaScript implementation of the action handler that validates authors against a deny-list before insertion. The handler makes external API calls to check the deny-list and performs the Hasura insertion if validation passes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDenylistedAuthorsFromApi() {\n  // make external api call & return deny-listed authors list\n}\n\nfunction insertAuthorViaHasura() {\n  // run insert_author mutation & return response\n}\n\nconst denylistedAuthors = getDenylistedAuthorsFromApi();\n\nif (denylistedAuthors.includes(author.name)) {\n  return res.status(400).json({ message: 'Author is deny-listed' });\n} else {\n  const insertAuthorResponse = insertAuthorViaHasura();\n\n  return res.json(insertAuthorResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Structure for Hasura Schema/Metadata API\nDESCRIPTION: Demonstrates the basic HTTP POST request structure for the /v1/query endpoint. The request body requires a query type and arguments object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\n\n{\n   \"type\": \"<query-type>\",\n   \"args\": <args-object>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship Using Foreign Key Constraint\nDESCRIPTION: Establishes an array relationship on the author table by specifying a foreign key constraint on the article table's author_id column\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"articles\",\n        \"source\": \"default\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\" : \"article\",\n                \"columns\" : [\"author_id\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Query in GraphQL\nDESCRIPTION: Specifies the structure of the GraphQL query for the currency conversion Action, including input parameters and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  currencyConverter(CurrencyInfo: InputParams!): ConvertedCurrency\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Foreign Key Column\nDESCRIPTION: Creates an object relationship named 'author' on the article table using the foreign key constraint on author_id column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"author\",\n        \"source\": \"default\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : [\"author_id\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Application Schema Definition\nDESCRIPTION: SQL schema definition for a chat application with user and message tables, creating a relationship between users and their messages.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/ms-sql-server/use-cases.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuser (\n  id INT PRIMARY KEY,\n  username TEXT UNIQUE\n)\n\nmessage (\n  id INT PRIMARY KEY,\n  text TEXT,\n  timestamp TIMESTAMP,\n  /* used to create relationship 'author' for message */\n  user_id INT FOREIGN KEY REFERENCES user(id)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Upsert Mutations in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to specify the on_conflict clause while inserting nested objects. It inserts an author with a nested article, or updates the article's content if a conflict occurs on the article title.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/upsert.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsert_author_article {\n  insert_author(\n    objects: [\n      {\n        name: \"John\",\n        articles: {\n          data: [\n            {\n              title: \"Article 3\",\n              content: \"Article 3 content\"\n            }\n          ],\n          on_conflict: {\n            constraint: article_title_key,\n            update_columns: [content]\n          }\n        }\n      }\n    ]\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Product Query RESTified in GraphQL\nDESCRIPTION: The snippet provides an example of a parameterized GraphQL query used to create a RESTified endpoint by utilizing a 'manufacturerId' argument to request products from a specific manufacturer. The purpose is to filter product results based on this parameter, achieved by setting the endpoint to the path '/products/:manufacturerId'. Hasura automatically parses the 'manufacturerId' from the URL and provides it to the query. Dependencies include a proper Hasura configuration and GraphiQL access, and the snippet is intended for GET HTTP requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/restified-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllProductsQuery($manufacturerId: uuid!) {\n  products(where: { manufacturer: { _eq: $manufacturerId } }) {\n    id\n    name\n    manufacturerByManufacturer {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Article GraphQL Mutation\nDESCRIPTION: This GraphQL mutation example demonstrates how to insert a single 'article' object into the database using direct values and query variables. The mutation returns the ID and title of the inserted article upon successful execution. This operation requires the necessary select permissions on the target table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_single_article {\n  insert_article_one(\n    object: {\n      title: \"Article 1\",\n      content: \"Sample article content\",\n      author_id: 3\n    }\n  ) {\n    id\n    title\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_single_article($object: article_insert_input! ) {\n  insert_article_one(object: $object) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering, ordering, and paginating the base data before grouping in GraphQL\nDESCRIPTION: This query demonstrates how to filter, order, and paginate the base invoice data before performing grouping operations, allowing analysis of a specific subset of invoices (Australian invoices ordered by total amount, limited to 100).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    filter_input: {\n      where: { BillingAddress: { Country: { _eq: \"Australia\" } } } # Filter by BillingAddress.Country\n      order_by: { Total: Desc } # Order by highest total invoices first\n      limit: 100 # Include the first 100 only\n    }\n    grouping_keys: [{ BillingAddress: { _scalar_field: State } }] # Then, group by BillingAddress.State\n  ) {\n    group_key {\n      BillingAddress {\n        State # The value of BillingAddress.State for each group\n      }\n    }\n    group_aggregate {\n      _count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query/Subscription by Primary Key Syntax in Hasura GraphQL\nDESCRIPTION: Syntax for querying or subscribing to a single row from a table using its primary key. Specifies how to structure the query and provide primary key column values as arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nquery|subscription [<op-name>] {\n  <query-field-name> (\n    column1: value1\n    column2: value2\n  )\n  <object-fields>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema Permissions via HTTP API\nDESCRIPTION: This HTTP API request snippet shows how to add remote schema permissions for a specified role using Hasura's endpoint. The request body includes details for the role, remote schema, and the schema definition applying restrictions via a preset value sourced from a session variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_remote_schema_permissions\",\n    \"args\" : {\n        \"remote_schema\" : \"user_messages\",\n        \"role\" : \"user\",\n        \"definition\" : {\n            \"schema\" : \"type User {     user_id: Int     name: String     userMessages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]   }    interface Communication {     id: Int!     msg: String!   }    type Message implements Communication {     id: Int!     name: String!     msg: String!     errorMsg: String   }    input MessageWhereInpObj {     name: StringCompareObj   }    input IntCompareObj {     eq : Int     gt : Int     lt : Int   }    input StringCompareObj {     eq : String   }    input IncludeInpObj {     id: [Int]     name: [String]   }    type Query {     hello: String     messages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]     user(user_id: Int! @preset(value: \\\"x-hasura-user-id\\\")): User   }    schema {     query: Query  }\"\n        },\n       \"comment\":\"remote schema permissions for role: user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors by Highest Article Rating - GraphQL\nDESCRIPTION: Fetches a list of authors sorted in increasing order of their highest article rating using the aggregate function in the `order_by` argument to sort by computed fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  authors(\n    order_by: {\n      articles_aggregate: {\n        max: {rating: asc_nulls_last}\n      }\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate{\n        max {rating}\n      }\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 7,\n        \"name\": \"Berti\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": 2\n            }\n          }\n        }\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": 3\n            }\n          }\n        }\n      },\n      {\n        \"id\": 8,\n        \"name\": \"April\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": 4\n            }\n          }\n        }\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Sidney\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": 4\n            }\n          }\n        }\n      },\n      {\n        \"id\": 5,\n        \"name\": \"Amii\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": 5\n            }\n          }\n        }\n      },\n      {\n        \"id\": 9,\n        \"name\": \"Ninnetta\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"max\": {\n              \"rating\": null\n            }\n          }\n        }\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Hasura GraphQL Query\nDESCRIPTION: This example demonstrates how to use variables in a GraphQL query to fetch articles by author_id and title. It makes the query reusable by parameterizing the filter conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($author_id: Int!, $title: String!) {\n  articles(\n    where: { author_id: { _eq: $author_id }, title: { _ilike: $title } }\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Mutation to Update Selected Columns on Conflict in GraphQL\nDESCRIPTION: This GraphQL mutation inserts a new article or updates the content column of an existing article if the title already exists. It demonstrates how to use the on_conflict argument with update_columns to specify which fields to update in case of a constraint violation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/upsert.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Updated article 1 content\",\n        published_on: \"2018-10-12\"\n      }\n    ],\n    on_conflict: {\n      constraint: article_title_key,\n      update_columns: [content]\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      published_on\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query and Types for Action\nDESCRIPTION: GraphQL schema definition for an addNumbers action that takes an array of integers and returns their sum\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  addNumbers(numbers: [Int]): AddResult\n}\n\ntype AddResult {\n  sum: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Federation Query with Multiple Entity Types\nDESCRIPTION: Example query that demonstrates how to use the _entities field to fetch data from multiple entity types using the __typename and key fields in the representations argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  _entities(representations: [{\"__typename\": \"UsersData\", \"id\": \"1\"}, {\"__typename\": \"TwoPks\", \"id1\": \"1\", \"id2\": \"2\"}]) {\n    ... on TwoPks {\n      internalData\n    }\n    ... on UsersData {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Constraint in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to define a unique constraint on the `email` column of the `authors` table.  This ensures that each email address in the `authors` table is unique, preventing duplicate entries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/constraints.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE authors(\n  id SERIAL PRIMARY KEY,\n  name           TEXT    NOT NULL,\n  email          TEXT    UNIQUE\n);\"\n```\n\n----------------------------------------\n\nTITLE: Metadata Apply Usage Examples\nDESCRIPTION: Various examples showing how to use the metadata apply command with different options like admin secret, endpoint specification, and consistency checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply Hasura GraphQL Engine metadata present in metadata.[yaml|json] file:\nhasura metadata apply\n\n# Use with admin secret:\nhasura metadata apply --admin-secret \"<admin-secret>\"\n\n# Apply metadata to an instance specified by the flag:\nhasura metadata apply --endpoint \"<endpoint>\"\n\n# Prevent inconsistent metadata from getting applied:\nhasura metadata apply --disallow-inconsistent-metadata\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Custom Function\nDESCRIPTION: Example GraphQL query to search for landmarks near a user using the custom PostgreSQL function\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  search_articles_aggregate(args: { search: \"hasura\" }) {\n    aggregate {\n      count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura CLI with YAML Configuration File\nDESCRIPTION: Example YAML configuration file showing all available configuration options for the Hasura CLI. This file is typically named config.yaml and is required for CLI operation. It includes settings for endpoint, authentication, API paths, and various directory configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/config-reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion:\nendpoint:\nadmin_secret:\nadmin_secrets:\ninsecure_skip_tls_verify:\ncertificate_authority:\naccess_key: #deprecated\napi_paths:\n  query:\n  graphql:\n  config:\n  pg_dump:\n  version:\nmetadata_directory:\nmigrations_directory:\nseeds_directory:\nactions:\n  kind:\n  handler_webhook_baseurl:\n  codegen:\n    framework:\n    output_dir:\n    uri:\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Hasura GraphQL\nDESCRIPTION: This query demonstrates how to fetch the first 5 authors from the list of all authors using the 'limit' argument in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query by Primary Key Example\nDESCRIPTION: Example of querying a single article by its primary key ID. Shows how to retrieve specific fields from a record using its primary key in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetSingleAuthor {\n  article_by_pk(id: 1) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Record with GraphQL Mutation in Hasura\nDESCRIPTION: Demonstrates how to insert a single record using the insert_one mutation. The example inserts an article and returns the inserted article's ID and title.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_article_one {\n  insert_article_one(object: { title: \"Software is gluttonous\", content: \"Something happened in HP\", author_id: 3 }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Nodes for Hasura Scaling\nDESCRIPTION: Formula to determine the number of Hasura nodes needed based on concurrent requests and performance benchmarks. Includes a backup node for high availability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/performance-tuning.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntotal_nodes = required_ccu / requests_per_node + backup_node\n```\n\n----------------------------------------\n\nTITLE: Auto-generated GraphQL Schema for BigQuery Tables\nDESCRIPTION: Example of the auto-generated GraphQL schema for a query field of a table named 'author', showing both the standard query field and the single object select by primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nauthor (\n  distinct_on: [author_select_column]\n  where: author_bool_exp\n  limit: Int\n  offset: Int\n  order_by:  [author_order_by!]\n): [author]\n\n# single object select\nauthor_by_pk (\n  # all primary key columns args\n  id: Int!\n): author\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Objects Using Array Relationship in GraphQL\nDESCRIPTION: This query shows how to fetch a list of authors and a nested list of each author's articles using an array relationship between authors and articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/nested-object-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Number of Published Articles Using GraphQL\nDESCRIPTION: This GraphQL query filters authors based on the count of their published articles. It fetches all authors who have published more than 10 articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(where: {get_published_articles_aggregate: {count: {_gte: 10}}}){\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Objects in a Table in GraphQL\nDESCRIPTION: Mutation that updates all articles in the table by using an empty object {} as the where condition. This example resets the rating of all articles by setting it to null.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation reset_rating {\n  update_article (\n    where: {}\n    _set: { rating: null }\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission via Hasura API\nDESCRIPTION: This HTTP POST request example shows how to create select permissions for a table via the Hasura Metadata API. It includes the necessary headers and JSON body to allow the 'user' role to execute aggregation queries on the 'products' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/aggregation-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n   \\\"type\\\": \\\"pg_create_select_permission\\\",\\n   \\\"args\\\": {\\n      \\\"source\\\": \\\"<db_name>\\\",\\n      \\\"table\\\": \\\"products\\\",\\n      \\\"role\\\": \\\"user\\\",\\n      \\\"permission\\\": {\\n         \\\"columns\\\": [],\\n         \\\"filter\\\": {\\n            \\\"id\\\": \\\"X-Hasura-User-Id\\\"\\n         },\\n         \\\"allow_aggregations\\\": true\\n      }\\n   }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with Offset in Hasura GraphQL\nDESCRIPTION: This query shows how to fetch 5 authors from the list of all authors, starting with the 6th one, using both 'limit' and 'offset' arguments in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5,\n    offset:5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Handler with Password Hashing\nDESCRIPTION: Python code for the signup handler, including password hashing using Argon2.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom argon2 import PasswordHasher\nPassword = PasswordHasher()\n\n@app.route(\"/signup\", methods=[\"POST\"])\ndef signup_handler():\n    args = AuthArgs.from_request(request.get_json())\n    hashed_password = Password.hash(args.password)\n```\n\n----------------------------------------\n\nTITLE: Creating User Table and SQL Function for JSON Field Extraction in PostgreSQL\nDESCRIPTION: This SQL snippet creates a user table with a JSON address field and a SQL function to extract the city from the address JSON data. The function uses the '->>' JSON operator to access the city value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE TABLE \"user\" (id SERIAL PRIMARY KEY, name TEXT UNIQUE NOT NULL, address json NOT NULL);\n\n-- SQL function returns city of a \"user\" using \"->\" json operator\nCREATE FUNCTION get_city(table_row \"user\")\nRETURNS TEXT AS $$\n  SELECT table_row.address ->> 'city'\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Result\nDESCRIPTION: This JSON object represents the result of the GraphQL query. It contains a list of articles with their id, title, date, and excerpt, where the excerpt is truncated to a specified length.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"article_with_excerpt\": [\n      {\n        \"id\": 3,\n        \"title\": \"Did you know\",\n        \"date\": \"2023-03-03\",\n        \"excerpt\": \"Ratio quidem vestra ...\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"They just cannot\",\n        \"date\": \"2023-04-04\",\n        \"excerpt\": \"Itaque hic ipse iam ...\"\n      },\n      {\n        \"id\": 5,\n        \"title\": \"What on earth\",\n        \"date\": \"2023-05-05\",\n        \"excerpt\": \"Venit ad extremum; A...\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Articles by Publication Date using Greater Than or Equal To Operator in GraphQL\nDESCRIPTION: This query fetches a list of articles that were published on or after a specific date using the _gte operator with a Date field in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {published_on: {_gte: \"2018-01-01\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking a View using YAML in Hasura CLI\nDESCRIPTION: This YAML snippet outlines how to edit the tables.yaml file in order to track a view and expose it over the GraphQL API in Hasura. This step is necessary for managing metadata within the application.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/views.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    dataset: my_data\n    name: <name of view>\n```\n\n----------------------------------------\n\nTITLE: Ordering Articles by Rating using OrderByExp in GraphQL\nDESCRIPTION: These examples demonstrate how to use OrderByExp to sort articles by rating and author id in GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesOrderedByRating {\n  article(order_by: { rating: desc }) {\n    name\n    rating\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticlesOrderedByRatingAndAuthorId {\n  article(order_by: [{ id: desc }, { author: { id: asc } }]) {\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with Authors Using GraphQL\nDESCRIPTION: This GraphQL query retrieves a list of articles along with their authors. It demonstrates the use of object relationships in GraphQL for accessing related data. The query outputs each article's ID, title, and its associated author's ID and name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-many.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  query: \"query {\\n    articles {\\n      id\\n      title\\n      author {\\n        id\\n        name\\n      }\\n    }\\n }\",\n  response: \"{\\n  \\\"data\\\": {\\n    \\\"articles\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"title\\\": \\\"sit amet\\\",\\n        \\\"author\\\": {\\n          \\\"id\\\": 4,\\n          \\\"name\\\": \\\"Anjela\\\"\\n        }\\n      },\\n      {\\n        \\\"id\\\": 2,\\n        \\\"title\\\": \\\"a nibh\\\",\\n        \\\"author\\\": {\\n          \\\"id\\\": 2,\\n          \\\"name\\\": \\\"Beltran\\\"\\n        }\\n      }\\n    ]\\n  }\\n }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generated GraphQL Query Schema for Author Table\nDESCRIPTION: Example of how Hasura auto-generates a GraphQL query schema for an 'author' table, showing available query parameters including where conditions, limit, offset, and ordering options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nauthor (\n  where: author_bool_exp\n  limit: Int\n  offset: Int\n  order_by:  [author_order_by!]\n): [author]\n```\n\n----------------------------------------\n\nTITLE: Creating Event Trigger via Metadata API\nDESCRIPTION: This HTTP POST request demonstrates how to create an Event Trigger using the Hasura Metadata API. It includes trigger details, table information, and webhook configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\" : \"<db_type_create_event_trigger>\",\n   \"args\" : {\n      \"name\": \"author_trigger\",\n      \"source\": \"<db_name>\",\n      \"table\": {\n         \"name\": \"author\",\n         \"schema\": \"public\"\n      },\n      \"webhook\": \"https://httpbin.org/post\",\n      \"insert\": {\n            \"columns\": \"*\"\n      },\n      \"update\": {\n            \"columns\": \"*\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: NOT Expression Query in GraphQL\nDESCRIPTION: Query example using the _not operator to filter out articles with empty titles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(where: { _not: { title: { _eq: \"\" } } }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a PostgreSQL Relationship in Hasura\nDESCRIPTION: This API endpoint renames an existing relationship. The example shows how to rename the 'article_details' relationship to 'article_detail' on the 'article' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_rename_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_details\",\n        \"source\": \"default\",\n        \"new_name\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Null Value Filtering in GraphQL\nDESCRIPTION: Query to fetch articles with non-null published_on dates using the _is_null operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {published_on: {_is_null: false}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Insert Permission in Hasura via Metadata API\nDESCRIPTION: This snippet illustrates how to drop an existing insert permission for a specified role on a table using the `pg_drop_insert_permission` Metadata API. This removes the defined insert permission for the `user` role on the `article` table from the `default` source. The API call is made with a POST request containing a JSON payload specifying the `type`, `table`, `role`, and `source`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_drop_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Materialized View in Postgres\nDESCRIPTION: This SQL snippet shows how to refresh a materialized view named 'popular_active_authors'. Since materialized views cache data, they need to be refreshed periodically to get the latest data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nREFRESH MATERIALIZED VIEW popular_active_authors;\n```\n\n----------------------------------------\n\nTITLE: Configure Claims Namespace Path in JSON\nDESCRIPTION: This JSON object illustrates the format of a JWT token when 'claims_namespace_path' is set to '$.hasura.claims'. It shows how Hasura-specific claims are organized within the JWT. It requires 'claims_namespace_path' to be configured with the JSON path to Hasura claims if differing from the default namespace.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"hasura\": {\n    \"claims\": {\n      \"x-hasura-allowed-roles\": [\"editor\", \"user\", \"mod\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": \"1234567890\",\n      \"x-hasura-org-id\": \"123\",\n      \"x-hasura-custom\": \"custom-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Relationships in Hasura CLI\nDESCRIPTION: YAML configuration for setting up select permissions in a products table using related tables. This example filters access based on a user's membership in a vendor organization using a nested relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: products\n  select_permissions:\n    - role: manager\n      permission:\n        columns: []\n        filter:\n          usersInVendorsByVendorId:\n            user_id:\n              _eq: X-Hasura-User-Id\n```\n\n----------------------------------------\n\nTITLE: Nested Object Response in Article Insertion\nDESCRIPTION: This example shows the process of inserting an 'article' object and returning nested objects in the response using GraphQL mutations. Upon insertion, the mutation retrieves the article details alongside the embedded author information, illustrating how nested object fetching can be achieved during insert operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_article {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Sample article content\",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n      author {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Inserting Data (JavaScript)\nDESCRIPTION: This GraphQL mutation demonstrates how to insert a new record into the 'sql_function_table' with an 'input' value while leaving the 'output' as null, which will then be automatically set by the trigger defined earlier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmutation {\n  insert_sql_function_table (\n    objects: [\n      {input: \"yabba dabba doo!\"}\n    ]\n  ) {\n    returning {\n      input\n      output\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Metadata using HTTP POST in Hasura\nDESCRIPTION: This snippet demonstrates how to reload Metadata in Hasura when there are changes in the underlying Postgres database. It includes options for reloading remote schemas, sources, and recreating event triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"reload_metadata\",\n    \"args\": {\n        \"reload_remote_schemas\": true,\n        \"reload_sources\": false,\n        \"recreate_event_triggers\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Squashing Migrations with Hasura CLI\nDESCRIPTION: Command to merge multiple migration files into a single file for better maintainability. It combines all migration files from a specified starting point to the latest migration into one file with a custom name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate squash --name \"<my-feature-name>\" --from <start-migration-version-timestamp-number> --database-name <database-name>\n\n# note down the version timestamp number\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook with Node.js and Express\nDESCRIPTION: Complete implementation of a webhook using Node.js and Express that receives product data from Hasura, enhances the description using OpenAI, and updates the product in the database. Includes authentication, error handling, and logging.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst OpenAI = require('openai');\n\n// Constants for server and external service configurations\nconst PORT = 4000;\nconst OPEN_AI_KEY = 'YOUR-OPENAI-KEY';\nconst HASURA_GRAPHQL_ENDPOINT = 'YOUR-HASURA-GRAPHQL-ENDPOINT';\nconst HASURA_ADMIN_SECRET = 'YOUR-HASURA-ADMIN-SECRET';\n\n// Set up the express server instance\nconst app = express();\n\n// Middleware to parse incoming JSON and URL-encoded bodies\napp.use(express.json()); // to support JSON-encoded bodies\napp.use(express.urlencoded({ extended: true }));\n\n// Initialize OpenAI client with the provided API key\nconst openai = new OpenAI({\n  apiKey: OPEN_AI_KEY,\n});\n\n/**\n * Function to improve the original product description for SEO using OpenAI.\n * @param {string} originalDescription - The original product description.\n * @return {string} The improved description for SEO.\n */\nasync function improveDescription(originalDescription) {\n  const completion = await openai.chat.completions.create({\n    messages: [\n      {\n        role: 'user',\n        content: `You are an SEO expert who works on an e-commerce website. Your task is to take the following product description and improve it for SEO purposes, making it more likely to rank highly in search engines and lead to increased visitor traffic and purchases. Only respond with the improved description and nothing else. If there is nothing to improve then respond with the original content. The product description to improve for SEO is as follows: ${originalDescription}`,\n      },\n    ],\n    model: 'gpt-3.5-turbo',\n  });\n\n  return completion.choices[0].message.content;\n}\n\n/**\n * Function to update the product description in Hasura.\n * @param {string} productId - The unique ID of the product.\n * @param {string} improvedDescription - The improved product description.\n * @return {string} The product ID of the updated product.\n */\nasync function updateProductDescription(productId, improvedDescription) {\n  // Send a POST request to Hasura's GraphQL endpoint to update the product description\n  const response = await fetch(HASURA_GRAPHQL_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-hasura-admin-secret': HASURA_ADMIN_SECRET,\n    },\n    body: JSON.stringify({\n      query: `\n          mutation UpdateProduct($id: uuid!, $description: String) {\n            update_products_by_pk(pk_columns: {id: $id}, _set: {description: $description}) {\n              id\n              description\n            }\n          }\n          `,\n      variables: {\n        id: productId,\n        description: improvedDescription,\n      },\n    }),\n  });\n\n  const { data } = await response.json();\n  return data.update_products_by_pk.id;\n}\n\n// API endpoint to improve and update product descriptions using AI\napp.post('/product-description-ai-seo', async (req, res, next) => {\n  try {\n    // Check for the custom authorization header for security\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      console.log('Unauthorized');\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n\n    // Extract description and id from the incoming request\n    const { description, id } = req.body?.event?.data?.new;\n\n    console.log(`Description: ${description}\\n`);\n\n    // Ensure both description and id are present\n    if (!description || !id) {\n      console.log('Bad request: no description or id\\n');\n      return res.status(400).json({ message: 'Bad request' });\n    }\n\n    // Get the improved description from OpenAI\n    const improvedDescription = await improveDescription(description);\n    console.log(`Improved description: ${improvedDescription}\\n`);\n\n    // Update the product description in Hasura\n    await updateProductDescription(id, improvedDescription);\n\n    // Return a success response\n    console.log('Success\\n');\n    return res.status(200).json({ message: 'Success' });\n  } catch (error) {\n    // Handle any errors\n    next(error); // Forward error to centralized error handling\n  }\n});\n\n// Centralized error handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ message: 'Internal server error' });\n});\n\n// Start the server on the specified port\napp.listen(PORT, () => {\n  console.log(`Server started on port ${PORT}\\n`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA based JWT for Hasura with JWKs URL\nDESCRIPTION: Example of configuring RSA based JWT authentication for Hasura GraphQL Engine using a JWKs URL to fetch the public key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Computed Field to a Table using Hasura CLI\nDESCRIPTION: This YAML snippet demonstrates how to add a computed field to a table in Hasura using the CLI. The `computed_fields` section defines the name, definition, function, return table, and argument mapping for the computed field. The `hasura metadata apply` command is then used to apply the changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/computed-fields.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\n    dataset: hasura\n    name: authors\n  computed_fields:\n    - name: fetch_articles\n      definition:\n        function:\n          dataset: hasura\n          name: search_articles\n        return_table:\n          dataset: hasura\n          name: articles\n        argument_mapping:\n          author_id_arg: author_id\n      comment: ''\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Foreign Key Constraint in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to define a foreign key constraint on the `author_id` column in the `articles` table, referencing the `id` column in the `authors` table. This establishes a relationship between the two tables, ensuring that only valid author IDs are used in the `articles` table. The `id` column in both tables are defined as primary keys with `SERIAL` to auto-increment the values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/constraints.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE authors(\n  id SERIAL PRIMARY KEY,\n  name           TEXT    NOT NULL,\n  email          TEXT    UNIQUE\n);\n\nCREATE TABLE articles(\n  id SERIAL PRIMARY KEY,\n  title          TEXT    NOT NULL,\n  author_id INTEGER,\n  FOREIGN KEY (author_id) REFERENCES authors (id)\n);\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple JWT Secrets\nDESCRIPTION: JSON configuration for multiple JWT secrets using the HASURA_GRAPHQL_JWT_SECRETS environment variable. Supports different JWT issuers and configuration types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/multiple-jwt-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"jwk_url\": \"https://...\", \"issuer\": \"myapp\" },\n  { \"type\": \"HS256\", \"key\": \"3EK6FD...\", \"issuer\": \"test\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Action Output Type in GraphQL\nDESCRIPTION: Basic GraphQL schema showing an Action mutation and its output type for updating an author\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateAuthor(id: Int!, name: String!): UpdateAuthorOutput\n}\n\ntype UpdateAuthorOutput {\n  author_id: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission in Hasura using Metadata API\nDESCRIPTION: This snippet demonstrates how to create an insert permission for a specific role on a table using the Hasura Metadata API. It includes defining constraints on the inserted data, setting column values based on session variables, and specifying allowed columns. The request is sent as a POST request with JSON payload containing the `pg_create_insert_permission` type and related arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"set\":{\n                \"id\":\"X-HASURA-USER-ID\"\n            },\n            \"columns\":[\"name\",\"author_id\"],\n            \"validate_input\": {\n                \"type\": \"http\",\n                \"definition\": {\n                \"forward_client_headers\": true,\n                \"headers\": [],\n                \"timeout\": 10,\n                \"url\": \"http://www.somedomain.com/validateUser\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Simple Object Example with JSON Path Access\nDESCRIPTION: Example of a GraphQL query for an author object demonstrating scalar fields, JSON path access, nested objects, and aggregate objects. Shows various ways to query JSON fields using path expressions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nauthor {\n   id  # scalar integer field\n\n   name  # scalar text field\n\n   address(path: \"$.city\") # scalar JSON field -> property\n   address(path: \"$.city.altitude\") # scalar JSON field -> property -> property\n   address(path: \"city\") # scalar JSON field -> property; '$.' prefix is optional\n   contacts(path: \"[0]\") # scalar JSON field -> array_item\n   contacts(path: \"[0].phone\") # scalar JSON field -> array_item_property\n   contacts(path: \"['Hello world!']\") # scalar JSON field -> property; used for special characters key\n   contacts(path: \"[\\\"Hello world!\\\"]\") # same as above; the syntax is ugly, but still works\n\n   article {  # nested object\n     title\n   }\n\n   article_aggregate {  # aggregate nested object\n     aggregate {\n       count\n     }\n     nodes {\n       title\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Custom Function with Arguments in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to call a custom search_articles function with parameters. It passes a search argument and uses the limit parameter to restrict results to 5 items. The query returns id, title, and content fields from the search results.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/custom-functions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  search_articles(args: { search: \"hasura\" }, limit: 5) {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Functions via Metadata API\nDESCRIPTION: This snippet shows how to expose a function as a top-level GraphQL field by making an API call to Hasura's metadata endpoint. Requires specifying the database name, the schema, and the function name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_function\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"schema\": \"public\",\n    \"name\": \"<name of function>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Multiple Tables via Hasura Metadata API\nDESCRIPTION: HTTP POST request to track multiple tables and expose them over the GraphQL API using the Hasura Metadata API. This snippet shows how to use the bulk operation to track multiple tables at once.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n       \"type\": \"pg_track_table\",\n       \"args\": {\n          \"source\": \"<db_name>\",\n          \"schema\": \"public\",\n          \"name\": \"<table-name-1>\"\n       }\n    },\n    {\n       \"type\": \"pg_track_table\",\n       \"args\": {\n          \"source\": \"<db_name>\",\n          \"schema\": \"public\",\n          \"name\": \"<table-name-2>\"\n       }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Limited Results with Aggregated Data in Hasura GraphQL\nDESCRIPTION: This query demonstrates how to fetch a limited number of articles along with their total count, using both regular and aggregate queries in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/pagination.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery articles ($where: articles_bool_exp!) {\n  articles_aggregate(where: $where) {\n    aggregate {\n      totalCount: count\n    }\n  }\n  articles (where: $where limit: 4) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Delete Mutation Schema in GraphQL\nDESCRIPTION: The schema demonstrates the structure of delete mutations for a Postgres table named 'article'. It includes mutations for deleting objects based on conditions and by primary key. These operations allow for returning affected rows and their data. No additional dependencies are required, however, access permissions on select operations are necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndelete_article (\n  where: article_bool_exp!\n): article_mutation_response\n\n# response of any mutation on the table \"article\"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object delete (supported from v1.2.0)\ndelete_article_by_pk (\n  # all primary key columns args\n  id: Int\n): article\n```\n\n----------------------------------------\n\nTITLE: Defining Column-Level Permissions in YAML for Hasura\nDESCRIPTION: This YAML snippet demonstrates how to configure column-level permissions for a table in Hasura using the metadata file. It specifies the roles and the accessible columns along with the filtering condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-level-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- table:\n    schema: public\n    name: users\n  select_permissions:\n    - role: user\n      permission:\n        columns:\n          - id\n          - name\n          - email\n        filter:\n          id:\n          _eq: X-Hasura-User-Id\n\n```\n\n----------------------------------------\n\nTITLE: Querying Articles by Rating using In List Operator in GraphQL\nDESCRIPTION: This example shows how to fetch a list of articles rated 1, 3, or 5 using the _in operator to compare field values to a list of values in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {rating: {_in: [1,3,5]}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Aggregation Results in GraphQL\nDESCRIPTION: GraphQL query demonstrating how to order a collection (Invoice) based on the results of an aggregation (count of InvoiceLines).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice(\n    order_by: [{ InvoiceLines_aggregate: { _count: Desc } }] # Order by the number of invoice lines in each invoice, descending\n  ) {\n    InvoiceId\n    InvoiceLines_aggregate {\n      _count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Limits with Hasura Metadata API\nDESCRIPTION: This HTTP POST request configures API limits using the set_api_limits endpoint. It demonstrates how to set global and role-specific limits for depth, node count, execution time, batch size, and request rate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/api-limits.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"set_api_limits\",\n    \"args\": {\n        \"disabled\": false,\n        \"depth_limit\": {\n            \"global\": 5,\n            \"per_role\": {\n                \"myrole\": 3\n            }\n        },\n        \"node_limit\": {\n            \"global\": 5,\n            \"per_role\": {\n                \"myrole\": 3\n            }\n        },\n        \"time_limit\": {\n            \"global\": 5,\n            \"per_role\": {\n                \"myrole\": 3\n            }\n        },\n        \"batch_limit\": {\n            \"global\": 5,\n            \"per_role\": {\n                \"myrole\": 3\n            }\n        },\n        \"rate_limit\": {\n            \"global\": {\n                \"unique_params\": \"IP\",\n                \"max_reqs_per_min\": 100\n            },\n            \"per_role\": {\n                \"myrole\": {\n                    \"unique_params\": [\"x-hasura-id\", \"x-hasura-team-id\"],\n                    \"max_reqs_per_min\": 10\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Distinct Department Records with Highest Salary\nDESCRIPTION: Example GraphQL query demonstrating how to fetch employees with highest salary from each department using distinct_on combined with order_by.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/distinct-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  employees (\n    distinct_on: [department]\n    order_by: [\n      {department: asc},\n      {salary: desc}\n    ]\n  ) {\n    id\n    name\n    department\n    salary\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Institution Query with Nested Filtering in GraphQL\nDESCRIPTION: Complex GraphQL query demonstrating filtering and ordering institutions based on nested campus and country relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  InstitutionMany(\n    where: { campuses: { country: { name: { _eq: \"USA\" } } } }\n    order_by: { campuses: { country: { name: Asc } } }\n  ) {\n    id\n    name\n    campuses {\n      name\n      country {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship with Native Query via API\nDESCRIPTION: API request to create a relationship between a table and a Native Query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"mssql_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"articles\",\n        \"name\": \"author\",\n        \"using\": {\n          \"manual_configuration\": {\n            \"remote_native_query\": \"get_author\",\n            \"column_mapping\": {\n              \"id\": \"author_id\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting an Object with Nested Related Objects in GraphQL\nDESCRIPTION: This mutation demonstrates nested inserts in Hasura GraphQL, where a new article is created together with its author in a single operation. The response includes the inserted article with its author details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/multiple-mutations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_article {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Sample article content\",\n        author: {\n          data: {\n            name: \"Cory\"\n          }\n        }\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      author {\n        id\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking and Applying Migrations in Hasura\nDESCRIPTION: This Bash example illustrates how to apply migrations and track their status in a Hasura project. It utilizes Hasura CLI commands for applying migrations and checking their status, essential for maintaining migration integrity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migration-best-practices.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply and track migrations\nhasura migrate apply\nhasura metadata apply\n\n# Check the status of your migrations\nhasura migrate status\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Computed Field in Postgres\nDESCRIPTION: This snippet defines an SQL function named 'filter_author_articles' which filters articles based on a search string, allowing for a table computed field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION filter_author_articles(author_row authors, search text)\nRETURNS SETOF articles AS $$\n  SELECT *\n  FROM articles\n  WHERE\n    ( title ilike ('%' || search || '%')\n      OR content ilike ('%' || search || '%')\n    ) AND author_id = author_row.id\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura CLI Migrations with Docker\nDESCRIPTION: This snippet demonstrates how to use the Hasura cli-migrations Docker image in a Dockerfile to automatically apply database migrations and metadata. It highlights the necessary environment variables and commands needed to configure and start the Hasura GraphQL Engine using the image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/auto-apply-migrations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nFROM hasura/graphql-engine:<version>.cli-migrations-v3\n\nCMD graphql-engine \\\n  --metadata-database-url $METADATA_DATABASE_URL \\\n  serve \\\n  --server-port $PORT \\\n  --enable-console\n```\n\n----------------------------------------\n\nTITLE: Batching Queries in GraphQL API\nDESCRIPTION: This snippet demonstrates how to batch multiple query operations in a single GraphQL request. It includes two separate queries, 'first' and 'second', each fetching author data based on different ID conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery first {\n  author(where: {id: {_eq: 1}}) {\n    id\n    name\n  }\n}\nquery second {\n  author(where: {id: {_eq: 2}}) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Check Constraint in Postgres with SQL\nDESCRIPTION: This SQL snippet demonstrates how to add a check constraint to the 'author' table, ensuring the 'rating' is between 1 and 10. It uses an 'ALTER TABLE' statement to create the constraint. Dependencies include a Postgres database and access to the schema 'author'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE author\nADD CONSTRAINT authors_rating_check CHECK (rating > 0 AND rating <= 10);\n```\n\n----------------------------------------\n\nTITLE: Hasura Permission Example\nDESCRIPTION: This snippet demonstrates a permission configuration that restricts users to only viewing their own data on the `user` table during a `select` operation.  It checks if the `X-Hasura-User-Id` session variable matches the `id` value in the `user` table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  “id”: {\n    “_eq”: “X-Hasura-User-Id”\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking a Table in Hasura GraphQL (HTTP)\nDESCRIPTION: Shows how to remove a table/view ('author') from the GraphQL schema using the 'mssql_untrack_table' operation. This operation allows developers to manage schema efficiently.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_untrack_table\",\n  \"args\": {\n    \"table\": {\n      \"schema\": \"dbo\",\n      \"name\": \"author\"\n    },\n    \"source\": \"default\",\n    \"cascade\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Articles GraphQL Mutation\nDESCRIPTION: This mutation facilitates the insertion of multiple 'article' objects simultaneously within a single GraphQL request. It returns key information about each inserted object, specifically their IDs and titles. The example highlights usage with both inline values and query variables, providing flexibility in operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_multiple_articles {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 2\",\n        content: \"Sample article content\",\n        author_id: 4\n      },\n      {\n        title: \"Article 3\",\n        content: \"Sample article content\",\n        author_id: 5\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_multiple_articles($objects: [article_insert_input!]! ) {\n  insert_article(objects: $objects) {\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Relationships in Hasura API\nDESCRIPTION: HTTP request to create select permissions on a products table using the Hasura Metadata API. The permission uses a nested relationship to filter access based on user's membership in a vendor.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"products\",\n    \"role\": \"manager\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": {\n        \"usersInVendorsByVendorId\": {\n          \"user_id\": {\n            \"_eq\": \"X-Hasura-User-Id\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission in Hasura using Metadata API\nDESCRIPTION: This snippet demonstrates how to create a select permission for a role on a table using the Hasura Metadata API. It sets a filter condition to allow selecting rows where either the `author_id` matches the session variable `X-HASURA-USER-ID` or the `is_published` field is true. It also limits the number of returned rows to 10 and allows aggregate queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\",\n        \"permission\" : {\n            \"columns\" : \"*\",\n            \"filter\" : {\n                \"$or\" : [\n                    { \"author_id\" : \"X-HASURA-USER-ID\" },\n                    { \"is_published\" : true }\n                ]\n             },\n             \"limit\": 10,\n             \"allow_aggregations\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Relationships via Hasura Metadata API\nDESCRIPTION: HTTP POST request to create multiple relationships using the Hasura Metadata API. This snippet shows how to use the bulk operation to create both object and array relationships in a single request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"pg_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"<table name>\",\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"foreign_key_constraint_on\": \"<reference column>\"\n        }\n      }\n    },\n    {\n      \"type\": \"pg_create_array_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"<table name>\",\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"foreign_key_constraint_on\" : {\n            \"table\" : \"<reference table name>\",\n            \"column\" : \"<reference column>\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using Array Relationship\nDESCRIPTION: GraphQL query to fetch authors with their associated articles, demonstrating the use of the array relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Filter Condition with Upsert in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to add a where condition to the on_conflict clause to check a condition before updating in case of a conflict. It updates the published_on column only if the previous value is lesser than the new value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/upsert.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: \"Article 2\",\n        published_on: \"2018-10-12\"\n      }\n    ],\n    on_conflict: {\n      constraint: article_title_key,\n      update_columns: [published_on],\n      where: {\n        published_on: {_lt: \"2018-10-12\"}\n      }\n    }\n  ) {\n    returning {\n      id\n      title\n      published_on\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Login Mutation Schema\nDESCRIPTION: GraphQL schema definition for login mutation that accepts username and password, returning an access token\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  login(username: String!, password: String!): LoginResponse\n}\n\ntype LoginResponse {\n  accessToken: String!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription by Primary Key Example\nDESCRIPTION: Example of a subscription to a single article by its primary key ID. The subscription triggers whenever there is a change to the specified article in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetSingleAuthor {\n  article_by_pk(id: 1) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BigQuery Source via Metadata API\nDESCRIPTION: Connects a BigQuery database to Hasura using the `bigquery_add_source` Metadata API action. The example demonstrates how to add a source named `bigquery1` with specified configuration, including service account, project ID and datasets, and customization settings. It requires admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_add_source\",\n  \"args\": {\n    \"name\": \"bigquery1\",\n    \"configuration\": {\n      \"service_account\": \"bigquery_service_account\",\n      \"project_id\": \"bigquery_project_id\",\n      \"datasets\": [\"dataset1\", \"dataset2\"]\n    },\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Issuer in JSON\nDESCRIPTION: This JSON snippet sets the 'issuer' field within a JWT configuration, ensuring that an incoming JWT matches the specified issuer value during validation. Proper issuer verification prevents acceptance of JWTs with unexpected origin, enhancing security.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://......\",\n  \"issuer\": \"https://my-auth-server.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC-SHA based JWT for Hasura\nDESCRIPTION: Example of configuring HMAC-SHA based JWT authentication for Hasura GraphQL Engine. It uses HS256 algorithm with a 256-bit key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"HS256\",\n  \"key\": \"3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Session-based Computed Field in Postgres\nDESCRIPTION: This snippet shows how to create an SQL function 'article_liked_by_user' that checks if a user has liked a specific article, utilizing session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plsql\nCODE:\n```\n-- 'hasura_session' will be the session argument\nCREATE OR REPLACE FUNCTION article_liked_by_user(article_row articles, hasura_session json)\nRETURNS boolean AS $$\nSELECT EXISTS (\n    SELECT 1\n    FROM article_likes A\n    WHERE A.user_id = hasura_session ->> 'x-hasura-user-id' AND A.article_id = article_row.id\n);\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Trigger for Content Validation\nDESCRIPTION: An SQL and PL/pgSQL code snippet to create a function and trigger in Postgres to enforce content length constraints for the 'article' table. Requires a Postgres database where the table and function can be defined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION check_content_length()\nRETURNS trigger AS $$\nDECLARE content_length INTEGER;\nBEGIN\n  -- split article content into words and get count\n  select array_length(regexp_split_to_array(NEW.content, '\\s'),1) INTO content_length;\n\n  -- throw an error if article content is too long\n  IF content_length > 100 THEN\n      RAISE EXCEPTION USING ERRCODE= '22000', MESSAGE= 'Content can not have more than 100 words';\n  END IF;\n\n  -- return the article row if no error\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER check_content_length_trigger\n  BEFORE INSERT OR UPDATE ON \"article\"\n  FOR EACH ROW\n  EXECUTE PROCEDURE check_content_length();\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Item with User Permissions\nDESCRIPTION: GraphQL mutation to insert a new todo item with restricted user permissions, demonstrating automatic user_id preset handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateTodo {\n  insert_todos_one(object: {title: \"Clean the car\"}) {\n    id\n    title\n    is_completed\n    user_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP Handler Request Payload in JSON\nDESCRIPTION: Demonstrates the structure of the JSON payload sent by Hasura to the action handler, including action name, input arguments, and session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": {\n    \"name\": \"<action-name>\"\n  },\n  \"input\": {\n    \"arg1\": \"<value>\",\n    \"arg2\": \"<value>\"\n  },\n  \"session_variables\": {\n    \"x-hasura-user-id\": \"<session-user-id>\",\n    \"x-hasura-role\": \"<session-user-role>\"\n  },\n  \"request_query\": \"<request-query>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Articles with Authors Using GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates inserting articles along with their authors, considering potential duplicates based on unique author names. The 'on_conflict' clause ensures that existing authors are updated instead of creating duplicates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-many.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  query: \"mutation upsertArticleWithAuthors {\\n  insert_article(objects: [\\n    {\\n      title: \\\"Article 1\\\",\\n      content: \\\"Article 1 content\\\",\\n      author: {\\n        data: {\\n          name: \\\"Alice\\\"\\n        },\\n        on_conflict: {\\n          constraint: author_name_key,\\n          update_columns: [name]\\n        }\\n      }\\n    },\\n    {\\n      title: \\\"Article 2\\\",\\n      content: \\\"Article 2 content\\\",\\n      author: {\\n        data: {\\n          name: \\\"Alice\\\"\\n        },\\n        on_conflict: {\\n          constraint: author_name_key,\\n          update_columns: [name]\\n        }\\n      }\\n    }\\n  ]) {\\n    returning {\\n      title\\n      content\\n      author {\\n        name\\n      }\\n    }\\n  }\\n }\",\n  response: \"{\\n  \\\"data\\\": {\\n    \\\"insert_article\\\": {\\n      \\\"returning\\\": [\\n        {\\n          \\\"title\\\": \\\"Article 1\\\",\\n          \\\"content\\\": \\\"Article 1 content\\\",\\n          \\\"author\\\": {\\n            \\\"name\\\": \\\"Alice\\\"\\n          }\\n        },\\n        {\\n          \\\"title\\\": \\\"Article 2\\\",\\n          \\\"content\\\": \\\"Article 2 content\\\",\\n          \\\"author\\\": {\\n            \\\"name\\\": \\\"Alice\\\"\\n          }\\n        }\\n      ]\\n    }\\n  }\\n }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Points Within Distance using _st_d_within\nDESCRIPTION: GraphQL query demonstrating how to find geometric points within a specified distance from a given point using the _st_d_within operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($point: geometry){\n  geom_table(\n    where: {geom_col: {_st_d_within: {distance: 3, from: $point}}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Relationship in MSSQL Database via HTTP Request\nDESCRIPTION: This HTTP POST request demonstrates how to rename an existing relationship from 'article_details' to 'article_detail' for the 'article' table in the default database source. The request uses the mssql_rename_relationship API endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_rename_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_details\",\n        \"source\": \"default\",\n        \"new_name\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Articles by Rating and Publication Date in GraphQL\nDESCRIPTION: GraphQL query that fetches articles sorted by rating in descending order and publication date in ascending order with nulls appearing first. The query returns article ID, rating, and publication date fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    order_by: [\n      {rating: desc},\n      {published_on: asc_nulls_first}\n    ]\n  ) {\n    id\n    rating\n    published_on\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 17,\n        \"rating\": 5,\n        \"published_on\": null\n      },\n      {\n        \"id\": 14,\n        \"rating\": 4,\n        \"published_on\": null\n      },\n      {\n        \"id\": 7,\n        \"rating\": 4,\n        \"published_on\": \"2016-07-09\"\n      },\n      {\n        \"id\": 3,\n        \"rating\": 4,\n        \"published_on\": \"2017-05-26\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Aggregate Fields\nDESCRIPTION: Specifies a GraphQL type for string field aggregations. Includes max, min, count, count distinct operations, and a concatenation function with separator parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\ntype String_aggregate_fields {\n  _max: String!\n  _min: String!\n  _count: Int!\n  _count_distinct: Int!\n  _concat(separator: String!): String!\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Computed Fields in GraphQL Queries\nDESCRIPTION: These examples demonstrate how to use computed fields for ordering in GraphQL queries, including scalar and table row types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\nquery StudentsOrderByTotalMarks {\n  student(order_by: { total_marks: desc }) {\n    id\n    name\n    total_marks\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorsOrderByArticleCount {\n  author(order_by: { get_articles_aggregate: { count: desc } }) {\n    id\n    name\n    get_articles {\n      id\n      title\n      content\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Across Multiple APIs with GraphQL\nDESCRIPTION: A GraphQL query that demonstrates fetching data across multiple connected APIs (socials and payments) to display a user dashboard with their posts, orders, and purchased products.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/api-gateway.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserDashboard($id: Int!) {\n  socials {\n    users(where: {id: {_eq: $id}}) {\n      id\n      username\n      orders {\n        id\n        product {\n          name\n        }\n      }\n      posts {\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DistinctOn Query using GraphQL\nDESCRIPTION: This GraphQL query snippet fetches product data using the `distinct_on` keyword to eliminate duplicate categories. The aggregate function returns detailed measures such as `count`, `sum`, `avg`, and more for the 'price' field. The snippet requires no prerequisites aside from a compatible GraphQL environment configured with the necessary schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery DistinctOnProductsQuery {\n  distinct_on: products(\n    distinct_on: \"category\"\n  ) {\n    aggregate {\n      count\n      sum {\n        price\n      }\n      avg {\n        price\n      }\n      stddev {\n        price\n      }\n      stddev_samp {\n        price\n      }\n      stddev_pop {\n        price\n      }\n      variance {\n        price\n      }\n      var_samp {\n        price\n      }\n      var_pop {\n        price\n      }\n      max {\n        price\n      }\n      min {\n        price\n      }\n    }\n    nodes {\n      id\n      name\n      category\n      price\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Referenced Logical Models via API\nDESCRIPTION: Demonstrates how to create two interlinked logical models (article and author) using a bulk atomic operation. The models reference each other with article containing author information and author containing an array of articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\":\n  [\n    {\n      \"type\": \"mongo_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"article\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"title\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"contents\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"author_id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"author\",\n            \"type\":\n              {\n                \"logical_model\": \"author\"\n              }\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"mongo_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"author\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"name\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"articles\",\n            \"type\":\n              {\n                \"array\":\n                  {\n                    \"logical_model\": \"article\"\n                  }\n              }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Across Multiple APIs with Hasura\nDESCRIPTION: GraphQL query that demonstrates querying across two different APIs (socials and CMS) using a relationship created in Hasura. This query retrieves users and their posts from different services.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/api-gateway.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllUsersAndPosts {\n  socials {\n    users {\n      id\n      username\n      posts {\n        id\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship with Hasura Metadata API in MSSQL using HTTP\nDESCRIPTION: This snippet illustrates how to structure an HTTP POST request to create a new remote relationship using Hasura's metadata API for an MSSQL database. Prerequisites include having the 'admin' Hasura role and access to both the source database and the target remote schema or table. The payload includes the relationship name, database source, and target specification. Input includes remote schema names and output includes a successful creation status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"mssql_create_remote_relationship\",\n   \"args\":{\n      // name of the remote relationship\n      \"name\": \"messages\",\n      // name of the database\n      \"source\": \"app_db\",\n      // name of the table in the above database on which the relationship\n      // is being defined\n      \"table\": \"users\",\n      \"definition\": {\n        // this remote relationship is being defined to a resolver on a\n        // Remote Schema\n        \"to_remote_schema\": {\n          // name of the target Remote Schema\n          \"remote_schema\": \"forum_api\",\n          // the fields on the table that need to be selected to pass the\n          // required data to the Remote Schema's resolver\n          \"lhs_fields\": [\"id\"],\n          // the join condition - this would generate this upstream request:\n          // query {\n          //   messages(user_id: id_from_users_table) { .. }\n          // }\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"mssql_create_remote_relationship\",\n   \"args\":{\n      // name of the remote relationship\n      \"name\": \"orders\",\n      // name of the database\n      \"source\": \"app_db\",\n      // name of the table in the above database on which the relationship\n      // is being defined\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_source\": {\n          // the type of the relationship, an 'object' (many-to-one) or an\n          // 'array' (one-to-many)\n          \"relationship_type\": \"array\",\n          // the database where the target table exists\n          \"source\": \"store_db\",\n          // name of the table which is the target of the remote\n          // relationship\n          \"table\": \"orders\"\n          // the join condition is specified by a mapping of columns from\n          // the source's table to the target's table, i.e,\n          // app_db.users.id = store_db.orders.user_id\n          \"field_mapping\": {\n            \"id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing GraphQL WebSocket Architecture with Mermaid Diagram\nDESCRIPTION: A comprehensive flow diagram illustrating the entire GraphQL over WebSockets architecture. The diagram shows the flow from client request through protocol validation, connection establishment, task management, subscription handling, polling mechanisms, error handling, and cleanup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/graphql-ws/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    Client -->|Initiates WebSocket Request| WebSocketServer\n    WebSocketServer -->|Validates Protocol| ProtocolValidation\n    ProtocolValidation -->|Success| ConnectionEstablishment\n    ConnectionEstablishment -->|Initialize Session| SessionInit\n    SessionInit -->|Spawn Tasks| TaskManagement\n\n    subgraph TaskManagement\n        IncomingTask\n        OutgoingTask\n        ConnectionExpiryTask\n    end\n\n    IncomingTask -->|Process Messages| ProtocolHandler\n    OutgoingTask -->|Send Messages| Client\n    ConnectionExpiryTask -->|Monitor Health| ConnectionState\n\n    subgraph ProtocolHandler\n        ConnectionInit\n        Subscribe\n        Complete\n        PingPong\n    end\n\n    Subscribe -->|Create Subscription| SubscriptionHandling\n\n    subgraph SubscriptionHandling\n        ValidateRequest\n        ExecutePreParsePlugins\n        ParseAndNormalizeQuery\n        GenerateQueryPlan\n        CreatePoller\n    end\n\n    CreatePoller -->|Start Polling| PollingMechanism\n\n    subgraph PollingMechanism\n        FetchData\n        ProcessResponse\n        CompareResults\n        SendUpdates\n    end\n\n    ProtocolHandler -->|Handle Errors| ErrorHandling\n    ErrorHandling -->|Send Error Messages| OutgoingTask\n\n    TaskManagement -->|Update Metrics| MetricsAndMonitoring\n\n    ConnectionState -->|Trigger Cleanup| Cleanup\n    Complete -->|Stop Subscription| Cleanup\n\n    Cleanup -->|Stop Pollers| PollingMechanism\n    Cleanup -->|Release Resources| ConnectionEstablishment\n```\n\n----------------------------------------\n\nTITLE: Negated Case-Insensitive User Search with _nilike in GraphQL\nDESCRIPTION: This query fetches all users whose name does not contain 'John' (case-insensitive) using the _nilike operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { name: { _nilike: \"%John%\" } }) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Keyset Cursor-based Pagination in Hasura GraphQL\nDESCRIPTION: This query illustrates keyset cursor-based pagination by using a 'where' clause instead of 'offset' to fetch authors with IDs greater than 5 in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5,\n    where: { id: {_gt: 5} }\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Authors with Nested Articles - GraphQL\nDESCRIPTION: This GraphQL query fetches all authors who have at least one article written by them. It uses a `where` clause to filter authors based on the existence of nested `articles`. The response includes the authors' IDs, names, and a count of their articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n<GraphiQLIDE\n  query={`{\n  bigquery_authors (\n    where: {\n      articles: {}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"bigquery_authors\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Justin\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"count\": \"2\"\n          }\n        }\n      },\n      {\n        \"id\": \"4\",\n        \"name\": \"Anjela\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"count\": \"1\"\n          }\n        }\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Tracking MS SQL Stored Procedure with Hasura Metadata API\nDESCRIPTION: HTTP POST request to track a stored procedure and add it to the GraphQL schema. Includes configuration for procedure name, arguments, return type and custom naming.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/stored-procedures.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_stored_procedure\",\n  \"args\": {\n    \"source\": <source-name>,\n    \"stored_procedure\": <name> | { \"schema\": <schema-name>, \"name\": <procedure-name> },\n    \"configuration\": {\n      \"exposed_as\": \"query\",\n      \"custom_name\": <custom-name>\n    },\n    \"arguments\": {\n      <name>: {\n        \"type\": \"<type>\",\n        \"nullable\": false | true,\n        \"description\": <string>\n      }\n    },\n    \"returns\": <logical-model-name>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Maximum Rating with Null Handling\nDESCRIPTION: Query to fetch authors sorted by their highest article rating in ascending order with nulls last.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    order_by: {\n      articles_aggregate: {\n        max: {rating: asc_nulls_last}\n      }\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate{\n        max {rating}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship to Database in Hasura GraphQL Engine\nDESCRIPTION: This HTTP POST request creates a new remote relationship on a Remote Schema's type to a table in a database. It specifies the relationship name, source schema, target database and table, and the field mapping for the join condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"create_remote_schema_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"remote_schema\": \"users_api\",\n      \"type\": \"user\",\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"store_db\",\n          \"table\": \"orders\"\n          \"field_mapping\": {\n            \"id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Article by Primary Key in GraphQL\nDESCRIPTION: Mutation that updates a single article using its primary key. It sets the 'is_published' field to true for the article with id=1 and returns the updated article object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_an_article {\n  update_article_by_pk (\n    pk_columns: {id: 1}\n    _set: { is_published: true }\n  ) {\n    id\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Event with Hasura Metadata API\nDESCRIPTION: This snippet illustrates how to create a scheduled event using the Hasura Metadata API. It includes setting the webhook URL, schedule time, payload, headers, and an optional comment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_scheduled_event\",\n    \"args\": {\n        \"webhook\": \"https://httpbin.org/post\",\n        \"schedule_at\": \"2019-09-09T22:00:00Z\",\n        \"payload\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        },\n        \"headers\": [{\n            \"name\":\"header-key\",\n            \"value\":\"header-value\"\n        }],\n        \"comment\": \"sample scheduled event comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Real-Time Data with GraphQL\nDESCRIPTION: Illustrates how to subscribe to real-time data updates using GraphQL in Hasura. Requires a 'users' table with an 'is_online' column and demonstrates real-time data streaming upon user status changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription MySubscription {\n  users(where: { is_online: { _eq: true } }) {\n    id\n    is_online\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 SSO Provider for Hasura with Azure AD\nDESCRIPTION: JSON configuration for setting up Azure AD as an OAuth 2.0 SSO provider in Hasura Enterprise Edition. This includes client ID, authorization URLs, scope, admin roles, and JWT secret configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/azure-ad.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"<Application (client) ID>\",\n    \"name\": \"Azure OAuth2 Login\",\n    \"authorization_url\": \"https://login.microsoftonline.com/<client-id>/oauth2/v2.0/authorize\",\n    \"request_token_url\": \"https://login.microsoftonline.com/<client-id>/oauth2/v2.0/token\",\n    \"scope\": \"openid offline_access\",\n    \"admin_roles\": [\"admin\"],\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"https://login.microsoftonline.com/<Directory (tenant) ID>/discovery/v2.0/keys\",\n      \"issuer\": \"https://login.microsoftonline.com/<Directory (tenant) ID>/v2.0\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": { \"path\": \"$.roles\" },\n        \"x-hasura-default-role\": { \"path\": \"$.roles[0]\" }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Migrating Data with SQL in Hasura\nDESCRIPTION: This SQL example outlines an approach to handling large migrations by creating a new table, migrating data in batches, and finally swapping the tables. This method reduces locking issues during migration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migration-best-practices.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE new_table AS TABLE old_table WITH NO DATA;\nALTER TABLE new_table ADD COLUMN new_column TYPE;\n\nINSERT INTO new_table (columns) SELECT columns FROM old_table WHERE <condition> LIMIT <batch_size>;\n\nDROP TABLE old_table;\nALTER TABLE new_table RENAME TO old_table;\n```\n\n----------------------------------------\n\nTITLE: Analyzing GraphQL Query Performance in Hasura\nDESCRIPTION: Example GraphQL query to fetch authors with a specific name. This query is used to demonstrate performance analysis in Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Mario\" } }) {\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Python Authentication Service\nDESCRIPTION: Full implementation of the authentication service including GraphQL client, password hashing, JWT token generation, and Flask routes for signup and login.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport jwt\nimport json\nimport logging\nimport requests\nfrom flask import Flask, request, jsonify\nfrom argon2 import PasswordHasher\nfrom argon2.exceptions import VerifyMismatchError\nfrom typing import Optional\nfrom dataclasses import dataclass, asdict\n\nHASURA_URL = \"http://graphql-engine:8080/v1/graphql\"\nHASURA_HEADERS = {\"X-Hasura-Admin-Secret\": \"your-secret\"}\nHASURA_JWT_SECRET = os.getenv(\"HASURA_GRAPHQL_JWT_SECRET\", \"a-very-secret-secret\")\n\n################\n# GRAPHQL CLIENT\n################\n\n@dataclass\nclass Client:\n    url: str\n    headers: dict\n\n    def run_query(self, query: str, variables: dict, extract=False):\n        request = requests.post(\n            self.url,\n            headers=self.headers,\n            json={\"query\": query, \"variables\": variables},\n        )\n        assert request.ok, f\"Failed with code {request.status_code}\"\n        return request.json()\n\n    find_user_by_email = lambda self, email: self.run_query(\n        \"\"\"\n            query UserByEmail($email: String!) {\n                user(where: {email: {_eq: $email}}, limit: 1) {\n                    id\n                    email\n                    password\n                }\n            }\n        \"\"\",\n        {\"email\": email},\n    )\n\n    create_user = lambda self, email, password: self.run_query(\n        \"\"\"\n            mutation CreateUser($email: String!, $password: String!) {\n                insert_user_one(object: {email: $email, password: $password}) {\n                    id\n                    email\n                    password\n                }\n            }\n        \"\"\",\n        {\"email\": email, \"password\": password},\n    )\n\n    update_password = lambda self, id, password: self.run_query(\n        \"\"\"\n            mutation UpdatePassword($id: Int!, $password: String!) {\n                update_user_by_pk(pk_columns: {id: $id}, _set: {password: $password}) {\n                    password\n                }\n            }\n        \"\"\",\n        {\"id\": id, \"password\": password},\n    )\n\n#######\n# UTILS\n#######\n\nPassword = PasswordHasher()\nclient = Client(url=HASURA_URL, headers=HASURA_HEADERS)\n\n# ROLE LOGIC FOR DEMO PURPOSES ONLY\n# NOT AT ALL SUITABLE FOR A REAL APP\ndef generate_token(user) -> str:\n    \"\"\"\n    Generates a JWT compliant with the Hasura spec, given a User object with field \"id\"\n    \"\"\"\n    user_roles = [\"user\"]\n    admin_roles = [\"user\", \"admin\"]\n    is_admin = user[\"email\"] == \"admin@site.com\"\n    payload = {\n        \"https://hasura.io/jwt/claims\": {\n            \"x-hasura-allowed-roles\": admin_roles if is_admin else user_roles,\n            \"x-hasura-default-role\": \"admin\" if is_admin else \"user\",\n            \"x-hasura-user-id\": user[\"id\"],\n        }\n    }\n    token = jwt.encode(payload, HASURA_JWT_SECRET, \"HS256\")\n    return token.decode(\"utf-8\")\n\n\ndef rehash_and_save_password_if_needed(user, plaintext_password):\n    if Password.check_needs_rehash(user[\"password\"]):\n        client.update_password(user[\"id\"], Password.hash(plaintext_password))\n\n\n#############\n# DATA MODELS\n#############\n\n@dataclass\nclass RequestMixin:\n    @classmethod\n    def from_request(cls, request):\n        \"\"\"\n        Helper method to convert an HTTP request to Dataclass Instance\n        \"\"\"\n        values = request.get(\"input\")\n        return cls(**values)\n\n    def to_json(self):\n        return json.dumps(asdict(self))\n\n\n@dataclass\nclass CreateUserOutput(RequestMixin):\n    id: int\n    email: str\n    password: str\n\n\n@dataclass\nclass JsonWebToken(RequestMixin):\n    token: str\n\n\n@dataclass\nclass AuthArgs(RequestMixin):\n    email: str\n    password: str\n\n##############\n# MAIN SERVICE\n##############\n\napp = Flask(__name__)\n\n@app.route(\"/signup\", methods=[\"POST\"])\ndef signup_handler():\n    args = AuthArgs.from_request(request.get_json())\n    hashed_password = Password.hash(args.password)\n    user_response = client.create_user(args.email, hashed_password)\n    if user_response.get(\"errors\"):\n        return {\"message\": user_response[\"errors\"][0][\"message\"]}, 400\n    else:\n        user = user_response[\"data\"][\"insert_user_one\"]\n        return CreateUserOutput(**user).to_json()\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_handler():\n    args = AuthArgs.from_request(request.get_json())\n    user_response = client.find_user_by_email(args.email)\n    user = user_response[\"data\"][\"user\"][0]\n    try:\n        Password.verify(user.get(\"password\"), args.password)\n        rehash_and_save_password_if_needed(user, args.password)\n        return JsonWebToken(generate_token(user)).to_json()\n    except VerifyMismatchError:\n        return {\"message\": \"Invalid credentials\"}, 401\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with Nested Article Ratings\nDESCRIPTION: Example showing how to filter authors based on their articles' ratings and simultaneously filter the returned nested articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Source via Hasura Metadata API\nDESCRIPTION: This HTTP request demonstrates how to add a PostgreSQL database source using the Hasura Metadata API. It includes the database name, configuration, and connection details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_source\",\n  \"args\": {\n    \"name\": \"<db_name>\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n          \"from_env\": \"<DB_URL_ENV_VAR>\"\n        },\n        \"pool_settings\": {\n          \"retries\": 1,\n          \"idle_timeout\": 180,\n          \"max_connections\": 50\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Action to Asynchronous with HTTP POST\nDESCRIPTION: Updates an existing action 'create_user' by changing its kind to asynchronous while maintaining the same arguments and output type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/actions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"update_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"definition\":{\n         \"kind\":\"asynchronous\",\n         \"arguments\":[\n            {\n               \"name\":\"username\",\n               \"type\":\"String!\"\n            },\n            {\n               \"name\":\"email\",\n               \"type\":\"String!\"\n            }\n         ],\n         \"output_type\":\"User\",\n         \"handler\":\"https://action.my_app.com/create-user\"\n      },\n      \"comment\": \"Custom action to create user\",\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Permission Check in Hasura\nDESCRIPTION: JSON object defining a permission check that compares user_id with the X-Hasura-User-Id session variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\"user_id\":{\"_eq\":\"X-Hasura-User-Id\"}}\n```\n\n----------------------------------------\n\nTITLE: Nested Aggregation Query in BigQuery\nDESCRIPTION: Shows how to fetch an author by ID along with aggregated statistics of their articles. Demonstrates nested object queries with array relationships between authors and articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/aggregation-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors (where: {id: {_eq: 1}}) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n        avg {\n          rating\n        }\n        max {\n          rating\n        }\n      }\n      nodes {\n        id\n        title\n        rating\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Tables for One-to-One Relationship\nDESCRIPTION: Create database tables for authors and passport information with a unique foreign key relationship\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-one.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nauthors (\n  id SERIAL PRIMARY KEY,\n  name TEXT\n)\n\npassport_info (\n  id SERIAL PRIMARY KEY,\n  owner_id INT NOT NULL\n  passport_number TEXT\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Data with Authorization\nDESCRIPTION: A GraphQL query that retrieves customer information with row-level security applied, only returning data for the authenticated user based on their user ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery CustomerInfo {\n  banking {\n    customers {\n      id\n      first_name\n      last_name\n      account_id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Name in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use the 'where' argument to filter authors based on their name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Sidney\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Age using Less Than Operator in GraphQL\nDESCRIPTION: This query retrieves all users whose age is less than 30 using the _lt operator in a GraphQL query to filter records based on a specified value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { age: { _lt: 30 }}) {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Paths with _matches Operator in GraphQL\nDESCRIPTION: This query uses the _matches operator to find any label path containing the node 'Astronomy'. It matches paths that have 'Astronomy' as any of their nodes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  test(where: { path: { _matches: \"*.Astronomy.*\" } }) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Logical Model in YAML\nDESCRIPTION: An example of defining a Logical Model representing an article entity within YAML. It demonstrates how fields are structured, including data types and nullability, in the `databases.yaml` file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article\n    fields:\n      id:\n        type: integer\n        nullable: false\n      title:\n        type: text\n        nullable: false\n      contents:\n        type: text\n        nullable: false\n      published_date:\n        type: date\n        nullable: true\n      is_published:\n        type: bit\n        nullable: false\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission with Complex Check in Hasura\nDESCRIPTION: This snippet shows how to create an insert permission with a more complex check condition using the `$or` operator. The insert is allowed if the `author_id` matches the session variable and either the `category` is \"editorial\" and `is_reviewed` is false, or the `category` is not \"editorial\". This demonstrates how to use boolean expressions to define granular access control rules.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\",\n                \"$or\" : [\n                    {\n                        \"category\" : \"editorial\",\n                        \"is_reviewed\" : false\n                    },\n                    {\n                        \"category\" : { \"$neq\" : \"editorial\"}\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Author Name in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to filter articles based on the author's name, which is a nested object field. It uses the '_eq' operator to match the exact name 'Sidney'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(where: { author: { name: { _eq: \"Sidney\" } } }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Definitions for Currency Converter Action\nDESCRIPTION: GraphQL type definitions for the currency converter action, including input parameters, response structure, and nested types for the external API integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput InputParams {\n  from: String\n  to: String\n  amt: Int\n}\n\ntype Info {\n  rate: Float\n}\n\ntype Query {\n  amount: Int\n  from: String\n  to: String\n}\n\ntype ConvertedCurrency {\n  date: String\n  info: Info\n  query: Query\n  result: Float\n  success: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Event Data in SQL\nDESCRIPTION: SQL queries to completely purge all event data from both event_invocation_logs and event_log tables, including undelivered events.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.event_invocation_logs;\n\nDELETE FROM hdb_catalog.event_log;\n```\n\n----------------------------------------\n\nTITLE: Prepending JSON to JSONB Column in Hasura GraphQL\nDESCRIPTION: This mutation prepends a JSON object to an existing JSONB column. It uses the _prepend operator to add {\"key0\": \"value0\"} to the beginning of the extra_info column in the article table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation update_extra_info($value: jsonb) {\n  update_article(\n    where: {id: {_eq: 1}},\n    _prepend: {extra_info: $value}  # initial value \"{\"key\": \"value\", \"key1\": \"value1\"}\"\n  ) {\n    affected_rows\n    returning {\n      id\n      extra_info\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Schema for MSSQL Mutations\nDESCRIPTION: This snippet demonstrates the expected GraphQL schema generation for MSSQL mutations, including the mutation root, input type, and mutation response type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mutations-mssql.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype mutation_root {\n    insert_author(objects: [author_insert_input!]!): author_mutation_response\n}\n\ninput author_insert_input{\n    id: Int!\n    name: String!\n}\n\ntype author_mutation_response {\n    affected_rows: Int!\n    returning: [author!]\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Relationships via Hasura API (HTTP)\nDESCRIPTION: This HTTP request illustrates how to bulk create multiple object and array relationships in Hasura using a single API call. It showcases how to define multiple relationship requests within the 'args' array for efficiency.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"mssql_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"<table name>\",\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"foreign_key_constraint_on\": \"<reference column>\"\n        }\n      }\n    },\n    {\n      \"type\": \"mssql_create_array_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"<table name>\",\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"foreign_key_constraint_on\" : {\n            \"table\" : \"<reference table name>\",\n            \"column\" : \"<reference column>\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship to Remote Schema in Hasura GraphQL Engine\nDESCRIPTION: This HTTP POST request creates a new remote relationship on a Remote Schema's type to another Remote Schema. It specifies the relationship name, source and target schemas, and the join condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"create_remote_schema_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"remote_schema\": \"users_api\",\n      \"type\": \"user\",\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"forum_api\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Event Trigger Payload\nDESCRIPTION: Outlines the complete JSON structure of the Event Trigger payload, including timestamps, delivery info, event data, and table information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/payload.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payload\": {\n    \"created_at\": \"<TIMESTAMP>\",\n    \"delivery_info\": {\n      \"current_retry\": \"<RETRY_NUMBER>\",\n      \"max_retries\": \"<MAX_RETRIES>\"\n    },\n    \"event\": {\n      \"data\": {\n        \"new\": \"<OBJECT_OF_COLUMNS_AND_VALUES>\",\n        \"old\": \"<OBJECT_OF_COLUMNS_AND_VALUES|NULL>\"\n      },\n      \"op\": \"<INSERT|UPDATE|DELETE|MANUAL>\",\n      \"session_variables\": {\n        \"x-hasura-role\": \"<ROLE_NAME>\"\n      },\n      \"trace_context\": {\n        \"span_id\": \"<SPAN_ID>\",\n        \"trace_id\": \"<TRACE_ID>\"\n      }\n    },\n    \"id\": \"<UUID_FOR_INVOCATION>\",\n    \"table\": {\n      \"name\": \"<TABLE_NAME>\",\n      \"schema\": \"<SCHEMA_NAME>\"\n    },\n    \"trigger\": {\n      \"name\": \"<TRIGGER_NAME>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query to select articles for author\nDESCRIPTION: This GraphQL query selects the `id`, `title`, and `author_id` fields from the `bigquery_articles` table. It's used to demonstrate the effect of the select permissions defined for the `author` role. It will return only articles where the `author_id` matches the `X-Hasura-User-Id`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n\"query {\\n    bigquery_articles {\\n      id\\n      title\\n      author_id\\n    }\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Defining Native Query in YAML\nDESCRIPTION: This YAML configuration defines a native query named 'article_with_excerpt' with an input argument 'max_length' of type integer. The code specifies the SQL query to execute, and 'returns' specifies the return type as 'article_excerpt'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnative_queries:\n  - root_field_name: article_with_excerpt\n    arguments:\n      max_length:\n        type: integer\n    code:\n      SELECT id, title, (substring(content, 1, {{max_length}}) || (CASE WHEN length(content) < {{max_length}} THEN ''\n      else '...' END)) AS excerpt, date FROM article\n    returns: article_excerpt\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Computed Field\nDESCRIPTION: Removes a computed field 'full_name' from the 'author' table. Includes cascade option to handle dependent objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/computed-field.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"pg_drop_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"schema\":\"public\"\n        },\n        \"source\": \"default\",\n        \"name\":\"full_name\",\n        \"cascade\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL Field Names in YAML\nDESCRIPTION: This snippet demonstrates how to rename auto-generated GraphQL column field names by configuring the `tables.yaml` file. It changes the column `addr` to `address` under the `author` table in the metadata configuration. This requires updating the metadata using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-field-names.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: author\n  configuration:\n    column_config:\n      addr:\n        custom_name: address\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Relationships for Manufacturers and Products\nDESCRIPTION: This query fetches all manufacturers and their associated products, demonstrating how to use relationships in GraphQL queries to retrieve related data in a single query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery ManufacturersAndProducts {\n  manufacturers {\n    id\n    name\n    products {\n      id\n      name\n      price\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Middleware for Action Handlers in JavaScript\nDESCRIPTION: Shows how to create an Express middleware to verify the action secret sent in the request header, ensuring only authorized calls from Hasura are processed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// use authorization for all routes\napp.use(authorizationMiddleware);\n\n// authorize action call\nfunction authorizationMiddleware(req, res, next) {\n  if (correctSecretProvided(req)) next();\n  else res.sendStatus(403);\n}\n\n// check if the secret sent in the header equals to the secret stored as an env variable\nfunction correctSecretProvided(req) {\n  const requiredSecret = process.env.ACTION_SECRET_ENV;\n  const providedSecret = req.headers['ACTION_SECRET'];\n  return requiredSecret === providedSecret;\n}\n\n// Request handler\napp.post('/actionHandler', async (req, res) => {\n  // handler logic\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Query Collection in Hasura\nDESCRIPTION: This snippet demonstrates how to create a new query collection using the Hasura Metadata API. It includes specifying a name, optional comment, and defining queries within the collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_query_collection\",\n      \"args\": {\n          \"name\": \"my_collection\",\n          \"comment\": \"an optional comment\",\n          \"definition\": {\n              \"queries\": [\n                  {\n                      \"name\": \"query_1\",\n                      \"query\": \"query { test { id name } }\"\n                  }\n              ]\n          }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Students by Total Marks - GraphQL\nDESCRIPTION: Fetches a list of students sorted by their computed total marks using a scalar computed field. The example illustrates how to sort based on computed fields in relation to table data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  student(order_by: {total_marks: desc}){\n    id\n    name\n    total_marks\n    physics\n    chemistry\n    maths\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"student\": [\n      {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"total_marks\": 60,\n        \"physics\": 21,\n        \"chemistry\": 22,\n        \"maths\": 17\n      },\n      {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"total_marks\": 59,\n        \"physics\": 23,\n        \"chemistry\": 22,\n        \"maths\": 14\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Full-text Matching with _matches_fulltext Operator in GraphQL\nDESCRIPTION: This query uses the _matches_fulltext operator to match any label path containing a node with the substring 'Astro'. It demonstrates full-text search capabilities on ltree paths.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  test(where: { path: { _matches_fulltext: \"Astro*%\" } }) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to create an insert permission with column presets using the Hasura Metadata API. It configures the `user_id` column to be automatically populated with the value from the `X-Hasura-User-Id` session variable for the `user` role. Requires admin access to the Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/column-presets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\" : \"pg_create_insert_permission\",\n  \"args\" : {\n    \"source\": \"<db_name>\",\n    \"table\" : \"article\",\n    \"role\" : \"user\",\n    \"permission\" : {\n      \"check\" : {},\n      \"set\":{\n        \"user_id\":\"X-Hasura-User-Id\"\n      },\n      \"columns\":[\"title\", \"content\", \"rating\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication with JWK URL in Hasura\nDESCRIPTION: This configuration example demonstrates how to set up JWT authentication using a JWK URL. The JWK URL is used to fetch the public keys for JWT verification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://www.gstatic.com/iap/verify/public_key-jwk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping by fields in an object relationship in GraphQL\nDESCRIPTION: This query demonstrates grouping invoices by a field from a related object (Customer's LastName), showing how to navigate object relationships when defining grouping keys and computing aggregates across these relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    grouping_keys: [{ Customer: { _scalar_field: LastName } }] # Group by the invoice's customer's last name\n    order_by: [{ group_key: { Customer: { LastName: Asc } } }] # sort groups by last name ascending\n  ) {\n    group_key {\n      Customer {\n        # Object relationship navigation\n        LastName # The value of the Customer's last name for each group\n      }\n    }\n    group_aggregate {\n      Total {\n        _sum\n      } # Sum of the totals from all invoices with customers that have the same last name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Text-search SQL Function\nDESCRIPTION: This snippet defines a SQL function `search_articles` which performs a text search on the articles table, filtering based on a supplied search term. It uses SQL syntax and requires that the articles table is tracked.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION search_articles(search text)\nRETURNS SETOF articles AS $$\n    SELECT *\n    FROM articles\n    WHERE\n      title ilike ('%' || search || '%')\n      OR content ilike ('%' || search || '%')\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Querying a Native Query with GraphQL\nDESCRIPTION: Example GraphQL query structure for executing a native query. It shows how to pass arguments, apply filters, sorting, and pagination to the query, and select specific fields from the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  <root field name>(\n    [args: {\"<argument name>\": <argument value>, ...},]\n    [where: ...,]\n    [order_by: ..., distinct_on: ...,]\n    [limit: ..., offset: ...]\n  ) {\n    <field 1>\n    <field 2>\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Data Source with Timeout via API\nDESCRIPTION: Example of adding a Snowflake data source with a 120 second timeout using the Metadata API. This HTTP request demonstrates how to configure the timeout when adding a new data source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/data-connector-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_add_source\",\n  \"args\": {\n    \"name\": \"db\",\n    \"configuration\": {\n      \"template\": null,\n      \"timeout\": { \"seconds\": 120 },\n      \"value\": {\n        \"jdbc_url\": \"jdbc:snowflake://url.snowflakecomputing.com/?user=user&password=password&warehouse=warehouse&db=db&role=role&schema=schema\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Simple GraphQL Query for All Products\nDESCRIPTION: This query fetches all products from the database, returning their id, name, and manufacturer. It demonstrates a basic GraphQL query structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllProducts {\n  products {\n    id\n    name\n    manufacturer\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering InvoiceLine query results, including scalar fields and object relationships like Invoice and UnitPrice.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_order_by @oneOf {\n  # Scalar fields\n  InvoiceLineId: order_by\n  InvoiceId: order_by\n  TrackId: order_by\n  Quantity: order_by\n\n  # Object relationships & Nested object fields\n  Invoice: Invoice_order_by # Order by type for Customer model\n  UnitPrice: Multicurrency_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint with SQL\nDESCRIPTION: SQL statement to add a foreign key constraint to the articles table, linking the author_id column to the id column in the authors table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE articles\nADD FOREIGN KEY (author_id) REFERENCES authors(id);\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Articles using GraphQL\nDESCRIPTION: This example demonstrates a GraphQL query utilizing `distinct_on` to filter articles by title, reducing duplicate results. Without additional prerequisites, it expects a GraphQL environment with a predefined schema matching the query structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(distinct_on: title) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with Where Expression in GraphQL\nDESCRIPTION: The `where` expression snippet filters author records where the rating exceeds 4, retrieving their name and related articles. It assumes a GraphQL schema containing an 'author' field with nested relations to 'articles'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(where: { rating: { _gt: 4 } }) {\n    name\n    articles {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing HTTP Logs for Event Triggers in SQL\nDESCRIPTION: SQL query to delete all HTTP request and response logs stored in the event_invocation_logs table, while preserving the actual event data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.event_invocation_logs;\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with Variables in GraphQL\nDESCRIPTION: This query demonstrates how to use variables in a GraphQL query to fetch articles based on dynamic author_id and title parameters. It makes the query reusable for different inputs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($author_id: Int!, $title: String!) {\n  articles(\n    where: { author_id: { _eq: $author_id }, title: { _ilike: $title } }\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Limits\nDESCRIPTION: Example GraphQL query demonstrating the use of limit parameter with custom function results\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  search_articles(args: { search: \"hasura\" }, limit: 5) {\n    id\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Models and Native Queries with Relationships in Hasura\nDESCRIPTION: This HTTP POST request to the Hasura metadata API demonstrates how to track Logical Models for 'article' and 'author', and create Native Queries with relationships between them. It uses a bulk atomic operation to ensure all models are tracked before coherency checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"pg_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"text\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"default\"\n      }\n    },\n    {\n      \"type\": \"pg_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"name\",\n            \"nullable\": false,\n            \"type\": \"text\"\n          }\n        ],\n        \"name\": \"author\",\n        \"source\": \"default\"\n      }\n    },\n    {\n      \"type\": \"pg_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"author\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"article\",\n        \"source\": \"default\",\n        \"type\": \"query\"\n      }\n    },\n    {\n      \"type\": \"pg_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [\n          {\n            \"name\": \"articles\",\n            \"using\": {\n              \"column_mapping\": {\n                \"id\": \"author_id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"article\"\n            }\n          }\n        ],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Tom'), (2, 'Dan'), (3, 'Philip'), (4, 'Gil'), (5, 'Samir')) as t(\\\"id\\\", \\\"name\\\")\",\n        \"object_relationships\": [],\n        \"returns\": \"author\",\n        \"root_field_name\": \"author\",\n        \"source\": \"default\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Native Query via API\nDESCRIPTION: This HTTP request tracks a native query named 'article_with_excerpt' using the Hasura metadata API. The request specifies the type, source, root field name, arguments, return type, and SQL code of the native query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_native_query\",\n  \"args\": {\n    \"type\": \"query\",\n    \"source\": \"default\",\n    \"root_field_name\": \"article_with_excerpt\",\n    \"arguments\": {\n      \"max_length\": {\n        \"type\": \"integer\"\n      }\n    },\n    \"returns\": \"article_excerpt\",\n    \"code\": \"SELECT id, title, (substring(content, 1, {{max_length}}) || (CASE WHEN length(content) < {{max_length}} THEN '' else '...' END)) AS excerpt, date FROM article\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DDL Operations with run_sql API in Hasura\nDESCRIPTION: Example of using the run_sql API to create a unique index on a films table. This demonstrates how to execute DDL operations that aren't supported by the Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"CREATE UNIQUE INDEX ON films (title);\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Permissions with Row-Level Filter via API\nDESCRIPTION: This HTTP request example shows how to create select permissions for the 'reader' role on an 'article' Logical Model using the API. It includes a filter to allow access only to published articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"role\": \"reader\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"title\",\n        \"contents\",\n        \"date\"\n      ],\n      \"filter\": {\n        \"is_published\": {\"_eq\": true}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with All Articles Published in GraphQL\nDESCRIPTION: This GraphQL query retrieves authors who have all of their articles published. It uses a negation of the inverse condition to achieve the 'all' filter on an array relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      _not: {\n        articles: {is_published: {_neq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema in Hasura GraphQL Engine\nDESCRIPTION: Demonstrates the setup for incorporating an existing GraphQL API as a Remote Schema. Requires access to Hasura's Remote Schemas interface and an existing GraphQL API endpoint. The main purpose is to enhance the Hasura GraphQL API capabilities by linking data from another GraphQL source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhttps://countries.trevorblades.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregates of Scalar Fields in GraphQL\nDESCRIPTION: GraphQL query demonstrating aggregation over multiple fields in the Invoice collection, including counting objects and finding maximum/sum values for specific fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_aggregate {\n    InvoiceDate {\n      _max # The most recent invoice date\n    }\n    Total {\n      _max # The biggest total on an invoice\n      _sum # The total spent across all invoices\n    }\n    _count # The number of invoices\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Webhook Implementation\nDESCRIPTION: Complete Node.js implementation of the webhook server using Express and Nodemailer to handle new user events and send welcome emails\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Create a Nodemailer transporter using Ethereal email service\n// Ideally, this configuration would be stored somewhere else\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create a testing account. ' + err.message);\n    return process.exit(1);\n  }\n\n  // If all goes as planned, here's the console telling us we're 👍\n  console.log('Credentials obtained, listening on the webhook...');\n\n  // Create a transporter object for nodemailer\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass,\n    },\n  });\n\n  // Our route for the webhook\n  app.post('/new-user', async (req, res) => {\n    // confirm the auth header is correct — ideally, you'd keep the secret in an environment variable\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      return res.status(401).json({\n        message: 'Unauthorized',\n      });\n    }\n\n    // Get the user's name and email from the request body\n    const name = req.body.event.data.new.name;\n    const email = req.body.event.data.new.email;\n\n    // Create the notification email\n    const message = {\n      from: 'SuperStore.com <sender@SuperStore.com>',\n      to: `${name} <${email}>`,\n      subject: `Welcome, ${name.split(' ')[0]}!`,\n      text: `Hi ${name.split(' ')[0]},\\n\\nWe're glad to have you as a member!`,\n    };\n\n    // Send the message using the Nodemailer transporter\n    const info = await transporter.sendMail(message);\n\n    // Log the message info\n    console.log(`\\nWelcome email sent to ${name}: ${nodemailer.getTestMessageUrl(info)}`);\n\n    // Return a JSON response to the client\n    res.json({\n      message: 'Welcome email sent!',\n    });\n  });\n\n  // Start the server\n  app.listen(4000, () => {\n    console.log('Server started on port 4000');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Across Joined Data Sources with GraphQL\nDESCRIPTION: A GraphQL query that retrieves customer information from the banking database along with related home information from the real estate database using a remote relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery HomeInfo {\n  banking {\n    customers {\n      id\n      last_name\n      home {\n        year_built\n        last_sold\n        price\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with Docker Compose\nDESCRIPTION: Commands to clone and start the Hasura GraphQL Engine using Docker Compose\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n- Clone this repo on a machine where you'd like to deploy graphql engine\n- `docker compose up -d`\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation Query in BigQuery\nDESCRIPTION: Demonstrates fetching articles with aggregated data including count, sum, average and maximum of ratings. The query returns both aggregate statistics and individual article nodes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/aggregation-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles_aggregate {\n    aggregate {\n      count\n      sum {\n        rating\n      }\n      avg {\n        rating\n      }\n      max {\n        rating\n      }\n    }\n    nodes {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Tracking Multiple Tables in Hasura\nDESCRIPTION: Demonstrates tracking multiple tables simultaneously using pg_track_tables, with custom configurations for each table. More efficient than tracking tables individually.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\",\n        \"configuration\": {\n          \"custom_root_fields\": {\n            \"select\": \"Authors\",\n            \"select_by_pk\": \"Author\",\n            \"select_aggregate\": \"AuthorAggregate\",\n            \"insert\": \"AddAuthors\",\n            \"insert_one\":\"AddAuthor\",\n            \"update\": \"UpdateAuthors\",\n            \"update_by_pk\": \"UpdateAuthor\",\n            \"delete\": \"DeleteAuthors\",\n            \"delete_by_pk\": \"DeleteAuthor\"\n          },\n          \"column_config\": {\n            \"id\": {\n              \"custom_name\": \"authorId\",\n              \"comment\": \"The ID of the Author\"\n            }\n          },\n          \"comment\": \"Authors of books\"\n        },\n        \"apollo_federation_config\": {\n          \"enable\": \"v1\"\n        }\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\",\n        \"configuration\": {\n          \"custom_root_fields\": {\n            \"select\": \"Books\",\n            \"select_by_pk\": \"Book\",\n            \"select_aggregate\": \"BookAggregate\",\n            \"insert\": \"AddBooks\",\n            \"insert_one\":\"AddBook\",\n            \"update\": \"UpdateBooks\",\n            \"update_by_pk\": \"UpdateBook\",\n            \"delete\": \"DeleteBooks\",\n            \"delete_by_pk\": \"DeleteBook\"\n          }\n        },\n        \"apollo_federation_config\": {\n          \"enable\": \"v1\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Preset in YAML Metadata\nDESCRIPTION: Demonstrates how to configure a column preset for user ID during insert operations using CLI metadata configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-presets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\ninsert_permissions:\n  - role: user\n    permission:\n      check: {}\n      set:\n        id: x-hasura-User-Id\n      columns:\n        - id\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Project Metadata using CLI\nDESCRIPTION: This command exports the current metadata of a Hasura project to the 'metadata' directory in YAML format. It requires the project's admin secret and endpoint URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/github-integration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata export --admin-secret <your-project-admin-secret> --endpoint <your-hasura-cloud-project-url>\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Using Object Relationship\nDESCRIPTION: GraphQL query to fetch articles with their associated authors, demonstrating the use of the object relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    id\n    title\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Database Connection\nDESCRIPTION: This snippet demonstrates a `databases.yaml` file, configuring a PostgreSQL database connection named `default`. It specifies the database URL using an environment variable, the isolation level, and includes table definitions from another file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n- name: default\n  kind: postgres\n  configuration:\n    connection_info:\n      use_prepared_statements: false\n      database_url:\n        from_env: PG_DATABASE_URL\n      isolation_level: read-committed\n  tables: '!include default/tables/tables.yaml'\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Action Handler in NodeJS\nDESCRIPTION: Express.js handler implementation that processes the action request and returns the sum of numbers\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst handler = (req, resp) => {\n  // You can access their arguments input at req.body.input\n  const { numbers } = req.body.input;\n\n  // perform your custom business logic\n  // return an error or response\n  try {\n    return resp.json({\n      sum: numbers.reduce((s, n) => s + n, 0),\n    });\n  } catch (e) {\n    console.error(e);\n    return resp.status(500).json({\n      message: 'unexpected',\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Using Manual Relationship\nDESCRIPTION: GraphQL query demonstrating how to fetch authors with their average ratings using the created relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    avg_rating {\n      avg\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors and Articles with Multiple Arguments in GraphQL\nDESCRIPTION: This GraphQL query fetches a list of authors and their published articles. It uses multiple arguments including 'where' for filtering, 'order_by' for sorting, and 'limit' to restrict the number of results. The query filters for published articles, sorts them by publication date in descending order, and limits the results to 2 articles per author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/multiple-arguments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors {\n    id\n    name\n    articles(\n      where: {is_published: {_eq: true}},\n      order_by: {published_on: desc},\n      limit: 2\n    ) {\n      id\n      title\n      is_published\n      published_on\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relay Query/Subscription Basic Syntax\nDESCRIPTION: Base syntax structure for Relay-compliant GraphQL queries and subscriptions, showing the core components of connection objects and arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nquery|subscription [<op-name>] {\n  connection-object [([argument])]{\n    connection-object-fields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Hasura Actions Create\nDESCRIPTION: The specific command options available for the 'hasura actions create' command, including deriving from operations, specifying kind, webhook, and enabling codegen.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --derive-from string   derive action from a Hasura operation\n-h, --help                 help for create\n    --kind string          kind to use in Action (env \"HASURA_GRAPHQL_ACTIONS_KIND\")\n    --webhook string       webhook to use in Action (env \"HASURA_GRAPHQL_ACTIONS_HANDLER_WEBHOOK_BASEURL\")\n    --with-codegen         create Action along with codegen\n```\n\n----------------------------------------\n\nTITLE: React JSX iframe Component for Actions Video\nDESCRIPTION: Embedded YouTube video iframe component showing Hasura Actions tutorial with security settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n    src=\"https://www.youtube.com/embed/Fqb6Ar3t_C4\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n```\n\n----------------------------------------\n\nTITLE: Forward Pagination Query Example\nDESCRIPTION: Example of implementing forward pagination using first and after parameters in a Relay query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article_connection(first: 2, after: \"eyJpZCIgOiAzfQ==\") {\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        title\n        content\n        author_id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Top-Level Mutations in a Single GraphQL Request\nDESCRIPTION: This example demonstrates how to delete all article objects by a specific author and update the author information in the same GraphQL mutation request. The mutations run sequentially in a transaction.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/multiple-mutations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation reset_author {\n  delete_article (\n    where: {author_id: {_eq: 6}}\n  ) {\n    affected_rows\n  }\n  update_author (\n    where: {id: {_eq: 6}}\n    _set: {name: \"Cory\"}\n  ) {\n    returning {\n      id\n      name\n      articles {\n        id\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Field with Session Variable Access in PostgreSQL\nDESCRIPTION: This SQL function creates a computed field that can access Hasura session variables directly. It checks if the current user has liked an article by accessing the user ID from the session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION article_liked(article_row article, hasura_session json)\nRETURNS boolean AS $$\n  SELECT EXISTS (\n    SELECT 1\n    FROM liked_article A\n    WHERE A.user_id = hasura_session ->> 'x-hasura-user-id' AND A.article_id = article_row.id\n  );\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Relationships via API\nDESCRIPTION: Bulk API request to create both object and array relationships between tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"mssql_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"articles\",\n        \"name\": \"author\",\n        \"using\": {\n          \"foreign_key_constraint_on\": \"author_id\"\n        }\n      }\n    },\n    {\n      \"type\": \"mssql_create_array_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"authors\",\n        \"name\": \"articles\",\n        \"using\": {\n          \"foreign_key_constraint_on\" : {\n            \"table\" : \"articles\",\n            \"column\" : \"author_id\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Limited Select Permission for MSSQL Table in Hasura\nDESCRIPTION: This snippet shows how to create a select permission for the 'guest' role with limited root field access. It allows selection of all columns and rows but restricts query and subscription root fields to only 'select_by_pk'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"guest\",\n        \"source\": \"default\",\n        \"permission\" : {\n            \"columns\" : \"*\",\n            \"filter\" : {},\n            \"query_root_fields\": [\"select_by_pk\"],\n            \"subscription_root_fields\": [\"select_by_pk\"]\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationships via Hasura Metadata API\nDESCRIPTION: HTTP POST request to create an array relationship using the Hasura Metadata API. This snippet demonstrates the pg_create_array_relationship operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_create_array_relationship\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"table\": \"<table name>\",\n      \"name\": \"<relationship name>\",\n      \"using\": {\n         \"foreign_key_constraint_on\" : {\n            \"table\" : \"<reference table name>\",\n            \"column\" : \"<reference column>\"\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Insert Mutation with Default Timestamp\nDESCRIPTION: GraphQL mutation demonstrating insert operation where a timestamp field uses its default value\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/postgres-defaults.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  insert_article(\n    objects: [\n      {\n        title: \"GraphQL manual\",\n        author_id: 11\n      }\n    ]) {\n    returning {\n      id\n      title\n      created_at\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with No Published Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches all authors who have no published articles. It demonstrates how to filter when none of the nested objects should satisfy a condition using the '_not' operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_authors(\n    where: {\n      _not: {\n        articles: {is_published: {_eq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Logical Models via API\nDESCRIPTION: This HTTP request shows how to create nested logical models for 'article' and 'author' using a bulk atomic operation. It demonstrates referencing between models and the use of array types for relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\":\n  [\n    {\n      \"type\": \"snowflake_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"article\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"title\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"contents\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"author_id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"author\",\n            \"type\":\n              {\n                \"logical_model\": \"author\",\n              },\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"snowflake_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"author\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"name\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"articles\",\n            \"type\":\n              {\n                \"array\":\n                  {\n                    \"logical_model\": \"article\"\n                  }\n              }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client with WebSocket Support\nDESCRIPTION: Complete configuration for Apollo Client that handles both HTTP operations and WebSocket subscriptions using a split link.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpLink = new HttpLink({\n  uri: 'https://<YOUR-HASURA-INSTANCE-URL>/v1/graphql'\n});\n\nconst wsLink = new GraphQLWsLink(createClient({\n  url: 'wss://<YOUR-HASURA-INSTANCE-URL>/v1/graphql',\n}));\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Hello World Query\nDESCRIPTION: This snippet defines a simple GraphQL schema with a single 'hello' query that returns a String. It demonstrates the basic structure of a GraphQL type definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/google-cloud-functions/nodejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello:  String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Currency Converter Action with GraphQL\nDESCRIPTION: A GraphQL type definition for a currency converter action that connects to an external REST API, specifying the query structure and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  currencyConverter(CurrencyInfo: InputParams!): ConvertedCurrency\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Author Query Example with Filtering and Ordering\nDESCRIPTION: Example GraphQL query that retrieves author data filtered by article ratings and ordered by name. Demonstrates how to use where conditions and ordering in Hasura queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorQuery {\n  author(where: { articles: { rating: { _gte: 4 } } }, order_by: { name: asc }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered and Ordered Aggregation in GraphQL\nDESCRIPTION: GraphQL query showing how to filter, order, and paginate objects before aggregating them using the filter_input parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_aggregate(\n    filter_input: {\n      where: { Total: { _gt: 100 } } # Only include invoices with over $100 spend\n      order_by: [{ InvoiceDate: Desc }, { Customer: { LastName: Asc } }] # Order by InvoiceDate desc, then Customer's Last Name asc\n      offset: 10 # Skip the first 10 results\n      limit: 10 # Only return the first 10 results after skipping\n    }\n  ) {\n    Total {\n      _max # The highest invoice total within the selected objects\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Array Relationships in GraphQL\nDESCRIPTION: Demonstrates how to use the auto-generated aggregate fields for array relationships in MySQL. This query counts the number of articles for each author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mysql-relationships.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  autors {\n    articles_aggregate {\n\t  aggregate {\n\t    count\n\t  }\n\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables via Hasura Metadata API\nDESCRIPTION: HTTP POST request to track a table and expose it over the GraphQL API using the Hasura Metadata API. This snippet demonstrates the pg_track_table operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_track_table\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"schema\": \"public\",\n      \"name\": \"<table_name>\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Track Article and Author Models via API\nDESCRIPTION: This HTTP request uses the `bulk_atomic` operation to track both 'article' and 'author' logical models simultaneously.  This allows the 'article' model to reference the 'author' model and vice versa, using `logical_model` and `array` types for the references.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\":\n  [\n    {\n      \"type\": \"pg_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"article\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"title\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"contents\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"author_id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"author\",\n            \"type\":\n              {\n                \"logical_model\": \"author\",\n              },\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"pg_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"author\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"name\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"articles\",\n            \"type\":\n              {\n                \"array\":\n                  {\n                    \"logical_model\": \"article\"\n                  }\n              }\n          }\n        ]\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example: Fuzzy Match Search SQL Function\nDESCRIPTION: This snippet defines a SQL function `search_properties` for performing a fuzzy text search on property addresses. It ranks results by similarity and limits the output to five entries. Requires a pre-existing and tracked properties table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION search_properties(search text)\nRETURNS SETOF properties AS $$\n    SELECT *\n    FROM properties\n    WHERE\n      search <% (unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode)\n    ORDER BY\n      similarity(search, (unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode)) DESC\n    LIMIT 5;\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Metadata Export Examples\nDESCRIPTION: Examples demonstrating different ways to use the metadata export command, including basic usage, using admin secret, and specifying a custom endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_export.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Export metadata and save it in migrations/metadata.yaml file:\nhasura metadata export\n\n# Use with admin secret:\nhasura metadata export --admin-secret \"<admin-secret>\"\n\n# Export metadata from another instance specified by the flag:\nhasura metadata export --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query for Data Retrieval\nDESCRIPTION: This snippet demonstrates the structure of a POST request to execute a SQL query that retrieves data, specifically selecting user_id and first_name from the author table, limiting the results to 2 rows. The request includes the content type and X-Hasura-Role header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"select user_id, first_name from author limit 2;\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a table as an enum in Hasura using Metadata API\nDESCRIPTION: This HTTP request demonstrates how to track a table as an enum in Hasura using the Metadata API's `pg_track_table` endpoint. The `is_enum` argument is set to `true` to designate the table as an enum.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_track_table\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"schema\\\": \\\"public\\\",\\n    \\\"name\\\": \\\"user_role\\\",\\n    \\\"is_enum\\\": true\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Artists and Albums\nDESCRIPTION: Sample GraphQL query demonstrating how to fetch artists and their associated albums through the configured data connector.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  artists {\n    name\n    albums {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA based JWT for Hasura with X509 Certificate\nDESCRIPTION: Example of configuring RSA based JWT authentication for Hasura GraphQL Engine using a public key as X509 certificate. It uses RS512 algorithm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RS512\",\n  \"key\": \"-----BEGIN CERTIFICATE-----\\nMIIDHDCCAgSgAwIBAgIINw9gva8BPPIwDQYJKoZIhvcNAQEFBQAwMTEvMC0GA1UE\\nAxMmc2VjdXJldG9rZW4uc3lzdGVtLmdzZXJ2aWNlYWNjb3VudC5jb20wHhcNMTgQt7dIsMTIU9k1SUrFviZOGnmHWtIAw\\nmtYBcM9I0f9/ka45JIRp5Y1NKpAMFSShs7Wv0m1JS1kXQHdJsPSmjmDKcwnBe3R/\\nTU3foRRywR/3AJRM15FNjTqvUm7TeaW16LkkRoECAwEAAaM4MDYwDAYDVR0TAQH/\\nBAIwADAOBgNVHQ8BAf8EBAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwIwDQYJ\\nKoZIhvcNAQEFBQADggEBADfY2DEmc2gb8/pqMNWHYq/nTYfJPpK4VA9A0lFTNeoq\\nzmnbGwhKj24X+Nw8trsvkrKxHvCI1alDgBaCyzjGGvgOrh8X0wLtymp1yj6PWwee\\nR2ZPdUaB62TCzO0iRv7W6o39ey+mU/FyYRtxF0ecxG2a0KNsIyFkciXUAeC5UVDo\\nBNp678/SDDx9Ltuxc6h56a/hpBGf9Yzhr0RvYy3DmjBs6eopiGFmjnOKNxQrZ5t2\\n339JWR+yiGEAtoHqk/fINMf1An6Rung1xYowrm4guhCIVi5unAvQ89fq0I6mzPg6\\nLhTpeP0o+mVYrBmtYVpDpv0e71cfYowSJCCkod/9YbY=\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Object Type in GraphQL SDL\nDESCRIPTION: Demonstrates how to define a basic object type called UserInfo with two fields: accessToken and userId. This type represents the structure of data that can be returned by a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype UserInfo {\n  accessToken: String!\n  userId: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Native Query with Table Relationships\nDESCRIPTION: Example GraphQL query that demonstrates accessing data from a table relationship defined on a Native Query. The query retrieves article titles and their associated author names from the authors table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_articles {\n    title\n\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Relationship with Hasura Metadata API in HTTP\nDESCRIPTION: This snippet shows an HTTP POST request for deleting a remote relationship using the Hasura metadata API. It requires an existing remote relationship to delete, as shown in the parameters 'name', 'source', and 'table'. Proper setup of Hasura with admin access is necessary. Outputs the status of deletion while inputs include names of the relationship, source, and table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"citus_delete_remote_relationship\",\n    \"args\" : {\n       \"source\": \"name_of_the_source\",\n       \"table\": {\n          \"name\":\"users\",\n          \"schema\":\"public\"\n       },\n       \"name\":\"name_of_the_remote_relationship\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Logical Models in YAML\nDESCRIPTION: This snippet describes how to define Logical Models for MongoDB collections using YAML which is added to the appropriate section in `databases.yaml`. It creates a structure that maps out fields with their types and other characteristics for use in GraphQL APIs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<MongoDB field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Profiles Table Schema in SQL\nDESCRIPTION: SQL schema for creating a simple 'profiles' table with an auto-incrementing integer primary key and a text field for names. This is used as an example table structure when getting started with Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/getting-started-cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nprofiles (\n  id SERIAL PRIMARY KEY, -- serial -> auto-incrementing integer\n  name TEXT\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ArrRelUsing Schema in Hasura\nDESCRIPTION: Specifies the schema for array relationships, including foreign key constraints and manual configuration options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foreign_key_constraint_on\": \"ArrRelUsingFKeyOn\",\n  \"manual_configuration\": \"ArrRelUsingManualMapping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Tables in Single GraphQL Request\nDESCRIPTION: GraphQL query that fetches both authors and articles data in a single request. The query limits results to 2 records for each table and retrieves basic fields like id, name for authors and id, title for articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/multiple-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(limit: 2) {\n    id\n    name\n  }\n  bigquery_articles(limit: 2) {\n    id\n    title\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bigquery_authors\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Justin\"\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Beltran\"\n      }\n    ],\n    \"bigquery_articles\": [\n      {\n        \"id\": \"1\",\n        \"title\": \"sit amet\"\n      },\n      {\n        \"id\": \"2\",\n        \"title\": \"a nibh\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Row-Level Permissions with JSON-like Syntax\nDESCRIPTION: Defines a row-level permission rule using JSON-like syntax, where access is granted if 'id' equals 'X-Hasura-User-Id'. This targets setting row permissions in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{\n  “id”: {\n    “_eq”: “X-Hasura-User-Id”\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model via Metadata API\nDESCRIPTION: This snippet demonstrates how to create a Logical Model using Hasura's metadata API by POSTing JSON data. It specifies model details and fields, and enables tracking operations programmatically.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mongo_track_tables\",\n    \"resource_version\": 1,\n    \"args\": {\n        \"allow_warnings\": true,\n        \"tables\": [\n            {\n                \"source\": \"default\",\n                \"table\": [\n                    \"<collection_name>\"\n                ],\n                \"logical_model\": \"<logical_model_name>\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Variable Access Function in PostgreSQL\nDESCRIPTION: PL/SQL function demonstrating how to access Hasura session variables within custom functions\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_13\n\nLANGUAGE: plsql\nCODE:\n```\n-- single text column table\nCREATE TABLE text_result(\n  result text\n);\n\n-- simple function which returns the hasura role\n-- where 'hasura_session' will be session argument\nCREATE FUNCTION get_session_role(hasura_session json)\nRETURNS SETOF text_result AS $$\n    SELECT q.* FROM (VALUES (hasura_session ->> 'x-hasura-role')) q\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Creating Inherited Roles using YAML\nDESCRIPTION: Defines a new inherited role in a YAML file, specifying a role name and a set of existing roles that it should inherit from. This requires editing the 'metadata -> inherited_roles.yaml' file and using Hasura's command-line interface to apply the changes by executing 'hasura metadata apply'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- role_name: sample_inherited_role\n  role_set:\n    - user\n    - editor\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC Connection String Format\nDESCRIPTION: Format and examples of JDBC connection strings for connecting Hasura to Oracle databases, including options for default and custom ports.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:oracle:thin:<username>/<password>@<hostname>:<port>:<service-name>\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok HTTP Tunnel for Local Webhook Development\nDESCRIPTION: This command starts an ngrok HTTP tunnel on port 4000, allowing a locally hosted webhook to be accessible via a public URL. This is useful for development and testing of the webhook endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Adding an MS SQL Server Database Source with Hasura Metadata API\nDESCRIPTION: This snippet shows how to use the mssql_add_source API to connect an MS SQL Server database to Hasura. It includes configuration for connection string, pool settings, and customization options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_add_source\",\n  \"args\": {\n    \"name\": \"mssql1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"connection_string\": {\n           \"from_env\": \"<CONN_STRING_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"max_connections\": 50,\n          \"idle_timeout\": 180\n        }\n      }\n    },\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spec for Successful Response from Webhook - HTTP\nDESCRIPTION: This snippet illustrates the successful response format that the webhook must return with session variables to allow the GraphQL request to proceed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-User-Id\": \"25\",\n    \"X-Hasura-Role\": \"user\",\n    \"X-Hasura-Is-Owner\": \"true\",\n    \"X-Hasura-Custom\": \"custom value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with No Published Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches authors who have none of their articles published. It demonstrates how to use negation to filter for the absence of a condition in nested objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      _not: {\n        articles: {is_published: {_eq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dev Mode for Debugging in Hasura\nDESCRIPTION: This snippet demonstrates how to enable dev mode for debugging in Hasura GraphQL Engine and configure admin internal errors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_DEV_MODE=true\n\n# flag\n--dev-mode\n```\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS=false\n\n# flag\n--admin-internal-errors false\n```\n\n----------------------------------------\n\nTITLE: Creating a View in PostgreSQL\nDESCRIPTION: SQL statement to create a view that calculates the average article rating for each author. This view joins the article and author tables, groups by author_id, and computes the average rating.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/views.mdx#2025-04-17_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW author_average_rating AS\n  SELECT author_id, avg(rating)\n    FROM article\n    GROUP BY author_id\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Queries\nDESCRIPTION: Demonstrates how to use variables in a GraphQL query to fetch articles by author_id and title. The query accepts two variables: author_id (Integer) and title (String) to filter articles dynamically.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($author_id: Int!, $title: String!) {\n  articles(\n    where: { author_id: { _eq: $author_id }, title: { _ilike: $title } }\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using And Expression for Filtering in GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates filtering articles using `_and` to only include those with a rating greater than 4 and a publication date after 2018. Requires a schema with corresponding 'article' fields for rating and published date.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(where: { _and: [{ rating: { _gt: 4 } }, { published_on: { _gt: \"2018-01-01\" } }] }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data into Postgres with psql copy Command\nDESCRIPTION: psql command to import data from a CSV file into a specific table. It uses the \\copy command with delimiter specification and includes the CSV header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/import-data-from-csv.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\\copy <table_name> from '</path/to/file/filename.csv>' delimiter ',' CSV HEADER;\n\n# for example\n\\copy profile from '/Users/sarahlewis/documents/profile.csv' delimiter ',' CSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Update Articles Based on Rating\nDESCRIPTION: In this snippet, a mutation updates articles with a low rating, setting their rating and publication status. It also shows how to use variables for dynamic input in the mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_article {\n  update_article(\n    where: {rating: {_lte: 2}},\n    _set: {\n      rating: 1,\n      is_published: false\n    }\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      rating\n      is_published\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_article($rating: Int, $changes: article_set_input) {\n  update_article(\n    where: {rating: {_lte: $rating}},\n    _set: $changes\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      rating\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Functions Using Metadata YAML\nDESCRIPTION: This YAML snippet configures a function to be exposed over the Hasura GraphQL API by editing the functions.yaml file in the metadata directory. It's crucial for ensuring the function is part of the Hasura metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- function:\n    schema: public\n    name: <function name>\n```\n\n----------------------------------------\n\nTITLE: Response for Relay Mutation in GraphQL\nDESCRIPTION: This snippet shows the expected response format for the Relay mutation. It includes the number of affected rows and the returning data with the Relay-specific 'id' (a base64 encoded string), along with the name and username of the inserted author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/mutation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insert_author\": {\n      \"affected_rows\": 1,\n      \"returning\": [\n        {\n          \"id\": \"WzEsICJwdWJsaWMiLCAiYXV0aG9yIiwgOF0=\",\n          \"name\": \"Chris\",\n          \"username\": \"urschris\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Insert Permission with Hasura Schema/Metadata API\nDESCRIPTION: This example demonstrates how to drop an existing insert permission for the 'user' role on the 'article' table using the drop_insert_permission API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Request Structure using JSON\nDESCRIPTION: This JSON snippet illustrates the basic structure of a mutation request sent to the `graphql-engine`. It includes `relationships` and an array of `operations`, each specifying a mutation type (`insert`, `update`, or `delete`) along with `returning_fields` to be included in the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_54\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"relationships\": [], // Any relationships between tables are described in here in the same manner as in queries\n  \"operations\": [ // A mutation request can contain multiple mutation operations\n    {\n      \"type\": \"insert\", // Also: \"update\" and \"delete\"\n      \"returning_fields\": { // The fields to return for every affected row\n        \"ArtistId\": {\n          \"type\": \"column\",\n          \"column\": \"ArtistId\",\n          \"column_type\": \"number\"\n        }\n      },\n      ... // Other operation type-specific properties, detailed below\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key with Run SQL API\nDESCRIPTION: HTTP request to add a foreign key constraint using Hasura's run_sql schema API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"ALTER TABLE articles ADD FOREIGN KEY (author_id) REFERENCES authors(id);\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Regex User Search with _iregex in GraphQL\nDESCRIPTION: This query finds users whose names match the case-insensitive regex '^joh?n$', which matches 'John' and 'Jon' using the _iregex operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { name: { _iregex: \"/^joh?n$/i\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Filtered and Sorted Articles in GraphQL\nDESCRIPTION: GraphQL query that fetches authors and their published articles, using multiple arguments to filter for published articles, sort them by publication date in descending order, and limit the results to 2 articles per author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/multiple-arguments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles(\n      where: {is_published: {_eq: true}},\n      order_by: {published_on: desc},\n      limit: 2\n    ) {\n      id\n      title\n      is_published\n      published_on\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weaviate Vector Search Query Example\nDESCRIPTION: GraphQL query template for performing vector-based text search in Weaviate using nearText feature\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Get {\n    <CLASS_NAME> (nearText: {\n      concepts: [\"<TEXT_TO_SEARCH>\"]\n    }) {\n      <FIELDS_TO_SEARCH>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @include Directive in GraphQL Queries\nDESCRIPTION: This query illustrates the use of the @include directive in GraphQL. It conditionally includes the 'publisher' field based on a boolean variable, allowing for dynamic field selection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  articles {\n    title\n    publisher @include(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Options for Hasura Deploy Command\nDESCRIPTION: Lists all the command-specific options available for the 'hasura deploy' command, including admin secret, TLS configuration, interactive mode settings, and options for seeds and transactions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_deploy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for deploy\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n    --no-transaction                 disable transaction for migration (env \"HASURA_GRAPHQL_NO_TRANSACTION\")\n    --with-seeds                     apply available seeds data to databases\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Aggregate Fields Selection Type\nDESCRIPTION: Defines a GraphQL type for selecting aggregate fields on Customer objects. Includes count functions, scalar field aggregations, and nested object relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_70\n\nLANGUAGE: graphql\nCODE:\n```\ntype Customer_aggregate_fields {\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  CustomerId: Int_aggregate_fields!\n  FirstName: String_aggregate_fields!\n  LastName: String_aggregate_fields!\n  Address: Address_aggregate_fields!\n  MobilePhone: String_aggregate_fields!\n  SupportRepId: Int_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Object Sorting in GraphQL\nDESCRIPTION: Shows how to sort both parent (authors) and nested child objects (articles) simultaneously using multiple order_by arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors (order_by: {name: asc}) {\n    id\n    name\n    articles(order_by: {rating: desc}) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Date Range Using _and Operator in GraphQL\nDESCRIPTION: This GraphQL query shows how to use the _and operator to filter articles published within a specific time frame. It combines two conditions to select articles published in the year 2017.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/boolean-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    where: {\n      _and: [\n        { published_on: {_gte: \"2017-01-01\"}},\n        { published_on: {_lte: \"2017-12-31\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Distinct Query Structure in GraphQL\nDESCRIPTION: GraphQL schema showing the structure of distinct_on query argument for employees table, including the enum type definition for selectable columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/distinct-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nemployees (\n  distinct_on: [employees_select_column]\n  order_by: [employees_order_by]\n): [employees]!\n\n# select column enum type for \"employees\" table\nenum employees_select_column {\n  id\n  name\n  department\n  salary\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Field Names via HTTP POST Request\nDESCRIPTION: Illustrates how to use an HTTP POST request to customize column field names using the Hasura metadata API. Updates the column name configuration by setting `addr` to `address` for the `author` table. Requires administrative access with appropriate Hasura Role headers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-field-names.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"author\",\n    \"configuration\": {\n      \"column_config\": {\n        \"addr\": {\n          \"custom_name\": \"address\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index Concurrently with No Transaction\nDESCRIPTION: This snippet shows how to create an index on the users table without wrapping the command in a transaction block. The `no_transaction` flag is set to true, allowing for operations that normally cannot be executed in transactions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"CREATE INDEX CONCURRENTLY idx_user_email ON users(email);\",\n        \"no_transaction\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Successful Health Check in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet shows the JSON structure of a successful health check log in Hasura GraphQL Engine. It includes details such as the source name, status, timestamp, and internal configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"timestamp\": \"2022-07-28T12:23:56.555+0530\",\n  \"type\": \"health-check-log\",\n  \"detail\": {\n    \"source_name\": \"mssql\",\n    \"status\": \"OK\",\n    \"timestamp\": \"2022-07-28T06:53:56.555Z\",\n    \"error\": null,\n    \"internal\": {\n      \"interval\": 5,\n      \"max_retries\": 3,\n      \"retry_iteration\": 0,\n      \"timeout\": 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Admin Permission Example\nDESCRIPTION: JSON permission expression to allow project admins access to project-specific data\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"project_id\": {\n    \"_eq\": \"X-Hasura-Project-Id\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hasura Helm Repository\nDESCRIPTION: Command to add the Hasura Helm repository to your local Helm installation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add hasura https://hasura.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Adding Check Constraint using Hasura API\nDESCRIPTION: A JSON-formatted HTTP POST request to Hasura's schema API to add a SQL check constraint. It requires setting 'Content-Type' and 'X-Hasura-Role' headers correctly for authentication and authorization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"ALTER TABLE author ADD CONSTRAINT authors_rating_check CHECK (rating > 0 AND rating <= 10);\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Nested Array Objects in Hasura GraphQL\nDESCRIPTION: This mutation replaces all existing nested array objects of an author with a new list of articles. It first deletes all existing articles for the author, then inserts new ones. This workaround is necessary due to Hasura's current lack of support for nested updates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_16\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation updateAuthorArticles($author_id: Int!) {\n  delete_articles(\n    where: {author_id: {_eq: $author_id}}\n  ) {\n    affected_rows\n  }\n  insert_articles(\n    objects: [\n      {\n        author_id: $author_id,\n        title: \"title\",\n        content: \"some content\"\n      },\n      {\n        author_id: $author_id,\n        title: \"another title\",\n        content: \"some other content\"\n      }\n    ]\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Author Mutation with GraphQL\nDESCRIPTION: Sample GraphQL mutation for updating an author record where the input will be validated by a webhook before the database transaction begins.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_author {\n  update_author(where: { id: { _eq: 3 } }, _set: { name: \"Jane\" }) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Hasura Project\nDESCRIPTION: This bash command initializes a Hasura project in a directory named `demo-project`. It connects to the Hasura endpoint specified by the `--endpoint` flag and uses the provided admin secret. The command creates a `config.yaml` file, a `migrations` directory, a `metadata` directory, and a `seeds` directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura init demo-project --endpoint https://docs-demo.hasura.app --admin-secret mySecret\"\n```\n\n----------------------------------------\n\nTITLE: Setting User Row Permissions in JSON for Hasura\nDESCRIPTION: This JSON snippet configures row-level permissions in Hasura by equating the table's user ID with the 'X-Hasura-User-Id' from the JWT claims. This restricts access to only the user's own data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": { \"_eq\": \"X-Hasura-User-Id\" } }\n```\n\n----------------------------------------\n\nTITLE: Inserting Article with Default ID using GraphQL\nDESCRIPTION: This mutation inserts an article without specifying the ID field, allowing it to use the default auto-incrementing value. It demonstrates how to handle default values in GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_article_with_def_id {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Sample article content\",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Query Subscription in GraphQL\nDESCRIPTION: Example of a live query subscription that fetches messages from a group chat. Returns the complete result set on each update with all messages ordered by creation time.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  messages(where: { group_id: 1 }, order_by: { created_at: asc }) {\n    id\n    sender\n    receiver\n    content\n    created_at\n    edited_at\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using hasura init Command Syntax in Bash\nDESCRIPTION: Basic syntax for the hasura init command that creates a new directory with necessary files for a Hasura GraphQL Engine project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura init [directory-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Tracking SQL Function with Basic Configuration (v1)\nDESCRIPTION: Example of using track_function v1 to add a custom SQL function 'search_articles' to the query root field of the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/custom-functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"track_function\",\n    \"args\": {\n        \"schema\": \"public\",\n        \"name\": \"search_articles\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Query Performance with PostgreSQL LATERAL Join\nDESCRIPTION: Demonstrates how to efficiently execute foreach queries using a LEFT OUTER JOIN LATERAL to avoid multiple separate queries. The query preserves ordering using an Index column and maintains proper foreach semantics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nSELECT foreach.\"Index\", foreach.\"ArtistId\", album.\"AlbumId\", album.\"Title\"\nFROM (VALUES (0, 1), (1, 2)) AS foreach (\"Index\", \"ArtistId\")\nLEFT OUTER JOIN LATERAL (\n\tSELECT \"AlbumId\", \"Title\"\n\tFROM \"Album\" album\n\tWHERE album.\"ArtistId\" = foreach.\"ArtistId\"\n) AS album ON true\nORDER BY foreach.\"Index\" ASC\n```\n\n----------------------------------------\n\nTITLE: Validating Array Type Format in Postgres SQL\nDESCRIPTION: This SQL query shows how to check if a given array string is a valid format for a Postgres text array type. It's particularly useful for validating array session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect '{hello,world}'::text[];\n```\n\n----------------------------------------\n\nTITLE: Replacing Metadata using HTTP POST in Hasura\nDESCRIPTION: This snippet shows how to replace or import Metadata into Hasura using the replace_metadata endpoint. It includes the request format for version 2 with options for handling inconsistencies and warnings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"replace_metadata\",\n    \"version\": 2\n    \"args\": {\n      \"allow_inconsistent_metadata\": Boolean,\n      \"allow_warnings\": Boolean,\n      \"metadata\": <metadata-object>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship with Foreign Key Constraint on Remote Table\nDESCRIPTION: This API endpoint creates an object relationship using a foreign key constraint on a remote table. The example creates a 'details' relationship on the 'author' table using the 'author_id' column from the 'author_details' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_object_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"details\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\": \"author_details\",\n                \"columns\": [\"author_id\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Primary Key Constraint in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to define a primary key constraint on the `id` column of the `authors` table.  The primary key uniquely identifies each row in the table. The `name` column is also defined as `NOT NULL`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/constraints.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE authors(\n  id INT PRIMARY KEY,\n  name           TEXT    NOT NULL\n);\"\n```\n\n----------------------------------------\n\nTITLE: Filtering using _not operator in BigQuery GraphQL\nDESCRIPTION: Uses the _not operator to fetch authors who don't have any published articles. The example demonstrates how to invert a filter condition to exclude results based on a specific criterion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/boolean-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_authors(\n    where: {\n      _not: {\n        articles: { is_published: {_eq: true} }\n      }\n    }) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in BigQuery via API\nDESCRIPTION: An HTTP POST request to the Hasura schema API to create `author` and `article` tables in BigQuery. The request body is a JSON object that specifies the `bigquery_run_sql` type and the SQL statements to execute.  The `source` parameter indicates the database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"bigquery_run_sql\",\n    \"args\": {\n        \"source\": \"<db_name>\",\n        \"sql\": \"CREATE TABLE `bigquery.author` (`id` INT64,`name` STRING);CREATE TABLE `bigquery.article` (`id` INT64,`title` STRING,`body` STRING,`author_id` INT64,`is_published` BOOL,`published_on` DATETIME,`rating` INT64);\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Sum Type Usage in Haskell Data Types\nDESCRIPTION: An example showing a preferred way of representing state using a sum type. This approach is more expressive and extensible than using a Bool.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\n-- good\ndata LiveQuery = LiveQuery\n  { ...\n  , lqState :: !LiveQueryState\n  , ...\n  }\n\ndata LiveQueryState\n  = LQActive\n  | LQPaused\n```\n\n----------------------------------------\n\nTITLE: Setting a table as an enum in Hasura using Metadata API\nDESCRIPTION: This HTTP request shows how to set an already-tracked table as an enum using the Metadata API's `pg_set_table_is_enum` endpoint.  The `is_enum` argument is set to `true` to designate the existing table as an enum.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_set_table_is_enum\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": {\\n      \\\"schema\\\": \\\"public\\\",\\n      \\\"name\\\": \\\"user_role\\\"\\n    },\\n    \\\"is_enum\\\": true\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Upsert Article with Conditional Update\nDESCRIPTION: This GraphQL mutation inserts a new article into the 'article' table. If a matching title exists, it updates the published_on column only if the new value is greater than the existing value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/upsert.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: \"Article 2\",\n        published_on: \"2018-10-12\"\n      }\n    ],\n    if_matched: {\n      match_columns: title,\n      update_columns: published_on,\n      where: {\n        published_on: {_lt: \"2018-10-12\"}\n      }\n    }\n  ) {\n    returning {\n      id\n      title\n      published_on\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"returning\": [\n        {\n          \"id\": 2,\n          \"title\": \"Article 2\",\n          \"published_on\": \"2018-10-12\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Querying Unpublished Articles using Boolean Equality in GraphQL\nDESCRIPTION: This query fetches a list of articles that have not been published by using the _eq operator with a boolean field in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {is_published: {_eq: false}}\n  ) {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Views in Hasura Metadata YAML\nDESCRIPTION: YAML configuration to track a view in Hasura metadata. This snippet shows how to add a view to the tables.yaml file in the metadata directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/views.mdx#2025-04-17_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n- table:\n    schema: public\n    name: author\n- table:\n    schema: public\n    name: article\n- table:\n    schema: public\n    name: <name of view>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: GraphQL type definitions for User entity and corresponding Query and Mutation operations\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/rest-wrapper/README.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id:       String!\n  name:     String!\n  balance:  Int!\n}\n\ntype Query {\n  getUser(id: String!): User\n  users(name: String): [User]\n}\n\ntype Mutation {\n  addUser(name: String!, balance: Int!): User\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables in Hasura with CLI - MS SQL Server\nDESCRIPTION: This YAML configuration details how to track existing tables within Hasura to expose them via the GraphQL API, along with the command to apply the metadata changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: dbo\n    name: authors\n- table:\n    schema: dbo\n    name: articles\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Dropping a Select Permission using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to drop an existing select permission for a specific role on a table using the Hasura Metadata API. The API endpoint is `/v1/metadata` and the `pg_drop_select_permission` type is used. The required parameters are `table` name, `role` name, and the optional `source` database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_drop_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Postgres Database Source with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to use the pg_add_source API to connect a Postgres database to Hasura. It includes configuration for connection info, pool settings, and customization options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n           \"from_env\": \"<DB_URL_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"max_connections\": 50,\n          \"idle_timeout\": 180,\n          \"retries\": 1,\n          \"pool_timeout\": 360,\n          \"connection_lifetime\": 600\n        },\n        \"use_prepared_statements\": true,\n        \"isolation_level\": \"read-committed\"\n      },\n      \"connection_template\": {\n        \"template\": \"{{ if $.request.session?[\\\"x-hasura-role\\\"] == \\\"admin\\\" }} {{$.primary}} {{else}} {{$.connection_set.db_1}} {{ end }}\"\n      },\n      \"connection_set\": [\n        {\n          \"name\": \"db_1\",\n          \"connection_info\": {\n            \"database_url\": {\n              \"from_env\": \"<DB_URL_ENV_VAR>\"\n            }\n          }\n        }\n      ]\n    },\n    \"replace_configuration\": false,\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      },\n      \"naming_convention\": \"hasura-default\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login Action Handler Implementation\nDESCRIPTION: NodeJS/Express handler implementation for the login action that processes the request and returns an access token\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst handler = (req, resp) => {\n  // You can access their arguments input at req.body.input\n  const { username, password } = req.body.input;\n\n  // perform your custom business logic\n  // check if the username and password are valid and login the user\n\n  // return the response\n  return resp.json({\n    accessToken: 'Ew8jkGCNDGAo7p35RV72e0Lk3RGJoJKB',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Example Response from Remote Schema Relationship Query\nDESCRIPTION: JSON response showing the result of querying a Postgres table with a remote schema relationship. The response includes both local database data and data fetched from the remote schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"order\": [\n      {\n        \"id\": 1,\n        \"user_id\": 2,\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users in GraphQL for Hasura\nDESCRIPTION: This GraphQL query retrieves the id, email, and name fields of all users from the 'users' table. It tests the access controls set on the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetUsers {\n  users {\n    id\n    email\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Nested Objects in Hasura GraphQL\nDESCRIPTION: This query demonstrates how to fetch a list of authors and limit the number of their articles to 2, showcasing pagination in nested objects in Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles (\n      limit: 2\n      offset: 0\n    ) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Record Update GraphQL Query\nDESCRIPTION: GraphQL query demonstrating the new feature to update multiple records in a single transaction with different conditions and values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_artist_many(\n  updates: [\n    { where: { id: { _lte: 3 } },\n      _set: { name: \"first\", description: \"other\" }\n    }\n    { where: { id: { _eq: 2 } },\n      _set: { name: \"second\" }\n    }\n    { where: { id: { _gt: 2 } },\n      _set: { name: \"third\", description: \"hello\" }\n    }\n    { where: { id: { _eq: 1 } },\n      _set: { name: \"done\" }\n    }\n    ]\n) {\n  affected_rows\n  returning {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to Source Health Check API in HTTP\nDESCRIPTION: Example HTTP request to the Source Health Check API endpoint. This admin-only endpoint requires the X-Hasura-Role header set to 'admin'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/source-health.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /healthz/sources HTTP/1.1\nX-Hasura-Role: admin\n```\n\n----------------------------------------\n\nTITLE: Define Logical Model in YAML (CLI)\nDESCRIPTION: This YAML snippet defines the structure of a logical model within the `databases.yaml` file for Hasura. It specifies the model's name, fields, and each field's type, nullability, and optional description.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Webhook with Python and Flask\nDESCRIPTION: Partial implementation of a webhook using Python and Flask that receives product data from Hasura and enhances the description using OpenAI. Includes function for calling the OpenAI API with appropriate prompting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport openai\nimport requests\n\n# Set up flask server instance\napp = Flask(__name__)\n\n# Constants for server and external service configurations\nPORT = 4000;\nOPEN_AI_KEY = 'YOUR-OPENAI-KEY';\nHASURA_GRAPHQL_ENDPOINT = 'YOUR-HASURA-GRAPHQL-ENDPOINT';\nHASURA_ADMIN_SECRET = 'YOUR-HASURA-ADMIN-SECRET';\n\nopenai.api_key = OPEN_AI_KEY\n\nasync def improve_description(original_description):\n  \"\"\"\n  Function to improve the original product description for SEO using OpenAI.\n\n  Args:\n      original_description (str): The original product description.\n\n  Returns:\n      str: The improved product description for SEO.\n  \"\"\"\n  try:\n      completion = openai.ChatCompletion.create(\n          model=\"gpt-3.5-turbo\",\n          messages=[\n      {\"role\": \"user\", \"content\": f\"You are an SEO expert who works on an e-commerce website. Your task is to take the following product description and improve it for SEO purposes, making it more likely to rank highly in search engines and lead to increased visitor traffic and purchases. Only respond with the improved description and nothing else. If there is nothing to improve then respond with the original content. The product description to improve for SEO is as follows: {original_description}.\"},\n  ])\n      return completion[\"choices\"][0][\"message\"][\"content\"]\n  except Exception as e:\n      print(f\"An error occurred while generating description: {e}\")\n      return None\n```\n\n----------------------------------------\n\nTITLE: Create BigQuery Logical Model Select Permission\nDESCRIPTION: API endpoint to add select permissions to a logical model in BigQuery source. Supports column selection and filtering configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\" | [\n        \"column 1\",\n        \"column 2\"\n      ],\n      \"filter\": \"<boolean expression>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Postgres Database Source with Hasura Metadata API\nDESCRIPTION: This snippet shows how to use the pg_drop_source API to remove a Postgres database from Hasura. It includes the option to cascade the removal to dependent objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_drop_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"cascade\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Postgres Tables Schema\nDESCRIPTION: SQL schema definition for creating author and articles tables with basic fields including primary keys and data types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nauthor (\n  id SERIAL PRIMARY KEY,\n  name TEXT\n)\n\narticles (\n  id SERIAL PRIMARY KEY,\n  title TEXT,\n  content TEXT,\n  rating INT,\n  author_id INT\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Schema Relationship in Hasura GraphQL Engine\nDESCRIPTION: This HTTP POST request deletes an existing remote relationship defined on a Remote Schema's type. It requires the name of the relationship, the source Remote Schema, and the type on which the relationship is defined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"delete_remote_schema_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"remote_schema\": \"users_api\",\n      \"type\": \"user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching List of Authors with GraphQL in Hasura\nDESCRIPTION: This GraphQL query demonstrates how to fetch a list of authors from an MS SQL Server database using Hasura. It retrieves the id and name of each author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/simple-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation creates a new user with name, email, and password, returning the user's ID and name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateUser($name: String!, $email: String!, $password: String!) {\n  insert_users_one(object: {name: $name, email: $email, password: $password}) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema for Rich JSON Expressions\nDESCRIPTION: Extended GraphQL schema definition supporting nested JSON operations and column references\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype <table>_update {\n  ...\n  _json: <table>_json_expression_columns\n}\n  \ninput <table>_json_expression_columns {\n  <text columns of table>: <table>_json_expression\n}\n\ninput <table>_json_expression {\n  column: <table>_select_column\n  constant: String\n  json_literal: json\n  json_value: <table>_json_value_inputs\n  json_query: <table>_json_query_inputs\n  json_modify: <table>_json_modify_inputs\n}\n\ninput <table>_json_value_inputs {\n  path: mssql_json_path!\n  expression: <table>_json_expression\n}\n\ninput <table>_json_query_inputs {\n  expression: <table>_json_expression\n  path: mssql_json_path!\n}\n\ninput <table>_json_modify_inputs {\n  expression: <table>_json_expression\n  path: mssql_json_path!\n  new_value: <table>_json_expression\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Action via Hasura API with JSON Request Transformation\nDESCRIPTION: This HTTP POST request to the Hasura metadata API creates a new action called 'create_user' with JSON request transformation. It specifies the user arguments and the response body transformation requirements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n    \"name\":\"create_user\",\n    \"definition\":{\n      \"kind\":\"synchronous\",\n      \"arguments\":[\n        {\n          \"name\":\"username\",\n          \"type\":\"String!\"\n        },\n        {\n          \"name\":\"email\",\n          \"type\":\"String!\"\n        }\n      ],\n      \"output_type\":\"User\",\n      \"handler\":\"{{ACTION_BASE_URL}}\",\n      \"timeout\":60,\n      \"request_transform\": {\n        \"template_engine\": \"Kriti\",\n        \"version\": 2,\n        \"method\": \"POST\",\n        \"url\": \"{{$base_url}}/create_user\",\n        \"query_params\": {\n          \"id\": \"{{$session_variables['x-hasura-user-id']}}\"\n        },\n        \"body\": {\n          \"action\": \"transform\",\n          \"template\": \"{\\\"username\\\": {{$body.input.username}}}\"\n        }\n      },\n      \"comment\": \"Custom action to create user\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Node.js Express Authentication Webhook\nDESCRIPTION: A basic authentication webhook endpoint for Hasura GraphQL Engine using Node.js and Express framework. Provides a simple authentication mechanism for validating user requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Endpoint: /simple/webhook\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Schema Relationship in GraphQL\nDESCRIPTION: GraphQL query demonstrating how to use the remote schema relationship. It fetches an order with its associated user information across two remote schemas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  order_remote_schema {\n  \torder (id: 1) {\n    \tid\n    \tuser_id\n    \tuser {\n      \tid\n      \tname\n    \t}\n  \t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claims Map with Default Values in JWT for Hasura\nDESCRIPTION: Example of configuring claims_map in JWT config for Hasura, using JSON path values with default values. It shows how to set a default value for x-hasura-user-id when the specified JSON path doesn't exist in the JWT token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RS512\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n\",\n  \"claims_map\": {\n    \"x-hasura-allowed-roles\": { \"path\": \"$.hasura.all_roles\" },\n    \"x-hasura-default-role\": { \"path\": \"$.hasura.all_roles[0]\" },\n    \"x-hasura-user-id\": { \"path\": \"$.user.id\", \"default\": \"ujdh739kd\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Objects Using Object Relationships in GraphQL\nDESCRIPTION: Example query demonstrating how to fetch a list of articles along with each article's author using a one-to-one relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/nested-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n      articles {\n        id\n        title\n        author {\n          name\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation Query in GraphQL\nDESCRIPTION: Example query demonstrating how to fetch aggregated data (count, sum, average, max) of article ratings using GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/aggregation-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles_aggregate {\n    aggregate {\n      count\n      sum {\n        rating\n      }\n      avg {\n        rating\n      }\n      max {\n        rating\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Cached Query\nDESCRIPTION: This snippet demonstrates a GraphQL query using the @cached directive. Hasura uses this directive to compute a cache key based on the query's structure, variables, and session data. The snippet showcases different variations considered distinct by Hasura's caching logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/how-it-works.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    name\n    id\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    id\n    name\n    created_at\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  profile(where: { _and: [{ id: { _gt: 1 } }, { name: { _ilike: \"%x%\" } }] }) {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  profile(where: { _and: [{ name: { _ilike: \"%x%\" } }, { id: { _gt: 1 } }] }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Postgres Table in Hasura\nDESCRIPTION: SQL statement to create an index on the 'name' column of the 'authors' table to optimize query performance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/performance.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON authors (name);\n```\n\n----------------------------------------\n\nTITLE: Creating a Delete Permission using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to create a delete permission for a specific role on a table using the Hasura Metadata API. It restricts the rows that can be deleted. The API endpoint is `/v1/metadata` and the `pg_create_delete_permission` type is used.  Required parameters include the `table` name, the `role` name, and the `permission` object containing `filter` and `validate_input` definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"validate_input\": {\n                \"type\": \"http\",\n                \"definition\": {\n                \"forward_client_headers\": true,\n                \"headers\": [],\n                \"timeout\": 10,\n                \"url\": \"http://www.somedomain.com/validateUser\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Hasura Trigger Payload in JSON\nDESCRIPTION: Sample JSON payload sent from Hasura to the Lambda function when a note is updated. Contains the operation type, old and new data values, trigger information, and table details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/mutation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": {\n        \"op\": \"UPDATE\",\n        \"data\": {\n            \"old\": {\n                \"note\": \"note1\",\n                \"id\": 1\n            },\n            \"new\": {\n                \"note\": \"note1 updated\",\n                \"id\": 1\n            }\n        }\n    },\n    \"created_at\": \"2018-10-02T06:38:22.67311Z\",\n    \"id\": \"f57a1c79-72ba-4c19-8791-37d1b9616bcf\",\n    \"trigger\": {\n        \"name\": \"note_revision_trigger\",\n        \"id\": \"5d85cbd1-c134-45ce-810c-7ecd3b4fc1ee\"\n    },\n    \"table\": {\n        \"schema\": \"public\",\n        \"name\": \"note\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claims Map with JSON Path Values in JWT for Hasura\nDESCRIPTION: Example of configuring claims_map in JWT config for Hasura, using JSON path values to map session variables to JWT claims. It demonstrates mapping for x-hasura-allowed-roles, x-hasura-default-role, and x-hasura-user-id.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RS512\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n\",\n  \"claims_map\": {\n    \"x-hasura-allowed-roles\": { \"path\": \"$.hasura.all_roles\" },\n    \"x-hasura-default-role\": { \"path\": \"$.hasura.all_roles[0]\" },\n    \"x-hasura-user-id\": { \"path\": \"$.user.id\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regex Filtering of Articles with _regex in GraphQL\nDESCRIPTION: This query retrieves articles whose titles match the regex '[ae]met' using the _regex operator for regular expression filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {title: {_regex: \"[ae]met\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Intersecting Geometries using _st_crosses\nDESCRIPTION: GraphQL query showing how to use the _st_crosses operator to find locations where rivers cross interstate highways. Returns geometric data for both crossing features.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  locations(where: {river: {_st_crosses: {interstate: {name: \"I-95\"}}}}) {\n    id\n    name\n    river {\n      name\n      geometry\n    }\n    interstate {\n      name\n      geometry\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing Headers in JSON - Hasura GraphQL\nDESCRIPTION: This JSON snippet shows the expected error response when the required X-Hasura-User-Id header is not provided during an insert mutation. It details the error path, message, and code indicating the header's absence.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-column-presets.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"path\": \"$\",\n      \"error\": \"\\\"x-hasura-user-id\\\" header is expected but not found\",\n      \"code\": \"not-found\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema Relationship in YAML\nDESCRIPTION: YAML configuration for adding a remote schema relationship in Hasura. It defines a relationship between 'Order' type from 'order-remote-schema' to 'user' field in 'user-remote-schema'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: order-remote-schema\n  definition:\n    url: https://remote-schema-endpoint.com\n  remote_relationships:\n    - relationships:\n        type_name: Order\n        name: user\n        - definition:\n            to_remote_schema:\n              remote_schema: user-remote-schema\n              lhs_fields:\n                - user_id\n              remote_field:\n                user:\n                  arguments:\n                    id: $user_id\n```\n\n----------------------------------------\n\nTITLE: Ignoring Requests on Conflict in GraphQL Upsert\nDESCRIPTION: This GraphQL mutation demonstrates how to ignore the insert request when a conflict occurs by setting update_columns as an empty array. If the unique constraint author_name_key is violated, the request will be ignored.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/upsert.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsert_author {\n  insert_author(\n    objects: [\n      { name: \"John\" }\n    ],\n    on_conflict: {\n      constraint: author_name_key,\n      update_columns: []\n    }\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Model in GraphQL Schema\nDESCRIPTION: Example of adding descriptions to a Model metadata object, including descriptions for the model operations (selectUniques, selectMany) and arguments. These descriptions appear in the resulting GraphQL schema Query type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3-descriptions.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Model\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"Authors\",\n    \"objectType\": \"author\",\n    \"globalIdSource\": true,\n    \"arguments\": [\n      {\n        \"name\": \"include_inactive\",\n        \"type\": \"boolean\",\n        \"description\": \"If set to true, returns authors even if they are inactive.\"\n      }\n    ],\n    \"graphql\": {\n      \"selectUniques\": [\n        {\n          \"queryRootField\": \"AuthorByID\",\n          \"description\": \"Returns at most an author identified by the given author_id, returns null if author is not found with the provided ID.\",\n          \"uniqueIdentifier\": [\n            \"author_id\"\n          ]\n        }\n      ],\n      \"selectMany\": {\n        \"queryRootField\": \"AuthorMany\",\n        \"description\": \"Selects multiple authors and supports filtering and pagination.\"\n      },\n      \"filterExpressionType\": \"Author_Where_Exp\",\n      \"orderByExpressionType\": \"Author_Order_By\",\n      \"argumentsInputType\": \"Author_Arguments\"\n    },\n    \"filterableFields\": [\n      \"author_id\"\n    ],\n    \"orderableFields\": [\n      \"author_id\"\n    ]\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n\n\ntype Query {\n  \"\"\"\n  Selects multiple authors and supports filtering and pagination.\n  \"\"\"\n  AuthorMany(\n    args: Author_Arguments,\n    where: Author_Where_Exp,\n    limit: Int,\n    offset: Int,\n    order_by: Author_Order_By): [Author!]\n  \"\"\"\n  Returns at most an author identified by the given author_id, returns null if author is not found with the provided ID.\n  \"\"\"\n  AuthorByID(\n    author_id: Int!,\n    \"\"\"If set to true, returns authors even if they are inactive.\"\"\"\n    include_inactive: boolean\n    ): Author\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Hasura GraphQL Mutation in Python\nDESCRIPTION: This function sends a notification to a user by executing a GraphQL mutation through Hasura. It handles errors and logs the result of the notification attempt.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef send_notification(user_review, user_id, review_feedback):\n    query = \"\"\"\n    mutation InsertNotification($user_id: uuid!, $review_feedback: String!) {\n      insert_notifications_one(object: {user_id: $user_id, message: $review_feedback}) {\n        id\n      }\n    }\n    \"\"\"\n    variables = {\"user_id\": user_id, \"review_feedback\": review_feedback}\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"x-hasura-admin-secret\": config[\"secret\"],\n    }\n    url = config[\"url\"]\n\n    request_body = {\"query\": query, \"variables\": variables}\n\n    try:\n        response = requests.post(url, json=request_body, headers=headers)\n        # Raise an error for bad responses\n        response.raise_for_status()\n\n        response_json = response.json()\n        if \"errors\" in response_json:\n            # Handle the case where there are errors in the response\n            print(f\"Failed to send a notification for: {user_review}\")\n            print(response_json)\n            return None\n\n        # Extract the updated data from the response\n        data = response_json.get(\"data\", {})\n        notification = data.get(\"insert_notifications_one\", {})\n        print(\n            f\"🚩 Review flagged. This is not visible to users: {user_review}\\n🔔 The user has received the following notification: {review_feedback}\"\n        )\n        return notification\n    except Exception as e:\n        # Handle exceptions or network errors\n        print(f\"Error sending a notification for: {user_review}\")\n        print(str(e))\n        return None\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Objects Using Array Relationships in BigQuery with GraphQL\nDESCRIPTION: This query demonstrates how to fetch a list of authors and their associated articles using an array relationship. It retrieves the id and name of authors, plus a nested list of articles (with id and title) written by each author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/nested-object-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors {\n    id\n    name\n    articles {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: x_www_form_urlencoded Request Body Transformation (API)\nDESCRIPTION: HTTP POST request configuration for transforming request body to x_www_form_urlencoded format using Hasura Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"version\": 2,\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"body\": {\n        \"action\": \"x_www_form_urlencoded\",\n        \"form_template\": {\n          \"username\": \"{{$body.table.username}}\"\n        },\n      },\n      \"request_headers\": {\n        \"remove_headers\": [\"content-type\"],\n        \"add_headers\": {\n          \"content-type\": \"application/x-www-form-urlencoded\"\n        },\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST request to add a Postgres source using Metadata API\nDESCRIPTION: This HTTP request demonstrates how to add a Postgres source to Hasura using the Metadata API. The `pg_add_source` mutation is used, and the `customization` field specifies the `naming_convention` for the source, overriding any default settings. It also retrieves the database URL from an environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/naming-convention.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_add_source\\\",\\n  \\\"args\\\": {\\n    \\\"name\\\": \\\"<db_name>\\\",\\n    \\\"configuration\\\": {\\n      \\\"connection_info\\\": {\\n        \\\"database_url\\\": {\\n          \\\"from_env\\\": \\\"<DB_URL_ENV_VAR>\\\"\\n        }\\n      }\\n    },\\n    \\\"customization\\\": {\\n      \\\"naming_convention\\\": \\\"hasura-default\\\"\\n    },\\n    \\\"replace_configuration\\\": true\\n  }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using the Basic Hasura CLI Command\nDESCRIPTION: Shows the basic syntax for running the Hasura CLI command. This is the root command that can be extended with various subcommands.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura [flags]\n```\n\n----------------------------------------\n\nTITLE: Hasura Seed Apply Inherited Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the seed apply command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Hasura Metadata API Endpoint\nDESCRIPTION: Demonstrates the structure of a POST request to the Hasura Metadata API endpoint. The request includes the query type, optional version and resource version, and an args object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\n\n{\n   \"type\": <query-type>,\n   \"version\": <Integer> (optional),\n   \"resource_version\": <Integer> (optional),\n   \"args\": <args-object>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server for Hasura GraphQL Engine Docs in Bash\nDESCRIPTION: This command navigates to the docs directory and starts the development server with the host set to 0.0.0.0, allowing access from outside the container. It uses Yarn to run the start script.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/CODESPACES.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && yarn start --host 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata Using Bash Command\nDESCRIPTION: Applies metadata changes in Hasura for permission updates using a bash command. Ensures that CLI is set up, and metadata files are correctly configured.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Format for Postgres in Supabase\nDESCRIPTION: This snippet shows the structure of a PostgreSQL database connection URL that connects Hasura to a Supabase Postgres instance. It includes placeholders for username, password, host server, port, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/supabase.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<host-server>:<port>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Fetching Nested Aggregated Data of Author's Articles in GraphQL\nDESCRIPTION: This query retrieves an author with id '1' and a nested list of their articles with aggregated data. It includes the count of articles, average rating, maximum rating, and individual article details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/aggregation-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors (where: {id: {_eq: 1}}) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n        avg {\n          rating\n        }\n        max {\n          rating\n        }\n      }\n      nodes {\n        id\n        title\n        rating\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Role for Metadata and User Objects in Postgres\nDESCRIPTION: This SQL script creates a single user to manage both metadata and user objects in the same database. It sets up the necessary schemas, extensions, and grants appropriate permissions for Hasura GraphQL Engine to function properly, including access to information_schema and pg_catalog.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- create a separate user for to manage metadata database\nCREATE USER hasurauser WITH PASSWORD 'hasurauser';\n\n-- create the schemas required by the hasura system\n-- NOTE: If you are starting from scratch: drop the below schemas first, if they exist.\nCREATE SCHEMA IF NOT EXISTS hdb_catalog;\n\n-- make the user an owner of the schema\nALTER SCHEMA hdb_catalog OWNER TO hasurauser;\n\n-- See section below on pgcrypto in PG search path\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- grant select permissions on information_schema and pg_catalog. This is\n-- required for hasura to query the list of available tables.\n-- NOTE: these permissions are usually available by default to all users via PUBLIC grant\nGRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO hasurauser;\nGRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO hasurauser;\n\n-- The below permissions are optional. This is dependent on what access to your\n-- tables/schemas you want give to hasura. If you want expose the public\n-- schema for GraphQL query then give permissions on public schema to the\n-- hasura user.\n-- Be careful to use these in your production db. Consult the Postgres manual or\n-- your DBA and give appropriate permissions.\n\n-- grant all privileges on all tables in the public schema. This can be customized:\n-- For example, if you only want to use GraphQL regular queries and not mutations,\n-- then you can set: GRANT SELECT ON ALL TABLES...\nGRANT USAGE ON SCHEMA public TO hasurauser;\nGRANT ALL ON ALL TABLES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO hasurauser;\n\n-- Similarly add these for other schemas as well, if you have any.\n-- GRANT USAGE ON SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL TABLES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL SEQUENCES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL FUNCTIONS IN SCHEMA <schema-name> TO hasurauser;\n\n-- By defaults users won't have access to tables they have not created (and thus do not own).\n-- You can change these default privileges to grant access to any object created in the future.\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS;\n-- Alternatively, you may restrict this to objects created by a specific user\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO hasurauser;\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO hasurauser;\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO hasurauser;\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata using API\nDESCRIPTION: This command applies the Hasura metadata by using the Metadata API and the replace_metadata endpoint. It reads a JSON file containing the metadata and sends it in a POST request to the Hasura server to replace the current metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -d '{\"type\":\"replace_metadata\", \"args\":'\"$(cat hasura_metadata.json)\"'}' http://localhost:8080/v1/metadata\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -H \\\"X-Hasura-Admin-Secret: <YOUR_ADMIN_SECRET>\\\" -d '{\"type\":\"replace_metadata\", \"args\":'\"$(cat hasura_metadata.json)\"'}' http://localhost:8080/v1/metadata\"\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in GraphQL Queries\nDESCRIPTION: Shows how to use aliases to fetch the same type of data with different parameters. The query retrieves all articles, top two rated articles, and the worst rated article using aliases for distinct results.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles {\n  bigquery_articles {\n    title\n    rating\n  }\n  topTwoArticles: bigquery_articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    title\n    rating\n  }\n  worstArticle: bigquery_articles(\n    order_by: {rating: asc},\n    limit: 1\n  ) {\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI on Linux/macOS using curl\nDESCRIPTION: This command downloads and installs the Hasura CLI to /usr/local/bin on Linux or macOS systems. It may require sudo permissions depending on the target directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-Based Allow List in YAML\nDESCRIPTION: YAML configuration for setting up role-based Allow Lists, which restricts query collections to specific user roles. This example shows global and role-scoped collections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/allow-list.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nquery_collections:\n  - name: allowed-queries\n    definition:\n      queries: []\n  - name: editor_allowed_queries\n    definition:\n      queries: []\n  - name: user_allowed_queries\n    definition:\n      queries: []\nallowlist:\n  - collection: allowed-queries\n    scope:\n      global: true\n  - collection: editor_allowed_queries\n    scope:\n      global: false\n      roles:\n        - editor\n  - collection: user_allowed_queries\n    scope:\n      global: false\n      roles:\n        - user\n```\n\n----------------------------------------\n\nTITLE: Deleting Array Element from JSONB Column in Hasura GraphQL\nDESCRIPTION: This mutation deletes an element from a JSON array stored in a JSONB column. It uses the _delete_elem operator to remove the element at position 2 from the extra_info column in the article table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation update_extra_info {\n  update_article(\n    where: {id: {_eq: 1}},\n    _delete_elem: {extra_info: 2}  # initial value \"[\"a\", \"b\", \"c\"]\"\n  ) {\n    affected_rows\n    returning {\n      id\n      extra_info\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Backend Only Permissions via CLI\nDESCRIPTION: This YAML snippet demonstrates how to set backend only permissions for insert and delete mutations within a Hasura metadata file. The `backend_only: true` setting restricts these mutations to be accessible only with the `x-hasura-use-backend-only-permissions` header set to `true`. This ensures that only authorized backend services can perform these operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/backend-only.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\ninsert_permissions:\n  - role: user\n    permission:\n      check: {}\n      columns:\n        - id\n      backend_only: true\ndelete_permissions:\n  - role: user\n    permission:\n      backend_only: true\n      filter: {}\n```\n\n----------------------------------------\n\nTITLE: Create Hasura Seed File with CLI\nDESCRIPTION: This command uses the Hasura CLI to create a seed file named `myAuthorsSeed` from the data in the `author` table. It automates the process of generating SQL insert statements based on the table's existing data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-seeds.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura seed create myAuthorsSeed --from-table author\"\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Relationship via API\nDESCRIPTION: HTTP request to create an object relationship using Hasura's metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_object_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"authors\",\n    \"name\": \"avg_rating\",\n    \"using\": {\n      \"manual_configuration\": {\n        \"remote_table\": \"author_average_rating\",\n        \"column_mapping\": {\n          \"id\": \"author_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Remote Schema Relationship\nDESCRIPTION: Shows how to query users along with data from a linked Remote Schema. Utilizes GraphQL to fetch users and their related country's emoji flag. Requires the 'users' table and a defined relationship between the 'users' table and a Remote Schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetUsers {\n  users {\n    id\n    name\n    country\n    emoji {\n      emoji\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List-based Exclusion with NOT IN Operator in GraphQL\nDESCRIPTION: Query to fetch authors excluding specific names using the _nin operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    where: {name: {_nin: [\"Justin\",\"Sidney\",\"April\"]}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Remote Relationship\nDESCRIPTION: This GraphQL query demonstrates how to fetch users with their computed city field and related location coordinates through the remote relationship. It shows the connection between the local user data and remote coordinates data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user {\n    id\n    name\n    user_city\n    user_location\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Native Queries with Table Relationships in GraphQL\nDESCRIPTION: This GraphQL query shows how to fetch articles with their related author information, using the relationship defined between the Native Query and the 'authors' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_articles {\n    title\n\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Hasura GraphQL Engine with pgAdmin\nDESCRIPTION: This YAML snippet shows the structure of the docker-compose.yaml file for setting up Hasura GraphQL Engine with Postgres and pgAdmin. It includes environment variables for configuring pgAdmin and Hasura, as well as service definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose-pgadmin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPGADMIN_DEFAULT_EMAIL: pgadmin@example.com\nPGADMIN_DEFAULT_PASSWORD: admin\nHASURA_GRAPHQL_ADMIN_SECRET: your_secure_admin_secret\nPOSTGRES_PASSWORD: postgrespassword\nHASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Creating an Update Permission using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to create an update permission for a specific role on a table using the Hasura Metadata API. It restricts columns and rows that can be updated. The API endpoint is `/v1/metadata` and the `pg_create_update_permission` type is used. Required parameters include the `table` name, the `role` name, and the `permission` object containing `columns`, `filter`, `check`, `set`, and `validate_input` definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"columns\" : [\"title\", \"content\", \"category\"],\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"check\" : {\n                \"content\" : {\n                  \"_ne\": \"\"\n                }\n            },\n            \"set\":{\n                \"updated_at\" : \"NOW()\"\n            },\n            \"validate_input\": {\n                \"type\": \"http\",\n                \"definition\": {\n                \"forward_client_headers\": true,\n                \"headers\": [],\n                \"timeout\": 10,\n                \"url\": \"http://www.somedomain.com/validateUser\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Presets in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define column presets in the `tables.yaml` file within the `metadata` directory. It configures the `user_id` column to be automatically populated with the value from the `X-Hasura-User-Id` session variable for the `user` role during insert operations. Requires the `hasura` CLI tool to apply the metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/column-presets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\n    schema: public\n    name: article\n  insert_permissions:\n    - role: user\n      permission:\n        check: {}\n        set:\n          user_id: x-hasura-User-Id\n        columns:\n          - content\n          - rating\n          - title\n        backend_only: false\"\n```\n\n----------------------------------------\n\nTITLE: Incrementing Integer Columns in GraphQL\nDESCRIPTION: Mutation that increments the 'likes' of an article by 2 using the _inc operator. This demonstrates how to perform arithmetic operations on integer fields in update mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_likes {\n  update_article(\n    where: {id: {_eq: 1}},\n    _inc: {likes: 2}  # initial value: 1\n  ) {\n    affected_rows\n    returning {\n      id\n      likes\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Models and Native Queries with Relationships in Hasura\nDESCRIPTION: This API call tracks two logical models (article and author) and two native queries with defined relationships between them. It demonstrates how to create object and array relationships between native queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"mssql_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"varchar\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"mssql\"\n      }\n    },\n    {\n      \"type\": \"mssql_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"name\",\n            \"nullable\": false,\n            \"type\": \"varchar\"\n          }\n        ],\n        \"name\": \"author\",\n        \"source\": \"mssql\"\n      }\n    },\n    {\n      \"type\": \"mssql_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"author\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"article\",\n        \"source\": \"mssql\",\n        \"type\": \"query\"\n      }\n    },\n    {\n      \"type\": \"mssql_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [\n          {\n            \"name\": \"articles\",\n            \"using\": {\n              \"column_mapping\": {\n                \"id\": \"author_id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"article\"\n            }\n          }\n        ],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Tom'), (2, 'Dan'), (3, 'Philip'), (4, 'Gil'), (5, 'Samir')) as t(\\\"id\\\", \\\"name\\\")\",\n        \"object_relationships\": [],\n        \"returns\": \"author\",\n        \"root_field_name\": \"author\",\n        \"source\": \"mssql\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Record by Primary Key with GraphQL Mutation in Hasura\nDESCRIPTION: Shows how to delete a specific record using its primary key. The example deletes an article with ID 1 and returns the deleted article's ID and title.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_articles {\n  delete_article_by_pk(id: 1) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Inserting Passport Info with Owner\nDESCRIPTION: GraphQL mutation demonstrating how to insert passport information with a new or existing owner using on_conflict handling\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-one.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsertPassportInfoWithOwner {\n  insert_passport_info(objects: [\n    {\n      passport_number: \"X98973765\",\n      owner: {\n        data: {\n          name: \"Kelly\"\n        },\n        on_conflict: {\n          constraint: owner_name_key,\n          update_columns: [name]\n        }\n      },\n    }\n  ]) {\n    returning {\n      passport_number\n      owner {\n        name\n      }\n    }\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in GraphQL Queries\nDESCRIPTION: This query showcases the use of aliases in GraphQL to fetch multiple sets of articles with different criteria. It retrieves all articles, top two rated articles, and the worst-rated article in a single query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles {\n  articles {\n    title\n    rating\n  }\n  topTwoArticles: articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    title\n    rating\n  }\n  worstArticle: articles(\n    order_by: {rating: asc},\n    limit: 1\n  ) {\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering groups by their aggregate results using HAVING in GraphQL\nDESCRIPTION: This query demonstrates the use of the HAVING clause to filter groups based on their aggregate results, showing only invoice date groups that have more than one invoice per date.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    grouping_keys: [{ _scalar_field: InvoiceDate }] # Grouping by InvoiceDate\n    having: { _count: { _gt: 1 } } # Filter the groupings where the number of invoices in the group is > 1\n  ) {\n    group_key {\n      InvoiceDate # InvoiceDate for each group\n    }\n    group_aggregate {\n      _count # Number of invoices per date\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship in BigQuery using Hasura API\nDESCRIPTION: This snippet provides an HTTP request format to create an array relationship in BigQuery using the Hasura Metadata API. It requires proper identification of the source and table, along with the mapping between the two tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/table-relationships/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_array_relationship\",\n  \"args\": {\n    \"source\": \"bigquery\",\n    \"table\": {\n      \"dataset\": \"hasura\",\n      \"name\": \"authors\"\n    },\n    \"name\": \"articles\",\n    \"using\": {\n      \"manual_configuration\": {\n        \"remote_table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"articles\"\n        },\n        \"column_mapping\": {\n          \"id\": \"author_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Model using YAML (CLI)\nDESCRIPTION: YAML configuration for creating a logical model through Hasura CLI by adding it to the metadata/databases/databases.yaml file. The configuration includes model name and field definitions with types, nullability, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<SQL Server field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Variables for Update Mutation in Hasura GraphQL\nDESCRIPTION: JSON variables to be used with the UpdateReview mutation. Specifies the review ID to update and the new text content to set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"dc9768a4-673c-11ed-b682-7224baf239e5\",  \n    \"text\": \"Furry logos for the win! So soft, so comfy! 🤗\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Read Replicas via Metadata API\nDESCRIPTION: HTTP request using the Metadata API to add read replicas to a PostgreSQL database in Hasura. The request includes the primary database connection and read replica configuration with environment variables and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"pg_add_source\",\n  \"args\":{\n    \"name\":\"<db_name>\",\n    \"replace_configuration\":true,\n    \"configuration\":{\n      \"connection_info\":{\n        \"database_url\":{\n          \"from_env\":\"<DATABASE_URL_ENV>\"\n        }\n      },\n      \"read_replicas\":[\n        {\n          \"database_url\":{\n            \"from_env\":\"<DATABASE_REPLICA_URL_ENV>\"\n          },\n          \"pool_settings\":{\n            \"retries\":1,\n            \"idle_timeout\":180,\n            \"max_connections\":50\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Files with Hasura CLI\nDESCRIPTION: Commands to create seed migration files using the Hasura CLI. This allows you to create seed files either with custom SQL content or by exporting data from existing tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n# create a new seed file and use editor to add SQL content\nhasura seed create new_table_seed\n\n# create a new seed by exporting data from tables already present in the database\nhasura seed create table1_seed --from-table table1\n\n# create from data in multiple tables:\nhasura seed create tables_seed --from-table table1 --from-table table2\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Model using API\nDESCRIPTION: HTTP request to the Hasura metadata API for creating a logical model. The request includes source database, model name, and field definitions with their types, nullability flags, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission for MSSQL Table in Hasura\nDESCRIPTION: This example demonstrates creating a select permission for the 'user' role on the 'article' table. It allows access to all columns, filters rows based on publication status or authorship, sets a row limit, and enables aggregations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\",\n        \"permission\" : {\n            \"columns\" : \"*\",\n            \"filter\" : {\n                \"$or\" : [\n                    { \"author_id\" : \"X-HASURA-USER-ID\" },\n                    { \"is_published\" : true }\n                ]\n             },\n             \"limit\": 10,\n             \"allow_aggregations\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Unrelated Tables in Hasura API\nDESCRIPTION: HTTP request to create insert permissions on a products table using the _exists operator to check conditions in an unrelated users table before allowing product insertion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_insert_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"products\",\n    \"role\": \"user\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"check\": {\n        \"$exists\": {\n          \"_table\": \"users\",\n          \"_where\": {\n            \"$and\": [\n              {\n                \"id\": \"X-Hasura-User-Id\"\n              },\n              {\n                \"allow_product_create\": true\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Filtering using Exists Expression with Related Table\nDESCRIPTION: This JSON snippet provides an example of an exists expression that filters a person table based on whether there are any related children aged 18 or older.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"exists\",\n  \"in_table\": {\n    \"type\": \"related\",\n    \"relationship\": \"children\"\n  },\n  \"where\": {\n    \"type\": \"binary_op\",\n    \"operator\": \"greater_than_or_equal\",\n    \"column\": {\n      \"name\": \"age\",\n      \"column_type\": \"number\"\n    },\n    \"value\": {\n      \"type\": \"scalar\",\n      \"value\": 18,\n      \"value_type\": \"number\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Logical Model in YAML\nDESCRIPTION: This snippet demonstrates how to define a logical model in a `databases.yaml` file for the Hasura CLI. It shows the structure for specifying the model's name, fields, data types, nullability, and descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<SQL Server field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Materialized View for Popular Active Authors in Postgres\nDESCRIPTION: This SQL snippet creates a materialized view named 'popular_active_authors' that stores data physically for authors with ratings greater than 6 who are active, ordered by rating. Materialized views store query results for faster access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE MATERIALIZED VIEW popular_active_authors AS\n    SELECT name, rating\n    FROM authors\n    WHERE rating > 6 AND is_active = TRUE\n    ORDER BY rating;\n```\n\n----------------------------------------\n\nTITLE: Defining Action with List Response Type in GraphQL SDL\nDESCRIPTION: Shows how to define an action in GraphQL that returns a list of objects. The example defines a 'userLogin' mutation that returns an array of UserInfo objects, demonstrating the use of list types in action responses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  userLogin(username: String!, password: String!): [UserInfo]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InsertOrder Schema in Hasura\nDESCRIPTION: Describes the insertion order options for nested inserts in relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n\"before_parent\" | \"after_parent\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema for Actions and Custom Types\nDESCRIPTION: This GraphQL schema defines an action called `greet` and its associated input and output types (`SampleInput` and `SampleOutput`). It allows users to execute a query called `greet` that accepts a `SampleInput` argument and returns a `SampleOutput`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  greet(arg1: SampleInput!): SampleOutput\n}\ninput SampleInput {\n  username: String!\n}\ntype SampleOutput {\n  greetings: String!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Subscription for User Notifications in Hasura\nDESCRIPTION: This GraphQL subscription query fetches notifications for a specific user. It will continuously update with new notifications as they are added to the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription UserNotificationSubscription($user_id: uuid = \"9bd9d300-65b7-11ed-b908-571fef22d2ba\") {\n  notifications(where: { user_id: { _eq: $user_id } }) {\n    id\n    created_at\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Connections to PostgreSQL and Weaviate\nDESCRIPTION: Establishes connections to PostgreSQL database and Weaviate vector database using environment variables. Requires PostgreSQL connection string, Weaviate URL, Weaviate API key, and OpenAI API key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport psycopg2\nfrom psycopg2 import extras\nfrom datetime import datetime\nimport weaviate\nimport weaviate_helper as helper\n\n# Establish a connection\nconn = psycopg2.connect('<YOUR_CONNECTION_STRING>')\n\n# Create a cursor\ncur = conn.cursor()\n\n# Shape the connection string\nconnection_string = \"<YOU_WEAVIATE_URL_WITH_HTTP_OR_HTTPS>\"\n\n# Add the auth config\nauth_config = weaviate.AuthApiKey(api_key='<YOUR_WEAVIATE_API_KEY>')\n\n# Create the Weaviate client\nclient = weaviate.Client(url=connection_string, auth_client_secret=auth_config, additional_headers={\n    \"X-OpenAI-Api-Key\": \"YOUR_OPENAI_API_KEY\"\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Computed Field via CLI in Hasura\nDESCRIPTION: This YAML configuration snippet adds a computed field named 'full_name' to the 'authors' table, associating it with the previously defined SQL function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: authors\n  computed_fields:\n    - name: full_name\n      definition:\n        function:\n          schema: public\n          name: author_full_name\n        table_argument: null\n      comment: ''\n```\n\n----------------------------------------\n\nTITLE: Appending JSON to JSONB Column in Hasura GraphQL\nDESCRIPTION: This mutation appends a JSON object to an existing JSONB column. It uses the _append operator to add {\"key1\": \"value1\"} to the extra_info column of the article table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation update_extra_info($value: jsonb) {\n  update_article(\n    where: {id: {_eq: 1}},\n    _append: {extra_info: $value}  # initial value: {\"key\": \"value\"}\n  ) {\n    affected_rows\n    returning {\n      id\n      extra_info\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Connector Agent via Metadata API with Environment Variable\nDESCRIPTION: HTTP request to add a Data Connector Agent using the Metadata API with an environment variable for the URL. This approach allows for more flexible deployment configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/adding-data-connectors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"dc_add_agent\",\n  \"args\": {\n      \"name\": \"sqlite\",\n      \"url\": {\n        \"from_env\": \"<data-connector-agent-url-environment-variable-name>\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Articles Using GraphQL\nDESCRIPTION: This GraphQL query fetches a list of authors along with their articles. It demonstrates how to use established relationships in the GraphQL API to retrieve nested data structures. The query outputs authors' IDs, names, and related articles' IDs and titles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-many.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  query: \"query {\\n    authors {\\n      id\\n      name\\n      articles {\\n        id\\n        title\\n      }\\n    }\\n }\",\n  response: \"{\\n  \\\"data\\\": {\\n    \\\"authors\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"name\\\": \\\"Justin\\\",\\n        \\\"articles\\\": [\\n          {\\n            \\\"id\\\": 15,\\n            \\\"title\\\": \\\"vel dapibus at\\\"\\n          },\\n          {\\n            \\\"id\\\": 16,\\n            \\\"title\\\": \\\"sem duis aliquam\\\"\\n          }\\n        ]\\n      },\\n      {\\n        \\\"id\\\": 2,\\n        \\\"name\\\": \\\"Beltran\\\",\\n        \\\"articles\\\": [\\n          {\\n            \\\"id\\\": 2,\\n            \\\"title\\\": \\\"a nibh\\\"\\n          },\\n          {\\n            \\\"id\\\": 9,\\n            \\\"title\\\": \\\"sit amet\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inherited Role via Metadata API\nDESCRIPTION: Creates a new inherited role that combines permissions from multiple existing roles. Takes a role name and an array of roles to inherit from. The request must be authenticated with admin privileges.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/inherited-roles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"add_inherited_role\",\n   \"args\":{\n      \"role_name\": \"sample_inherited_role\",\n      \"role_set\": [\n         \"role1\",\n         \"role2\"\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Query Responses with Hasura Cloud\nDESCRIPTION: This GraphQL query snippet demonstrates how to use the `@cached` directive to cache query responses in Hasura. The snippet configures a query to cache its response, improving performance for frequently executed queries. No additional dependencies are required beyond Hasura's GraphQL environment. The query format includes setting a TTL to specify the cache's lifespan or enabling cache refresh on demand.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/caching-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection URL Examples\nDESCRIPTION: Specific examples of MySQL JDBC connection URLs for different scenarios including connecting to a remote host and a local instance on a custom port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mysql://myhost.mycompany.com/mysqltest?user=abc&password=pqr  # assuming the default port 3306\njdbc:mysql://localhost:4533/mysqltest?user=abc&password=pqr        # assuming MySQL is running on port 4533\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura GraphQL Engine\nDESCRIPTION: Commands to download the docker-compose.yaml file for Hasura GraphQL Engine deployment from the official GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura GraphQL Engine to Cloud Run\nDESCRIPTION: Command to deploy Hasura GraphQL Engine to Cloud Run, connecting it to Cloud SQL and configuring environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy hasura-graphql-engine \\\n    --image=hasura/graphql-engine:latest \\\n    --add-cloudsql-instances=<CONNECTION_NAME> \\\n    --update-env-vars='HASURA_GRAPHQL_ENABLE_CONSOLE=true' \\\n    --update-secrets=HASURA_GRAPHQL_DATABASE_URL=hasura-db-connection-string:latest \\\n    --region=us-central1 \\\n    --cpu=1 \\\n    --min-instances=1 \\\n    --memory=2048Mi \\\n    --port=8080 \\\n    --allow-unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Mode for Unauthenticated Access in Hasura\nDESCRIPTION: This HTTP response snippet demonstrates how to configure Hasura to treat requests as unauthenticated when they lack a JWT or valid admin secret. It sets the unauthorized role using a webhook response with a specified role name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/unauthenticated-access.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-Role\": \"your-unauthorized-role-name\",\n}\n```\n\n----------------------------------------\n\nTITLE: Filter All Nested Objects Query\nDESCRIPTION: Query to fetch authors who have all their articles published using a negation pattern.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      _not: {\n        articles: {is_published: {_neq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI\nDESCRIPTION: Command to apply metadata changes in Hasura using CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw String Query Parameters in Actions YAML\nDESCRIPTION: YAML configuration showing how to add raw string query parameters using the request_transform field\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    content_type: application/json\n    url: '{{$base_url}}/create_user'\n    query_params: \"{{concat([\\\"userId=\\\", $session_variables[\\\"x-hasura-user-id\\\"]])}}\"\n    body: '{\"username\": {{$body.input.username}}}'\ncomment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Executing Async Action Mutation in GraphQL\nDESCRIPTION: GraphQL mutation example for placing an asynchronous order that returns an action_id immediately instead of waiting for completion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/async-actions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation placeOrderRequest($order_input: place_order_input!) {\n  place_order(input: $order_input)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to delete a remote schema from Hasura GraphQL engine. Requires only the schema name as argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schemas.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"remove_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OR Expression Query in GraphQL\nDESCRIPTION: Query example using the _or operator to filter articles based on rating or publication status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(where: { _or: [{ rating: { _gt: 4 } }, { is_published: { _eq: true } }] }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a View to Hide Sensitive Fields\nDESCRIPTION: SQL statement to create a view that exposes only non-sensitive fields of the author table. This view selects only the id, name, and city columns, omitting email, phone, and address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/views.mdx#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VIEW author_public AS\n  SELECT id, name, city\n    FROM author\n```\n\n----------------------------------------\n\nTITLE: Querying Hasura GraphQL API with User Role and ID\nDESCRIPTION: This GraphQL query demonstrates how to fetch data from a Hasura API with access control. It uses session variables X-Hasura-Role and X-Hasura-User-Id set to 'user' and '2' respectively, along with X-Hasura-Admin-Secret for authentication. The query returns results based on the user's permissions, with restricted fields like user_profile_private returning null for rows without appropriate access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n# No actual code snippet provided in the text\n```\n\n----------------------------------------\n\nTITLE: Modifying Table with Schema API (HTTP)\nDESCRIPTION: This HTTP request is used to modify the 'output' column of the 'sql_function_table' by running raw SQL through the Hasura schema API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"ALTER TABLE sql_function_table ALTER COLUMN output DROP NOT NULL;\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scalar Computed Field in Postgres\nDESCRIPTION: This snippet defines an SQL function called 'author_full_name' that concatenates the first and last names of an author and serves as a scalar computed field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION author_full_name(author_row authors)\nRETURNS TEXT AS $$\n  SELECT author_row.first_name || ' ' || author_row.last_name\n$$ LANGUAGE sql STABLE;\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Object Filter Query\nDESCRIPTION: Example of filtering articles based on author name using nested object fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(where: { author: { name: { _eq: \"Sidney\" } } }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Schema Relationship with GraphQL Query\nDESCRIPTION: GraphQL query example demonstrating how to query data from a Postgres table with a remote schema relationship. The query fetches order data along with related user information from the remote schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  order {\n    id\n    user_id\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Hasura Project Changes to Version Control\nDESCRIPTION: Git commands to commit the current project status including squashed migrations and metadata changes to version control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# in project dir\ngit add .\ngit commit -m \"<feature-name>\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Event Trigger via Metadata API in Hasura\nDESCRIPTION: This HTTP POST request demonstrates how to manually invoke an Event Trigger using the Hasura Metadata API. It requires specifying the database name, trigger name, and an optional payload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/invoke-trigger-manually.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\" : \"pg_invoke_event_trigger\",\n   \"args\" : {\n      \"source\": \"<db_name>\",\n      \"name\": \"send_email\",\n      \"payload\": {}\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Subscription Query\nDESCRIPTION: GraphQL subscription query to fetch user data based on ID, demonstrating basic subscription syntax.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/execution.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetUser {\n   users(where: {id: {_eq: 1}}) {\n       id\n       name\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running unit tests with ghcid for fast feedback\nDESCRIPTION: Command to run unit tests using ghcid, which allows for quick recompilation and testing during development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ghcid -a -c \"cabal repl graphql-engine-tests -f -O0 -fghci-load-test-with-lib\" --test Main.main\n```\n\n----------------------------------------\n\nTITLE: Matching Paths with _matches_any Operator in GraphQL\nDESCRIPTION: This query uses the _matches_any operator to select ltree paths matching any lquery regex in the provided array. It matches paths containing either 'Pictures' or 'Hobbies'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  tree (\n    where: {path: {_matches_any: [\"*.Pictures.*\", \"*.Hobbies.*\"]}}\n  ) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking SQL Function with Session Argument (v2)\nDESCRIPTION: Example of using track_function v2 to add a custom SQL function with Hasura session configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/custom-functions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"track_function\",\n    \"version\": 2,\n    \"args\": {\n        \"function\": {\n            \"schema\": \"public\",\n            \"name\": \"search_articles\"\n        },\n        \"configuration\": {\n            \"session_argument\": \"hasura_session\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission with Filters and Aggregation\nDESCRIPTION: This example shows how to create a select permission for the 'user' role on the 'article' table. It allows users to read all columns from rows that are either published or authored by themselves, with a limit of 10 rows and permission for aggregation queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"columns\" : \"*\",\n            \"filter\" : {\n                \"$or\" : [\n                    { \"author_id\" : \"X-HASURA-USER-ID\" },\n                    { \"is_published\" : true }\n                ]\n             },\n             \"limit\": 10,\n             \"allow_aggregations\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Select Permissions with Hasura Metadata API\nDESCRIPTION: Utilizes the Metadata API to set select permissions for the 'users' table. Involves sending an HTTP POST request with a JSON payload. Requires 'admin' role for execution.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_select_permission\",\n    \"args\" : {\n        \"source\": \"<db_name>\",\n        \"table\" : \"users\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"columns\" : [\n              \"id\",\n              \"name\"\n            ],\n            \"filter\" : {\n                \"id\" : \"X-Hasura-User-Id\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Native Query\nDESCRIPTION: This SQL query selects the id, title, and an excerpt of the content from the 'article' table. The excerpt is created by truncating the content to a maximum length specified by the 'max_length' argument and appending an ellipsis if the content is longer than the specified length.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, title, (substring(content, 1, {{max_length}}) || (CASE WHEN length(content) < {{max_length}} THEN '' else '...' END)) AS excerpt, date\nFROM article\n```\n\n----------------------------------------\n\nTITLE: Querying Articles by Publication Date using Equality Operator in GraphQL\nDESCRIPTION: This example demonstrates how to fetch a list of articles published on a specific date using the _eq operator with a Date field in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {published_on: {_eq: \"2017-05-26\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Webhook Implementation\nDESCRIPTION: Complete Node.js implementation of the webhook including OpenAI integration, Express server setup, and Hasura mutations\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst openai = require('openai');\n\n// Hasura and OpenAI config\nconst config = {\n  url: '<YOUR_PROJECT_ENDPOINT>',\n  secret: '<YOUR_ADMIN_SECRET>',\n  openAIKey: '<YOUR_OPENAI_KEY>',\n};\n\n// OpenAI API config and client\nconst newOpenAI = new openai.OpenAI({\n  apiKey: config.openAIKey,\n});\n\nconst prompt = `You are a content moderator for SuperStore.com. A customer has left a review for a product they purchased. Your response should only be a JSON object with two properties: \"feedback\" and \"is_appropriate\". The \"feedback\" property should be a string containing your response to the customer only if the review \"is_appropriate\" value is false. The feedback should be on why their review was flagged as inappropriate, not a response to their review. The \"is_appropriate\" property should be a boolean indicating whether or not the review contains inappropriate content. The review is as follows:`;\n\n// Send a request to ChatGPT to see if the review contains inappropriate content\nasync function checkReviewWithChatGPT(reviewText) {\n  try {\n    const moderationReport = await newOpenAI.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [\n        {\n          role: 'user',\n          content: `${prompt} ${reviewText}}`,\n        },\n      ],\n    });\n    return JSON.parse(moderationReport.choices[0].message.content);\n  } catch (err) {\n    return err;\n  }\n}\n\n// Mark their review as visible if there's no feedback\nasync function markReviewAsVisible(userReview, reviewId) {\n  const response = await fetch(config.url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-hasura-admin-secret': config.secret,\n    },\n    body: JSON.stringify({\n      query: `\n      mutation UpdateReviewToVisible($review_id: uuid!) {\n        update_reviews_by_pk(pk_columns: {id: $review_id}, _set: {is_visible: true}) {\n          id\n        }\n      }      \n      `,\n      variables: {\n        review_id: reviewId,\n      },\n    }),\n  });\n  console.log(`🎉 Review approved: ${userReview}`);\n  const { data } = await response.json();\n  return data.update_reviews_by_pk;\n}\n\n// Send a notification to the user if their review is flagged\nasync function sendNotification(userReview, userId, reviewFeedback) {\n  const response = await fetch(config.url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-hasura-admin-secret': config.secret,\n    },\n    body: JSON.stringify({\n      query: `\n      mutation InsertNotification($user_id: uuid!, $review_feedback: String!) {\n        insert_notifications_one(object: {user_id: $user_id, message: $review_feedback}) {\n          id\n        }\n      }      \n      `,\n      variables: {\n        user_id: userId,\n        review_feedback: reviewFeedback,\n      },\n    }),\n  });\n  console.log(\n    `🚩 Review flagged. This is not visible to users: ${userReview}\\n🔔 The user has received the following notification: ${reviewFeedback}`\n  );\n  const { data } = await response.json();\n  return data.insert_notifications_one;\n}\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Our route for the webhook\napp.post('/check-review', async (req, res) => {\n  // confirm the auth header is correct — ideally, you'd keep the secret in an environment variable\n  const authHeader = req.headers['secret-authorization-string'];\n  if (authHeader !== 'super_secret_string_123') {\n    return res.status(401).json({\n      message: 'Unauthorized',\n    });\n  }\n\n  // we'll parse the review from the event payload\n  const userReview = req.body.event.data.new.text;\n  const userId = req.body.event.data.new.user_id;\n\n  // Then check the review with ChatGPT\n  const moderationReport = await checkReviewWithChatGPT(userReview);\n\n  // if the review is appropriate, mark it as visible; if not, send a notification to the user\n  if (moderationReport.is_appropriate) {\n    await markReviewAsVisible(userReview, req.body.event.data.new.id);\n  } else {\n    await sendNotification(userReview, userId, moderationReport.feedback);\n  }\n\n  // Return a JSON response to the client\n  res.json({\n    GPTResponse: moderationReport,\n  });\n});\n\n// Start the server\napp.listen(4000, () => {\n  console.log('Server started on port 4000');\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata in Hasura - Bash\nDESCRIPTION: This Bash command applies the metadata changes made in the YAML configuration of the row fetch limit. Running this command is necessary to enforce the new permissions in the Hasura system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-fetch-limit.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Exporting BigQuery project ID in Bash\nDESCRIPTION: Command to set the HASURA_BIGQUERY_PROJECT_ID environment variable, which is required for testing against BigQuery. This variable stores the identifier of the Google Cloud project being used.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export HASURA_BIGQUERY_PROJECT_ID=hasura-project-identifier\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to create a Remote Schema relationship using the Hasura Metadata API. It creates a relationship named 'user' between the 'Order' type in the 'order-remote-schema' and the 'user' table in the 'pg1' source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-db-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_remote_schema_remote_relationship\",\n  \"args\": {\n    \"name\": \"user\",\n    \"remote_schema\": \"order-remote-schema\",\n    \"type_name\": \"Order\",\n    \"definition\": {\n      \"to_source\": {\n        \"relationship_type\": \"object\",\n        \"source\": \"pg1\",\n        \"table\": { \"name\": \"user\", \"schema\": \"public\" },\n        \"field_mapping\": {\n          \"user_id\": \"id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Format for Connecting Crunchy Postgres to Hasura\nDESCRIPTION: Shows the structure of the database connection URL needed to connect a Crunchy Postgres database to Hasura. The URL includes placeholders for username, password, host server, port, and database name that need to be replaced with actual credentials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/crunchy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://<user-name>:<password>@<host-server>:<port>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Actions Basic Command Syntax\nDESCRIPTION: The basic command syntax for creating a Hasura Action, which extends Hasura's schema with custom business logic using queries and mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions create [action-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connector Request Transformation\nDESCRIPTION: Defines a JSON request transformation for updating user metadata in Auth0, dynamically constructing the request body and URL using session variables\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_transform\": {\n    \"body\": \"{\\\"user_metadata\\\": {\\\"picture\\\": {{$body.input.picture_url}} } }\",\n    \"url\": \"{{$base_url}}/{{$session_variables['x-hasura-user-id']}}\",\n    \"method\": \"PATCH\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: If Matched Clause for Upserts in MS SQL Server\nDESCRIPTION: Defines the structure for the 'if_matched' clause used in upsert scenarios for MS SQL Server, allowing control over matching and updating records based on specified conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nif_matched: {\n  match_columns: table_match_column! | [table_match_column!]!\n  update_columns: table_update_column! | [table_update_column!]!\n  where: table_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Webhook Implementation\nDESCRIPTION: Complete Node.js implementation of the webhook server that handles order status change events and sends notifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// get express sorted\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// notification for user about change in status of order\nasync function sendNotification(userId, orderId, orderStatus) {\n  const response = await fetch(`<YOUR_PROJECT_ENDPOINT>`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-hasura-admin-secret': `<YOUR_ADMIN_SECRET>`,\n    },\n    body: JSON.stringify({\n      query: `\n                mutation InsertNotification($user_id: uuid!, $message: String!) {\n                    insert_notifications_one(object: {user_id: $user_id, message: $message}) {\n                        id\n                    }\n                }\n            `,\n      variables: {\n        user_id: userId,\n        message: `Status of Order #${orderId} is now ${orderStatus}.`,\n      },\n    }),\n  });\n  console.log(\n    `Notification sent. The user has received the following notification: Status of Order #${orderId} is now ${orderStatus}.`\n  );\n  const { data } = await response.json();\n  return data.insert_notifications_one;\n}\n\n// now we can write the actual handler using functions\napp.post('/order-status-change', async (req, res) => {\n  // check the header for auth\n  const authHeader = req.headers['secret-authorization-string'];\n  if (authHeader !== 'super_secret_string_123') {\n    return res.status(401).json({\n      message: 'Unauthorized',\n    });\n  }\n\n  // parse the status from the event payload\n  const orderStatus = req.body.event.data.new.status;\n  const orderId = req.body.event.data.new.id;\n  const userId = req.body.event.data.new.user_id;\n\n  // send notification to user\n  await sendNotification(userId, orderId, orderStatus);\n\n  // send some JSON to the client\n  res.json({\n    orderId: orderId,\n    orderStatus: orderStatus,\n  });\n});\n\n// start the server\napp.listen(4000, () => {\n  console.log('Server started on port 4000');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific APIs in Hasura GraphQL Engine\nDESCRIPTION: Shows how to selectively enable APIs in Hasura, typically only enabling the GraphQL API for production scenarios. This can be done using environment variables or command-line flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# set this env var to enable only the graphql api\nHASURA_GRAPHQL_ENABLED_APIS=graphql\n\n# if you're using flags\ngraphql-engine --database-url=<database-url> serve --enabled-apis=graphql\n```\n\n----------------------------------------\n\nTITLE: Filtering Students by Total Marks Using GraphQL\nDESCRIPTION: This GraphQL query filters students based on their total marks, which is a computed field. It fetches all students with total marks greater than or equal to 80.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  student(where: {total_marks: {_gte: 80}}){\n    roll_no\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Object by Primary Key with GraphiQLIDE\nDESCRIPTION: Demonstrates deletion of a single article from the 'article' table using the primary key via GraphQL mutation. The operation returns the deleted object data or null if non-existent. The example covers scenarios with existing and non-existing objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_an_object {\n    delete_article_by_pk (\n      id: 1\n    ) {\n      id\n      title\n      user_id\n    }\n  }\n\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_an_object {\n  delete_article_by_pk (\n    id: 100\n  ) {\n    id\n    title\n    user_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship with Metadata API\nDESCRIPTION: HTTP request to create an object relationship using Hasura's pg_create_object_relationship Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_object_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"articles\",\n    \"name\": \"author\",\n    \"using\": {\n      \"foreign_key_constraint_on\": \"author_id\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting invalid role into users table in Postgres\nDESCRIPTION: This SQL snippet demonstrates inserting an invalid role ('spaghetti') into the `users` table. This highlights the need for an enum to restrict the allowed values for the `role` column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"INSERT INTO users (name, role) VALUES\\n  ('Hal', 'spaghetti');\"\n```\n\n----------------------------------------\n\nTITLE: Dropping an Action with HTTP POST\nDESCRIPTION: Removes an existing action named 'create_user' and its associated permissions, with option to clear related data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/actions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"drop_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"clear_data\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron Trigger with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to create a new cron trigger using the Hasura Metadata API. It includes setting the trigger name, webhook URL, schedule, payload, and other optional parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_cron_trigger\",\n    \"args\" : {\n        \"name\": \"sample_cron\",\n        \"webhook\": \"https://httpbin.org/post\",\n        \"schedule\":  \"* * * * *\",\n        \"payload\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        },\n        \"include_in_metadata\":false,\n        \"comment\":\"sample_cron comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using set_custom_types API to Define Custom GraphQL Types in Hasura\nDESCRIPTION: This code demonstrates how to use the set_custom_types API endpoint to define custom GraphQL types including input objects and objects with relationships. The API replaces existing types with the newly provided definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/custom-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [\n      {\n        \"name\": \"User\",\n        \"fields\": [\n          {\n            \"name\": \"username\",\n            \"type\": \"String!\"\n          },\n          {\n            \"name\": \"password\",\n            \"type\": \"String!\"\n          }\n        ]\n      }\n    ],\n    \"objects\": [\n      {\n        \"name\": \"UserId\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\": \"Int!\"\n          }\n        ],\n        \"relationships\": [\n          {\n            \"name\": \"posts\",\n            \"type\": \"array\",\n            \"remote_table\": \"post\",\n            \"field_mapping\": {\n              \"id\": \"user_id\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationships via Hasura API (HTTP)\nDESCRIPTION: This HTTP request is an example of how to create an array relationship in Hasura GraphQL Engine. It includes details about the source, table, and foreign key constraint that governs the relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"mssql_create_array_relationship\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"table\": \"<table name>\",\n      \"name\": \"<relationship name>\",\n      \"using\": {\n         \"foreign_key_constraint_on\": {\n            \"table\": \"<reference table name>\",\n            \"column\": \"<reference column>\"\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JWT in HTTP Request\nDESCRIPTION: Example of sending a JWT token in an HTTP request with an optional role header\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/graphql HTTP/1.1\nAuthorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI...\nX-Hasura-Role: editor\n\n...\n```\n\n----------------------------------------\n\nTITLE: Limiting Results with Offset in GraphQL\nDESCRIPTION: This GraphQL query shows how to fetch 5 authors from the list of all authors, starting with the 6th one using both limit and offset arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5,\n    offset:5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata using CLI\nDESCRIPTION: This command exports the entire Hasura metadata configuration as YAML files within the /metadata directory of your project. It utilizes the Hasura CLI to save the internal metadata configuration to a file for version control or CI/CD pipelines.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# in project dir\nhasura metadata export\"\n```\n\n----------------------------------------\n\nTITLE: Using Stored Procedure in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to use a tracked stored procedure. It shows the syntax for specifying arguments, filtering, sorting, and pagination options, as well as selecting fields from the result.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  <stored procedure name>(\n    [args: {\"<argument name>\": <argument value>, ...},]\n    [where: ...,]\n    [order_by: ..., distinct_on: ...,]\n    [limit: ..., offset: ...]\n  ) {\n    <field 1>\n    <field 2>\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to update an existing remote schema configuration. Updates can include changes to URL, headers, and other settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schemas.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"update_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\",\n        \"definition\": {\n            \"url\": \"https://remote-server.com/graphql\",\n            \"headers\": [{\"name\": \"X-Server-Request-From\", \"value\": \"Hasura\"}],\n            \"forward_client_headers\": false,\n            \"timeout_seconds\": 60\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Remote Schema Relationship in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch data using the Remote Schema relationship. It retrieves an order by ID from the remote schema and includes the related user information from the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-db-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  order_remote_schema {\n  \torder (id: 1) {\n    \tid\n    \tuser_id\n    \tuser {\n      \tid\n        name\n    \t}\n  \t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Top-Level Key from JSONB Column in Hasura GraphQL\nDESCRIPTION: This mutation deletes a top-level key from a JSONB column. It uses the _delete_key operator to remove the \"key\" from the extra_info column in the article table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation update_extra_info {\n  update_article(\n    where: {id: {_eq: 1}},\n    _delete_key: {extra_info: \"key\"}  # initial value \"{\"key0\": \"value0, \"key\": \"value\", \"key1\": \"value1\"}\"\n  ) {\n    affected_rows\n    returning {\n      id\n      extra_info\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using N-ary Aggregate Functions in GraphQL\nDESCRIPTION: GraphQL query demonstrating the use of an aggregate function (_concat) that takes additional parameters beyond the column to aggregate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Customer {\n    Emails_aggregate {\n      _concat(separator: \",\") # Concatenate all the Invoice's customer's emails together separated by a comma\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping by a scalar field with ordering and aggregation in GraphQL\nDESCRIPTION: This query groups invoices by BillingAddress.Country, orders the groups by country in ascending order, and performs aggregations on each group including count and minimum state value per country.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    grouping_keys: [{ BillingAddress: { _scalar_field: Country } }] # Group by BillingAddress.Country\n    order_by: [{ group_key: { BillingAddress: { Country: Asc } } }] # Sort groups by BillingAddress.Country asc\n  ) {\n    group_key {\n      BillingAddress {\n        Country # The value of the billing address country per group\n      }\n    }\n    group_aggregate {\n      _count # The number of invoices per BillingAddress.Country\n      BillingAddress {\n        State {\n          _min # Smallest BillingState per BillingCountry lexicographically\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query in GraphiQL\nDESCRIPTION: This snippet demonstrates a GraphQL query using GraphiQL that retrieves order details along with associated user information, utilizing the established Remote Schema relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nquery {\n  order {\n    id\n    user_id\n    user {\n      id\n      name\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Object Sorting in GraphQL\nDESCRIPTION: Demonstrates how to fetch a list of authors sorted by their names in ascending order using the order_by argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors (\n    order_by: {name: asc}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships between Native Queries and Tables\nDESCRIPTION: API request that demonstrates creating relationships between a Native Query and an existing database table. This example defines a logical model for articles and establishes an object relationship with the authors table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"bigquery_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"text\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"default\"\n      }\n    }\n    {\n      \"type\": \"bigquery_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_table\": \"authors\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"get_articles\",\n        \"source\": \"default\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking PostgreSQL Logical Model\nDESCRIPTION: API endpoint for adding a Logical Model to the GraphQL schema using PostgreSQL. Allows specifying model name, fields, types and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<PostgreSQL field type>\",\n        \"nullable\": false,\n        \"description\": \"<optional field description>\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Caddy as a Reverse Proxy for Hasura\nDESCRIPTION: Sample Caddyfile configuration to proxy requests to Hasura GraphQL Engine. It includes examples for both subdomain and URL prefix routing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/serve-behind-proxy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura.<my-domain.com> {\n  reverse_proxy localhost:8080\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\n<my-domain.com> {\n  handle_path /hasura* {\n    reverse_proxy localhost:8080\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking Logical Model via API\nDESCRIPTION: Explains how to untrack an existing Logical Model using the metadata API by sending the necessary JSON data that includes the name of the Logical Model. Constraints include that the model should not be in use by any Native Queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mongo_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Hasura Metadata using CLI\nDESCRIPTION: This command reloads the Hasura metadata using the Hasura CLI to synchronize the metadata with the database schema. It fetches the latest schema information and updates the metadata accordingly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"# in project directory\nhasura metadata reload\"\n```\n\n----------------------------------------\n\nTITLE: Checking Hasura Migration Status\nDESCRIPTION: Command to check the status of migrations, showing which migrations are present in the filesystem and which have been applied to the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# in project dir\nhasura migrate status\n```\n\n----------------------------------------\n\nTITLE: Filter None Nested Objects Query\nDESCRIPTION: Query to fetch authors who have no published articles using negation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      _not: {\n        articles: {is_published: {_eq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Action Permissions in YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to define permissions for the 'insertAuthor' action in the Hasura metadata file. It grants access to both 'user' and 'publisher' roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- actions\n  - name: insertAuthor\n    definition:\n      kind: synchronous\n      handler: '{{ACTIONS_BASE_URL}}/insertAuthor'\n    permissions:\n    - role: user\n    - role: publisher\n```\n\n----------------------------------------\n\nTITLE: Example of Restricted Permissions for Reader Role in YAML\nDESCRIPTION: This YAML configuration demonstrates a practical example of setting up permissions for a 'reader' role that can only access published articles, hiding the 'is_published' column while allowing access to other specific columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: '<name>'\n    fields: ...\n    select_permissions:\n      - role: reader\n        permission:\n          columns:\n            - id\n            - title\n            - contents\n            - date\n          filter:\n            is_published:\n              _eq: true\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Querying Users by Age using Not Equal Operator in GraphQL\nDESCRIPTION: This query fetches a list of users whose age is not 30 using the _neq operator with an Integer field in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { age: { _neq: 30 } }) {\n    id\n    name\n    age\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example Using Native Query Relationships\nDESCRIPTION: Example GraphQL query demonstrating how to fetch authors with their related articles, including different excerpt lengths using query arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_authors {\n    name\n\n    short_excerpt: articles(args: { length: 10 }) {\n      title\n      contents\n    }\n\n    long_excerpt: articles(args: { length: 100 }) {\n      title\n      contents\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Update Permission with Checks and Auto-values\nDESCRIPTION: This example demonstrates how to create an update permission for the 'user' role on the 'article' table. It allows users to update specific columns of articles they authored, enforces content validation, and automatically sets the updated_at timestamp.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"columns\" : [\"title\", \"content\", \"category\"],\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"check\" : {\n                \"content\" : {\n                  \"_ne\": \"\"\n                }\n            },\n            \"set\":{\n                \"updated_at\" : \"NOW()\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using OrderByEnum in GraphQL Queries\nDESCRIPTION: This example shows how to use the OrderByEnum to specify the sorting order for articles based on their rating.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArticleOrderByRating {\n  article(order_by: { rating: asc }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Stored Procedure using Hasura API\nDESCRIPTION: This HTTP request shows how to track a stored procedure using the Hasura metadata API. It includes the procedure details, argument specifications, configuration, and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_stored_procedure\",\n  \"args\": {\n    \"source\": <source name>,\n    \"stored_procedure\": <procedure name> | { \"schema\": <schema name>, \"name\": <procedure name> },\n    \"arguments\": {\n      \"<argument name>\": {\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional argument description>\"\n      }\n    },\n    \"configuration\": {\n      \"exposed_as\": \"query\",\n      \"custom_name\": <custom name>\n    },\n    \"returns\": <logical model name>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @skip Directive in GraphQL Queries\nDESCRIPTION: This query demonstrates the use of the @skip directive in GraphQL. It conditionally excludes the 'publisher' field based on a boolean variable, allowing for dynamic field exclusion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  articles {\n    title\n    publisher @skip(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for GraphQL Schema Introspection\nDESCRIPTION: This snippet presents an `graphql_schema_introspection.yaml` file, disabling GraphQL introspection for specific roles. It disables introspection for `customer` and `user` roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndisabled_for_roles:\n  - customer\n  - user\n\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Objects Using Array Relationships in GraphQL\nDESCRIPTION: Example query showing how to fetch a list of authors and their associated articles using a one-to-many relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/nested-object-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claims Map with Literal Values in JWT for Hasura\nDESCRIPTION: Example of configuring claims_map in JWT config for Hasura, using literal values for some claims and JSON path for others. It demonstrates setting x-hasura-allowed-roles and x-hasura-default-role as literal values, while x-hasura-user-id uses a JSON path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RS512\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n\",\n  \"claims_map\": {\n    \"x-hasura-allowed-roles\": [\"user\", \"editor\"],\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-user-id\": { \"path\": \"$.user.id\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with at Least One Article in GraphQL\nDESCRIPTION: This GraphQL query retrieves authors who have written at least one article. It demonstrates how to check for the existence of nested objects using an empty object condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      articles: {}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Cloud SQL Proxy Credentials\nDESCRIPTION: Creates a Kubernetes secret containing the JSON key file for Cloud SQL proxy authentication. [JSON_KEY_FILE_PATH] should be replaced with the actual path to the JSON key file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloudsql-instance-credentials \\\n        --from-file=credentials.json=[JSON_KEY_FILE_PATH]\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Table Schema in SQL\nDESCRIPTION: SQL schema definition for a customer table with basic fields including UUID, name, city and email.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncustomer (id uuid, name text, city text, email text)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for JWT Authentication in Node.js\nDESCRIPTION: Demonstrates how to set up environment variables for JWT authentication, including private and public RSA keys, key ID, database URL, and port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nypPTIfSzZ399o........\"\nAUTH_PUBLIC_KEY=\"-----BEGIN PUBLIC KEY-----\\nV02/4RJi........\"\nAUTH_KEY_ID=\"<unique-id-for-this-key>\"\nDATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database_name>\nPORT=8080\n```\n\n----------------------------------------\n\nTITLE: Filtering Items by Tags Using _contained_in Operator in GraphQL\nDESCRIPTION: This query fetches all items where the 'Tags' property contains the value 'tag1' and is also contained in the list ['tag1', 'tag2'] using the _contained_in operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/jsonb-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery get_items_with_tags{\n  items(\n    where: {\n      tags: {\n        _contained_in: {\n          value: [\"tag1\", \"tag2\"]\n        }\n      }\n    }\n  ) {\n    id\n    name\n    tags\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Creation Action in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates a create_user action that takes email and name as inputs and returns the created user's id, name, and email. It's used to illustrate the debugging process for Hasura Actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/debugging.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  create_user(email: \"foo@bar.com\", name: \"Foo\"){\n    id\n    user {\n      name\n      email\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Permissions in YAML for Hasura CLI\nDESCRIPTION: Configures user permissions for the 'users' table using YAML. Sets 'select' permissions on 'id' and 'name' columns with a filter on 'id'. Requires Hasura CLI to apply metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: users\n  select_permissions:\n    - role: user\n      permission:\n        columns:\n          - id\n          - name\n        filter:\n          id:\n            _eq: X-Hasura-User-Id\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Hasura GraphQL Engine\nDESCRIPTION: This snippet demonstrates how to configure CORS settings for Hasura GraphQL Engine using environment variables or flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Accepts from https://app.foo.bar.com , https://api.foo.bar.com etc.\nHASURA_GRAPHQL_CORS_DOMAIN=\"https://*.foo.bar.com\"\n\n# Accepts from https://app.foo.bar.com:8080 , http://api.foo.bar.com:8080,\n# http://app.localhost, http://api.localhost, http://localhost:3000,\n# http://example.com etc.\nHASURA_GRAPHQL_CORS_DOMAIN=\"https://*.foo.bar.com:8080, http://*.localhost, http://localhost:3000, http://example.com\"\n\n# Accepts from all domain\nHASURA_GRAPHQL_CORS_DOMAIN=\"*\"\n\n# Accepts only from http://example.com\nHASURA_GRAPHQL_CORS_DOMAIN=\"http://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Chat Application Schema\nDESCRIPTION: SQL schema definition for a chat application with tables for users and messages.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/use-cases.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuser (\n  id INT PRIMARY KEY,\n  username TEXT UNIQUE\n)\n\nmessage (\n  id INT PRIMARY KEY,\n  texts TEXT,\n  time_stamp TIMESTAMP default now(),\n  /* used to create relationship 'author' with the 'user' table */\n  user_id INT FOREIGN KEY REFERENCES user(id)\n)\n```\n\n----------------------------------------\n\nTITLE: Text Comparison with Greater Than Operator in GraphQL\nDESCRIPTION: Query to fetch authors whose names are alphabetically after 'M' using the _gt operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_gt: \"M\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authors and Articles Tables in SQL - MS SQL Server\nDESCRIPTION: This SQL snippet defines two tables: authors and articles, specifying their structure and relationships, including their fields and data types. These tables are essential for managing related data in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nauthors (\n  id int PRIMARY KEY,\n  name text\n)\n\narticles (\n  id int PRIMARY KEY,\n  title text,\n  content text,\n  rating int,\n  author_id int\n)\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Product in GraphQL\nDESCRIPTION: This GraphQL snippet is designed to query a single product by its unique ID using the Hasura GraphiQL interface. It requires GraphQL as a prerequisite and uses a UUID for querying specific product attributes such as id, name, and description.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery SingleProductsQuery($id: uuid!) {\n  products_by_pk(id: $id) {\n    id\n    name\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Aggregate Selection in GraphQL\nDESCRIPTION: This input type defines options for aggregating multicurrency values, supporting operations on both the Currency string field and the Value decimal field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_80\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_aggregate_select @oneOf {\n  # Scalar fields\n  Currency: String_aggregate_select\n  Value: Decimal_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Type in GraphQL SDL\nDESCRIPTION: Shows how to define an input type in GraphQL. Input types are used for complex objects passed as arguments to queries and mutations, allowing for structured data input in operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput LoginInfo {\n  username: String!\n  password: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Boolean Values in GraphQL\nDESCRIPTION: Query to fetch articles based on a boolean field is_published using the _eq operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {is_published: {_eq: false}}\n  ) {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Geography to Geometry for Polygon Filtering in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to cast a geography field to geometry type to use polygon-based filtering operations on cities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery cities_inside($polygon: geometry) {\n  cities(\n    where: {location: {\n      _cast: {geometry: {\n        _st_within: $polygon\n      }}\n    }}\n  ) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Heterogeneous execution mutation example in GraphQL\nDESCRIPTION: A demonstration of heterogeneous execution in v2, where a single mutation can target different database sources (Postgres and MSSQL) within the same operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  // goes to Postgres\n  insert_author_one(object: {name: \"Simon Peyton Jones\"}) {\n    name\n  }\n\n  // goes to MSSQL\n  insert_publication_one(object: {name: \"Template meta-programming for Haskell\"}) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Git Push Command\nDESCRIPTION: Command to push local changes to the remote repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <name-of-your-branch>\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata using HTTP POST in Hasura\nDESCRIPTION: This snippet demonstrates how to export the current Metadata from the Hasura server as a JSON file using the export_metadata endpoint. It includes both version 1 and 2 request formats.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"export_metadata\",\n    \"version\": 1 | 2\n    \"args\": {}\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n     \"type\": \"export_metadata\",\n     \"version\": 2,\n     \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MS SQL Server Delete Mutation Schema in GraphQL\nDESCRIPTION: Defines the auto-generated schema for delete mutations on MS SQL Server, outlining the required `where` clause to filter deletions and explaining the mutation response structure, including affected rows and objects. Requires GraphQL support for interacting with MS SQL Server's tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndelete_article (\n  where: article_bool_exp!\n): article_mutation_response\n\n# response of any mutation on the table \"article\"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object delete\ndelete_article_by_pk (\n  # all primary key columns args\n  id: Int\n): article\n```\n\n----------------------------------------\n\nTITLE: Querying Customers with Failed Orders using Remote Relationships in GraphQL\nDESCRIPTION: This GraphQL query demonstrates the new capability to use remote relationships in query filters. It retrieves customers who have cancelled orders during a specific time period, utilizing data from a separate order logs data source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery CustomersWithFailedOrders {\n  Customers(\n    where: {\n      OrderLogs: {\n        _and: [\n          { timestamp: { _gt: \"2024-10-10\" } }\n          { status: { _eq: \"cancelled\" } }\n        ]\n      }\n    }\n  ) {\n    CustomerId\n    EmailId\n    OrderLogs {\n      OrderId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining filters with _and operator in BigQuery GraphQL\nDESCRIPTION: Demonstrates the use of the _and operator to filter articles published within a specific time range. This example fetches articles published in the year 2017 by specifying both lower and upper date boundaries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/boolean-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles (\n    where: {\n      _and: [\n        { published_on: {_gte: \"2017-01-01\"}},\n        { published_on: {_lte: \"2017-12-31\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw String Query Parameters via CLI\nDESCRIPTION: YAML configuration for adding raw string query parameters to event trigger request transformation using the CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params: \"{{concat([\\\"userId=\\\", $session_variables[\\\"x-hasura-user-id\\\"]])}}\"\n    content_type: application/json\n    body: \"{\n  \\\"table\\\": {\n    \\\"name\\\": {{$body.table.name}},\n    \\\"schema\\\": {{$body.table.schema}}\n  },\n  \\\"To\\\": {\n    \\\"username\\\": {{$body.event.data.new.name}},\n    \\\"email\\\": {{$body.event.data.new.email}}\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Diff for Hedis Changes\nDESCRIPTION: Creates a diff file containing Hedis-specific modifications by comparing current commands.json with original Redis documentation file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/codegen/HOW-TO-UPDATE.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndiff commands.json commands.json.orig > my-changes.diff\n```\n\n----------------------------------------\n\nTITLE: GraphQL Nested Insert Mutation Query\nDESCRIPTION: GraphQL mutation query demonstrating how to insert an Album with related Artist and Track records in a single operation. Shows nested object and array relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_61\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertAlbum {\n  insert_Album(objects: [\n    {\n      AlbumId: 400,\n      Title: \"Fearless\",\n      Artist: {\n        data: {\n          ArtistId: 300,\n          Name: \"Taylor Swift\"\n        }\n      },\n      Tracks: {\n        data: [\n          { TrackId: 4000, Name: \"Fearless\" },\n          { TrackId: 4001, Name: \"Fifteen\" }\n        ]\n      }\n    }\n  ]) {\n    affected_rows\n    returning {\n      AlbumId\n      Title\n      Artist {\n        ArtistId\n        Name\n      }\n      Tracks {\n        TrackId\n        Name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Performance Settings in rc.local\nDESCRIPTION: Script added to /etc/rc.local to optimize CPU performance by disabling deep sleep states, setting performance governor, and disabling turbo boost.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/README_AMI.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Disable deeper sleep states, use \"performance\" governor:\ncpupower frequency-set -g performance\ncpupower idle-set -D10\n# Other voodoo...\n# https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/processor_state_control.html\n# Disable turbo-boost for less variability\necho 1 > /sys/devices/system/cpu/intel_pstate/no_turbo\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This snippet shows the Rust representation of a parsed GraphQL query. It demonstrates how GraphQL queries are structured in memory using nested Rust types. The query retrieves 'animal' and 'faveSnack' fields, along with a fragment on type 'Pet' that includes 'playmates' with a 'count' subfield.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0005_selection_with_inline_fragments.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"animal\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 10,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 10,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"faveSnack\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 13,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 13,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: InlineFragment(\n                                            InlineFragment {\n                                                type_condition: Some(\n                                                    Spanning {\n                                                        item: TypeCondition {\n                                                            on: Spanning {\n                                                                item: TypeName(\n                                                                    Name(\n                                                                        \"Pet\",\n                                                                    ),\n                                                                ),\n                                                                start: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 12,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 14,\n                                                                },\n                                                            },\n                                                        },\n                                                        start: SourcePosition {\n                                                            line: 4,\n                                                            col: 9,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 4,\n                                                            col: 14,\n                                                        },\n                                                    },\n                                                ),\n                                                directives: [],\n                                                selection_set: Spanning {\n                                                    item: SelectionSet {\n                                                        items: [\n                                                            Spanning {\n                                                                item: Field(\n                                                                    Field {\n                                                                        alias: None,\n                                                                        name: Spanning {\n                                                                            item: Name(\n                                                                                \"playmates\",\n                                                                            ),\n                                                                            start: SourcePosition {\n                                                                                line: 5,\n                                                                                col: 7,\n                                                                            },\n                                                                            end: SourcePosition {\n                                                                                line: 5,\n                                                                                col: 15,\n                                                                            },\n                                                                        },\n                                                                        arguments: None,\n                                                                        directives: [],\n                                                                        selection_set: Some(\n                                                                            Spanning {\n                                                                                item: SelectionSet {\n                                                                                    items: [\n                                                                                        Spanning {\n                                                                                            item: Field(\n                                                                                                Field {\n                                                                                                    alias: None,\n                                                                                                    name: Spanning {\n                                                                                                        item: Name(\n                                                                                                            \"count\",\n                                                                                                        ),\n                                                                                                        start: SourcePosition {\n                                                                                                            line: 6,\n                                                                                                            col: 9,\n                                                                                                        },\n                                                                                                        end: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Pet Store API\nDESCRIPTION: Complete GraphQL schema generated from OpenAPI specification for the Pet Store API, showing types and mutations after filtering for the updatePet operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/openapi-to-hasura-single-action.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar BigInt\n\ntype Category {\n  id: BigInt\n  name: String\n}\n\ninput CategoryInput {\n  id: BigInt\n  name: String\n}\n\ntype Mutation {\n  updatePet(petInput: PetInput!): Pet\n}\n\ntype Pet {\n  category: Category\n  id: BigInt\n  name: String!\n  photoUrls: [String]!\n  status: Status\n  tags: [Tag]\n}\n\ninput PetInput {\n  category: CategoryInput\n  id: BigInt\n  name: String!\n  photoUrls: [String]!\n  status: Status\n  tags: [TagInput]\n}\n\ntype Query\n\nenum Status {\n  available\n  pending\n  sold\n}\n\ntype Tag {\n  id: BigInt\n  name: String\n}\n\ninput TagInput {\n  id: BigInt\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the third-party open source dependencies used in the Hasura GraphQL Engine project. It includes columns for the dependency name, version, and license.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/dependencies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                  | Version                                                                       | License                 |\n| ----------------------------------------------------- | ----------------------------------------------------------------------------- | ----------------------- |\n|aeson                                                |2.1.2.1                                                                      |BSD-3-Clause                                             |\n|aeson-casing                                         |0.2.0.0                                                                      |MIT                                                      |\n|aeson-pretty                                         |0.8.9                                                                        |BSD-3-Clause                                             |\n|ansi-wl-pprint                                       |0.6.9                                                                        |BSD-3-Clause                                             |\n|asn1-encoding                                        |0.9.6                                                                        |BSD-3-Clause                                             |\n|asn1-types                                           |0.3.4                                                                        |BSD-3-Clause                                             |\n|async                                                |2.2.4                                                                        |BSD-3-Clause                                             |\n|atomic-primops                                       |0.8.4                                                                        |BSD-3-Clause                                             |\n|base                                                 |4.17.1.0                                                                     |BSD-3-Clause                                             |\n|base16-bytestring                                    |1.0.2.0                                                                      |BSD-3-Clause                                             |\n|base64-bytestring                                    |1.2.1.0                                                                      |BSD-3-Clause                                             |\n|bytestring                                           |0.11.4.0                                                                     |BSD-3-Clause                                             |\n|case-insensitive                                     |1.2.1.0                                                                      |BSD-3-Clause                                             |\n|cereal                                               |0.5.8.3                                                                      |BSD-3-Clause                                             |\n|containers                                           |0.6.7                                                                        |BSD-3-Clause                                             |\n|cron                                                 |0.7.0                                                                        |MIT                                                      |\n|cryptonite                                           |0.3                                                                          |BSD-3-Clause                                             |\n|data-default                                         |0.7.1.1                                                                      |BSD-3-Clause                                             |\n|data-has                                             |0.4.0.0                                                                      |BSD-3-Clause                                             |\n|deepseq                                              |1.4.8.0                                                                      |BSD-3-Clause                                             |\n|directory                                            |1.3.7.1                                                                      |BSD-3-Clause                                             |\n|ekg-core                                             |0.1.1.7                                                                      |BSD-3-Clause                                             |\n|ekg-json                                             |0.1.0.7                                                                      |BSD-3-Clause                                             |\n|exceptions                                           |0.10.5                                                                       |BSD-3-Clause                                             |\n|extra                                                |1.7.12                                                                       |BSD-3-Clause                                             |\n|fast-logger                                          |3.1.2                                                                        |BSD-3-Clause                                             |\n|file-embed                                           |0.0.15.0                                                                     |BSD-2-Clause                                             |\n|filepath                                             |1.4.2.2                                                                      |BSD-3-Clause                                             |\n|flush-queue                                          |1.0.0                                                                        |BSD-3-Clause                                             |\n|fold-debounce                                        |0.2.0.11                                                                     |BSD-3-Clause                                             |\n|hashable                                             |1.4.1.0                                                                      |BSD-3-Clause                                             |\n|hedis                                                |0.15.2                                                                       |BSD-3-Clause                                             |\n|hostname                                             |1                                                                            |BSD-3-Clause                                             |\n|hs-opentelemetry-otlp                                |0.0.1.0                                                                      |BSD-3-Clause                                             |\n|http-client                                          |0.7.13.1                                                                     |MIT                                                      |\n|http-client-tls                                      |0.3.6.1                                                                      |MIT                                                      |\n|http-types                                           |0.12.3                                                                       |BSD-3-Clause                                             |\n|immortal                                             |0.2.2.1                                                                      |MIT                                                      |\n|insert-ordered-containers                            |0.2.5.1                                                                      |BSD-3-Clause                                             |\n|jose                                                 |0.9                                                                          |Apache-2.0                                               |\n|jwt                                                  |0.11.0                                                                       |MIT                                                      |\n|kan-extensions                                       |5.2.5                                                                        |BSD-3-Clause                                             |\n|launchdarkly-server-sdk                              |4.0.0                                                                        |Apache-2.0                                               |\n|lens                                                 |5.2.2                                                                        |BSD-2-Clause                                             |\n|lens-aeson                                           |1.2.2                                                                        |MIT                                                      |\n|lifted-async                                         |0.10.2.3                                                                     |BSD-3-Clause                                             |\n|lifted-base                                          |0.2.3.12                                                                     |BSD-3-Clause                                             |\n|memory                                               |0.18.0                                                                       |BSD-3-Clause                                             |\n|mmorph                                               |1.2.0                                                                        |BSD-3-Clause                                             |\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata Using CLI\nDESCRIPTION: This Bash command applies the defined metadata changes in Hasura, ensuring that the column-level permissions settings are recognized by the system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-level-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n\n```\n\n----------------------------------------\n\nTITLE: Redelivering an Event with HTTP POST in Hasura Schema/Metadata API\nDESCRIPTION: This snippet demonstrates how to redeliver a previously failed event using its UUID. This operation resets the retry count and attempts to deliver the event again according to its retry configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/event-triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"redeliver_event\",\n    \"args\" : {\n        \"event_id\": \"ad4f698f-a14e-4a6d-a01b-38cd252dd8bf\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cascading Changes with run_sql API in Hasura\nDESCRIPTION: Example of using the cascade option to drop a column that has metadata dependencies. When cascade is true, dependent permissions will also be dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"ALTER TABLE author DROP COLUMN bio\",\n        \"cascade\" : true\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"result_type\": \"CommandOk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using @include Directive in GraphQL\nDESCRIPTION: Shows how to use the @include directive to conditionally include fields based on a boolean variable. The example demonstrates including/excluding the publisher field based on a variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  bigquery_articles {\n    title\n    publisher @include(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MS SQL Server Source via Metadata API\nDESCRIPTION: Updates an existing MS SQL Server source in Hasura using the `mssql_update_source` Metadata API action.  The example demonstrates how to update a source named `mssql1` with new configuration and customization settings.  It requires admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_update_source\",\n  \"args\": {\n    \"name\": \"mssql1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"connection_string\": {\n           \"from_env\": \"<CONN_STRING_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"max_connections\": 50,\n          \"idle_timeout\": 180\n        }\n      }\n    },\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic User and Query Schema in GraphQL\nDESCRIPTION: Example Remote Schema definition with User type and queries\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id         ID!\n  first_name String!\n  last_name  String!\n  phone      String!\n  email      String!\n}\n\ntype Query {\n  user(id: ID!) : User\n  get_users_by_name (first_name: String!, last_name:String): [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA based JWT for Hasura with PEM Public Key\nDESCRIPTION: Example of configuring EdDSA based JWT authentication for Hasura GraphQL Engine using a public key in PEM format. It uses Ed25519 algorithm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Ed25519\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAG9I+toAAJicilbPt36tiC4wi7E1Dp9rMmfnwdKyVXi0=\\n-----END PUBLIC KEY-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with Null or False Published Status in GraphQL\nDESCRIPTION: This example shows how to fetch articles where the is_published column is either false or null using a combination of _eq and _is_null operators in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    where: {\n      _or: [\n        {is_published: {_eq: false}},\n        {is_published: {_is_null: true}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL schema with enum type for user roles\nDESCRIPTION: This GraphQL schema snippet shows the generated types when an enum table is configured. The `role` field in the `users` type is now of the enum type `user_role_enum`, which contains the valid enum values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n\"type users {\\n  id: Int!\\n  name: String!\\n  role: user_role_enum!\\n}\\n\\nenum user_role_enum {\\n  \\\"Users with the privilege to set users’ roles\\\"\\n  administrator\\n\\n  \\\"Users with the privilege to ban users\\\"\\n  moderator\\n\\n  \\\"Ordinary users\\\"\\n  user\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Author Data with Relay Mutation in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to insert a new author using the Relay API. It inserts an author with a name and username, and returns the affected rows count along with the inserted data, including the Relay-specific 'id'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/mutation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_relay_author {\n  insert_author(\n    objects: {\n      name: \"Chris\"\n      username: \"urschris\"\n    }\n  ){\n    affected_rows\n    returning{\n      id\n      name\n      username\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Variables for Insert Mutation in Hasura GraphQL\nDESCRIPTION: JSON variables to be used with the InsertReview mutation. Includes a rating of 5, review text, and UUID values for user_id and product_id.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rating\": 5, \n    \"text\": \"This is a great shirt!\", \n    \"user_id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\", \n    \"product_id\": \"7992fdfa-65b5-11ed-8612-6a8b11ef7372\" \n}\n```\n\n----------------------------------------\n\nTITLE: Providing Admin Secrets in Environment Variable\nDESCRIPTION: This snippet demonstrates how to configure multiple admin secrets in the Hasura GraphQL Engine using an environment variable. Admin secrets can be provided in `HASURA_GRAPHQL_ADMIN_SECRETS` as a JSON list. This allows for enhanced security through the implementation of rotating secrets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/multiple-admin-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"secret-1\", \"secret-2\"]\n```\n\n----------------------------------------\n\nTITLE: MySQL JDBC Connection URL Pattern\nDESCRIPTION: Template for constructing the JDBC connection URL to connect MySQL database to Hasura Cloud. Shows the basic structure with placeholders for hostname, port, database name, username and password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mysql://<hostname>:<port>/<database name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Validation Permission Configuration\nDESCRIPTION: YAML configuration for setting up input validation permissions in Hasura, including webhook URL and header settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: pg_create_(insert|update|delete)_permission\n\nargs:\n  table: article,\n  source: default,\n  role: user,\n  permission:\n    validate_input:\n      type: http\n      definition:\n        url: http://www.somedomain.com/validateArticle\n        headers:\n        - name: X-Validate-Input-API-Key\n          value_from_env: VALIDATION_HOOK_API_KEY\n        forward_client_headers: true\n        timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connections for Hasura and API (Linux)\nDESCRIPTION: Markdown table detailing network configurations for various connection scenarios between Hasura and APIs on Linux, including Docker and non-Docker setups.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th>Connection</th>\n      <th>Config</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <strong>Hasura to API (outside Docker)</strong>\n      </td>\n      <td>\n        <ol type=\"1\">\n          <li>\n            With <code>--net=host</code>, <code>localhost:3000</code>\n          </li>\n          <li>\n            Otherwise, <code>&lt;docker-bridge-ip&gt;:3000</code>, e.g. <code>172.17.0.1:3000</code>\n          </li>\n        </ol>\n      </td>\n      <td>\n        <ol type=\"1\">\n          <li>\n            Assuming the API is running on port <code>3000</code>\n          </li>\n          <li>\n            The Docker bridge IP can be found via <code>ifconfig</code>\n          </li>\n        </ol>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <strong>API (outside Docker) to Hasura</strong>\n      </td>\n      <td>\n        <code>localhost:8080</code>\n      </td>\n      <td>\n        Hasura runs on port <code>8080</code> by default\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <strong>Hasura to API (both in docker-compose)</strong>\n      </td>\n      <td>\n        service name, e.g.: <code>api:3000</code>\n      </td>\n      <td>\n        Assuming the API is running on port <code>3000</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <strong>API to Hasura (both in docker-compose)</strong>\n      </td>\n      <td>\n        service name, e.g.: <code>hasura:8080</code>\n      </td>\n      <td>\n        Hasura runs on port <code>8080</code> by default\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <strong>Hasura to API (both running with separate docker run)</strong>\n      </td>\n      <td>Docker internal IP address</td>\n      <td>\n        Can be obtained with <code>docker inspect</code>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <strong>API to Hasura (both running with separate docker run)</strong>\n      </td>\n      <td>Docker internal IP address</td>\n      <td>\n        Can be obtained with <code>docker inspect</code>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship to Remote Schema - Hasura Metadata API\nDESCRIPTION: HTTP POST request to create a remote relationship from a Postgres table to a Remote Schema. Maps table fields to remote schema resolver arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"pg_create_remote_relationship\",\n  \"args\":{\n    \"name\": \"messages\",\n    \"source\": \"app_db\",\n    \"table\": \"users\",\n    \"definition\": {\n      \"to_remote_schema\": {\n        \"remote_schema\": \"forum_api\",\n        \"lhs_fields\": [\"id\"],\n        \"remote_field\": {\n          \"messages\": {\n            \"arguments\": {\n              \"user_id\":\"$id\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationships via Hasura API (HTTP)\nDESCRIPTION: This HTTP request example demonstrates how to create an object relationship in Hasura using the corresponding Metadata API. It specifies the source, table, relationship name, and the foreign key constraint that defines the relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"mssql_create_object_relationship\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"table\": \"<table name>\",\n      \"name\": \"<relationship name>\",\n      \"using\": {\n         \"foreign_key_constraint_on\": \"<reference column>\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects by Field Conditions in GraphQL\nDESCRIPTION: Illustrates deletion of articles in the 'article' table based on specific field conditions using GraphQL. For example, articles with a rating less than 3 are removed, and the number of affected rows is returned.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_low_rated_articles {\n  delete_article(\n    where: {rating: {_lt: 3}}\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reload Metadata Request\nDESCRIPTION: HTTP request to reload metadata when underlying Postgres database changes\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"reload_metadata\",\n    \"args\": {\n        \"reload_remote_schemas\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Handler\nDESCRIPTION: Python code for the login handler, including password verification and JWT generation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/login\", methods=[\"POST\"])\ndef login_handler():\n    args = LoginArgs.from_request(request.get_json())\n    user_response = client.find_user_by_email(args.email)\n    user = user_response[\"data\"][\"user\"][0]\n    try:\n        Password.verify(user.get(\"password\"), args.password)\n        rehash_and_save_password_if_needed(user, args.password)\n        return JsonWebToken(generate_token(user)).to_json()\n    except VerifyMismatchError:\n        return { \"message\": \"Invalid credentials\" }, 401\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Notes and Revisions\nDESCRIPTION: SQL schema definition creating two tables: 'notes' for storing primary note data and 'note_revision' for maintaining note revision history with timestamps.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/serverless.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes (\n  id INT PRIMARY KEY,\n  note TEXT\n)\n\nnote_revision (\n  id INT PRIMARY KEY,\n  note TEXT,\n  note_id INT FOREIGN KEY REFERENCES notes(id),\n  update_at TIMESTAMP DEFAULT now()\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Aggregate Query with Limit\nDESCRIPTION: Shows a GraphQL query with an explicit limit on aggregate data, demonstrating how `aggregates_limit` affects query results\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArtistsQuery {\n  Artist_aggregate(limit: 5) {\n    aggregate {\n      count\n    }\n    nodes {\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action via CLI Command\nDESCRIPTION: Hasura CLI command to create a new action\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions create addNumbers\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-response Plugin in YAML\nDESCRIPTION: Example of OpenDD metadata for configuring a pre-response plugin, which allows for post-execution functionalities like logging or sending notifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: logging\n  url:\n    value: http://localhost:5001/log\n  pre: response\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: \"your-strong-m-auth-key\"\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n      rawResponse: {}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Async Action Results\nDESCRIPTION: GraphQL subscription query to fetch or subscribe to the actual response of an async action using its action_id.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/async-actions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription getPlaceOrderResponse {\n  place_order(id: \"23b1c256-7aff-4b95-95bd-68220d9f93f2\") {\n    output\n    errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Query to a Collection in Hasura\nDESCRIPTION: This snippet shows how to add a new query to an existing collection using the Hasura Metadata API. It requires specifying the collection name, query name, and the GraphQL query text.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_query_to_collection\",\n    \"args\": {\n        \"collection_name\": \"my_collection\",\n        \"query_name\": \"query_2\",\n        \"query\": \"query {test {name}}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Function Configuration\nDESCRIPTION: Example of customizing a tracked function 'search_articles' with custom root fields using the pg_set_function_customization API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_set_function_customization\",\n   \"args\": {\n     \"function\": \"search_articles\",\n     \"source\": \"default\",\n     \"configuration\": {\n       \"custom_root_fields\": {\n         \"function\": \"FindArticles\",\n         \"function_aggregate\": \"FindArticlesAgg\"\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Batching and Adding Data to Weaviate in NodeJS\nDESCRIPTION: Defines an asynchronous function to batch and add data to Weaviate. Processes data in batches of 100 objects for efficient insertion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// function to add our documents to Weaviate\nconst addDocuments = async (className, data) => {\n  let batcher = client.batch.objectsBatcher();\n  let counter = 0;\n  const batchSize = 100;\n\n  for (const document of data) {\n    const obj = {\n      class: className,\n      properties: { ...document },\n    };\n\n    batcher = batcher.withObject(obj);\n    if (counter++ == batchSize) {\n      await batcher.do();\n      counter = 0;\n      batcher = client.batch.objectsBatcher();\n    }\n  }\n\n  const res = await batcher.do();\n  return res;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Articles Based on Nested Objects' Fields in GraphQL\nDESCRIPTION: Mutation that updates articles based on a condition from a related object. It resets the rating of all articles authored by 'Sidney' by setting rating to null.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_ratings {\n  update_article(\n    where: {author: {name: {_eq: \"Sidney\"}}},\n    _set: {rating: null}\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship to Database in HTTP API (Citus)\nDESCRIPTION: Example HTTP request for creating a new remote relationship from a Citus table to another database table. This connects a users table to an orders table in a different database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"citus_create_remote_relationship\",\n   \"args\":{\n      // name of the remote relationship\n      \"name\": \"orders\",\n      // name of the database\n      \"source\": \"app_db\",\n      // name of the table in the above database on which the relationship\n      // is being defined\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_source\": {\n          // the type of the relationship, an 'object' (many-to-one) or an\n          // 'array' (one-to-many)\n          \"relationship_type\": \"array\",\n          // the database where the target table exists\n          \"source\": \"store_db\",\n          // name of the table which is the target of the remote\n          // relationship\n          \"table\": \"orders\"\n          // the join condition is specified by a mapping of columns from\n          // the source's table to the target's table, i.e,\n          // app_db.users.id = store_db.orders.user_id\n          \"field_mapping\": {\n            \"id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura on Google Cloud Run\nDESCRIPTION: gcloud command to deploy Hasura as a Cloud Run service, specifying image, environment variables, VPC connector, and other configuration options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-google-cloud-run.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy hasura \\\n  --image=gcr.io/<MY_PROJECT_ID>/hasura/graphql-engine:tag \\\n  --env-vars-file=env.yaml \\\n  --vpc-connector=<vpc-connector-name> \\\n  --allow-unauthenticated \\\n  --min-instances=1 \\\n  --cpu=1 \\\n  --memory=2048Mi \\\n  --port=8080\n```\n\n----------------------------------------\n\nTITLE: Track Stored Procedure in YAML for Hasura\nDESCRIPTION: This YAML configuration snippet demonstrates how to track a stored procedure (`sp_tables`) in Hasura using the `stored_procedures` section. It specifies the schema and name of the stored procedure, exposes it as a GraphQL query, defines the arguments (table_type), and links it to the previously defined `tables` logical model as the return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nstored_procedures:\n  - stored_procedure:\n      schema: public\n      name: sp_tables\n    configuration:\n      exposed_as: query\n    arguments:\n      table_type:\n        type: varchar\n    returns: tables\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing One Click Deploy URL for Hasura Cloud\nDESCRIPTION: This HTML snippet demonstrates the structure of a One Click Deploy URL for Hasura Cloud. It includes parameters for specifying the GitHub repository, Hasura directory path, and optional branch name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nhttps://cloud.hasura.io/deploy?github_repo=<github-repo-link>&hasura_dir=<hasura-dir-path>&branch=<branch-name></branch-name></hasura-dir-path></github-repo-link>\n```\n\n----------------------------------------\n\nTITLE: Routing Based on GraphQL Operation Type in Kriti\nDESCRIPTION: This snippet demonstrates routing based on the GraphQL operation type. Mutations are routed to the primary database, while other operations (queries and subscriptions) are routed to read replicas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_2\n\nLANGUAGE: kriti\nCODE:\n```\n{{ if ($.request.query.operation_type == \"mutation\") }}\n    {{$.primary}}\n{{ else }}\n    {{$.read_replicas}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Mutation for Article\nDESCRIPTION: This snippet defines the schema for updating an article using GraphQL. It specifies the parameters for incrementing or setting fields, as well as the necessary filtering conditions to select rows in the update operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_article (\n  _inc: article_inc_input\n  _set: article_set_input\n  where: article_bool_exp!\n): article_mutation_response\n\n# response of any mutation on the table \"article\"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object update\nupdate_article_by_pk (\n  _inc: article_inc_input\n  _set: article_set_input\n  # primary key columns arg\n  pk_columns: article_pk_columns_input!\n): article\n```\n\n----------------------------------------\n\nTITLE: Creating Synchronous Action with HTTP POST\nDESCRIPTION: Creates a new synchronous action named 'create_user' with username and email arguments, defining the output type, handler URL and timeout.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/actions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"create_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"definition\":{\n         \"kind\":\"synchronous\",\n         \"arguments\":[\n            {\n               \"name\":\"username\",\n               \"type\":\"String!\"\n            },\n            {\n               \"name\":\"email\",\n               \"type\":\"String!\"\n            }\n         ],\n         \"output_type\":\"User\",\n         \"handler\":\"https://action.my_app.com/create-user\",\n         \"timeout\":60\n      },\n      \"comment\": \"Custom action to create user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Insert Permission with Complex Conditions\nDESCRIPTION: This example shows a more complex insert permission with a sophisticated boolean expression. It allows users to insert rows if they match the author_id and either the category is not 'editorial' or if it is 'editorial', then is_reviewed must be false.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\",\n                \"$or\" : [\n                    {\n                        \"category\" : \"editorial\",\n                        \"is_reviewed\" : false\n                    },\n                    {\n                        \"category\" : { \"$neq\" : \"editorial\"}\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Native Query\nDESCRIPTION: This GraphQL query uses the 'article_with_excerpt' native query to select articles with excerpts. It provides the 'max_length' argument and a 'where' condition to filter articles by date.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article_with_excerpt(args: { max_length: 20 }, where: { date: { _gte: \"2023-03-01\" } }) {\n    id\n    title\n    date\n    excerpt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Articles Based on Field Values in GraphQL\nDESCRIPTION: Mutation that updates multiple articles filtered by their rating value. It sets the rating to 1 and is_published to false for all articles with a rating less than or equal to 2.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_article {\n  update_article(\n    where: {rating: {_lte: 2}},\n    _set: {\n      rating: 1,\n      is_published: false\n    }\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      rating\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationships via Hasura Metadata API\nDESCRIPTION: HTTP POST request to create an object relationship using the Hasura Metadata API. This snippet shows how to use the pg_create_object_relationship operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_create_object_relationship\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"table\": \"<table name>\",\n      \"name\": \"<relationship name>\",\n      \"using\": {\n         \"foreign_key_constraint_on\": \"<reference column>\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema Relationship in YAML for Hasura\nDESCRIPTION: This YAML snippet illustrates how to define a remote relationship between a local database table and a remote schema. It includes the necessary configuration to map fields and specify the remote schema. The relationship links the 'author_id' column of the articles table to the 'id' argument of the remote schema's author field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    dataset: source\n    name: author\n  remote_relationships:\n    - name: author\n      definition:\n        remote_field:\n          author:\n            arguments:\n              id: $id\n        hasura_fields:\n          - author_id\n        remote_schema: author-remote-schema\n```\n\n----------------------------------------\n\nTITLE: Creating Native Queries with API\nDESCRIPTION: This HTTP POST request shows how to create native queries using Hasura's API. It requires details about the query configuration, including its structure and dependencies. Requires access to Hasura API and admin privileges.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<BigQuery field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": [\n      {\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"column_mapping\": {\n            \"<local column>\": \"<remote column>\"\n          },\n          \"remote_native_query: \"<remote native query name>\"\n        }\n      }\n    ],\n    \"object_relationships\": <same as array_relationships>,\n    \"description\": \"<text>\",\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Types in GraphQL\nDESCRIPTION: Defines the input and output types for the currency conversion Action, including the structure of the response from the REST API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninput InputParams {\n  from: String\n  to: String\n  amt: Int\n}\n\ntype Info {\n  rate: Float\n}\n\ntype Query {\n  amount: Int\n  from: String\n  to: String\n}\n\ntype ConvertedCurrency {\n  date: String\n  info: Info\n  query: Query\n  result: Float\n  success: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Signup Handler\nDESCRIPTION: Full implementation of the signup handler, including user creation and response handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/signup\", methods=[\"POST\"])\ndef signup_handler():\n    args = AuthArgs.from_request(request.get_json())\n    hashed_password = Password.hash(args.password)\n    user_response = client.create_user(args.email, hashed_password)\n    if user_response.get(\"errors\"):\n        return {\"message\": user_response[\"errors\"][0][\"message\"]}, 400\n    else:\n        user = user_response[\"data\"][\"insert_user_one\"]\n        return CreateUserOutput(**user).to_json()\n```\n\n----------------------------------------\n\nTITLE: Creating Articles Table via Hasura CLI - MS SQL Server\nDESCRIPTION: This snippet provides the SQL command necessary to create the articles table directly within Hasura using a migration. It also includes instructions on how to roll back the creation by dropping the table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE articles(id int NOT NULL, title text NOT NULL, content text NOT NULL, rating int NOT NULL, author_id int NOT NULL, PRIMARY KEY (id));\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE articles;\n```\n\n----------------------------------------\n\nTITLE: Forcing GraphQL Cache Refresh\nDESCRIPTION: This GraphQL snippet uses the `refresh` argument with the `@cached` directive to forcefully refresh the cache entry. The argument takes a boolean value, ensuring that cache is refreshed regardless of its set lifetime. This feature is beneficial in scenarios requiring immediate cache updates. The `refresh` parameter must be a literal boolean for correct functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/caching-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached(refresh: true) {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RESTified GraphQL Endpoint using Metadata API in HTTP\nDESCRIPTION: This snippet demonstrates how to create a RESTified GraphQL endpoint using the Hasura Metadata API. It specifies the endpoint name, URL, HTTP methods, and the associated GraphQL query definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/restified-endpoints.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_rest_endpoint\",\n    \"args\": {\n        \"name\": \"example-name\",\n        \"url\": \"example\",\n        \"methods\": [\"POST\",\"PUT\",\"PATCH\"],\n        \"definition\": {\n            \"query\": {\n              \"query_name\": \"example_mutation\",\n              \"collection_name\": \"test_collection\"\n            }\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Delete Mutations with Update in Hasura GraphQL\nDESCRIPTION: This GraphQL mutation replaces traditional delete operations with an update operation that sets a 'deleted_at' timestamp. This approach ensures data integrity while implementing soft deletes by marking records instead of removing them.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/soft-deletes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  update_todos(where: { name: { _eq: \"Stuff already done!\" } }, _set: { deleted_at: \"now()\" }) {\n    returning {\n      id\n      name\n      deleted_at\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Trigger with Advanced Options via Metadata API - HTTP\nDESCRIPTION: This HTTP request demonstrates how to create a Scheduled Trigger with advanced options using Hasura's Metadata API. It showcases additional parameters for retry configuration and comments, providing a complete perspective on the available functionalities in the API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-cron-trigger.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"create_cron_trigger\",\n   \"args\": {\n      \"name\": \"eod_reports\",\n      \"webhook\": \"https://mywebhook.com/eod\",\n      \"schedule\": \"0 22 * * 1-5\",\n      \"include_in_metadata\": true,\n      \"payload\": {},\n      \"retry_conf\": {\n            \"num_retries\": 3,\n            \"timeout_seconds\": 120,\n            \"tolerance_seconds\": 21675,\n            \"retry_interval_seconds\": 12\n      },\n      \"comment\": \"sample_cron comment\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking Tables via pg_untrack_tables Metadata API\nDESCRIPTION: This snippet demonstrates how to untrack multiple tables/views (author and book) from the GraphQL schema using the `pg_untrack_tables` Metadata API. The request body specifies the tables to untrack along with their schema, source, and cascade options.  The `cascade` option ensures that any dependencies on these tables are also removed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_untrack_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"table\": {\n          \"schema\": \"public\",\n          \"name\": \"author\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      },\n      {\n        \"table\": {\n          \"schema\": \"public\",\n          \"name\": \"book\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Kind-based Enum\nDESCRIPTION: Example JSON object that would be parsed into KindOne(KindOneStruct) using the kind-based approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"KindOne\",\n  \"fieldOne\": 111,\n  \"fieldTwo\": false,\n  \"fieldThree\": \"three\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura License Key and Admin Secret in Docker Compose\nDESCRIPTION: YAML configuration snippet showing how to set the Hasura Enterprise Edition license key and admin secret in the docker-compose.yaml file. These settings secure the GraphQL endpoint and enable Enterprise features.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.27.0\n  environment:\n    HASURA_GRAPHQL_EE_LICENSE_KEY: <license key>\n    HASURA_GRAPHQL_ADMIN_SECRET: <your secretkey>\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Relationships via API\nDESCRIPTION: Bulk HTTP request to create both object and array relationships using foreign key constraints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"pg_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"articles\",\n        \"name\": \"author\",\n        \"using\": {\n          \"foreign_key_constraint_on\": \"author_id\"\n        }\n      }\n    },\n    {\n      \"type\": \"pg_create_array_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"authors\",\n        \"name\": \"articles\",\n        \"using\": {\n          \"foreign_key_constraint_on\" : {\n            \"table\" : \"articles\",\n            \"column\" : \"author_id\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation for MSSQL\nDESCRIPTION: This snippet shows a sample GraphQL mutation for inserting an author into the MSSQL database, demonstrating the expected query structure and response format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mutations-mssql.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n    insert_author(objects: [{name: \"Bob\"}]){\n        affected_rows\n        returning{\n            id\n            name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Relationships via YAML Configuration\nDESCRIPTION: Example of renaming a relationship by modifying the tables.yaml metadata file, showing the relationship configuration between articles and authors tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/rename.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n```\n\n----------------------------------------\n\nTITLE: Multiple Updates Mutation with GraphQL\nDESCRIPTION: GraphQL mutation for updating multiple article records in a single operation, with each update potentially having different conditions and values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_many_articles {\n  update_article_many (\n    updates: [\n      {\n        where: {rating: {_lte: 1}},\n        _set: {is_published: false}\n      },\n      {\n       where: {rating: {_gte: 4}},\n        _set: {is_published: true}\n      }\n    ]\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in BigQuery via CLI Migration\nDESCRIPTION: Demonstrates how to create `authors` and `articles` tables in BigQuery using Hasura migrations via the CLI.  The `up.sql` file contains the SQL statements to create the tables, while the `down.sql` file contains the SQL statements to drop them. Applying the migration creates the tables in the specified BigQuery dataset.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `bigquery.authors` (\n    `id` INT64,\n    `name` STRING\n);\n\nCREATE TABLE `bigquery.articles` (\n    `id` INT64,\n    `title` STRING,\n    `body` STRING,\n    `author_id` INT64,\n    `is_published` BOOL,\n    `published_on` DATETIME,\n    `rating` INT64\n);\n\n```\n\n----------------------------------------\n\nTITLE: Setting Column-Level Permissions via Hasura Metadata API\nDESCRIPTION: This HTTP request shows how to set column-level permissions using the Hasura Metadata API. It includes the necessary headers and JSON body to specify the role and the permissions granted on specific columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-level-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"users\",\n    \"role\": \"user\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"name\",\n        \"email\"\n      ],\n      \"filter\": {\n        \"id\": \"X-Hasura-User-Id\"\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Settings in Hasura CLI YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure advanced settings for Event Triggers, including specifying columns to listen for updates and retry configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: author\n  event_triggers:\n    - name: author_trigger\n      definition:\n        enable_manual: false\n        insert:\n          columns: '*'\n        update:\n          columns:\n            - name\n            - addr\n      webhook: https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission for MSSQL Table in Hasura\nDESCRIPTION: This snippet demonstrates how to create an insert permission for the 'user' role on the 'article' table. It enforces a constraint that users can only insert articles for themselves, limits insertable columns, and automatically sets the 'id' column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"set\":{\n                \"id\":\"X-HASURA-USER-ID\"\n            },\n            \"columns\":[\"name\",\"author_id\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Descendants with _descendant Operator in GraphQL\nDESCRIPTION: This query uses the _descendant operator to select paths that are descendants of 'Top.Collections.Pictures.Astronomy'. It returns the specified path and all its sub-paths.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  test(where: { path: { _descendant: \"Top.Collections.Pictures.Astronomy\" } }) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Warnings While Untracking Tables in Hasura GraphQL (HTTP)\nDESCRIPTION: This demonstrates how to configure the 'mssql_untrack_tables' API to disallow warnings during the untracking process, ensuring that any errors lead to a complete failure of the request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_untrack_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\",\n        \"cascade\": true\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing REST Endpoint with cURL in Bash\nDESCRIPTION: This bash command uses cURL to test a REST endpoint created in Hasura. It makes a GET request to fetch data for a specific product ID using the provided product path. Headers for content type and admin secret must be included. Make sure to replace placeholders with actual project URL and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://<your-hasura-project>/api/rest/product/7992fdfa-65b5-11ed-8612-6a8b11ef7372' \\\n--header 'Content-Type: application/json' \\\n--header 'x-hasura-admin-secret: <your-admin-secret>'\n```\n\n----------------------------------------\n\nTITLE: Reloading Hasura Metadata using API\nDESCRIPTION: This command reloads the Hasura metadata using the Metadata API. It sends a POST request to the Hasura metadata endpoint to reload the metadata from the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -d'{\"type\": \"reload_metadata\", \"args\": {}}' http://localhost:8080/v1/metadata\"\n```\n\n----------------------------------------\n\nTITLE: Example UserLogin Mutation Query in GraphQL\nDESCRIPTION: Provides an example of how to call the UserLogin mutation defined as a Hasura action, specifying username and password arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  UserLogin(username: \"jake\", password: \"secretpassword\") {\n    accessToken\n    userId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Presence of 'phone' Key Using _has_key Operator in GraphQL\nDESCRIPTION: This query fetches authors if the 'phone' key is present in their JSONB 'address' column using the _has_key operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/jsonb-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery get_authors_if_phone {\n  authors(\n    where: {\n      address: {_has_key: \"phone\" }\n    }\n  ) {\n    id\n    name\n    address\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter by Object Relationship Query\nDESCRIPTION: Query to fetch articles whose author's name starts with 'A' using an object relationship filter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  articles (\n    where: {\n      author: {\n        name: { _like: \"A%\"}\n      }\n    }\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Proposed Common Query Pipeline with Mermaid\nDESCRIPTION: Flowchart showing the proposed unified pipeline for all frontends, using the common `opendd::Query` type and execution plan.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[/opendd::Query/]\n    B[/execute::Plan/]\n    C[/Result/]\n\n    A -->|\"Validation \\n (uses 'resolve::Metadata')\"| B\n    B -->|\"Execution \\n (ndc, remote relationships, predicates etc)\"| C\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL with Dynamic Parameters in SQL\nDESCRIPTION: This SQL snippet demonstrates how to create a relation in-query containing query variables and session variables, then joining it with the actual data query to fetch results for multiple clients simultaneously.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/live-queries.md#2025-04-17_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT *\nFROM (\n  VALUES\n    (1, 'user1'),\n    (2, 'user2'),\n    (3, 'user3')\n) AS client_params(order_id, user_id)\nJOIN orders ON orders.id = client_params.order_id\nWHERE orders.user_id = client_params.user_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Insert Permission Metadata for Role pr1\nDESCRIPTION: JSON configuration for an insert permission with a check constraint based on author ID for role pr1\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pg_create_insert_permission\",\n  \"args\": {\n    \"table\": \"article\",\n    \"source\": \"default\",\n    \"role\": \"pr1\",\n    \"permission\": {\n      \"check\": {\n        \"author_id\": \"X-HASURA-AUTHOR-ID\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Relationship in YAML\nDESCRIPTION: CLI configuration in YAML format for setting up a relationship between UpdateAuthorOutput and the author table\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- custom_types\n  - objects\n    - name: UpdateAuthorOutput\n      relationships:\n      - name: updatedAuthor\n        type: object\n        remote_table:\n          schema: public\n          name: author\n        field_mapping:\n          author_id: id\n```\n\n----------------------------------------\n\nTITLE: Defining Order By Expression in YAML\nDESCRIPTION: This snippet defines an OrderByExpression for an Invoice type, including orderable fields, relationships, and aggregate expressions for nested array fields and relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_104\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: Invoice_order_by_exp\n  orderedType: Invoice\n  orderableFields:\n    - fieldName: InvoiceId\n      enableOrderByDirections: [Asc, Desc]\n    - fieldName: CustomerId\n      enableOrderByDirections: [Asc]\n    - fieldName: BillingAddress\n      orderByExpression: Address_order_by_default_exp\n    # Nested array field\n    - fieldName: Discounts\n      aggregateExpression: Discount_aggregate_exp\n  orderableRelationships:\n    - relationshipName: Customer\n      orderByExpression: Customer_order_by_exp\n    # New for array relationships! Enables ordering by aggregations across this relationship\n    - relationshipName: InvoiceLines\n      aggregateExpression: InvoiceLine_aggregate_exp\n\n  graphql:\n    expressionTypeName: Customer_order_by\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query into AST in Rust\nDESCRIPTION: This snippet shows the result of parsing a simple GraphQL query named 'Foo' with a variable 'bar' of type 'Int'. The AST representation includes detailed source position information and hierarchical structure of the query components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0035_query_with_variables.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"Foo\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 9,\n                                },\n                            },\n                        ),\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"bar\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 12,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 14,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"Int\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 17,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 19,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 11,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 19,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 10,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 20,\n                                },\n                            },\n                        ),\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"name\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 8,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 8,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 22,\n                            },\n                            end: SourcePosition {\n                                line: 3,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 3,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter integer values. Includes logic operators and comparison operators specific to integer values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\ninput Int_bool_exp {\n  # Logic operators\n  _and: [Int_bool_exp!]\n  _or: [Int_bool_exp!]\n  _not: Int_bool_exp\n\n  # Comparisons\n  _eq: Int\n  _gt: Int\n  _gte: Int\n  _in: [Int!]\n  _is_null: Boolean\n  _lt: Int\n  _lte: Int\n  _neq: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Updates with Different Conditions in GraphQL\nDESCRIPTION: Mutation that executes multiple update operations in a single transaction using the update_many feature (v2.10.0+). It updates two different sets of articles with different conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_many_articles {\n  update_article_many (\n    updates: [\n      {\n        where: {rating: {_lte: 1}},\n        _set: {is_published: false}\n      },\n      {\n       where: {rating: {_gte: 4}},\n        _set: {is_published: true}\n      }\n    ]\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Event in Hasura\nDESCRIPTION: This code snippet illustrates how to create and configure a cron trigger in the Hasura Console for sending review request emails. It includes the trigger's name, webhook URL, cron expression, and payload setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/product-review.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Step 1: Create the Scheduled Event\n\nHead to your the Hasura Console of your project and navigate to the \"Events\" tab. From there, click on the `Cron Triggers` item in the sidebar. Then, click `Create`:\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<your-webhook-url>/review-request\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n0 0 * * *\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_type\": \"review_requests\"\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nsecret-authorization-string: super_secret_string_123\n```\n\n----------------------------------------\n\nTITLE: List-based Filtering with IN Operator in GraphQL\nDESCRIPTION: Query to fetch articles with specific ratings using the _in operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {rating: {_in: [1,3,5]}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation to Update Product (GraphQL)\nDESCRIPTION: This GraphQL mutation updates the product description in the `products` table. It uses the product's ID as the primary key to identify the product to update, and sets the `description` field to the provided value. The mutation returns the `id` and `description` of the updated product.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateProduct($id: uuid!, $description: String) {\n    update_products_by_pk(pk_columns: {id: $id}, _set: {description: $description}) {\n      id\n      description\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata in Hasura CLI\nDESCRIPTION: This shell command is used to apply the metadata settings after defining permissions in a YAML file. It ensures that the permission configurations take effect in the Hasura engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Count Aggregate Query Schema for MSSQL\nDESCRIPTION: Breaking change for MSSQL backends, restricting count aggregate query to a single column due to MSSQL limitations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ncount (\n---  columns: [table_select_column!]\n+++  column: table_select_column\n  distinct: Boolean\n): Int!\n```\n\n----------------------------------------\n\nTITLE: Configuring Naming Convention for Postgres Source in JSON\nDESCRIPTION: JSON configuration to set the naming convention for a Postgres source to 'graphql-default', which affects the auto-generated names for fields, types, and arguments in the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_version\": 2,\n  \"metadata\": {\n    \"version\": 1,\n    \"sources\": [\n      {\n        \"name\": \"default\",\n        \"kind\": \"postgres\",\n        \"tables\": [],\n        \"configuration\": {},\n        \"customization\": {\n          \"naming_convention\": \"graphql-default\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Hasura Cloud Preview App Creation Status\nDESCRIPTION: This GraphQL query checks the status of a Preview App creation job in Hasura Cloud. It retrieves details about the job, its tasks, and any associated events or errors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/preview-apps.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPreviewAppCreationStatus($jobId: uuid!) {\n  jobs_by_pk(id: $jobId) {\n    id\n    status\n    tasks {\n      id\n      name\n      task_events {\n        id\n        event_type\n        public_event_data\n        error\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure Cloud Function with Azure CLI\nDESCRIPTION: A series of Azure CLI commands to create a resource group, storage account, and function app. It also includes commands to set up Azure Functions Core Tools and publish the function app. This setup is necessary for deploying the cloud function that will interact with Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name 'my-functions-group' --location southindia\n\naz storage account create --name 'myfunctionsstorage' --location southindia --resource-group 'my-functions-group' --sku Standard_LRS\n\naz functionapp create --name 'myfunctionsapp' --storage-account 'myfunctionsstorage' --resource-group 'my-functions-group' --consumption-plan-location southindia\n\nfunc azure login\nfunc azure subscriptions set 'Free Trial'\nfunc azure functionapp publish 'myfunctionsapp'\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Data Source with Template via API\nDESCRIPTION: Example of adding a Snowflake data source with a template configuration using the Metadata API. This HTTP request shows how to set up template variables and use them in the connection string.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/data-connector-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_add_source\",\n  \"args\": {\n    \"name\": \"db\",\n    \"configuration\": {\n      \"template\": \"{\\\"jdbc_url\\\": \\\"jdbc:snowflake://url.snowflakecomputing.com/?password={{$vars['snowflake_password']}}&user={{$env['SNOWFLAKE_USER']}}&warehouse=warehouse&db=db&role=role&schema=schema}\",\n      \"template_variables\": {\n        \"snowflake_password\": {\n          \"type\": \"dynamic_from_file\",\n          \"filepath\": \"/var/secrets/snowflake_password.txt\"\n        }\n      },\n      \"timeout\": null,\n      \"value\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables via Hasura Metadata API - MS SQL Server\nDESCRIPTION: This HTTP snippet illustrates the API call to track a table in Hasura, allowing it to be accessible through the GraphQL API. It provides the necessary parameters to be included in the POST request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"authors\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organization-Level Permission Example\nDESCRIPTION: Complex JSON permission rule allowing access to repositories created by user or in user's organization\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_or\": [\n    {\n      \"creator_id\": {\n        \"_eq\": \"X-Hasura-User-Id\"\n      }\n    },\n    {\n      \"organization\": {\n        \"members\": {\n          \"member_id\": {\n            \"_eq\": \"X-Hasura-User-Id\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Filtered and Sorted Articles using GraphQL\nDESCRIPTION: This GraphQL query fetches a list of authors and their published articles. It uses multiple arguments to filter for published articles, sort them by publication date in descending order, and limit the results to 2 articles per author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/multiple-arguments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles(\n      where: {is_published: {_eq: true}},\n      order_by: {published_on: desc},\n      limit: 2\n    ) {\n      id\n      title\n      is_published\n      published_on\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Nested Object Type in GraphQL SDL\nDESCRIPTION: Illustrates how to define a recursive nested object type in GraphQL. The UserObj type includes a field 'friends' which is an array of UserObj, allowing for recursive nesting of the same type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype UserObj {\n  name: String!\n  favFood: String!\n  isAdmin: Boolean!\n  friends: [UserObj]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SETOF Table for Location Results\nDESCRIPTION: SQL code to create a table that will store the results of the location search function\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- SETOF table\nCREATE TABLE user_landmarks (\n  user_id INTEGER,\n  location GEOGRAPHY(Point),\n  nearby_landmarks JSON\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Records with GraphQL Mutation in Hasura\nDESCRIPTION: Demonstrates how to update multiple records that match a specific condition. The example updates the name of an author with ID 3 and returns the number of affected rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_author {\n  update_author(where: { id: { _eq: 3 } }, _set: { name: \"Jane\" }) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Designing a Scope-based Application Error Type with thiserror in Rust\nDESCRIPTION: Shows how to create a hierarchical error type structure using the thiserror crate, with automatic conversions between error types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(thiserror::Error, Debug)]\nenum AppError {\n    #[error(\"request error: {0}\")]\n    Request(#[from] RequestError),\n    #[error(\"user error: {0}\")]\n    User(#[from] UserError),\n    #[error(\"password error: {0}\")]\n    Password(#[from] PasswordError),\n    #[error(\"response error: {0}\")]\n    Response(#[from] ResponseError),\n    #[error(\"some other error occurred\")]\n    SomeOtherError,\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Insert Mutation with GraphQL\nDESCRIPTION: GraphQL mutation for inserting an author with nested articles data, which triggers validation on both the author and article models.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertAuthorWithArticles($name: String, $email:String, $articles_content:[article_insert_input!]!) {\n  insert_author(objects: [{name: $name, email: $email, articles: {data: $articles_content}}]){\n    returning {\n      name\n      email\n      articles {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata with Hasura CLI\nDESCRIPTION: The bash snippet demonstrates how to apply metadata configurations to a Hasura project using the Hasura CLI. The '--endpoint' flag is used to specify the HTTP endpoint for the Hasura GraphQL Engine. Required dependencies include the Hasura CLI installed on your local machine. The expected input is a valid endpoint URL, and the output is the application of the metadata configuration to the specified endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/config-reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply --endpoint \\\"https://my-project.hasura.app\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Address Grouping Key with @oneOf Directive in GraphQL\nDESCRIPTION: This snippet defines an input type for selecting grouping keys for the Address model. It currently only supports grouping by scalar fields but is implemented as a @oneOf type for future extensibility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_76\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_grouping_key @oneOf {\n  # WARN: Potential name clash here\n  _scalar_field: Address_scalar_fields\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura V3 Engine with Postgres and Jaeger using Docker Compose\nDESCRIPTION: Command to start the Hasura V3 engine along with a Postgres data connector and Jaeger for tracing using Docker Compose. This sets up a complete local development environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: BoolExp for Logical Conditions in GraphQL\nDESCRIPTION: Defines the BoolExp structure for combining multiple conditions with logical operators such as 'and', 'or', and 'not', to filter query results effectively.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  _and: [\n    {rating: {_gt: 5}},\n    {updated_at: {_gt: \"2019-01-01\"}}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Logs Subscription in GraphQL\nDESCRIPTION: GraphQL subscription query for streaming logs with pagination using cursor-based batch fetching. Takes an ID parameter and returns log details in batches of 10.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/streaming-subscriptions.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription StreamLogs ($id: Int!) {\n  logs_stream(initial_value: {id: $id}, batch_size: 10) {\n    log_type\n    log_level\n    log_data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suggesting PostgreSQL Relationships in Hasura\nDESCRIPTION: This endpoint suggests potential relationships that can be tracked. The example requests relationship suggestions for the 'Artist' table in the 'chinook' source, omitting already tracked relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_suggest_relationships\",\n  \"version\": 1,\n  \"args\": {\n    \"omit_tracked\": true,\n    \"source\": \"chinook\",\n    \"tables\": [[\"Artist\"]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Metadata Request\nDESCRIPTION: HTTP request to replace existing metadata with new metadata. Supports version 1 and 2 formats.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"replace_metadata\",\n    \"version\": 1 | 2 (optional),\n    \"args\": <replace-metadata-args>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Article Table\nDESCRIPTION: This SQL code creates a table named 'article' with columns for id, title, date, and content. It also includes INSERT statements to populate the table with sample article data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE article(\n  id SERIAL NOT NULL PRIMARY KEY,\n  title TEXT NOT NULL,\n  date DATE NOT NULL,\n  content TEXT NOT NULL\n);\n\nINSERT INTO article(title, date, content) VALUES\n  ('You will not believe', '2023-01-01', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Facillimum id quidem est, inquam. Esse enim, nisi eris, non potes. Oratio me istius philosophi non offendit; Idemne, quod iucunde? Quid est enim aliud esse versutum? Non autem hoc: igitur ne illud quidem.'),\n  ('Ten things that', '2023-02-02', 'Illi enim inter se dissentiunt. Sedulo, inquam, faciam. Simus igitur contenti his.'),\n  ('Did you know', '2023-03-03', 'Ratio quidem vestra sic cogit. Duo Reges: constructio interrete. An nisi populari fama? Erat enim res aperta. Apparet statim, quae sint officia, quae actiones. Tum mihi Piso: Quid ergo?'),\n  ('They just cannot', '2023-04-04', 'Itaque hic ipse iam pridem est reiectus; Quod quidem iam fit etiam in Academia. Negare non possum. Quis non odit sordidos, vanos, leves, futtiles?'),\n  ('What on earth', '2023-05-05', 'Venit ad extremum; At certe gravius. Efficiens dici potest. Rhetorice igitur, inquam, nos mavis quam dialectice disputare? Nunc de hominis summo bono quaeritur; Rationis enim perfectio est virtus;');\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura Cloud Tenant Environment Variables using GraphQL\nDESCRIPTION: This mutation updates the environment variables for a Hasura Cloud tenant, requiring the current hash and new environment variable key-value pairs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateTenantEnv {\n  updateTenantEnv(\n    tenantId: \"7a79cf94-0e53-4520-a560-1b02bf522f08\"\n    currentHash: \"6902a395d70072fbf8d36288f0eacc36c9d82e68\"\n    envs: [\n      { key: \"HASURA_GRAPHQL_ENABLE_CONSOLE\", value: \"true\" }\n      { key: \"ACTIONS_ENDPOINT\", value: \"https://my-actions-endpoint.com/actions\" }\n    ]\n  ) {\n    hash\n    envVars\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Full Name Using GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to filter authors based on their full name using a computed field. It uses the '_ilike' operator for case-insensitive partial matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(where: { full_name: { _ilike: \"%bob%\" } }) {\n    id\n    first_name\n    last_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Check Constraint in Postgres\nDESCRIPTION: This SQL code drops the previously added check constraint from the 'author' table. It is included in migration scripts for rollback purposes. Dependencies are the same as adding constraints, needing schema access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE author DROP CONSTRAINT authors_rating_check;\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Transform with Environment Variable in Hasura GraphQL Engine (HTTP)\nDESCRIPTION: This snippet demonstrates how to use the 'test_webhook_transform' endpoint with the webhook URL provided as an environment variable. It includes request headers, body, and a transformation template.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"test_webhook_transform\",\n    \"args\" : {\n      \"webhook_url\": {\"from_env\": \"url_env_var\" },\n      \"request_headers\": [[\"myKey\", \"myValue\"]],\n      \"body\": { \"hello\": \"world\" },\n      \"request_transform\": {\n        \"body\": \"{{ $body.world }}\",\n        \"template_engine\": \"Kriti\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura with VPC Connector to Cloud Run\nDESCRIPTION: Command to deploy Hasura GraphQL Engine to Cloud Run with a VPC connector for enhanced connectivity to VPC resources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngcloud run deploy hasura-graphql-engine \\\n    --image=hasura/graphql-engine:latest \\\n    --add-cloudsql-instances=<CONNECTION_NAME> \\\n    --update-env-vars='HASURA_GRAPHQL_ENABLE_CONSOLE=true' \\\n    --update-secrets=HASURA_GRAPHQL_DATABASE_URL=hasura-db-connection-string:latest \\\n    --vpc-connector=hasura-connector \\\n    --region=us-central1 \\\n    --cpu=1 \\\n    --min-instances=1 \\\n    --memory=2048Mi \\\n    --port=8080 \\\n    --allow-unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Hasura Seed Apply Examples\nDESCRIPTION: Example commands showing how to apply all seeds or a specific seed file to a database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply all seeds on the database:\nhasura seed apply\n\n# Apply only a particular file:\nhasura seed apply --file 1234_add_some_seed_data.sql --database-name default\n```\n\n----------------------------------------\n\nTITLE: Creating MSSQL Object Relationship with Foreign Key Constraint on Column\nDESCRIPTION: This endpoint creates an object relationship using a foreign key constraint on a column. The example creates an 'author' relationship on the 'article' table using the 'author_id' column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"author\",\n        \"source\": \"default\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : [\"author_id\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying profiles data with GraphQL in Hasura\nDESCRIPTION: A basic GraphQL query to fetch all profiles from the previously created table, retrieving both the id and name fields. This demonstrates the automatic GraphQL API generated by Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/docker-simple.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  profiles {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Tracking with Apollo Federation Support\nDESCRIPTION: JSON configuration for tracking a table with Apollo Federation support, showing the structure for enabling federation and allowing future extensibility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"source\": \"default\",\n     \"table\": \"Author\",\n     \"configuration\": {},\n     \"apollo_federation_config\": {\n        \"enable\": \"v1\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Articles Using Variables in GraphQL\nDESCRIPTION: Mutation that updates articles using GraphQL variables. It demonstrates how to pass rating limit and change set as variables to make the query reusable with different parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_article($rating: Int, $changes: article_set_input) {\n  update_article(\n    where: {rating: {_lte: $rating}},\n    _set: $changes\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      rating\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Inherited Roles\nDESCRIPTION: This snippet provides an example of `inherited_roles.yaml`, configuring inherited roles in Hasura. It defines an inherited role named `manager` that inherits permissions from the `user` and `customer` roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- role_name: manager\n  role_set:\n    - user\n    - customer\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Permissions in YAML for Hasura\nDESCRIPTION: This YAML snippet demonstrates how to set aggregation query permissions for a table in Hasura's metadata configuration. The role 'user' is granted permission to perform aggregate queries on the 'products' table, specifying allowed columns and enabling the aggregation feature.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/aggregation-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\\n    schema: public\\n    name: products\\n  select_permissions:\\n    - role: user\\n      permission:\\n        columns:\\n          - id\\n          - name\\n        allow_aggregations: true\"\n```\n\n----------------------------------------\n\nTITLE: Get Inconsistent Metadata Request\nDESCRIPTION: HTTP request to fetch all inconsistent metadata objects\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"get_inconsistent_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables in Metadata YAML\nDESCRIPTION: YAML configuration for tracking tables in Hasura metadata to expose them over GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: authors\n- table:\n    schema: public\n    name: articles\n```\n\n----------------------------------------\n\nTITLE: CLI Metadata Configuration for Tracking Views\nDESCRIPTION: YAML configuration to track a database view and expose it over the GraphQL API using Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/views.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: dbo\n    name: authors\n- table:\n    schema: dbo\n    name: articles\n- table:\n    schema: dbo\n    name: <name of view>\n```\n\n----------------------------------------\n\nTITLE: Column Expression Query in GraphQL\nDESCRIPTION: Query example showing how to filter articles by exact title match.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(where: { title: { _eq: \"GraphQL Tutorial\" } }) {\n    title\n    content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nested Arrays in GraphQL Query\nDESCRIPTION: Example of filtering institutions based on matches within a nested staff array in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  where_does_john_hughes_work: InstitutionMany(\n    where: { staff: { last_name: { _eq: \"Hughes\" } } }\n  ) {\n    id\n    location {\n      city\n      campuses\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Relationship via HTTP POST\nDESCRIPTION: Updates an existing remote relationship configuration including its fields and arguments. Requires admin role and accepts the relationship name, table, Hasura fields, remote schema and updated remote field details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"update_remote_relationship\",\n  \"args\": {\n     \"name\": \"sample_remote_relationship\",\n     \"table\": \"users\",\n     \"hasura_fields\": [\"id\"],\n     \"remote_schema\": \"my-remote-schema\",\n     \"remote_field\": {\n       \"posts\": {\n          \"arguments\": {\n             \"id\": \"$id\",\n             \"likes\": {\n                \"lte\":\"1000\"\n             }\n          }\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Hasura GraphQL Engine Logs\nDESCRIPTION: Commands to view the logs of the Hasura GraphQL Engine container for monitoring and troubleshooting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n\n\n$ docker logs 097f58433a2b\n\n{\"timestamp\":\"2018-10-09T11:20:32.054+0000\", \"level\":\"info\", \"type\":\"http-log\", \"detail\":{\"status\":200, \"query_hash\":\"01640c6dd131826cff44308111ed40d7fbd1cbed\", \"http_version\":\"HTTP/1.1\", \"query_execution_time\":3.0177627e-2, \"request_id\":null, \"url\":\"/v1/graphql\", \"user\":{\"x-hasura-role\":\"admin\"}, \"ip\":\"127.0.0.1\", \"response_size\":209329, \"method\":\"POST\", \"detail\":null}}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Event using Hasura Schema/Metadata API\nDESCRIPTION: HTTP POST request to create a one-time scheduled event with specified webhook, timestamp, and payload. This endpoint allows scheduling single-execution events at a specific time.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_scheduled_event\",\n    \"args\" : {\n        \"webhook\": \"https://httpbin.org/post\",\n        \"schedule_at\": \"2019-09-09T22:00:00Z\",\n        \"payload\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        },\n        \"headers\" : [{\n            \"name\":\"header-key\",\n            \"value\":\"header-value\"\n        }],\n        \"comment\":\"sample scheduled event comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connectors via Metadata API\nDESCRIPTION: HTTP request example for creating an event trigger with a REST connector using the Hasura Metadata API. This shows how to transform request method, URL, query parameters, and body format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"content_type\": \"application/json\",\n      \"body\": \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Action Query Example\nDESCRIPTION: Example GraphQL mutation showing how to update an author and retrieve related article data\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateAuthorAndGetArticles($id: Int, $name: String) {\n  updateAuthor(id: $id, name: $name) {\n    author_id\n    updatedAuthor {\n      id\n      name\n      articles {\n        id\n        title\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI in Hasura\nDESCRIPTION: This Bash command is used to apply metadata changes in Hasura after modifying the permissions in the YAML file. It ensures that the updated permissions are reflected in the Hasura engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/aggregation-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Dropping an Action with Hasura Metadata API\nDESCRIPTION: This snippet shows how to remove an action named 'create_user' using the Hasura Metadata API. It also demonstrates the use of the 'clear_data' option for asynchronous actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/actions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"drop_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"clear_data\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema Permissions using YAML (CLI)\nDESCRIPTION: This YAML snippet defines the remote schema permissions for a specific role (user) within the Hasura metadata. It specifies the allowed schema and defines the types and queries that the role can access. Applying this metadata configures the permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"- name: countries\n  definition:\n    url: https://countries.trevorblades.com/\n    timeout_seconds: 60\n  comment: 'remote schema permissions for role: user'\n  permissions:\n    - role: user\n      definition:\n        schema: |-\n          schema  { query: Query }\n\n          type Continent { \n            countries: [Country!]!\n            name: String!\n          }\n\n          type Country {\n            name: String!\n            capital: String\n          }  \n\n          type Query {\n            continent(code: ID!): Continent\n          }\"\n```\n\n----------------------------------------\n\nTITLE: Static Session Variable Preset in GraphQL\nDESCRIPTION: Example of using the @preset directive with a static session variable in a GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello(text: String! @preset(value: \"x-hasura-hello\", static: true))\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Artists and Albums Query\nDESCRIPTION: This JSON response structure shows how the data for artists and their albums would be returned, with nested arrays for the one-to-many relationship between artists and albums.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_26\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rows\": [\n    {\n      \"Albums\": {\n        \"rows\": [\n          {\n            \"Title\": \"For Those About To Rock We Salute You\"\n          },\n          {\n            \"Title\": \"Let There Be Rock\"\n          }\n        ]\n      },\n      \"Name\": \"AC/DC\"\n    },\n    {\n      \"Albums\": {\n        \"rows\": [\n          {\n            \"Title\": \"Balls to the Wall\"\n          },\n          {\n            \"Title\": \"Restless and Wild\"\n          }\n        ]\n      },\n      \"Name\": \"Accept\"\n    }\n    // Truncated, more Artist rows here\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Author Name Starting with 'A' in GraphQL\nDESCRIPTION: This GraphQL query filters articles to return only those whose author's name starts with 'A'. It uses the '_similar' operator with a wildcard pattern 'A%' to match names beginning with 'A'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  articles (\n    where: {\n      author: {\n        name: { _similar: \"A%\"}\n      }\n    }\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Foreign Key Constraint with SQL\nDESCRIPTION: SQL statement to drop the foreign key constraint on the articles table, used for rollback migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE articles\nDROP CONSTRAINT articles_author_id_fkey;\n```\n\n----------------------------------------\n\nTITLE: Inserting Authors with Articles Using GraphQL\nDESCRIPTION: This GraphQL mutation inserts authors and their related articles into the database. It illustrates handling potential conflicts with existing data through the use of the 'on_conflict' clause, targeting unique author names to prevent duplicate entries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-many.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  query: \"mutation UpsertAuthorWithArticles {\\n  insert_author(objects: {\\n    name: \\\"Felix\\\",\\n    articles: {\\n      data: [\\n        {\\n          title: \\\"Article 1\\\",\\n          content: \\\"Article 1 content\\\"\\n        },\\n        {\\n          title: \\\"Article 2\\\",\\n          content: \\\"Article 2 content\\\"\\n        }\\n      ]\\n    }\\n  },\\n    on_conflict: {\\n      constraint: author_name_key,\\n      update_columns: [name]\\n    }\\n  ) {\\n    returning {\\n      name\\n      articles {\\n        title\\n        content\\n      }\\n    }\\n  }\\n }\",\n  response: \"{\\n  \\\"data\\\": {\\n    \\\"insert_author\\\": {\\n      \\\"returning\\\": [\\n        {\\n          \\\"name\\\": \\\"Felix\\\",\\n          \\\"articles\\\": [\\n            {\\n              \\\"title\\\": \\\"Article 1\\\",\\n              \\\"content\\\": \\\"Article 1 content\\\"\\n            },\\n            {\\n              \\\"title\\\": \\\"Article 2\\\",\\n              \\\"content\\\": \\\"Article 2 content\\\"\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  }\\n }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple distinct grouping operations in a single GraphQL query\nDESCRIPTION: This query performs two separate grouping operations in one request, allowing for comparative analysis between different levels of granularity: one grouping just by country and another grouping by both country and state.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  # Group by BillingAddress.Country\n  BillingCountryGrouping: Invoice_groups(\n    grouping_keys: [{ BillingAddress: { _scalar_field: Country } }]\n    order_by: [{ group_key: { BillingAddress: { Country: Asc } } }]\n  ) {\n    group_key {\n      BillingAddress {\n        Country # The value of BillingAddress.Country for each group\n      }\n    }\n    group_aggregate {\n      _count # Number of invoices per BillingCountry\n    }\n  }\n  # Group by BillingCountry then by BillingState, order groups by BillingAddress.Country descending, then by BillingAddress.State desc\n  CountryThenStateGroup: Invoice_groups(\n    grouping_keys: [\n      { BillingAddress: { _scalar_field: Country } }\n      { BillingAddress: { _scalar_field: State } }\n    ]\n    order_by: [\n      { group_key: { BillingAddress: { Country: Asc } } }\n      { group_key: { BillingAddress: { State: Desc } } }\n    ]\n  ) {\n    group_key {\n      BillingAddress {\n        Country # The value of BillingAddress.Country for each group\n        State # The value of BillingAddress.State for each group\n      }\n    }\n    group_aggregate {\n      _count # Number of invoices per date\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Model via API\nDESCRIPTION: This snippet shows how to create a Logical Model using the Hasura Metadata API via an HTTP POST request.  The request body includes the model's name, fields, and their respective types, nullability, and descriptions.  The `X-Hasura-Role` header is set to `admin`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_track_logical_model\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"default\\\",\\n    \\\"name\\\": \\\"<name>\\\",\\n    \\\"fields\\\": [\\n      {\\n        \\\"name\\\": \\\"<field name>\\\",\\n        \\\"type\\\": \\\"<BigQuery field type>\\\",\\n        \\\"nullable\\\": false | true,\\n        \\\"description\\\": \\\"<optional field description>\\\"\\n      },\\n      ...\\n    ]\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Native Queries with Relationships in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch authors with their articles, using the relationships defined in the Native Queries. It includes parameters for excerpt length in the nested query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_authors {\n    name\n\n    short_excerpt: articles(args: { length: 10 }) {\n      title\n      contents\n    }\n\n    long_excerpt: articles(args: { length: 100 }) {\n      title\n      contents\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Aggregate Boolean Expression Input Type\nDESCRIPTION: Defines a GraphQL input type for complex boolean expressions on Invoice aggregates. Includes logic operators, count functions, scalar field aggregations, and relationships to other entities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_60\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Invoice_aggregate_bool_exp!]\n  _or: [Invoice_aggregate_bool_exp!]\n  _not: Invoice_aggregate_bool_exp\n\n  # count all\n  _count: Int_bool_exp\n\n  # Scalar fields\n  InvoiceId: Int_aggregate_bool_exp\n  InvoiceDate: Date_aggregate_bool_exp\n  CustomerId: Int_aggregate_bool_exp\n  Total: Decimal_aggregate_bool_exp\n\n  # Nested object fields & object relationships\n  BillingAddress: Address_aggregate_bool_exp\n  Customer: Customer_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Computed Field using HTTP POST in Hasura schema/Metadata API\nDESCRIPTION: Creates a computed field named 'full_name' on the 'author' table using the SQL function 'author_full_name'. The request is sent as an HTTP POST to the /v1/query endpoint with JSON payload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/computed-field.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"add_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"schema\":\"public\"\n        },\n        \"name\":\"full_name\",\n        \"definition\":{\n            \"function\":{\n                \"name\":\"author_full_name\",\n                \"schema\":\"public\"\n            },\n            \"table_argument\":\"author_row\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Select Permission Using Hasura API\nDESCRIPTION: This HTTP snippet shows how to create a complex select permission using the Hasura Metadata API. It combines multiple criteria in the filter using the '$and' operator for the 'user' role on the products table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_create_select_permission\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": \\\"products\\\",\\n    \\\"role\\\": \\\"user\\\",\\n    \\\"permission\\\": {\\n      \\\"columns\\\": \\\"*\\\",\\n      \\\"filter\\\": {\\n        \\\"$and\\\": [\\n          {\\n            \\\"price\\\": {\\n              \\\"_lt\\\": 1000\\n            }\\n          },\\n          {\\n            \\\"name\\\": {\\n              \\\"_ilike\\\": \\\"acme%\\\"\\n            }\\n          }\\n        ]\\n      }\\n    }\\n  }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Table Creation in BigQuery via CLI\nDESCRIPTION: SQL statements to drop `author` and `article` tables from the `hasura` schema during a migration rollback. These statements are placed in the `down.sql` file of a Hasura migration. This allows you to undo the table creation process if necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE `hasura.author`;\nDROP TABLE `hasura.article`;\n\n```\n\n----------------------------------------\n\nTITLE: Filtered Aggregate Query with Nodes\nDESCRIPTION: GraphQL query showing how to combine aggregates with field selection and filtering\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist_aggregate(where: {Name: {_gt: \"Z\"}}) {\n    aggregate {\n      count\n    }\n    nodes {\n      ArtistId\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking a BigQuery Native Query with HTTP POST\nDESCRIPTION: This HTTP request removes a previously tracked BigQuery Native Query from the GraphQL schema. It requires specifying the source database (defaulting to 'default') and the root_field_name that identifies the Native Query to be untracked.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"bigquery_untrack_native_query\",\n    \"args\": {\n      \"source\": \"default\",\n      \"root_field_name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Incrementing Sequence in Postgres\nDESCRIPTION: SQL command to create a sequence for generating auto-incrementing integer default values\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/postgres-defaults.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE roll_number_seq;\n```\n\n----------------------------------------\n\nTITLE: Filtering Using AND Operator in GraphQL Query\nDESCRIPTION: Example demonstrating the use of _and operator to fetch articles published within a specific time range (year 2017). Shows how to combine multiple date-based filter conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/boolean-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    where: {\n      _and: [\n        { published_on: {_gte: \"2017-01-01\"}},\n        { published_on: {_lte: \"2017-12-31\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @skip Directive in Hasura GraphQL Query\nDESCRIPTION: This example demonstrates how to use the @skip directive to conditionally exclude a field from the query result based on a boolean variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  articles {\n    title\n    publisher @skip(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Query Request JSON with Aggregates Limit\nDESCRIPTION: Internal JSON representation showing how `aggregates_limit` is incorporated into the query processing\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Artist\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"aggregates_limit\": 5,\n    \"limit\": 2,\n    \"offset\": null,\n    \"aggregates\": {\n      \"aggregate_count\": {\n        \"type\": \"star_count\"\n      }\n    },\n    \"fields\": {\n      \"nodes_Name\": {\n        \"type\": \"column\",\n        \"column\": \"Name\",\n        \"column_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action with Query Parameters via API\nDESCRIPTION: HTTP request to create an action with query parameters using the Hasura metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n    \"name\":\"create_user\",\n    \"definition\":{\n      \"kind\":\"synchronous\",\n      \"arguments\":[\n        {\n          \"name\":\"username\",\n          \"type\":\"String!\"\n        },\n        {\n          \"name\":\"email\",\n          \"type\":\"String!\"\n        }\n      ],\n      \"output_type\":\"User\",\n      \"handler\":\"{{ACTION_BASE_URL}}\",\n      \"timeout\":60,\n      \"request_transform\": {\n        \"template_engine\": \"Kriti\",\n        \"method\": \"POST\",\n        \"url\": \"{{$base_url}}/create_user\",\n        \"query_params\": {\n          \"id\": \"{{$session_variables['x-hasura-user-id']}}\"\n        },\n        \"content_type\": \"application/json\",\n        \"body\": \"{\\\"username\\\": {{$body.input.username}}}\"\n      }\n    },\n    \"comment\": \"Custom action to create user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Standard Postgres View\nDESCRIPTION: This SQL snippet demonstrates how to query the 'popular_authors' view to retrieve the name and rating of popular authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name, rating from popular_authors;\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Column Foreign Key in Hasura\nDESCRIPTION: Creates an object relationship named 'author' on the 'article' table using the foreign key constraint on the 'author_id' column. This establishes a one-to-one relationship from articles to authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"author\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : \"author_id\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upsert Article with Title Matching\nDESCRIPTION: This GraphQL mutation attempts to insert a new article into the 'article' table. If an existing article has the same title, it updates the content instead.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/upsert.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Updated article 1 content\",\n        published_on: \"2018-10-12\"\n      }\n    ],\n    if_matched: {\n      match_columns: title,\n      update_columns: content\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      published_on\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"returning\": [\n        {\n          \"id\": 1,\n          \"title\": \"Article 1\",\n          \"content\": \"Updated article 1 content\",\n          \"published_on\": \"2018-06-15\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Creating Articles Table via SQL Migration\nDESCRIPTION: SQL commands for creating and dropping the articles table in migration files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE articles(id serial NOT NULL, title text NOT NULL, content text NOT NULL, rating integer NOT NULL, author_id serial NOT NULL, PRIMARY KEY (id));\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE articles;\n```\n\n----------------------------------------\n\nTITLE: Gateway Build Usage Example - Bash\nDESCRIPTION: A complete example showing how to build gateway metadata by specifying the gateway URL, configuration file, and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --gateway-url https://gateway-hasura-app.hasura.app --gateway-configuration-file /path/to/gateway-configuration.json --admin-secret myadminsecret build\n```\n\n----------------------------------------\n\nTITLE: Defining Model Permissions with Nested Fields in YAML\nDESCRIPTION: Example showing how to configure model permissions to select institutions based on nested object fields, specifically filtering by country location.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: institutions\n  permissions:\n    - role: admin\n      select:\n        filter:\n          nestedField:\n            fieldName: location\n            predicate:\n              nestedField:\n                fieldName: country\n                predicate:\n                  fieldComparison:\n                    field: name\n                    operator: _eq\n                    value:\n                      literal: UK\n```\n\n----------------------------------------\n\nTITLE: Marking Migrations as Applied\nDESCRIPTION: This snippet displays how to mark new migrations as applied on the server without executing them. This assigns a version to the migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n## note down the version\n## mark the migration as applied on this server\n\nhasura migrate apply --version \"<version>\" --skip-execution --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Accumulator in Recursive Haskell Function\nDESCRIPTION: An example demonstrating the use of a strict accumulator in a recursive function. This is a common case where strict function arguments are beneficial.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_11\n\nLANGUAGE: haskell\nCODE:\n```\nmysum :: [Int] -> Int\nmysum = go 0\n  where\n    go !acc []    = acc\n    go acc (x:xs) = go (acc + x) xs\n```\n\n----------------------------------------\n\nTITLE: MSSQL Insert with Permission Check for GraphQL Mutations\nDESCRIPTION: This SQL snippet shows how to implement permission checks in MSSQL for GraphQL mutations, using a temporary table and a check constraint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mutations-mssql.md#2025-04-17_snippet_3\n\nLANGUAGE: mssql\nCODE:\n```\nINSERT INTO test (name, age) OUTPUT INSERTED.<column1>, INSERTED.<column2> INTO #temp_table values ('rakesh', 25)\n\nWITH alias AS (SELECT * FROM #temp_table)\nSELECT (SELECT (SELECT * FROM alias FOR JSON PATH, INCLUDE_NULL_VALUES) AS [returning], count(*) AS [affected_rows] FROM alias FOR JSON PATH, WITHOUT_ARRAY_WRAPPER) AS [data], SUM(case when (id = 12) then 0 else 1 end) AS [check_constraint] FROM alias ;\n```\n\n----------------------------------------\n\nTITLE: Example Response for Inconsistent Metadata Query (JSON)\nDESCRIPTION: This snippet provides an example JSON response from the 'get_inconsistent_metadata' endpoint, showing inconsistent objects and their reasons for inconsistency.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"is_consistent\": false,\n  \"inconsistent_objects\": [\n    {\n      \"type\": \"table\",\n      \"name\": \"table public.article in source default\",\n      \"definition\": {\n        \"schema\": \"public\",\n        \"name\": \"article\"\n      },\n      \"reason\": \"Inconsistent object: no such table/view exists in source: \\\"public.article\\\"\"\n    },\n    {\n      \"type\": \"array_relation\",\n      \"name\": \"array_relation articles in table public.author in source default\",\n      \"definition\": {\n        \"name\": \"articles\",\n        \"source\": \"default\",\n        \"comment\": null,\n        \"table\": {\n          \"schema\": \"public\",\n          \"name\": \"author\"\n        },\n        \"using\": {\n          \"foreign_key_constraint_on\": {\n            \"column\": \"author_id\",\n            \"table\": {\n              \"schema\": \"public\",\n              \"name\": \"article\"\n            }\n          }\n        }\n      },\n      \"reason\": \"Inconsistent object: in table \\\"public.author\\\": in relationship \\\"articles\\\": table \\\"public.article\\\" does not exist\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transform URL Based on Request Body in YAML\nDESCRIPTION: This snippet shows how to transform the URL based on data in the request body using the 'transforms' key in YAML format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n   request_url: \"$url/{{$.input['country']}}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Inherited Role Queries in GraphQL\nDESCRIPTION: Issues GraphQL queries with inherited roles, demonstrating how permissions from combined roles affect data access. The examples show POST requests with different roles, depicting access to specific table columns depending on the session variables and inherited role configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/graphql HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: user_anonymous_inherited_role\nX-Hasura-User-Id: 1\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/graphql HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: user_authors_inherited_role\nX-Hasura-User-Id: 1\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  T {\n    C1\n    C2\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    email\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    email\n  }\n }\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users {\n    id\n    name\n    email\n  }\n  authors {\n    id\n    name\n    followers\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connector in actions.yaml\nDESCRIPTION: Example of configuring a REST connector for an action in the actions.yaml metadata file. Shows how to set the request transform options including method, URL, query params, and body.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n    timeout: 60\n    request_transform:\n      template_engine: Kriti\n      method: POST\n      content_type: application/json\n      url: '{{$base_url}}/create_user'\n      query_params:\n        id: \"{{$session_variables['x-hasura-user-id']}}\"\n      body: '{\"username\": {{$body.input.username}}}'\n  comment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Objects in MS SQL Server Using GraphQL Mutation\nDESCRIPTION: This mutation allows for the insertion of multiple article objects in a single request. The `objects` parameter must contain an array of `article_insert_input` types and will return both the inserted objects and the count of affected rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/insert.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_multiple_articles {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 2\",\n        content: \"Sample article content\",\n        author_id: 4\n      },\n      {\n        title: \"Article 3\",\n        content: \"Sample article content\",\n        author_id: 5\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"affected_rows\": 2,\n      \"returning\": [\n        {\n          \"id\": 22,\n          \"title\": \"Article 2\"\n        },\n        {\n          \"id\": 23,\n          \"title\": \"Article 3\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Function to Refresh Materialized View\nDESCRIPTION: This snippet defines a Postgres function that refreshes a materialized view named 'popular_active_authors'. The function is designed to be called by a trigger when data changes occur.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/triggers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION refresh_materialized_view()\n  RETURNS trigger AS $BODY$\n  BEGIN\n  REFRESH MATERIALIZED VIEW popular_active_authors;\n  RETURN NULL;\n  END;\n  $BODY$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Datadog User with Permissions in PostgreSQL\nDESCRIPTION: SQL commands to create a dedicated datadog user with the necessary permissions to access PostgreSQL metrics. It creates the user with a password and grants SELECT access on pg_stat_database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/db-observability.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate user datadog with password '<PASSWORD>';\ngrant SELECT ON pg_stat_database to datadog;\n```\n\n----------------------------------------\n\nTITLE: Requesting Server Configuration via Hasura Config API (HTTP)\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Hasura Config API endpoint. The request requires admin role authorization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1alpha1/config HTTP/1.1\nX-Hasura-Role: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Trigger Headers via API\nDESCRIPTION: This HTTP request demonstrates how to set up an Event Trigger with custom headers through the Hasura Metadata API. It includes complete configuration with both static header values and headers from environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"<db_type_create_event_trigger>\",\n   \"args\": {\n      \"name\": \"author_trigger\",\n      \"source\": \"<db_name>\",\n      \"table\": {\n         \"name\": \"author\",\n         \"schema\": \"public\"\n      },\n      \"webhook\": \"https://httpbin.org/post\",\n      \"insert\": {\n         \"columns\": \"*\"\n      },\n      \"update\": {\n         \"columns\": [\"name\"]\n      },\n      \"retry_conf\": {\n         \"num_retries\": 0,\n         \"interval_sec\": 10,\n         \"timeout_sec\": 60\n      },\n      \"headers\": [\n         {\n            \"name\": \"X-Hasura-From-Val\",\n            \"value\": \"static-value\"\n         },\n         {\n            \"name\": \"X-Hasura-From-Env\",\n            \"value_from_env\": \"EVENT_WEBHOOK_HEADER\"\n         }\n      ],\n      \"replace\": false\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Trigger Headers with CLI in YAML\nDESCRIPTION: This snippet demonstrates how to configure headers for an Event Trigger in the tables.yaml file within the metadata directory. It shows the complete Event Trigger definition including headers with both static values and environment variable references.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: author\n  event_triggers:\n    - name: author_trigger\n      definition:\n        enable_manual: false\n        insert:\n          columns: '*'\n        update:\n          columns: ['name']\n      retry_conf:\n        num_retries: 0\n        interval_sec: 10\n        timeout_sec: 60\n      headers:\n        - name: X-Hasura-From-Val\n          value: static-value'\n        - name: X-Hasura-From-Env\n          value_from_env: EVENT_WEBHOOK_HEADER\n      webhook: https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: GraphQL Input Objects Specification\nDESCRIPTION: Defines the structure for input objects used in mutations for creating or updating multiple records. It enforces a specific format for each object, including fields and potential conflicts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    field1: value,\n    field2: value,\n    <object-rel-name>: {\n      data: <Input-Object>!,\n      on_conflict: <Conflict-Clause>\n    },\n    <array-rel-name>: {\n      data: [<Input-Object>!]!,\n      on_conflict: <Conflict-Clause>\n    }\n    ..\n  },\n  ..\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Link for Next.js\nDESCRIPTION: Modified split link configuration for Next.js that conditionally uses the WebSocket link only on the client side.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst link = typeof window !== \"undefined\" && wsLink != null\n? split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink\n) : httpLink;\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes in Hasura using CLI\nDESCRIPTION: This bash command applies the metadata changes in Hasura, including setting the specified table as an enum. This ensures that the Hasura GraphQL engine recognizes the table as an enum.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Relationships in Hasura CLI\nDESCRIPTION: YAML configuration to track an object relationship and expose it over the GraphQL API in Hasura CLI. This snippet shows how to add an object relationship to the tables.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: <table name>\n  object_relationships:\n    - name: <relationship name>\n      using:\n        foreign_key_constraint_on: <reference column>\n```\n\n----------------------------------------\n\nTITLE: Example Relay Subscription Implementation\nDESCRIPTION: Demonstration of a Relay subscription structure for real-time author data updates with pagination support.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  author_connection(first: 2){\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        name\n        username\n      }\n    }\n  }\n}q\n```\n\n----------------------------------------\n\nTITLE: Column Configuration Structure\nDESCRIPTION: This snippet provides the structure for configuring column properties in a table's GraphQL representation. It enables customization of column names and descriptions within the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nA [JSONObject][https://tools.ietf.org/html/rfc7159] of table column name to `ColumnConfigValue`.\n\n<div class=\"parsed-literal haskell-pre\">\n\n<pre>\n  <code>\n    {`{\n    \"column1\" : `}\n    <a href=\"#columnconfigvalue\">ColumnConfigValue</a>\n    {`,\n    \"column2\" : `}\n    <a href=\"#columnconfigvalue\">ColumnConfigValue</a>\n    {`,\n    ...}`\n  </code>\n</pre>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Trigger in Hasura CLI YAML\nDESCRIPTION: This YAML snippet shows how to define an Event Trigger for a table using the Hasura CLI. It specifies the trigger name, table details, and webhook URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n   schema: public\n   name: author\nevent_triggers:\n   - name: author_trigger\n   definition:\n      enable_manual: false\n      insert:\n         columns: \"*\"\n      update:\n         columns: \"*\"\n   webhook: https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name in MongoDB via GraphQL\nDESCRIPTION: GraphQL query demonstrating filtering of users by name using the _in operator to match multiple values. Returns filtered users matching names 'John' or 'Jane' along with their complete profile data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery userFiltered {\n  users(where: { name: { _in: [\"John\", \"Jane\"] } }) {\n    _id\n    age\n    email\n    name\n    user_meta {\n      email_verified\n      user_role\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shopping Cart Schema in PostgreSQL\nDESCRIPTION: SQL schema definition for a shopping cart system with cart items, carts, and users tables. Includes relationships and timestamp tracking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/streaming/use-cases.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n  cart_items (\n    id serial primary key,\n    cart_id integer references carts(id),\n    product_id integer references products(id),\n    quantity integer,\n    created_at timestamptz default now(),\n  )\n\n   carts (\n     id serial primary key,\n     user_id uuid references users(id),\n     status text,\n     created_at timestamptz default now(),\n   )\n\n   users (\n     id uuid primary key,\n     first_name text,\n     last_name text,\n     created_at timestamptz default current_timestamp\n   )\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with No Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches authors who have not written any articles. It uses negation combined with an empty object condition to check for the non-existence of nested objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      _not: {\n        articles: {}\n      }\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Actions Metadata\nDESCRIPTION: This snippet presents an `actions.yaml` file, defining the metadata for a GraphQL action named `greet`. It specifies the handler URL, custom types used by the action, and other configurations. It shows example with hardcoded URL and with environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n  - name: greet\n    definition:\n      kind: ''\n      handler: <base_url>/greet\n      forward_client_headers: true\n      headers:\n        - value: application/json\n          name: Content-Type\ncustom_types:\n  enums: []\n  input_objects:\n    - name: SampleInput\n  objects:\n    - name: SampleOutput\n  scalars: []\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nactions:\n  - name: greet\n    definition:\n      kind: ''\n      handler: '{{ACTION_BASE_URL}}/greet'\n      forward_client_headers: true\n      headers:\n        - value: application/json\n          name: Content-Type\ncustom_types:\n  enums: []\n  input_objects:\n    - name: SampleInput\n  objects:\n    - name: SampleOutput\n  scalars: []\n\n```\n\n----------------------------------------\n\nTITLE: Tracking Native Queries with Relationships between Models in BigQuery\nDESCRIPTION: This API request creates and tracks two logical models (article and author) and establishes bidirectional relationships between them using Native Queries. The relationship allows articles to reference their authors and authors to list their articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"bigquery_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"INT64\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"VARCHAR\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"INT64\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"bigquery\"\n      }\n    },\n    {\n      \"type\": \"bigquery_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"INT64\"\n          },\n          {\n            \"name\": \"name\",\n            \"nullable\": false,\n            \"type\": \"VARCHAR\"\n          }\n        ],\n        \"name\": \"author\",\n        \"source\": \"bigquery\"\n      }\n    },\n    {\n      \"type\": \"bigquery_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"author\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"article\",\n        \"source\": \"bigquery\",\n        \"type\": \"query\"\n      }\n    },\n    {\n      \"type\": \"bigquery_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [\n          {\n            \"name\": \"articles\",\n            \"using\": {\n              \"column_mapping\": {\n                \"id\": \"author_id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"article\"\n            }\n          }\n        ],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Tom'), (2, 'Dan'), (3, 'Philip'), (4, 'Gil'), (5, 'Samir')) as t(\\\"id\\\", \\\"name\\\")\",\n        \"object_relationships\": [],\n        \"returns\": \"author\",\n        \"root_field_name\": \"author\",\n        \"source\": \"bigquery\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking an Article Logical Model via CLI\nDESCRIPTION: This YAML snippet demonstrates how to define an `article` Logical Model with fields such as `id`, `title`, `contents`, `published_date`, and `is_published`. It shows the structure for defining fields, their types (integer, text, date, boolean), and nullability constraints for a specific model.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"logical_models:\\n  - name: article\\n    fields:\\n      id:\\n        type: integer\\n        nullable: false\\n      title:\\n        type: text\\n        nullable: false\\n      contents:\\n        type: text\\n        nullable: false\\n      published_date:\\n        type: date\\n        nullable: true\\n      is_published:\\n        type: boolean\\n        nullable: false\"\n```\n\n----------------------------------------\n\nTITLE: Roll Back Migrations\nDESCRIPTION: Commands to roll back database schema migrations to a previous version, either by specific version or number of versions\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --version 1550925483858 --type down --database-name <database-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --down 2 --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Combining filters with _or operator in BigQuery GraphQL\nDESCRIPTION: Shows how to use the _or operator to filter articles based on multiple criteria where at least one must match. The example fetches articles that either have a rating of 4 or higher, or were published after January 1, 2018.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/boolean-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles (\n    where: {\n      _or: [\n        {rating: {_gte: 4}},\n        {published_on: {_gte: \"2018-01-01\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Integer Values with Equality Operator in GraphQL\nDESCRIPTION: Query to fetch author data by comparing an integer ID field using the _eq operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    where: {id: {_eq: 3}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migration and Reloading Metadata in Hasura\nDESCRIPTION: This snippet shows the commands required to apply the migrations and reload the metadata in Hasura after altering the database schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/created-updated-timestamps.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata reload\n```\n\n----------------------------------------\n\nTITLE: Filtering Ancestors with _ancestor_any Operator in GraphQL\nDESCRIPTION: This query uses the _ancestor_any operator to select paths that are ancestors of either 'Top.Collections.Pictures.Astronomy' or 'Top.Science.Astronomy'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  test(\n    where: {\n      path: {\n        _ancestor_any: [\n          \"Top.Collections.Pictures.Astronomy\"\n          \"Top.Science.Astronomy\"\n        ]\n      }\n    }\n  ) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Hasura User Setup\nDESCRIPTION: Comprehensive SQL script to create a Hasura user with all necessary permissions and schema configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- create a separate user for hasura (if you don't already have one)\nCREATE USER hasurauser WITH PASSWORD 'hasurauser';\n\n-- create pgcrypto extension, required for UUID\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- create the schemas required by the hasura cloud system\nCREATE SCHEMA IF NOT EXISTS hdb_catalog;\nCREATE SCHEMA IF NOT EXISTS hdb_views;\nCREATE SCHEMA IF NOT EXISTS hdb_pro_catalog;\n\n-- make the user an owner of the hasura cloud system schemas\nALTER SCHEMA hdb_catalog OWNER TO hasurauser;\nALTER SCHEMA hdb_views OWNER TO hasurauser;\nALTER SCHEMA hdb_pro_catalog OWNER TO hasurauser;\n\n-- grant select permissions on information_schema and pg_catalog\nGRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO hasurauser;\nGRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO hasurauser;\n\n-- grant all privileges on all tables in the public schema (this is optional and can be customized)\nGRANT USAGE ON SCHEMA public TO hasurauser;\nGRANT ALL ON ALL TABLES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO hasurauser;\n\n-- Similarly add these for other schemas as well, if you have any\n-- GRANT USAGE ON SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL TABLES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL SEQUENCES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL FUNCTIONS IN SCHEMA <schema-name> TO hasurauser;\n```\n\n----------------------------------------\n\nTITLE: Cascading Foreign Key Constraint Drops in run_sql API\nDESCRIPTION: Example of using the cascade option to drop a foreign key constraint that has metadata dependencies. When cascade is true, dependent relationships will also be dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"ALTER TABLE article DROP CONSTRAINT article_author_id_fkey\",\n        \"cascade\" : true\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"result_type\": \"CommandOk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Function Permission\nDESCRIPTION: Example of adding permission for a role to access a custom function using the pg_create_function_permission API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_create_function_permission\",\n    \"args\": {\n       \"function\": \"get_articles\",\n       \"source\": \"default\",\n       \"role\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship for MSSQL Manual Configuration\nDESCRIPTION: Defines a manual object relationship between an article table and an article_detail view using column mapping for tables without direct foreign key constraints\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_detail\",\n        \"source\": \"default\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"article_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis TLS Configuration\nDESCRIPTION: Configure TLS settings for secure Redis connection, including enabling TLS, specifying hostname, and setting CA certificate store path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/enterprise-caching.mdx#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nHASURA_GRAPHQL_REDIS_USE_TLS=\"true\"\nHASURA_GRAPHQL_REDIS_URL=\"redis://username:password@redishostname:port\"\nHASURA_GRAPHQL_REDIS_TLS_HOSTNAME=\"redishostname\"\n```\n\n----------------------------------------\n\nTITLE: Adding Data Connector Agent via Metadata API with Direct URL\nDESCRIPTION: HTTP request to add a Data Connector Agent using the Metadata API with a direct URL. This requires admin access and uses the dc_add_agent type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/adding-data-connectors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"dc_add_agent\",\n  \"args\": {\n      \"name\": \"sqlite\",\n      \"url\": \"<url-where-data-connector-agent-is-deployed>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Select Permission with Hasura Schema/Metadata API\nDESCRIPTION: This example demonstrates how to drop an existing select permission for the 'user' role on the 'article' table using the drop_select_permission API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Author Name Pattern in GraphQL\nDESCRIPTION: This GraphQL query fetches all articles whose author's name starts with 'A'. It demonstrates filtering based on a single nested object defined via an object relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_articles (\n    where: {\n      author: {\n        name: { _like: \"A%\"}\n      }\n    }\n  ) {\n    id\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Manual Migration Files\nDESCRIPTION: Command to bootstrap migration files manually for a specific database, allowing custom SQL migration definition\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate create <name-of-migration> --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Collections in YAML\nDESCRIPTION: Example configuration for query_collections.yaml that defines a collection named 'sample-collection' containing two GraphQL queries: 'test' for retrieving book data and 'test2' for retrieving author data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- name: sample-collection\n  definition:\n    queries:\n      - name: test\n        query: |-\n          query test {\n            books {\n              id\n              author_id\n              title\n            }\n          }\n      - name: test2\n        query: |-\n          query test2 {\n              authors{\n                  id\n                  author_name\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Structuring Error Response in JSON for Hasura Actions\nDESCRIPTION: Shows the format for returning an error response from an action handler, including the mandatory error message and optional extensions object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"<mandatory-error-message>\",\n  \"extensions\": \"<optional-json-object>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Database Connection URL for AWS RDS Postgres\nDESCRIPTION: The format for constructing a database connection URL to connect Hasura to an AWS RDS Postgres database. The URL includes user credentials, the database's public IP address, port number, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/aws-postgres.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>\n```\n\n----------------------------------------\n\nTITLE: Inserting Author with Array Field using Variables in GraphQL\nDESCRIPTION: This mutation demonstrates inserting an author with an array field using GraphQL variables. It shows how to pass array data as a Postgres array literal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_author($emails: _text) {\n  insert_author (\n    objects: [\n      {\n        name: \"Ash\",\n        emails: $emails\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      emails\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products by Price using Less Than or Equal To Operator in GraphQL\nDESCRIPTION: This query fetches a list of all products with a price less than or equal to 10 using the _lte operator in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products(where: { price: { _lte: 10 } }) {\n    name\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MS SQL Server spatial data contains query example in GraphQL\nDESCRIPTION: An example query that selects values that spatially contain a given geometry instance using the STContains spatial operator in MS SQL Server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  spatial_types_geom(\n    where: {\n      compoundcurve: { _st_contains: \"POINT(0.5 0)\" }\n    }\n  ) {\n    compoundcurve\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Native Query via HTTP API\nDESCRIPTION: This HTTP POST request tracks a native query using the Hasura metadata API. It's used to register a native query 'article_with_excerpt' that processes SQL to return article excerpts. The request must specify content type, Hasura role, and query details, including arguments and the logical model return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article_excerpt\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"integer\"\n      },\n      {\n        \"name\": \"title\",\n        \"type\": \"text\"\n      },\n      {\n        \"name\": \"date\",\n        \"type\": \"date\"\n      },\n      {\n        \"name\": \"excerpt\",\n        \"type\": \"text\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Articles by Author ID Descending - GraphQL\nDESCRIPTION: Fetches a list of articles sorted by their author's IDs in descending order. This example shows the interaction between articles and their related authors, demonstrating how to sort based on related object fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  articles (\n    order_by: {author: {id: desc}}\n  ) {\n    id\n    rating\n    published_on\n    author {\n      id\n      name\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 3,\n        \"title\": \"Article 3\",\n        \"content\": \"Sample article content 3\",\n        \"author\": {\n          \"id\": 2,\n          \"name\": \"Author 2\"\n        }\n      },\n      {\n        \"id\": 1,\n        \"title\": \"Article 1\",\n        \"content\": \"Sample article content 1\",\n        \"author\": {\n          \"id\": 1,\n          \"name\": \"Author 1\"\n        }\n      },\n      {\n        \"id\": 2,\n        \"title\": \"Article 2\",\n        \"content\": \"Sample article content 2\",\n        \"author\": {\n          \"id\": 1,\n          \"name\": \"Author 1\"\n        }\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Tracking Multiple Tables in Hasura GraphQL (HTTP)\nDESCRIPTION: This snippet allows tracking multiple tables (`author` and `book`) at once using the 'mssql_track_tables' API call, improving efficiency by handling multiple entries in a single request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\"\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship using Metadata API\nDESCRIPTION: HTTP request example for creating a remote schema relationship using the Hasura Metadata API. The example demonstrates how to create a relationship named 'user' between an 'order' table and 'user-remote-schema'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"user\",\n    \"source\": \"pg1\",\n    \"table\": { \"name\": \"order\", \"schema\": \"public\" },\n    \"hasura_fields\": [\"user_id\"],\n    \"remote_schema\": \"user-remote-schema\",\n    \"remote_field\": {\n      \"user\": {\n        \"arguments\": {\n          \"id\": \"$user_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Ratings for Articles by Author\nDESCRIPTION: This snippet demonstrates how to reset the ratings for articles authored by a specific person, showcasing how to filter updates based on nested object fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_ratings {\n  update_article(\n    where: {author: {name: {_eq: \"Sidney\"}}},\n    _set: {rating: null}\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura GraphQL Engine Docker Image\nDESCRIPTION: YAML configuration snippet demonstrating how to update the Hasura GraphQL Engine image version in the docker-compose.yml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v2.9.0\n```\n\n----------------------------------------\n\nTITLE: Deleting Articles with GraphQL Mutation\nDESCRIPTION: This mutation allows for the deletion of articles based on specified criteria. The 'delete_article' mutation includes necessary parameters like 'where' to filter which articles to delete and provides a response structure detailing affected rows and returning fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_articles {\n  delete_article(where: { author: { id: { _eq: 7 } } }) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Pagination in BigQuery Relations\nDESCRIPTION: Illustrates pagination in nested queries by limiting the number of related articles (first 2) for each author.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors {\n    id\n    name\n    articles (\n      limit: 2\n      offset: 0\n    ) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims to Auth0 Login Flow\nDESCRIPTION: TypeScript code for an Auth0 action that adds custom claims to the JWT token during the login flow, including user roles and ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Handler that will be called during the execution of a PostLogin flow.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = 'https://hasura.io/jwt/claims';\n  if (event.authorization) {\n    const claims = {\n      'x-hasura-default-role': event.authorization.roles[0],\n      'x-hasura-allowed-roles': event.authorization.roles,\n      'x-hasura-user-id': event.user.user_id,\n    };\n    api.idToken.setCustomClaim(namespace, claims);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Event Trigger with Hasura Metadata API\nDESCRIPTION: Manually invokes an Event Trigger with a custom payload, allowing testing and custom event generation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_invoke_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"source\": \"default\",\n        \"payload\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Key Permissions for Postgres Connection in Hasura\nDESCRIPTION: Command to set the correct permissions (0600) on the client private key file used for SSL authentication when connecting Hasura to a PostgreSQL database. This ensures secure access control for the private key file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nchmod 0600 /shared-fs/ssl-db/client.pem\n```\n\n----------------------------------------\n\nTITLE: Creating a View in SQL\nDESCRIPTION: This SQL snippet creates a view called `user_profile_private` that exposes a subset of columns from the `user_profile` table. It selects `id`, `email`, `phone`, and `address` columns, aliasing `id` to `user_id`. This view is used to implement different permission sets for the same role, allowing access to sensitive user data only under specific conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE VIEW user_profile_private AS\\n  SELECT id AS user_id, email, phone, address\\n    FROM user_profile;\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Extension: pg_trgm\nDESCRIPTION: This SQL command installs the `pg_trgm` extension, which provides support for full-text search and similarity operations in PostgreSQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pg_trgm;\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by ID using Equality Operator in GraphQL\nDESCRIPTION: This snippet demonstrates how to fetch data about an author whose ID (an integer field) is equal to 3 using the _eq operator in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {id: {_eq: 3}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client with Hasura in JavaScript\nDESCRIPTION: This JavaScript configuration snippet sets up an Apollo client by creating an 'apollo.config.js' file in the root of the project. It specifies the service name and GraphQL endpoint URL, along with headers for authentication using Hasura's admin secret. Users must replace placeholders with actual service names, URLs, and secrets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/resources/visual-studio-code.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: {\n    service: {\n      name: 'your-service-name',\n      url: 'http://localhost:8080/v1/graphql',\n      headers: {\n        'x-hasura-admin-secret': '<your-admin-secret>',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Query Fields for Articles\nDESCRIPTION: GraphQL query fields automatically generated for the `articles` table. These fields allow querying data from the `bigquery.articles` table with options for filtering, ordering, limiting, and aggregating results. The fields provide functionality to fetch both raw data and aggregated statistics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n# Query field: fetch data from the table: \"bigquery.articles\"\nbigquery_articles(\n    distinct_on: [bigquery_articles_select_column!]\n    limit: Int\n    offset: Int\n    order_by: [bigquery_articles_order_by!]\n    where: bigquery_articles_bool_exp\n): [bigquery_articles!]!\n\n# Query field: fetch aggregated fields from the table: \"bigquery.articles\"\nbigquery_articles_aggregate(\n    distinct_on: [bigquery_articles_select_column!]\n    limit: Int\n    offset: Int\n    order_by: [bigquery_articles_order_by!]\n    where: bigquery_articles_bool_exp\n): bigquery_articles_aggregate!\n\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Hasura CLI\nDESCRIPTION: These commands demonstrate how to initialize a new Hasura project and start the Hasura console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura init --directory <my-project> --endpoint <graphql-endpoint> --admin-secret <admin-secret>\ncd <my-project>\nhasura console\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type in GraphQL SDL\nDESCRIPTION: Demonstrates how to define an enum type in GraphQL. The example creates a 'Color' enum with three possible values, illustrating how enums can be used to restrict a field to a specific set of allowed values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nenum Color {\n  RED\n  GREEN\n  BLUE\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Queries in YAML\nDESCRIPTION: This YAML configuration defines a native query within the Hasura metadata. It includes details about root field name, query arguments, relationships, and the query structure. It should be added to `databases.yaml`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n  native_queries:\n    - root_field_name: \"<root field name>\"\n      arguments:\n        \"<argument name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n          array_relationships:\n            - name: \"<relationship name>\"\n              using:\n                column_mapping:\n                  \"<local column>\": \"<remote column>\"\n                remote_native_query: <remote native query name>\"\n          object_relationships: <same as array_relationships>\n          description: \"<text>\"\n          code: \"<SQL query>\"\n          returns: \"<logical model name>\"\n\n```\n\n----------------------------------------\n\nTITLE: Connecting Database Using Hasura Metadata API\nDESCRIPTION: HTTP request to connect a PostgreSQL database using the Hasura Metadata API. The request specifies the database name and connection configuration including the database URL from an environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_source\",\n  \"args\": {\n    \"name\": \"<db_name>\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n          \"from_env\": \"<DB_URL_ENV_VAR>\"\n        },\n        \"pool_settings\": {\n          \"retries\": 1,\n          \"idle_timeout\": 180,\n          \"max_connections\": 50\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Relationship with Hasura Metadata API\nDESCRIPTION: This HTTP POST request creates an object relationship named 'author' for the 'articles' table using the Hasura Metadata API, linking the specified foreign key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_object_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"articles\",\n    \"name\": \"author\",\n    \"using\": {\n      \"foreign_key_constraint_on\" : [\"author_id\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Remote Relationships in Hasura CLI YAML Configuration\nDESCRIPTION: YAML configuration for defining a remote database relationship in Hasura CLI metadata. This sets up an object relationship named 'user' from an 'order' table to a user table in another Postgres source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: order\n  schema: public\nremote_relationships:\n  - name: user\n    definition:\n      to_source:\n        relationship_type: object\n        source: pg2\n        table:\n          name: user\n          schema: public\n        field_mapping:\n          user_id: id\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Aggregate Selection with @oneOf Directive in GraphQL\nDESCRIPTION: This input type allows selecting aggregate operations on InvoiceLine collections. It supports operations on scalar fields like InvoiceLineId and Quantity, as well as on nested object fields like UnitPrice.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_78\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_aggregate_select @oneOf {\n  # Scalar fields\n  InvoiceLineId: Int_aggregate_select\n  InvoiceId: Int_aggregate_select\n  TrackId: Int_aggregate_select\n  Quantity: Int_aggregate_select\n\n  # Nested object fields\n  UnitPrice: Multicurrency_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Aggregate Query without Limit\nDESCRIPTION: Demonstrates a GraphQL query requesting artist aggregate data without specifying a limit, showing default pagination behavior\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArtistsQuery {\n  Artist_aggregate {\n    aggregate {\n      count\n    }\n    nodes {\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship via HTTP API\nDESCRIPTION: This HTTP POST request to the Hasura Metadata API creates a Remote Schema relationship. It specifies the relationship name, source, table, and remote schema details, including the mapping of the 'user_id' field to the 'id' argument of the remote field 'user'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"mssql_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"user\",\n    \"source\": \"mssql1\",\n    \"table\": { \"name\": \"order\", \"schema\": \"dbo\" },\n    \"hasura_fields\": [\"user_id\"],\n    \"remote_schema\": \"user-remote-schema\",\n    \"remote_field\": {\n      \"user\": {\n        \"arguments\": {\n          \"id\": \"$user_id\"\n        }\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Hasura Schema API: Set Column Default\nDESCRIPTION: HTTP POST request to run SQL for setting a column's default value using Hasura schema API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/postgres-defaults.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"ALTER TABLE article ALTER COLUMN created_at SET DEFAULT now();\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Values with Equality Operator in GraphQL\nDESCRIPTION: Query to fetch articles published on a specific date using the _eq operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {published_on: {_eq: \"2017-05-26\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Currency Conversion Query\nDESCRIPTION: A GraphQL query that uses the currency converter action to convert 1 Euro to US Dollars, demonstrating how to call an external REST API through Hasura's GraphQL interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/data-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery CurrencyQuery {\n  currencyConverter(CurrencyInfo: { amt: 1, from: \"EUR\", to: \"USD\" }) {\n    result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Source via HTTP POST in Hasura\nDESCRIPTION: This HTTP POST request updates an existing BigQuery source named `bigquery1` in Hasura. The request must include the necessary headers and a JSON body specifying the `type`, `name`, and configuration details. The `customization` field allows for renaming root fields and types as per user requirements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_update_source\",\n  \"args\": {\n    \"name\": \"bigquery1\",\n    \"configuration\": {\n      \"service_account\": \"bigquery_service_account\",\n      \"project_id\": \"bigquery_project_id\",\n      \"datasets\": [\"dataset1\", \"dataset2\"]\n    },\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Session-based Computed Field via API in Hasura\nDESCRIPTION: This HTTP example illustrates adding a computed field 'liked_by_user' for the 'articles' table using session variables through the Hasura Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"pg_add_computed_field\",\n    \"args\":{\n        \"source\": \"<db_name>\",\n        \"table\":{\n            \"name\":\"articles\",\n            \"schema\":\"public\"\n        },\n        \"name\":\"liked_by_user\",\n        \"definition\":{\n            \"function\":{\n                \"name\":\"article_liked_by_user\",\n                \"schema\":\"public\"\n            },\n            \"table_argument\":\"article_row\",\n            \"session_argument\":\"hasura_session\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Event Trigger Cleanups for All Sources via Hasura API\nDESCRIPTION: This JSON payload shows how to resume event trigger cleanups for all sources using the Hasura Metadata API. It activates cleaners on all triggers defined on all event-trigger-supported sources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/auto-cleanup.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\" : \"resume_event_trigger_cleanups\",\n  \"args\": {\n    \"event_triggers\": {\n      \"sources\": \"*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter Address objects. Includes logic operators and nested fields for address components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Address_bool_exp!]\n  _or: [Address_bool_exp!]\n  _not: Address_bool_exp\n\n  # Scalar fields\n  StreetAddress: String_bool_exp\n  City: String_bool_exp\n  State: String_bool_exp\n  PostalCode: String_bool_exp\n  Country: String_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in SQL\nDESCRIPTION: This SQL snippet creates tables for users, articles, reviewers, and editors. It defines the schema with primary keys, foreign key relationships, and data types for each column, establishing a foundation for managing articles and user roles. The `users` table stores user information, the `articles` table stores article details with a foreign key to the author, the `reviewers` table links reviewers to articles, and the `editors` table lists the editors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\"-- user information from your auth system\\n\\nusers (\\n  id INT PRIMARY KEY,\\n  name TEXT,\\n  profile JSONB, -- some profile information like display_name, etc.\\n  registered_at TIMESTAMP -- the time when this user registered\\n)\\n\\n-- information about articles\\n\\narticles (\\n  id INTEGER PRIMARY KEY,\\n  title TEXT,\\n  author_id INT REFERENCES users(id), -- Foreign key to users :: id\\n  is_reviewed BOOLEAN DEFAULT FALSE,\\n  review_comment TEXT,\\n  is_published BOOLEAN DEFAULT FALSE,\\n  editor_rating INTEGER\\n)\\n\\n-- mapping of reviewers to articles\\n\\nreviewers (\\n  id INTEGER PRIMARY KEY,\\n  article_id INTEGER REFERENCES articles(id), -- Foreign key to articles :: id\\n  reviewer_id INTEGER REFERENCES users(id) -- Foreign key to users :: id\\n)\\n\\n-- a  list of editors\\n\\neditors (\\n  editor_id INTEGER PRIMARY KEY REFERENCES users(id) -- Foreign key to users :: id\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Actions Codegen in YAML\nDESCRIPTION: Example configuration in config.yaml showing the codegen settings including framework choice and output directory specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nendpoint: http://localhost:8080\nmetadata_directory: metadata\nmigrations_directory: migrations\nactions:\n  handler_webhook_baseurl: http://localhost:3000\n  kind: synchronous\n  codegen:\n    framework: nodejs-express\n    output_dir: ./nodejs-express/src/handlers/\n```\n\n----------------------------------------\n\nTITLE: Delete Mutation Basic Syntax\nDESCRIPTION: Basic GraphQL mutation syntax for deleting records, supporting where clauses and mutation responses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-delete-mutations.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation [<mutation-name>] {\n    <mutation-field-name> (\n        [where-argument!]\n    ) {\n        [mutation-response!]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing HTTP Logs for Cron and Scheduled Events - SQL\nDESCRIPTION: This snippet provides SQL commands to delete HTTP invocation logs for both cron and scheduled events, which are stored in their respective tables. It clears the logs without affecting the actual events themselves.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/clean-up.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_cron_event_invocation_logs;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_scheduled_event_invocation_logs;\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to update an existing remote schema configuration. Updates can include changes to URL, headers, timeout settings, and schema customization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schemas.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"update_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\",\n        \"definition\": {\n            \"url\": \"https://remote-server.com/graphql\",\n            \"headers\": [{\"name\": \"X-Server-Request-From\", \"value\": \"Hasura\"}],\n            \"forward_client_headers\": false,\n            \"timeout_seconds\": 60,\n            \"customization\": {\n               \"root_fields_namespace\": \"some_field_name\",\n               \"type_names\": {\n                   \"prefix\": \"some_type_name_prefix\",\n                   \"suffix\": \"some_type_name_suffix\",\n                   \"mapping\": {\n                       \"some_type_name\": \"some_new_type_name\"\n                   }\n               },\n               \"field_names\": [ {\n                   \"parent_type\": \"some_type_name\",\n                   \"prefix\": \"some_field_name_prefix\",\n                   \"suffix\": \"some_field_name_suffix\",\n                   \"mapping\": {\n                       \"some_field_name\": \"some_new_field_name\"\n                   }\n               } ]\n            }\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Relationship with Hasura Metadata API\nDESCRIPTION: This HTTP POST request creates an array relationship named 'articles' for the 'author' table using the Hasura Metadata API, defining how it relates through the 'author_id' foreign key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_array_relationship\",\n  \"args\": {\n    \"table\": \"author\",\n    \"name\": \"articles\",\n    \"source\": \"<db_name>\",\n    \"using\": {\n      \"foreign_key_constraint_on\" : {\n          \"table\" : \"articles\",\n          \"columns\" : [\"author_id\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to verify that all required containers are running properly after deployment, showing container IDs, images, status and ports.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\nCONTAINER ID IMAGE                              ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine              ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres                           ... 1m ago  Up 1m  5432/tcp ...\n3a29aa348999 redis:7                            ... 1m ago  Up 1m  6379/tcp ...\n7b5b2ee70ece hasura/graphql-data-connector      ... 1m ago  Up 1m  5005/tcp ..\n```\n\n----------------------------------------\n\nTITLE: Tracking Foreign Key Relationships via CLI\nDESCRIPTION: YAML configuration for tracking relationships inferred from foreign key constraints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n  array_relationships:\n    - name: articles\n      using:\n        foreign_key_constraint_on:\n          column: author_id\n          table:\n            schema: public\n            name: articles\n```\n\n----------------------------------------\n\nTITLE: Upsert Author with No Updates on Match\nDESCRIPTION: This GraphQL mutation attempts to insert a new author into the 'author' table. If an existing author with the same name is found, no changes are made because update_columns are empty.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/upsert.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation upsert_author {\n  insert_author(\n    objects: [\n      { name: \"John\" }\n    ],\n    if_matched: {\n      match_columns: name,\n      update_columns: []\n    }\n  ) {\n    affected_rows\n  }\n}`}\n  response={`\n  \"data\": {\n    \"insert_author\": {\n      \"affected_rows\": 0\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model via CLI in YAML\nDESCRIPTION: YAML configuration for creating a logical model in the metadata/databases/databases.yaml file. Defines model name, fields, types, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<Snowflake field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Passport Info with Owner\nDESCRIPTION: Example GraphQL query to retrieve passport information and the corresponding owner details\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-one.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  passport_info {\n    id\n    passport_number\n    owner {\n      id\n      name\n    }\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Setting GraphQL Introspection Options via HTTP POST\nDESCRIPTION: HTTP request to configure GraphQL introspection settings by specifying roles for which introspection should be disabled. This endpoint replaces any existing introspection configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/introspection.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"set_graphql_schema_introspection_options\",\n    \"args\": {\n        \"disabled_for_roles\": [\n            \"guest\",\n            \"public\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook with Flask and smtplib\nDESCRIPTION: This Python code creates a Flask web application that listens for POST requests at the `/expiration_check` endpoint. It authenticates the request using a secret header, queries a Hasura GraphQL endpoint for coupons expiring in two days, and sends email reminders to the users associated with those coupons using smtplib. The code includes error handling for SMTP connection issues and falls back to printing the email message to the terminal if sending fails.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"from flask import Flask, request, jsonify\nimport smtplib\nfrom smtplib import SMTPException\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nimport requests\nfrom datetime import datetime, timedelta\n\napp = Flask(__name__)\n\n# Create an SMTP server connection\ndef create_smtp_server():\n    try:\n        server = smtplib.SMTP(host='smtp.ethereal.email', port=587)\n        server.starttls()\n        server.login('example@superstore.com', 'samplePassword123')\n        return server\n    except SMTPException as e:\n        print(f\\\"An error occurred while creating the SMTP server: {e}\\nWe'll print the message to the terminal\\n\\\")\n        return None\n\ndef get_expired_coupons():\n    today = datetime.now()\n    two_days_from_now = today + timedelta(days=2)\n    formatted_date = two_days_from_now.isoformat()\n\n    # Prepare the request headers\n    headers = {\n        'Content-Type': 'application/json',\n        'x-hasura-admin-secret': '<YOUR_ADMIN_SECRET>',\n    }\n\n    graphql_query = '''\n    query GetExpiringCoupons($two_days_from_now: timestamptz!) {\n      coupons(where: {expiration_date: {_lte: $two_days_from_now, _gte: today}}) {\n        id\n        expiration_date\n        code\n        user {\n          email\n          id\n          name\n        }\n      }\n    }\n    '''\n\n    graphql_variables = {\n        'two_days_from_now': formatted_date\n    }\n\n    # Prepare the request payload as a dictionary\n    payload = {\n        'query': graphql_query,\n        'variables': graphql_variables\n    }\n\n\n\n    # Make the POST request to the GraphQL endpoint\n    response = requests.post('<YOUR_PROJECT_ENDPOINT>', json=payload, headers=headers)\n\n    # Check the response status\n    if response.status_code == 200:\n        res = response.json()\n        return res['data']['coupons']\n    else:\n        return []\n\n@app.route('/expiration_check', methods=['POST'])\ndef expiration_check():\n    # Confirm the secret header is correct\n    auth_header = request.headers.get('secret-authorization-string')\n    if auth_header != 'super_secret_string_123':\n        return jsonify({'message': 'Unauthorized'}), 401\n\n    # Fetch expired_coupons from your Hasura\n    expired_coupons = get_expired_coupons()\n\n    # Send email reminders\n    for coupon in expired_coupons:\n        email = coupon['user']['email']\n        # Format the timestamp into a readable format (e.g., \\\"October 15, 2023\\\")\n        parsed_date = datetime.fromisoformat(coupon['expiration_date'])\n        readable_date = parsed_date.strftime(\"%B %d, %Y\")\n\n        # Create reminder message\n        msg = MIMEMultipart()\n        msg['From'] = 'SuperStore.com <sender@SuperStore.com>'\n        msg['To'] = f\"{coupon['user']['name']} <{email}>\"\n        msg['Subject'] = f\"You've got a coupon expiring soon, {coupon['user']['name'].split(' ')[0]}!\"\n        message_body = f\"Yo {coupon['user']['name'].split(' ')[0]},\\n\\nYour coupon code, {coupon['code']}, is expiring soon! Use it before {readable_date}.\\n\\nThanks,\\nSuperStore.com\"\n        msg.attach(MIMEText(message_body, 'plain'))\n\n        server = create_smtp_server()\n        if server is not None:\n            # Send the email if server is running\n            server.sendmail('sender@SuperStore.com', email, msg.as_string())\n            server.quit()\n        else:\n            # or just print the message to the terminal\n            print(f\"From: {msg['From']}\\nTo: {msg['To']}\\nSubject: {msg['Subject']}\\n{message_body}\")\n\n    return jsonify({'message': 'Coupons sent!'})\n\nif __name__ == '__main__':\n    app.run(port=4000)\n\"\n```\n\n----------------------------------------\n\nTITLE: Article Validation YAML Configuration\nDESCRIPTION: YAML configuration for implementing title validation in articles, ensuring titles are not empty.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: article\n  insert_permissions:\n    - role: user\n      permission:\n        check:\n          title:\n            _ne: ''\n```\n\n----------------------------------------\n\nTITLE: Tracking Table with Schema Specification in Hasura\nDESCRIPTION: Example of tracking a table by explicitly specifying both schema and table names without custom configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_table\",\n  \"args\": {\n    \"source\": \"default\",\n    \"table\": {\n      \"schema\": \"public\",\n      \"name\": \"author\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Track BigQuery Logical Model\nDESCRIPTION: API endpoint to add a logical model to the GraphQL schema for BigQuery source. Allows defining fields with types, nullability and descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<BigQuery field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Subscription Conversion Example\nDESCRIPTION: Demonstrates how to convert a regular GraphQL query into a subscription by changing the operation type from 'query' to 'subscription'. This enables real-time updates for the query result with a default update interval of 1 second.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  // query content here\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Database Source with Hasura Metadata API\nDESCRIPTION: This snippet shows how to use the rename_source API to rename an existing database source in Hasura. All settings are kept, only the name is changed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"rename_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"new_name\": \"pg2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for Signup and Login Actions\nDESCRIPTION: GraphQL type definitions for Signup and Login actions, including custom types for user creation output and JWT token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  Signup(email: String!, password: String!): CreateUserOutput\n}\n\ntype CreateUserOutput {\n  id: Int!\n  email: String!\n  password: String!\n}\n\ntype Mutation {\n  Login(email: String!, password: String!): JsonWebToken\n}\n\ntype JsonWebToken {\n  token: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Published Article Type Using GraphQL\nDESCRIPTION: This GraphQL query filters authors based on their published articles. It fetches all authors who have at least one published article in the 'medicine' field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(where: {get_published_articles: {type: {_eq: \"medicine\"}}}){\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action Permission with HTTP POST\nDESCRIPTION: Defines a permission to make the 'create_user' action visible for the 'user' role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/actions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_action_permission\",\n  \"args\": {\n    \"action\": \"create_user\",\n    \"role\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup aggregation strategy for hierarchical grouping in GraphQL\nDESCRIPTION: This query demonstrates rollup aggregation, which performs aggregations at multiple levels of granularity: for specific country/state combinations, for each country (regardless of state), and across all invoices globally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    # Group by BillingAddress.Country, then BillingAddress.State\n    grouping_keys: [\n      { BillingAddress: { _scalar_field: Country } }\n      { BillingAddress: { _scalar_field: State } }\n    ]\n    # Perform grouping using the rollup strategy\n    grouping_type: Rollup\n    # Sort groups first by BillingAddress.Country asc, then by BillingAddress.State descending\n    order_by: [\n      { group_key: { BillingAddress: { Country: Asc } } }\n      { group_key: { BillingAddress: { State: Desc } } }\n    ]\n  ) {\n    group_key {\n      # The value of the (billing country, billing state) tuple per group.\n      BillingAddress {\n        Country\n        State\n      }\n    }\n    group_aggregate {\n      _count # The number of invoices in a group\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in BigQuery with SQL\nDESCRIPTION: Defines the SQL schema for creating `authors` and `articles` tables in BigQuery. These tables are used to store information about authors and their articles, respectively. The `authors` table has an `id` (INT64) and `name` (STRING), while the `articles` table includes columns for `id`, `title`, `body`, `author_id`, `is_published`, `published_on`, and `rating`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nauthors (\n    `id` INT64,\n    `name` STRING\n);\n\narticles (\n    `id` INT64,\n    `title` STRING,\n    `body` STRING,\n    `author_id` INT64,\n    `is_published` BOOL,\n    `published_on` DATETIME,\n    `rating` INT64\n);\n\n```\n\n----------------------------------------\n\nTITLE: Tracking Views via Hasura Metadata API\nDESCRIPTION: HTTP request to track a view using the Hasura Metadata API. This POST request to the /v1/metadata endpoint uses the pg_track_table type to expose a view over the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/views.mdx#2025-04-17_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"pg_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"schema\": \"public\",\n    \"name\": \"<name of view>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Variables\nDESCRIPTION: Modified version of the author insertion mutation using variables for action derivation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/derive.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertAuthor($name: String) {\n  insert_author_one(object: { name: $name }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a foreign key constraint to reference the enum table in Postgres\nDESCRIPTION: This SQL snippet alters the `users` table to add a foreign key constraint that references the `user_role` table.  This ensures that the values in the `role` column of the `users` table are restricted to the values present in the `user_role` table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n\"ALTER TABLE users ADD CONSTRAINT\\n  users_role_fkey FOREIGN KEY (role) REFERENCES user_role;\"\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Validation Response in Hasura\nDESCRIPTION: Shows the HTTP response format for successful validation of mutations. Returns a 200 OK status code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\n200 OK\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Table Metadata\nDESCRIPTION: This snippet shows an example of `public_author.yaml`, a metadata file for a specific database table. It defines table relationships, permissions, event triggers, and other configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: author\n  schema: public\narray_relationships:\n  - name: articles\n    using:\n      foreign_key_constraint_on:\n        column: author_id\n        table:\n          name: article\n          schema: public\ninsert_permissions:\n  - role: user\n    permission:\n      check:\n        id:\n          _eq: X-Hasura-User-Id\n      set:\n        id: x-hasura-user-id\n      columns:\n        - name\nselect_permissions:\n  - role: user\n    permission:\n      columns:\n        - id\n        - name\n      filter:\n        id:\n          _eq: X-Hasura-User-Id\n      allow_aggregations: true\n      query_root_fields:\n        - select\n        - select_by_pk\n      subscription_root_fields:\n        - select\n        - select_by_pk\ndelete_permissions:\n  - role: user\n    permission:\n      backend_only: true\n      filter: {}\nevent_triggers:\n  - name: author_created\n    definition:\n      enable_manual: false\n      insert:\n        columns: '*'\n    retry_conf:\n      interval_sec: 10\n      num_retries: 0\n      timeout_sec: 60\n    webhook: http://httpbin.org/post\n\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema in YAML for Hasura CLI\nDESCRIPTION: YAML configuration for adding a remote schema using the Hasura CLI. It specifies the schema name, URL, timeout, and header forwarding option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/adding-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: my-remote-schema\n  definition:\n    url: https://graphql-pokemon.now.sh/\n    timeout_seconds: 60\n    forward_client_headers: true\n```\n\n----------------------------------------\n\nTITLE: Hasura Console Usage Examples\nDESCRIPTION: Demonstrates various ways to start the Hasura console with different configuration options including custom ports, admin secret, and container networking\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_console.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start console:\nhasura console\n\n# Start console on a different address and ports:\nhasura console --address 0.0.0.0 --console-port 8080 --api-port 8081\n\n# Start console without opening the browser automatically\nhasura console --no-browser\n\n# Use with admin secret:\nhasura console --admin-secret \"<admin-secret>\"\n\n# Connect to an instance specified by the flag, overrides the one mentioned in config.yaml:\nhasura console --endpoint \"<endpoint>\"\n\n# Connect to HGE instance running in a container when running CLI inside another container:\nhasura console --endpoint <container network endpoint, like: http://host.docker.internal:8080> --no-browser --address 0.0.0.0 --console-hge-endpoint http://0.0.0.0:8080\n```\n\n----------------------------------------\n\nTITLE: Dropping Inconsistent Metadata in Hasura GraphQL Engine (HTTP)\nDESCRIPTION: This snippet demonstrates how to use the 'drop_inconsistent_metadata' endpoint to purge all inconsistent objects from the metadata in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_inconsistent_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding created_at Timestamp using Hasura API\nDESCRIPTION: This snippet illustrates how to use the Hasura schema API to add a created_at timestamp to the article table. It requires a POST request with the appropriate SQL command in JSON format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/created-updated-timestamps.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n      \"source\": \"<db_name>\",\n      \"sql\": \"ALTER TABLE ONLY \\\"article\\\" ADD COLUMN \\\"created_at\\\" TIMESTAMP DEFAULT NOW();\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting CORS Domains in Hasura GraphQL Engine\nDESCRIPTION: Demonstrates how to restrict Cross-Origin Resource Sharing (CORS) to specific trusted domains in Hasura. This can be set using an environment variable or a command-line flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# set the env var, accept cross-origin requests from https://my-ui.com\nHASURA_GRAPHQL_CORS_DOMAIN=https://my-ui.com\n\n# using flags\ngraphql-engine --database-url=<database-url> server --cors-domain=\"https://my-ui.com\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Stored Procedure in Hasura\nDESCRIPTION: This GraphQL query demonstrates how to execute a stored procedure (`sp_tables`) that has been tracked in Hasura.  It passes the `table_type` argument with a value of `'TABLE'` to filter the results, limits the number of returned records to 3, and selects specific fields (TABLE_QUALIFIER, TABLE_OWNER, TABLE_NAME, TABLE_TYPE) from the result set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\nquery sp {\n  sp_tables(args: { table_type: \"'TABLE'\" }, limit: 3) {\n    TABLE_QUALIFIER\n    TABLE_OWNER\n    TABLE_NAME\n    TABLE_TYPE\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PostgreSQL and Redis for Hasura\nDESCRIPTION: YAML configuration snippet showing how to set environment variables for custom PostgreSQL and Redis instances in the docker-compose.yml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v2.12.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_REDIS_URL: \"redis://redis:6379\"\n    HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: \"redis://redis:6379\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Authors with Passport Info\nDESCRIPTION: Example GraphQL query to retrieve authors and their associated passport information in a nested query\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/one-to-one.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    passport_info {\n      id\n      passport_number\n    }\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Batch Tracking Tables with No Warnings in Hasura\nDESCRIPTION: Shows how to track multiple tables with allow_warnings set to false for atomic operation - either all tables are tracked or none.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\"\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Explain API Request Format\nDESCRIPTION: Shows the HTTP request structure for the Explain API endpoint including query and user role parameters\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/explain.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/graphql/explain HTTP/1.1\nContent-Type: application/json\n\n{\n     \"query\": \"<query>\",\n     \"user\": {\n         \"x-hasura-role\" : \"...\",\n         \"x-hasura-session-var1\" : \"...\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mutation Success Response Schema\nDESCRIPTION: GraphQL response structure for successful delete operations, including affected rows count and returning data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-delete-mutations.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{ data # the returned data is specified by the `mutation-response` section\n    {\n    affected_rows\n    returning { # the `returning` statement can include nested objects\n        response-field1\n        response-field2\n        ..\n    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a View using SQL in Hasura Console\nDESCRIPTION: This SQL snippet shows how to create a view that averages the ratings of articles for each author in a specific schema. This view helps in deriving data based on business logic by aggregating records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/views.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW my_data.author_average_rating AS (\n  SELECT author_id, avg(rating) avg_rating\n    FROM my_data.article\n    GROUP BY author_id\n)\n```\n\n----------------------------------------\n\nTITLE: Track Article Logical Model via API\nDESCRIPTION: This snippet shows the HTTP request to track the 'article' logical model via the Hasura Metadata API. The JSON payload defines the structure of the 'article' model, specifying the data types for each field, including integer, text, date, and bit. Scalar types are used in this example.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\":\n          {\n            \"scalar\": \"int\"\n          }\n      },\n      {\n        \"name\": \"title\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"contents\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"published_date\",\n        \"type\":\n          {\n            \"scalar\": \"date\",\n            \"nullable\": true\n          },\n      },\n      {\n        \"name\": \"is_published\",\n        \"type\":\n          {\n            \"scalar\": \"bit\"\n          }\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Metadata Definition in YAML\nDESCRIPTION: RFC metadata including authors and related discussion links\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors: Philip Carlsen <philip@hasura.io>\ndiscussion:\n  https://github.com/hasura/graphql-engine-mono/issues/3518\n  https://github.com/hasura/graphql-engine-mono/issues/2746#issuecomment-1009977143\nstate: draft\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model Select Permission via API\nDESCRIPTION: This HTTP request shows how to create select permissions for a Logical Model using the Hasura API. It allows specifying the role, accessible columns, and a filter for row-level access control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\" | [\n        \"column 1\",\n        \"column 2\",\n        ...\n      ],\n      \"filter\": <boolean expression>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Claims with JSON Format\nDESCRIPTION: This JSON object exemplifies the structure of JWT claims when 'claims_format' is set to 'json'. It shows Hasura-specific claims contained within a nested JSON object. Ensure 'claims_format' is set to 'json' to use this structure, or choose an alternative format if required.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"https://hasura.io/jwt/claims\": {\n    \"x-hasura-allowed-roles\": [\"editor\", \"user\", \"mod\"],\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-user-id\": \"1234567890\",\n    \"x-hasura-org-id\": \"123\",\n    \"x-hasura-custom\": \"custom-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping MS SQL Server Source via Metadata API\nDESCRIPTION: Removes an MS SQL Server database from Hasura using the `mssql_drop_source` Metadata API action.  The example demonstrates how to remove a source named `mssql1`.  It requires admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_drop_source\",\n  \"args\": {\n    \"name\": \"mssql1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a SQL Statement to Create Index\nDESCRIPTION: This snippet demonstrates how to use the `run_sql` type to execute an SQL command that creates a unique index on the films table in a Postgres database. It requires admin role permissions and is sent as a POST request to the Hasura GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"CREATE UNIQUE INDEX ON films (title);\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Relationship Aggregate Sorting in GraphQL\nDESCRIPTION: Shows how to sort authors based on their article count using array relationship aggregates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors (\n    order_by: {\n      articles_aggregate: {count: desc}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate{\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Action Log by ID in SQL\nDESCRIPTION: SQL command to delete a single async action log entry by its unique identifier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/logs-clean-up.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_action_log WHERE id = '<async-action-id>';\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Hasura with Dex Integration\nDESCRIPTION: Docker Compose YAML that defines a complete deployment setup with PostgreSQL, Hasura GraphQL Engine, and Dex. It includes environment variables for connecting Hasura to the Dex SSO provider.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15\n    restart: always\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - '5432'\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n\n  hasura-pro:\n    image: hasura/graphql-engine:v2.25.0\n    ports:\n      - '8080:8080'\n    depends_on:\n      - postgres\n    restart: always\n    environment:\n      HASURA_GRAPHQL_EE_LICENSE_KEY: <YOUR_EE_LICENSE_KEY>\n      HASURA_GRAPHQL_ADMIN_SECRET: <YOUR_ADMIN_SECRET>\n      HASURA_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'\n      HASURA_GRAPHQL_DEV_MODE: 'true'\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log\n      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics\n      HASURA_GRAPHQL_METRICS_SECRET: <YOUR_METRICS_SECRET>\n      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets\n      HASURA_GRAPHQL_SSO_PROVIDERS:\n        '[{\"client_id\": \"dex-login\",\"admin_roles\": [\"admin\", \"authors\"], \"name\": \"Dex Login\",\"authorization_url\":\n        \"http://127.0.0.1:5556/dex/auth\",\"request_token_url\": \"http://127.0.0.1:5556/dex/token\",\"scope\": \"openid\n        offline_access groups\",\"jwt_secret\": {\"type\": \"RS256\",\"jwk_url\": \"http://dex:5556/dex/keys\",\"issuer\":\n        \"http://127.0.0.1:5556/dex\",\"claims_map\": {\"x-hasura-allowed-roles\": { \"path\": \"$.groups\"\n        },\"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }}}}]'\n\n  dex:\n    image: dexidp/dex\n    restart: always\n    volumes:\n      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml\n    ports:\n      - '5556:5556'\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription for Undelivered Messages\nDESCRIPTION: GraphQL subscription query to stream undelivered messages using cursor-based pagination with batch size control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/streaming/use-cases.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription getUndeliveredMessages {\n  # will get all the messages that have `created_at > 2022-01-01` in batches of 2 rows\n  messages_stream(cursor: { initial_value: { created_at: \"2022-01-01\" }, ordering: ASC }, batch_size: 2) {\n    id\n    from {\n      first_name\n    }\n    to {\n      first_name\n    }\n    content\n    created_at\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Testing Remote Schema Relationship\nDESCRIPTION: This GraphQL query is used to test the functionality of the remote schema relationship created between the local database and the remote schema. It fetches article details along with related user information from the remote source, validating the integration of data across schemas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    id\n    author_id\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger for Article Validation\nDESCRIPTION: This snippet creates a Postgres trigger that executes the check_author_active function before any INSERT or UPDATE operation on the articles table. It ensures the validation runs for each affected row.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE TRIGGER insert_article BEFORE INSERT OR UPDATE ON \"articles\" FOR EACH ROW EXECUTE PROCEDURE check_author_active();\n```\n\n----------------------------------------\n\nTITLE: Querying Products via RESTified Endpoint in GraphQL\nDESCRIPTION: The snippet demonstrates a GraphQL query used to create a RESTified endpoint for fetching products. No parameters are required for this query, and it is implemented using a 'GET' HTTP method. Once setup, this endpoint allows clients to retrieve all products from the database. Dependencies include access to the GraphiQL IDE and the Hasura GraphQL engine, and the query returns a list of products with details such as IDs and names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/restified-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllProductsQuery {\n  products {\n    id\n    name\n    manufacturerByManufacturer {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Queries with Results in run_sql API\nDESCRIPTION: Example of executing a SELECT query with the run_sql API. The response includes column names in the first row of the result array, followed by the data rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"select user_id, first_name from author limit 2;\"\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"result_type\": \"TuplesOk\",\n    \"result\": [\n        [\n            \"user_id\",\n            \"first_name\"\n        ],\n        [\n            \"1\",\n            \"andre\"\n        ],\n        [\n            \"2\",\n            \"angela\"\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Creating Hasura Actions\nDESCRIPTION: Various examples showing how to create Hasura Actions with different options, including with codegen, deriving from existing operations, and specifying kind or webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a Hasura Action\nhasura actions create [action-name]\n\n# Create a Hasura Action with codegen\nhasura actions create [action-name] --with-codegen\n\n# Create a Hasura Action by deriving from a Hasura operation\nhasura actions create [action-name] --derive-from ''\n\n# Create a Hasura Action with a different kind or webhook\nhasura actions create [action-name] --kind [synchronous|asynchronous] --webhook [http://localhost:3000]\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger in Postgres (PL/pgSQL)\nDESCRIPTION: This PL/pgSQL snippet defines a trigger function that automatically converts the 'input' field's value to uppercase and assigns it to the 'output' field during insert or update operations on 'sql_function_table'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE FUNCTION test_func() RETURNS trigger AS $emp_stamp$\n      BEGIN\n          NEW.output := UPPER(NEW.input);\n          RETURN NEW;\n      END;\n  $emp_stamp$ LANGUAGE plpgsql;\n\n  CREATE TRIGGER test_trigger BEFORE INSERT OR UPDATE ON sql_function_table\n      FOR EACH ROW EXECUTE PROCEDURE test_func();\n```\n\n----------------------------------------\n\nTITLE: Complex Relationship-Based Permissions\nDESCRIPTION: Permission configuration using related table relationships to determine access rights\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\nproducts(where: {\n  userInVendorByUserId: {\n    vendor_id: {_eq: \"X-Hasura-Vendor-Id\"}\n  }\n}) {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationships via Hasura Metadata API\nDESCRIPTION: HTTP request to create a remote database relationship using Hasura's Metadata API. This example sets up a relationship between an order table in one database and a user table in another.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"user\",\n    \"source\": \"pg1\",\n    \"table\": {\n      \"name\": \"order\",\n      \"schema\": \"public\"\n    },\n    \"definition\": {\n      \"to_source\": {\n        \"relationship_type\": \"object\",\n        \"source\": \"pg2\",\n        \"table\": {\n          \"name\": \"user\",\n          \"schema\": \"public\"\n        },\n        \"field_mapping\": {\n          \"user_id\": \"id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Query from Collection - HTTP POST Request\nDESCRIPTION: Removes a specific query from a collection. Requires both collection name and query name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_query_from_collection\",\n    \"args\": {\n         \"collection_name\": \"my_collection\",\n         \"query_name\": \"query_2\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for InvoiceLine Grouping Operations\nDESCRIPTION: GraphQL type definitions for InvoiceLine groups and grouping key fields. These types specify how invoice line items can be grouped and what fields are available for grouping operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_96\n\nLANGUAGE: graphql\nCODE:\n```\ntype InvoiceLine_groups {\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: InvoiceLine_grouping_key_fields!\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: InvoiceLine_aggregate_fields!\n}\n\ntype InvoiceLine_grouping_key_fields {\n  # Scalar fields, all nullable\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[]\n  InvoiceLineId: Int\n  InvoiceId: Int\n  TrackId: Int\n  Quantity: Int\n\n  # Nested object fields/object relationships\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[].object\n  UnitPrice: Multicurrency_grouping_key_fields!\n  # Controlled in OpenDD via GroupsExpression.definition.groupableRelationships[].object\n  Invoice: Invoice_grouping_key_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for User Retrieval in Hasura\nDESCRIPTION: This GraphQL query retrieves user information by ID. It uses the @cached directive for caching and accepts a user_id variable of type String.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/rest-endpoints.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery @cached ($user_id: String!) {\n  users(where: { id: { _eq: $user_id } }) {\n    name\n    email\n    role\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Text Values with Equality Operator in GraphQL\nDESCRIPTION: Query to fetch authors by matching their name using the _eq operator with a text field\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_eq: \"Sidney\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Table Root Fields via HTTP\nDESCRIPTION: Describes using an HTTP POST request to customize root field names for a table using Hasura's metadata API. It updates the `select` and `select_by_pk` fields for the `author` table by API call, following the metadata update through endpoints. Requires admin authorization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-field-names.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_set_table_customization\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"author\",\n    \"custom_root_fields\": {\n        \"select\": \"authors\",\n        \"select_by_pk\": \"author\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query for IP Geolocation Action\nDESCRIPTION: This GraphQL query demonstrates the usage of the custom GetCityName action to retrieve the city name for a given IP address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  GetCityName(ip: \"43.225.189.85\") {\n    city\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Field Schema Example\nDESCRIPTION: Example JSON representation of a GraphQL schema for an article field showing the structure of arguments including distinct_on, limit, offset, order_by, and where clauses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fields\": [\n    {\n      \"name\": \"article\",\n      \"args\": [\n        {\n          \"name\": \"distinct_on\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"LIST\",\n            \"ofType\": {\n              \"name\": null,\n              \"kind\": \"NON_NULL\",\n              \"ofType\": {\n                \"name\": \"article_select_column\",\n                \"kind\": \"ENUM\"\n              }\n            }\n          }\n        },\n        {\n          \"name\": \"limit\",\n          \"type\": {\n            \"name\": \"Int\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"offset\",\n          \"type\": {\n            \"name\": \"Int\",\n            \"kind\": \"SCALAR\",\n            \"ofType\": null\n          }\n        },\n        {\n          \"name\": \"order_by\",\n          \"type\": {\n            \"name\": null,\n            \"kind\": \"LIST\",\n            \"ofType\": {\n              \"name\": null,\n              \"kind\": \"NON_NULL\",\n              \"ofType\": {\n                \"name\": \"article_order_by\",\n                \"kind\": \"INPUT_OBJECT\"\n              }\n            }\n          }\n        },\n        {\n          \"name\": \"where\",\n          \"type\": {\n            \"name\": \"article_bool_exp\",\n            \"kind\": \"INPUT_OBJECT\",\n            \"ofType\": null\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Scalar in GraphQL Query\nDESCRIPTION: Example of using the default GraphQL Boolean scalar type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    is_published: true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Routing to Primary or Read Replicas Based on Header in Kriti\nDESCRIPTION: This snippet demonstrates how to route requests to either the primary database or read replicas based on a custom header 'no-stale-read'. If the header is set to 'true', requests go to the primary, otherwise to read replicas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_0\n\nLANGUAGE: kriti\nCODE:\n```\n{{ if ($.request.headers?[no-stale-read] == \"true\")}}\n  {{$.primary}}\n{{ else }}\n  {{$.read_replicas}}\n```\n\n----------------------------------------\n\nTITLE: SQL Table Schema Definition\nDESCRIPTION: This SQL snippet defines the schema for two tables: `author` and `article`. The `author` table contains columns for ID, name, and rating, while the `article` table contains columns for ID, title, content, and a foreign key `author_id` referencing the `author` table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"author (id uuid, name text, rating integer)\narticle (id uuid, title text, content text, author_id uuid)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter decimal values. Includes logic operators and comparison operators specific to decimal values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\ninput Decimal_bool_exp {\n  # Logic operators\n  _and: [Decimal_bool_exp!]\n  _or: [Decimal_bool_exp!]\n  _not: Decimal_bool_exp\n\n  # Comparisons\n  _eq: Decimal\n  _gt: Decimal\n  _gte: Decimal\n  _in: [Decimal!]\n  _is_null: Boolean\n  _lt: Decimal\n  _lte: Decimal\n  _neq: Decimal\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an Exported Trace Log in JSON Format\nDESCRIPTION: A sample JSON structure showing how Hasura Cloud exports trace logs to APM providers. These logs provide detailed timing information about the execution of GraphQL operations, including database queries and HTTP requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resourceSpans\": [\n    {\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"Region\",\n            \"value\": {\n              \"stringValue\": \"us-west\"\n            }\n          }\n        ]\n      },\n      \"scopeSpans\": [\n        {\n          \"scope\": {\n            \"name\": \"hasura\",\n            \"version\": \"v2.19.0\"\n          },\n          \"spans\": [\n            {\n              \"traceId\": \"e44b8c614e0f7434b7b55c914fa71b1c\",\n              \"spanId\": \"d3af63b8e6191589\",\n              \"parentSpanId\": \"a5648ac5af5faf1f\",\n              \"name\": \"Postgres\",\n              \"startTimeUnixNano\": \"1676531420905206010\",\n              \"endTimeUnixNano\": \"1676531420916114926\",\n              \"status\": {\n                \"code\": \"STATUS_CODE_OK\"\n              }\n            },\n            {\n              \"traceId\": \"e44b8c614e0f7434b7b55c914fa71b1c\",\n              \"spanId\": \"a5648ac5af5faf1f\",\n              \"parentSpanId\": \"0d6b602bc5a7b3af\",\n              \"name\": \"Postgres Query for root field \\\"Album\\\"\",\n              \"startTimeUnixNano\": \"1676531420905131593\",\n              \"endTimeUnixNano\": \"1676531420916617176\",\n              \"status\": {\n                \"code\": \"STATUS_CODE_OK\"\n              }\n            },\n            {\n              \"traceId\": \"e44b8c614e0f7434b7b55c914fa71b1c\",\n              \"spanId\": \"0d6b602bc5a7b3af\",\n              \"parentSpanId\": \"a085bd763f8f72da\",\n              \"name\": \"Query\",\n              \"startTimeUnixNano\": \"1676531420904690968\",\n              \"endTimeUnixNano\": \"1676531420916671343\",\n              \"status\": {\n                \"code\": \"STATUS_CODE_OK\"\n              }\n            },\n            {\n              \"traceId\": \"e44b8c614e0f7434b7b55c914fa71b1c\",\n              \"spanId\": \"a085bd763f8f72da\",\n              \"parentSpanId\": \"\",\n              \"name\": \"/v1/graphql\",\n              \"startTimeUnixNano\": \"1676531420903555760\",\n              \"endTimeUnixNano\": \"1676531420919447135\",\n              \"status\": {\n                \"code\": \"STATUS_CODE_OK\"\n              }\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Relationship in YAML\nDESCRIPTION: This YAML configuration defines an object relationship named 'author' for the 'articles' table in the Hasura metadata, linking the 'author_id' foreign key to the authors table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n```\n\n----------------------------------------\n\nTITLE: Copying Hasura Image to Google Container Registry\nDESCRIPTION: Bash commands to pull the Hasura GraphQL Engine image from Docker Hub, tag it for GCR, and push it to GCR.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-google-cloud-run.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=<LatestRelease />\ndocker pull hasura/graphql-engine:$VERSION\ndocker tag hasura/graphql-engine:$VERSION gcr.io/<MY_PROJECT_ID>/hasura/graphql-engine:$VERSION\ndocker push gcr.io/<MY_PROJECT_ID>/hasura/graphql-engine:$VERSION\n```\n\n----------------------------------------\n\nTITLE: Adding Functions via Schema API\nDESCRIPTION: This snippet shows how to add an SQL function via an API call to Hasura's `run_sql` endpoint. It requires the database name and the SQL statement for function creation. The function will be added to the specified database and schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"<create function statement>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query Example\nDESCRIPTION: Example of converting a regular GraphQL query into a subscription for live updates\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/live-queries.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  order(where: {user_id: {_eq: $user_id}}, order_by: {created_at: desc}, limit: 1) {\n    id\n    status\n    delivery_agent {\n      location\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting BigQuery Remote Relationship\nDESCRIPTION: HTTP POST request to delete an existing remote relationship from a BigQuery table. Requires the source name, table details and relationship name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"bigquery_delete_remote_relationship\",\n    \"args\" : {\n       \"source\": \"name_of_the_source\",\n       \"table\": {\n          \"name\":\"users\",\n          \"dataset\":\"some_dataset_name\"\n       },\n       \"name\":\"name_of_the_remote_relationship\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Pagination with Aggregations\nDESCRIPTION: Demonstrates how to fetch paginated results along with aggregate data (total count) in a single query using variables and where conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery articles ($where: bigquery_articles_bool_exp!) {\n  bigquery_articles_aggregate(where: $where) {\n    aggregate {\n      totalCount: count\n    }\n  }\n  bigquery_articles (where: $where limit: 4) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data with GraphQL Mutation in Hasura\nDESCRIPTION: This mutation updates an existing review in the database by its primary key. It sets a new text value for the specified review ID and returns the updated review data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateReview($id: uuid!, $text: String!) {\n  update_reviews_by_pk(pk_columns: {id: $id}, _set: {text: $text}) {\n    id\n    text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Permission API Request Example\nDESCRIPTION: This snippet shows how to create a delete permission using the Hasura API. It details the required arguments, including the table name, role, and a filter within the 'permission' key to control which rows the role can delete. The API call uses an HTTP POST request with 'Content-Type' and 'X-Hasura-Role' headers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Pincode Using _contains Operator in GraphQL\nDESCRIPTION: This query fetches all authors living within a particular pincode stored in the 'address' JSONB column using the _contains operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/jsonb-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery get_authors_in_pincode ($jsonFilter: jsonb){\n  authors(\n    where: {\n      address: {_contains: $jsonFilter }\n    }\n  ) {\n    id\n    name\n    address\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logical Model Permissions via YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure select permissions for a logical model in Hasura. It specifies accessible columns and row-level filters in the metadata. Dependencies include a valid YAML configuration placed within `metadata > databases > databases.yaml`. Parameters include the model name, role, columns, and boolean filter expressions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        ...\n      select_permissions:\n        - role: \"<role name>\"\n          permission:\n            columns: \"*\" | [\n              \"column 1\",\n              \"column 2\",\n              ...\n            ]\n            filter: \"<boolean expression>\"\n        - ...\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: '<name>'\n    fields: ...\n    select_permissions:\n      - role: reader\n        permission:\n          columns:\n            - id\n            - title\n            - contents\n            - date\n          filter:\n            is_published:\n              _eq: true\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with run_sql API in Hasura\nDESCRIPTION: Example of using the run_sql API to create a new table with the check_metadata_consistency flag set to false. This bypasses metadata consistency checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"run_sql\",\n  \"args\": {\n    \"sql\": \"create table item ( id serial,  name text,  category text,  primary key (id))\",\n    \"check_metadata_consistency\": false\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"result_type\": \"CommandOk\",\n  \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values During Insert in MS SQL Server Using GraphQL Mutation\nDESCRIPTION: This mutation demonstrates how to handle default values during insertion. By omitting a field that has a default value configured, the system automatically uses the default value without requiring it in the input object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/insert.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_article_with_def_id {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Sample article content\",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"affected_rows\": 1,\n      \"returning\": [\n        {\n          \"id\": 21,\n          \"title\": \"Article 1\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Axios POST Request with Firebase Authentication\nDESCRIPTION: This JavaScript code demonstrates how to create an Axios instance for making authenticated POST requests to the Hasura GraphQL endpoint. It includes a function to retrieve the Firebase ID token and set it in the Authorization header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/firebase-cloud-functions/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport axiosBase from 'axios'\nimport * as firebase from 'firebase'\n\nconst getIdToken = async () => {\n  return new Promise((resolve, reject) => {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        resolve(firebase.auth().currentUser.getIdToken())\n      } else {\n        reject(Error('user logged out'))\n      }\n    })\n  })\n}\n\nexport const postAxios = async (queryString) => {\n  const idToken = await getIdToken()\n\n  const axios = axiosBase.create({\n    baseURL: 'https://YOURHASURADOMAIN/v1/graphql',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + idToken\n    },\n    responseType: 'json',\n    method: 'post'\n  })\n\n  return await axios({\n    data: {\n      query: queryString\n    }\n  }).catch(({response: r}) => console.log(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation Schema Extensions in GraphQL\nDESCRIPTION: Basic schema definition for Apollo Federation, including _Any scalar, _Entity union, and Query extension with _entities field that returns entities based on provided representations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n# a union of all types that use the @key directive\nscalar _Any\n\nunion _Entity\n\nextend type Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Stable Version of Hasura GraphQL Engine\nDESCRIPTION: This code snippet uses a custom React component to display the latest stable version of the Hasura GraphQL Engine Docker image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/updating-graphql-engine.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>\n  hasura/graphql-engine:\n  <LatestRelease />\n</code>\n```\n\n----------------------------------------\n\nTITLE: Creating Cron Trigger using Hasura Schema/Metadata API\nDESCRIPTION: HTTP POST request to create a new cron trigger with specified webhook, schedule, and payload. This endpoint supports setting up recurring scheduled triggers with cron expressions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_cron_trigger\",\n    \"args\" : {\n        \"name\": \"sample_cron\",\n        \"webhook\": \"https://httpbin.org/post\",\n        \"schedule\":  \"* * * * *\",\n        \"payload\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n        },\n        \"include_in_metadata\":false,\n        \"comment\":\"sample_cron comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to add a remote GraphQL server as a remote schema. Includes configuration for URL, headers, timeout, and schema customization options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schemas.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"add_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\",\n        \"definition\": {\n            \"url\": \"https://remote-server.com/graphql\",\n            \"headers\": [{\"name\": \"X-Server-Request-From\", \"value\": \"Hasura\"}],\n            \"forward_client_headers\": false,\n            \"timeout_seconds\": 60,\n            \"customization\": {\n               \"root_fields_namespace\": \"some_field_name\",\n               \"type_names\": {\n                   \"prefix\": \"some_type_name_prefix\",\n                   \"suffix\": \"some_type_name_suffix\",\n                   \"mapping\": {\n                       \"some_type_name\": \"some_new_type_name\"\n                   }\n               },\n               \"field_names\": [ {\n                   \"parent_type\": \"some_type_name\",\n                   \"prefix\": \"some_field_name_prefix\",\n                   \"suffix\": \"some_field_name_suffix\",\n                   \"mapping\": {\n                       \"some_field_name\": \"some_new_field_name\"\n                   }\n               } ]\n            }\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Function Metadata\nDESCRIPTION: This snippet provides an example of `public_search_author.yaml`, which defines the metadata for a specific database function. This metadata includes the function's name, schema, and any permissions associated with it.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfunction:\n  name: search_author\n  schema: public\npermissions:\n  - role: user\n\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Computed Field\nDESCRIPTION: Creates a computed field 'full_name' on an 'author' table using the SQL function 'author_full_name'. The request specifies table details, field name and function definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/computed-field.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"pg_add_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"schema\":\"public\"\n        },\n        \"source\": \"default\",\n        \"name\":\"full_name\",\n        \"definition\":{\n            \"function\":{\n                \"name\":\"author_full_name\",\n                \"schema\":\"public\"\n            },\n            \"table_argument\":\"author_row\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting an Object and Returning a Nested Object in MS SQL Server Using GraphQL Mutation\nDESCRIPTION: This mutation performs an insert for a new article and retrieves the inserted object along with its associated author information. The query structure allows for retrieving nested relationships in the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/insert.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_article {\n  insert_article(\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Sample article content\",\n        author_id: 3\n      }\n    ]\n  ) {\n    returning {\n      id\n      title\n      author {\n        id\n        name\n      }\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"affected_rows\": 1,\n      \"returning\": [\n        {\n          \"id\": 21,\n          \"title\": \"Article 1\",\n          \"author\": {\n            \"id\": 3,\n            \"name\": \"Sidney\"\n          }\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Ordering by N-ary Aggregate Function Results in GraphQL\nDESCRIPTION: GraphQL query showing how to order by the results of an n-ary aggregate function (_concat) that takes additional parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice(\n    # Order Invoices by Invoice Customer's Emails once they have been concated together with a comma, ascending\n    order_by: [\n      {\n        Customer: {\n          Emails_aggregate: {\n            _concat: { args: { separator: \",\" }, ordering: Asc }\n          }\n        }\n      }\n    ]\n  ) {\n    InvoiceId\n    Customer {\n      Emails_aggregate {\n        _concat(separator: \",\")\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Model via CLI in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a logical model by adding it to the appropriate database definition in the metadata/databases/databases.yaml file. It includes field definitions with types, nullability, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<Snowflake field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Dropping BigQuery Source via Metadata API\nDESCRIPTION: Removes a BigQuery database from Hasura using the `bigquery_drop_source` Metadata API action.  The example demonstrates how to remove a source named `bigquery1`. It requires admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_drop_source\",\n  \"args\": {\n    \"name\": \"bigquery1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription for Cart Items\nDESCRIPTION: GraphQL subscription query to stream cart items in chronological order using cursor-based pagination to handle out-of-order events.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/streaming/use-cases.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription getCartItems {\n  cart_items_stream(cursor: { initial_value: { created_at: \"2022-01-01\" }, ordering: ASC }) {\n    id\n    cart {\n      id\n      user {\n        first_name\n      }\n    }\n    product {\n      name\n    }\n    quantity\n    created_at\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Author Average Rating View SQL\nDESCRIPTION: SQL view to calculate average article rating grouped by author, demonstrating aggregation use case\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/views.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW author_average_rating AS\n  SELECT author_id, avg(rating)\n    FROM article\n    GROUP BY author_id\n```\n\n----------------------------------------\n\nTITLE: Adding Default Value Using Hasura API\nDESCRIPTION: Demonstrates how to set a default value for a field using the Hasura mssql_run_sql schema API. It alters the 'article' table to set the default for 'created_at' using the SQL function GETDATE(). Prerequisite: Configure access to Hasura's admin API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-defaults.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"ALTER TABLE article ADD CONSTRAINT DF_article DEFAULT GETDATE() FOR created_at;\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Relationship via CLI Configuration\nDESCRIPTION: YAML configuration for adding a manual relationship between authors table and author_average_rating in the metadata directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n- table:\n    schema: public\n    name: authors\n  object_relationships:\n    - name: avg_rating\n      using:\n        manual_configuration:\n          remote_table:\n            schema: public\n            name: author_average_rating\n          column_mapping:\n            id: author_id\n- table:\n    schema: public\n    name: author_average_rating\n```\n\n----------------------------------------\n\nTITLE: Configuring HASURA_GRAPHQL_SSO_PROVIDERS for Dex Integration\nDESCRIPTION: JSON configuration for the HASURA_GRAPHQL_SSO_PROVIDERS environment variable that specifies how Hasura connects to Dex. This includes client ID, auth endpoints, scopes, and JWT claims mapping for role-based access control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"dex-login\",\n    \"admin_roles\": [\"admin\", \"admins\"],\n    \"name\": \"Dex Login\",\n    \"authorization_url\": \"http://localhost:5556/dex/auth\",\n    \"request_token_url\": \"http://localhost:5556/dex/token\",\n    \"scope\": \"openid offline_access groups\",\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http://dex:5556/dex/keys\",\n      \"issuer\": \"http://localhost:5556:5556/dex\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": {\n          \"path\": \"$.groups\"\n        },\n        \"x-hasura-default-role\": {\n          \"path\": \"$.groups[0]\"\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Remote Relationship Predicate Template Format in Hasura\nDESCRIPTION: JSON template showing the required structure for remote relationship predicates in permission rules. This structure is used when defining permissions that involve remote tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"<rel name>\": {\n    \"<remote column name>\": {\n      \"<op>\": \"<some session variable name or some literal text>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing MS SQL Server Tables via Metadata API\nDESCRIPTION: Lists the tables available on a given MS SQL Server database using the `mssql_get_source_tables` Metadata API action. The example demonstrates how to retrieve tables from a source named `mssql1`. It requires the `source` argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mssql_get_source_tables\",\n  \"args\": {\n    \"source\": \"mssql1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names in Hasura Metadata with YAML\nDESCRIPTION: This YAML configuration specifies custom names for columns in a BigQuery table 'author'. It defines the mapping of the original column name 'addr' to a new name 'address'. This customization is applied using the Hasura CLI to update the metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/custom-field-names.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\\n    dataset: hasura\\n    name: author\\n  configuration:\\n    column_config:\\n      addr:\\n        custom_name: address\"\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Relationship via API\nDESCRIPTION: HTTP POST request to create an object relationship using the Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_object_relationship\",\n  \"args\": {\n    \"table\": \"authors\",\n    \"name\": \"avg_rating\",\n    \"source\": \"<db_name>\",\n    \"using\": {\n      \"manual_configuration\": {\n        \"remote_table\": \"author_average_rating\",\n        \"column_mapping\": {\n          \"id\": \"author_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering String Values with Equality Operator in GraphQL\nDESCRIPTION: Query to fetch authors by comparing a string name field using the _eq operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    where: {name: {_eq: \"Sidney\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and Postgres database using Docker Compose in detached mode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating a Users Table in SQL for Hasura\nDESCRIPTION: This SQL snippet creates a 'users' table with UUID primary key, necessary fields include id, name, and email. This is foundational for user identity management in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id uuid NOT NULL,\n  name text NOT NULL,\n  email text NOT NULL,\n  PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query Using Manual Relationship\nDESCRIPTION: GraphQL query demonstrating how to fetch authors with their average ratings using the created relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    avg_rating {\n      avg\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Article Subscription Query\nDESCRIPTION: GraphQL subscription for fetching article data, demonstrating role-based subscription behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/execution.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  articles {\n    id\n    author {\n      name\n    }\n    is_public\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Event Using Hasura Metadata API in HTTP\nDESCRIPTION: This HTTP request snippet demonstrates how to create a one-off scheduled event in Hasura by POSTing to the Metadata API. The request includes the webhook URL, the scheduled timing for the event, and a JSON payload containing the data to be sent. Headers, retry configurations, and comments can also be included as advanced options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-one-off-scheduled-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"create_scheduled_event\",\n   \"args\": {\n      \"webhook\": \"https://send-email.com\",\n      \"schedule_at\": \"2022-06-18T18:45:00Z\",\n      \"payload\": { \"email\": \"bob@ross.com\" }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Collection to Global Allowlist in Hasura\nDESCRIPTION: This snippet shows how to add a collection to the global allowlist using the Hasura Metadata API. When added to the global allowlist, all roles can access the queries in the collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_collection_to_allowlist\",\n    \"args\": {\n        \"collection\": \"my_collection\",\n        \"scope\": {\n            \"global\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors and Nested Articles in GraphQL Query\nDESCRIPTION: This example shows how to filter authors based on their articles' ratings and also filter the nested articles in the same query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Model via API\nDESCRIPTION: This HTTP request shows how to create a logical model through the Hasura metadata API. It includes the structure for defining fields with their names, types, nullability, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<Snowflake field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of integer values. Includes logic operators and various aggregate functions like average, sum, max, min, and count.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_54\n\nLANGUAGE: graphql\nCODE:\n```\ninput Int_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Int_aggregate_bool_exp!]\n  _or: [Int_aggregate_bool_exp!]\n  _not: Int_aggregate_bool_exp\n\n  # Aggregation functions\n  _avg: Float_bool_exp\n  _sum: Int_bool_exp\n  _max: Int_bool_exp\n  _min: Int_bool_exp\n  _count: Int_bool_exp\n  _count_distinct: Int_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Untrack Logical Model via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to untrack a logical model using Hasura's metadata API. It requires specifying the source and name of the logical model to be removed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Beginning a Transaction with User Information in Hasura\nDESCRIPTION: This SQL snippet demonstrates how to initiate a transaction in Hasura while setting local session variables related to the user role and various other session variables before executing a mutation. It uses the standard transaction control statements to ensure that the auditing captures all necessary context of changes made to the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/auditing-tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\nSET local \"hasura.user\" = '{\"x-hasura-role\": \"role\", ... various session variables}';\nSQL related to the mutation;\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Aggregate Fields Selection Type\nDESCRIPTION: Defines a GraphQL type for selecting aggregate fields on Invoice objects. Includes count functions and field-specific aggregations for both scalar and nested object fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_64\n\nLANGUAGE: graphql\nCODE:\n```\ntype Invoice_aggregate_fields {\n  # Configurable in OpenDD in GraphqlConfig.query.aggregate.countFieldName\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  InvoiceId: Int_aggregate_fields!\n  InvoiceDate: Date_aggregate_fields!\n  CustomerId: Int_aggregate_fields!\n  Total: Decimal_aggregate_fields!\n\n  # Nested object fields\n  BillingAddress: Address_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Input Validation via Metadata API\nDESCRIPTION: Illustrates how to define input validations using the Hasura Metadata API with an HTTP POST request. It specifies the `type` as `pg_create_(insert|update|delete)_permission`, the database source, table, role, and permission details, including the `validate_input` configuration with the webhook URL, headers, and timeout.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_create_(insert|update|delete)_permission\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": \\\"products\\\",\\n    \\\"role\\\": \\\"user\\\",\\n    \\\"permission\\\": {\\n      \\\"columns\\\": \\\"*\\\",\\n      \\\"filter\\\": {},\\n      \\\"validate_input\\\": {\\n        \\\"type\\\": \\\"http\\\",\\n        \\\"definition\\\": {\\n          \\\"forward_client_headers\\\": true,\\n          \\\"headers\\\": [],\\n          \\\"timeout\\\": 10,\\n          \\\"url\\\": \\\"http://www.somedomain.com/validateUser\\\"\\n        }\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship Using Column Foreign Key in Hasura\nDESCRIPTION: Creates an array relationship named 'articles' on the 'author' table using the foreign key constraint on the 'author_id' column of the 'article' table. This establishes a one-to-many relationship from authors to articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"articles\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\" : \"article\",\n                \"column\" : \"author_id\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel\nDESCRIPTION: Command to start an ngrok tunnel for exposing the local webhook endpoint to the internet, allowing Hasura Cloud to communicate with a local development server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Adding a GraphQL Operation to the Allow List\nDESCRIPTION: Example of a GraphQL query operation that can be added to the Allow List. This operation requires a unique name as an identifier and retrieves user information by primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/allow-list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: Int!) {\n  user_by_pk(id: $id) {\n    __typename\n    id\n    name\n    company\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Relationships via HTTP API\nDESCRIPTION: HTTP POST request to the Hasura metadata API for renaming a relationship, specifying the source database, table, current name, and new name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/rename.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_rename_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"articles\",\n    \"name\": \"article_details\",\n    \"new_name\": \"article_detail\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Message Schema in PostgreSQL\nDESCRIPTION: SQL schema definition for a chat application with messages and users tables. Includes foreign key relationships and timestamp tracking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/streaming/use-cases.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n   messages (\n     id serial primary key,\n     from_id uuid references users(id),\n     to_id uuid references users,\n     content text,\n     status text,\n     created_at timestamptz default now(),\n   )\n\n   users (\n     id uuid primary key,\n     first_name text,\n     last_name text,\n     created_at timestamptz default current_timestamp\n   )\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Top-Level GraphQL Queries\nDESCRIPTION: A GraphQL query that simultaneously fetches a limited list of authors and articles. The query demonstrates how to retrieve different unrelated types in the same request with each query having its own limit and field selection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/multiple-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(limit: 2) {\n    id\n    name\n  }\n  articles(limit: 2) {\n    id\n    title\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 1,\n        \"name\": \"Justin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\"\n      }\n    ],\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Postgres Database Source with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to use the pg_update_source API to update the configuration and customization of an existing Postgres database source in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_update_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n           \"from_env\": \"<DB_URL_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"max_connections\": 50,\n          \"idle_timeout\": 180,\n          \"retries\": 1,\n          \"pool_timeout\": 360,\n          \"connection_lifetime\": 600\n        },\n        \"use_prepared_statements\": true,\n        \"isolation_level\": \"read-committed\",\n      }\n    },\n    \"customization\": {\n      \"root_fields\": {\n        \"namespace\": \"some_field_name\",\n        \"prefix\": \"some_field_name_prefix\",\n        \"suffix\": \"some_field_name_suffix\"\n      },\n      \"type_names\": {\n        \"prefix\": \"some_type_name_prefix\",\n        \"suffix\": \"some_type_name_suffix\"\n      },\n      \"naming_convention\": \"hasura-default\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Level Access Control for Different User Roles in Hasura\nDESCRIPTION: YAML configuration showing how to restrict visibility of specific fields based on user roles. It demonstrates creating different access levels for 'public' and 'private' roles to the profile table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/sql-server.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# For 'public' scope, allow access only to the id and username fields\nrole: public\ntable: profile\npermission:\n  fields: [id, username]\n\n# For the 'private' scope, allow access to all fields, but only if the session user is the owner of that data\nrole: private\ntable: profile\npermission: \n  fields: [id, username, email]\n  rule: profile.id = session.user_id\n```\n\n----------------------------------------\n\nTITLE: Defining a Not-Null Constraint in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to define a not-null constraint on the `name` column of the `authors` table.  This ensures that the `name` column cannot contain `NULL` values, enforcing data integrity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/constraints.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE authors(\n  id SERIAL PRIMARY KEY,\n  name           TEXT    NOT NULL\n);\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors and Their Articles by Rating - GraphQL\nDESCRIPTION: Fetches a list of authors sorted by their names in ascending order, and includes their articles sorted by rating in descending order. The example demonstrates how to sort nested objects effectively using the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  authors (order_by: {name: asc}) {\n    id\n    name\n    articles(order_by: {rating: desc}) {\n      id\n      title\n      rating\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 5,\n        \"name\": \"Amii\",\n        \"articles\": [\n          {\n            \"rating\": 5,\n            \"id\": 17,\n            \"title\": \"montes nascetur ridiculus\"\n          },\n          {\n            \"rating\": 3,\n            \"id\": 12,\n            \"title\": \"volutpat quam pede\"\n          },\n          {\n            \"rating\": 2,\n            \"id\": 4,\n            \"title\": \"vestibulum ac est\"\n          }\n        ]\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Anjela\",\n        \"articles\": [\n          {\n            \"rating\": 4,\n            \"id\": 3,\n            \"title\": \"amet justo morbi\"\n          },\n          {\n            \"rating\": 1,\n            \"id\": 1,\n            \"title\": \"sit amet\"\n          }\n        ]\n      },\n      {\n        \"id\": 8,\n        \"name\": \"April\",\n        \"articles\": [\n          {\n            \"rating\": 4,\n            \"id\": 13,\n            \"title\": \"vulputate elementum\"\n          },\n          {\n            \"rating\": 2,\n            \"id\": 20,\n            \"title\": \"eu nibh\"\n          }\n        ]\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Tracking Snowflake SQL Function in GraphQL Schema\nDESCRIPTION: API request to track a custom SQL function 'search_articles' in the GraphQL schema with a return table of 'articles'. The request requires admin privileges and specifies the function configuration including response type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"snowflake_track_function\",\n    \"args\": {\n        \"function\": [\"search_articles\"],\n        \"source\": \"default\",\n        \"configuration\": {\n            \"response\": {\n                \"type\": \"table\",\n                \"table\": [\"articles\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation for Profile Update\nDESCRIPTION: Creates a GraphQL mutation type to update user profile with a picture URL, returning profile information after update\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateProfile(picture_url: String!): ProfileOutput\n}\n\ntype ProfileOutput {\n  id: String!\n  user_metadata: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Users Table Schema with SQL\nDESCRIPTION: Defines a simple 'users' table schema with 'id' and 'name' columns in SQL. 'id' is the primary key. No dependencies are needed other than a SQL-compatible database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nusers (\n  id INT PRIMARY KEY,\n  name TEXT\n)\n```\n\n----------------------------------------\n\nTITLE: Using Postgres Types as GraphQL Scalars\nDESCRIPTION: Illustrates how Postgres base types can be implicitly used as GraphQL scalars without separate declarations. The example shows a User type using 'uuid' and 'geography' as field types, which are assumed to be Postgres scalars.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: uuid!\n  name: String!\n  location: geography\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Data Insertion Migration Example\nDESCRIPTION: Example SQL insert statement for creating a migration to populate database with seed data for days of week\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO days_of_week (id, value) VALUES\n  (1, 'Monday'),\n  (2, 'Tuesday'),\n  (3, 'Wednesday'),\n  (4, 'Thursday'),\n  (5, 'Friday'),\n  (6, 'Saturday'),\n  (7, 'Sunday');\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Remote Relationship to Database\nDESCRIPTION: HTTP POST request to update an existing remote relationship between BigQuery tables. Modifies the relationship type and field mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"bigquery_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"name_of_the_target_source\",\n          \"table\": \"table_on_the_target_source\"\n          \"field_mapping\": {\n            \"user_id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Manual Configuration\nDESCRIPTION: Creates an object relationship named 'article_detail' on the article table using manual configuration for mapping columns between tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_detail\",\n        \"source\": \"default\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"article_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Comment API Request Example\nDESCRIPTION: This snippet demonstrates how to set or update a comment on a permission. If the comment is set to 'null', it will be removed. The request requires specifications for the table, role, permission type, and the comment itself. The API call uses a POST method, with headers for 'Authorization' and 'X-Hasura-Role'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer <auth-token> # optional if cookie is set\nX-Hasura-Role: admin\n\n{\n    \"type\": \"set_permission_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"role\": \"user\",\n        \"type\" : \"update\",\n        \"comment\" : \"can only modify their own rows\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger for Materialized View Refresh\nDESCRIPTION: This snippet creates a Postgres trigger that executes the refresh_materialized_view function after each INSERT operation on the authors table. It ensures the materialized view stays up-to-date when new authors are added.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/triggers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plsql\nCODE:\n```\nCREATE TRIGGER update_materialized_view AFTER INSERT ON \"authors\" FOR EACH ROW EXECUTE PROCEDURE refresh_materialized_view();\n```\n\n----------------------------------------\n\nTITLE: Dropping Delete Permission API Request Example\nDESCRIPTION: This example illustrates how to use the drop delete permission API to remove a delete permission for a specific role on a table. This HTTP POST request requires table and role parameters with the correct headers for authorization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Metadata Apply Command\nDESCRIPTION: Command to apply metadata changes to a Hasura instance after modifying the metadata files, such as adding a remote schema relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Native Queries\nDESCRIPTION: This GraphQL snippet demonstrates how to execute a native query by specifying the root field name and passing arguments. It explains handling SQL query structures and returning matching logical model data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  <root field name>(\n    [args: {\"<argument name>\": <argument value>, ...},]\n    [where: ...,]\n    [order_by: ..., distinct_on: ...,]\n    [limit: ..., offset: ...]\n  ) {\n    <field 1>\n    <field 2>\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with GraphQL Default Naming Convention\nDESCRIPTION: Example of how the graphql-default naming convention transforms table and column names from snake_case to camelCase in GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  myTable(orderBy: {dateOfBirth: asc}, limit: 10) {\n    id\n    dateOfBirth\n    lastSeen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Webhook for Abandoned Cart Reminders in Python\nDESCRIPTION: A Python webhook implementation using Flask and SMTP to send email reminders for abandoned shopping carts. Connects to a Hasura GraphQL endpoint to retrieve cart data and sends personalized emails to users.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport smtplib\nimport requests\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom datetime import datetime, timedelta\n\napp = Flask(__name__)\n\ndef send_email(user_email, user_name):\n    smtp_server = 'smtp.ethereal.email'\n    smtp_port = 587\n    smtp_user = '<YOUR_SMTP_USERNAME>'\n    smtp_pass = '<YOUR_SMTP_PASSWORD>'\n\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        try:\n            server.starttls()\n            server.login(smtp_user, smtp_pass)\n        except Exception as e:\n            print(f\"An error occurred while creating the SMTP server: {e}\")\n    \n        # Email composition and sending logic\n\n@app.route('/abandoned-cart', methods=['POST'])\ndef abandoned_cart():\n    auth_header = request.headers.get('secret-authorization-string')\n    if auth_header != 'super_secret_string_123':\n        return jsonify({'message': 'Unauthorized'}), 401\n\n    carts = get_abandoned_carts()\n    for cart in carts:\n        user_email = cart['user']['email']\n        user_name = cart['user']['name']\n        send_email(user_email, user_name)\n\n    return jsonify({'message': 'Abandoned cart reminders sent!'})\n\nif __name__ == '__main__':\n    app.run(port=4000)\n```\n\n----------------------------------------\n\nTITLE: Adding created_at Timestamp in PostgreSQL using CLI\nDESCRIPTION: This snippet demonstrates how to use SQL commands to add a created_at timestamp column to the article table in PostgreSQL. It includes migration commands for both adding and rolling back the created_at column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/created-updated-timestamps.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plsql\nCODE:\n```\nALTER TABLE ONLY \"public\".\"article\" ADD COLUMN \"created_at\" TIMESTAMP DEFAULT NOW();\n```\n\nLANGUAGE: plsql\nCODE:\n```\nALTER TABLE article DROP COLUMN created_at;\n```\n\n----------------------------------------\n\nTITLE: Vehicle Location Tracking Schema\nDESCRIPTION: SQL schema definition for vehicle location tracking system with tables for vehicles and their location history.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/use-cases.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nvehicle (\n  id INT PRIMARY KEY,\n  vehicle_number TEXT\n)\n\nvehicle_location (\n  id INT PRIMARY KEY,\n  location TEXT,\n  time_stamp TIMESTAMP with time zone DEFAULT now(),\n  /* used to create relationship 'locations' for vehicle */\n  vehicle_id INT FOREIGN KEY REFERENCES vehicle(id)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Logical Model Permissions\nDESCRIPTION: API endpoint for adding select permissions to an existing Logical Model in PostgreSQL, including column and filter configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": \"<boolean expression>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Example\nDESCRIPTION: Example of a GraphQL query to fetch order status and delivery agent location for a food delivery app\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/live-queries.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  order(where: {user_id: {_eq: $user_id}}, order_by: {created_at: desc}, limit: 1) {\n    id\n    status\n    delivery_agent {\n      location\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Event Trigger with HTTP POST in Hasura Schema/Metadata API\nDESCRIPTION: This snippet shows how to delete an existing event trigger named 'sample_trigger' using the Hasura Schema/Metadata API. The operation requires administrative privileges indicated by the X-Hasura-Role header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/event-triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"delete_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Restricted Permissions for Reader Role via API\nDESCRIPTION: This HTTP request demonstrates how to create select permissions for an 'article' logical model, allowing 'reader' role access to only published articles by filtering on 'is_published' field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"role\": \"reader\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"title\",\n        \"contents\",\n        \"date\"\n      ],\n      \"filter\": {\n        \"is_published\": {\"_eq\": true}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on decimal aggregate functions like average, sum, max, min, and count.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\ninput Decimal_aggregate_order_by @oneOf {\n  _avg: order_by\n  _sum: order_by\n  _max: order_by\n  _min: order_by\n  _count: order_by\n  _count_distinct: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NodeJS Connections to PostgreSQL and Weaviate\nDESCRIPTION: Sets up connections to PostgreSQL database and Weaviate vector database using environment variables. Requires PostgreSQL URL, Weaviate URL, Weaviate API key, and OpenAI API key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from 'pg';\nconst { Pool } = pkg;\nimport weaviate, { ApiKey } from 'weaviate-ts-client';\n\n// We'll pass the table name as an argument to our script\nconst table = process.argv[2];\n\n// Create a connection to your PostgreSQL database\nconst db = new Pool({\n  connectionString: '<YOUR_POSTGRES_URL>',\n});\n\n// Create a connection to Weaviate\nconst client = weaviate.client({\n  scheme: 'https',\n  host: '<YOUR_WEAVIATE_URL_WITHOUT_HTTP_OR_HTTPS>',\n  apiKey: new ApiKey('<YOUR_WEAVIATE_API_KEY>'),\n  headers: { 'X-OpenAI-Api-Key': '<YOUR_OPENAI_API_KEY>' },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Postgres User\nDESCRIPTION: Set a password for the default 'postgres' user in the Cloud SQL instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql users set-password postgres --instance hasura-postgres \\\n       --password [PASSWORD] --project hasura\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to RESTified GraphQL Endpoint in HTTP\nDESCRIPTION: Shows a POST request to a RESTified GraphQL endpoint with a path parameter, query parameter, and JSON body. This example demonstrates how different types of data can be passed to the endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/restified.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/rest/complicated_mutation/2?time=now HTTP/1.1\nContent-Type: application/json\n\n{\n     \"user\": {\"name\": \"Simon\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Address Fields Using _has_keys_all Operator in GraphQL\nDESCRIPTION: This query fetches a user by id and checks if their address has all the fields 'street', 'city', 'state', 'zip' using the _has_keys_all operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/jsonb-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user(id: \"123\") {\n    name\n    address {\n      street\n      city\n      state\n      zip\n      phone\n    }\n    hasAllAddressFields: address _has_keys_all(keys: [\"street\", \"city\", \"state\", \"zip\"])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Track Article Logical Model via API\nDESCRIPTION: This HTTP request creates an 'article' logical model using the Hasura metadata API. It includes fields like 'id', 'title', 'contents', 'published_date', and 'is_published', specifying data types (using the scalar property) and nullability for each.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\":\n          {\n            \"scalar\": \"integer\"\n          }\n      },\n      {\n        \"name\": \"title\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"contents\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"published_date\",\n        \"type\":\n          {\n            \"scalar\": \"date\",\n            \"nullable\": true\n          },\n      },\n      {\n        \"name\": \"is_published\",\n        \"type\":\n          {\n            \"scalar\": \"boolean\"\n          }\n      }\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating User Action via Hasura API with x-www-form-urlencoded Request Transformation\nDESCRIPTION: This HTTP POST request to the Hasura metadata API defines the 'create_user' action using the x-www-form-urlencoded format for requests. It details the parameters and transformation template for body data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n    \"name\":\"create_user\",\n    \"definition\":{\n      \"kind\":\"synchronous\",\n      \"arguments\":[\n        {\n          \"name\":\"username\",\n          \"type\":\"String!\"\n        },\n        {\n          \"name\":\"email\",\n          \"type\":\"String!\"\n        }\n      ],\n      \"output_type\":\"User\",\n      \"handler\":\"{{ACTION_BASE_URL}}\",\n      \"timeout\":60,\n      \"request_transform\": {\n        \"template_engine\": \"Kriti\",\n        \"version\": 2,\n        \"method\": \"POST\",\n        \"url\": \"{{$base_url}}/create_user\",\n        \"query_params\": {\n          \"id\": \"{{$session_variables['x-hasura-user-id']}}\"\n        },\n        \"body\": {\n          \"action\": \"x_www_form_urlencoded\",\n          \"form_template\": {\n            \"username\": \"{{$body.input.username}}\"\n          }\n        },\n        \"request_headers\": {\n          \"remove_headers\": [\"content-type\"],\n          \"add_headers\": {\n            \"content-type\": \"application/x-www-form-urlencoded\"\n          }\n        }\n      }\n    },\n    \"comment\": \"Custom action to create user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Object Type for Articles\nDESCRIPTION: GraphQL object type definition for the `Articles` table, automatically generated by Hasura. This type mirrors the structure of the `articles` table, with fields for `id`, `title`, `body`, `author_id`, `is_published`, `published_on`, and `rating`.  It defines the data structure that can be queried via the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# Object type\ntype Articles {\n  id: Int\n  title: String\n  body: String\n  author_id: Int\n  is_published: Boolean\n  published_on: Datetime\n  rating: Int\n}\n\n```\n\n----------------------------------------\n\nTITLE: Where Argument for Query Filtering\nDESCRIPTION: Demonstrates how to structure a 'where' argument in a mutation or query to filter objects based on specific criteria.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nwhere: {\n  rating: {_eq: 5}\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Query Collection in Hasura\nDESCRIPTION: This snippet shows how to rename an existing query collection using the Hasura Metadata API. It requires specifying the current name and the new name for the collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"rename_query_collection\",\n    \"args\": {\n         \"name\": \"my_collection\",\n         \"new_name\": \"my_new_collection\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values with OR Condition in GraphQL\nDESCRIPTION: Query demonstrating how to handle null values by combining _eq and _is_null operators with _or.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles (\n    where: {\n      _or: [\n        {is_published: {_eq: false}},\n        {is_published: {_is_null: true}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricted Remote Schema for User Role\nDESCRIPTION: Example of a restricted Remote Schema for the 'user' role, with limited field access and argument presets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  user_id: Int\n  name: String\n  userMessages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n}\n\ninterface Communication {\n  id: Int!\n  msg: String!\n}\n\ntype Message implements Communication {\n  id: Int!\n  name: String!\n  msg: String!\n  errorMsg: String\n}\n\ninput MessageWhereInpObj {\n  name: StringCompareObj\n}\n\ninput IntCompareObj {\n  eq: Int\n  gt: Int\n  lt: Int\n}\n\ninput StringCompareObj {\n  eq: String\n}\n\ninput IncludeInpObj {\n  id: [Int]\n  name: [String]\n}\n\ntype Query {\n  hello: String\n  messages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n  user(user_id: Int! @preset(value: \"x-hasura-user-id\")): User\n}\n\nschema {\n  query: Query\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Users from MongoDB via GraphQL\nDESCRIPTION: GraphQL query to fetch all users and their associated metadata from MongoDB database. Returns user ID, age, email, name and user metadata including email verification status and role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery allUsers {\n  users {\n    _id\n    age\n    email\n    name\n    user_meta {\n      email_verified\n      user_role\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dev Mode in Hasura GraphQL Engine\nDESCRIPTION: Shows how to disable the development mode in production deployments to avoid leaking internal debugging information. This can be achieved through environment variables or by omitting a specific flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# set the env var to false or do not set it at all to disable dev mode\nHASURA_GRAPHQL_DEV_MODE=false\n\n# when using flags, no --dev-mode flag implies dev mode is disabled\ngraphql-engine --database-url=<database-url> serve\n```\n\n----------------------------------------\n\nTITLE: CLI Configuration for Logical Model\nDESCRIPTION: YAML configuration for defining a logical model with article excerpt fields in Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article_excerpt\n    fields:\n      id:\n        type: integer\n      title:\n        type: text\n      date:\n        type: date\n      excerpt:\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Fetching Limited Results with Aggregated Data in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch a limited list of articles along with their total count in the same query, using both aggregate and regular queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/pagination.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery articles ($where: articles_bool_exp!) {\n  articles_aggregate(where: $where) {\n    aggregate {\n      totalCount: count\n    }\n  }\n  articles (where: $where limit: 4) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hasura Cloud Tenant Environment Variables using GraphQL\nDESCRIPTION: This query fetches the environment variables and their hash for a specific Hasura Cloud tenant.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getTenantENV {\n  getTenantEnv(tenantId: \"7a79cf94-0e53-4520-a560-1b02bf522f08\") {\n    hash\n    envVars\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping by aggregated values from array relationships in GraphQL\nDESCRIPTION: This query demonstrates how to group by aggregated values from array relationships, specifically grouping invoices by the total quantity of items purchased (sum of quantities across all invoice lines) and counting invoices per quantity group.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    grouping_keys: [\n      { InvoiceLines_aggregate: { Quantity: { _unary_fn: _sum } } }\n    ] # Group by the sum of the invoice's lines' quantity field...\n    order_by: [\n      { group_key: { InvoiceLines_aggregate: { Quantity: { _sum: Asc } } } }\n    ] # ... and order the groups by it\n  ) {\n    group_key {\n      InvoiceLines_aggregate {\n        # Array relationship navigation\n        Quantity {\n          _sum\n        } # The number of items purchased in the invoice (sum of quantities of all lines per invoice)\n      }\n    }\n    group_aggregate {\n      _count # Number of invoices that have a certain quantity of items purchased\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Collections in YAML\nDESCRIPTION: This snippet illustrates how to track a MongoDB collection with its associated Logical Model in a YAML metadata file under a Hasura project configuration. The logic is included within `tables.yaml` indicating which model to associate with each collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  - <collection_name>\nlogical_model: <logical_model_name>\n```\n\n----------------------------------------\n\nTITLE: Untracking Multiple Tables in Hasura GraphQL (HTTP)\nDESCRIPTION: This snippet facilitates the untracking of multiple tables (`author` and `book`) with a single API call, utilizing the 'mssql_untrack_tables' functionality for efficiency.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_untrack_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"table\": {\n          \"schema\": \"dbo\",\n          \"name\": \"author\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      },\n      {\n        \"table\": {\n          \"schema\": \"dbo\",\n          \"name\": \"book\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Subscription with Alias\nDESCRIPTION: GraphQL subscription showing column aliasing, which affects multiplexing behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/execution.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetUsersWithAlias {\n  users {\n     id\n     name: user_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Nested Objects with Multiple Criteria\nDESCRIPTION: Query that fetches authors sorted by name and their articles sorted by rating.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors (order_by: {name: asc}) {\n    id\n    name\n    articles(order_by: {rating: desc}) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Based on Role and Tenant ID in Kriti\nDESCRIPTION: This snippet shows a more complex routing logic based on the user's role and tenant ID. It routes to a specific database for 'dev' roles, attempts to match a connection based on tenant ID, or falls back to default behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_1\n\nLANGUAGE: kriti\nCODE:\n```\n{{ if $.request.session?[\"x-hasura-role\"] == \"dev\" }}\n  {{ $.​connection_set.dev_db }}\n{{ else }}\n  {​{ if ​$.connection_set?[$.request.session.x-hasura-tenant-id] != null }}\n    {{ ​$.connection_set[$.request.session.x-hasura-tenant-id] }}\n  {{ else }}\n    {{ $.default }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Artists with URL Parameters and JSON Query\nDESCRIPTION: URL query parameters for filtering artists where name matches either 'Aerosmith' or 'Queen', limiting results to 10 records. Uses field selection, JSON filter conditions with $or operator, and pagination limit parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/filtering/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Artist]=Name&filter={\"$or\":[{\"Name\":{\"$eq\": \"Aerosmith\"}},{\"Name\":{\"$eq\": \"Queen\"}}]}&page[limit]=10\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Console - Bash\nDESCRIPTION: This command opens the Hasura Console using the CLI, allowing users to interact with their data sources directly from the command line environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura console\n```\n\n----------------------------------------\n\nTITLE: Resuming Event Trigger Cleanups for Specific Sources via Hasura API\nDESCRIPTION: This JSON payload demonstrates how to resume event trigger cleanups for specific sources using the Hasura Metadata API. It activates cleaners on all triggers defined on the specified sources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/auto-cleanup.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\" : \"resume_event_trigger_cleanups\",\n  \"args\": {\n    \"event_triggers\": {\n      \"sources\": [\"source_1\", \"source_2\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Processed Events and HTTP Logs in SQL\nDESCRIPTION: Combined SQL queries to remove both HTTP logs and processed events, maintaining only unprocessed events in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.event_invocation_logs;\n\nDELETE FROM hdb_catalog.event_log\nWHERE delivered = true OR error = true;\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata via CLI\nDESCRIPTION: This bash command applies the updated metadata to Hasura, which includes the definition of the new Remote Schema relationships as specified in the YAML file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Validation Response in Hasura\nDESCRIPTION: Demonstrates the HTTP response format for failed validation of mutations. Returns a 400 BAD REQUEST status code with an optional error message in JSON format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\n400 BAD REQUEST\n\n{\n    \"message\": \"Phone number invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Secret in docker-compose.yml for Hasura\nDESCRIPTION: This YAML snippet shows how to add a JWT secret as an environment variable in a Docker Compose file, necessary for enabling JWT-based authentication in self-hosted Hasura instances.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_JWT_SECRET: '{ \"type\": \"HS256\", \"key\": \"oursupersecretsupersecurekey1234567890\" }'\n```\n\n----------------------------------------\n\nTITLE: Creating select permission for author role via Metadata API (HTTP)\nDESCRIPTION: This HTTP request creates a select permission rule using the Hasura Metadata API for the `author` role. The filter ensures that only articles where `author_id` matches the `X-Hasura-User-Id` are returned. This enables author-specific data access control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": {\n      \"name\": \"articles\",\n      \"dataset\": \"bigquery\"\n    },\n    \"role\": \"author\",\n    \"permission\": {\n      \"filter\": {\n        \"author_id\": {\n          \"_eq\": \\\"X-Hasura-User-Id\\\"\n        }\n      }\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Deleting MSSQL Remote Relationship\nDESCRIPTION: HTTP POST request to delete an existing remote relationship from an MSSQL table. Requires the source name, table details and relationship name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_delete_remote_relationship\",\n    \"args\" : {\n       \"source\": \"name_of_the_source\",\n       \"table\": {\n          \"name\":\"users\",\n          \"schema\":\"public\"\n       },\n       \"name\":\"name_of_the_remote_relationship\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Path for Hasura Migrations and Metadata\nDESCRIPTION: This snippet provides an example of setting custom paths for migrations and metadata directories in the Hasura cli-migrations Docker container by using environment variables. It demonstrates how to override default mount points to specify alternative locations for these directories.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/auto-apply-migrations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_GRAPHQL_MIGRATIONS_DIR=/custom-path-for-migrations\nHASURA_GRAPHQL_METADATA_DIR=/custom-path-for-metadata\n```\n\n----------------------------------------\n\nTITLE: MariaDB JDBC Connection URL Format\nDESCRIPTION: Example JDBC connection URL format for connecting to a MariaDB database in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mariadb://<hostname>:<port>/<database name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database with Dynamic Secrets in YAML\nDESCRIPTION: YAML configuration for adding a Postgres database with dynamic secrets in the metadata/databases/databases.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/dynamic-secrets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: pgDatabase\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        dynamic_from_file: /secrets/dbCredentials\n      isolation_level: read-committed\n      use_prepared_statements: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for SAML Integration (YAML)\nDESCRIPTION: YAML configuration for Dex, a middleware service for SAML integration. It includes settings for the issuer, storage, web endpoints, static clients, and SAML connectors with attribute mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: http(s)://<dex-url>\n\nstorage:\n  type: memory\n\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n\nstaticClients:\n  - id: hasura-app\n    redirectURIs:\n      - 'http(s)://<hasura-url>/console/oauth2/callback'\n    name: 'Hasura App'\n    public: true\n\nconnectors:\n  - type: saml\n    id: saml\n    name: SAML\n    config:\n      ssoURL: <SAML sign-on endpoint>\n      ca: /path/to/saml-ca.pem\n      redirectURI: http(s)://<dex-url>/callback\n      usernameAttr: name\n      emailAttr: email\n      groupsAttr: groups\n      entityIssuer: http(s)://<dex-url>/callback\n```\n\n----------------------------------------\n\nTITLE: Defining Date Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter date values. Includes logic operators and comparison operators specific to date values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_43\n\nLANGUAGE: graphql\nCODE:\n```\ninput Date_bool_exp {\n  # Logic operators\n  _and: [Date_bool_exp!]\n  _or: [Date_bool_exp!]\n  _not: Date_bool_exp\n\n  # Comparisons\n  _eq: Date\n  _gt: Date\n  _gte: Date\n  _in: [Date!]\n  _is_null: Boolean\n  _lt: Date\n  _lte: Date\n  _neq: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video within a React component using JSX. The `iframe` is used to load and display a YouTube video with appropriate settings to allow full-screen mode and responsiveness.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<iframe\n  src=\"https://www.youtube.com/embed/ZdrJMntMN2E\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Collections in YAML for CLI\nDESCRIPTION: YAML configuration for adding GraphQL queries to a collection via the CLI. This defines named queries that can be added to the Allow List through metadata management.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/allow-list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: allowed-queries\n  definition:\n    queries:\n      - name: bv\n        query: |-\n          query MyQuery {\n            test {\n              age\n              id\n            }\n          }\n      - name: operation_name\n        query: |-\n          query MyQuery {\n            test {\n              age\n              id\n            }\n          }\n```\n\n----------------------------------------\n\nTITLE: Querying All Users using GraphQL Without Permissions\nDESCRIPTION: Executes a GraphQL query to retrieve all users. By default, this query runs with admin permissions, displaying all rows. It requires access to Hasura's GraphQL API endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUsers {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of decimal values. Includes logic operators and various aggregate functions like average, sum, max, min, and count.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_55\n\nLANGUAGE: graphql\nCODE:\n```\ninput Decimal_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Decimal_aggregate_bool_exp!]\n  _or: [Decimal_aggregate_bool_exp!]\n  _not: Decimal_aggregate_bool_exp\n\n  # Aggregation functions\n  _avg: Decimal_bool_exp\n  _sum: Decimal_bool_exp\n  _max: Decimal_bool_exp\n  _min: Decimal_bool_exp\n  _count: Int_bool_exp\n  _count_distinct: Int_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming BigQuery Relationship via Metadata API\nDESCRIPTION: HTTP POST request to rename a BigQuery relationship using Hasura metadata API with specific parameters for source, dataset, table, and relationship names\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/table-relationships/rename.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_rename_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"dataset\": \"bigquery\",\n    \"table\": \"articles\",\n    \"name\": \"article_details\",\n    \"new_name\": \"article_detail\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring select permissions for the editor role using YAML\nDESCRIPTION: This YAML snippet configures select permissions for the `editor` role on the `articles` table. The permission filter ensures that the `editor` role can only select articles where the `title` is an empty string. This demonstrates how to implement data validation using Hasura permissions based on row-level permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"table:\n  dataset: bigquery\n  name: articles\nselect_permissions:\n  - role: editor\n    permission:\n      columns: '*'\n      filter:\n        title:\n          _eq: ''\"\n```\n\n----------------------------------------\n\nTITLE: Constructing ODBC Connection String for SQL Server\nDESCRIPTION: The format for connecting to a SQL Server database using ODBC Driver 17. This connection string includes server address, database name, username, and password parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/gcp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDriver={ODBC Driver 17 for SQL Server};Server=<server>;Database=<db-name>;UID=<username>;PWD=<password>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query using graphql-default naming convention\nDESCRIPTION: This GraphQL query demonstrates the `graphql-default` naming convention. It fetches an aggregate of users from the `appDbAppUsersAggregate` table, filtering by `favoriteDay` and using `referredBy` for distinct counts. The response shows the structure of the data returned, including the count and standard deviation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/naming-convention.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"query get_user_aggregate {\\n  appDbAppUsersAggregate(\\n    distinctOn: referredBy,\\n    where: {favoriteDay: {_eq: SUNDAY}}\\n  ) {\\n    aggregate {\\n      count\\n      stddevPop {\\n        userId\\n      }\\n    }\\n  }\\n}\\n\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\n\"{{\\n  \\\"data\\\": {\\n    \\\"appDbAppUsersAggregate\\\": {\\n      \\\"aggregate\\\": {\\n        \\\"count\\\": 0,\\n        \\\"stddevPop\\\": {\\n          \\\"userId\\\": null\\n        }\\n      }\\n    }\\n  }\\n}}\\n\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL to Hasura Type Mapping Table in Markdown\nDESCRIPTION: Markdown table providing a comprehensive mapping between PostgreSQL data types and their Hasura GraphQL Engine equivalents. Includes type aliases, descriptions, and links to detailed type documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                    | Aliases            | Description                                                 | Hasura Type                                                                                                                   |\n| --------------------------------------- | ------------------ | ----------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| bigint                                  | int8               | signed eight-byte integer                                   | [Numeric](#numeric) or [String](#string) ([flag](/deployment/graphql-engine-flags/reference.mdx#stringify-numeric-types))     |\n| bigserial                               | serial8            | autoincrementing eight-byte integer                         | [Numeric](#numeric) or [String](#string) ([flag](/deployment/graphql-engine-flags/reference.mdx#stringify-numeric-types))     |\n| bit [ (n) ]                             |                    | fixed-length bit string                                     | [Implicit](#implicit)                                                                                                         |\n| bit varying [ (n) ]                     | varbit [ (n) ]     | variable-length bit string                                  | [Implicit](#implicit)                                                                                                         |\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Author View excluding Sensitive Fields\nDESCRIPTION: This SQL snippet demonstrates how to create a view for the author table that excludes sensitive fields like email, phone, and address. This allows for controlled data exposure while safeguarding sensitive information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/views.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW my_data.author_public AS (\n  SELECT id, name, city\n    FROM author\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex SAML Connector for ADFS SSO\nDESCRIPTION: YAML configuration for Dex SAML connector, specifying ADFS-specific settings such as SSO URL, certificate path, and attribute mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/adfs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconnectors:\n  - type: saml\n    id: saml-auth0\n    name: Auth0 SAML\n    config:\n      ssoURL: https://sts.example.local/adfs/ls/\n      ca: /etc/dex/saml-ca.pem\n      # insecureSkipSignatureValidation: true\n      redirectURI: http://localhost:5556/dex/callback\n      usernameAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n      emailAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n      groupsAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\n      entityIssuer: https://sts.example.local/adfs/ls/\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Example\nDESCRIPTION: Illustrates sample GraphQL mutations, `insert_users` and `update_users`, which will be used as a basis to implement input validations.  These mutations insert and update data in the `users` table, respectively.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"mutation insert_users {\\n  insert_users(objects: [{ name: \\\"John\\\", phone: \\\"999\\\" }]) {\\n    affected_rows\\n  }\\n}\\n\\nmutation update_users {\\n  update_users(where: { id: { _eq: 1 } }, _set: { name: \\\"John\\\", email: \\\"random email\\\" }) {\\n    affected_rows\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Events in Hasura GraphQL Engine - Cron Example\nDESCRIPTION: API endpoint for fetching cron scheduled events with filtering by trigger name and status. Supports pagination with limit and offset parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"get_scheduled_events\",\n    \"args\" : {\n      \"type\": \"cron\",\n      \"trigger_name\": \"daily_trigger\",\n      \"limit\": 10,\n      \"offset\": 0,\n      \"status\": [\n        \"scheduled\",\n        \"delivered\"\n      ],\n      \"get_rows_count\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Relationship in Metadata YAML\nDESCRIPTION: YAML configuration for adding an array relationship named 'articles' to the authors table in Hasura metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n  array_relationships:\n    - name: articles\n      using:\n        foreign_key_constraint_on:\n          column: author_id\n          table:\n            schema: public\n            name: articles\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Query using YAML (CLI)\nDESCRIPTION: YAML configuration for defining a native query through Hasura CLI in the databases.yaml file. Includes root field name, arguments, relationships, description, SQL code, and the logical model it returns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  native_queries:\n    - root_field_name: \"<root field name>\"\n      arguments:\n        \"<argument name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n          array_relationships:\n            - name: \"<relationship name>\"\n              using:\n                column_mapping:\n                  \"<local column>\": \"<remote column>\"\n                remote_native_query: <remote native query name>\"\n          object_relationships: <same as array_relationships>\n          description: \"<text>\"\n          code: \"<SQL query>\"\n          returns: \"<logical model name>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Types with Hasura Metadata API\nDESCRIPTION: This HTTP POST request demonstrates how to use the 'set_custom_types' endpoint to define custom GraphQL types. It includes examples of input objects and objects with relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [\n      {\n        \"name\": \"User\",\n        \"fields\": [\n          {\n            \"name\": \"username\",\n            \"type\": \"String!\"\n          },\n          {\n            \"name\": \"password\",\n            \"type\": \"String!\"\n          }\n        ]\n      }\n    ],\n    \"objects\": [\n      {\n        \"name\": \"UserId\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\": \"Int!\"\n          }\n        ],\n        \"relationships\": [\n          {\n            \"name\": \"posts\",\n            \"type\": \"array\",\n            \"remote_table\": \"post\",\n            \"field_mapping\": {\n              \"id\": \"user_id\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Restaurants with High Ratings using AggregationExp in GraphQL\nDESCRIPTION: This example demonstrates how to use AggregationExp to query restaurants with an average review rating greater than 5.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nquery RestaurantsWithHighRatings {\n  restaurant(where: { reviews_aggregate: { average: { arguments: \"rating\", predicate: { _gt: 5 } } } }) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relationship with Aggregation Support in OpenDD\nDESCRIPTION: YAML configuration for defining relationships with aggregation capabilities in Hasura. This configuration shows how to set up array relationships that support aggregation and grouping operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: Invoices\n  source: Customer\n  target:\n    model:\n      name: Invoice\n      relationshipType: Array\n      # New - only applies to `relationshipType: Array`\n      # TODO: This sucks living in here, but relationshipType is not a top level discriminator\n      # and these fields only apply to models and that's where the type variant is applied\n      aggregate:\n        aggregateExpression: Invoice_aggregate_exp\n        description: Aggregate over the customer's invoices\n      groups:\n        groupsExpression: Invoice_groups_exp\n        description: Group over the customer's invoices\n\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: CustomerId\n      target:\n        modelField:\n          - fieldName: CustomerId\n  # New!\n  graphql:\n    aggregateFieldName: Invoices_aggregate\n    groupsFieldName: Invoices_groups\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint with Hasura Metadata API\nDESCRIPTION: This HTTP POST request utilizes the Hasura Metadata API to add a foreign key constraint to the 'articles' table, enabling programmatic schema modifications through API calls.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db-name>\",\n    \"sql\": \"ALTER TABLE articles ADD FOREIGN KEY (author_id) REFERENCES authors(id);\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema Permissions using Metadata API (HTTP)\nDESCRIPTION: This HTTP request demonstrates how to add remote schema permissions using the Hasura Metadata API. It defines the remote schema name, role, and the schema definition that the role is allowed to access.  The X-Hasura-Role header needs to be set to admin.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \\\"type\\\": \\\"add_remote_schema_permissions\\\",\n  \\\"args\\\": {\n    \\\"remote_schema\\\" : \\\"countries\\\",\n    \\\"role\\\" : \\\"user\\\",\n    \\\"definition\\\" : {\n        \\\"schema\\\" : \\\"schema { query: Query } type Continent { countries: [Country!]! name : String!} type Country { name: String! capital: String } type Query { continent(code: ID!): Continent}\\\"\n    },\n    \\\"comment\\\": \\\"remote schema permissions for role: user\\\"\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only Routing for SQL Server AG Replicas\nDESCRIPTION: SQL commands to configure read-only routing for secondary replicas in an Availability Group. Sets up routing URLs and routing lists for three SQL Server nodes, enabling read-only connections to secondary replicas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode1' WITH\n   (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode1' WITH\n   (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.21:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH\n   (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH\n   (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.22:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (SECONDARY_ROLE (ALLOW_CONNECTIONS = READ_ONLY));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (SECONDARY_ROLE (READ_ONLY_ROUTING_URL = N'tcp://172.16.238.23:1433'));\n\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode1' WITH\n   (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode3','sqlNode2'),'sqlnode1')));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode2' WITH\n   (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode1','sqlNode3'),'sqlnode2')));\n\nALTER AVAILABILITY GROUP [AG1]\nMODIFY REPLICA ON\nN'sqlNode3' WITH\n      (PRIMARY_ROLE (READ_ONLY_ROUTING_LIST=(('sqlNode1','sqlNode2'),'sqlnode3')));\n\nGO\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose setup for GraphQL Engine with PostgreSQL\nDESCRIPTION: A basic Docker Compose configuration that sets up Hasura GraphQL Engine with a PostgreSQL database. It defines two services: PostgreSQL and GraphQL Engine, with proper network configuration and environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/commit_diff.txt#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n    - db_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n  graphql-engine:\n    image: hasura/graphql-engine:v2.0.10\n    ports:\n    - \"8080:8080\"\n    depends_on:\n    - \"postgres\"\n    restart: always\n    environment:\n      ## postgres database to store Hasura metadata\n      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      ## enable the console served by server\n      HASURA_GRAPHQL_ENABLE_CONSOLE: \"true\" # set to \"false\" to disable console\n      ## enable debugging mode. It is recommended to disable this in production\n      HASURA_GRAPHQL_DEV_MODE: \"true\"\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log\n      ## uncomment next line to set an admin secret\n      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Adding Action Relationship in YAML Configuration\nDESCRIPTION: Example of adding an action relationship by configuring it in the actions.yaml file. This creates a relationship named 'user' between the UserOutput type and the users table, mapping the id field to the id column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/action-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- custom_types\n  - objects\n    - name: UserOutput\n      relationships:\n      - remote_table:\n          schema: public\n          name: users\n        name: user\n        type: object\n        field_mapping:\n          id: id\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model Select Permissions via HTTP API\nDESCRIPTION: Shows how to create select permissions for a logical model using Hasura's HTTP API endpoint. Includes parameter specification for role, columns, and filters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\" | [\n        \"column 1\",\n        \"column 2\",\n        ...\n      ],\n      \"filter\": <boolean expression>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsed GraphQL Query AST Representation in Rust\nDESCRIPTION: This code shows the Rust representation of a parsed GraphQL query as an Abstract Syntax Tree (AST). The query contains a simple field 'pet', a fragment spread 'snackSelection', and an inline fragment with a type condition 'Nap' that selects fields 'cozyLocation' and 'durationOfNap'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0006_selection_with_fragment_spread.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"pet\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: FragmentSpread(\n                                            FragmentSpread {\n                                                fragment_name: Spanning {\n                                                    item: Name(\n                                                        \"snackSelection\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 6,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 19,\n                                                    },\n                                                },\n                                                directives: [],\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 19,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: InlineFragment(\n                                            InlineFragment {\n                                                type_condition: Some(\n                                                    Spanning {\n                                                        item: TypeCondition {\n                                                            on: Spanning {\n                                                                item: TypeName(\n                                                                    Name(\n                                                                        \"Nap\",\n                                                                    ),\n                                                                ),\n                                                                start: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 10,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 12,\n                                                                },\n                                                            },\n                                                        },\n                                                        start: SourcePosition {\n                                                            line: 4,\n                                                            col: 7,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 4,\n                                                            col: 12,\n                                                        },\n                                                    },\n                                                ),\n                                                directives: [],\n                                                selection_set: Spanning {\n                                                    item: SelectionSet {\n                                                        items: [\n                                                            Spanning {\n                                                                item: Field(\n                                                                    Field {\n                                                                        alias: None,\n                                                                        name: Spanning {\n                                                                            item: Name(\n                                                                                \"cozyLocation\",\n                                                                            ),\n                                                                            start: SourcePosition {\n                                                                                line: 5,\n                                                                                col: 5,\n                                                                            },\n                                                                            end: SourcePosition {\n                                                                                line: 5,\n                                                                                col: 16,\n                                                                            },\n                                                                        },\n                                                                        arguments: None,\n                                                                        directives: [],\n                                                                        selection_set: None,\n                                                                    },\n                                                                ),\n                                                                start: SourcePosition {\n                                                                    line: 5,\n                                                                    col: 5,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 5,\n                                                                    col: 16,\n                                                                },\n                                                            },\n                                                            Spanning {\n                                                                item: Field(\n                                                                    Field {\n                                                                        alias: None,\n                                                                        name: Spanning {\n                                                                            item: Name(\n                                                                                \"durationOfNap\",\n                                                                            ),\n                                                                            start: SourcePosition {\n                                                                                line: 6,\n                                                                                col: 5,\n                                                                            },\n                                                                            end: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Using Argument Presets in GraphQL Schema\nDESCRIPTION: Example of using @preset directive to inject session variables\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  get_user(id: ID! @preset(value: \"x-hasura-user-id\")) : User\n  get_user_activities(user_id: ID!, limit: Int!)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables for Notes and Revisions\nDESCRIPTION: SQL schema definition for two tables: 'notes' storing main note content and 'note_revision' tracking historical changes. Includes auto-incrementing IDs, text fields, foreign key relationships, and timestamp tracking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/ruby/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: notes\n\nColumns:\nid: Integer auto-increment\nnote: Text\n\nTable name: note_revision\n\nColumns:\nid: Integer auto-increment\nnote: Text\nnote_id: Integer (foreign key to notes.id)\nupdate_at: Timestamp, default `now()`\n```\n\n----------------------------------------\n\nTITLE: Batch Data Addition to Weaviate\nDESCRIPTION: Adds data objects to Weaviate in batch, with special handling for datetime objects and type conversion\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith client.batch() as batch:\n        for item in data:\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    if isinstance(value, datetime):\n                        item[key] = value.isoformat()\n\n            batch.add_data_object(\n                class_name=table,\n                data_object=item\n            )\n```\n\n----------------------------------------\n\nTITLE: Deploying to Hasura Cloud - Bash\nDESCRIPTION: This command sets up the Git remote repository for deployment to Hasura Cloud, allowing for easy integration and version control of the project deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin <your-git-repo-url>\ngit branch -M main\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata in Hasura GraphQL Engine (HTTP)\nDESCRIPTION: This snippet demonstrates how to use the 'clear_metadata' endpoint to reset the state of Hasura, removing all tracked tables, relationships, permissions, and Event Triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"clear_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles Using _nlike Operator in GraphQL\nDESCRIPTION: Shows how to use the _nlike operator to fetch articles that do not contain a specific word in their title. The example excludes articles with 'amet' in the title using pattern matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/text-search-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {title: {_nlike: \"%amet%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React JSX Component - Embedded YouTube Video\nDESCRIPTION: A React iframe component that embeds a YouTube video about the Hasura API reference. The component includes configuration for video playback permissions and border styling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  <iframe\n    src=\"https://www.youtube.com/embed/3RSprDf-Ckc\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n```\n\n----------------------------------------\n\nTITLE: Fetching Preview App Creation Status with GraphQL in Hasura\nDESCRIPTION: This GraphQL query fetches the status of a Preview App creation job. It requires a job ID (obtained from the Create GitHub Preview App mutation) as input and returns details about the job status and its associated tasks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPreviewAppCreationStatus($jobId: uuid!) {\n  jobs_by_pk(id: $jobId) {\n    id\n    status\n    tasks {\n      id\n      name\n      task_events {\n        id\n        event_type\n        public_event_data\n        error\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Event by ID - HTTP\nDESCRIPTION: This HTTP POST request fetches the event details and invocation logs by event ID. The request requires the event ID and optionally the source and log limits.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_get_event_by_id\",\n  \"args\": {\n    \"source\" : \"default\",\n    \"event_id\" : \"81531A4C-AED7-4EFE-964D-D115A77B05C2\",\n    \"invocation_log_limit\" : 100,\n    \"invocation_log_offset\" : 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura Enterprise Edition\nDESCRIPTION: Commands to download the docker-compose.yml file for Hasura Enterprise Edition setup using wget or curl.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/enterprise/docker-compose/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/enterprise/docker-compose/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a GIN Index for Address Search\nDESCRIPTION: This SQL snippet creates a GIN index on the properties table to support efficient full-text search queries. The index is created using the `pg_trgm` extension's `gin_trgm_ops`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX address_gin_idx ON properties\nUSING GIN ((unit || ' ' || num || ' ' || street || ' ' || city || ' ' || region || ' ' || postcode) gin_trgm_ops);\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Hasura Schema API Endpoint\nDESCRIPTION: Demonstrates the structure of a POST request to the Hasura Schema API endpoint. The request body includes a query type and arguments object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\n\n{\n   \"type\": \"<query-type>\",\n   \"args\": <args-object>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Selection Enum using GraphQL\nDESCRIPTION: This code defines an enum, `article_select_column`, specifying the columns available for a table selection within a GraphQL schema. Prerequisite includes a schema where the 'article' table represents the specified fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nenum article_select_column {\n  id\n  title\n  content\n  author_id\n  is_published\n}\n```\n\n----------------------------------------\n\nTITLE: Date Filtering with Greater Than Operator in GraphQL\nDESCRIPTION: Query to fetch articles published after a specific date using the _gte operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {published_on: {_gte: \"2018-01-01\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Relationships Configuration via CLI\nDESCRIPTION: YAML configuration for tracking relationships using foreign key constraints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n  array_relationships:\n    - name: articles\n      using:\n        foreign_key_constraint_on:\n          column: author_id\n          table:\n            schema: public\n            name: articles\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model via API in Hasura\nDESCRIPTION: HTTP POST request to create a logical model using Hasura's metadata API. It specifies the model name, source, and field definitions including types, nullability, and descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<PostgreSQL field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Hasura GraphQL Engine\nDESCRIPTION: Shows how to configure logging in Hasura GraphQL Engine by enabling specific log types. This can be done using environment variables or command-line flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# enable all log types\nHASURA_GRAPHQL_ENABLED_LOG_TYPES=startup,http-log,query-log,websocket-log,webhook-log\n\n# using flags\ngraphql-engine --database-url=<database-url>\nserve --enabled-log-types=\"startup,http-log,query-log,websocket-log,webhook-log\"\n```\n\n----------------------------------------\n\nTITLE: Negated Regex User Search with _nregex in GraphQL\nDESCRIPTION: This query retrieves users whose names do not start with 'J' using the _nregex operator for negated regular expression filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  users(where: { name: { _nregex: \"/^J/\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching employees with highest salary per department using distinct_on in GraphQL\nDESCRIPTION: Example query that demonstrates how to fetch employees with the highest salary from each department using distinct_on combined with order_by for predictable results.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/distinct-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_employees (\n    distinct_on: [department]\n    order_by: [\n      {department: asc},\n      {salary: desc}\n    ]\n  ) {\n    id\n    name\n    department\n    salary\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking MSSQL Native Query with Hasura Metadata API\nDESCRIPTION: This snippet shows how to untrack an MSSQL Native Query using the Hasura Metadata API. It includes the HTTP request format and JSON payload structure for the 'mssql_untrack_native_query' operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_untrack_native_query\",\n    \"args\": {\n      \"source\": \"default\",\n      \"root_field_name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Handling Template with Weaviate and OpenAI in Python\nDESCRIPTION: Template for handling user queries by integrating Weaviate and OpenAI with GraphQL in Python.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# POST /handle_query\n\nGRAPHQL_ENDPOINT = \"\"\nADMIN_SECRET = \"\"\nOPENAI_API_KEY = \"\"\n\nimport json\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\n\nfrom langchain.llms import OpenAI\nfrom langchain.chains import LLMChain\nfrom langchain.prompts import PromptTemplate\n\ndef handle_query(request):\n    user_query = request['body']['input']['user_query']\n\n    gql_headers = dict()\n    gql_headers['x-hasura-admin-secret'] = ADMIN_SECRET\n\n    # Create a GraphQL client with the request transport\n    transport = RequestsHTTPTransport(\n        url=GRAPHQL_ENDPOINT, headers=gql_headers)\n    client = Client(transport=transport)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus User and Environment\nDESCRIPTION: Commands to create a Prometheus system user, group, and required directories for storing data and configuration files in a self-hosted Ubuntu/Debian environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo groupadd -system prometheus\nsudo useradd -s /sbin/nologin -system -g prometheus prometheus\nsudo mkdir /var/lib/prometheus\nfor i in rules rules.d files_sd; do sudo mkdir -p /etc/prometheus/${i}; done\n```\n\n----------------------------------------\n\nTITLE: Querying Articles with Aggregation in GraphQL\nDESCRIPTION: A sample GraphQL query that demonstrates how count aggregation and node retrieval work together with limit permissions. This example illustrates how count returns the total number of rows accessible to a role while nodes respects the limit permission.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/permissions-mysql.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles_aggregate {\n    count\n    nodes { .. }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spec for GET request Example - HTTP\nDESCRIPTION: This snippet demonstrates the structure of a GET request that Hasura forwards to the webhook for authentication, including headers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://<your-custom-webhook-url>/ HTTP/1.1\n<Header-Key>: <Header-Value>\n```\n\n----------------------------------------\n\nTITLE: MariaDB JDBC Connection URL Format for Hasura Cloud\nDESCRIPTION: Shows the general format for MariaDB JDBC connection URLs to connect your database to Hasura. The URL includes parameters for hostname, port, database name, username and password, which are essential for establishing the connection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mariadb://<hostname>:<port>/<database name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Computed Field with Argument\nDESCRIPTION: This GraphQL query demonstrates the use of a computed field 'get_articles' with an additional argument 'search'. Note that such computed fields with arguments cannot be used for filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    author {\n        id\n        name\n        get_articles(search: \"graphql\") {\n            title\n            content\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Authors without Nested Articles - GraphQL\nDESCRIPTION: This GraphQL query fetches all authors who have not written any articles. It uses a `_not` condition in the `where` clause to ensure that only authors with no nested `articles` are retrieved. Expected output includes authors' IDs, names, and a count of their articles which should be zero.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n<GraphiQLIDE\n  query={`{\n  bigquery_authors (\n    where: {\n      _not: {\n        articles: {}\n      }\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"bigquery_authors\": [\n      {\n        \"id\": \"2\",\n        \"name\": \"Beltran\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"count\": \"0\"\n          }\n        }\n      },\n      {\n        \"id\": \"3\",\n        \"name\": \"Sidney\",\n        \"articles_aggregate\": {\n          \"aggregate\": {\n            \"count\": \"0\"\n          }\n        }\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Schema for Slack-like Application in SQL\nDESCRIPTION: SQL schema definition creating tables for users, workspaces, and workspace memberships with role-based permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/update-permission-check-condition.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table slack_user (\n  id serial primary key,\n  name text not null\n);\n\ncreate table workspace (\n  id serial primary key,\n  name text not null\n);\n\ncreate table workspace_membership (\n  id serial primary key,\n  workspace_id integer references workspace (id),\n  user_id integer references slack_user (id),\n  user_role text not null\n);\n```\n\n----------------------------------------\n\nTITLE: 3D Distance Queries using _st_3d_d_within\nDESCRIPTION: GraphQL query showing how to perform 3D geometric queries using _st_3d_d_within operator with z-coordinates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($point: geometry){\n  geom_table(\n    where: {geom_col: {_st_3d_d_within: {distance: 3, from: $point}}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Sorting in GraphQL\nDESCRIPTION: Illustrates sorting articles by multiple fields (rating and published date) with custom null handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/sorting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    order_by: [\n      {rating: desc},\n      {published_on: asc_nulls_first}\n    ]\n  ) {\n    id\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untrack Article Logical Model via API\nDESCRIPTION: This snippet demonstrates the HTTP request to untrack the 'article' logical model via the Hasura Metadata API. This removes the specified model from the Hasura schema, assuming it's not currently in use by any Native Queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for Author Validation Action\nDESCRIPTION: GraphQL schema definition for the InsertAuthor action, including input type AuthorInput and output type AuthorOutput. This defines the structure for author validation and insertion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  InsertAuthor(author: AuthorInput!): AuthorOutput\n}\n\ninput AuthorInput {\n  name: String!\n  rating: Int!\n  is_active: Boolean!\n}\n\ntype AuthorOutput {\n  id: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Items to Cart via RESTified Mutation in GraphQL\nDESCRIPTION: This snippet exemplifies a GraphQL mutation query for adding items to a cart, designed to be used as a RESTified endpoint handled by a 'POST' request. Key parameters include 'product_id', 'quantity', and 'cart_id', which must all be supplied as part of the JSON request body. This mutation returns the 'id' and 'cart_id' of the newly inserted cart item. The dependencies include a configured Hasura instance with the respective database schema. The REST endpoint for this mutation provides flexibility in managing cart data in any compatible client.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/restified-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateCartItemMutation($product_id: uuid!, $quantity: Int!, $cart_id: uuid!) {\n  insert_cart_items_one(object: { product_id: $product_id, quantity: $quantity, cart_id: $cart_id }) {\n    id\n    cart_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query using hasura-default naming convention\nDESCRIPTION: This GraphQL query demonstrates the `hasura-default` naming convention. It fetches an aggregate of users from the `app_db_app_users` table, filtering by `favorite_day` and using `referred_by` for distinct counts. The response shows the structure of the data returned, including the count and standard deviation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/naming-convention.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"query get_user_aggregate {\\n  app_db_app_users_aggregate(\\n    distinct_on: referred_by,\\n    where: {favorite_day: {_eq: sunday}}\\n  ) {\\n    aggregate {\\n      count\\n      stddev_pop {\\n        user_id\\n      }\\n    }\\n  }\\n}\\n  \"\n```\n\nLANGUAGE: graphql\nCODE:\n```\n\"{{\\n  \\\"data\\\": {\\n    \\\"app_db_app_users_aggregate\\\": {\\n      \\\"aggregate\\\": {\\n        \\\"count\\\": 0,\\n        \\\"stddev_pop\\\": {\\n          \\\"user_id\\\": null\\n        }\\n      }\\n    }\\n  }\\n}}\\n  \"\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship Between Table and Native Query in BigQuery using Hasura API\nDESCRIPTION: This snippet shows how to set up a relationship between a table and a Native Query in BigQuery using Hasura's Metadata API. It includes a bulk operation payload to create an object relationship with the corresponding column mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/table-relationships/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"bigquery_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"articles\",\n        \"name\": \"author\",\n        \"using\": {\n          \"manual_configuration\": {\n            \"remote_native_query\": \"get_author\",\n            \"column_mapping\": {\n              \"id\": \"author_id\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to a Hosted Environment - Bash\nDESCRIPTION: This command deploys the local changes of the Hasura project to a remote Hasura instance using the Hasura CLI, ensuring that all metadata and migrations are applied correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhasura deploy --endpoint http://your-other-instance.com --admin-secret your-admin-secret\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Admin Secrets in YAML\nDESCRIPTION: Example of configuring multiple admin secret keys in YAML format. This allows multiple valid keys for accessing the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n'[\"secret1\", \"secret2\"]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Filters in Postgres Query Generation\nDESCRIPTION: This snippet shows how permission filters are combined with user-provided WHERE clauses when generating SQL queries in Postgres. It demonstrates that permission predicates are always applied, and if a user provides a WHERE clause, it's ANDed with the permission filter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/role-permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nfinalWhere =\n  toSQLBoolExp (selectFromToQual selectFrom) $\n    maybe permFilter (andAnnBoolExps permFilter) whereM\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Link with Apollo Client\nDESCRIPTION: JavaScript code example showing how to set up a WebSocket link with Apollo Client, including how to pass headers for authentication in subscriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wsLink = new WebSocketLink({\n  uri: `<graphql-endpoint>`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      headers: {headers-object}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example of INSERT Operation Payload in Hasura Event Trigger\nDESCRIPTION: Demonstrates a sample payload for an INSERT operation, including user data, session variables, and trigger information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/payload.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payload\": {\n    \"created_at\": \"2020-07-29T10:00:00.000Z\",\n    \"delivery_info\": {\n      \"current_retry\": 0,\n      \"max_retries\": 0\n    },\n    \"event\": {\n      \"data\": {\n        \"new\": {\n          \"id\": 1,\n          \"name\": \"John\"\n        },\n        \"old\": null\n      },\n      \"op\": \"INSERT\",\n      \"session_variables\": {\n        \"x-hasura-role\": \"admin\"\n      },\n      \"trace_context\": {\n        \"span_id\": \"123\",\n        \"trace_id\": \"456\"\n      }\n    },\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"trigger\": {\n      \"name\": \"insert_user\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Remote Relationship to Database\nDESCRIPTION: HTTP POST request to create a remote relationship from a BigQuery table to another database table. Specifies relationship type and field mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"orders\",\n    \"source\": \"app_db\",\n    \"table\": {\n        \"dataset\": \"<source_dataset_name>\",\n        \"name\": \"users\"\n    },\n    \"definition\": {\n      \"to_source\": {\n        \"relationship_type\": \"array\",\n        \"source\": \"store_db\",\n        \"table\": {\n            \"name\": \"orders\",\n            \"dataset\": \"<target_dataset_name>\"\n        },\n        \"field_mapping\": {\n          \"id\": \"user_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring select permissions for the author role using YAML\nDESCRIPTION: This YAML snippet configures select permissions for the `author` role on the `articles` table. The permission filter ensures that the `author` role can only select articles where the `author_id` matches the `X-Hasura-User-Id`. This demonstrates how to implement data validation using Hasura permissions, ensuring authors can only access their own articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"table:\n  dataset: bigquery\n  name: articles\nselect_permissions:\n  - role: author\n    permission:\n      columns: '*'\n      filter:\n        author_id:\n          _eq: X-Hasura-User-Id\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources\nDESCRIPTION: Commands to create the Kubernetes deployment and service resources using kubectl.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create -f deployment.yaml\n$ kubectl create -f svc.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema via Hasura Metadata API\nDESCRIPTION: HTTP POST request to the Hasura Metadata API for adding a remote schema. It includes the schema name, URL, timeout, and header forwarding configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/adding-schema.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"add_remote_schema\",\n    \"args\": {\n        \"name\": \"my-remote-schema\",\n        \"definition\": {\n            \"url\": \"https://graphql-pokemon.now.sh/\",\n            \"forward_client_headers\": true,\n            \"timeout_seconds\": 60\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: List-based Text Exclusion Filtering in GraphQL\nDESCRIPTION: Query to fetch authors excluding specific names using the _nin operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_nin: [\"Justin\",\"Sidney\",\"April\"]}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Relationship using Legacy Format in HTTP API (PostgreSQL)\nDESCRIPTION: Example HTTP request for updating a remote relationship in Hasura using the legacy format (before v2.0.10) that was only for Remote Schemas. This connects a users table to a remote schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_update_remote_relationship\",\n  \"args\": {\n     \"name\": \"name_of_the_remote_relationship\",\n     \"table\": \"users\",\n     \"source\": \"name_of_the_source\",\n     \"hasura_fields\": [\"id\"],\n     \"remote_schema\": \"my-remote-schema\",\n     \"remote_field\": {\n       \"posts\": {\n          \"arguments\": {\n             \"user_id\": \"$id\",\n             \"likes\": {\n                \"lte\":\"1000\"\n             }\n          }\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Adding Permissions with Row-Level Filter using YAML\nDESCRIPTION: This YAML example demonstrates adding select permissions for the 'reader' role on an 'article' Logical Model. It restricts access to published articles and specifies allowed columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: '<name>'\n    fields: ...\n    select_permissions:\n      - role: reader\n        permission:\n          columns:\n            - id\n            - title\n            - contents\n            - date\n          filter:\n            is_published:\n              _eq: true\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles Using _like Operator in GraphQL\nDESCRIPTION: This query fetches articles whose titles contain the word 'amet' using the _like operator. It demonstrates case-sensitive pattern matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {title: {_like: \"%amet%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Permission Configuration in Hasura\nDESCRIPTION: Schema for configuring update permissions including column access, filtering conditions, and input validation rules.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Key            | Required | Schema                                 | Description                                                                                                                                                                                                                       |\n| -------------- | -------- | -------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| columns        | true     | [PGColumn](#pgcolumn) array (or) `'*'` | Only these columns are selectable (or all when `'*'` is specified)                                                                                                                                                                |\n| filter         | true     | [BoolExp](#boolexp)                    | Only the rows where this precondition holds true are updatable                                                                                                                                                                    |\n| check          | false    | [BoolExp](#boolexp)                    | Postcondition which must be satisfied by rows which have been updated                                                                                                                                                             |\n| set            | false    | [ColumnPresetsExp](#columnpresetexp)   | Preset values for columns that can be sourced from session variables or static values.                                                                                                                                            |\n| backend_only   | false    | Boolean                                | When set to `true` the mutation is accessible only if the `x-hasura-use-backend-only-permissions` session variable exists and is set to `true` and the request is made with `x-hasura-admin-secret` set if any auth is configured |\n| validate_input | false    | [InputValidation](#input-validation)   | The input validation definition for the insert mutation.                                                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Advanced GraphiQL IDE Usage with Variables in JSX\nDESCRIPTION: Shows how to use the GraphiQLIDE component with a more complex GraphQL query, including variables and a detailed response. This example demonstrates querying authors based on a JSON filter for pincode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query get_authors_in_pincode ($jsonFilter: jsonb){\n    authors(\n      where: {\n        address: {_contains: $jsonFilter }\n      }\n    ) {\n      id\n      name\n      address\n    }\n  }`}\n  variables={`{\n    \"jsonFilter\": {\n      \"pincode\": 560095\n    }\n  }`}\n  response={`{\n    \"data\": {\n      \"authors\": [\n        {\n          \"id\": 1,\n          \"name\": \"Ash\",\n          \"address\": {\n            \"street_address\": \"161, 19th Main Road, Koramangala 6th Block\",\n            \"city\": \"Bengaluru\",\n            \"state\": \"Karnataka\",\n            \"pincode\": 560095,\n            \"phone\": \"9090909090\",\n          }\n        }\n      ]\n    }\n  }`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Including Table Definitions\nDESCRIPTION: This snippet illustrates a `tables.yaml` file used to include definitions for individual tables in the metadata. It includes other YAML files, each representing a table (e.g., `public_author.yaml` and `public_article.yaml`).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- '!include public_author.yaml'\n- '!include public_article.yaml'\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Database Connection URL for DigitalOcean Postgres in Bash\nDESCRIPTION: This snippet shows the structure of the database connection URL for connecting a DigitalOcean Postgres database to Hasura. It includes placeholders for user name, password, public IP, Postgres port, and database name, with SSL mode required.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/digital-ocean.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>?sslmode=require\n```\n\n----------------------------------------\n\nTITLE: LogicalModelField Schema Documentation\nDESCRIPTION: Specifies the structure for logical model fields including name, type and description.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\n| Key         | Required | Schema                                  | Description                          |\n| ----------- | -------- | --------------------------------------- | ------------------------------------ |\n| name        | true     | `String`                                | The name of the Logical Model field  |\n```\n\n----------------------------------------\n\nTITLE: Tracking an Article Logical Model via API\nDESCRIPTION: This snippet shows how to create an `article` Logical Model using the Hasura Metadata API via an HTTP POST request.  The request body includes the model's name (`article`), fields (`id`, `title`, `contents`, `published_date`, `is_published`), and their respective types (integer, text, date, boolean) and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_track_logical_model\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"default\\\",\\n    \\\"name\\\": \\\"article\\\",\\n    \\\"fields\\\": [\\n      {\\n        \\\"name\\\": \\\"id\\\",\\n        \\\"type\\\":\\n          {\\n            \\\"scalar\\\": \\\"integer\\\"\\n          }\\n      },\\n      {\\n        \\\"name\\\": \\\"title\\\",\\n        \\\"type\\\":\\n          {\\n            \\\"scalar\\\": \\\"text\\\"\\n          }\\n      },\\n      {\\n        \\\"name\\\": \\\"contents\\\",\\n        \\\"type\\\":\\n          {\\n            \\\"scalar\\\": \\\"text\\\"\\n          }\\n      },\\n      {\\n        \\\"name\\\": \\\"published_date\\\",\\n        \\\"type\\\":\\n          {\\n            \\\"scalar\\\": \\\"date\\\",\\n            \\\"nullable\\\": true\\n          },\\n      },\\n      {\\n        \\\"name\\\": \\\"is_published\\\",\\n        \\\"type\\\":\\n          {\\n            \\\"scalar\\\": \\\"boolean\\\"\\n          }\\n      }\\n    ]\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship with Metadata API\nDESCRIPTION: HTTP request to create an array relationship using Hasura's pg_create_array_relationship Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_array_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"authors\",\n    \"name\": \"articles\",\n    \"using\": {\n      \"foreign_key_constraint_on\" : {\n        \"table\" : \"articles\",\n        \"column\" : \"author_id\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action Permissions via Hasura Metadata API\nDESCRIPTION: This HTTP request demonstrates how to use the Hasura Metadata API to create an action permission. It grants the 'user' role access to the 'insertAuthor' action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_action_permission\",\n  \"args\": {\n    \"action\": \"insertAuthor\",\n    \"role\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON/JSONB Column Values in GraphQL Query for Hasura\nDESCRIPTION: This GraphQL query demonstrates how to fetch specific values from a JSON/JSONB column. It retrieves an author's details including nested JSON data for city and phone number.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/simple-object-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors_by_pk(id: 1) {\n    id\n    name\n    address\n    city: address(path: \"$.city\")\n    phone: address(path: \"$.phone_numbers.[0]\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AggregationPredicate in GraphQL Queries\nDESCRIPTION: These examples show different ways to use AggregationPredicate in GraphQL queries, including average, count, and correlation functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\naverage: {\n  arguments: \"rating\",\n  predicate: { _gt: 5 }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ncount: {\n  arguments: []\n  predicate: { _gt: 10 }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ncount: {\n  arguments: [\"name\", \"id\"]\n  predicate: { _gt: 10 }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ncorr: {\n  arguments: { X: \"age\", Y: \"score\" }\n  predicate: { _gt: 0.6 }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Article Logical Model in YAML (CLI)\nDESCRIPTION: This YAML code defines an 'article' logical model with fields like 'id', 'title', 'contents', 'published_date', and 'is_published'. It specifies data types and nullability for each field within the `databases.yaml` file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article\n    fields:\n      id:\n        type: integer\n        nullable: false\n      title:\n        type: text\n        nullable: false\n      contents:\n        type: text\n        nullable: false\n      published_date:\n        type: date\n        nullable: true\n      is_published:\n        type: boolean\n        nullable: false\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA based JWT for Hasura with PEM Public Key\nDESCRIPTION: Example of configuring RSA based JWT authentication for Hasura GraphQL Engine using a public key in PEM format. It uses RS512 algorithm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"RS512\",\n  \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Endpoint URLs\nDESCRIPTION: Default URLs for accessing the GraphQL endpoint and Hasura Console after deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose-postgis/README.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<your-domain.com>/v1/graphql\nhttps://<your-domain.com>/console\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles with Non-null Published Date - GraphQL\nDESCRIPTION: This snippet demonstrates how to construct a GraphQL query that retrieves articles filtered by the `published_on` field. The query ensures that only articles with a non-null value in `published_on` are returned, showcasing the use of the `_is_null` operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  articles(\n    where: {published_on: {_is_null: false}}\n  ) {\n    id\n    title\n    published_on\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\",\n        \"published_on\": \"2017-08-09\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\",\n        \"published_on\": \"2018-06-10\"\n      },\n      {\n        \"id\": 3,\n        \"title\": \"amet justo morbi\",\n        \"published_on\": \"2017-05-26\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"vestibulum ac est\",\n        \"published_on\": \"2017-03-05\"\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Action Relationship via Metadata API\nDESCRIPTION: HTTP request to the Hasura Metadata API to create an action relationship. This example shows how to set custom types with a relationship between UserOutput and the users table using the set_custom_types API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/action-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [],\n    \"objects\": [\n      {\n        \"name\": \"UserOutput\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\": \"Int!\"\n          }\n        ],\n        \"relationships\": [\n          {\n            \"name\": \"user\",\n            \"type\": \"object\",\n            \"remote_table\": \"users\",\n            \"field_mapping\": {\n              \"id\": \"id\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Customization Options in YAML\nDESCRIPTION: This YAML snippet defines the structure for the new customization object in the *_add_source API. It includes options for root field namespacing and type name prefixing/suffixing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/source-customization.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncustomization:\n  root_fields:\n    namespace: \"something\"\n    prefix: some_prefix\n    suffix: some_suffix\n  type_names:\n    prefix: some_prefix\n    suffix: some_suffix\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Logical Model Permissions using YAML\nDESCRIPTION: Demonstrates how to configure basic select permissions for a logical model using YAML configuration. Includes column selection and filter definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        ...\n      select_permissions:\n        - role: \"<role name>\"\n          permission:\n            columns: \"*\" | [\n              \"column 1\",\n              \"column 2\",\n              ...\n            ]\n            filter: \"<boolean expression>\"\n        - ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Array Relationship in YAML\nDESCRIPTION: This YAML definition sets up an array relationship named 'articles' for the 'authors' table, linking articles written by the author through the 'author_id' foreign key constraint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: authors\n  array_relationships:\n    - name: articles\n      using:\n        foreign_key_constraint_on:\n          column: author_id\n          table:\n            schema: public\n            name: articles\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Hasura CLI\nDESCRIPTION: Installation command for a specific version of Hasura CLI using the VERSION variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/install-hasura-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | VERSION=v2.46.0 bash\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Relationships in GraphQL\nDESCRIPTION: Demonstrates how to query an article and its related author using a nested GraphQL query. This showcases the ability to traverse object relationships in MySQL through Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mysql-relationships.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    id\n    title\n\tauthor {\n\t  id\n\t  name\n\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Track Logical Model via Metadata API\nDESCRIPTION: This snippet shows how to create a logical model using the Hasura metadata API.  It defines the structure of the HTTP POST request, including the content type, admin role, and the JSON payload that specifies the model's name, source, fields, data types, nullability, and descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Predicate Expression Input Types in GraphQL\nDESCRIPTION: GraphQL input types for creating aggregate predicate expressions for filtering collections of objects. These types allow filtering before aggregation and applying predicates to the aggregated results.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_50\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_aggregate_predicate_exp {\n  filter_input: Invoice_filter_input # Filters the model before aggregating\n  predicate: Invoice_aggregate_bool_exp!\n}\n\ninput InvoiceLine_aggregate_predicate_exp {\n  filter_input: InvoiceLine_filter_input # Filters the model before aggregating\n  predicate: InvoiceLine_aggregate_bool_exp!\n}\n\ninput Discount_aggregate_predicate_exp {\n  filter_input: Discount_filter_input # Filters the model before aggregating\n  predicate: Discount_aggregate_bool_exp!\n}\n\ninput String_array_aggregate_predicate_exp {\n  filter_input: String_filter_input\n  predicate: String_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Trigger in YAML - Hasura\nDESCRIPTION: This YAML snippet illustrates how to define a Scheduled Trigger named 'eod_reports' that will trigger an HTTP POST request to a specified webhook at a certain schedule. The example includes settings for payload, inclusion in metadata, and demonstrates how to run the Hasura metadata apply command to apply changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-cron-trigger.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: eod_reports\n  webhook: https://mywebhook.com/eod\n  schedule: 0 22 * * 1-5\n  include_in_metadata: true\n  payload: {}\n```\n\n----------------------------------------\n\nTITLE: Query Request Payload in JSON for Hasura GraphQL Engine\nDESCRIPTION: This JSON structure represents the query request payload sent to the POST /query endpoint. It specifies the target table, relationships, and query details including fields to be returned.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Artist\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"where\": {\n      \"expressions\": [],\n      \"type\": \"and\"\n    },\n    \"order_by\": null,\n    \"limit\": null,\n    \"offset\": null,\n    \"fields\": {\n      \"ArtistId\": {\n        \"type\": \"column\",\n        \"column\": \"ArtistId\",\n        \"column_type\": \"number\"\n      },\n      \"Name\": {\n        \"type\": \"column\",\n        \"column\": \"Name\",\n        \"column_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Auth0 Wrapper\nDESCRIPTION: This GraphQL schema defines a Query type with an auth0 field that returns Auth0Info. It represents the conversion of Auth0's REST API to a GraphQL API, allowing queries by auth0_id or email.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/auth0-wrapper/README.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n  type Query {\n    auth0 (auth0_id: String, email: String): Auth0Info\n  }\n\n  type Auth0Info {\n    user_id: String,\n    email: String,\n    email_verified: Boolean,\n    name: String,\n    picture: String,\n    nickname: String,\n    created_at: String,\n    last_login: String,\n    logins_count: Int\n  }\n```\n\n----------------------------------------\n\nTITLE: Tracking SQL Server Logical Model\nDESCRIPTION: API endpoint for adding a Logical Model to the GraphQL schema using SQL Server. Includes configuration for model fields and types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false,\n        \"description\": \"<optional field description>\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Cart Using cURL in Bash\nDESCRIPTION: This bash snippet uses cURL to execute a POST request against a RESTified endpoint, adding an item to a shopping cart using JSON payload. Parameters 'product_id', 'quantity', and 'cart_id' are all mandatory and reflect the mutation's argument names. The command demonstrates a typical request to interact with REST endpoints from a CLI environment, requiring the user to replace placeholder values with valid arguments and ensure a valid network or service configuration for successful operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/restified-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"<YOUR_ADMIN_SECRET>\" -X POST https://<YOUR_DOMAIN>/api/rest/cartItem/ -d '{\n\"product_id\": \"7992fdfa-65b5-11ed-8612-6a8b11ef7372\",\n\"quantity\": 1,\n\"cart_id\": \"e6e0edc0-673d-11ed-8a25-7224baf239e5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI\nDESCRIPTION: Command to apply metadata changes after modifying the relationship configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/rename.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Dropping a PostgreSQL Relationship in Hasura\nDESCRIPTION: This API endpoint drops a relationship on a table. The example shows how to drop the 'article_detail' relationship from the 'article' table. Dependencies will be reported unless cascade is set to true.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_drop_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"relationship\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a GraphQL Query with Field Selection and Pagination\nDESCRIPTION: This query string selects specific fields from 'institution', 'location', and 'staff_member' entities. It also includes pagination with a limit of 5 results. This structure is typically used in RESTful APIs that implement GraphQL-like querying capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/nested_fields/institutions.txt#2025-04-17_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nfields[institution]=name,location,staff&fields[location]=city,country&fields[staff_member]=first_name,specialities&page[limit]=5\n```\n\n----------------------------------------\n\nTITLE: Hasura Request Types Table in Markdown\nDESCRIPTION: A markdown table listing different request types in Hasura GraphQL Engine, including their type names, argument specifications, version numbers, and brief descriptions of their functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `type` | `args` | `version` | Synopsis |\n| ------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ---------------------------------------------------------------- |\n| **bulk** | [Query](#schema-metadata-api-query) array | 1 | Execute multiple operations in a single query |\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud SQL Postgres Instance\nDESCRIPTION: Command to create a Cloud SQL Postgres instance with specified compute resources and region.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances create hasura-postgres --database-version=POSTGRES_15 --cpu=2 --memory=7680MiB --region=us-central1\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with Low-Rated Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches all authors who have written at least one article rated 1. It demonstrates filtering based on nested objects defined via an array relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_authors(\n    where: {\n      articles: {rating: {_eq: 1}}\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Cleanup for Event Triggers in Hasura YAML\nDESCRIPTION: This YAML snippet shows how to add an auto cleanup configuration to an event trigger in the Hasura metadata file. It includes parameters for batch size, cleaning invocation logs, age of logs to clear, schedule, and timeout.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/auto-cleanup.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: send_email\n    definition:\n      enable_manual: true\n      insert:\n        columns: '*'\n    retry_conf:\n      interval_sec: 10\n      num_retries: 0\n      timeout_sec: 60\n    webhook: https://send.email\n    cleanup_config:\n      batch_size: 10000\n      clean_invocation_logs: true\n      clear_older_than: 168\n      paused: false\n      schedule: '0 0 * * *'\n      timeout: 60\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Relationship with Hasura Metadata API in HTTP\nDESCRIPTION: This snippet demonstrates an HTTP POST request to update a remote relationship definition using Hasura's metadata API. Dependencies include a configured Hasura instance with access to the relevant databases or schemas. The JSON payload specifies the relationship name, source, target table, and its updated definition. It accepts inputs like relationship names and fields, and outputs an updated remote relationship configuration. Limitations include needing the 'admin' role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"citus_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      // the updated definition\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"name_of_the_target_remote_schema\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"citus_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      // the updated definition\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"name_of_the_target_source\",\n          \"table\": \"table_on_the_target_source\",\n          \"field_mapping\": {\n            \"user_id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Payload for Article Delete Validation\nDESCRIPTION: Sample JSON payload sent to the validation URL when validating a delete operation on an article with author ID condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n      \"input\": [\n          {\n              \"where\": {\"id\": {\"_eq\": 3}}\n          }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Conflicting Definitions Error in Hasura GraphQL Engine\nDESCRIPTION: This snippet shows a typical error message encountered when Hasura detects conflicting type definitions in the GraphQL schema. It highlights the specific type causing the conflict and lists the locations where conflicting definitions are found.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/namespacing-remote-schemas.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFound conflicting definitions for GraphQL type 'collections_order_by'. The definition at query_root.near.collections.order_by differs from the definitions at [query_root.aptos.nftz.order_by.collection, query_root.aptos.collections_search_aggregate.order_by, query_root.aptos.collections_search.order_by, query_root.aptos.collections_aggregate.order_by, query_root.aptos.collections.order_by, query_root.aptos.actions.collection.edition_launches.order_by.collection, query_root.aptos.actions.collection.attributes.nft.listings.order_by.collection, query_root.aptos.actions.collection.attributes.nft.bids.order_by.collection, query_root.aptos.actions.collection.attributes.order_by.collection, query_root.aptos.actions.order_by.nft.collection, query_root.aptos.actions.order_by.collection]\n```\n\n----------------------------------------\n\nTITLE: Checking Metadata Inconsistency Status with Hasura CLI\nDESCRIPTION: This code snippet demonstrates how to check the status of metadata inconsistency using the Hasura CLI. It uses the `hasura metadata inconsistency status` command to determine if the metadata is consistent with the database schema and Hasura configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata inconsistency status\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation Command in TypeScript Connector\nDESCRIPTION: This snippet illustrates the concept of a command handler for creating a user in the TypeScript connector. It performs validation and executes PostgreSQL connector commands.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/command-mutations.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// create_user command handler in TS connector\ncreate_user(user) {\n  // Validate email address using external API\n  // Check username availability\n  return [\n    { command: \"unique_username\", params: { username: user.username } },\n    { command: \"add_user\", params: user }\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Database Connection String in Secret Manager\nDESCRIPTION: Command to create a secret in Secret Manager containing the database connection string.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\necho -n \"<CONNECTION_STRING>\" | gcloud secrets create hasura-db-connection-string --data-file=-\n```\n\n----------------------------------------\n\nTITLE: Paginating Nested Objects in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch a list of authors and limit the results of their nested articles to the first 2 using limit and offset arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/pagination.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    id\n    name\n    articles (\n      limit: 2\n      offset: 0\n    ) {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Cron Trigger\nDESCRIPTION: This snippet shows an example of `cron_triggers.yaml`, configuring a cron trigger named `test-trigger`. It defines the webhook URL, schedule, payload, retry configurations, and inclusion in metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: test-trigger\nwebhook: <webhook-url>\nschedule: 0 12 * * 1-5\ninclude_in_metadata: true\npayload: {}\nretry_conf:\n  num_retries: 1\n  timeout_seconds: 60\n  tolerance_seconds: 21600\n  retry_interval_seconds: 10\n\n```\n\n----------------------------------------\n\nTITLE: Review Moderation Flask Endpoint with ChatGPT Integration\nDESCRIPTION: This Flask route handles incoming review checks. It authenticates the request, parses the review data, checks the review content with ChatGPT, and takes appropriate action based on the moderation result.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/check-review\", methods=[\"POST\"])\nasync def check_review():\n    auth_header = request.headers.get(\"secret-authorization-string\")\n    if auth_header != \"super_secret_string_123\":\n        return jsonify({\"message\": \"Unauthorized\"}), 401\n\n    # Parse the review from the event payload\n    data = request.get_json()\n    user_review = data[\"event\"][\"data\"][\"new\"][\"text\"]\n    user_id = data[\"event\"][\"data\"][\"new\"][\"user_id\"]\n    review_id = data[\"event\"][\"data\"][\"new\"][\"id\"]\n\n    # Check the review with ChatGPT\n    moderation_report = check_review_with_chat_gpt(user_review)\n\n    # If the review is appropriate, mark it as visible; if not, send a notification to the user\n    if moderation_report[\"is_appropriate\"]:\n        await mark_review_as_visible(user_review, review_id)\n    else:\n        send_notification(user_review, user_id, moderation_report[\"feedback\"])\n\n    return jsonify({\"GPTResponse\": moderation_report})\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Set and Template in YAML\nDESCRIPTION: This YAML snippet shows how to add a connection set and connection template to a Postgres database configuration in Hasura. It includes settings for the primary connection and an additional connection in the set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db-name>\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: <DATABASE_URL_ENV>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n        retries: 1\n    connection_template:\n      template: |\n        {{ if $.request.session?[\"x-hasura-role\"] == \"user\" }}\n          {{$.primary}}\n        {{else}}\n          {{$.connection_set.db_1}}\n        {{ end }}\n    connection_set:\n      - name: db_1\n        connection_info:\n          database_url:\n            from_env: <DATABASE_URL_ENV>\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Transformer Configuration in YAML\nDESCRIPTION: Example configuration for testing webhook transformer with a sample payload. Shows how to transform a webhook request using template expressions for URL and query parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntype: test_http_transformer\nargs:\n  webhook_url: http://httbin.org\n  payload:\n    event:\n      user_id: 1\n      username: bob\n      password: cat\n  transformer:\n    request_method: GET\n    request_url: $url/{{event.user_id}}\n    query_params:\n      param1: \"{{$.event.username}}\"\n      param2: \"{{$.event.password}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Root User in Docker Compose for Hasura GraphQL Engine\nDESCRIPTION: This YAML configuration demonstrates how to implement the non-root user security practice in a docker-compose file for Hasura GraphQL Engine. It specifies user ID and group ID as 1001:1001, which corresponds to the default 'hasura' non-root user and group included in all official Hasura images.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/container-security.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  graphql-engine:\n    image: hasura/graphql-engine:v2.30.0\n    user: 1001:1001\n    ports:\n      - '8080:8080'\n```\n\n----------------------------------------\n\nTITLE: Defining ArrRelUsingFKeyOn Schema in Hasura\nDESCRIPTION: Describes the schema for array relationships using foreign key constraints, including table and column specifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"TableName\",\n  \"column\": \"PGColumn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time-to-Live (TTL) for Cached Queries\nDESCRIPTION: Shows how to set a custom time-to-live (TTL) for a cached query, controlling how long the cache remains valid\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyProducts @cached(ttl: 120) {\n  products {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Host to TLS Allow List using YAML\nDESCRIPTION: This YAML snippet demonstrates how to add a host to the insecure TLS allow list in the metadata configuration. It specifies the host, permissions, and an optional port suffix.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/tls-allow-list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntls_allowlist:\n  - host: localhost\n    permissions:\n      - self-signed\n    suffix: \"4183\"\n```\n\n----------------------------------------\n\nTITLE: Querying Native Query with Table Relationship in Hasura GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch articles with their related author information. It showcases the usage of the relationship between the native query and the 'authors' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_articles {\n    title\n\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Reverse Proxy for Hasura\nDESCRIPTION: Sample Nginx configuration to proxy requests to Hasura GraphQL Engine. It listens on ports 80 and 443, forwarding requests to Hasura running on localhost:8080.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/serve-behind-proxy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  listen 443 ssl;\n  server_name hasura.<my-domain.com>;\n\n  location / {\n    proxy_pass http://localhost:8080/;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Installation Example\nDESCRIPTION: Example showing how to install a specific plugin using the Hasura CLI install command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_install.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install a plugin:\nhasura plugins install [plugin-name]\n```\n\n----------------------------------------\n\nTITLE: Pagination with Offset in BigQuery\nDESCRIPTION: Shows how to implement pagination by combining limit and offset to fetch a specific slice of records (5 authors starting from the 6th record).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/pagination.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    limit: 5,\n    offset:5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cron Trigger using Hasura Schema/Metadata API\nDESCRIPTION: HTTP POST request to delete an existing cron trigger by name. This endpoint will remove both the trigger and its associated scheduled events.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"delete_cron_trigger\",\n    \"args\" : {\n        \"name\": \"sample_cron\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes in Hasura (Bash)\nDESCRIPTION: This Bash command is used to apply the metadata changes made in Hasura by tracking tables or views. It must be run after modifying the tables.yaml file to ensure that the changes are reflected in the Hasura environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Boolean\nDESCRIPTION: This GraphQL snippet demonstrates how to query a boolean field. It retrieves objects and their corresponding boolean value indicating if they are published.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    is_published: true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Object in MS SQL Server Using GraphQL Mutation\nDESCRIPTION: This mutation allows for the insertion of a single article object into the MS SQL Server database and returns the inserted object in the response. The `object` parameter is mandatory and must conform to the `article_insert_input` type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/insert.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_single_article {\n  insert_article_one(\n    object: {\n      title: \"Article 1\",\n      content: \"Sample article content\",\n      author_id: 3\n    }\n  ) {\n    id\n    title\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article_one\": {\n      \"id\": 21,\n      \"title\": \"Article 1\"\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Federation via Hasura Metadata API\nDESCRIPTION: HTTP POST request to the Hasura Metadata API for enabling Apollo Federation on a specific table. This method uses the pg_set_apollo_federation_config operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/data-federation/apollo-federation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_set_apollo_federation_config\",\n  \"args\": {\n    \"source\": \"<source_name>\",\n    \"table\": \"<table_name>\",\n    \"apollo_federation_config\": {\n      \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint in SQL for MS SQL Server\nDESCRIPTION: This SQL code adds a foreign key constraint to the 'author_id' column in the 'articles' table, linking it to the 'id' column in the 'authors' table. It ensures referential integrity between the two tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE articles\nADD FOREIGN KEY (author_id) REFERENCES authors(id);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fibonacci Function with Relationship in Hasura\nDESCRIPTION: This GraphQL query calls the 'fibonacci' function with arguments and includes a nested relationship 'myself'. It demonstrates how to use a user-defined function with relationships in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  fibonacci(args: {upto: 9}) {\n    ArtistId\n    Name\n    myself {\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BigQuery Computed Field\nDESCRIPTION: Creates a computed field 'fetch_articles' on a BigQuery 'author' table using the function 'author_fetch_articles'. Includes argument mapping and return table configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/computed-field.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"bigquery_add_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"dataset\":\"hasura\"\n        },\n        \"source\": \"bigquery\",\n        \"name\":\"fetch_articles\",\n        \"definition\":{\n            \"function\":{\n                \"name\":\"author_fetch_articles\",\n                \"dataset\":\"hasura\"\n            },\n            \"argument_mapping\": {\n                \"author_id_arg\": \"author_id\"\n            },\n            \"return_table\": {\n                \"name\": \"article\",\n                \"dataset\": \"hasura\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Database Relationship via Hasura API\nDESCRIPTION: This HTTP request snippet demonstrates how to create a remote database relationship using the Hasura Metadata API. The request includes necessary parameters such as source, table, and field mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"articles\",\n    \"source\": \"bq-source\",\n    \"table\": {\n      \"name\": \"author\",\n      \"dataset\": \"source\"\n    },\n    \"definition\": {\n      \"to_source\": {\n        \"relationship_type\": \"array\",\n        \"source\": \"bq-target\",\n        \"table\": {\n          \"name\": \"articles\",\n          \"dataset\": \"target\"\n        },\n        \"field_mapping\": {\n          \"id\": \"author_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers - Bash\nDESCRIPTION: This command starts the Docker containers as specified in the docker-compose.yaml file. It runs the Hasura GraphQL Engine and connects to the Postgres database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Relationship Comment in MSSQL Metadata\nDESCRIPTION: Adds or updates a comment for an existing relationship, which can be used for documentation purposes\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_set_relationship_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"name\": \"article_detail\",\n        \"comment\" : \"has extra information about an article like count etc.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Mutation Webhook Payload in Hasura\nDESCRIPTION: Defines the webhook payload structure for delete mutations. The payload includes version, role, session variables, and input data containing the delete conditions and primary key columns for specific deletions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"<version-integer>\",\n    \"role\": \"<role-name>\",\n    \"session_variables\": {<session-variables>},\n    \"data\": {\n      \"input\": [\n        {\n            JSON-fied <model_name>_bool_exp!,\n            \"pk_columns\": JSON-fied <model_name>_pk_columns_input! (only included for delete_<mode_name>_by_pk)\n        }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Metadata between Two Folders\nDESCRIPTION: Command to compare metadata between two different directories. This allows for comparing metadata across different environments or versions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata diff folder1 folder2\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Database for Hasura Cloud Preview Apps\nDESCRIPTION: YAML configuration for setting up Postgres database connections in the Hasura Cloud Preview Apps GitHub Action. It specifies the server connection URI and environment variables for Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/preview-apps.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npostgresDBConfig: |\n  POSTGRES_SERVER_CONNECTION_URI=${{secrets.POSTGRES_SERVER_CONNECTION_URI}}\n  PG_ENV_VARS_FOR_HASURA=PG_DB_URL_1,PG_DB_URL_2, PG_DB_URL3\n```\n\n----------------------------------------\n\nTITLE: ComputedFieldDefinition Schema Documentation\nDESCRIPTION: Defines the structure for computed fields including SQL function configurations and argument mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n| Key              | Required | Schema                        | Description                                                                                                                                             |\n| ---------------- | -------- | ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| function         | true     | [FunctionName](#functionname) | The SQL function                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Gateway Build Command Options - SASS\nDESCRIPTION: Available command line options for the gateway build command, including gateway URL, configuration file path, admin secret, and help flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_build.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --gateway-url string                  url of the gateway instance\n    --gateway-configuration-file string   path to the current Hasura's configuration\n    --admin-secret string                 admin secret of the gateway\n-h, --help                                help for build\n```\n\n----------------------------------------\n\nTITLE: Reloading Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to refresh the schema of a remote server. Triggers Hasura to refetch and re-stitch the remote schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schemas.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"reload_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with All Published Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches all authors whose articles are all published. It demonstrates how to filter when all nested objects must satisfy a condition using the '_not' operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_authors (\n    where: {\n      _not: {\n        articles: {is_published: {_neq: true}}\n      }\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @skip Directive in GraphQL\nDESCRIPTION: Demonstrates using the @skip directive to conditionally exclude fields based on a boolean variable. The example shows skipping/including the publisher field based on a variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  bigquery_articles {\n    title\n    publisher @skip(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Field Visibility via YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to restrict access to specific query and subscription root fields for a role in Hasura by setting permissions in the metadata configuration file. Key parameters include specifying the role, columns, and allowed root fields. When no fields are specified, defaults are applied.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/disabling-root-fields.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nselect_permissions:\n  - role: user\n    permission:\n      columns:\n        - id\n      filter: {}\n      query_root_fields:\n        - select_by_pk\n      subscription_root_fields:\n        - select\n        - select_by_pk\n        - select_aggregate\ndelete_permissions:\n  - role: user\n  permission:\n    backend_only: true\n    filter: {}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI 3 Specification Response for RESTified GraphQL Endpoints in JSON\nDESCRIPTION: Provides an example of the OpenAPI 3 specification response for RESTified GraphQL Endpoints. It includes details about available endpoints, their methods, parameters, and descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/restified.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"version\": \"\",\n    \"title\": \"Rest Endpoints\",\n    \"description\": \"These OpenAPI specifications are automatically generated by Hasura.\"\n  },\n  \"paths\": {\n    \"/api/rest/users\": {\n      \"get\": {\n        \"summary\": \"Fetch user data\",\n        \"description\": \"This API fetches user data (first name and last name) from the users table.\\n***\\nThe GraphQl query for this endpoint is:\\n```graphql\\nquery MyQuery{\\n  users {\\n    first_name\\n    last_name\\n  }\\n}\\n```\",\n        \"responses\": {}\n      },\n      \"parameters\": [\n        {\n          \"schema\": {\n            \"type\": \"string\"\n          },\n          \"in\": \"header\",\n          \"name\": \"x-hasura-admin-secret\",\n          \"description\": \"Your x-hasura-admin-secret will be used for authentication of the API request.\"\n        }\n      ]\n    }\n  },\n  \"components\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExistsExp Schema in Hasura\nDESCRIPTION: Describes the schema for EXISTS expressions in boolean conditions, including table and where clause specifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$exists\": {\n    \"_table\": \"TableName\",\n    \"_where\": \"BoolExp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing AlloyDB Database Connection URL\nDESCRIPTION: Structure of the database connection URL for connecting Hasura to an AlloyDB Postgres database. It includes placeholders for database user, password, GCE instance IP address, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/alloy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<database-user>:<postgres-password>@<ip-address-of-gce-instance>:5432/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata using Hasura CLI\nDESCRIPTION: Command to completely clear Hasura metadata using the CLI. This is an irreversible operation that removes all configuration such as tracked tables, relationships, and actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata clear\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship to Remote Schema in HTTP API (Citus)\nDESCRIPTION: Example HTTP request for creating a new remote relationship from a Citus table to a Remote Schema. This connects a users table to a messages resolver in a remote API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"citus_create_remote_relationship\",\n   \"args\":{\n      // name of the remote relationship\n      \"name\": \"messages\",\n      // name of the database\n      \"source\": \"app_db\",\n      // name of the table in the above database on which the relationship\n      // is being defined\n      \"table\": \"users\",\n      \"definition\": {\n        // this remote relationship is being defined to a resolver on a\n        // Remote Schema\n        \"to_remote_schema\": {\n          // name of the target Remote Schema\n          \"remote_schema\": \"forum_api\",\n          // the fields on the table that need to be selected to pass the\n          // required data to the Remote Schema's resolver\n          \"lhs_fields\": [\"id\"],\n          // the join condition - this would generate this upstream request:\n          // query {\n          //   messages(user_id: id_from_users_table) { .. }\n          // }\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with _st_intersects_nband_geom GraphQL Queries\nDESCRIPTION: This query performs spatial intersection tests on raster data using a geometry input and an optional band number. It retrieves raster identifiers and data where intersections occur.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getIntersectingValues ($point: geometry!){\n  dummy_rast(where: {rast: {_st_intersects_nband_geom: {nband: 5 geommin: $point}}}){\n    rid\n    rast\n  }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n \"data\": {\n   \"dummy_rast\": [\n     {\n       \"rid\": 1,\n       \"rast\": \"01000001009A9999999999E93F9A9999999999E9BF000000000000F0BF000000000000104000000000000000000000000000000000E610000005000500440000010101000101010101010101010101010101010001010100\"\n     },\n     {\n       \"rid\": 2,\n       \"rast\": \"0100000100166C8E335B91F13FE2385B00285EF6BF360EE40064EBFFBF8D033900D9FA134000000000000000000000000000000000E610000005000500440000000101010001010101010101010101010101000101010000\"\n     }\n   ]\n }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n \"point\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n     1,\n     2\n   ],\n   \"crs\": {\n     \"type\": \"name\",\n     \"properties\": {\n       \"name\": \"urn:ogc:def:crs:EPSG::4326\"\n     }\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Postgres Default Column Configuration Overview\nDESCRIPTION: Demonstrates different strategies for automatically setting default values in Postgres columns, including fixed values, SQL functions, and role-based presets\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Postgres defaults: configure default values, using fixed values or simple SQL functions, for columns in the table definition. E.g. an auto-incrementing `id`, a `created_at` timestamp, etc.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Custom SQL functions: set up Postgres triggers which run custom SQL functions/stored procedures to set the values of certain columns on inserts/updates on the table.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Role based column presets: set up presets, using session variables or fixed values, that are applied when a row is created/updated with a particular user role.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Created_at / updated_at timestamps: set up `created_at` and `updated_at` timestamp values.\n```\n\n----------------------------------------\n\nTITLE: Defining UserLogin Mutation in GraphQL for Hasura Action\nDESCRIPTION: Illustrates how to define a GraphQL mutation for user login as a Hasura action, including input arguments and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Mutation {\n  UserLogin(username: String!, password: String!): UserInfo\n}\n\ntype UserInfo {\n  accessToken: String!\n  userId: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScheduledEventStatus Schema in Hasura\nDESCRIPTION: Enumerates the possible statuses for scheduled events in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"scheduled\" | \"locked\" | \"delivered\" | \"error\" | \"dead\"\n```\n\n----------------------------------------\n\nTITLE: Using TableAggOpOrderBy in GraphQL Queries\nDESCRIPTION: This example shows how to use TableAggOpOrderBy to order aggregate query results based on the sum of a specific column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nquery AggregateOrderBy {\n  orders_aggregate(order_by: { sum_total_price: desc }) {\n    aggregate {\n      sum {\n        total_price\n      }\n    }\n    nodes {\n      customer_id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MS SQL Server Read Replicas via Metadata API\nDESCRIPTION: HTTP request using the Metadata API to add read replicas to an MS SQL Server database in Hasura. The request includes the primary database connection and read replica configuration with environment variables and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"mssql_add_source\",\n  \"args\":{\n    \"name\":\"<db_name>\",\n    \"replace_configuration\":true,\n    \"configuration\":{\n      \"connection_info\":{\n        \"connection_string\":{\n          \"from_env\":\"<DATABASE_URL_ENV>\"\n        },\n        \"pool_settings\":{\n          \"max_connections\":50,\n          \"idle_timeout\":180\n        },\n        \"read_replicas\":[\n          {\n            \"connection_string\":{\n              \"from_env\":\"<DATABASE_REPLICA_URL_ENV>\"\n            },\n            \"pool_settings\":{\n              \"idle_timeout\":180,\n              \"max_connections\":50\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Time-Based Filtering to Event Data Cleanup in SQL\nDESCRIPTION: SQL example showing how to add time-based conditions to cleanup queries, allowing retention of recent data while removing older entries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- units can be 'minutes', 'hours', 'days', 'months', 'years'\ncreated_at < now() - interval '<x> <units>'\n```\n\n----------------------------------------\n\nTITLE: Using @include Directive in Hasura GraphQL Query\nDESCRIPTION: This example shows how to use the @include directive to conditionally include a field in the query result based on a boolean variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery getArticles($with_publisher: Boolean!) {\n  articles {\n    title\n    publisher @include(if: $with_publisher)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating View via API Request\nDESCRIPTION: API method to create a database view using the schema_run_sql Metadata API endpoint for MS SQL Server\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/views.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db-name>\",\n    \"sql\": \"<create view statement>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MS SQL Server Read Replicas via CLI\nDESCRIPTION: YAML configuration to add read replicas for an MS SQL Server database in Hasura's metadata. The configuration defines the primary database connection and read replica configuration with connection details and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db-name>\n  kind: mssql\n  configuration:\n    connection_info:\n      connection_string:\n        from_env: <DATABASE_URL_ENV>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n    read_replicas:\n      - connection_string:\n          from_env: <DATABASE_REPLICA_URL_ENV>\n        pool_settings:\n          idle_timeout: 25,\n          max_connections: 100\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Database Relationship in YAML for Hasura CLI\nDESCRIPTION: This snippet shows how to define a remote database relationship in a YAML file for the Hasura CLI. It specifies the dataset, names, and field mappings required to connect the source and target tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  dataset: source\n  name: author\nremote_relationships:\n  - name: articles\n    definition:\n      to_source:\n        field_mapping:\n          id: author_id\n        relationship_type: array\n        source: bq-target\n        table:\n          dataset: target\n          name: articles\n```\n\n----------------------------------------\n\nTITLE: Dropping an Update Permission using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to drop an existing update permission for a specific role on a table using the Hasura Metadata API. The API endpoint is `/v1/metadata` and the `pg_drop_update_permission` type is used. The required parameters are `table` name, `role` name, and optional `source` database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_drop_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Required Google Cloud Services\nDESCRIPTION: Command to enable necessary Google Cloud services for Hasura deployment including Cloud Run, Cloud SQL, Service Networking, and Secret Manager.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable run.googleapis.com sqladmin.googleapis.com servicenetworking.googleapis.com secretmanager.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_intersects Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values that intersect with a specified polygon using the _st_intersects operator. Works with both geometry and geography columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_intersects: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on Invoice aggregate functions, including count and nested aggregations for scalar fields and object relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_aggregate_order_by @oneOf {\n  _count: order_by # WARN: Potential name clash here\n  # Scalar fields\n  InvoiceId: Int_aggregate_order_by\n  InvoiceDate: Date_aggregate_order_by\n  CustomerId: Int_aggregate_order_by\n  Total: Decimal_aggregate_order_by\n\n  # Nested object fields/object relationships\n  Address: Address_aggregate_order_by\n  Customer: Customer_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Query Schema Structure for Schema/Metadata API\nDESCRIPTION: JSON schema showing the required fields for a query request including type, args, and optional version parameter. Used for both schema and metadata operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": String,     // Required: Type of the query\n  \"args\": JSON Value, // Required: The arguments to the query\n  \"version\": Integer  // Optional: Version of the API (default: 1)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body Transformation (CLI)\nDESCRIPTION: YAML configuration for transforming request body to application/json format using Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: POST\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params:\n      query_param: xxxxx\n    body:\n      action: 'transform'\n      template: '{\"username\": {{$body.table.username}}}'\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Models with API\nDESCRIPTION: This HTTP POST request example shows how to add logical models using Hasura's API. It requires you to specify the source, model name, and details of its fields. Prerequisite: access to Hasura API and admin privileges.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<BigQuery field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Foreign Key Constraint with Cascade\nDESCRIPTION: This snippet demonstrates how to drop a foreign key constraint while using cascade to remove dependent objects. The request is structured similarly to previous examples but includes the `cascade` option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"ALTER TABLE article DROP CONSTRAINT article_author_id_fkey\",\n        \"cascade\" : true\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"result_type\": \"CommandOk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Foreign Keys in Hasura (CLI YAML)\nDESCRIPTION: This CLI YAML snippet is used for defining object relationships when tracking a foreign key in Hasura GraphQL Engine. It specifies the tables involved and the foreign key that defines the relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n- table:\n    schema: dbo\n    name: <table name>\n  object_relationships:\n    - name: <relationship name>\n      using:\n        foreign_key_constraint_on: <reference column>\n```\n\n----------------------------------------\n\nTITLE: Dropping a Relationship in Hasura\nDESCRIPTION: Removes a relationship (object or array) named 'article_detail' from the 'article' table. If other objects depend on this relationship, the request will fail unless cascade is set to true.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"relationship\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query with Multi-byte Character in Rust\nDESCRIPTION: This code shows the parsed AST (Abstract Syntax Tree) of a GraphQL query in Rust. It represents a query with a field named 'field' that takes an argument 'arg' containing a string with a multi-byte character (ਊ). The structure includes source position information for each element in the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/1113_parses_multibyte_chars.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"field\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"arg\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 11,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: SimpleValue(\n                                                                            String(\n                                                                                \"Has a ਊ multi-byte character.\",\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 14,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 49,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 2,\n                                                                    col: 9,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 2,\n                                                                    col: 49,\n                                                                },\n                                                            },\n                                                        ],\n                                                        start: SourcePosition {\n                                                            line: 2,\n                                                            col: 8,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 2,\n                                                            col: 50,\n                                                        },\n                                                    },\n                                                ),\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 7,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 2,\n                                col: 1,\n                            },\n                            end: SourcePosition {\n                                line: 2,\n                                col: 52,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 2,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 2,\n                    col: 52,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Schema for Interpolated Queries\nDESCRIPTION: Example JSON metadata configuration demonstrating native query setup with logical models and relationships in Hasura GraphQL Engine\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_version\": 9,\n  \"metadata\": {\n    \"version\": 3,\n    \"sources\": [\n      {\n        \"name\": \"chinook\",\n        \"kind\": \"sqlite\",\n        \"tables\": [\n          {\n            \"table\": [\n              \"Artist\"\n            ]\n          }\n        ],\n        \"native_queries\": [\n          {\n            \"arguments\": {},\n            \"code\": \"select 'db0d9bd6-ca4e-4eb4-8798-944b9536eb3d' as a\",\n            \"object_relationships\": [\n              {\n                \"name\": \"quux\",\n                \"using\": {\n                  \"column_mapping\": {\n                    \"a\": \"x\"\n                  },\n                  \"insertion_order\": null,\n                  \"remote_native_query\": \"native_quux\"\n                }\n              }\n            ],\n            \"returns\": \"logical_baz\",\n            \"root_field_name\": \"native_baz\"\n          },\n          {\n            \"arguments\": {\n              \"y\": {\n                \"nullable\": false,\n                \"type\": \"Boolean\"\n              }\n            },\n            \"code\": \"select 'db0d9bd6-ca4e-4eb4-8798-944b9536eb3d' as x /* {{y}} */\",\n            \"returns\": \"logical_quux\",\n            \"root_field_name\": \"native_quux\"\n          }\n        ],\n        \"logical_models\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"a\",\n                \"type\": {\n                  \"nullable\": false,\n                  \"scalar\": \"String\"\n                }\n              },\n              {\n                \"name\": \"quux\",\n                \"type\": {\n                  \"logical_model\": \"logical_quux\",\n                  \"nullable\": true\n                }\n              }\n            ],\n            \"name\": \"logical_baz\"\n          },\n          {\n            \"fields\": [\n              {\n                \"name\": \"x\",\n                \"type\": {\n                  \"nullable\": false,\n                  \"scalar\": \"String\"\n                }\n              }\n            ],\n            \"name\": \"logical_quux\"\n          }\n        ],\n        \"configuration\": {\n          \"template\": null,\n          \"timeout\": null,\n          \"value\": {\n            \"db\": \"./dataset_clones/db.chinook.sqlite\"\n          }\n        }\n      }\n    ],\n    \"backend_configs\": {\n      \"dataconnector\": {\n        \"sqlite\": {\n          \"uri\": \"http://localhost:8100\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Postgres Constraint Names using SQL\nDESCRIPTION: This SQL query can be used to fetch details of unique or primary key constraints on a table by specifying the table name and schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/upsert.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"information_schema\".\"table_constraints\" WHERE table_name='<table>' AND table_schema='<schema>';\n```\n\n----------------------------------------\n\nTITLE: Resetting Migration History on Hasura Server\nDESCRIPTION: This snippet describes the command used to delete all migration history on the server for a specific database. It uses the Hasura CLI to remove all migrations on the server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# reset migrations on server only\n\nhasura migrate delete --all --server --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Seed Creation Examples\nDESCRIPTION: Examples showing different ways to create seed files, including creating empty seeds and exporting data from existing tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new seed file and use editor to add SQL:\nhasura seed create new_table_seed\n\n# Create a new seed by exporting data from tables already present in the database:\nhasura seed create table1_seed --from-table table1\n\n# Export data from multiple tables:\nhasura seed create tables_seed --from-table table1 --from-table table2\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex as an OpenID Connect Provider for SAML Authentication\nDESCRIPTION: A sample configuration file for Dex that sets up SAML authentication with Auth0. It configures the issuer URL, storage settings, HTTP endpoints, OAuth2 parameters, and SAML connector details for integration with an identity provider.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/adfs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# The base path of dex and the external name of the OpenID Connect service.\n# This is the canonical URL that all clients MUST use to refer to dex. If a\n# path is provided, dex's HTTP service will listen at a non-root URL.\n# Public URL that dex is available at\nissuer: http://localhost:5556/dex\n\n# The storage configuration determines where dex stores its state. Supported\n# options include SQL flavors and Kubernetes third party resources.\n#\n# See the documentation (https://dexidp.io/docs/storage/) for further information.\nstorage:\n  type: sqlite3\n  config:\n    file: /var/dex/dex.db\n\n# Configuration for the HTTP endpoints.\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n  # Uncomment for HTTPS options.\n  # https: 127.0.0.1:5554\n  # tlsCert: /etc/dex/tls.crt\n  # tlsKey: /etc/dex/tls.key\n\n# Uncomment this block to enable configuration for the expiration time durations.\n# Is possible to specify units using only s, m and h suffixes.\n# expiry:\n#   deviceRequests: \"5m\"\n#   signingKeys: \"6h\"\n#   idTokens: \"24h\"\n#   refreshTokens:\n#     reuseInterval: \"3s\"\n#     validIfNotUsedFor: \"2160h\" # 90 days\n#     absoluteLifetime: \"3960h\" # 165 days\n\n# Options for controlling the logger.\n# logger:\n#   level: \"debug\"\n#   format: \"text\" # can also be \"json\"\n\noauth2:\n  responseTypes: ['code'] # also allowed are \"token\" and \"id_token\"\n  skipApprovalScreen: true\n#\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n\nconnectors:\n  - type: saml\n    id: saml-auth0\n    name: Auth0 SAML\n    config:\n      ssoURL: https://sts.example.local/adfs/ls/\n      ca: /etc/dex/adfs-saml.cer\n      # insecureSkipSignatureValidation: true\n      redirectURI: http://localhost:5556/dex/callback\n      usernameAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n      emailAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n      groupsAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role\n      entityIssuer: https://sts.example.local/adfs/ls/\n```\n\n----------------------------------------\n\nTITLE: UpdatePet Mutation Definition\nDESCRIPTION: Isolated GraphQL mutation definition for the updatePet operation extracted from the full schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/openapi-to-hasura-single-action.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updatePet(petInput: PetInput!): Pet\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema Relationship in YAML\nDESCRIPTION: This YAML snippet shows how to configure a Remote Schema relationship in the metadata file. It defines a relationship named 'user' between the 'order-remote-schema' and the 'user' table in the 'pg1' database source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-db-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: order-remote-schema\n  definition:\n    url: https://remote-schema-endpoint.com\n  remote_relationships:\n    - relationships:\n        - name: user\n          definition:\n            to_source:\n              relationship_type: object\n              source: pg1\n              table:\n                schema: public\n                name: user\n              field_mapping:\n                user_id: id\n```\n\n----------------------------------------\n\nTITLE: ChatGPT Prompt Template for Content Moderation\nDESCRIPTION: Defines the prompt template used to instruct ChatGPT for content moderation of customer reviews\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYou are a content moderator for SuperStore.com. A customer has left a review for a product they purchased. Your response should only be a JSON object with two properties: \"feedback\" and \"is_appropriate\". The \"feedback\" property should be a string containing your response to the customer only if the review \"is_appropriate\" value is false. The feedback should be on why their review was flagged as inappropriate, not a response to their review. The \"is_appropriate\" property should be a boolean indicating whether or not the review contains inappropriate content. The review is as follows:\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI\nDESCRIPTION: Command to apply metadata changes after configuring Health Check in the YAML file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/health-checks/source-health-check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Handling Dependent Objects Error in run_sql API\nDESCRIPTION: Example showing the error when attempting to drop a column that has metadata dependencies. The operation fails because a permission depends on the column being dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"ALTER TABLE author DROP COLUMN name\"\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 BAD REQUEST\nContent-Type: application/json\n\n{\n    \"path\": \"$.args\",\n    \"error\": \"cannot drop due to the following dependent objects: permission author.user.select\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Table for Articles\nDESCRIPTION: This snippet creates an SQL table named 'article' with columns for id, title, date, and content, and inserts sample data into it. It is essential to have the articles table set up for subsequent logical models and native queries to work. The table schema must include integer and text types for this example to function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE article(\n  id SERIAL NOT NULL PRIMARY KEY,\n  title TEXT NOT NULL,\n  date DATE NOT NULL,\n  content TEXT NOT NULL\n);\n\nINSERT INTO article(title, date, content) VALUES\n  ('You will not believe', '2023-01-01', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Facillimum id quidem est, inquam. Esse enim, nisi eris, non potes. Oratio me istius philosophi non offendit; Idemne, quod iucunde? Quid est enim aliud esse versutum? Non autem hoc: igitur ne illud quidem.'),\n  ('Ten things that', '2023-02-02', 'Illi enim inter se dissentiunt. Sedulo, inquam, faciam. Simus igitur contenti his.'),\n  ('Did you know', '2023-03-03', 'Ratio quidem vestra sic cogit. Duo Reges: constructio interrete. An nisi populari fama? Erat enim res aperta. Apparet statim, quae sint officia, quae actiones. Tum mihi Piso: Quid ergo?'),\n  ('They just cannot', '2023-04-04', 'Itaque hic ipse iam pridem est reiectus; Quod quidem iam fit etiam in Academia. Negare non possum. Quis non odit sordidos, vanos, leves, futtiles?'),\n  ('What on earth', '2023-05-05', 'Venit ad extremum; At certe gravius. Efficiens dici potest. Rhetorice igitur, inquam, nos mavis quam dialectice disputare? Nunc de hominis summo bono quaeritur; Rationis enim perfectio est virtus;');\n```\n\n----------------------------------------\n\nTITLE: Example Request Context in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a request context object, including headers, session variables, and GraphQL query parameters. This context is used in connection templates for dynamic routing decisions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"x-hasura-role\": \"user\",\n    ...\n  },\n  \"session\": {\n    \"x-hasura-role\": \"user\",\n    \"x-hasura-org\": \"hasura\",\n    ...\n  },\n  \"query\": {\n    \"operation_type\": \"query\",\n    \"operation_name\": \"MyQuery\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Relationship in YAML for Hasura Metadata\nDESCRIPTION: This YAML snippet defines a Remote Schema relationship within the Hasura metadata for a table named 'order'. The relationship is named 'user' and maps the 'user_id' field to the corresponding argument in the remote schema 'user-remote-schema'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: order\n  remote_relationships:\n    - name: user\n      definition:\n        remote_field:\n          user:\n            arguments:\n              id: $user_id\n        hasura_fields:\n          - user_id\n        remote_schema: user-remote-schema\n\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for GraphQL Engine with MSSQL backend\nDESCRIPTION: Docker Compose configuration for running Hasura GraphQL Engine with Microsoft SQL Server as the database backend. It sets up both the MSSQL server and GraphQL Engine with proper environment variables and networking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/commit_diff.txt#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  mssql:\n    image: mcr.microsoft.com/mssql/server:2019-latest\n    restart: always\n    volumes:\n    - db_data:/var/opt/mssql\n    environment:\n      ACCEPT_EULA: Y\n      SA_PASSWORD: \"StrongP@ssw0rd\"\n      MSSQL_PID: Express\n  graphql-engine:\n    image: hasura/graphql-engine:v2.0.10.cli-migrations-v3\n    ports:\n    - \"8080:8080\"\n    depends_on:\n    - \"mssql\"\n    restart: always\n    environment:\n      ## postgres database to store Hasura metadata\n      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      ## this env var can be used to add the above MSSQL database to Hasura as a data source. this can be removed/updated based on your needs\n      HASURA_GRAPHQL_METADATA_DATASOURCE_URL: \"Driver={ODBC Driver 17 for SQL Server};Server=mssql;Database=master;Uid=sa;Pwd=StrongP@ssw0rd;\"\n      ## enable the console served by server\n      HASURA_GRAPHQL_ENABLE_CONSOLE: \"true\" # set to \"false\" to disable console\n      ## enable debugging mode. It is recommended to disable this in production\n      HASURA_GRAPHQL_DEV_MODE: \"true\"\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log\n      ## uncomment next line to set an admin secret\n      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship with Manual Configuration\nDESCRIPTION: Defines a manual array relationship between an author table and an article_detail view using column mapping for views without direct foreign key constraints\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"article_details\",\n        \"source\": \"default\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"author_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura Enterprise with Oracle\nDESCRIPTION: Commands to download the Docker Compose manifest file needed to deploy Hasura Enterprise Edition with Oracle support.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/oracle/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/oracle/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Handle Product Description AI SEO Request (Python)\nDESCRIPTION: This route handles the incoming request from the Hasura Event Trigger. It extracts the product description and ID from the request body, calls the `improve_description` function (presumably an AI service) to improve the description, and then calls the `update_product_description` function to update the product in Hasura. Requires Flask and expects a `secret-authorization-string` header for authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/product-description-ai-seo\", methods=[\"POST\"])\nasync def improve_product_description_ai_seo():\n   # Check secret header permission\n  auth_header = request.headers.get('secret-authorization-string')\n  if auth_header != 'super_secret_string_123':\n      print('Unauthorized')\n      return jsonify({'message': 'Unauthorized'}), 401\n\n  try:\n      # Extract description and id from the incoming request\n      data_new = request.get_json()[\"event\"][\"data\"][\"new\"]\n      description = data_new[\"description\"]\n      product_id = data_new[\"id\"]\n  except Exception as e:\n      print(\"Bad request: no description or id\\n\")\n      return jsonify({'message': 'Bad request'}), 400\n\n  print(f\"description: {description}\")\n\n  # Get the improved description from OpenAI\n  improved_description = await improve_description(description)\n  if improve_description == None:\n      return jsonify({'message': 'An error occurred'}), 500\n\n  print(f\"Improved description: {improved_description}\")\n\n  # Update the product description in Hasura\n  updated_product_id = await update_product_description(product_id,improved_description)\n  if updated_product_id == None:\n      return jsonify({'message': 'An error occurred'}), 500\n  # Return a success response\n  print('Success\\n')\n  return jsonify({'message': 'Success'}), 200\n```\n\n----------------------------------------\n\nTITLE: Querying Across Remote Database Relationships with GraphQL\nDESCRIPTION: GraphQL query example that demonstrates fetching data across remote database relationships. The query retrieves orders and joins them with user data from a different database source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  order {\n    id\n    user_id\n    user {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining distinct_on argument with employees table in GraphQL\nDESCRIPTION: Shows the GraphQL schema definition for the distinct_on argument when querying the employees table. The distinct_on parameter accepts an array of column names to filter distinct values by.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/distinct-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nemployees (\n  distinct_on: [employees_select_column]\n  order_by: [employees_order_by]\n): [employees]!\n\n# select column enum type for \"employees\" table\nenum employees_select_column {\n  id\n  name\n  department\n  salary\n}\n```\n\n----------------------------------------\n\nTITLE: Jaeger Data Source Configuration for Grafana\nDESCRIPTION: Configuration for connecting Jaeger data source with log sources in Grafana for trace correlation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\n  - name: Jaeger\n    type: jaeger\n    url: http://jaeger:16686/\n    jsonData:\n      tracesToLogsV2:\n        datasourceUid: 'Loki'\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n        filterByTraceID: false\n        filterBySpanID: false\n        customQuery: true\n        query: '{exporter=\"OTLP\"} | json | traceid=`${__span.traceId}`'\n      traceQuery:\n        timeShiftEnabled: true\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n```\n\n----------------------------------------\n\nTITLE: Downloading Kubernetes Deployment File\nDESCRIPTION: Command to download the Kubernetes deployment YAML file for Hasura Enterprise Edition from the official GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/enterprise/kubernetes/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Models in YAML\nDESCRIPTION: This YAML snippet shows how to define a logical model in the Hasura metadata file. It includes specifying the model name and field properties. This model serves as a schema for returned data. Requires modifications in `databases.yaml`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<BigQuery field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for Google Workspace SSO\nDESCRIPTION: YAML configuration for Dex to enable Google Workspace SSO. It includes settings for the issuer, static clients, and Google connector configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/google-workspace.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: http://127.0.0.1:5556/dex\n\nstorage:\n  type: sqlite3\n  config:\n    file: /var/dex/dex.db\n\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n\noauth2:\n  responseTypes: ['code']\n  skipApprovalScreen: true\n\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n\nconnectors:\n  - type: google\n    id: google\n    name: Google\n    config:\n      issuer: https://accounts.google.com\n      clientID: <YOUR_CLIENT_ID>\n      clientSecret: <YOUR_CLIENT_SECRET>\n      redirectURI: http://127.0.0.1:5556/dex/callback\n      hostedDomains:\n        - company.com\n      groups:\n        - hasura-admin@company.com\n      serviceAccountFilePath: /dex/google-sa.json\n      adminEmail: shahidh@hasura.io\n```\n\n----------------------------------------\n\nTITLE: Prometheus Web Authentication Configuration\nDESCRIPTION: YAML configuration for setting up basic authentication for the Prometheus web interface using a hashed password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nbasic_auth_users:\n  admin: 'your new hashed value '\n```\n\n----------------------------------------\n\nTITLE: Inserting users into the users table in Postgres\nDESCRIPTION: This SQL snippet inserts three rows into the `users` table, assigning specific roles to each user. The roles are represented as strings, without any explicit enum type constraint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"INSERT INTO users (name, role) VALUES\\n  ('Alyssa', 'administrator'),\\n  ('Ben', 'moderator'),\\n  ('Gerald', 'user');\"\n```\n\n----------------------------------------\n\nTITLE: Tracking a Snowflake Function using Metadata API in HTTP\nDESCRIPTION: This HTTP request demonstrates how to track a Snowflake function and expose it over the GraphQL API using the snowflake_track_function Metadata API. It requires specifying the source database, schema, function name, and the table type that the function returns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/custom-functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_function\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"schema\": \"public\",\n    \"name\": [\"name\", \"of\", \"function\"],\n    \"configuration\": {\n      \"response\": {\"type\": \"table\", \"table\": TABLE_NAME}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Stored Procedure using YAML in Hasura CLI\nDESCRIPTION: This YAML snippet demonstrates how to track a stored procedure in the Hasura metadata file. It includes configuration for exposing the procedure as a query, specifying arguments, and setting the return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstored_procedures:\n  - stored_procedure:\n      schema: '<schema name>'\n      name: '<procedure name>'\n    configuration:\n      exposed_as: query\n      custom_name: '<custom name>'\n    arguments:\n      '<argument name>':\n        type: '<SQL Server field type>'\n        nullable: false | true\n        description: '<optional argument description>'\n    returns: '<logical model name>'\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret in Hasura\nDESCRIPTION: Example JSON configuration for JWT authentication using HS256 encryption type with a specified key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"HS256\", \"key\": \"3bd561c37d214b4496d09049fadc542c\"}\n```\n\n----------------------------------------\n\nTITLE: Filter by Array Relationship Query\nDESCRIPTION: Query to fetch authors who have written at least one article with a rating of 1.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      articles: {rating: {_eq: 1}}\n    }\n  ) {\n    id\n    name\n    articles {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Host from TLS Allowlist using HTTP POST\nDESCRIPTION: API request to remove a host from the TLS allowlist. Requires the host and optionally the suffix that was previously added to the allowlist.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/network.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_host_from_tls_allowlist\",\n    \"args\": {\n        \"host\": \"graphql.hasura.io\",\n        \"suffix\": \"4183\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining authors and articles tables in SQL\nDESCRIPTION: This SQL snippet defines the `authors` and `articles` tables. The `authors` table has `id` and `name` columns, while the `articles` table includes `id`, `title`, `author_id`, and `body` columns. These tables are used to illustrate data validation examples using Hasura permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"authors (id int, name text)\narticles (id int, title text, author_id int, body text)\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Operation Query\nDESCRIPTION: Demonstrates a named GraphQL query operation called 'getPollOptions' that retrieves poll options with their ID, name and description.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud-monitoring/operations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPollOptions (\n  poll {\n    options {\n      id\n      name\n      description\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Collection from Allowlist - HTTP POST Request\nDESCRIPTION: Removes a query collection from the allowlist. Only requires the collection name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_collection_from_allowlist\",\n    \"args\": {\n         \"collection\": \"my_collection_1\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking Tables with Error Handling via pg_untrack_tables\nDESCRIPTION: This snippet demonstrates how to untrack multiple tables/views with explicit error handling.  The `allow_warnings` flag is set to `false`, which ensures that if any table fails to untrack, the entire operation will fail. This provides an all-or-nothing approach to untracking tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_untrack_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\",\n        \"cascade\": true\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logical Models in YAML\nDESCRIPTION: This YAML snippet defines a logical model 'article_excerpt' in a Hasura metadata configuration file. The logical model structure includes fields for id, title, date, and excerpt, aligning with data types in a SQL table and is crucial for constructing the GraphQL schema that interfaces with SQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article_excerpt\n    fields:\n      id:\n        type: integer\n      title:\n        type: text\n      date:\n        type: date\n      excerpt:\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Untrack BigQuery Logical Model\nDESCRIPTION: API endpoint to remove a logical model from the GraphQL schema for BigQuery source. Requires model name and optional source specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"bigquery_untrack_logical_model\",\n    \"args\": {\n      \"source\": \"default\",\n      \"name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Server Delete Operation with Table Variables\nDESCRIPTION: Example SQL structure for implementing delete operations with returning data using table variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-delete-mutations.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nWITH with_alias AS (\n  SELECT * FROM table_name WHERE <where-from-delete-query>\n)\n<select statement generated by mkMutationOutputSelect function>\n```\n\n----------------------------------------\n\nTITLE: Adding Database Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to configure a database connection in a Hasura project's metadata file. It includes settings for the database name, type, connection info, and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db_name>\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: <DB_URL_ENV_VAR>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n        retries: 1\n  tables: []\n  functions: []\n```\n\n----------------------------------------\n\nTITLE: Dropping Action Permission with HTTP POST\nDESCRIPTION: Removes a permission previously defined for the 'create_user' action and 'user' role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/actions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"drop_action_permission\",\n  \"args\": {\n    \"action\": \"create_user\",\n    \"role\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Update Mutation Schema in GraphQL\nDESCRIPTION: The schema definition for update mutations automatically generated by Hasura for a table named 'article'. It shows both the multi-row update operation and the single-object update by primary key operation introduced in v1.2.0.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_article (\n  _inc: article_inc_input\n  _set: article_set_input\n  where: article_bool_exp!\n): article_mutation_response\n\n# response of any mutation on the table \"article\"\ntype article_mutation_response {\n  # number of affected rows by the mutation\n  affected_rows: Int!\n  # data of the affected rows by the mutation\n  returning: [article!]!\n}\n\n# single object update (supported from v1.2.0)\nupdate_article_by_pk (\n  _inc: article_inc_input\n  _set: article_set_input\n  # primary key columns arg\n  pk_columns: article_pk_columns_input!\n): article\n```\n\n----------------------------------------\n\nTITLE: Pausing Event Trigger Cleanups - HTTP\nDESCRIPTION: This HTTP POST request pauses the log cleaning process for specified event triggers that have an existing cleaner setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pause_event_trigger_cleanups\",\n  \"args\": {\n    \"event_triggers\": [\n      {\n        \"source_name\": \"default\",\n        \"event_triggers\": [\"sample_trigger\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Read Replicas Using Environment Variables (v1.3)\nDESCRIPTION: Environment variable configuration for adding PostgreSQL read replica URLs in Hasura v1.3 projects. This approach is only supported for v1.3 projects and not for v2.0 and above.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_GRAPHQL_READ_REPLICA_URLS=postgres://user:password@replica-host:5432/db\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata for Object Relationship Using Hasura CLI\nDESCRIPTION: This command applies the metadata changes to the Hasura project, which includes the configuration for the object relationship defined in the tables.yaml.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Docker Image Tags Format for Hasura GraphQL Engine\nDESCRIPTION: Defines the supported Docker image tag formats for the production Hasura GraphQL Engine image, including version-specific tags and migration variants.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `<version>`, `latest`\n- `<version>.cli-migrations-v2`, `latest.cli-migrations-v2`\n- `<version>.cli-migrations-v3`, `latest.cli-migrations-v3`\n```\n\n----------------------------------------\n\nTITLE: Disabling Root Fields via Metadata API\nDESCRIPTION: This HTTP snippet demonstrates how to configure root field permissions using Hasura's Metadata API by specifying the available query and subscription root fields for a role. Essential parameters include role, table, source, and the desired root fields. Adjust permissions using the API to dynamically manage access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/disabling-root-fields.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\" : \"pg_create_select_permission\",\n  \"args\" : {\n    \"table\" : \"users\",\n    \"role\" : \"user\",\n    \"source\": \"default\",\n    \"permission\" : {\n      \"columns\" : \"*\",\n      \"filter\" : {\n        \"is_public\": true\n      },\n      \"query_root_fields\": [\"select_by_pk\"],\n      \"subscription_root_fields\": [\"select\", \"select_by_pk\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Event Trigger via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to delete an event trigger using the Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\" : \"<db_type_delete_event_trigger>\",\n   \"args\" : {\n        \"name\": \"author_trigger\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with GraphQL Mutation in Hasura\nDESCRIPTION: This mutation deletes a review from the database by its primary key. It takes a UUID as input and returns the ID of the deleted review as confirmation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation DeleteReview($id: uuid!) {\n  delete_reviews_by_pk(id: $id) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Processed Events from Hasura Event Log in SQL\nDESCRIPTION: SQL query to clean up only processed events (delivered or error) from the event_log table, while keeping unprocessed events intact.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.event_log\nWHERE delivered = true OR error = true;\n```\n\n----------------------------------------\n\nTITLE: Advanced Datadog Agent Configuration for Query Monitoring\nDESCRIPTION: YAML configuration for enabling query-level performance insights in Datadog. This configuration enables the Database Monitoring (DBM) feature to track normalized queries and their execution plans.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/db-observability.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninit_config:\ninstances:\n  - dbm: true\n    host: localhost\n    port: 5432\n    username: datadog\n    password: <PASSWORD>\n    tags:\n      - optional_tag\n```\n\n----------------------------------------\n\nTITLE: Including Table YAML Definitions\nDESCRIPTION: Shows how to include specific table YAML files using an `includes` statement within a main metadata file, facilitating modular management of collection definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- '!include <table_name>.yaml'\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Schema Relationship to Database in Hasura GraphQL Engine\nDESCRIPTION: This HTTP POST request updates an existing remote relationship on a Remote Schema's type to a database table. It allows modifying the relationship definition while keeping the name, source schema, and type the same.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"update_remote_schema_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"remote_schema\": \"users_api\",\n      \"type\": \"user\",\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"store_db\",\n          \"table\": \"orders\"\n          \"field_mapping\": {\n            \"id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Establish Always On Availability Group\nDESCRIPTION: Creates an Always On Availability Group on the primary SQL node configurations for high availability setups. This SQL script adds multiple replicas and specifies seeding and failover modes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE AVAILABILITY GROUP [AG1]\n      WITH (CLUSTER_TYPE = NONE)\n      FOR REPLICA ON\n      N'sqlNode1'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode1:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               ),\n      N'sqlNode2'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode2:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               ),\n      N'sqlNode3'\n            WITH (\n            ENDPOINT_URL = N'tcp://sqlNode3:5022',\n            AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,\n               SEEDING_MODE = AUTOMATIC,\n               FAILOVER_MODE = MANUAL,\n            SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)\n               );\nGO\n\nALTER AVAILABILITY GROUP [ag1] GRANT CREATE ANY DATABASE;\nGO\n```\n\n----------------------------------------\n\nTITLE: Poll System Schema Definition\nDESCRIPTION: SQL schema definition for a polling system with tables for polls, options, users, and votes to track poll responses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/ms-sql-server/use-cases.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npoll (\n  id INT PRIMARY KEY,\n  question TEXT\n)\n\noption (\n  id INT PRIMARY KEY\n  poll_id INT FOREIGN KEY REFERENCES poll(id)\n  text TEXT\n)\n\nuser (\n  id INT PRIMARY KEY\n  name TEXT\n)\n\nvote (\n  id INT PRIMARY KEY,\n  option_id INT FOREIGN KEY REFERENCES option(id),\n  user_id INT FOREIGN KEY REFERENCES user(id),\n  timestamp TIMESTAMP\n)\n```\n\n----------------------------------------\n\nTITLE: Squashing Migrations in Hasura CLI\nDESCRIPTION: Command to squash multiple migration files into a single file for better maintainability. It combines all migrations from a specified starting point into one file with a custom name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate squash --name \"<my-feature-name>\" --from <start-migration-version-timestamp-number> --database-name <database-name>\n\n# note down the version timestamp number\n```\n\n----------------------------------------\n\nTITLE: Implementing Hasura Logo HTML Snippets\nDESCRIPTION: HTML code snippets for embedding the Hasura logo in light and dark background websites. Includes responsive image elements with proper source URLs and recommended widths.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/V2-README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- For light backgrounds -->\n<a href=\"https://hasura.io\">\n  <img width=\"150px\" src=\"https://res.cloudinary.com/dh8fp23nd/image/upload/v1711457032/main-web/hasura_logo_primary_lightbg_n0xhz8.svg\" />\n</a>\n\n<!-- For dark backgrounds -->\n<a href=\"https://hasura.io\">\n  <img width=\"150px\" src=\"https://res.cloudinary.com/dh8fp23nd/image/upload/v1711457033/main-web/hasura_logo_primary_darkbg_nussjm.svg\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Connection String in Metadata\nDESCRIPTION: JSON configuration for setting up Snowflake connection using environment variables. This snippet shows how to configure the connector using metadata configuration with a template that references the environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/snowflake/getting-started/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"template\": \"{\\\"fully_qualify_all_names\\\": false, \\\"jdbc_url\\\": \\\"{{{getEnvironmentVariable(\\\"SNOWFLAKE_JDBC_URL\\\")}}}\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Tracking a Single Table in Hasura GraphQL (HTTP)\nDESCRIPTION: The snippet illustrates how to add a single table or view ('author') to the GraphQL schema with the necessary configuration in a POST request to the metadata endpoint. It uses the 'mssql_track_table' operation to achieve this.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_track_table\",\n    \"args\": {\n      \"table\": \"author\",\n      \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Column Comparison Operator in Hasura GraphQL Engine\nDESCRIPTION: This code snippet demonstrates the structure for defining a column comparison operator in Hasura GraphQL Engine metadata. It allows comparing columns of the same table or a related table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PGColumn\": {\n    \"Operator\": {\n      \"PGColumn\" | [\"$\", \"PGColumn\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Permissions Using _has_keys_any Operator in GraphQL\nDESCRIPTION: This query fetches users who have either 'admin' or 'editor' permissions using the _has_keys_any operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/jsonb-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  user {\n    id\n    name\n    permissions(where: {_has_keys_any: [\"admin\", \"editor\"]}) {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Public Author View with Filtered Fields\nDESCRIPTION: SQL view to expose only non-sensitive fields from the author table, hiding email, phone, and address\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/views.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW author_public AS\n  SELECT id, name, city\n    FROM author\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Creation Examples\nDESCRIPTION: Various examples showing different ways to create migrations, including server introspection, schema specification, and direct SQL input.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Setup migration files for the first time by introspecting a server:\nhasura migrate create \"init\" --from-server\n\n# Setup migration files for the first time by introspecting a server when there are multiple schemas:\nhasura migrate create \"init\" --from-server --schema myschema1,myschema2\n\n# Use with admin secret:\nhasura migrate create --admin-secret \"<admin-secret>\"\n\n# Setup migration files from an instance mentioned by the flag:\nhasura migrate create init --from-server --endpoint \"<endpoint>\"\n\n# Take pg_dump of schema and hasura metadata from server while specifying the schemas to include\nhasura migrate create init --from-server --schema myschema1,myschema2\n\n# Create up and down SQL migrations, providing contents as flags\nhasura migrate create migration-name --up-sql \"CREATE TABLE article(id serial NOT NULL, title text NOT NULL, content text NOT NULL);\"  --down-sql \"DROP TABLE article;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship in BigQuery using Hasura API\nDESCRIPTION: This snippet demonstrates how to create an object relationship in BigQuery using Hasura's Metadata API. The request must include necessary headers and a JSON payload specifying the source and table information, along with the relationship details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/table-relationships/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_object_relationship\",\n  \"args\": {\n    \"source\": \"bigquery\",\n    \"table\": {\n      \"dataset\": \"<dataset_name>\",\n      \"name\": \"articles\"\n    },\n    \"name\": \"author\",\n    \"using\": {\n      \"manual_configuration\": {\n        \"remote_table\": {\n          \"dataset\": \"<dataset_name>\",\n          \"name\": \"authors\"\n        },\n        \"column_mapping\": {\n          \"author_id\": \"id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Collection to Role-Based Allowlist in Hasura\nDESCRIPTION: This snippet demonstrates how to add a collection to a role-based allowlist using the Hasura Metadata API. It allows specifying which roles can access the queries in the collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_collection_to_allowlist\",\n    \"args\": {\n        \"collection\": \"role_based_query_collection\",\n        \"scope\": {\n            \"global\": false,\n            \"roles\": [\n              \"user\",\n              \"editor\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spec for POST request Example - HTTP\nDESCRIPTION: This snippet outlines the POST request that can be sent to the auth webhook, including the request body structure containing headers and a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://<your-custom-webhook>/ HTTP/1.1\nContent-Type: application/json\n\n{\n  \"headers\": {\n    \"header-key1\": \"header-value1\",\n    \"header-key2\": \"header-value2\"\n  },\n  \"request\": {\n    \"variables\": {\n      \"a\": 1\n    },\n    \"operationName\": \"UserQuery\",\n    \"query\": \"query UserQuery($a:  Int) {\\n  users(where:  {id:  {_eq:  $a}}){\\n    id\\n  }\\n}\\n\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship to Database - Hasura Metadata API\nDESCRIPTION: HTTP POST request to create a remote relationship from a Postgres table to another database. Defines field mappings between source and target tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"pg_create_remote_relationship\",\n  \"args\":{\n    \"name\": \"orders\",\n    \"source\": \"app_db\",\n    \"table\": \"users\",\n    \"definition\": {\n      \"to_source\": {\n        \"relationship_type\": \"array\",\n        \"source\": \"store_db\",\n        \"table\": \"orders\",\n        \"field_mapping\": {\n          \"id\": \"user_id\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalModelSelectPermission Schema in Hasura\nDESCRIPTION: Describes the schema for select permissions in logical models, including selectable columns and filter conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"columns\": \"PGColumn[] or '*'\",\n  \"filter\": \"BoolExp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Scalar Fields Enum in GraphQL\nDESCRIPTION: This enum defines all scalar fields available on the Customer model that can be used for grouping operations. It includes fields like CustomerId, FirstName, LastName, MobilePhone, and SupportRepId.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_88\n\nLANGUAGE: graphql\nCODE:\n```\nenum Customer_scalar_fields {\n  CustomerId\n  FirstName\n  LastName\n  MobilePhone\n  SupportRepId\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking MSSQL Native Query with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to track an MSSQL Native Query using the Hasura Metadata API. It includes the HTTP request format and JSON payload structure for the 'mssql_track_native_query' operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<mssql field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": <Native Query relationship>,\n    \"object_relationshps\": <Native Query relationship>,\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Fragment Structure in Rust\nDESCRIPTION: Represents the AST structure for GraphQL fragment spreads and inline fragments with type conditions. Includes source position tracking, directive handling, and fragment name references.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0006_selection_with_fragment_spread.txt#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nitem: FragmentSpread(\n    FragmentSpread {\n        fragment_name: Spanning {\n            item: Name(\n                \"snackSelection\",\n            ),\n            start: SourcePosition {\n                line: 8,\n                col: 6,\n            },\n            end: SourcePosition {\n                line: 8,\n                col: 19,\n            },\n        },\n        directives: [\n            Spanning {\n                item: Directive {\n                    name: Spanning {\n                        item: Name(\n                            \"deprecated\",\n                        ),\n                        start: SourcePosition {\n                            line: 8,\n                            col: 22,\n                        },\n                        end: SourcePosition {\n                            line: 8,\n                            col: 31,\n                        },\n                    },\n                    arguments: None,\n                },\n                start: SourcePosition {\n                    line: 8,\n                    col: 21,\n                },\n                end: SourcePosition {\n                    line: 8,\n                    col: 31,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Untracking Logical Model via API\nDESCRIPTION: This HTTP request shows how to remove a logical model using the Hasura metadata API. It requires specifying the source and name of the logical model to be untracked.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking a Logical Model via API\nDESCRIPTION: This snippet demonstrates how to untrack a Logical Model using the Hasura Metadata API through an HTTP POST request. The request specifies the model's name to be removed and the data source it belongs to.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_untrack_logical_model\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"default\\\",\\n    \\\"name\\\": \\\"<name>\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example MariaDB JDBC Connection URLs for Hasura Cloud\nDESCRIPTION: Provides practical examples of MariaDB JDBC connection URLs, including connecting to a remote host using default port 3306 and connecting to a local database on a custom port 4533. These examples demonstrate how to format actual connection strings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/cloud.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mariadb://myhost.mycompany.com/mariadbtest?user=abc&password=pqr  # assuming the default port 3306\njdbc:mariadb://localhost:4533/mariadbtest?user=abc&password=pqr        # assuming MariaDB is running on port 4533\n```\n\n----------------------------------------\n\nTITLE: Tracking BigQuery Native Query with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to track a BigQuery Native Query using the Hasura Metadata API. It includes the HTTP request format and JSON payload structure for the 'bigquery_track_native_query' operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<bigquery field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": <Native Query relationship>,\n    \"object_relationshps\": <Native Query relationship>,\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Action with Kriti Template via API\nDESCRIPTION: Example of creating a Hasura action with a Kriti template that transforms request payload using the API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/kriti-templating.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_action\",\n  \"args\": {\n    \"name\": \"actionName\",\n    \"definition\": {\n      \"arguments\": [\n        {\n          \"name\": \"arg1\",\n          \"type\": \"SampleInput!\"\n        }\n      ],\n      \"kind\": \"synchronous\",\n      \"output_type\": \"SampleOutput\",\n      \"handler\": \"http://httpbin.org\",\n      \"type\": \"mutation\",\n      \"headers\": [],\n      \"timeout\": null,\n      \"request_transform\": {\n        \"version\": 2,\n        \"template_engine\": \"Kriti\",\n        \"method\": null,\n        \"query_params\": {},\n        \"body\": {\n          \"action\": \"transform\",\n          \"template\": \"{\\n \\\"users\\\": {\\n \\\"name\\\": {{$body.input.arg1.username}},\\n \\\"password\\\": {{$body.input.arg1.password}}\\n }\\n}\"\n        },\n        \"content_type\": \"application/json\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Schemas Definition\nDESCRIPTION: JSON schema for Hasura remote schemas configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/RemoteSchema\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Generation in Haskell for Apollo Federation\nDESCRIPTION: Haskell implementation for generating Schema Definition Language (SDL) from schema introspection data, necessary for Apollo Federation integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ngetSchemaDocument:: G.SchemaIntrospection -> G.SchemaDocument\ngetSchemaDocument (G.SchemaIntrospection typeDefMap) =\n  G.SchemaDocument completeSchema\n  where\n    allTypeDefns = map G.TypeSystemDefinitionType (Map.elems typeDefMap)\n    rootOpTypeDefns = getRootOpTypeDefns -- define this\n    completeSchema = rootOpTypeDefns : allTypeDefns\n```\n\nLANGUAGE: haskell\nCODE:\n```\ngenerateSDL :: G.SchemaIntrospection -> Text\ngenerateSDL = Builder.run . Printer.schemaDocument . getSchemaDocument\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection String Format for Azure Cosmos DB\nDESCRIPTION: The structure of the database connection URL for connecting Hasura to an Azure Cosmos DB for PostgreSQL. This URL includes the username, password, host, port, database name, and SSL mode requirement.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/azure-cosmos.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://<username>:<your_password>@<host>:<port>/<db_name>?sslmode=require\n```\n\n----------------------------------------\n\nTITLE: Fetching Authors with 5-Rated Articles in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to fetch all authors and include only their articles with a rating of 5.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors {\n    id\n    name\n    articles(where: {rating: {_eq: 5}}) {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Setup and Data Insertion on Primary Node\nDESCRIPTION: Executes SQL commands to create a new database and table, populate data, and integrate it into the availability group, ensuring replication to secondary nodes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE agtestdb;\nGO\nALTER DATABASE agtestdb SET RECOVERY FULL;\nGO\nBACKUP DATABASE agtestdb TO DISK = '/var/opt/mssql/data/agtestdb.bak';\nGO\n\nALTER AVAILABILITY GROUP [ag1] ADD DATABASE [agtestdb];\nGO\n\nUSE agtestdb;\nGO\n\nCREATE TABLE inventory (id INT, name NVARCHAR(50), quantity INT);\nGO\nINSERT INTO inventory VALUES (1, 'banana', 150); INSERT INTO Inventory VALUES (2, 'orange', 154);\nGO\n```\n\n----------------------------------------\n\nTITLE: Function Configuration Schema\nDESCRIPTION: YAML schema showing the new configuration options for function customization including custom_name and custom_root_fields\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfunctions:\n- function: function_name\n  configuration:\n    session_argument: ...\n    exposed_as: ...\n    custom_name: a custom graphql compliant name\n    custom_root_fields:\n      function: FunctionName\n      function_aggregate: SomeOtherName\n  permissions: ...\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Log Structure in Hasura\nDESCRIPTION: Example of an error HTTP request log structure showing validation failure details, query information, and error specifics. Includes the original query that caused the error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-05-29T15:22:37.834+0530\",\n  \"level\": \"error\",\n  \"type\": \"http-log\",\n  \"detail\": {\n    \"operation\": {\n      \"query_execution_time\": 0.000656144,\n      \"user_vars\": {\n        \"x-hasura-role\": \"user\",\n        \"x-hasura-user-id\": \"1\"\n      },\n      \"error\": {\n        \"path\": \"$.selectionSet.profile.selectionSet.usernamex\",\n        \"error\": \"field 'usernamex' not found in type: 'profile'\",\n        \"code\": \"validation-failed\"\n      },\n      \"request_id\": \"072b3617-6653-4fd5-b5ee-580e9d098c3d\",\n      \"response_size\": 142,\n      \"query\": {\n        \"variables\": {\n          \"limit\": 10\n        },\n        \"operationName\": \"getProfile\",\n        \"query\": \"query getProfile($limit: Int!) { profile(limit: $limit, where:{username: {_like: \\\"%a%\\\"}}) { usernamex} }\"\n      }\n    },\n    \"http_info\": {\n      \"status\": 200,\n      \"http_version\": \"HTTP/1.1\",\n      \"url\": \"/v1/graphql\",\n      \"ip\": \"127.0.0.1\",\n      \"method\": \"POST\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Function\nDESCRIPTION: Command to deploy the cloud function with NodeJS 8 runtime, HTTP trigger, and environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta functions deploy trigger \\\n       --runtime nodejs8 \\\n       --trigger-http \\\n       --region asia-south1 \\\n       --env-vars-file .env.yaml\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Fields with Custom Null Handling\nDESCRIPTION: Query to fetch articles sorted by rating (descending) and published date (ascending with nulls first).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles (\n    order_by: [\n      {rating: desc},\n      {published_on: asc_nulls_first}\n    ]\n  ) {\n    id\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Definition for IP Geolocation\nDESCRIPTION: This GraphQL schema defines an action that translates IP addresses to city names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  GetCityName(ip: String!): City\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata (CLI)\nDESCRIPTION: This bash command applies the Hasura metadata, which includes the remote schema permissions defined in the YAML file. This command is essential to activate the defined permissions within the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Untrack Logical Model via API\nDESCRIPTION: This snippet details the HTTP request required to untrack a logical model using the Hasura Metadata API. The request specifies the model's name and source, enabling its removal from the Hasura schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema Customization in Hasura CLI\nDESCRIPTION: This YAML snippet demonstrates how to customize namespacing and prefixing for a remote schema using the Hasura CLI. It includes settings for field names, root fields namespace, and type names to resolve naming conflicts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/namespacing-remote-schemas.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <remote_schema_name>\n  definition:\n    url: <your_remote_schema_url>\n    timeout_seconds: 60\n    customization:\n      field_names:\n        - mapping: {}\n          parent_type: <your_prefix>_\n          prefix: <your_prefix>_\n        - mapping: {}\n          parent_type: <your_prefix>_\n          prefix: <your_prefix>_\n      root_fields_namespace: <your_namespace_prefix>_\n      type_names:\n        mapping: {}\n        prefix: <your_prefix>_\n        suffix: <your_prefix>_\n```\n\n----------------------------------------\n\nTITLE: Filtering Using OR Operator in GraphQL Query\nDESCRIPTION: Example showing how to use the _or operator to fetch articles that either have a rating greater than 4 or were published after January 1, 2018. Demonstrates combining multiple conditions with OR logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/boolean-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    where: {\n      _or: [\n        {rating: {_gte: 4}},\n        {published_on: {_gte: \"2018-01-01\"}}\n      ]\n    }\n  )\n  {\n    id\n    title\n    rating\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of Multicurrency objects. Includes logic operators for combining multiple aggregate expressions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_59\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Multicurrency_aggregate_bool_exp!]\n  _or: [Multicurrency_aggregate_bool_exp!]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Data Connector with Template in YAML\nDESCRIPTION: Example of configuring a Snowflake data connector using a template in YAML. This snippet demonstrates how to use environment variables and template variables in the configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/data-connector-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: snowflake\n  kind: snowflake\n  configuration:\n    template: |\n      {\"jdbc_url\": \"jdbc:snowflake://url.snowflakecomputing.com/?password={{$vars['snowflake_password']}}&user={{$env['SNOWFLAKE_USER']}}&warehouse=warehouse&db=db&role=role&schema=schema\"}\n    template_variables:\n      snowflake_password:\n        type: dynamic_from_file\n        filepath: /var/secrets/snowflake_password.txt\n    timeout: null\n    value: {}\n```\n\n----------------------------------------\n\nTITLE: User's Own Row Permission Example\nDESCRIPTION: JSON permission expression to allow users to access only their own rows based on user ID\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": {\n    \"_eq\": \"X-Hasura-User-Id\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Transform for x-www-form-urlencoded in Hasura using YAML\nDESCRIPTION: This YAML snippet illustrates configuring a request transformation for the 'create_user' action to handle x-www-form-urlencoded content. It specifies headers to remove and add for correct content-type handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: POST\n    url: '{{$base_url}}/create_user'\n    query_params:\n      id: '{{$session_variables[''x-hasura-user-id'']}}'\n    body:\n      action: 'x_www_form_urlencoded'\n      form_template:\n        username: '{{$body.input.username}}'\n    request_headers:\n      remove_headers: ['content-type']\n      add_headers:\n        'content-type': 'application/x-www-form-urlencoded'\n  comment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Fixing Owner Permissions Error in Cloud SQL\nDESCRIPTION: SQL commands to resolve permission errors when altering schema ownership in managed cloud databases like Google Cloud SQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> ALTER SCHEMA hdb_catalog OWNER TO hasurauser;\nERROR:  must be member of role \"hasurauser\"\n```\n\n----------------------------------------\n\nTITLE: Creating Article Table and Sample Data in Snowflake\nDESCRIPTION: SQL code to create an article table with fields for id, title, date, and content, followed by sample data insertion\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE article(\n  id INTEGER NOT NULL AUTOINCREMENT PRIMARY KEY,\n  title TEXT NOT NULL,\n  date DATE NOT NULL,\n  content TEXT NOT NULL\n);\n\nINSERT INTO article(title, date, content) VALUES\n  ('You will not believe', '2023-01-01', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Facillimum id quidem est, inquam. Esse enim, nisi eris, non potes. Oratio me istius philosophi non offendit; Idemne, quod iucunde? Quid est enim aliud esse versutum? Non autem hoc: igitur ne illud quidem.'),\n  ('Ten things that', '2023-02-02', 'Illi enim inter se dissentiunt. Sedulo, inquam, faciam. Simus igitur contenti his.'),\n  ('Did you know', '2023-03-03', 'Ratio quidem vestra sic cogit. Duo Reges: constructio interrete. An nisi populari fama? Erat enim res aperta. Apparet statim, quae sint officia, quae actiones. Tum mihi Piso: Quid ergo?'),\n  ('They just cannot', '2023-04-04', 'Itaque hic ipse iam pridem est reiectus; Quod quidem iam fit etiam in Academia. Negare non possum. Quis non odit sordidos, vanos, leves, futtiles?'),\n  ('What on earth', '2023-05-05', 'Venit ad extremum; At certe gravius. Efficiens dici potest. Rhetorice igitur, inquam, nos mavis quam dialectice disputare? Nunc de hominis summo bono quaeritur; Rationis enim perfectio est virtus;');\n```\n\n----------------------------------------\n\nTITLE: Configuring HASURA_GRAPHQL_SSO_PROVIDERS Environment Variable for ADFS SSO\nDESCRIPTION: JSON configuration for the HASURA_GRAPHQL_SSO_PROVIDERS environment variable to enable ADFS SSO in Hasura GraphQL Engine. Includes settings for client ID, admin roles, authorization URLs, and JWT secret configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/adfs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"dex-login\",\n    \"admin_roles\": [\"admin\"],\n    \"name\": \"Dex Login\",\n    \"authorization_url\": \"http://localhost:5556/dex/auth\",\n    \"request_token_url\": \"http://localhost:5556/dex/token\",\n    \"scope\": \"openid offline_access groups\",\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http://localhost:5556/dex/keys\",\n      \"issuer\": \"http://localhost:5556:5556/dex\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": {\n          \"path\": \"$.groups\"\n        },\n        \"x-hasura-default-role\": {\n          \"path\": \"$.groups[0]\"\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Metadata API Request for Event Trigger with Method Transform\nDESCRIPTION: HTTP request example showing how to configure an event trigger with a request method transform via the Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"content_type\": \"application/json\",\n      \"body\": \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Validation in YAML\nDESCRIPTION: YAML configuration for setting up HTTP-based input validation for customer data, including timeout and header forwarding settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: customer\n  insert_permissions:\n    - role: user\n      permission:\n        columns: []\n        filter: {}\n        validate_input:\n          type: http\n          definition:\n            url: http://www.somedomain.com/validateCustomerMutation\n            forward_client_headers: true\n            timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Metadata Export Schema Definition\nDESCRIPTION: JSON schema reference for Hasura metadata exports\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/HasuraMetadataV2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Row-Level Permission Example in JSON-like Format\nDESCRIPTION: Specifies a row-level permission using JSON-like syntax to grant access where 'id' matches the session variable 'x-hasura-user-id'. Targeted for Hasura access control setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/quickstart.mdx#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n{\n  “id”: {\n    “_eq”: “X-Hasura-User-Id”\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_touches Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values that touch a specified polygon using the _st_touches operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_touches: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Hasura Schemas in SQL\nDESCRIPTION: SQL commands to drop the 'hdb_views' and 'hdb_catalog' schemas, which store Hasura metadata and track database state. These commands should be executed using a database management tool or the SQL editor in the Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ndrop schema hdb_views cascade;\ndrop schema hdb_catalog cascade;\n```\n\n----------------------------------------\n\nTITLE: Defining Date Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of date values. Includes logic operators and date-specific aggregate functions like max, min, and count.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_56\n\nLANGUAGE: graphql\nCODE:\n```\ninput Date_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Date_aggregate_bool_exp!]\n  _or: [Date_aggregate_bool_exp!]\n  _not: Date_aggregate_bool_exp\n\n  # Aggregation functions\n  _max: Date_bool_exp\n  _min: Date_bool_exp\n  _count: Int_bool_exp\n  _count_distinct: Int_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Object Relationship Fields\nDESCRIPTION: Query to fetch articles sorted by their author's ID in descending order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles (\n    order_by: {author: {id: desc}}\n  ) {\n    id\n    rating\n    published_on\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Relationship to Remote Schema - Hasura Metadata API\nDESCRIPTION: HTTP POST request to update an existing remote relationship's definition for a Remote Schema connection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"pg_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"name_of_the_target_remote_schema\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Root Fields via API\nDESCRIPTION: HTTP request to set custom root field names for a table using Hasura Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/custom-field-names.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_set_table_customization\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"authors\",\n    \"configuration\": {\n      \"column_config\": {\n        \"id\": {\n          \"custom_name\": \"AuthorId\"\n        }\n      },\n      \"custom_root_fields\": {\n        \"select\": \"authors\",\n        \"select_aggregate\": \"authors_aggregate\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Schema GraphQL Type Definition\nDESCRIPTION: This GraphQL schema defines a Query type with a get_coordinates field that accepts a city parameter and returns Coordinates type. The Coordinates type contains latitude and longitude information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  get_coordinates(city: String): Coordinates\n}\ntype Coordinates {\n  lat: Float\n  long: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Testing REST endpoint with curl\nDESCRIPTION: This snippet demonstrates how to test a REST endpoint created in Hasura using the `curl` command-line tool. It specifies the HTTP method (GET), the URL of the endpoint, and necessary headers like `Content-Type` and `x-hasura-admin-secret`. Replace `<your-hasura-project>` and `<your-admin-secret>` with your actual Hasura project URL and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://<your-hasura-project>.hasura.app/api/rest/products/7992fdfa-65b5-11ed-8612-6a8b11ef7372' \\\n--header 'Content-Type: application/json' \\\n--header 'x-hasura-admin-secret: <your-admin-secret>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Permissions to Allow Only Primary Key Access in JSON\nDESCRIPTION: JSON configuration to allow a role to directly access a table only if it has access to the primary key value, by setting the select permission to include only the 'select_by_pk' root field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"role\": \"user\",\n   \"permission\": {\n     \"columns\": [\n       \"id\",\n       \"name\"\n     ],\n     \"filter\": {},\n     \"allow_aggregations\": false,\n     \"query_root_fields\": [\"select_by_pk\"],\n     \"subscription_root_fields\": [\"select_by_pk\"]\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Parameterized User Subscription\nDESCRIPTION: GraphQL subscription using variables for dynamic boolean expressions in queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/execution.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetUserWithVariableBoolExp ($boolExp: users_bool_exp!) {\n   users(where: $boolExp) {\n      id\n      name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ActionDefinition Schema Documentation\nDESCRIPTION: Defines the structure for GraphQL action definitions including arguments, output types, headers, and webhook configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_46\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                    | Required | Schema                                                                      | Description                                                                                                                             |\n| ---------------------- | -------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| arguments              | false    | Array of [InputArgument](#inputargument)                                    | Input arguments                                                                                                                         |\n| output_type            | true     | [GraphQLType](#graphqltype)                                                 | The output type of the action. Only object and list of objects are allowed.                                                             |\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus YAML for Hasura Cloud Integration\nDESCRIPTION: Configuration template for connecting Prometheus to Hasura Cloud metrics endpoint. Includes settings for scrape interval, authentication, and target configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud/prometheus.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 60s\nscrape_configs:\n  - job_name: 'hasura_prometheus_exporter'\n    scrape_interval: 60s ## Recommended scrape interval is 60s\n    metrics_path: '/metrics' ## Replace with metrics Path of the connection URL\n    scheme: 'https' ## Replace with the scheme of the connection URL\n    basic_auth:\n      username: 'd01c60e1-1b11-564d-bb09-0a39e3e41b05' ## Replace with project ID\n      password: 'IrhO3GlR8oXTfsdfdsNs8Nj' ## Replace with Access Token\n    static_configs:\n      - targets: ['prometheus-exporter.pro.hasura.io'] ## Replace with the host name of the connection URL\n```\n\n----------------------------------------\n\nTITLE: Replace Nested Articles for Author\nDESCRIPTION: This mutation depicts the process of replacing nested articles for a particular author by first deleting existing articles and then inserting new ones. It highlights a use case where two mutations are needed in sequence.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation updateAuthorArticles($author_id: Int!) {\n  delete_articles(\n    where: {author_id: {_eq: $author_id}}\n  ) {\n    affected_rows\n  }\n  insert_articles(\n    objects: [\n      {\n        author_id: $author_id,\n        title: \"title\",\n        content: \"some content\"\n      },\n      {\n        author_id: $author_id,\n        title: \"another title\",\n        content: \"some other content\"\n      }\n    ]\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Migrations on Server and Local Project\nDESCRIPTION: This snippet outlines the command to delete migration history on both the Hasura server and the local project. This cleans up migrations on all fronts to ensure a fresh start.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# reset migrations on server and on local project, use:\n\nhasura migrate delete --all --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: on_conflict Clause Specification for Upserts\nDESCRIPTION: Describes the 'on_conflict' clause used in upsert mutations to define how to handle conflicts during insert operations, including required parameters like constraints and update columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\non_conflict: {\n  constraint: table_constraint!\n  update_columns: [table_update_column!]!\n  where: table_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Settings via Metadata API\nDESCRIPTION: This HTTP POST request shows how to configure advanced settings for Event Triggers using the Metadata API, including retry configuration and custom headers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\" : \"<db_type_create_event_trigger>\",\n   \"args\": {\n      \"name\": \"author_trigger\",\n      \"source\": \"<db_name>\",\n      \"table\": {\n         \"name\": \"author\",\n         \"schema\": \"public\"\n      },\n      \"webhook\": \"https://httpbin.org/post\",\n      \"insert\": {\n         \"columns\": \"*\"\n      },\n      \"update\": {\n         \"columns\": [\"name\", \"addr\"]\n      },\n      \"retry_conf\": {\n         \"num_retries\": 0,\n         \"interval_sec\": 10,\n         \"timeout_sec\": 60\n      },\n      \"headers\": [\n         {\n            \"name\": \"X-Hasura-From-Val\",\n            \"value\": \"static-value\"\n         },\n         {\n            \"name\": \"X-Hasura-From-Env\",\n            \"value_from_env\": \"EVENT_WEBHOOK_HEADER\"\n         }\n      ],\n      \"replace\": false\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permission via API - HTTP - Hasura GraphQL\nDESCRIPTION: This HTTP request snippet illustrates how to create insert permissions for a role using the Hasura metadata API. By sending a POST request with the required parameters, the user role can be granted permissions along with the necessary column settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-column-presets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\" : \"mssql_create_insert_permission\",\n  \"args\" : {\n    \"source\": \"<db_name>\",\n    \"table\" : \"article\",\n    \"role\" : \"user\",\n    \"permission\" : {\n      \"check\" : {},\n      \"set\":{\n        \"user_id\":\"X-Hasura-User-Id\"\n      },\n      \"columns\":[\"title\", \"content\", \"rating\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Relay Query Implementation\nDESCRIPTION: Practical example of a Relay query retrieving author data with pagination information and cursor-based navigation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author_connection(first: 2) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables in BigQuery via API\nDESCRIPTION: An HTTP POST request to the Hasura metadata API to track the `articles` table in BigQuery.  The request body is a JSON object that specifies the `bigquery_track_table` type and the table to track. The `source` parameter indicates the database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": {\n        \"dataset\": \"bigquery\",\n        \"name\": \"articles\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Query Response Body in JSON for Hasura GraphQL Engine\nDESCRIPTION: This JSON structure demonstrates the expected response body format for a call to POST /query. It includes an array of rows, each containing the requested fields (ArtistId and Name) from the Artist table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rows\": [\n    {\n      \"ArtistId\": 1,\n      \"Name\": \"AC/DC\"\n    },\n    {\n      \"ArtistId\": 2,\n      \"Name\": \"Accept\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Inconsistent Objects with Hasura CLI\nDESCRIPTION: This code snippet demonstrates how to drop all inconsistent objects from the Hasura metadata using the CLI. It uses the `hasura metadata inconsistency drop` command to remove the identified inconsistencies.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata inconsistency drop\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with SSL using psql (Bash)\nDESCRIPTION: Sets up environment variables for SSL certificates and connects to the PostgreSQL primary database using psql with SSL authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPGSSLCERT=certificates/client.crt \\\nPGSSLKEY=certificates/client.key \\\nPGSSLROOTCERT=certificates/root.crt \\\nPGSSLCERTMODE=require \\\npsql -a \"postgresql://postgres@$(docker compose port postgres-primary 5432)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Unrelated Tables in Hasura CLI\nDESCRIPTION: YAML configuration for setting up insert permissions in a products table using an unrelated users table. This example checks both user existence and a permission flag before allowing product creation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: products\n  insert_permissions:\n    - role: user\n      permission:\n        check:\n          _exists:\n            _where:\n              _and:\n                - id: { _eq: X-Hasura-User-Id }\n                - allow_product_create: { _eq: true }\n            _table:\n              schema: public\n              name: users\n        columns:\n          - id\n          - name\n          - price\n          - description\n```\n\n----------------------------------------\n\nTITLE: Organizing Module-based Error Handling in Rust\nDESCRIPTION: Shows the recommended file structure for modular error handling, with each module defining its own error type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// error.rs\npub enum UserError { ... }\n```\n\nLANGUAGE: rust\nCODE:\n```\n// types.rs\npub struct UserInfo { ... }\n```\n\nLANGUAGE: rust\nCODE:\n```\n// mod.rs\nmod error;\nmod types;\nfn get_user_info(username: &str) -> Result<UserInfo, UserError> { ... }\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata with Hasura CLI\nDESCRIPTION: Command to apply Hasura metadata after configuring the database connection, which makes the new database connection active.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to Project Directory\nDESCRIPTION: Commands to clone the Hasura GraphQL Engine repository and navigate to the NodeJS boilerplate directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:hasura/graphql-engine\n$ cd graphql-engine/community/boilerplates/remote-schemas/zeit-now/nodejs\n```\n\n----------------------------------------\n\nTITLE: Removing a Table/View from GraphQL Schema using HTTP\nDESCRIPTION: This HTTP request snippet demonstrates how to use the 'untrack_table' operation to remove a specific table or view from the GraphQL schema in Hasura. It includes details on necessary arguments like 'table' and optional arguments such as 'cascade', which allows the removal to affect dependent metadata objects if set to true.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"untrack_table\",\n    \"args\": {\n        \"table\": {\n            \"schema\": \"public\",\n            \"name\": \"author\"\n         },\n        \"cascade\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Event Data Older Than 3 Months in SQL\nDESCRIPTION: Complete SQL example demonstrating how to delete processed events and HTTP logs that are older than a specified time period (3 months in this case).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.event_invocation_logs\nWHERE created_at < now() - interval '3 months';\n\nDELETE FROM hdb_catalog.event_log\nWHERE (delivered = true OR error = true)\n AND created_at < now() - interval '3 months';\n```\n\n----------------------------------------\n\nTITLE: Replace Metadata Args Structure\nDESCRIPTION: JSON structure for version 2 metadata replacement arguments\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    allow_inconsistent_metadata: Boolean,\n    metadata: metadata-object\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Name using Greater Than Operator in GraphQL\nDESCRIPTION: This example fetches a list of authors whose names begin with M or any letter that follows M, essentially performing a filter based on a dictionary sort using the _gt operator in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_gt: \"M\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Collection from Allowlist with HTTP POST in Hasura GraphQL Engine\nDESCRIPTION: This API request removes a specified collection from the allowlist. It takes a single collection name parameter and completely removes that collection from the allowlist, making its queries inaccessible through the previously allowed roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_collection_from_allowlist\",\n    \"args\": {\n        \"collection\": \"my_collection_1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostGIS Location Tables in PostgreSQL\nDESCRIPTION: SQL code to create tables for storing user and landmark location data using PostGIS geography points\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-functions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- User location data\nCREATE TABLE user_location (\n  user_id INTEGER PRIMARY KEY,\n  location GEOGRAPHY(Point)\n);\n\n-- Landmark location data\nCREATE TABLE landmark (\n  id SERIAL PRIMARY KEY,\n  name TEXT,\n  type TEXT,\n  location GEOGRAPHY(Point)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on integer aggregate functions like average, sum, max, min, and count.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\ninput Int_aggregate_order_by @oneOf {\n  _avg: order_by\n  _sum: order_by\n  _max: order_by\n  _min: order_by\n  _count: order_by\n  _count_distinct: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Aggregation Query in GraphQL\nDESCRIPTION: Example query showing how to fetch author data with nested aggregations on their articles' ratings, demonstrating relationship-based aggregation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/aggregation-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors (where: {id: {_eq: 1}}) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n        avg {\n          rating\n        }\n        max {\n          rating\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Author and Article Schema Definition\nDESCRIPTION: SQL schema definitions for author and article tables with relationship constraints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nauthor (id uuid, name text, is_active boolean)\narticle (id uuid, author_id uuid, content text)\n```\n\nLANGUAGE: sql\nCODE:\n```\narticle.author_id -> author.id\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_within Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values that are within a specified polygon using the _st_within operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_within: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping PostgreSQL Logical Model Permissions\nDESCRIPTION: API endpoint for removing select permissions from a Logical Model in PostgreSQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_drop_logical_model_select_permission\",\n    \"args\": {\n       \"source\": \"default\",\n       \"function\": \"get_articles\",\n       \"role\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AST Node with Source Positions in JavaScript\nDESCRIPTION: A code fragment showing a deeply nested AST node structure with SourcePosition objects tracking line and column numbers. This appears to be part of a parser or AST manipulation system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0003_selection_with_fields.txt#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 2,\n                                col: 1,\n                            },\n                            end: SourcePosition {\n                                line: 15,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 2,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 15,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Update Permission for MSSQL Table\nDESCRIPTION: Creates an update permission that restricts column access and row updates based on user role. Includes column filtering, row-level checks, and automatic value setting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"columns\" : [\"title\", \"content\", \"category\"],\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            },\n            \"check\" : {\n                \"content\" : {\n                  \"_ne\": \"\"\n                }\n            },\n            \"set\":{\n                \"updated_at\" : \"NOW()\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura Docker Compose File\nDESCRIPTION: Commands to download the Hasura docker-compose file for CockroachDB setup using either wget or curl.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/docker-compose-cockroach/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/docker-compose-cockroach/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via Hasura CLI\nDESCRIPTION: Command to apply metadata changes using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/cloud-connection-pooling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Constructing SQL Native Query in YAML\nDESCRIPTION: This YAML configuration tracks a native query in the Hasura metadata. The native query 'article_with_excerpt' is configured to use a SQL statement for extracting article categories, accepting a max_length argument for truncating content, and returning formatted excerpts as specified by the logical model 'article_excerpt'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnative_queries:\n  - root_field_name: article_with_excerpt\n    arguments:\n      max_length:\n        type: integer\n    code:\n      SELECT id, title, (substring(content, 1, {{max_length}}) || (CASE WHEN length(content) < {{max_length}} THEN ''\n      else '...' END)) AS excerpt, date FROM article\n    returns: article_excerpt\n```\n\n----------------------------------------\n\nTITLE: Track Stored Procedure via Hasura Metadata API\nDESCRIPTION: This HTTP request body shows how to track a stored procedure using Hasura's Metadata API.  The `mssql_track_stored_procedure` type is used.  It includes the source database, stored procedure name (`sp_tables`), configuration to expose it as a query, argument definitions (table_type as varchar), and the logical model it returns (`tables`).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_stored_procedure\",\n  \"args\": {\n    \"source\": \"mssql\",\n    \"stored_procedure\": \"sp_tables\",\n    \"configuration\": {\n      \"exposed_as\": \"query\"\n    },\n    \"arguments\": {\n      \"table_type\": {\n        \"type\": \"varchar\"\n      }\n    },\n    \"returns\": \"tables\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Haskell Type Definition for Selection Set Union Parser\nDESCRIPTION: Function type signature for selectionSetUnion which creates a Parser for union types. This function will be used to create the _Entity union type from all types with @key directives.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\nselectionSetUnion ::\n  (MonadParse n, Traversable t) =>\n  Name ->\n  Maybe Description ->\n  -- | The member object types.\n  t (Parser 'Output n b) ->\n  Parser 'Output n (t b)\n```\n\n----------------------------------------\n\nTITLE: Example of GraphQL Operation Name\nDESCRIPTION: This example shows a GraphQL query with an operation name. If the operation name changes while keeping the same query structure, Hasura will treat it as a different query for caching purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/how-it-works.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clear Metadata Request\nDESCRIPTION: HTTP request to reset Hasura state by clearing all tracked tables, relationships, permissions, and triggers\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"clear_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Rule for Azure Services\nDESCRIPTION: This command creates a firewall rule to allow access from Azure internal services to the PostgreSQL server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz postgres server firewall-rule create --resource-group hasura \\\n   --server-name \"<server_name>\" \\\n   --name \"allow-azure-internal\" \\\n   --start-ip-address 0.0.0.0 \\\n   --end-ip-address 0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Example of GraphQL Batch Request for Batch Limits\nDESCRIPTION: This snippet demonstrates a batched GraphQL request containing three separate query operations. This would exceed a batch limit of 2, showing how batch limits are applied to restrict the number of operations in a single request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/api-limits.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery query1 {\n  artists {\n    name\n    albums {\n      name\n    }\n  }\n}\n\nquery query2 {\n  playlist {\n    name\n    songs {\n      name\n    }\n  }\n}\n\nquery query3 {\n  songs {\n    name\n    artists {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Boilerplate Progress Checklist in Markdown\nDESCRIPTION: A Markdown table showing the progress status of various use cases (echo, mutation, push-notification, etl) across different programming languages (Javascript, Java, C#, F#) for Azure Cloud Function boilerplates with Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Folder name | Use-case| Javascript | Java | C# | F#\n|-------------|---------|:--------:|:------:|:----:|:---:\n| echo | echo the trigger payload  | ✅ | ❌ | ❌ | ❌ \n| mutation | insert related data on an insert event using graphql mutation | ✅ | ❌ | ❌ | ❌ \n| push-notification | send push notification on database event | ❌ | ❌ | ❌ | ❌ \n| etl | transform the trigger payload and update an algolia index | ❌ | ❌ | ❌ | ❌\n```\n\n----------------------------------------\n\nTITLE: User Information Query with Permission Rules\nDESCRIPTION: A basic GraphQL query to fetch user information after permission rules have been applied. This query will only return data for the user whose ID matches the value in the X-Hasura-User-Id header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/api-gateway.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UserInfo {\n  socials {\n    users {\n      id\n      email\n      username\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Response Structure\nDESCRIPTION: Represents the expected JSON structure of a GraphQL mutation response, indicating the number of affected rows and the fields that will be returned post mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  affected_rows\n  returning {\n    response-field1\n    response-field2\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Articles Rating\nDESCRIPTION: This code snippet shows how to reset the rating of all articles in the table by using the `{}` expression as the `where` argument, effectively targeting all records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation reset_rating {\n  update_article (\n    where: {}\n    _set: { rating: null }\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Column Preset via Metadata HTTP API\nDESCRIPTION: HTTP request demonstrating how to create an insert permission with column preset using Hasura Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-presets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_insert_permission\",\n  \"args\": {\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"role\": \"user\",\n    \"permission\": {\n      \"check\": {},\n      \"columns\": [\n        \"id\"\n      ],\n      \"set\": {\n        \"id\": \"x-hasura-user-id\"\n    }\n  },\n    \"source\": \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Dropping a Foreign Key Constraint\nDESCRIPTION: This code snippet attempts to drop a foreign key constraint from the article table, but encounters an error due to existing relationships. The API responds with an indication of the dependent object that prevents the action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"ALTER TABLE article DROP CONSTRAINT article_author_id_fkey\"\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 BAD REQUEST\nContent-Type: application/json\n\n{\n    \"path\": \"$.args\",\n    \"error\": \"cannot drop due to the following dependent objects: constraint article.article_author_id_fkey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Overview Page JSX Component\nDESCRIPTION: React/JSX code for rendering the subscription documentation overview page. Includes imported components, video embed, and navigation cards for different subscription types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport Subscriptions from '@site/static/icons/features/subscriptions.svg';\n\n# <Subscriptions /> Subscriptions\n\n<div className=\"overview-header\">\n  <div className=\"overview-text\">\n    <p>\n      Subscriptions enable you to push data from your database to your clients in real-time, making them a powerful tool\n      for building reactive applications without the need for continuous server polling.\n      <br />\n      <br />\n      Just like queries and mutations, you have subscriptions on your data out of the box with the Hasura GraphQL Engine.\n    </p>\n    <h4>Quick Links</h4>\n    <ul>\n      <li>\n        <VersionedLink to=\"/subscriptions/quickstart/\">Write your first subscription in 30 seconds.</VersionedLink>\n      </li>\n    </ul>\n  </div>\n  <iframe\n    src=\"https://www.youtube.com/embed/gEfVKtKbXWQ\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregates and Objects in GraphQL\nDESCRIPTION: GraphQL query showing how to retrieve both aggregated data and individual objects from the Invoice collection in a single query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice {\n    InvoiceId\n    Total\n  }\n  Invoice_aggregate {\n    InvoiceDate {\n      _max # The most recent invoice date\n    }\n    Total {\n      _max # The biggest total on an invoice\n      _sum # The total spent across all invoices\n    }\n    _count # The number of invoices\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Query Field for Articles - MS SQL Server\nDESCRIPTION: This GraphQL snippet shows the generated query field for the articles table, allowing clients to retrieve articles with various filtering, limiting, and ordering options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\narticles (\n  where: articles_bool_exp\n  limit: Int\n  offset: Int\n  order_by: [articles_order_by!]\n): [articles!]!\n```\n\n----------------------------------------\n\nTITLE: Filtering Integer Values with Equality Operator in GraphQL\nDESCRIPTION: Query to fetch author data by matching an integer ID field using the _eq operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {id: {_eq: 3}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Geometry Scalar in GraphQL Mutation\nDESCRIPTION: Example of using the custom geometry scalar type with GeoJSON values in PostGIS.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertGeometry($point: geometry!) {\n  insert_test(objects: [{ geometry_col: $point }]) {\n    affected_rows\n    returning {\n      geometry_col\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"point\": {\n    \"type\": \"Point\",\n    \"coordinates\": [0, 0]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Roles for Metadata and User Databases in Postgres\nDESCRIPTION: This SQL script creates separate users for managing the metadata database and user database, granting necessary permissions for Hasura GraphQL Engine to function properly. It sets up the required schemas, extensions, and grants appropriate access to tables, sequences, and functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- create a separate user for to manage metadata database\nCREATE USER hasura_metadata_user WITH PASSWORD 'hasura_metadata_user_password';\n\n-- create the schemas required by the hasura system\n-- NOTE: If you are starting from scratch: drop the below schemas first, if they exist.\nCREATE SCHEMA IF NOT EXISTS hdb_catalog;\n\n-- make the user an owner of the schema\nALTER SCHEMA hdb_catalog OWNER TO hasura_metadata_user;\nALTER ROLE hasura_metadata_user SET search_path TO hdb_catalog;\n\n-- Hasura needs pgcrypto extension\n-- See section below on pgcrypto in PG search path\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n------------------------------------------------------------------------------\n\n-- create a separate user for to manage user database\nCREATE USER hasurauser WITH PASSWORD 'hasurauser';\n\n-- create pgcrypto extension, required for UUID\n-- See section below on pgcrypto in PG search path\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- The below permissions are optional. This is dependent on what access to your\n-- tables/schemas you want give to hasura. If you want expose the public\n-- schema for GraphQL query then give permissions on public schema to the\n-- hasura user.\n-- Be careful to use these in your production db. Consult the Postgres manual or\n-- your DBA and give appropriate permissions.\n\n-- grant all privileges on all tables in the public schema. This can be customized:\n-- For example, if you only want to use GraphQL regular queries and not mutations,\n-- then you can set: GRANT SELECT ON ALL TABLES...\nGRANT USAGE ON SCHEMA public TO hasurauser;\nGRANT ALL ON ALL TABLES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA public TO hasurauser;\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO hasurauser;\n\n-- Similarly add these for other schemas as well, if you have any.\n-- GRANT USAGE ON SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL TABLES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL SEQUENCES IN SCHEMA <schema-name> TO hasurauser;\n-- GRANT ALL ON ALL FUNCTIONS IN SCHEMA <schema-name> TO hasurauser;\n\n-- By defaults users won't have access to tables they have not created (and thus do not own).\n-- You can change these default privileges to grant access to any object created in the future.\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS;\n\n-- Alternatively, you may restrict this to objects created by a specific user\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO hasurauser;\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO hasurauser;\n-- ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO hasurauser;\n\n-- grant these privileges to use create and use all Hasura GraphQL Engine functionality\nGRANT USAGE ON SCHEMA hdb_catalog TO hasurauser;\nGRANT CREATE ON SCHEMA hdb_catalog TO hasurauser;\nGRANT ALL ON ALL TABLES IN SCHEMA hdb_catalog TO hasurauser;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA hdb_catalog TO hasurauser;\nGRANT ALL ON ALL FUNCTIONS IN SCHEMA hdb_catalog TO hasurauser;\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker with Multiple SQL Server Nodes\nDESCRIPTION: Defines a Docker Compose file that configures three SQL Server nodes for read replicas. Each node is assigned a unique IP address and port mapping, establishing networking between containers and setting environment variables for SQL authentication and acceptance of the EULA.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db1:\n    container_name: sqlNode1\n    image: sqlag:ha\n    hostname: sqlNode1\n    domainname: lab.local\n    environment:\n      SA_PASSWORD: 'Password1'\n      ACCEPT_EULA: 'Y'\n    ports:\n      - '1501:1433'\n    extra_hosts:\n      sqlNode2.labl.local: '172.16.238.22'\n      sqlNode3.labl.local: '172.16.238.23'\n    networks:\n      internal:\n        ipv4_address: 172.16.238.21\n\n  db2:\n    container_name: sqlNode2\n    image: sqlag:ha\n    hostname: sqlNode2\n    domainname: lab.local\n    environment:\n      SA_PASSWORD: 'Password1'\n      ACCEPT_EULA: 'Y'\n    ports:\n      - '1502:1433'\n    extra_hosts:\n      sqlNode1.lab.local: '172.16.238.21'\n      sqlNode3.lab.local: '172.16.238.23'\n    networks:\n      internal:\n        ipv4_address: 172.16.238.22\n\n  db3:\n    container_name: sqlNode3\n    image: sqlag:ha\n    hostname: sqlNode3\n    domainname: lab.local\n    environment:\n      SA_PASSWORD: 'Password1'\n      ACCEPT_EULA: 'Y'\n    ports:\n      - '1503:1433'\n    extra_hosts:\n      sqlNode1.lab.local: '172.16.238.21'\n      sqlNode2.lab.local: '172.16.238.22'\n    networks:\n      internal:\n        ipv4_address: 172.16.238.23\n\nnetworks:\ninternal:\n  ipam:\n    driver: default\n    config:\n      - subnet: 172.16.238.0/24\n```\n\n----------------------------------------\n\nTITLE: Dropping Logical Model Permissions via API\nDESCRIPTION: This HTTP request demonstrates how to remove select permissions for a specific role from a Logical Model using the Hasura API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_drop_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking View via Metadata API\nDESCRIPTION: API request to track a database view and expose it over the GraphQL API using the mssql_track_table Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/views.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"authors\",\n    \"schema\": \"dbo\",\n    \"name\": \"<name of view>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to list running Docker containers and expected output showing Hasura-related containers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\nCONTAINER ID IMAGE                              ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine              ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres                           ... 1m ago  Up 1m  5432/tcp ...\n3a29aa348999 redis:7                            ... 1m ago  Up 1m  6379/tcp ...\n7b5b2ee70ece hasura/graphql-data-connector      ... 1m ago  Up 1m  5005/tcp ..\n```\n\n----------------------------------------\n\nTITLE: Multi-Record Update Response\nDESCRIPTION: Example JSON response showing the results of a multi-record update operation including affected rows and returned data for each update operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"update_artist_many\": [\n      {\n        \"affected_rows\": 3,\n        \"returning\": [\n          {\n            \"id\": 1,\n            \"name\": \"first\"\n          },\n          {\n            \"id\": 2,\n            \"name\": \"first\"\n          },\n          {\n            \"id\": 3,\n            \"name\": \"first\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 1,\n        \"returning\": [\n          {\n            \"id\": 2,\n            \"name\": \"second\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 2,\n        \"returning\": [\n          {\n            \"id\": 3,\n            \"name\": \"third\"\n          },\n          {\n            \"id\": 4,\n            \"name\": \"third\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 1,\n        \"returning\": [\n          {\n            \"id\": 1,\n            \"name\": \"done\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suggesting Potential Relationships in MSSQL Database via HTTP Request\nDESCRIPTION: This HTTP POST request shows how to use the mssql_suggest_relationships API to identify potential relationships for the 'Artist' table in the 'chinook' database source. The omit_tracked parameter is set to true to exclude already tracked relationships from the suggestions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_suggest_relationships\",\n  \"version\": 1,\n  \"args\": {\n    \"omit_tracked\": true,\n    \"source\": \"chinook\",\n    \"tables\": [[\"Artist\"]]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard View with Ordered Authors in Postgres\nDESCRIPTION: This SQL snippet creates a standard view named 'authors_ordered_by_rating' that returns authors ordered by their rating. The view provides a simplified way to access sorted author data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW authors_ordered_by_rating AS\n    SELECT name, rating\n    FROM authors\n    ORDER BY rating;\n```\n\n----------------------------------------\n\nTITLE: Filtering Date Values in GraphQL\nDESCRIPTION: Query to fetch articles by comparing a date published_on field using the _eq operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {published_on: {_eq: \"2017-05-26\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Insert GraphQL Mutation Example\nDESCRIPTION: Complex GraphQL mutation demonstrating nested inserts with author and articles, showing how validation works across related tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertAuthorWithArticles($name: String, $email:String, $articles_content:[article_insert_input!]!) {\n  insert_author(objects: {name: $name, email: $email, articles: {data: $articles_content}}){\n    returning {\n      first_name\n      articles {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Aggregate Selection with @oneOf Directive in GraphQL\nDESCRIPTION: This input type allows selecting aggregate operations on Invoice collections. It supports operations on scalar fields like InvoiceId and Total, as well as on nested object relationships like BillingAddress.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_83\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_aggregate_select @oneOf {\n  # Scalar fields\n  InvoiceId: Int_aggregate_select\n  InvoiceDate: Date_aggregate_select\n  CustomerId: Int_aggregate_select\n  Total: Decimal_aggregate_select\n\n  # Nested object fields/object relationships\n  BillingAddress: Address_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Name in BigQuery\nDESCRIPTION: Example of using the where argument to filter authors based on an exact name match using the _eq operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Sidney\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Connector Capabilities Configuration\nDESCRIPTION: JSON response from the /capabilities endpoint defining supported features and configuration schema for the data connector agent.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"queries\": {\n      \"foreach\": {},\n      \"redaction\": {}\n    },\n    \"data_schema\": {\n      \"supports_primary_keys\": true,\n      \"supports_foreign_keys\": true,\n      \"column_nullability\": \"nullable_and_non_nullable\"\n    },\n    \"relationships\": {},\n    \"interpolated_queries\": {},\n    \"scalar_types\": {\n      \"DateTime\": {\n        \"comparison_operators\": {\n          \"in_year\": \"Number\"\n        }\n      }\n    },\n    \"user_defined_functions\": {}\n  },\n  \"config_schemas\": {\n    \"config_schema\": {\n      \"type\": \"object\",\n      \"nullable\": false,\n      \"properties\": {\n        \"tables\": { \"$ref\": \"#/other_schemas/Tables\" }\n      }\n    },\n    \"other_schemas\": {\n      \"Tables\": {\n        \"description\": \"List of tables to make available in the schema and for querying\",\n        \"type\": \"array\",\n        \"items\": { \"$ref\": \"#/other_schemas/TableName\" },\n        \"nullable\": true\n      },\n      \"TableName\": {\n        \"nullable\": false,\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Field Arguments Example\nDESCRIPTION: Demonstrates a GraphQL query where field arguments are used to modify the behavior of specific fields within an Artist query, such as requesting a full name or specifying a hash algorithm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-field-argument-types-changes.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist(limit: 10) {\n    Name(full: true) # return full name\n    ArtistId\n    CryptoHash(algorithm: SHA1)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AggregateOrderBy in GraphQL Queries\nDESCRIPTION: These examples demonstrate how to use AggregateOrderBy for count and operation aggregates in GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorOrderByArticleCount {\n  author(order_by: { articles_aggregate: { count: desc } }) {\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery AuthorOrderBySumOfArticles {\n  author(order_by: { articles_aggregate: { sum: { id: desc } } }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MSSQL Remote Relationship with Hasura Metadata API using HTTP\nDESCRIPTION: This snippet represents an HTTP POST request to update an existing remote relationship defined on an MSSQL table via Hasura's metadata API. Dependencies include consistent access to the existing MSSQL remote relationship configuration. Key parameters involve specifying the relationship's new definition, ensuring inputs like current relationship names are accurate. Successful execution updates the relationship, limited to those already defined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"mssql_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      // the updated definition\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"name_of_the_target_remote_schema\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"mssql_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      // the updated definition\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"name_of_the_target_source\",\n          \"table\": \"table_on_the_target_source\"\n          \"field_mapping\": {\n            \"id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Key-Value Query Parameters via CLI\nDESCRIPTION: YAML configuration for adding key-value query parameters to event trigger request transformation using the CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params:\n      query_param: xxxxx\n    content_type: application/json\n    body: \"{\n  \\\"table\\\": {\n    \\\"name\\\": {{$body.table.name}},\n    \\\"schema\\\": {{$body.table.schema}}\n  },\n  \\\"To\\\": {\n    \\\"username\\\": {{$body.event.data.new.name}},\n    \\\"email\\\": {{$body.event.data.new.email}}\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo Client and GraphQL WebSocket Dependencies\nDESCRIPTION: Command to install the necessary npm packages for implementing GraphQL subscriptions with Apollo Client.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @apollo/client graphql-ws\n```\n\n----------------------------------------\n\nTITLE: Testing Connection Template via Metadata API\nDESCRIPTION: This HTTP request shows how to use the pg_test_connection_template Metadata API to test a connection template for a Postgres database in Hasura. It includes parameters for simulating a GraphQL request context and specifies a connection template to test.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_test_connection_template\",\n  \"args\": {\n    \"source_name\": \"source_name\",\n    \"request_context\": {\n      \"headers\": {\n        \"header_name\": \"header_value\"\n      },\n      \"session\": {\n        \"session_var\": \"session_var_value\"\n      },\n      \"query\": {\n        \"operation_type\": \"query\",\n        \"operation_name\": \"op_name\"\n      }\n    },\n    \"connection_template\": {\n        \"template\": \"{{ if $.request.session?[\\\"x-hasura-role\\\"] == \\\"user\\\" }} {{$.primary}} {{else}} {{$.connection_set.db_1}} {{ end }}\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Files with Hasura CLI\nDESCRIPTION: Example of using the --envfile flag with Hasura CLI to specify a custom environment file. This allows loading environment variables from different files for different environments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nhasura console --envfile production.env\n```\n\n----------------------------------------\n\nTITLE: Python Webhook Implementation\nDESCRIPTION: Complete Python implementation of the webhook server that handles order status change events and sends notifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport requests\n\napp = Flask(__name__)\n\n# Hasura and OpenAI config\nconfig = {\n    'url': '<YOUR_PROJECT_ENDPOINT>',\n    'secret': '<YOUR_ADMIN_SECRET>',\n}\n\ndef sendNotification(user_id, order_id, order_status):\n    #REST Api call to HASURA\n    response = requests.post(\n        config[\"url\"],\n        json={\n            \"query\": \"\"\"\n        mutation InsertNotification($user_id: uuid!, $message: String!) {\n            insert_notifications_one(object: {user_id: $user_id, message: $message}) {\n                id\n            }\n        }\n        \"\"\",\n            \"variables\": {\n                \"user_id\": user_id,\n                \"message\": f\"Status of Order #{order_id} is now {order_status}.\",\n            },\n        },\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"x-hasura-admin-secret\": config[\"secret\"],\n        },\n    )\n    print(f\"Notification sent. The user has received the following notification: Status of Order #{order_id} is now {order_status}.\")\n    data = response.json()\n    return data.get(\"insert_notifications_one\", None)\n\n\n@app.route('/order-status-change', methods=['POST'])\ndef order_status_change():\n    # Confirm the authentication header is correct\n    auth_header = request.headers.get('secret-authorization-string')\n    if auth_header != 'super_secret_string_123':\n        return jsonify({'message': 'Unauthorized'}), 401\n\n    # Get the user's name and email from the request body\n    data = request.get_json()\n    order_status = data['event']['data']['new']['status']\n    order_id = data['event']['data']['new']['id']\n    user_id = data['event']['data']['new']['user_id']\n\n    sendNotification(user_id, order_id, order_status)\n\n    return jsonify({'message': 'Order Change Notification sent!'})\n\nif __name__ == '__main__':\n    app.run(port=4000)\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Direct command options specific to the diff command\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_diff.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help          help for diff\n    --type string   specify a type of diff [allowed values: unified-json,unified-yaml, yaml, json]\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Trigger in Hasura\nDESCRIPTION: Illustrates the setup of a Scheduled Trigger to execute tasks at regular intervals. Assumes access to Hasura's Scheduled Triggers interface and an external endpoint to hit. Primarily used for scheduling routine tasks like sending notifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhttp://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Deleting All Logs for Specific Action in SQL\nDESCRIPTION: SQL command to delete all log entries for a specific action name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/logs-clean-up.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_action_log WHERE action_name = '<action-name>';\n```\n\n----------------------------------------\n\nTITLE: Generating Action Handler Code via CLI\nDESCRIPTION: Command to generate the handler code for a specific action using the configured framework.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions codegen <action-name>\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Migration via CLI\nDESCRIPTION: A bash command to apply the Hasura migration. This command will execute the SQL statements in the `up.sql` file to create the tables in the BigQuery database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Sending Metadata API Request to Create Remote Schema Relationship\nDESCRIPTION: This HTTP request payload demonstrates how to use the Hasura Metadata API to create a remote schema relationship. It outlines the necessary arguments including the source, table, and definition mapping. This allows integration between local database tables and external GraphQL schemas efficiently.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_remote_relationship\",\n  \"args\": {\n    \"name\": \"articles\",\n    \"source\": \"bq-source\",\n    \"table\": {\n      \"dataset\": \"<source_dataset_name>\",\n      \"name\": \"author\"\n    },\n    \"definition\": {\n      \"to_remote_schema\": {\n        \"remote_schema\": \"<remote_schema_name>\",\n        \"lhs_fields\": [\"id\"],\n        \"remote_field\": {\n          \"articles\": {\n            \"arguments\": {\n              \"author_id\": \"$id\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logical Model Permissions in YAML\nDESCRIPTION: This snippet demonstrates how to add select permissions to a logical model using YAML in the CLI. It shows how to specify column access and row filtering for a specific role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        ...\n      select_permissions:\n        - role: \"<role name>\"\n          permission:\n            columns: \"*\" | [\n              \"column 1\",\n              \"column 2\",\n              ...\n            ]\n            filter: \"<boolean expression>\"\n        - ...\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema in Hasura GraphQL Engine\nDESCRIPTION: This code snippet shows the structure for defining a remote schema in Hasura GraphQL Engine, including URL, headers, timeout, and customization options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\" : \"url-string\",\n  \"url_from_env\" : \"env-var-string\",\n  \"headers\": [\n    {\n      \"name\": \"header-name-string\",\n      \"value\": \"header-value-string\",\n      \"value_from_env\": \"env-var-string\"\n    }\n  ],\n  \"forward_client_headers\": \"boolean\",\n  \"timeout_seconds\": \"integer\",\n  \"customization\": \"RemoteSchemaCustomization\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Column Names via BigQuery Metadata API\nDESCRIPTION: This HTTP POST request to the Hasura metadata API sets a custom field name for a specific column ('id') in the 'authors' table. It includes the necessary headers and payload structure to achieve this.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/custom-field-names.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_set_table_customization\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": \\\"authors\\\",\\n    \\\"configuration\\\": {\\n      \\\"column_config\\\": {\\n        \\\"id\\\": {\\n          \\\"custom_name\\\": \\\"AuthorId\\\"\\n        }\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Versioned Internally Tagged Enum Implementation\nDESCRIPTION: Example of an enum implementation using the versioned internally tagged approach. The JSON object uses a 'version' key as a tag, and the rest of the object's content is deserialized as the variant value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(opendds_derive::OpenDd)]\n#[opendd(as_versioned_internally_tagged)]\nenum VersionedEnum {\n    V1(VersionOne),\n    V2(VersionTwo),\n}\n\n#[derive(opendds_derive::OpenDd)]\nstruct VersionOne {\n    #[opendd(use_serde_json)]\n    field_one: String\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GraphQL Query Depth Examples\nDESCRIPTION: This code snippet shows multiple GraphQL queries with different nesting depths, from depth=1 to depth=3. It includes simple queries and those using fragments to illustrate how depth is calculated in Hasura's API limiting system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/api-limits.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# depth = 1\nquery deep1_1 {\n  viewer {\n    name\n  }\n}\n\nquery deep1_2 {\n  viewer {\n    ... on User {\n      name\n    }\n  }\n}\n\n# depth = 2\nquery deep2 {\n  viewer {\n    albums {\n      title\n    }\n  }\n}\n\n# depth = 3\nquery deep3 {\n  viewer {\n    albums {\n      ...musicInfo\n      songs {\n        ...musicInfo\n      }\n    }\n  }\n}\n\nfragment musicInfo on Music {\n  id\n  title\n  artists\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Update Command Syntax in Bash\nDESCRIPTION: The basic command syntax for updating a Hasura project from config v2 to v3 using the CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura scripts update-project-v3 [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Deleting Hasura Cloud Preview Apps\nDESCRIPTION: This YAML configuration sets up a GitHub Action workflow to delete Preview Apps when a pull request is closed. It ensures cleanup of resources to avoid unnecessary costs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/preview-apps.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Hasura Cloud Preview Apps\n        uses: hasura/hasura-cloud-preview-apps@v0.1.5\n        with:\n          name: 'repo-name-${{github.env.GITHUB_HEAD_REF}}${{github.event.number}}'\n          postgresDBConfig: |\n            POSTGRES_SERVER_CONNECTION_URI=${{secrets.POSTGRES_SERVER_CONNECTION_URI}}\n            PG_ENV_VARS_FOR_HASURA=PG_DB_URL_1,PG_DB_URL_2,PG_DB_URL3\n          delete: true\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} # ${{ secrets.GITHUB_TOKEN }} is provided by default by GitHub actions\n          HASURA_CLOUD_ACCESS_TOKEN: ${{secrets.HASURA_CLOUD_ACCESS_TOKEN}} # Hasura Cloud access token to contact Hasura Cloud APIs\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis URL for Hasura Caching\nDESCRIPTION: Specify the Redis connection URL for enabling caching in Hasura Enterprise Edition. This environment variable provides the connection details for the Redis instance used for caching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/enterprise-caching.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nHASURA_GRAPHQL_REDIS_URL=redis://username:password@redishostname:port\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura CLI Command Structure\nDESCRIPTION: Demonstrates the standard syntax pattern for Hasura CLI commands with optional flags and values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura <command> <subcommand> --<optional_flag> \"<optional_flag_value>\"\n```\n\n----------------------------------------\n\nTITLE: Building Hasura CLI from source\nDESCRIPTION: These commands clone the Hasura GraphQL Engine repository, navigate to the CLI directory, install dependencies, and build the CLI from source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncd graphql-engine/cli\nmake deps\nmake build-cli-ext copy-cli-ext\nmake build\n```\n\n----------------------------------------\n\nTITLE: Dynamic Access Control Based on Column Values in Hasura\nDESCRIPTION: YAML configuration example that demonstrates how to control access by comparing column values dynamically. This example shows allowing article access based on a user's subscription plan.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/sql-server.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\ntable: article\npermission:\n  current_user.profile.plan IN article.allowed_plans\n```\n\n----------------------------------------\n\nTITLE: Rename Relationship via Metadata API - HTTP Request\nDESCRIPTION: This snippet shows how to rename a relationship using the Hasura Metadata API. The `mssql_rename_relationship` type is used with the `source`, `table`, `name` and `new_name` arguments to specify the relationship to be renamed and its new name. The request is sent to the `/v1/metadata` endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/rename.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\n\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_rename_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"articles\",\n    \"name\": \"article_details\",\n    \"new_name\": \"article_detail\"\n  }\n}\n```\n\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mssql_rename_relationship\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"articles\",\n    \"name\": \"article_details\",\n    \"new_name\": \"article_detail\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PG Dump API Response Example\nDESCRIPTION: Sample HTTP response from the PG Dump API showing the SQL output format with table and sequence creation statements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/pgdump.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/sql\n\nSET check_function_bodies = false;\nCREATE TABLE public.author (\n    id integer NOT NULL,\n    name text NOT NULL\n);\nCREATE SEQUENCE public.author_id_seq\n    AS integer\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\nALTER SEQUENCE public.author_id_seq OWNED BY public.author.id;\nALTER TABLE ONLY public.author ALTER COLUMN id SET DEFAULT nextval('public.author_id_seq'::regclass);\n```\n\n----------------------------------------\n\nTITLE: Filtering Restaurants by Average Review Rating and Review Count\nDESCRIPTION: GraphQL query that filters restaurants based on aggregate review metrics, including average rating greater than 5 and at least 10 distinct reviewers\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-nested-objects.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  restaurant (\n    limit: 3,\n    where: {\n      _and: [\n        {\n          reviews_aggregate: {\n            average: {\n              arguments: \"rating\",\n              predicate: { _gt: 5 }\n            }\n          }\n        },\n        {\n          reviews_aggregate: {\n            count: {\n              arguments: [\"reviewer\"],\n              distinct: true,\n              predicate: { _gt: 10 }\n            }\n          }\n        }\n      ]\n    }\n  )\n  {\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\": {\n     \"restaurant\": [\n       {\n         \"name\": \"Noma\",\n       },\n       {\n         \"name\": \"Le Fouquet's\",\n       },\n       {\n         \"name\": \"Café de Flore \"\n       }\n     ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Columns with Permission-Defined Table in Hasura GraphQL Engine\nDESCRIPTION: This code snippet illustrates the structure for comparing a column with a column in the table on which the permission is being defined in Hasura GraphQL Engine metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PGColumn\": {\n    \"Operator\": {\n      [\"$\", \"PGColumn\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Volatile SQL Function as Mutation (v2)\nDESCRIPTION: Example of using track_function v2 to expose a VOLATILE SQL function 'reset_widget' as a mutation in the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/custom-functions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"track_function\",\n    \"version\": 2,\n    \"args\": {\n        \"function\": {\n            \"schema\": \"public\",\n            \"name\": \"reset_widget\"\n        },\n        \"configuration\": {\n            \"exposed_as\": \"mutation\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connector via Metadata API\nDESCRIPTION: Example of using the Metadata API to create an action with a REST connector. Shows how to set the request transform options in the API request body.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n      \"name\":\"create_user\",\n      \"definition\":{\n        \"kind\":\"synchronous\",\n        \"arguments\":[\n            {\n              \"name\":\"username\",\n              \"type\":\"String!\"\n            },\n            {\n              \"name\":\"email\",\n              \"type\":\"String!\"\n            }\n        ],\n        \"output_type\":\"User\",\n        \"handler\":\"https://action.my_app.com/create-user\",\n        \"timeout\":60,\n        \"request_transform\": {\n          \"template_engine\": \"Kriti\",\n          \"method\": \"POST\",\n          \"url\": \"{{$base_url}}/create_user\",\n          \"query_params\": {\n            \"id\": \"{{$session_variables['x-hasura-user-id']}}\"\n          },\n          \"content_type\": \"application/json\",\n          \"body\": \"{\\\"username\\\": {{$body.input.username}}}\"\n        }\n      },\n    \"comment\": \"Custom action to create user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Query via API Request\nDESCRIPTION: HTTP POST request to create a native query through Hasura's metadata API. Includes query configuration, relationships, and return type specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<Snowflake field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": [\n      {\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"column_mapping\": {\n            \"<local column>\": \"<remote column>\"\n          },\n          \"remote_native_query: \"<remote native query name>\"\n        }\n      }\n    ],\n    \"object_relationships\": <same as array_relationships>,\n    \"description\": \"<text>\",\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Subscription Query for Streaming Messages\nDESCRIPTION: A GraphQL subscription query that starts streaming messages from the database using cursor-based pagination with a batch size of 5. The query retrieves the id and message fields from each record.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/streaming-subscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  messages (cursor: {initial_value: {id: \"0\"}}, batch_size: 5) {\n    id\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload Decoded\nDESCRIPTION: Sample decoded JWT payload showing standard and Hasura-specific claims including user roles and custom attributes\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"https://hasura.io/jwt/claims\": {\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-allowed-roles\": [\"user\", \"admin\"],\n    \"x-hasura-user-id\": \"123\",\n    \"x-hasura-org-id\": \"456\",\n    \"x-hasura-custom\": \"custom-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL in Kubernetes Deployment YAML\nDESCRIPTION: This snippet shows how to set the database URL in the Kubernetes deployment configuration for Hasura GraphQL engine. The HASURA_GRAPHQL_DATABASE_URL environment variable is used to specify the PostgreSQL connection string.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/kubernetes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\n        env:\n        - name: HASURA_GRAPHQL_DATABASE_URL\n          value: postgres://username:password@hostname:port/dbname\n...\n```\n\n----------------------------------------\n\nTITLE: GraphQL response showing filtered articles for author\nDESCRIPTION: This JSON response shows the result of the GraphQL query for the `author` role, demonstrating that only articles with the `author_id` matching the `X-Hasura-User-Id` are returned.  This confirms the successful implementation of the author-specific data access control through Hasura permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\": {\n    \\\"bigquery_articles\\\": [\n      {\n        \\\"id\\\": \\\"2\\\",\n        \\\"title\\\": \\\"veniam\\\",\n        \\\"author_id\\\": \\\"1\\\"\n      },\n      {\n        \\\"id\\\": \\\"5\\\",\n        \\\"title\\\": \\\"\\\",\n        \\\"author_id\\\": \\\"1\\\"\n      }\n    ]\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA based JWT for Hasura with X509 Certificate\nDESCRIPTION: Example of configuring EdDSA based JWT authentication for Hasura GraphQL Engine using a public key as X509 certificate. It uses Ed25519 algorithm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\":\"Ed25519\",\n  \"key\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIIBAzCBtgIBADAnMQswCQYDVQQGEwJERTEYMBYGA1UEAwwPd3d3LmV4YW1wbGUu\\nY29tMCowBQYDK2VwAyEA/9DV/InajW02Q0tC/tyr9mCSbSnNP1txICXVJrTGKDSg\\nXDBaBgkqhkiG9w0BCQ4xTTBLMAsGA1UdDwQEAwIEMDATBgNVHSUEDDAKBggrBgEF\\nBQcDATAnBgNVHREEIDAegg93d3cuZXhhbXBsZS5jb22CC2V4YW1wbGUuY29tMAUG\\nAytlcANBAKbTqnTyPcf4ZkVuq2tC108pBGY19VgyoI+PP2wD2KaRz4QAO7Bjd+7S\\nljyJoN83UDdtdtgb7aFgb611gx9W4go=\\n-----END CERTIFICATE REQUEST-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering Customer query results, including scalar fields, object relationships, and aggregate operations for array fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ninput Customer_order_by @oneOf {\n  # Scalar fields\n  CustomerId: order_by\n  FirstName: order_by\n  LastName: order_by\n  MobilePhone: order_by\n  SupportRepId: order_by\n\n  # Object relationships & Nested object fields\n  Address: Address_order_by\n\n  # Nested array of scalars\n  # Configurable in OpenDD ObjectType.definition.fields[].graphql.aggregateFieldName\n  Emails_aggregate: String_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook URL for Password Hashing Action\nDESCRIPTION: This URL points to a cloud function that handles password hashing for the custom action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhttps://us-central1-websitecloud-352908.cloudfunctions.net/docs-action-hash\n```\n\n----------------------------------------\n\nTITLE: Time-Based Log Deletion Example in SQL\nDESCRIPTION: SQL command demonstrating how to delete action logs older than a specified time period, in this case 3 months.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/logs-clean-up.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_action_log WHERE created_at < NOW() - INTERVAL '3 months';\n```\n\n----------------------------------------\n\nTITLE: Existence Check Query\nDESCRIPTION: Queries demonstrating how to filter based on the existence of nested objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/using-nested-objects.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors (\n    where: {\n      articles: {}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML configuration for setting naming convention via CLI\nDESCRIPTION: This YAML snippet shows how to configure the naming convention for a Postgres source using the Hasura CLI.  The `naming_convention` field under `customization` specifies which convention to use, overriding the default. The `database_url` is fetched from an environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/naming-convention.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"- name: <db_name>\\n  configuration:\\n    connection_info:\\n      database_url:\\n        from_env: <DB_URL_ENV_VAR>\\n  customization:\\n    naming_convention: hasura-default\\n  tables: []\\n  functions: []\\n\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Function Permission\nDESCRIPTION: Example of removing permission for a role to access a custom function using the pg_drop_function_permission API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_drop_function_permission\",\n    \"args\": {\n       \"function\": \"get_articles\",\n       \"role\": \"user\",\n       \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Native Query with Table Relationship in Hasura\nDESCRIPTION: This API call tracks a logical model and a native query with a relationship to an existing table 'authors'. It demonstrates how to create an object relationship between a native query and a table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"mssql_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"text\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"default\"\n      }\n    }\n    {\n      \"type\": \"mssql_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_table\": \"authors\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"get_articles\",\n        \"source\": \"default\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize New Hasura Project via CLI\nDESCRIPTION: Commands to create a new Hasura project and update existing projects to v2 config\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura init\n\nhasura scripts update-config-v2\n```\n\n----------------------------------------\n\nTITLE: Creating Native Query via API in Hasura\nDESCRIPTION: HTTP POST request to create a native query using Hasura's metadata API. It specifies the query name, arguments, relationships, SQL code, and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<PostgreSQL field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": [\n      {\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"column_mapping\": {\n            \"<local column>\": \"<remote column>\"\n          },\n          \"remote_native_query: \"<remote native query name>\"\n        }\n      }\n    ],\n    \"object_relationships\": <same as array_relationships>,\n    \"description\": \"<text>\",\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Multiple Queries in Hasura GraphQL\nDESCRIPTION: This JSON response shows the structure of the data returned when executing multiple top-level queries in a single Hasura GraphQL request. It includes the results for both the authors and articles queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/multiple-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 1,\n        \"name\": \"Justin\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Beltran\"\n      }\n    ],\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\"\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Author Name in GraphQL\nDESCRIPTION: This GraphQL query filters articles based on the author's name, demonstrating how to use nested object fields in the 'where' clause. It fetches articles whose author's name is 'Sidney'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(where: { author: { name: { _eq: \"Sidney\" } } }) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Format Remote Relationship Creation - Hasura Metadata API\nDESCRIPTION: Pre-v2.0.10 format for creating remote relationships to Remote Schemas. Supported but recommended to migrate to newer format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"pg_create_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"table\": \"users\",\n      \"hasura_fields\": [\"id\"],\n      \"remote_schema\": \"my-remote-schema\",\n      \"remote_field\": {\n        \"messages\": {\n           \"arguments\": {\n              \"user_id\":\"$id\"\n           }\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura CLI Examples in Bash\nDESCRIPTION: Provides examples of how to use the 'hasura update-cli' command. It includes updating to the latest version, disabling auto-update checks, and updating to a specific version.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_update-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update CLI to latest version:\nhasura update-cli\n\n# To disable auto-update check on the CLI, set\n# \"show_update_notification\": false\n# in ~/.hasura/config.json\n\n# Update CLI to a specific version (say v1.2.0-beta.1):\nhasura update-cli --version v1.2.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Disabling Hasura Config API via Command Line (Bash)\nDESCRIPTION: This snippet demonstrates how to disable the Config API using the 'enabled-apis' flag in the command line. It shows how to enable only the GraphQL and Metadata APIs, effectively disabling the Config API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# enable only graphql & Metadata apis, disable config\n--enabled-apis=\"graphql,metadata\"\nHASURA_GRAPHQL_ENABLED_APIS=\"graphql,metadata\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase JWT Authentication in Hasura\nDESCRIPTION: This snippet shows the configuration for Firebase JWT authentication in Hasura. It includes the JWK URL, audience, and issuer settings specific to Firebase.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\",\n  \"audience\": \"<firebase-project-id>\",\n  \"issuer\": \"https://securetoken.google.com/<firebase-project-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Lifetime for GraphQL Queries\nDESCRIPTION: This snippet illustrates controlling the cache lifetime using the `ttl` argument in a GraphQL query with the `@cached` directive. The `ttl` parameter is an integer determining the number of seconds a response is cached. The snippet is suitable for use in environments where query response caching is optimized for specific time constraints, up to a maximum of 300 seconds.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/caching-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached(ttl: 120) {\n  users {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Processed Events for Cron and Scheduled Events - SQL\nDESCRIPTION: This snippet contains SQL commands to delete processed cron and scheduled events based on their status. This allows for cleanup of events that are already delivered, errored, or considered dead.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/clean-up.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_cron_events\nWHERE status IN ('delivered', 'error', 'dead');\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_scheduled_events\nWHERE status IN ('delivered', 'error', 'dead');\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Database Integration in Hasura Cloud\nDESCRIPTION: Steps to connect an existing Heroku database to a Hasura Cloud project, including environment variable setup and database connection\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/heroku-url-sync.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to Hasura Cloud dashboard\n2. Navigate to project settings\n3. Go to 'Integrations' tab\n4. Select Heroku integration under 'Databases'\n5. Login to Heroku\n6. Enter environment variable name\n7. Connect desired database\n```\n\n----------------------------------------\n\nTITLE: Tracking Table with Custom Name in Hasura\nDESCRIPTION: Shows how to track a table with a custom name, useful for making non-GraphQL compliant table names compatible with GraphQL schema requirements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_track_table\",\n   \"args\": {\n     \"source\": \"default\",\n     \"table\": \"Author Details\",\n     \"configuration\": {\n        \"custom_name\": \"author_details\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Performance Tuning\nDESCRIPTION: Key configuration parameters for tuning Hasura subscription performance including refetch interval, batch size and connection settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/observability-and-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL=1\nHASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE=100\nmax_connections=50\n```\n\n----------------------------------------\n\nTITLE: Using Admin Secret with CLI\nDESCRIPTION: Command to open the Hasura Console using the CLI with an admin secret key for authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura console --admin-secret=<myadminsecretkey>\n```\n\n----------------------------------------\n\nTITLE: Using JSONB Scalar in GraphQL Mutation\nDESCRIPTION: Example of using the custom jsonb scalar type with variables in a mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_test($value: jsonb) {\n  insert_test(objects: [{ jsonb_col: $value }]) {\n    affected_rows\n    returning {\n      jsonb_col\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": {\n    \"name\": \"raven\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spec for Unauthorized Response from Webhook - HTTP\nDESCRIPTION: This snippet defines the response structure to return a 401 Unauthorized status when authentication fails during the GraphQL request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 401 Unauthorized\n```\n\n----------------------------------------\n\nTITLE: JWT Claims with Stringified JSON Format\nDESCRIPTION: This JSON illustrates JWT claims formatted as stringified JSON for use when 'claims_format' is set to 'stringified_json'. This format is needed for providers that only accept string claims. Properly escape quotes and characters in the stringified JSON.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"https://hasura.io/jwt/claims\": \"{\\\"x-hasura-allowed-roles\\\":[\\\"editor\\\",\\\"user\\\",\\\"mod\\\"],\\\"x-hasura-default-role\\\":\\\"user\\\",\\\"x-hasura-user-id\\\":\\\"1234567890\\\",\\\"x-hasura-org-id\\\":\\\"123\\\",\\\"x-hasura-custom\\\":\\\"custom-value\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking a Table via Hasura API (HTTP)\nDESCRIPTION: This HTTP request is an example of how to track a table using the Hasura GraphQL Engine's Metadata API. It includes necessary headers and payload to specify the source, schema, and table name that needs to be tracked.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"mssql_track_table\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"schema\": \"dbo\",\n      \"name\": \"<table name>\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Permissions via CLI\nDESCRIPTION: Shows how to configure select permissions for a logical model using YAML configuration. Includes column specification and filter configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: '<name>'\n    fields: ...\n    select_permissions:\n      - role: reader\n        permission:\n          columns:\n            - id\n            - title\n            - contents\n            - date\n          filter:\n            is_published:\n              _eq: true\n      - ...\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection String for MongoDB Compass\nDESCRIPTION: Connection string used to connect to the MongoDB instance deployed by Docker Compose. This string includes authentication credentials for the MongoDB database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmongodb://mongouser:mongopassword@localhost:27017/?authMechanism=DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Example Database Lock Statistics Output\nDESCRIPTION: Sample JSON output from the database monitoring query showing locked queries. The output includes details about query text, lock status, transaction timing, and blocking queries that are causing delays.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/catalog-migration-db-stats-logging.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"query\": \"INSERT INTO authors (name) values ('boo');\",\n    \"lock_granted\": true,\n    \"lock_mode\": \"ExclusiveLock\",\n    \"transaction_start_time\": \"2021-10-19T12:08:14.903342+00:00\",\n    \"query_start_time\": \"2021-10-19T12:08:14.903342+00:00\",\n    \"wait_event_type\": \"Lock\",\n    \"blocking_query\": \"LOCK authors IN ACCESS EXCLUSIVE MODE;\"\n  },\n  {\n    \"query\": \"INSERT INTO authors (name) values ('boo');\",\n    \"lock_granted\": false,\n    \"lock_mode\": \"RowExclusiveLock\",\n    \"transaction_start_time\": \"2021-10-19T12:08:14.903342+00:00\",\n    \"query_start_time\": \"2021-10-19T12:08:14.903342+00:00\",\n    \"wait_event_type\": \"Lock\",\n    \"blocking_query\": \"LOCK authors IN ACCESS EXCLUSIVE MODE;\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship Using Foreign Key Constraint\nDESCRIPTION: Creates an array relationship named 'articles' on the author table using a foreign key constraint on the article table's author_id column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"articles\",\n        \"source\": \"default\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\" : \"article\",\n                \"columns\" : [\"author_id\"]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Table Schema in Hasura\nDESCRIPTION: SQL table schema definition for a profile table containing personal information and geolocation data with auto-incrementing ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: profile\n\nColumns:\n\nid: Integer auto-increment\nname: Text\naddress: Text\nlat: Numeric, Nullable\nlng: Numeric, Nullable\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on InvoiceLine aggregate functions, including count and nested aggregations for scalar and object fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_aggregate_order_by @oneOf {\n  _count: order_by # WARN: Potential name clash here\n  # Scalar fields\n  InvoiceLineId: Int_aggregate_order_by\n  InvoiceId: Int_aggregate_order_by\n  TrackId: Int_aggregate_order_by\n  Quantity: Int_aggregate_order_by\n\n  # Nested object fields\n  UnitPrice: Multicurrency_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model via API Request\nDESCRIPTION: HTTP POST request to create a logical model through Hasura's metadata API. Includes source, name, fields configuration with types and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<Snowflake field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Source Health Check API\nDESCRIPTION: Example HTTP response showing the health status of two data sources. One source ('mssql_source_name') is healthy with an 'OK' status, while the other ('postgres_source_name') has an 'ERROR' status with connection issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/source-health.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"mssql_source_name\": {\n    \"error\": null,\n    \"status\": \"OK\",\n    \"timestamp\": \"2022-08-09T09:32:05.235347837Z\"\n  },\n  \"postgres_source_name\": {\n    \"error\": {\n      \"message\": \"connection error\",\n      \"extra\": \"connection to server at \\\"localhost\\\" (::1), port 6432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\nconnection to server at \\\"localhost\\\" (127.0.0.1), port 6432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n\"\n    },\n    \"status\": \"ERROR\",\n    \"timestamp\": \"2022-08-09T09:30:05.235347837Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Mutation with Curl\nDESCRIPTION: Explains how to perform a mutation using a curl request to update user data. Prerequisites include a valid Hasura endpoint and admin secret for secure operations. The mutation updates user status in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST '<YOUR_PROJECT_ENDPOINT>' --header 'Content-Type: application/json' --header 'x-hasura-admin-secret: <YOUR_PROJECT_SECRET>' --data-raw '{\"variables\": {\"id\": 1, \"is_online\": true}, \"query\": \"mutation MyMutation($id: Int!, $is_online: Boolean!) { update_users_by_pk(pk_columns: {id: $id}, _set: {is_online: $is_online}) { id name is_online } }\" }'\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema in GraphQL IDL\nDESCRIPTION: Example of a full Remote Schema definition in GraphQL IDL format, including types, interfaces, inputs, and query/mutation roots.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  user_id: Int\n  name: String\n  phone: String\n  userMessages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n}\n\ninterface Communication {\n  id: Int!\n  msg: String!\n}\n\ntype Message implements Communication {\n  id: Int!\n  name: String!\n  msg: String!\n  errorMsg: String\n}\n\ninput MessageWhereInpObj {\n  id: IntCompareObj\n  name: StringCompareObj\n}\n\ninput IntCompareObj {\n  eq : Int\n  gt : Int\n  lt : Int\n}\n\ninput StringCompareObj {\n  eq : String\n}\n\ninput IncludeInpObj {\n  id: [Int]\n  name: [String]\n}\n\ntype Query {\n  hello: String\n  messages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n  user(user_id: Int!): User\n  users(user_ids: [Int]!): [User]\n  message(id: Int!) : Message\n}\n\ntype mutation_root {\n  insert_user: (name: String!, phone: String!): User\n}\n\nschema {\n  query: Query\n  mutation: mutation_root\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table and Root Fields for GraphQL\nDESCRIPTION: This snippet defines the configuration options for setting up tables and root fields in a GraphQL API. It includes options for customizing table names, root fields, and column configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n| Key                              | Required | Schema                                    | Description                                                                                                                                                                                                                           |\n| -------------------------------- | -------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| custom_name                      | false    | `String`                                  | Customize the `<table-name>` with the provided custom name value. The GraphQL nodes for the table will be generated according to the custom name.                                                                                     |\n| custom_root_fields               | false    | [Custom Root Fields](#custom-root-fields) | Customize the root fields                                                                                                                                                                                                             |\n| column_config                    | false    | [ColumnConfig](#columnconfig)             | Customize the columns                                                                                                                                                                                                                 |\n| custom_column_names (deprecated) | false    | [CustomColumnNames](#customcolumnnames)   | Customize the column fields (deprecated in favour of custom_name on [ColumnConfig](#columnconfig))                                                                                                                                    |\n| comment                          | false    | `String`                                  | Customize the description shown in GraphQL introspection. If null or omitted then if a comment exists on the database table, it is used as the description (Postgres-only), and if not, an autogenerated description is used instead. |\n\n```\n\n----------------------------------------\n\nTITLE: Defining REST Endpoints in YAML\nDESCRIPTION: Example configuration for rest_endpoints.yaml that defines a RESTful endpoint to retrieve author information by ID. The endpoint uses a GET method and references a query from a collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n- comment: Get an author based on their id\n  definition:\n    query:\n      collection_name: allowed-queries\n      query_name: Author by Id\n  methods:\n    - GET\n  name: Author by Id\n  url: author/:id\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Lifetime in Hasura GraphQL Engine\nDESCRIPTION: This snippet demonstrates how to use the --conn-lifetime option or HASURA_GRAPHQL_PG_CONN_LIFETIME environment variable to set an expiration time for database connections in Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n- server: add new `--conn-lifetime` and `HASURA_GRAPHQL_PG_CONN_LIFETIME` options for expiring connections after some amount of active time (#5087)\n```\n\n----------------------------------------\n\nTITLE: JSON Query Request for Fibonacci Function with Relationship in Hasura\nDESCRIPTION: This JSON structure represents the query request sent to execute the 'fibonacci' function. It includes function arguments, relationship definitions, and field selections for both the function result and the nested relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"function\",\n  \"function\": [\n    \"fibonacci\"\n  ],\n  \"function_arguments\": {\n    \"upto\": 9,\n    \"__hasura_session\": {\n      \"x-hasura-artist-name\": \"patricia\",\n      \"x-hasura-role\": \"admin\"\n    }\n  },\n  \"relationships\": [\n    {\n      \"type\": \"function\",\n      \"source_function\": [\n        \"fibonacci\"\n      ],\n      \"relationships\": {\n        \"myself\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Artist\"]\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        }\n      }\n    },\n    {\n      \"type\": \"table\",\n      \"source_table\": [\n        \"Artist\"\n      ],\n      \"relationships\": {\n        \"myself\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Artist\"]\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Name\": {\n        \"type\": \"column\",\n        \"column\": \"Name\",\n        \"column_type\": \"string\"\n      },\n      \"myself\": {\n        \"type\": \"relationship\",\n        \"relationship\": \"myself\",\n        \"query\": {\n          \"fields\": {\n            \"Name\": {\n              \"type\": \"column\",\n              \"column\": \"Name\",\n              \"column_type\": \"string\"\n            }\n          }\n        }\n      },\n      \"ArtistId\": {\n        \"type\": \"column\",\n        \"column\": \"ArtistId\",\n        \"column_type\": \"number\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Key-Value Query Parameters via API\nDESCRIPTION: HTTP request for configuring key-value query parameters in event trigger request transformation using the Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"content_type\": \"application/json\",\n      \"body\": \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Hasura DDN Services using Docker\nDESCRIPTION: Command to initialize the Hasura engine, connectors, and observability stack for a DDN project using Docker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Nested Inserts\nDESCRIPTION: Demonstrates a GraphQL mutation, `insertAuthorWithArticles`, involving nested inserts to exemplify how input validation works across multiple tables. The mutation inserts an author and their associated articles, triggering validation webhooks for both the `author` and `article` tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"mutation insertAuthorWithArticles($name: String, $email: String, $articles_content: [article_insert_input!]!) {\\n  insert_author(objects: { name: $name, email: $email, articles: { data: $articles_content } }) {\\n    returning {\\n      first_name\\n      articles {\\n        id\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Logical Model Permissions via API\nDESCRIPTION: This HTTP request shows how to remove select permissions for a specific role from a logical model using Hasura's metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_drop_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration for Hasura with MS SQL Server\nDESCRIPTION: Commands to download the Hasura MS SQL Server docker compose file using either wget or curl. This configuration file sets up the necessary containers for running Hasura with SQL Server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/docker-compose-ms-sql-server/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/docker-compose-ms-sql-server/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors Without Published Articles Using _not Operator in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use the _not operator to fetch authors who don't have any published articles. It filters the authors based on the absence of articles with is_published set to true.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/boolean-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      _not: {\n        articles: { is_published: {_eq: true} }\n      }\n    }) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL response showing filtered articles\nDESCRIPTION: This JSON response shows the result of the GraphQL query when the `X-Hasura-Role` is set to `editor`.  Only the article with an empty title is returned, demonstrating the successful application of the select permission filter.  The response includes the `body`, `title`, and `author_id` of the selected article.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"data\\\": {\n    \\\"bigquery_articles\\\": [\n      {\n        \\\"body\\\": \\\"Sample article content 1\\\",\n        \\\"title\\\": \\\"\\\",\n        \\\"author_id\\\": \\\"1\\\"\n      }\n    ]\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Untracking PostgreSQL Native Query with Hasura Metadata API\nDESCRIPTION: This snippet shows how to untrack a PostgreSQL Native Query using the Hasura Metadata API. It includes the HTTP request format and JSON payload structure for the 'pg_untrack_native_query' operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_untrack_native_query\",\n    \"args\": {\n      \"source\": \"default\",\n      \"root_field_name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Computed Field via API in Hasura\nDESCRIPTION: This HTTP snippet demonstrates how to add a computed field named 'full_name' for the 'authors' table using the Hasura Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/computed-fields.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_computed_field\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": {\n      \"name\": \"authors\",\n      \"schema\": \"public\"\n    },\n    \"name\": \"full_name\",\n    \"definition\": {\n      \"function\": {\n        \"name\": \"author_full_name\",\n        \"schema\": \"public\"\n      },\n      \"table_argument\": \"author_row\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering Invoice query results by various fields including scalar properties, object relationships, and array relationships with aggregates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_order_by @oneOf {\n  # Scalar fields\n  InvoiceId: order_by\n  InvoiceDate: order_by\n  CustomerId: order_by\n  Total: order_by\n\n  # Object relationships & Nested object fields\n  Customer: Customer_order_by # Order by type for Customer model\n  BillingAddress: Address_order_by\n\n  # Array relationships & nested arrays of objects\n  # Configurable in OpenDD Relationship.definition.graphql.aggregateFieldName\n  InvoiceLines_aggregate: InvoiceLine_aggregate_order_by # Order by aggregate type for InvoiceLine model\n  # Configurable in OpenDD ObjectType.definition.fields[].graphql.aggregateFieldName\n  Discount_aggregate: Discount_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using hasura init Command in Bash\nDESCRIPTION: Various examples showing how to use the hasura init command to create and configure new Hasura projects with different options such as endpoints and admin secrets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a directory to store migrations\nhasura init [directory-name]\n\n# Now, edit <my-directory>/config.yaml to add endpoint and admin secret\n\n# Create a directory with endpoint and admin secret configured:\nhasura init <my-project> --endpoint https://my-graphql-engine.com --admin-secret adminsecretkey\n\n# Create a Hasura Project in the current working directory\nhasura init .\n\n# See https://hasura.io/docs/latest/graphql/core/migrations/index.html for more details\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Trace Filtering in YAML\nDESCRIPTION: YAML configuration for filtering specific trace operations using the OpenTelemetry Collector's Filter Processor. This allows selective tracing of GraphQL requests and operations while excluding others.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/best-practices.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    traces:\n      span:\n        # - 'IsMatch(name, \"Event trigger\")'\n        # - 'IsMatch(name, \"Scheduled trigger\")'\n        # - 'IsMatch(name, \"websocket\")'\n        - 'IsMatch(name, \"/v1/version\")'\n        - 'IsMatch(name, \"/v1/entitlement\")'\n        - 'IsMatch(name, \"/v1alpha1/config\")'\n        # filter unused graphql operation\n        - attributes[\"graphql.operation.name\"] == \"MyQuery\"\n```\n\n----------------------------------------\n\nTITLE: Transforming REST to GraphQL with Kriti Template (Response)\nDESCRIPTION: A kriti template that transforms REST response back to GraphQL format, converting field names from REST convention to GraphQL convention. It handles nested objects and arrays with conditional logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/openapi-to-hasura-single-action.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": {{$body?.id}},\n  \"name\": {{$body?.$name}},\n  \"category\": {\n    \"id\": {{$body?.category?.id}},\n    \"name\": {{$body?.category?.name}}\n  },\n  \"photoUrls\": {{$body?.photoUrls}},\n  \"tags\": {{if inverse(empty($body?.tags))}} {{ range _, tags := $body?.tags}} {\n    \"id\": {{tags?.id}},\n    \"name\": {{tags?.name}}\n    } {{end}} {{else}} null {{end}},\n  \"status\": {{$body?.status}}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Hasura Observability Demo\nDESCRIPTION: Instructions for cloning the Hasura observability boilerplate repository, setting up environment variables, and running the demo using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/pre-built-dashboards.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nClone the [observability boilerplate](https://github.com/hasura/graphql-engine/tree/master/community/boilerplates/observability/enterprise) to your local machine, copy the sample environment file `dotenv` to `.env`, and edit the enterprise license key (`HGE_EE_LICENSE_KEY`) and secrets. The demo uses [Docker Compose](https://docs.docker.com/compose/) to setup container services.\n```\n\n----------------------------------------\n\nTITLE: Filtering Schema Request in JSON for Hasura GraphQL Engine\nDESCRIPTION: This JSON structure demonstrates how to filter the schema request to reduce the amount of data returned. It includes filters for specific tables and functions, and a detail level parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filters\": {\n    \"only_tables\": [\n      [\"Artist\"],\n      [\"Album\"]\n    ],\n    \"only_functions\": [\n      [\"SearchAlbums\"]\n    ]\n  },\n  \"detail_level\": \"basic_info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Event Invocations in Hasura - One-off Example\nDESCRIPTION: API endpoint for retrieving scheduled event invocations for one-off events. Includes get_rows_count flag to return the total number of rows in the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"get_scheduled_event_invocations\",\n    \"args\" : {\n      \"type\": \"one_off\",\n      \"limit\": 10,\n      \"offset\": 0,\n      \"get_rows_count\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Highlighting Examples\nDESCRIPTION: Example of inline code formatting for demonstration of terms to use in documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/semantics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`you`, `your`, and `we`, `our`\n```\n\n----------------------------------------\n\nTITLE: Querying Articles by Rating using Greater Than or Equal To Operator in GraphQL\nDESCRIPTION: This example demonstrates how to fetch a list of articles rated 4 or more using the _gte operator with an integer field in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {rating: {_gte: 4}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded Node ID for Relay in Hasura\nDESCRIPTION: Example of the base64 encoded value of a Node ID for the author table in Hasura's Relay implementation. This encoded string is used for global object identification in the Relay schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/relay-schema.mdx#2025-04-17_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nWzEsICJwdWJsaWMiLCAiYXV0aG9yIiwgIjI5NmQzMGIxLTQ3NGQtNDAxMS1hOTA3LTI3MDE5OTJiMDRjMSJd\n```\n\n----------------------------------------\n\nTITLE: Tracking Multiple BigQuery Tables\nDESCRIPTION: API endpoint for tracking multiple BigQuery tables simultaneously. Includes options for 'author' and 'book' tables with configurable warning behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"author\"\n        }\n      },\n      {\n        \"source\": \"default\",\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"book\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata Changes via CLI\nDESCRIPTION: CLI command to apply metadata changes to a Hasura instance after configuring read replicas in the metadata YAML file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Using TableOrderBy in GraphQL Queries\nDESCRIPTION: These examples show how to use TableOrderBy for columns, object relations, and array relations aggregates in GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(order_by: { rating: asc }) {\n    title\n    content\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article(order_by: { author: { rating: desc } }) {\n    title\n    content\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  author(order_by: { articles_aggregate: { max: { rating: asc } } }) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a RESTified GraphQL Endpoint using Schema/Metadata API\nDESCRIPTION: This snippet demonstrates how to delete an existing RESTified GraphQL endpoint using the `drop_rest_endpoint` mutation in the Schema/Metadata API.  The request requires the `name` argument to identify the endpoint to be removed. This operation is used to delete an existing RESTified GraphQL Endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/restified-endpoints.mdx#2025-04-17_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_rest_endpoint\",\n    \"args\": {\n        \"name\": \"name_of_the_endpoint\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Query Collection - HTTP POST Request\nDESCRIPTION: Renames an existing query collection to a new name. Requires both the current collection name and the new name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"rename_query_collection\",\n    \"args\": {\n         \"name\": \"my_collection\",\n         \"new_name\": \"my_new_collection\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom date scalar type in yyyy-mm-dd format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    date: \"1996-03-15\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Response Structure of Source Health Check API\nDESCRIPTION: Shows the general structure of the response from the Source Health Check API. The response is a JSON object with source names as keys and health status objects as values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/source-health.mdx#2025-04-17_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"source_1\": HealthStatus,\n    \"source_2\": HealthStatus,\n     ...        ...\n    \"source_n\": HealthStatus\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Hasura Cloud Project Tenant ID using GraphQL\nDESCRIPTION: This query retrieves the tenant ID associated with a specific Hasura Cloud project ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getProjectTenantId {\n  projects_by_pk(id: \"7a79cf94-0e53-4520-a560-1b02bf522f08\") {\n    id\n    tenant {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Aggregate Fields Selection Type\nDESCRIPTION: Defines a GraphQL type for selecting aggregate fields on Multicurrency objects. Includes count functions and field-specific aggregations for currency properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_72\n\nLANGUAGE: graphql\nCODE:\n```\ntype Multicurrency_aggregate_fields {\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  Currency: String_aggregate_fields!\n  Value: Decimal_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with _st_intersects_rast GraphQL Queries\nDESCRIPTION: The _st_intersects_rast query filters raster values intersecting with a given raster input. It uses a named query variable for the raster input and returns raster data along with their unique IDs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getIntersectingValues ($rast: raster){\n  dummy_rast(where: {rast: {_st_intersects_rast: $rast}}){\n    rid\n    rast\n  }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  \"data\": {\n    \"dummy_rast\": [\n      {\n        \"rid\": 1,\n        \"rast\": \"01000001009A9999999999E93F9A9999999999E9BF000000000000F0BF000000000000104000000000000000000000000000000000E610000005000500440000010101000101010101010101010101010101010001010100\"\n      },\n      {\n        \"rid\": 2,\n        \"rast\": \"0100000100166C8E335B91F13FE2385B00285EF6BF360EE40064EBFFBF8D033900D9FA134000000000000000000000000000000000E610000005000500440000000101010001010101010101010101010101000101010000\"\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  \"rast\": \"0100000100000000000000004000000000000000C00000000000000000000000000000084000000000000000000000000000000000E610000001000100440001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Geography Scalar in GraphQL Mutation\nDESCRIPTION: Example of using the custom geography scalar type with GeoJSON values in PostGIS.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertGeography($point: geography!) {\n  insert_test(objects: [{ geography_col: $point }]) {\n    affected_rows\n    returning {\n      geography_col\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"point\": {\n    \"type\": \"Point\",\n    \"coordinates\": [0, 0]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Query from a Collection in Hasura\nDESCRIPTION: This snippet demonstrates how to remove a specific query from a collection using the Hasura Metadata API. It requires specifying both the collection name and the query name to be removed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_query_from_collection\",\n    \"args\": {\n        \"collection_name\": \"my_collection\",\n        \"query_name\": \"query_2\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Models and Native Queries with Table Relationships in Hasura\nDESCRIPTION: This HTTP POST request to the Hasura metadata API shows how to track a Logical Model for 'article' and create a Native Query with a relationship to an existing 'authors' table. It uses a bulk atomic operation for consistency.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"pg_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"text\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"default\"\n      }\n    }\n    {\n      \"type\": \"pg_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_table\": \"authors\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"get_articles\",\n        \"source\": \"default\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous User Permissions in Hasura\nDESCRIPTION: Example of setting up read permissions for unauthorized users with row-level filtering based on a published flag\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nproducts(where: {is_published: {_eq: true}}) {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Remote Relationships in Hasura CLI\nDESCRIPTION: YAML configuration for setting up select permissions in a reviews table using remote source relationships. This example filters access based on product ownership across different databases.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: reviews\n  select_permissions:\n    - role: user\n      permission:\n        columns: *\n        filter:\n          review_product:\n            owner_id:\n              _eq: X-Hasura-User-Id\n```\n\n----------------------------------------\n\nTITLE: Importing Apollo Client Modules for Subscription Setup\nDESCRIPTION: Required imports for setting up Apollo Client with subscription support using GraphQL WebSocket links.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\nimport { getMainDefinition } from '@apollo/client/utilities';\n```\n\n----------------------------------------\n\nTITLE: Apply Hasura Seed File with CLI\nDESCRIPTION: This command applies a Hasura seed file to a Hasura instance. The `--file` flag specifies the seed file to apply.  If `--database-name` is not specified, the CLI will prompt for the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-seeds.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura seed apply --file 1656499378904_myNewAuthorsSeed.sql\"\n```\n\n----------------------------------------\n\nTITLE: Start Hasura Console via CLI\nDESCRIPTION: This bash command starts the Hasura Console served by the Hasura CLI within the project directory.  It allows users to interact with the Hasura instance and make changes to the database schema and metadata, ensuring that all changes are tracked by the migration system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"# in project directory\nhasura console\"\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Tables Using Markdown in Docusaurus MDX\nDESCRIPTION: Demonstrates how to create a basic table using markdown syntax in Docusaurus MDX. This approach is suitable for tables with simple text content and no column width control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field             | Description                                                                                                                                                                                                                                                                                                                                                                              |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Region            | The region of the datacenter where your New Relic account stores its data. [Read more about regions on New Relic docs.](https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers)                                                                                                                                                      |\n| API Key           | API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from [here](https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you are in New Relic US region and [here](https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you're in New Relic EU region. |\n| Host              | The name of the originating host of the log and metrics.                                                                                                                                                                                                                                                                                                                                 |\n| Custom Attributes | Custom Attributes associated with your logs and metrics. A default source tag `hasura-cloud-metrics` is added to all exported logs and metrics. Attributes `project_id` and `project_name` are added to all exported metrics.                                                                                                                                                            |\n| Service Name      | The name of the application or service generating the log events.                                                                                                                                                                                                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Collection using MongoShell\nDESCRIPTION: MongoShell command to create a new 'users' collection in the 'demo' database. This creates the collection structure that will store user documents.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndb.createCollection('users');\n```\n\n----------------------------------------\n\nTITLE: Hasura Seed Apply Options\nDESCRIPTION: Available command-specific flags and options for the seed apply command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --all-databases      set this flag to attempt to apply seeds on all databases present on server\n-f, --file stringArray   seed file to apply\n-h, --help               help for apply\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Set and Template via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to use the pg_add_source Metadata API to configure a connection set and connection template for a Postgres database in Hasura. It includes settings for the primary connection and an additional connection in the set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_source\",\n  \"args\": {\n    \"name\": \"db\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n          \"from_env\": \"<DATABASE_URL_ENV>\"\n        },\n        \"pool_settings\": {\n          \"idle_timeout\": 180,\n          \"max_connections\": 50,\n          \"retries\": 1\n        }\n      },\n      \"connection_template\": {\n        \"template\": \"{{ if $.request.session?[\\\"x-hasura-role\\\"] == \\\"user\\\" }} {{$.primary}} {{else}} {{$.connection_set.db_1}} {{ end }}\"\n      },\n      \"connection_set\": [\n        {\n          \"name\": \"db_1\",\n          \"connection_info\": {\n            \"database_url\": {\n              \"from_env\": \"<DATABASE_URL_ENV>\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding updated_at Timestamp in PostgreSQL using CLI\nDESCRIPTION: This snippet demonstrates how to add an updated_at timestamp column to the article table, including the definition of a function and trigger to manage automatic updates to this column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/created-updated-timestamps.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plsql\nCODE:\n```\nALTER TABLE ONLY \"public\".\"article\"\nADD COLUMN \"updated_at\" TIMESTAMP DEFAULT NOW();\n\nCREATE FUNCTION trigger_set_timestamp()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\nRETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER set_timestamp\nBEFORE\nUPDATE ON article\nFOR EACH ROW\nEXECUTE PROCEDURE trigger_set_timestamp();\n```\n\nLANGUAGE: plsql\nCODE:\n```\nDROP trigger set_timestamp on article;\nDROP function trigger_set_timestamp();\nALTER TABLE article DROP COLUMN updated_at;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Override of malloc with mimalloc on Linux/BSD\nDESCRIPTION: Example of preloading the mimalloc shared library on Linux/BSD systems to override the standard malloc interface. This allows all calls to malloc to be resolved to the mimalloc library without recompilation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nenv LD_PRELOAD=/usr/lib/libmimalloc.so myprogram\n```\n\n----------------------------------------\n\nTITLE: Query Tags Metadata Specification in YAML\nDESCRIPTION: The YAML schema for configuring query tags in Hasura metadata, showing all available options including disabled, format, and omit_request_id flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  name: # Name of the source\n  configuration:\n  query_tags: # Optional Field\n    disabled: # Optional Field | Type: Bool | Values: true or false\n    format: # Optional Field  | Values: standard or sqlcommenter\n    omit_request_id: # Optional Field | Type: Bool | Values: true or false\n```\n\n----------------------------------------\n\nTITLE: Sorting Basic Objects by Name\nDESCRIPTION: Query to fetch a list of authors sorted by their names in ascending order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors (\n    order_by: {name: asc}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and its associated Postgres database using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Relationship via CLI Configuration\nDESCRIPTION: YAML configuration for adding a manual object relationship between authors table and author_average_rating view in Hasura metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n- table:\n    schema: public\n    name: authors\n  object_relationships:\n    - name: avg_rating\n      using:\n        manual_configuration:\n          remote_table:\n            schema: public\n            name: author_average_rating\n          column_mapping:\n            id: author_id\n- table:\n    schema: public\n    name: author_average_rating\n```\n\n----------------------------------------\n\nTITLE: Sample Explain API Request\nDESCRIPTION: Example HTTP request showing how to analyze a simple GraphQL query for fetching user names\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/explain.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/graphql/explain HTTP/1.1\nContent-Type: application/json\n\n{\n     \"query\": {\n         \"query\": \"query getUsers { user { name }}\",\n         \"operationName\": \"getUsers\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status\nDESCRIPTION: Command to check the status of migrations in both the local directory and on the Hasura server. This helps identify which migrations are present locally and which have been applied to the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# in project dir\nhasura migrate status\n```\n\n----------------------------------------\n\nTITLE: Filtering Ancestors with _ancestor Operator in GraphQL\nDESCRIPTION: This query selects ancestors of an ltree argument using the _ancestor operator. It returns paths that are ancestors of 'Tree.Collections.Pictures.Astronomy.Astronauts'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  tree (\n    where: {path: {_ancestor: \"Tree.Collections.Pictures.Astronomy.Astronauts\"}}\n  ) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Event Trigger Process in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet shows the JSON structure of an event trigger process log in Hasura GraphQL Engine. It includes the count of events fetched for each source and the number of fetches occurred within a 10-minute timeframe.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"num_events_fetched\": {\n      \"default\": 2,\n      \"source_1\": 1\n    },\n    \"num_fetches\": 601\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-01-24T20:20:45.036+0530\",\n  \"type\": \"event-trigger-process\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Trace Context in Postgres Transactions\nDESCRIPTION: Demonstrates how to access the serialized trace context in Postgres transactions using a transaction-local variable. This allows for propagating trace information in trigger functions and downstream services.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud-monitoring/tracing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nhasura.tracecontext\n```\n\n----------------------------------------\n\nTITLE: Setting Row Fetch Limit via Hasura API - HTTP\nDESCRIPTION: This HTTP POST request sets row fetch limits for a table through the Hasura Metadata API. It includes necessary headers and a JSON body specifying the permission type, database, table, role, and the conditions for the limit.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-fetch-limit.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"pg_create_select_permission\",\n   \"args\": {\n      \"source\": \"<db_name>\",\n      \"table\": \"users\",\n      \"role\": \"user\",\n      \"permission\": {\n         \"columns\": \"*\",\n         \"filter\": {\n            \"id\": {\n               \"_eq\": \"X-Hasura-User-Id\"\n            }\n         },\n         \"limit\": 1\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking Article Logical Model via API\nDESCRIPTION: This HTTP request demonstrates how to untrack the 'article' logical model using the Hasura metadata API. It specifies the source as 'default' and the name of the model to be untracked as 'article'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hasura Console URL Pattern\nDESCRIPTION: The URL pattern to access the Hasura Console after deployment on Koyeb, where the URL includes the app name and organization name in the Koyeb domain.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/koyeb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-app-name>-<your-org-name>.koyeb.app/\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Managed Services\nDESCRIPTION: Example Docker Compose configuration showing how to set up Hasura with external PostgreSQL and Redis services.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_REDIS_URL: 'redis://redis:6379'\n    HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: 'redis://redis:6379'\n```\n\n----------------------------------------\n\nTITLE: Payload for Scheduled Trigger in JSON\nDESCRIPTION: This snippet outlines the JSON payload that will be sent to the webhook when the Scheduled Trigger is activated. It categorizes the event type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/daily-summary-email.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_type\": \"daily_recap_email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Cached Query\nDESCRIPTION: This shows a GraphQL query using variables, illustrating how differing values for these variables result in distinct cache keys. It highlights the role variables play in determining cache uniqueness.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/how-it-works.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery getNewlyJoinedUsers($minDate: timestamptz!, $maxDate: timestamptz!) @cached {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema Customization in YAML\nDESCRIPTION: Configuration structure for customizing remote schemas, including root fields namespace, type name modifications with prefix/suffix support, and field name customization options. The configuration allows for explicit mapping that takes precedence over prefix/suffix rules.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/remote-schema-customization.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncustomization:\n  # if root_fields_namespace is absent, the fields\n  # are merged into the query root directly\n  root_fields_namespace: \"something\"\n  type_names:\n    prefix: some_prefix\n    suffix: some_suffix\n    # mapping takes precedence over prefix and suffix\n    mapping:\n      old_name: new_name\n  field_names:\n    - parent_type: old_type_name\n      prefix: some_prefix\n      suffix: some_suffix\n      # mapping takes precedence over prefix and suffix\n      mapping:\n        old_name: new_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming Subscription Environment Variables\nDESCRIPTION: Environment variables for configuring batch size and refetch interval in streaming subscriptions. These settings control how Hasura handles multiplexed subscription batches.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/streaming/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHASURA_GRAPHQL_STREAMING_QUERIES_MULTIPLEXED_BATCH_SIZE\nHASURA_GRAPHQL_STREAMING_QUERIES_MULTIPLEXED_REFETCH_INTERVAL\n```\n\n----------------------------------------\n\nTITLE: Defining Date Aggregate Selection Options in GraphQL\nDESCRIPTION: This input type and enum define aggregate functions that can be applied to date fields, such as count, count distinct, max, and min operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_84\n\nLANGUAGE: graphql\nCODE:\n```\ninput Date_aggregate_select @oneOf {\n  _unary_fn: Date_aggregate_select_unary\n}\n\nenum Date_aggregate_select_unary {\n  _count\n  _count_distinct\n  _max\n  _min\n}\n```\n\n----------------------------------------\n\nTITLE: Define Logical Model in YAML for Hasura (Generic)\nDESCRIPTION: This YAML snippet outlines the general structure for defining a logical model within a Hasura metadata file. It emphasizes the key components: the `name` of the logical model, the `fields` it contains, and for each field, the `type`, `nullable` constraint, and an optional `description`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<SQL Server field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Expression for Testing Hasura Scheduled Triggers\nDESCRIPTION: Shows how to modify the cron expression from daily midnight execution ('0 0 * * *') to every minute ('* * * * *') for testing purposes. This allows immediate verification of the webhook functionality without waiting for the daily trigger.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/product-review.mdx#2025-04-17_snippet_2\n\nLANGUAGE: cron\nCODE:\n```\n0 0 * * *\n```\n\nLANGUAGE: cron\nCODE:\n```\n* * * * *\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig v3 with Webhook Mode in Hasura\nDESCRIPTION: Example of OpenDD metadata for AuthConfig v3, which provides more flexibility in authentication webhook configuration. It demonstrates how to configure method, URL from environment variable, and custom header forwarding rules.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      method: GET\n      url:\n        valueFromEnv: AUTH_HOOK_URL\n      customHeadersConfig:\n        headers:\n          forward:\n            - Authorization\n          additional:\n            user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in Hasura\nDESCRIPTION: This snippet illustrates how to use the set_opentelemetry_config API to set up OpenTelemetry integration in Hasura. It allows configuring export of traces, metrics, and logs to an OpenTelemetry-compliant APM receiver, including endpoint settings, headers, and resource attributes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/observability.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n    \"type\": \"set_opentelemetry_config\",\n    \"args\": {\n        \"status\": \"enabled\",\n        \"data_types\": [\n            \"traces\",\n            \"metrics\",\n            \"logs\"\n        ],\n        \"exporter_otlp\": {\n            \"otlp_traces_endpoint\": \"http://localhost:4318/v1/traces\",\n            \"otlp_metrics_endpoint\": \"http://localhost:4318/v1/metrics\",\n            \"otlp_logs_endpoint\": \"http://localhost:4318/v1/logs\",\n            \"protocol\": \"http/protobuf\",\n            \"traces_propagators\": [\"tracecontext\"],\n            \"headers\": [\n                {\n                    \"name\": \"x-test-header\",\n                    \"value\": \"testing\"\n                },\n                {\n                    \"name\": \"x-header-from-env\",\n                    \"value_from_env\": \"TEST_ENV_VAR\"\n                }\n            ],\n            \"resource_attributes\": [\n                {\n                    \"name\": \"stage\",\n                    \"value\": \"production\"\n                },\n                {\n                    \"name\": \"region\",\n                    \"value\": \"us-east\"\n                }\n            ]\n        },\n        \"batch_span_processor\": {\n            \"max_export_batch_size\": 100\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteTable Schema in Hasura\nDESCRIPTION: Describes the schema for remote table object relationships, including table and column specifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"table\": \"TableName\",\n  \"column\": \"PGColumn\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Database Source Pool Settings via API\nDESCRIPTION: HTTP POST request to update an existing database source's connection pool configuration using the pg_update_source metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/cloud-connection-pooling.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_update_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n           \"from_env\": \"<DB_URL_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"total_max_connections\": 50,\n          \"idle_timeout\": 180,\n          \"retries\": 1,\n          \"pool_timeout\": 360,\n          \"connection_lifetime\": 600\n        },\n        \"use_prepared_statements\": true,\n        \"isolation_level\": \"read-committed\",\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Allow List\nDESCRIPTION: This snippet provides an example of `allow_list.yaml`, which defines the query collections allowed to be executed. It specifies a collection named `allowed-queries` to be used as the allow-list.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- collection: allowed-queries\n\n```\n\n----------------------------------------\n\nTITLE: Creating an ECS Cluster with AWS CLI\nDESCRIPTION: Creates a new ECS cluster named 'hasura-fargate-cluster' using the AWS CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-cluster --cluster-name hasura-fargate-cluster\n```\n\n----------------------------------------\n\nTITLE: Translating GraphQL Query to SQL with Permissions\nDESCRIPTION: Describes the SQL translation of a GraphQL query executed with an inherited role, highlighting how different permissions from base roles are combined. It explains how access to columns is determined based on row filters and permissions logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect (case when (P1 or P2) then C1 else null end) as C1,\n       (case when P2 then C2 else null end) as C2\nfrom T\nwhere (P1 or P2)\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: Command to apply metadata changes after updating the backend_configs.yaml file. This pushes the configuration to the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/adding-data-connectors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Setting a table as an enum in Hasura using CLI\nDESCRIPTION: This YAML snippet shows how to configure a table as an enum in Hasura using the CLI by modifying the `tables.yaml` file in the `metadata` directory.  The `is_enum` flag is set to `true` for the specified table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\\n    schema: public\\n    name: user_role\\n  is_enum: true\"\n```\n\n----------------------------------------\n\nTITLE: Marking Squashed Migrations as Applied in Hasura\nDESCRIPTION: Command to mark a squashed migration as already applied on the server without executing it again, avoiding potential errors and conflicts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# mark the squashed migration as applied on this server\nhasura migrate apply --version \"<squash-migration-version-timestamp-number>\" --skip-execution --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Untracking SQL Function\nDESCRIPTION: Example of using untrack_function to remove a SQL function 'search_articles' from the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/custom-functions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"untrack_function\",\n    \"args\": {\n        \"schema\": \"public\",\n        \"name\": \"search_articles\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Non-existent Article by Primary Key in GraphQL\nDESCRIPTION: Mutation that attempts to update an article with a non-existent primary key (id=100). It demonstrates how the mutation returns null when the target object doesn't exist.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_an_article {\n  update_article_by_pk (\n    pk_columns: {id: 100}\n    _set: { is_published: true }\n  ) {\n    id\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Relationships in Hasura CLI\nDESCRIPTION: YAML configuration to track an array relationship and expose it over the GraphQL API in Hasura CLI. This snippet demonstrates how to add an array relationship to the tables.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n      schema: public\n      name: <table name>\n   array_relationships:\n   - name: <relationship name>\n      using:\n      foreign_key_constraint_on:\n         column: <reference column>\n         table:\n            schema: public\n            name: <reference table name>\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata in Hasura CLI\nDESCRIPTION: Command to apply metadata changes including permission configurations to Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Adding a Data Source - YAML\nDESCRIPTION: This snippet shows the configuration needed in the docker-compose.yaml file to connect to a Postgres database. The PG_DATABASE_URL environment variable holds the connection string for local development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nPG_DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Setting Table as Enum via pg_set_table_is_enum Metadata API\nDESCRIPTION: This snippet shows how to designate an existing table as an enum table using the `pg_set_table_is_enum` Metadata API. The request specifies the table name (`user_role`), source database (`default`), and sets `is_enum` to true, enabling its use as an enum in the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_set_table_is_enum\",\n  \"args\": {\n    \"table\": {\n      \"schema\": \"public\",\n      \"name\": \"user_role\"\n    },\n    \"source\": \"default\",\n    \"is_enum\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Nested Objects in GraphQL\nDESCRIPTION: GraphQL query demonstrating aggregation over nested object fields, specifically the BillingAddress field of the Invoice collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_aggregate {\n    BillingAddress {\n      _count # Total number of non-null BillingAddresses across all Invoices\n      PostalCode {\n        _min # Smallest postal code\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Docker Compose file with wget for Hasura GraphQL Engine\nDESCRIPTION: Command to download the Docker Compose configuration file using wget, which defines the setup for Hasura GraphQL Engine and Postgres database containers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/docker-simple.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to RESTified GraphQL Endpoint in HTTP\nDESCRIPTION: Demonstrates a simple GET request to a RESTified GraphQL endpoint. The endpoint includes a path parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/restified.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/rest/simple_query/1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Logging Live Query Poller Metrics in Hasura - Community Edition - JSON\nDESCRIPTION: This snippet captures the structure of the 'livequery-poller-log' emitted by Hasura's Community Edition during the execution of live queries. It outlines detailed metrics such as execution batches, generated SQL, and snapshot time involved in processing live subscriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"execution_batches\": [\n      {\n        \"batch_id\": 1,\n        \"batch_response_size_bytes\": 106,\n        \"db_execution_time\": 0.001570364,\n        \"pg_execution_time\": 0.001570364,\n        \"push_time\": 0.000163488\n      }\n    ],\n    \"generated_sql\": \"SELECT  \\\"__subs\\\".\\\"result_id\\\" , \\\"__fld_resp\\\".\\\"root\\\" AS \\\"result\\\" FROM UNNEST(($1)::uuid[], ($2)::json[]) AS \\\"__subs\\\"(\\\"result_id\\\", \\\"result_vars\\\") LEFT OUTER JOIN LATERAL (SELECT  json_build_object('test', \\\"_test\\\".\\\"root\\\" ) AS \\\"root\\\" FROM  (SELECT  coalesce(json_agg(\\\"root\\\" ), '[]' ) AS \\\"root\\\" FROM  (SELECT  row_to_json((SELECT  \\\"_e\\\"  FROM  (SELECT  \\\"_root.base\\\".\\\"id\\\" AS \\\"id\\\", \\\"_root.base\\\".\\\"name\\\" AS \\\"name\\\"       ) AS \\\"_e\\\"      ) ) AS \\\"root\\\" FROM  (SELECT  *  FROM \\\"public\\\".\\\"test\\\"  WHERE ('true')     ) AS \\\"_root.base\\\"      ) AS \\\"_root\\\"      ) AS \\\"_test\\\"      ) AS \\\"__fld_resp\\\" ON ('true')      \",\n    \"kind\": \"live-query\",\n    \"poller_id\": \"605369b0-69c4-44fb-b3a1-9897bae5007c\",\n    \"role\": \"admin\",\n    \"snapshot_time\": 0.000032141,\n    \"source\": \"default\",\n    \"subscriber_count\": 1,\n    \"subscription_options\": {\n      \"batch_size\": 100,\n      \"refetch_delay\": 1\n    },\n    \"total_time\": 0.001851686\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-02-06T14:36:46.194+0530\",\n  \"type\": \"livequery-poller-log\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Secret in Deployment\nDESCRIPTION: YAML configuration showing how to set the admin secret key environment variable in the Kubernetes deployment manifest for securing the GraphQL endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n   containers:\n     ...\n     command: [\"graphql-engine\"]\n     args: [\"serve\", \"--enable-console\"]\n     env:\n     - name: HASURA_METADATA_DATABASE_URL\n       value: postgres://<username>:<password>@hostname:<port>/<dbname>\n     - name: HASURA_GRAPHQL_ADMIN_SECRET\n       value: mysecretkey\n     ports:\n     - containerPort: 8080\n       protocol: TCP\n     resources: {}\n```\n\n----------------------------------------\n\nTITLE: Transforming GraphQL to REST with Kriti Template (Request)\nDESCRIPTION: A kriti template that transforms GraphQL input to REST format, handling field name differences (e.g., 'name' to '$name'). The template recursively handles nested objects and array transformations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/openapi-to-hasura-single-action.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": {{$body.input.petInput?.id}},\n  \"$name\": {{$body.input.petInput?.name}},\n  \"category\": {\n    \"id\": {{$body.input.petInput?.category?.id}},\n    \"name\": {{$body.input.petInput?.category?.name}}\n  },\n  \"photoUrls\": {{$body.input.petInput?.photoUrls}},\n  \"tags\": {{if inverse(empty($body.input.petInput?.tags))}} {{ range _, tags := $body.input.petInput?.tags}} {\n    \"id\": {{tags?.id}},\n    \"name\": {{tags?.name}}\n    } {{end}} {{else}} null {{end}},\n  \"status\": {{$body.input.petInput?.status}}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Valued Function in BigQuery without RETURNS TABLE\nDESCRIPTION: This SQL statement creates a table-valued function in BigQuery that infers the return table type from the query statement in the function body. When using this type of function as a computed field in Hasura, the `return_table` definition must be provided because BigQuery does not expose the schema to Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/computed-fields.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE FUNCTION `google_project.hasura_test.fetch_articles`(a_id INT64, search STRING) AS (\n      ( SELECT t.*\n           FROM hasura_test.article t\n           WHERE t.author_id = a_id AND (t.title like `search` or t.content like `search`)\n      )\n  );\"\n```\n\n----------------------------------------\n\nTITLE: Example of a Rejected GraphQL Query Due to Field Order\nDESCRIPTION: Example of a GraphQL query that would be rejected by the Allow List validation because the order of fields differs from the allowed query, even though the fields themselves match.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/allow-list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($id: Int!) {\n  user_by_pk(id: $id) {\n    __typename\n    name\n    id\n    company\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema with Namespace via Hasura API\nDESCRIPTION: This JSON snippet illustrates how to add a remote schema with custom namespacing and prefixing using the Hasura API. It includes options for customizing root fields namespace, type names, and field names to avoid naming conflicts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/namespacing-remote-schemas.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"add_remote_schema\",\n  \"args\": {\n      \"name\": \"your remote schema name\",\n      \"definition\": {\n          \"url\": \"https://remote-server.com/graphql\",\n          \"headers\": [{\"name\": \"X-Server-Request-From\", \"value\": \"Hasura\"}],\n          \"forward_client_headers\": false,\n          \"timeout_seconds\": 60,\n          \"customization\": {\n             \"root_fields_namespace\": \"your_field_name\",\n             \"type_names\": {\n                 \"prefix\": \"your_type_name_prefix\",\n                 \"mapping\": {\n                     \"some_type_name\": \"some_new_type_name\"\n                 }\n             },\n             \"field_names\": [ {\n                 \"parent_type\": \"your_type_name\",\n                 \"prefix\": \"your_field_name_prefix\",\n                 \"mapping\": {\n                     \"some_field_name\": \"some_new_field_name\"\n                 }\n             } ]\n          }\n      },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata with Hasura CLI\nDESCRIPTION: Bash command to apply the metadata changes, including the newly added remote schema, using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/adding-schema.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Export Command\nDESCRIPTION: The basic command syntax for exporting Hasura metadata from the database. This command exports metadata to the /metadata directory as YAML files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_export.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata export [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Configuration in Hasura\nDESCRIPTION: This snippet demonstrates how to use the set_metrics_config API to configure logging of query variables and response bodies in Hasura. It allows enabling or disabling these features for debugging and analytics purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/observability.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n    \"type\": \"set_metrics_config\",\n    \"args\": {\n        \"analyze_query_variables\": false,\n        \"analyze_response_body\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Action with Hasura Metadata API\nDESCRIPTION: This example demonstrates updating an existing action named 'create_user' by changing its kind to 'asynchronous' using the Hasura Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/actions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"update_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"definition\":{\n         \"kind\":\"asynchronous\",\n         \"arguments\":[\n            {\n               \"name\":\"username\",\n               \"type\":\"String!\"\n            },\n            {\n               \"name\":\"email\",\n               \"type\":\"String!\"\n            }\n         ],\n         \"output_type\":\"User\",\n         \"handler\":\"https://action.my_app.com/create-user\"\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Model via API\nDESCRIPTION: This HTTP request tracks a logical model named 'article_excerpt' using the Hasura metadata API. The request defines the fields of the logical model including their names and types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article_excerpt\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"integer\"\n      },\n      {\n        \"name\": \"title\",\n        \"type\": \"text\"\n      },\n      {\n        \"name\": \"date\",\n        \"type\": \"date\"\n      },\n      {\n        \"name\": \"excerpt\",\n        \"type\": \"text\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Read Replicas via CLI in Hasura\nDESCRIPTION: YAML configuration to add read replicas for a PostgreSQL database in Hasura's metadata. The configuration defines the primary database connection and read replica configuration with connection details and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/read-replicas.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db-name>\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: <DATABASE_URL_ENV>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n        retries: 1\n    read_replicas:\n      - database_url:\n          from_env: <DATABASE_REPLICA_URL_ENV>\n        pool_settings:\n          idle_timeout: 180\n          max_connections: 50\n          retries: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Valued Function in BigQuery with RETURNS TABLE\nDESCRIPTION: This SQL statement creates a table-valued function in BigQuery that returns a specific schema. The `RETURNS TABLE` clause explicitly defines the schema of the returned table, including column names and data types. This function can be used as a computed field in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/computed-fields.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE FUNCTION `google_project.hasura_test.fetch_articles`(a_id INT64, search STRING)\n  RETURNS TABLE<id INT64, title STRING, content STRING> AS (\n      ( SELECT t.id, t.title, t.content\n           FROM hasura_test.article t\n           WHERE t.author_id = a_id AND (t.title like `search` or t.content like `search`)\n      )\n  );\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Role for Azure VNet Peering\nDESCRIPTION: This command assigns a custom role to the Hasura Cloud service principal, granting necessary permissions to initiate VNet peering. It requires the user's subscription ID, VNet resource group name, and VNet name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/dedicated-vpc/azure-network-peering.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz role assignment create --assignee \"<object-id>\" --role \"<role-id>\" --scope \"/subscriptions/<subscription-id>/resourceGroups/<vnet-resource-group-name>/providers/Microsoft.Network/virtualNetworks/<vnet-name>\"\n```\n\n----------------------------------------\n\nTITLE: Export Metadata Request\nDESCRIPTION: HTTP request to export current metadata from Hasura server as JSON\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"export_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query for Articles - MS SQL Server\nDESCRIPTION: This GraphQL query enables the retrieval of specific fields from all rows in the articles table, demonstrating how clients can interact with the data post-setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n   articles {\n    id\n    title\n    author_id\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"title\": \"sit amet\",\n        \"author_id\": 4\n      },\n      {\n        \"id\": 2,\n        \"title\": \"a nibh\",\n        \"author_id\": 2\n      },\n      {\n        \"id\": 3,\n        \"title\": \"amet justo morbi\",\n        \"author_id\": 4\n      },\n      {\n        \"id\": 4,\n        \"title\": \"vestibulum ac est\",\n        \"author_id\": 5\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Float Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom float8 scalar type for floating-point values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    float_col: 0.8\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing hasura migrate delete command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'hasura migrate delete' command. It can be used to delete migrations from the local project and server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate delete [flags]\n```\n\n----------------------------------------\n\nTITLE: Gateway Publish Usage Example\nDESCRIPTION: Example showing how to publish metadata to the gateway with required parameters including gateway URL, configuration file path, and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_publish.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --gateway-url https://gateway-hasura-app.hasura.app --gateway-configuration-file /path/to/gateway-configuration.json --admin-secret myadminsecret publish\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Aggregate Boolean Expression Input Type\nDESCRIPTION: Defines a GraphQL input type for boolean expressions on Customer aggregates. Includes logic operators, count functions, scalar field aggregations, and nested object relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_62\n\nLANGUAGE: graphql\nCODE:\n```\ninput Customer_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Customer_aggregate_bool_exp!]\n  _or: [Customer_aggregate_bool_exp!]\n  _not: Customer_aggregate_bool_exp\n\n  # count all\n  _count: Int_bool_exp\n\n  # Scalar fields\n  CustomerId: Int_aggregate_bool_exp\n  FirstName: String_aggregate_bool_exp\n  LastName: String_aggregate_bool_exp\n  MobilePhone: String_aggregate_bool_exp\n  SupportRepId: Int_aggregate_bool_exp\n\n  # Nested object fields\n  Address: Address_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for String\nDESCRIPTION: This GraphQL snippet demonstrates how to query a string field. The `String` scalar type represents textual data in UTF-8 character sequences.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    name: \"Raven\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_crosses Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values that cross a specified line using the _st_crosses operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($line: geometry){\n  geom_table(\n    where: {geom_col: {_st_crosses: $line}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists the options that are inherited from parent commands and can be used with the 'hasura deploy' command, including environment file settings, logging configuration, and project directory specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_deploy.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Configuring Key-Value Query Parameters in Actions YAML\nDESCRIPTION: YAML configuration showing how to add key-value query parameters to action URLs using the request_transform field\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    content_type: application/json\n    url: '{{$base_url}}/create_user'\n    query_params:\n      id: '{{$session_variables[''x-hasura-user-id'']}}'    \n    body: '{\"username\": {{$body.input.username}}}'\ncomment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission Using Hasura API\nDESCRIPTION: This HTTP snippet illustrates how to create a select permission using the Hasura Metadata API. It includes the necessary headers and the JSON body that specifies the permission settings for the 'user' role on the products table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"pg_create_select_permission\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": \\\"products\\\",\\n    \\\"role\\\": \\\"user\\\",\\n    \\\"permission\\\": {\\n      \\\"columns\\\": \\\"*\\\",\\n      \\\"filter\\\": {\\n        \\\"price\\\": {\\n          \\\"_lt\\\": 1000\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: REST Connector Configuration for Request Method Transform\nDESCRIPTION: YAML configuration showing how to change the request method in an event trigger transform. This demonstrates setting up method, URL, query parameters, content type, and body transforms.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params:\n      query_param: xxxxx\n    content_type: application/json\n    body: \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Collection to Allowlist - HTTP POST Request\nDESCRIPTION: Adds a query collection to the allowlist. Only requires the collection name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_collection_to_allowlist\",\n    \"args\": {\n         \"collection\": \"my_collection\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking ClickHouse Connector Health\nDESCRIPTION: Command to check the health of the ClickHouse Connector using the /health endpoint. This helps ensure the connector is running properly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/clickhouse/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:8080/health\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura metadata using bash command\nDESCRIPTION: This bash command applies the Hasura metadata. This command is used after modifying the metadata files to update the Hasura instance with the new configuration, including the role-based permissions defined in the YAML files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Filtering with Relationships in GraphQL\nDESCRIPTION: Shows how to filter articles based on a related author's name using a GraphQL query. This illustrates the ability to use relationships in boolean expressions for MySQL data in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mysql-relationships.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (where: {author: {name: {_eq: \"Sidney\"}}}) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Argument Presets in GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates how to define input values using the @preset directive to control user input requirements in queries. This allows automatic injection of input values while limiting direct access to certain parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name String\n  id   Int\n}\n\ntype Query {\n  user(user_id: Int! @preset(value: 1))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok for Local Webhook Endpoint\nDESCRIPTION: This Bash command uses ngrok to expose a local webhook endpoint running on port 4000. It's crucial for accessing local services from Hasura Cloud.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Exporting Chinook Dataset in JSONLines Format\nDESCRIPTION: Command to export the Chinook dataset in JSONLines format, specifying the output directory and file format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/dc-api/test/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncabal run test:tests-dc-api -- export-data -d /tmp/chinook-data -f JSONLines\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Relationship to Database - Hasura Metadata API\nDESCRIPTION: HTTP POST request to update an existing remote relationship's definition for a database connection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"pg_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_source\": {\n          \"relationship_type\": \"array\",\n          \"source\": \"name_of_the_target_source\",\n          \"table\": \"table_on_the_target_source\"\n          \"field_mapping\": {\n            \"user_id\": \"user_id\"\n          }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling logging in Harness/Constants.hs\nDESCRIPTION: Diff showing how to modify the engineLogLevel in Constants.hs to enable logging for the test harness. By default, logging is disabled, but it can be set to different levels like LevelDebug for maximum verbosity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nengineLogLevel :: Maybe L.LogLevel\n- engineLogLevel = Nothing\n+ engineLogLevel = Just L.LevelDebug -- Enable all logs\n```\n\n----------------------------------------\n\nTITLE: Dropping RESTified GraphQL Endpoint using Metadata API in HTTP\nDESCRIPTION: This snippet shows how to delete an existing RESTified GraphQL endpoint using the Hasura Metadata API. It requires specifying the name of the endpoint to be dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/restified-endpoints.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_rest_endpoint\",\n    \"args\": {\n        \"name\": \"name_of_the_endpoint\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hasura Enterprise Edition License Key\nDESCRIPTION: YAML snippet demonstrating how to add the Hasura Enterprise Edition license key as an environment variable in the Kubernetes deployment file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nenv:\n  - name: HASURA_GRAPHQL_METADATA_DATABASE_URL\n    value: postgres://<username>:<password>@hostname:<port>/<dbname>\n  - name: HASURA_GRAPHQL_REDIS_URL\n    value: redis://redis:6379\n  - name: HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\n    value: redis://redis:6379\n  - name: HASURA_GRAPHQL_ADMIN_SECRET\n    value: adminsecret\n  - name: HASURA_GRAPHQL_EE_LICENSE_KEY\n    value: '<license key>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed PostgreSQL and Redis Instances\nDESCRIPTION: Environment variables needed to use managed PostgreSQL and Redis instances instead of containerized versions for production deployments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_METADATA_DATABASE_URL HASURA_GRAPHQL_REDIS_URL HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\n```\n\n----------------------------------------\n\nTITLE: Starting AlloyDB Auth Proxy\nDESCRIPTION: Command to start the AlloyDB auth proxy client, exposing it to the public. Note that this is an ephemeral setup and should be run in a permanent mode for production use.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/alloy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./alloydb-auth-proxy \"projects/<project-id>/locations/<region>/clusters/<alloydb-cluster-id>/instances/<alloydb-instance-id>\" --address \"0.0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Querying with _st_touches GraphQL Queries\nDESCRIPTION: _st_touches is used to find geometries that share a boundary but do not overlap. It requires a geometry type 'Polygon' with specific coordinates as input. The output is a list of location IDs, names, and geometries touching the boundary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  locations(where: {geometry: {_st_touches: {polygon: {type: \"Polygon\", coordinates: [[[-73.9857, 40.7484], [-73.9857, 40.759], [-73.9684, 40.759], [-73.9684, 40.7484], [-73.9857, 40.7484]]]}}}}) {\n    id\n    name\n    geometry\n  }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  \"data\": {\n    \"locations\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Location A\",\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [-73.982, 40.748],\n              [-73.982, 40.749],\n              [-73.981, 40.749],\n              [-73.981, 40.748],\n              [-73.982, 40.748]\n            ]\n          ]\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Location B\",\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [-73.981, 40.748],\n              [-73.981, 40.749],\n              [-73.98, 40.749],\n              [-73.98, 40.748],\n              [-73.981, 40.748]\n            ]\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Standard Query Tags Format (Extended Example)\nDESCRIPTION: Example of a SQL query with standard query tags format showing additional parameterized_query_hash alongside other information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM child /* request_id=487c2ed5-08a4-429a-b0e0-4666a82e3cc6, field_name=child, parameterized_query_hash=b2a71ce23928ca7f0021f9060e5d590e9f9bb00f, operation_name=GetChild */\n```\n\n----------------------------------------\n\nTITLE: Logging Live Query Poller Metrics in Hasura - Self-hosted Enterprise - JSON\nDESCRIPTION: This snippet provides the structure of the 'livequery-poller-log' emitted by the Self-hosted Enterprise Edition of Hasura during live query executions. It includes additional details such as cohort-specific information and parameterized query hash, providing insights into execution metrics and cohort management.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"cohort_size\": 1,\n    \"cohorts\": [\n      {\n        \"batch_id\": 1,\n        \"cohort_id\": \"1f5e2cc6-56b9-4215-ab55-fadc725d3737\",\n        \"cohort_variables\": {\n          \"cursor\": {},\n          \"query\": {},\n          \"session\": {},\n          \"synthetic\": []\n        },\n        \"response_size_bytes\": 106,\n        \"subscribers\": [\n          {\n            \"operation_id\": \"2\",\n            \"operation_name\": \"testSubs\",\n            \"request_id\": \"b928d8f8-96bf-4274-a0a9- da8dce63183f\",\n            \"subscriber_id\": \"350402f5-f2d5-4620-9f22-f320ab0da048\",\n            \"websocket_id\": \"75dccf63-37d6-4f30-b840-2c56f0fab18e\"\n          }\n        ]\n      }\n    ],\n    \"execution_batch_size\": 1,\n    \"execution_batches\": [\n      {\n        \"batch_id\": 1,\n        \"batch_response_size_bytes\": 106,\n        \"batch_size\": 1,\n        \"db_execution_time\": 0.002743811,\n        \"pg_execution_time\": 0.002743811,\n        \"push_cohorts_time\": 0.000212959\n      }\n    ],\n    \"generated_sql\": \"SELECT  \\\"__subs\\\".\\\"result_id\\\" , \\\"__fld_resp\\\".\\\"root\\\" AS \\\"result\\\" FROM UNNEST(($1)::uuid[], ($2):: json[]) AS \\\"__subs\\\"(\\\"result_id\\\", \\\"result_vars\\\") LEFT OUTER JOIN LATERAL (SELECT  json_build_object('test', \\\"_test\\\".\\\"root\\\" ) AS \\\"root\\\" FROM   (SELECT  coalesce(json_agg(\\\"root\\\" ), '[]' ) AS \\\"root\\\" FROM  (SELECT  row_to_json((SELECT  \\\"_e\\\"  FROM  (SELECT  \\\"_root.base\\\".\\\"id\\\" AS \\\"id\\\",  \\\"_root.base\\\".\\\"name\\\" AS \\\"name\\\"       ) AS \\\"_e\\\"      ) ) AS \\\"root\\\" FROM  (SELECT  *  FROM \\\"public\\\".\\\"test\\\"  WHERE ('true')     ) AS \\\"_root. base\\\"      ) AS \\\"_root\\\"      ) AS \\\"_test\\\"      ) AS \\\"__fld_resp\\\" ON ('true')       /* field_name=test, parameterized_query_hash=678ff296b384af45bfa1d52af398de475f509250 */\",\n    \"kind\": \"live-query\",\n    \"parameterized_query_hash\": \"678ff296b384af45bfa1d52af398de475f509250\",\n    \"poller_id\": \"70344ef5-8a52-4a78-b2ad-ef7ff1bd46f8\",\n    \"role\": \"admin\",\n    \"snapshot_time\": 0.000108982,\n    \"source\": \"one\",\n    \"subscriber_count\": 1,\n    \"subscription_options\": {\n      \"batch_size\": 100,\n      \"refetch_delay\": 1\n    },\n    \"total_time\": 0.003222237\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-02-06T14:43:34.536+0530\",\n  \"type\": \"livequery-poller-log\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Federation via pg_set_apollo_federation_config\nDESCRIPTION: This snippet demonstrates how to enable Apollo Federation for a Postgres table using the `pg_set_apollo_federation_config` Metadata API.  Enabling Apollo Federation allows the table type generated by Hasura to be used in other subgraphs. The `enable` field is set to `v1` to enable Federation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_set_apollo_federation_config\",\n  \"args\": {\n    \"table\": \"author_details\",\n    \"source\": \"default\",\n    \"apollo_federation_config\": {\n      \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Collection Scope in Allowlist with HTTP POST in Hasura GraphQL Engine\nDESCRIPTION: This API request updates the scope of a collection in the allowlist from global to specific roles. It takes the collection name and a new scope object that specifies whether the collection is global and which roles have access. This operation is equivalent to first dropping and then re-adding the collection with the new scope.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"update_scope_of_collection_in_allowlist\",\n    \"args\": {\n        \"collection\": \"previously_global_query_collection\",\n        \"scope\": {\n            \"global\": false,\n            \"roles\": [\n               \"user\",\n               \"editor\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Project Number for Service Account\nDESCRIPTION: Command to retrieve the project number, which is used to identify the default compute service account.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\necho \"$(gcloud projects describe $(gcloud config get-value project) --format='value(projectNumber)')\"\n```\n\n----------------------------------------\n\nTITLE: Removing Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to delete a remote schema from Hasura GraphQL Engine. Requires only the schema name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schemas.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"remove_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Hash Examples\nDESCRIPTION: Sample GraphQL queries demonstrating how different queries with similar structure but different values generate the same parameterized query hash.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n# sample query\nquery {\n  authors(where: { id: { _eq: 2 } }) {\n    id\n    name\n  }\n}\n\n# query with a different leaf value to that of the sample query\nquery {\n  authors(where: { id: { _eq: 203943 } }) {\n    id\n    name\n  }\n}\n\n# query with use of a variable, the value of\n# the variable `id` can be anything\nquery {\n  authors(where: { id: { _eq: $id } }) {\n    id\n    name\n  }\n}\n\n# query with use of a boolean expression variable,\n# the value when the `whereBoolExp` is in the form of\n#\n#  {\n#     \"id\": {\n#       \"_eq\": <id>\n#     }\n#  }\n\nquery {\n  authors(where: $whereBoolExp) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database URL\nDESCRIPTION: YAML configuration showing how to set the PostgreSQL database URL environment variable in the Kubernetes deployment manifest.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: HASURA_METADATA_DATABASE_URL\n    value: postgres://<username>:<password>@hostname:<port>/<dbname>\n```\n\n----------------------------------------\n\nTITLE: Converting GraphQL Query to Subscription\nDESCRIPTION: Converting a standard GraphQL query to a subscription by changing the operation type, which will use the WebSocket link.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetProducts {\n  products {\n    id\n    name\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Enterprise for SAML Integration (JSON)\nDESCRIPTION: JSON configuration for the HASURA_GRAPHQL_SSO_PROVIDERS environment variable in Hasura Enterprise. It specifies the client ID, display name, scope, authorization URL, token request URL, admin roles, and JWT secret details for SAML integration via Dex.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"hasura-app\",\n    \"name\": \"SAML Login\",\n    \"scope\": \"openid offline_access groups\",\n    \"authorization_url\": \"http(s)://<dex-url>/auth\",\n    \"request_token_url\": \"http(s)://<dex-url>/token\",\n    \"admin_roles\": [\"admin\"],\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http(s)://<dex-url>/keys\",\n      \"issuer\": \"http(s)://<dex-url>\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\n        \"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on multicurrency aggregate functions, including count and nested aggregations for currency and value fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_aggregate_order_by @oneOf {\n  _count: order_by # WARN: Potential name clash here\n  Currency: String_aggregate_order_by\n  Value: Decimal_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Null Argument\nDESCRIPTION: This GraphQL query demonstrates a scenario where a null value is passed as an argument to a field in a remote schema.  When `remote-schema-skip-nulls` is enabled, Hasura will remove the argument from the forwarded query. The `users` field originally receives a null `type` argument, which is then omitted in the forwarded query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery RemoteQuery {\n  users(type:null) {\n    id\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Expression in Hasura Scheduled Triggers\nDESCRIPTION: Defines a cron expression to execute a Scheduled Trigger every minute in Hasura. A crucial component of timing-based automation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* * * * *\n```\n\n----------------------------------------\n\nTITLE: Defining Select Permission with Computed Field in Hasura\nDESCRIPTION: This JSON configuration defines a select permission on the author table using the 'full_name' computed field in the filter condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/computed-fields-filters-perms-orderby.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"create_select_permission\",\n  \"args\": {\n    \"table\": {\n      \"name\": \"author\"\n    },\n    \"role\": \"user\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": {\n        \"full_name\": {\n            \"_like\": \"Bob\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BigQuery TableName Structure in JSON\nDESCRIPTION: Specifies the structure for referencing BigQuery tables with name and dataset properties. Used to identify tables within BigQuery datasets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": String,\n    \"dataset\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Permissions to Disable Root Fields in JSON\nDESCRIPTION: JSON configuration to disable all root fields for a table in the select permission for a user role. This allows the table to be accessed only via relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"role\": \"user\",\n   \"permission\": {\n     \"columns\": [\n       \"id\",\n       \"name\"\n     ],\n     \"filter\": {},\n     \"allow_aggregations\": true,\n     \"query_root_fields\": [],\n     \"subscription_root_fields\": []\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Aggregating Array Relationships in GraphQL\nDESCRIPTION: GraphQL query showing aggregation of array-related collections, specifically the InvoiceLines relationship of the Invoice collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice {\n    # All invoices\n    InvoiceLines_aggregate {\n      # Aggregate each invoice's related InvoiceLines\n      _count # Number of invoice lines in each Invoice\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Connection String for Hasura GraphQL Engine with SSL Authentication\nDESCRIPTION: This snippet demonstrates the format for setting the HASURA_GRAPHQL_DATABASE_URL environment variable with SSL authentication parameters. It includes placeholders for user, host, port, database, and paths to SSL certificate files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nHASURA_GRAPHQL_DATABASE_URL=\"postgresql://<user>@<host>:<port>/<database>?sslmode=verify-ca&sslcert=/path/to/client.crt&sslkey=/path/to/client.pem&sslrootcert=/path/to/rootCA.crt\"\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Update to Kubernetes\nDESCRIPTION: Command to apply the updated Hasura deployment configuration to the Kubernetes cluster.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl replace -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Table Customization\nDESCRIPTION: New API to set comprehensive table customization including custom name, root fields, and column names for the 'author_details' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"set_table_customization\",\n   \"args\": {\n     \"table\": \"author_details\",\n     \"configuration\": {\n       \"identifier\": \"author\",\n       \"custom_root_fields\": {\n          \"select\": \"Authors\",\n          \"select_by_pk\": \"Author\",\n          \"select_aggregate\": \"AuthorAggregate\",\n          \"insert\": \"AddAuthors\",\n          \"insert_one\":\"AddAuthor\",\n          \"update\": \"UpdateAuthors\",\n          \"update_by_pk\": \"UpdateAuthor\",\n          \"delete\": \"DeleteAuthors\",\n          \"delete_by_pk\": \"DeleteAuthor\"\n       },\n       \"custom_column_names\": {\n          \"id\": \"authorId\"\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Bash command to apply metadata using Hasura CLI\nDESCRIPTION: This bash command applies the metadata changes defined in the `databases.yaml` file to the Hasura instance.  It requires the Hasura CLI to be configured and accessible in the environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/naming-convention.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Active Subscriptions Metric Definition\nDESCRIPTION: Metric definition for monitoring current number of active subscriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_active_subscriptions`\nType   | Gauge\nLabels | `subscription_kind`: streaming | live-query, `operation_name`, `parameterized_query_hash`\n```\n\n----------------------------------------\n\nTITLE: Verify Database Replication on Secondary Node\nDESCRIPTION: Connects to a secondary SQL node to verify the presence of the replicated database and data through a SQL query, ensuring that replication has successfully occurred.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n➜ sqlcmd -S 172.16.238.1,1502 -U SA -P \"Password1\"\n1> SELECT name FROM master.dbo.sysdatabases;\n2> GO\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service with Public Subnet\nDESCRIPTION: Creates an ECS service for Hasura using a public subnet with a public IP address for internet access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-service \\\n--cluster hasura-fargate-cluster \\\n--service-name hasura-fargate-service \\\n--task-definition hasura:1 \\\n--desired-count 1 \\\n--launch-type \"FARGATE\" \\\n--network-configuration \"awsvpcConfiguration={subnets=[subnet-abcd1234],securityGroups=[sg-abcd1234],assignPublicIp=ENABLED}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Subscription in GraphQL\nDESCRIPTION: Example of a streaming subscription that fetches messages in batches using a cursor-based approach. Only returns new messages after the specified cursor position.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  messages_stream(where: { group_id: 1 }, cursor: { initial_value: { created_at: now } }, batch_size: 10) {\n    id\n    sender\n    receiver\n    content\n    created_at\n    edited_at\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning PostgreSQL Server on Azure\nDESCRIPTION: This command creates a new PostgreSQL server instance on Azure with specified configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz postgres server create --resource-group hasura \\\n   --name \"<server_name>\" \\\n   --location westus \\\n   --admin-user hasura \\\n   --admin-password \"<server_admin_password>\" \\\n   --sku-name GP_Gen5_2 \\\n   --version 10\n```\n\n----------------------------------------\n\nTITLE: Redelivering an Event - MSSQL\nDESCRIPTION: This snippet shows how to redeliver an existing event using the `mssql_redeliver_event` API. It requires the event ID of the event that needs to be redelivered, which will reset the retry count for the event.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_redeliver_event\",\n    \"args\" : {\n        \"event_id\": \"ad4f698f-a14e-4a6d-a01b-38cd252dd8bf\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Non-nullable Variable in GraphQL\nDESCRIPTION: This GraphQL query demonstrates a scenario where a non-nullable variable is used to filter users. It's used to illustrate the 'Null in Non-nullable Variables' configuration option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ($user_id: Int!) {\n  users(where: { id: { _eq: $user_id } }) {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user_id\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Backward Pagination Query Example\nDESCRIPTION: Example of implementing backward pagination using last and before parameters in a Relay query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article_connection(last: 2, before: \"eyJpZCIgOiA0fQ==\") {\n    pageInfo {\n      startCursor\n      endCursor\n      hasPreviousPage\n      hasNextPage\n    }\n    edges {\n      cursor\n      node {\n        title\n        content\n        author_id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Components\nDESCRIPTION: Commands to update and install Google Cloud beta components required for function deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud components update &&\ngcloud components install beta\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Endpoints in Hasura\nDESCRIPTION: Endpoint configuration for traces, metrics, and logs using environment variables in the OpenTelemetry Exporter settings of Hasura Cloud.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/grafana-cloud-otlp-guide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nTraces Endpoint: {{OTLP_ENDPOINT}}/v1/traces\nMetrics Endpoint: {{OTLP_ENDPOINT}}/v1/metrics\nLogs Endpoint: {{OTLP_ENDPOINT}}/v1/logs\nHeaders: Authorization: {{OTLP_AUTH_HEADER}}\n```\n\n----------------------------------------\n\nTITLE: Debugging Response for Failed User Creation Action in GraphQL\nDESCRIPTION: This JSON response shows the error and debugging information returned when a user creation action fails. It includes details about the webhook request and response, as well as any transformed requests if action transforms are used.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/debugging.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"got scalar String for the action webhook response, expecting UserId\",\n      \"extensions\": {\n        \"code\": \"unexpected\",\n        \"path\": \"$\",\n        \"internal\": {\n          \"error\": \"got scalar String for the action webhook response, expecting UserId\",\n          \"response\": {\n            \"status\": 200,\n            \"headers\": [\n              {\n                \"value\": \"application/json\",\n                \"name\": \"Content-Type\"\n              }\n            ],\n            \"body\": \"[incorrect response]\"\n          },\n          \"request\": {\n            \"url\": \"http://127.0.0.1:5593/scalar-response\",\n            \"headers\": [],\n            \"body\": {\n              \"action\": {\n                \"name\": \"create_user\"\n              },\n              \"session_variables\": {\n                \"x-hasura-role\": \"admin\"\n              },\n              \"input\": {\n                \"email\": \"foo@boo.com\",\n                \"name\": \"Foo\"\n              },\n              \"request_query\": \"mutation {\\n    create_user(email: \\\"foo@bar.com\\\", name: \\\"Foo\\\"){\\n id\\n user {\\n name\\n email\\n }\\n }\\n }\\n\"\n            },\n            \"transformed_request\": {\n              \"query_string\": \"\",\n              \"body\": \"[transformed body]\",\n              \"url\": \"http://127.0.0.1:3000/abcd\",\n              \"headers\": [\n                [\n                  \"Content-Type\",\n                  \"application/json\"\n                ]\n              ],\n              \"method\": \"PATCH\",\n              \"response_timeout\": \"30000000\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema using graphqurl in Bash\nDESCRIPTION: This snippet provides commands to export the GraphQL schema using the graphqurl tool. It explains how to run the tool with and without an admin secret, including the commands to save the output in .graphql format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/export-graphql-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# If the GraphQL Engine is running at https://my-graphql-engine.com/v1/graphql,\n# without an admin secret\ngq https://my-graphql-engine.com/v1/graphql --introspect > schema.graphql\n\n# If Hasura GraphQL Engine is running with an admin secret\ngq https://my-graphql-engine.com/v1/graphql -H 'X-Hasura-Admin-Secret: adminsecretkey' --introspect > schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Dropping a Column\nDESCRIPTION: This snippet shows an attempt to drop a column from the author table which is dependent on existing permissions. The request is sent with admin permissions and the API responds with an error indicating dependent objects are preventing the action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"ALTER TABLE author DROP COLUMN name\"\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 BAD REQUEST\nContent-Type: application/json\n\n{\n    \"path\": \"$.args\",\n    \"error\": \"cannot drop due to the following dependent objects: permission author.user.select\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Article Logical Model via API\nDESCRIPTION: Illustrates how to create and track an 'article' model using the Hasura metadata API. JSON data specifies fields and characteristics to be captured within the Logical Model for integration into the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mongo_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\":\n          {\n            \"scalar\": \"int\"\n          }\n      },\n      {\n        \"name\": \"title\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"contents\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"published_date\",\n        \"type\":\n          {\n            \"scalar\": \"date\",\n            \"nullable\": true\n          },\n      },\n      {\n        \"name\": \"is_published\",\n        \"type\":\n          {\n            \"scalar\": \"bit\"\n          }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL translation of redaction in filtering\nDESCRIPTION: This SQL snippet shows the potential translation of the preceding JSON query with data redaction. A `CASE` statement is used to redact `ColumnA` based on whether `Id` is in `(1,2)`, effectively replacing the value with `NULL` when the condition is not met before comparing to 'A1'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Id\"\nFROM \"Test\"\nWHERE\n  (CASE\n    WHEN \"Id\" IN (1,2) THEN \"ColumnA\"\n    ELSE NULL\n  END) = \"A1\"\n```\n\n----------------------------------------\n\nTITLE: Async Action Response Format\nDESCRIPTION: Example JSON response from an async action showing the returned action_id in UUID format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/async-actions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"place_order\": \"23b1c256-7aff-4b95-95bd-68220d9f93f2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Model via CLI\nDESCRIPTION: This snippet demonstrates how to define a Logical Model in the `databases.yaml` file for use with the Hasura CLI.  It shows the structure for defining fields, their types, and nullability constraints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"logical_models:\\n  - name: \\\"<name>\\\"\\n    fields:\\n      \\\"<field name>\\\":\\n        type: \\\"<BigQuery field type>\\\"\\n        nullable: false | true\\n        description: \\\"<optional field description>\\\"\\n      ...\"\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Authors with _similar in GraphQL\nDESCRIPTION: This query retrieves authors whose names begin with 'A' or 'C' using the _similar operator for pattern matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_similar: \"(A|C)%\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Webhook Server with Express and Nodemailer in JavaScript\nDESCRIPTION: This snippet sets up an Express server to listen for webhook requests from Hasura. It verifies the request header and queries a Hasura database to retrieve recent notifications. Emails are sent using Nodemailer with the Ethereal email service. Dependencies include Express and Nodemailer, both installed via npm. Key parameters include the secret authorization string and Hasura admin secret. The server runs on port 4000 and handles incoming POST requests to the '/daily-summary' route.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/daily-summary-email.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\n\n// Create a Nodemailer transporter using Ethereal email service\n// Ideally, this configuration would be stored somewhere else\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create a testing account. ' + err.message);\n    return process.exit(1);\n  }\n\n  // If all goes as planned, here's the console telling us we're 👍\n  console.log('Credentials obtained, listening on the webhook...');\n\n  // Create a transporter object for nodemailer\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass,\n    },\n  });\n\n  // Our route for the webhook\n  app.post('/daily-summary', async (req, res) => {\n    // confirm the auth header is correct — ideally, you'd keep the secret in an environment variable\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      return res.status(401).json({\n        message: 'Unauthorized',\n      });\n    }\n\n    // get our date ready for the query\n    const today = new Date();\n    const twentyFourHoursPrior = new Date(today.setDate(today.getDate() - 1));\n    const twentyFourHoursPriorAsTimestamp = twentyFourHoursPrior.toISOString();\n\n    // Fetch the data from our Hasura instance\n    async function getRecentNotifications() {\n      const response = await fetch('<YOUR_CLOUD_PROJECT_ENDPOINT>', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-hasura-admin-secret': '<YOUR_ADMIN_SECRET>',\n        },\n        body: JSON.stringify({\n          query: `\n          query DailyNotificationsQuery($start_time: timestamptz!) {\n            notifications(where: {created_at: {_gte: $start_time}}) {\n              id\n              message\n              user {\n                id\n                email\n                name\n              }\n            }\n          }          \n          `,\n          variables: {\n            start_time: twentyFourHoursPriorAsTimestamp,\n          },\n        }),\n      });\n      const { data } = await response.json();\n      return data.notifications;\n    }\n\n    // get our users and filter out the ones with no notifications\n    let notifications = await getRecentNotifications();\n\n    // map over the data and send an email to each user\n    async function sendNotificationSummary(notifications) {\n      let outcomes = [];\n      notifications.map(async notification => {\n        // Create a message object\n        const message = {\n          from: 'SuperStore.com <sender@SuperStore.com>',\n          to: `${notification.user.name} <${notification.user.email}>`,\n          subject: `You've got new notifications, ${notification.user.name.split(' ')[0]}!`,\n          text: `Hi ${notification.user.name.split(' ')[0]},\\n\\nCheck out your recent notifications:\\n\\n${\n            notification.message\n          }\\n\\nThanks,\\nSuperStore.com`,\n        };\n\n        // Send the message using the Nodemailer transporter\n        const info = await transporter.sendMail(message);\n\n        // Log the message info\n        console.log(`\\nMessage sent to ${notification.user.name}: ${nodemailer.getTestMessageUrl(info)}`);\n\n        // add the info to the outcomes array\n        outcomes.push({\n          messageId: info.messageId,\n          previewUrl: nodemailer.getTestMessageUrl(info),\n        });\n        return outcomes;\n      });\n    }\n\n    await sendNotificationSummary(notifications);\n\n    // Return a JSON response to the client\n    res.json({\n      message: 'Notifications sent!',\n    });\n  });\n\n  // Start the server\n  app.listen(4000, () => {\n    console.log('Server started on port 4000');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dropping Query Collection - HTTP POST Request\nDESCRIPTION: Removes a query collection. The cascade parameter determines whether to also remove the collection from the allowlist.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_query_collection\",\n    \"args\": {\n         \"collection\": \"my_collection\",\n         \"cascade\": false\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Source with Pool Settings via API\nDESCRIPTION: HTTP POST request to add a new database source with connection pool configuration using the pg_add_source metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/cloud-connection-pooling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_add_source\",\n  \"args\": {\n    \"name\": \"pg1\",\n    \"configuration\": {\n      \"connection_info\": {\n        \"database_url\": {\n           \"from_env\": \"<DB_URL_ENV_VAR>\"\n         },\n        \"pool_settings\": {\n          \"total_max_connections\": 50,\n          \"idle_timeout\": 180,\n          \"retries\": 1,\n          \"pool_timeout\": 360,\n          \"connection_lifetime\": 600\n        },\n        \"use_prepared_statements\": true,\n        \"isolation_level\": \"read-committed\",\n      }\n    },\n    \"replace_configuration\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JDBC Connection String for MySQL Database\nDESCRIPTION: Example of the required JDBC connection string format needed to connect Hasura to an Aiven MySQL database. This string includes hostname, port, database name, username and password parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/aiven.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njdbc:mysql://<hostname>:<port>/<database name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata using REST API with curl\nDESCRIPTION: Example of using the Hasura Metadata API to clear metadata via a curl command. This approach is useful for programmatic or automated clearing of metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d'{\"type\": \"clear_metadata\", \"args\": {}}' http://localhost:8080/v1/metadata\n```\n\n----------------------------------------\n\nTITLE: Defining ColumnExp Schema in Hasura\nDESCRIPTION: Describes the schema for column expressions in boolean conditions, including various column types and operators.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PGColumn | ComputedFieldName | RelationshipName | RemoteRelationshipName\": {\n    \"Operator\": \"Value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Users into SQL Table for Hasura\nDESCRIPTION: This SQL snippet inserts multiple predefined user records into the 'users' table. Ensures the database has initial data for testing user-based queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.users (id, name, email) VALUES ('7cf0a66c-65b7-11ed-b904-fb49f034fbbb', 'Sean', 'seandemo@hasura.io');\nINSERT INTO public.users (id, name, email) VALUES ('82001336-65b7-11ed-b905-7fa26a16d198', 'Rob', 'robdemo@hasura.io');\nINSERT INTO public.users (id, name, email) VALUES ('86d5fba0-65b7-11ed-b906-afb985970e2e', 'Marion', 'mariondemo@hasura.io');\nINSERT INTO public.users (id, name, email) VALUES ('8dea1160-65b7-11ed-b907-e3c5123cb650', 'Sandeep', 'sandeepdemo@hasura.io');\nINSERT INTO public.users (id, name, email) VALUES ('9bd9d300-65b7-11ed-b908-571fef22d2ba', 'Abby', 'abbydemo@hasura.io');\n```\n\n----------------------------------------\n\nTITLE: Constructing MySQL Database Connection URL for Hasura\nDESCRIPTION: The format for creating a JDBC connection string to connect Hasura to a Google Cloud SQL MySQL database. This includes the hostname, port, database name, username, and password components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/gcp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njdbc:mysql://<hostname>:<port>/<database_name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata using API\nDESCRIPTION: This command exports the Hasura metadata using the Metadata API and saves it as a JSON file. It utilizes curl to send a POST request to the Hasura metadata endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -d'{\"type\": \"export_metadata\", \"args\": {}}' http://localhost:8080/v1/metadata -o hasura_metadata.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models in TypeScript\nDESCRIPTION: TypeScript definitions for Invoice, Customer, InvoiceLine, and related nested types used in the example data model. Includes primary keys, foreign keys, and nested object/array relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Table\ntype Invoice = {\n  InvoiceId: int; // PK\n  InvoiceDate: date;\n  CustomerId: int; // FK: Customer table\n  Discounts: Discount[]; // Nested array of objects\n  Total: decimal;\n  BillingAddress: Address; // Nested object\n};\n\n// Nested Object Type\ntype Discount = {\n  Description: string;\n  Percentage: decimal;\n};\n\n// Nested Object Type\ntype Address = {\n  StreetAddress: string;\n  City: string;\n  State: string;\n  PostalCode: string;\n  Country: string;\n};\n\n// Table\ntype Customer = {\n  CustomerId: int; // PK\n  FirstName: string;\n  LastName: string;\n  Address: Address; // Nested object\n  MobilePhone: string;\n  Emails: string[]; // Nested array of scalars\n  SupportRepId: int | null;\n};\n\n// Table\ntype InvoiceLine = {\n  InvoiceLineId: int; // PK\n  InvoiceId: int; // FK: Invoice table\n  TrackId: int;\n  Quantity: int;\n  UnitPrice: Multicurrency; // Nested object\n};\n\n// Nested Object Type\ntype Multicurrency = {\n  Currency: string; //eg. AUD, USD, etc\n  Value: decimal;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura Gateway Plugin - Bash\nDESCRIPTION: This command installs the Hasura Gateway plugin, which is essential for managing federated instances. Users must have the Hasura CLI installed prior to running this command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins install gateway\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine in JWT Mode with Docker\nDESCRIPTION: Examples of running Hasura GraphQL Engine in JWT mode using Docker. Two methods are shown: using command-line flags and using environment variables to configure JWT authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p 8080:8080 \\\n    hasura/graphql-engine:latest \\\n    graphql-engine \\\n    --database-url postgres://<username>:<password>@<hostname>:<port>/<dbname> \\\n    serve \\\n    --admin-secret <myadminsecretkey> \\\n    --jwt-secret '{\"type\":\"HS256\", \"key\": \"3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R\"}'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p 8080:8080 \\\n    -e HASURA_GRAPHQL_ADMIN_SECRET=\"<myadminsecretkey>\" \\\n    -e HASURA_GRAPHQL_JWT_SECRET='{\"type\":\"RS512\", \"key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END PUBLIC KEY-----\\n\"}' \\\n    hasura/graphql-engine:latest \\\n    graphql-engine \\\n    --database-url postgres://<username>:<password>@<hostname>:<port>/<dbname> \\\n    serve\n```\n\n----------------------------------------\n\nTITLE: Creating Select Permission with Root Field Configuration\nDESCRIPTION: This snippet shows how to create a select permission and restrict the query and subscription root fields. It configures the `guest` role to only access the `select_by_pk` root field for queries and subscriptions. This restricts access to the `article` table to what can be accessed through relationships and only allows accessing data by primary key if the guest has access to that primary key value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_create_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"guest\",\n        \"source\": \"default\",\n        \"permission\" : {\n            \"columns\" : \"*\",\n            \"filter\" : {},\n            \"query_root_fields\": [\"select_by_pk\"],\n            \"subscription_root_fields\": [\"select_by_pk\"]\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Codegen Command\nDESCRIPTION: Command to generate handler code for a derived action using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/derive.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions codegen <action-name> --derive-from '<query/mutation string>'\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship with Native Query via API\nDESCRIPTION: HTTP request to create a relationship between a table and a Native Query using manual configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk\",\n  \"args\": [\n    {\n      \"type\": \"pg_create_object_relationship\",\n      \"args\": {\n        \"source\": \"<db_name>\",\n        \"table\": \"articles\",\n        \"name\": \"author\",\n        \"using\": {\n          \"manual_configuration\": {\n            \"remote_native_query\": \"get_author\",\n            \"column_mapping\": {\n              \"id\": \"author_id\"\n            }\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Scheduled Event Using Hasura Metadata API in HTTP\nDESCRIPTION: This snippet shows how to create a scheduled event with advanced configurations using the Hasura Metadata API. It expands on the basic setup by adding HTTP headers, retry settings, and a custom comment to the request. These options allow for more refined control over the event and its delivery.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-one-off-scheduled-event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"create_scheduled_event\",\n   \"args\": {\n      \"webhook\": \"https://send-email.com\",\n      \"schedule_at\": \"2022-06-18T18:45:00Z\",\n      \"payload\": {\n            \"email\": \"bob@ross.com\"\n      },\n      \"headers\": [\n            {\n               \"name\": \"key\",\n               \"value\": \"value\"\n            }\n      ],\n      \"retry_conf\": {\n            \"num_retries\": 3,\n            \"timeout_seconds\": 120,\n            \"tolerance_seconds\": 21675,\n            \"retry_interval_seconds\": 12\n      },\n      \"comment\": \"sample scheduled event comment\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing a Join Tree Structure in YAML\nDESCRIPTION: Example of the join tree structure that would be created for the authors-articles query. The tree is indexed by the path through the response, showing how nested remote joins are tracked.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/remote-joins-execution.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n(Nothing, authors):\n  (Nothing, articles): <join information>\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Request Body in Actions YAML\nDESCRIPTION: YAML configuration showing how to disable request body for GET requests\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: GET\n    url: '{{$base_url}}/create_user'\n    query_params:\n      id: '{{$session_variables[''x-hasura-user-id'']}}'    \n    body:\n      action: 'remove'\n    request_headers:\n      remove_headers: ['content-type]\ncomment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Event Trigger for 'profile' Table\nDESCRIPTION: This snippet defines the configuration for creating an event trigger in Hasura. It specifies the trigger name, table, operations to watch, and the webhook URL to call.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/python/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nTrigger name: profile_change\nSchema/Table: public/profile\nOperations: Insert, Update, Delete\nWebhook URL: [Trigger URL]\n```\n\n----------------------------------------\n\nTITLE: Defining MultiCurrency and Customer Group Types\nDESCRIPTION: GraphQL type definitions for handling multicurrency values in grouping operations and Customer groups. These types specify the structure for grouping operations on monetary values and customer records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_97\n\nLANGUAGE: graphql\nCODE:\n```\ntype Multicurrency_grouping_key_fields {\n  # Scalar fields, all nullable\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[]\n  Currency: String\n  Value: Decimal\n}\n\ntype Customer_groups {\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: Customer_grouping_key_fields!\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: Customer_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an ObjectType with Field Arguments in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add field arguments to an OpenDD ObjectType. It includes field definitions with arguments and their types, as well as data connector type mapping and argument mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: institution\n  fields:\n    - name: id\n      type: Int!\n    - name: name\n      type: String!\n      arguments:\n        - name: hash\n          argumentType: String\n        - name: limit\n          argumentType: Int\n        - name: offset\n          argumentType: Int\n  graphql:\n    typeName: Institution\n  dataConnectorTypeMapping:\n    - dataConnectorName: custom\n      dataConnectorObjectType: institution\n      fieldMapping:\n        id:\n          column:\n            name: id\n        name:\n          column:\n            name: name\n            argumentMapping:\n              hash: hash\n              offset: offset\n              limit: limit\n```\n\n----------------------------------------\n\nTITLE: Tracking Table with Custom Configuration in Hasura\nDESCRIPTION: Example of tracking a table 'author' with custom root fields, column configuration, and Apollo Federation settings. Demonstrates how to customize GraphQL schema names and add documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_table\",\n  \"args\": {\n    \"source\": \"default\",\n    \"table\": \"author\",\n    \"configuration\": {\n      \"custom_root_fields\": {\n        \"select\": \"Authors\",\n        \"select_by_pk\": \"Author\",\n        \"select_aggregate\": \"AuthorAggregate\",\n        \"insert\": \"AddAuthors\",\n        \"insert_one\":\"AddAuthor\",\n        \"update\": \"UpdateAuthors\",\n        \"update_by_pk\": \"UpdateAuthor\",\n        \"delete\": \"DeleteAuthors\",\n        \"delete_by_pk\": \"DeleteAuthor\"\n      },\n      \"column_config\": {\n        \"id\": {\n          \"custom_name\": \"authorId\",\n          \"comment\": \"The ID of the Author\"\n        }\n      },\n      \"comment\": \"Authors of books\"\n    },\n    \"apollo_federation_config\": {\n      \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Model with Metadata API\nDESCRIPTION: Uses the metadata API to track a Logical Model and its relevant collections by specifying the Logical Model and collection names in the arguments. This simplifies managing dynamic model-tracking through API calls.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mongo_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<MongoDB field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes using Hasura CLI\nDESCRIPTION: This command applies the updated metadata configurations specified in the YAML file. It is crucial for ensuring that changes, like custom field names, are recognized by Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/custom-field-names.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: API Request for Creating Logical Model\nDESCRIPTION: HTTP request to create a logical model through Hasura's metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article_excerpt\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"integer\"\n      },\n      {\n        \"name\": \"title\",\n        \"type\": \"text\"\n      },\n      {\n        \"name\": \"date\",\n        \"type\": \"date\"\n      },\n      {\n        \"name\": \"excerpt\",\n        \"type\": \"text\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date Aggregate Fields\nDESCRIPTION: Defines a GraphQL type for date field aggregations. Includes max, min, count, and count distinct operations applicable to date fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_66\n\nLANGUAGE: graphql\nCODE:\n```\ntype Date_aggregate_fields {\n  _max: Date!\n  _min: Date!\n  _count: Int!\n  _count_distinct: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service for Hasura\nDESCRIPTION: Create a Kubernetes NodePort service for Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: hasura\n  name: hasura\nspec:\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  selector:\n    app: hasura\n  type: NodePort\n```\n\n----------------------------------------\n\nTITLE: Creating User Action via Hasura API with Response Transformation\nDESCRIPTION: This HTTP POST request to the Hasura metadata API includes a response transformation configuration for the 'create_user' action, aiming to modify the response body format as required.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n    \"name\":\"create_user\",\n    \"definition\":{\n      \"kind\":\"synchronous\",\n      \"arguments\":[\n        {\n          \"name\":\"username\",\n          \"type\":\"String!\"\n        },\n        {\n          \"name\":\"email\",\n          \"type\":\"String!\"\n        }\n      ],\n      \"output_type\":\"User\",\n      \"handler\":\"{{ACTION_BASE_URL}}\",\n      \"timeout\":60,\n      \"response_transform\": {\n        \"template_engine\": \"Kriti\",\n        \"version\": 2,\n        \"body\": {\"action\": \"transform\", \"template\": \"{\\n  \\\"test\\\":{{$body.input.arg1.id}}\\n}\"},\n        \"comment\": \"Custom action to create user\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Snowflake Data Connector in YAML\nDESCRIPTION: Example of setting a 120 second timeout for a Snowflake data connector using YAML configuration. This snippet shows how to add the timeout setting to the database configuration file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/data-connector-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: snowflake\n  kind: snowflake\n  configuration:\n    template: null\n    timeout: { \"seconds\": 120 }\n    value: {\n      \"jdbc_url\": \"jdbc:snowflake://url.snowflakecomputing.com/?user=user&password=password&warehouse=warehouse&db=db&role=role&schema=schema\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating an enum table from a native Postgres enum\nDESCRIPTION: This SQL snippet creates a table from an existing Postgres enum.  It creates a new table with a text column named \"value\" as the primary key and populates it with the values from the specified enum.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE \\\"<my_enum_table>\\\" (value TEXT PRIMARY KEY);\\nINSERT INTO \\\"<my_enum_table>\\\" (value) (SELECT unnest(enum_range(NULL::\\\"<my_enum>\\\"))::text);\"\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Ownership Permissions\nDESCRIPTION: SQL commands to grant necessary permissions for schema ownership changes in managed cloud databases.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- assuming \"postgres\" is the superuser that you are running the commands with.\npostgres=> GRANT hasurauser to postgres;\nGRANT\npostgres=> ALTER SCHEMA hdb_catalog OWNER TO hasurauser;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Targets - YAML\nDESCRIPTION: This YAML configuration sets up Prometheus scrape targets for itself and Hasura. The targets define where Prometheus will scrape metrics from, including the local Prometheus server and the Hasura installation for additional metrics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# Here it’s Prometheus itself.\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'hasura'\n    metrics_path: '/v1/metrics'\n    static_configs:\n      - targets: ['ip_address_of_hasura_installation:8080']\n```\n\n----------------------------------------\n\nTITLE: Endpoint Data Structure in JSON\nDESCRIPTION: Example of how endpoint data is stored in the schema cache. It includes the endpoint path, HTTP method, GraphQL query, and other metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/rest-openapi-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"tag\": \"PathLiteral\",\n        \"contents\": \"myAPIpost\"\n    },\n    {\n        \"_trieData\": {\n            \"POST\": [\n                {\n                    \"definition\": {\n                        \"query\": \"mutation MyMutation($col_1: String = \\\"\\\", $col_2: String = \\\"\\\", $id: Int = 10) {\\n  insert_table_1(objects: {col_1: $col_1, col_2: $col_2, id: $id}) {\\n    affected_rows\\n  }\\n}\"\n                    },\n                    \"url\": \"myAPIpost\",\n                    \"methods\": [\n                        \"POST\"\n                    ],\n                    \"name\": \"newAPI\",\n                    \"comment\": null\n                }\n            ]\n        },\n        \"_trieMap\": []\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Connectors via CLI with YAML Configuration\nDESCRIPTION: Example YAML configuration for adding a request transform to an event trigger. This shows how to transform the request method, URL, query parameters, content type, and body format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: '*'\n    webhook: https://api.somedomain.com\n    headers:\n      - name: Authorization\n        value: bearer-xxxx\n    request_transform:\n      template_engine: Kriti\n      method: POST\n      url: '{{$base_url}}/api/v3/endpoint'\n      query_params:\n        query_param: xxxxx\n      content_type: application/json\n      body: \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL GENERATED ALWAYS AS IDENTITY without OVERRIDING SYSTEM VALUE\nDESCRIPTION: Defines how PostgreSQL identity columns would work without OVERRIDING SYSTEM VALUE, making them neither updatable nor insertable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nGENERATED ALWAYS AS IDENTITY, w/o  OVERRIDING SYSTEM VALUE => not updatable, not insertable\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud SQL Instance Details\nDESCRIPTION: Command to get the details of the Cloud SQL instance, including the connection name needed for deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances describe hasura-postgres\n```\n\n----------------------------------------\n\nTITLE: Untracking Multiple BigQuery Tables\nDESCRIPTION: API endpoint for removing multiple tables from the GraphQL schema simultaneously with cascade option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_untrack_tables\",\n  \"args\": {\n    \"tables\": [\n      {\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"author\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      },\n      {\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"book\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims for Auth0 SAML Integration\nDESCRIPTION: TypeScript code for an Auth0 action that adds custom claims, specifically roles, to the SAML response during the login flow.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Handler that will be called during the execution of a PostLogin flow.\n *\n * @param {Event} event - Details about the user and the context in which they are logging in.\n * @param {PostLoginAPI} api - Interface whose methods can be used to change the behavior of the login.\n */\nexports.onExecutePostLogin = async (event, api) => {\n    api.idToken.setCustomClaim('roles', event.authorization.roles);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Remote Table Foreign Key in Hasura\nDESCRIPTION: Creates an object relationship named 'details' on the 'author' table using a foreign key constraint on the remote 'author_details' table's 'author_id' column. This approach is supported in versions v2.0.0-alpha.3 and above.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_object_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"details\",\n        \"using\": {\n            \"foreign_key_constraint_on\" : {\n                \"table\": \"author_details\",\n                \"column\": \"author_id\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Hasura Console\nDESCRIPTION: Demonstrates the new format for environment variables in the Nx workspace. All variables must be prefixed with 'NX_' for local development. This change does not affect production configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/from-previous-console.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=development\nNX_PORT=4200\nNX_CDN_ASSETS=true\nNX_ASSETS_PATH=https://graphql-engine-cdn.hasura.io/console/assets\nNX_ASSETS_VERSION=channel/stable/v1.0\nNX_ENABLE_TELEMETRY=true\nNX_URL_PREFIX=/\nNX_DATA_API_URL=http://localhost:8080\nNX_SERVER_VERSION=v1.0.0\nNX_CONSOLE_MODE=server\nNX_IS_ADMIN_SECRET_SET=true\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for API Limits\nDESCRIPTION: This snippet displays an `api_limits.yaml` file that configures rate limits, depth limits, node limits and time limits for a Hasura instance. The configuration sets global limits and specific overrides for the `customer` role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndepth_limit:\n  global: 10\n  per_role:\n    customer: 5\ndisabled: false\nnode_limit:\n  global: 10\n  per_role:\n    customer: 5\nrate_limit:\n  global:\n    max_reqs_per_min: 100\n    unique_params: null\n  per_role:\n    customer:\n      max_reqs_per_min: 60\n      unique_params: null\ntime_limit:\n  global: 10\n  per_role:\n    customer: 5\n\n```\n\n----------------------------------------\n\nTITLE: Defining String Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter string values. Includes logic operators and comparison operators specific to string values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_46\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_bool_exp {\n  # Logic operators\n  _and: [String_bool_exp!]\n  _or: [String_bool_exp!]\n  _not: String_bool_exp\n\n  # Comparisons\n  _eq: String\n  _gt: String\n  _gte: String\n  _in: [String!]\n  _is_null: Boolean\n  _lt: String\n  _lte: String\n  _neq: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Rule with Session Variables in Hasura (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to define a permission rule using session variables in Hasura. It checks if the user is the creator or if the organization is in the allowed list.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_or\": [\n    {\n      \"creator_id\": {\n        \"_eq\": \"X-Hasura-User-Id\"\n      }\n    },\n    {\n      \"organization_id\": {\n        \"_in\": \"X-Hasura-Allowed-Organizations\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Log Structure in Hasura GraphQL Engine (JSON)\nDESCRIPTION: Example of a query log structure in Hasura GraphQL Engine. It includes timestamp, log level, query details, generated SQL, and connection template information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-06-03T13:25:10.915+0530\",\n  \"level\": \"info\",\n  \"type\": \"query-log\",\n  \"detail\": {\n    \"kind\": \"database\",\n    \"request_id\": \"840f952d-c489-4d21-a87a-cc23ad17926a\",\n    \"query\": {\n      \"variables\": {\n        \"limit\": 10\n      },\n      \"operationName\": \"getProfile\",\n      \"query\": \"query getProfile($limit: Int!) {\\n  profile(limit: $limit, where: {username: {_like: \\\"%a%\\\"}}) {\\n    username\\n  }\\n  myusername: profile (where: {username: {_eq: \\\"foobar\\\"}}) {\\n    username\\n  }\\n}\\n\"\n    },\n    \"generated_sql\": {\n      \"profile\": {\n        \"prepared_arguments\": [\"{\\\"x-hasura-role\\\":\\\"admin\\\"}\", \"%a%\"],\n        \"query\": \"SELECT  coalesce(json_agg(\\\"root\\\" ), '[]' ) AS \\\"root\\\" FROM  (SELECT  row_to_json((SELECT  \\\"_1_e\\\"  FROM  (SELECT  \\\"_0_root.base\\\".\\\"username\\\" AS \\\"username\\\"       ) AS \\\"_1_e\\\"      ) ) AS \\\"root\\\" FROM  (SELECT  *  FROM \\\"public\\\".\\\"profile\\\"  WHERE ((\\\"public\\\".\\\"profile\\\".\\\"username\\\") LIKE ($2))     ) AS \\\"_0_root.base\\\"     LIMIT 10 ) AS \\\"_2_root\\\"      \"\n      },\n      \"myusername\": {\n        \"prepared_arguments\": [\"{\\\"x-hasura-role\\\":\\\"admin\\\"}\", \"foobar\"],\n        \"query\": \"SELECT  coalesce(json_agg(\\\"root\\\" ), '[]' ) AS \\\"root\\\" FROM  (SELECT  row_to_json((SELECT  \\\"_1_e\\\"  FROM  (SELECT  \\\"_0_root.base\\\".\\\"username\\\" AS \\\"username\\\"       ) AS \\\"_1_e\\\"      ) ) AS \\\"root\\\" FROM  (SELECT  *  FROM \\\"public\\\".\\\"profile\\\"  WHERE ((\\\"public\\\".\\\"profile\\\".\\\"username\\\") = ($2))     ) AS \\\"_0_root.base\\\"      ) AS \\\"_2_root\\\"      \"\n      }\n    },\n    \"connection_template\": {\n      \"result\": {\n        \"routing_to\": \"primary\",\n        \"value\": null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Interface ID JSON Structure for Relay in Hasura\nDESCRIPTION: Example of the JSON structure used to encode the Node interface ID in Hasura's Relay implementation. The structure includes version number, table schema, table name, and primary key column values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/relay-schema.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[1, \"public\", \"author\", \"296d30b1-474d-4011-a907-2701992b04c1\"]\n```\n\n----------------------------------------\n\nTITLE: Defining DeletePermission Schema in Hasura\nDESCRIPTION: Specifies the schema for delete permissions in Hasura, including filter conditions, backend-only access, and input validation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": \"BoolExp\",\n  \"backend_only\": \"Boolean\",\n  \"validate_input\": \"InputValidation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Health Check in YAML\nDESCRIPTION: YAML configuration for adding Health Check to a Postgres or SQL Server database source in Hasura. It specifies the test query, check interval, retries, and timeout settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/health-checks/source-health-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db-name>\n  kind: postgres\n  health_check:\n    test:\n      sql: SELECT 1\n    interval: 10\n    retries: 3\n    retry_interval: 5\n    timeout: 5\n  configuration:\n    connection_info:\n      database_url:\n        from_env: <DATABASE_URL_ENV>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n        retries: 1\n```\n\n----------------------------------------\n\nTITLE: Type Casting Query with Geography in GraphQL\nDESCRIPTION: Example showing type casting between geometry and geography types with distance calculation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($coordinate: geography!) {\n  postgis_test_table(\n    where: {\n      geometry_column: {\n        _cast: {\n          geography: { _st_d_within: { distance: 1000000, from: $coordinate } }\n        }\n      }\n    }\n  ) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint Definition Schema in JSON\nDESCRIPTION: JSON schema for endpoint definitions that specify query name and collection name mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"query_name : String, \"collection_name\" : CollectionName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Cluster\nDESCRIPTION: Creates a Kubernetes cluster named 'hasura-k8s' in the asia-south1-a zone with 1 node. This cluster will be used to deploy Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters create hasura-k8s --zone asia-south1-a \\\n       --num-nodes 1 --project hasura\n```\n\n----------------------------------------\n\nTITLE: Setting Apollo Federation Configuration for MSSQL Table in Hasura\nDESCRIPTION: This snippet shows how to use the mssql_set_apollo_federation_config API to enable Apollo Federation for a tracked MSSQL table. This allows the table type generated by Hasura to be used in other subgraphs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_set_apollo_federation_config\",\n  \"args\": {\n    \"table\": \"author_details\",\n    \"source\": \"default\",\n    \"apollo_federation_config\": {\n      \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL Server with Subscription Support\nDESCRIPTION: Configures an Express GraphQL server with WebSocket support for subscriptions using Apollo Server and subscriptions-transport-ws.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/docs/subscriptions.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createGraphQLSchema } from 'openapi-to-graphql';\nimport express from 'express';\nimport { graphqlExpress } from 'apollo-server-express';\nimport { execute, printSchema, subscribe } from 'graphql';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\nimport { createServer } from 'http';\nimport { pubsub } from './pubsub';\n\nconst HTTP_PORT = 3000;\n\nconst init = async () => {\n  // Let OpenAPI-to-GraphQL create the schema\n  const schema = await createGraphQLSchema(oasWithCallbackObjects, {\n    createSubscriptionsFromCallbacks: true,\n  });\n\n  // Log GraphQL schema...\n  const myGraphQLSchema = printSchema(schema);\n  console.log(myGraphQLSchema);\n\n  // Set up GraphQL server using Express.js\n  const app = express();\n  app.use('/graphql', graphqlExpress({ schema }));\n\n  // Wrap the Express server...\n  const wsServer = createServer(app);\n\n  // ...and set up the WebSocket for handling GraphQL subscriptions\n  wsServer.listen(HTTP_PORT, () => {\n    new SubscriptionServer(\n      {\n        execute,\n        subscribe,\n        schema,\n        onConnect: (params, socket, ctx) => {\n          // Add pubsub to context to be used by GraphQL subscribe field\n          return { pubsub };\n        },\n      },\n      {\n        server: wsServer,\n        path: '/subscriptions',\n      }\n    );\n  });\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Hasura Deploy\nDESCRIPTION: The basic syntax for the 'hasura deploy' command which allows users to apply metadata and migrations to a Hasura GraphQL Engine instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_deploy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura deploy [flags]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Events in Hasura GraphQL Engine - One-off Example\nDESCRIPTION: API endpoint for fetching one-off scheduled events with pagination. Includes get_rows_count flag to return the total number of rows in the response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"get_scheduled_events\",\n    \"args\" : {\n      \"type\": \"one_off\",\n      \"limit\": 10,\n      \"offset\": 0,\n      \"get_rows_count\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variables for Delete Mutation in Hasura GraphQL\nDESCRIPTION: JSON variables to be used with the DeleteReview mutation. Specifies the UUID of the review to be deleted from the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"dc9768a4-673c-11ed-b682-7224baf239e5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Increment Article Likes\nDESCRIPTION: This snippet provides examples of incrementing and decrementing the 'likes' field of an article, illustrating how the `_inc` operator can be used to directly modify integer fields in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/update.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_likes {\n  update_article(\n    where: {id: {_eq: 1}},\n    _inc: {likes: 2}  # initial value: 1\n  ) {\n    affected_rows\n    returning {\n      id\n      likes\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_likes {\n  update_article(\n    where: {id: {_eq: 1}},\n    _inc: {likes: -2}  # initial value: 3\n  ) {\n    affected_rows\n    returning {\n      id\n      likes\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking a BigQuery Table\nDESCRIPTION: API endpoint for removing a single table from the GraphQL schema with cascade option for dependent metadata objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_untrack_table\",\n  \"args\": {\n    \"table\": {\n      \"dataset\": \"hasura\",\n      \"name\": \"author\"\n    },\n    \"source\": \"default\",\n    \"cascade\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple JWT Secrets in Hasura\nDESCRIPTION: Example JSON array configuration for multiple JWT secrets supporting both HS256 and RS256 encryption types with custom claims namespaces.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\"type\": \"HS256\", \"key\": \"<your-hmac-shared-secret>\", \"claims_namespace\": \"<optional-custom-claims-key-name>\"}, {\"type\": \"RS256\", \"issuer\": \"my-issuer\", \"key\": \"<your-PEM-RSA-public-key>\", \"claims_namespace\": \"<optional-custom-claims-key-name>\"}]\n```\n\n----------------------------------------\n\nTITLE: Filtering Using NOT Operator in GraphQL Query\nDESCRIPTION: Example showing how to use the _not operator to fetch authors who don't have any published articles. This demonstrates negating a filter condition in the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/boolean-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors(\n    where: {\n      _not: {\n        articles: { is_published: {_eq: true} }\n      }\n    }) {\n    id\n    name\n    articles {\n      title\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding updated_at Timestamp using Hasura API\nDESCRIPTION: This snippet shows how to add an updated_at timestamp column using the Hasura schema API, which includes creating a function and trigger for automatic timestamp updates during article modifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/created-updated-timestamps.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n      \"source\": \"<db_name>\",\n      \"sql\":\n        \"ALTER TABLE ONLY \\\"public\\\".\\\"article\\\"\n        ADD COLUMN \\\"updated_at\\\" TIMESTAMP DEFAULT NOW();\n\n        CREATE FUNCTION trigger_set_timestamp()\n        RETURNS TRIGGER AS $$\n        BEGIN\n          NEW.updated_at = NOW();\n        RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql;\n\n        CREATE TRIGGER set_timestamp\n        BEFORE\n        UPDATE ON article\n        FOR EACH ROW\n        EXECUTE PROCEDURE trigger_set_timestamp();\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statements from Seed File\nDESCRIPTION: These are example SQL insert statements generated by the `hasura seed create` command. They insert data into the `author` table, pre-populating it with initial values. The `SET check_function_bodies = false;` statement disables function body checking during the insert operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-seeds.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"SET check_function_bodies = false;\\nINSERT INTO public.author (id, name) VALUES ('1', 'Woolf');\\nINSERT INTO public.author (id, name) VALUES ('2', 'Tolkien');\\nINSERT INTO public.author (id, name) VALUES ('3', 'Austen');\\nINSERT INTO public.author (id, name) VALUES ('4', 'Orwell');\"\n```\n\n----------------------------------------\n\nTITLE: Deploying GraphQL API to Heroku\nDESCRIPTION: This command deploys the GraphQL API app to Heroku by pushing the local git repository to the Heroku remote. It will return a HTTPS URL that can be used as a remote schema in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/auth0-wrapper/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Spec for Cache-Control in Response - HTTP\nDESCRIPTION: This snippet shows how to include a Cache-Control variable in the response from the webhook to specify a relative expiration time for websocket connections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-User-Id\": \"26\",\n    \"X-Hasura-Role\": \"user\",\n    \"X-Hasura-Is-Owner\": \"false\",\n    \"Cache-Control\": \"max-age=600\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Gateway Check Usage Example\nDESCRIPTION: Example showing how to check compatibility of a gateway configuration file with a gateway instance, including required parameters like gateway URL, configuration file path, and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_check.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --gateway-url https://gateway-hasura-app.hasura.app --gateway-configuration-file /path/to/gateway-configuration.json --admin-secret myadminsecret check\n```\n\n----------------------------------------\n\nTITLE: Example Hasura Migration Status Output\nDESCRIPTION: Example output of the migration status command showing version numbers, migration names, and their status both in the source files and in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ hasura migrate status --database-name default\nVERSION        NAME                           SOURCE STATUS  DATABASE STATUS\n1654696186008  init                           Present        Present\n1654696713921  create_table_public_address    Present        Present\n```\n\n----------------------------------------\n\nTITLE: Fetching Event Invocation Logs in PostgreSQL\nDESCRIPTION: API endpoint for retrieving invocation logs for a specific event trigger with pagination support.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_get_event_invocation_logs\",\n  \"args\": {\n    \"name\": \"sample_trigger\",\n    \"source\": \"default\",\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking Article Logical Model via API\nDESCRIPTION: This snippet shows how to untrack the `article` Logical Model using the Hasura Metadata API with an HTTP POST request.  It specifies the `article` model in the default source to be removed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_untrack_logical_model\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"default\\\",\\n    \\\"name\\\": \\\"article\\\"\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation with Rich JSON Expression\nDESCRIPTION: Complex GraphQL mutation showing field renaming using nested JSON operations\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_table(\n  where: {},\n  _json:\n  {\n    data:\n    {\n      json_modify\n      {\n        expression: {column: data},\n        path: \"lax $.name\",\n        new_value: {constant: \"John Doe\"}\n      }\n    }\n  }\n  )\n  { affected_rows }\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronous Action with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to create a synchronous action named 'create_user' using the Hasura Metadata API. It includes defining arguments, output type, and handler URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/actions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"create_action\",\n   \"args\":{\n      \"name\":\"create_user\",\n      \"definition\":{\n         \"kind\":\"synchronous\",\n         \"arguments\":[\n            {\n               \"name\":\"username\",\n               \"type\":\"String!\"\n            },\n            {\n               \"name\":\"email\",\n               \"type\":\"String!\"\n            }\n         ],\n         \"output_type\":\"User\",\n         \"handler\":\"https://action.my_app.com/create-user\",\n         \"timeout\":60\n      },\n      \"comment\": \"Custom action to create user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Article Logical Model via CLI in YAML\nDESCRIPTION: This YAML snippet shows how to define an 'article' logical model with various fields including id, title, contents, published_date, and is_published. It demonstrates the use of different Snowflake data types and nullability settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article\n    fields:\n      id:\n        type: integer\n        nullable: false\n      title:\n        type: text\n        nullable: false\n      contents:\n        type: text\n        nullable: false\n      published_date:\n        type: date\n        nullable: true\n      is_published:\n        type: bit\n        nullable: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Header Section in JSX\nDESCRIPTION: This JSX fragment is used to create a header section in the overview page of the documentation. It includes descriptions of Hasura's capabilities, such as automatic GraphQL schema generation and functionality without the need for manual writing. It also contains quick links for additional resources and a YouTube iframe for video content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"overview-header\">\n  <div className=\"overview-text\">\n    <p>\n      Hasura's GraphQL Engine can be used to build a flexible and scalable GraphQL API on top of your existing Postgres,\n      MySQL, Microsoft SQL Server, Athena, Snowflake, BigQuery, or Oracle database.\n    </p>\n    <p>\n      The Hasura GraphQL Engine automatically generates a GraphQL schema based on the tables and views in your database.{' '}\n      <b>You no longer need to write a GraphQL schema, endpoints, or resolvers</b>.\n    </p>\n    <p>\n      The Hasura GraphQL Engine lets you do anything you would usually do with your database by giving you GraphQL over\n      native constructs.\n    </p>\n    <h4>Quick Links</h4>\n    <ul>\n      <li>\n        <VersionedLink to=\"/schema/quickstart\">\n          Create tables on a connected data source in less than 30 seconds.\n        </VersionedLink>\n      </li>\n      <li>\n        <VersionedLink to=\"/getting-started/how-it-works/index\">Learn more about how Hasura works.</VersionedLink>\n      </li>\n    </ul>\n  </div>\n  <iframe\n    src=\"https://www.youtube.com/embed/zV7y7XTQZ3w\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example Logical Model Definition in YAML\nDESCRIPTION: This snippet illustrates an example of a logical model named 'article' defined in a `databases.yaml` file using YAML. It includes fields such as 'id', 'title', 'contents', 'published_date', and 'is_published', along with their respective data types and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nlogical_models:\n  - name: article\n    fields:\n      id:\n        type: integer\n        nullable: false\n      title:\n        type: text\n        nullable: false\n      contents:\n        type: text\n        nullable: false\n      published_date:\n        type: date\n        nullable: true\n      is_published:\n        type: bit\n        nullable: false\n```\n```\n\n----------------------------------------\n\nTITLE: Tracking Table with Custom Configuration (v2)\nDESCRIPTION: Enhanced version of track_table API that includes custom root fields and column names configuration for the 'author' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"track_table\",\n   \"version\": 2,\n   \"args\": {\n     \"table\": \"author\",\n     \"configuration\": {\n        \"custom_root_fields\": {\n           \"select\": \"Authors\",\n           \"select_by_pk\": \"Author\",\n           \"select_aggregate\": \"AuthorAggregate\",\n           \"insert\": \"AddAuthors\",\n           \"insert_one\":\"AddAuthor\",\n           \"update\": \"UpdateAuthors\",\n           \"update_by_pk\": \"UpdateAuthor\",\n           \"delete\": \"DeleteAuthors\",\n           \"delete_by_pk\": \"DeleteAuthor\"\n        },\n        \"custom_column_names\": {\n           \"id\": \"authorId\"\n        }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data Connector Agent via YAML Configuration\nDESCRIPTION: YAML configuration for adding a Data Connector Agent to the metadata/backend_configs.yaml file. This example shows direct URI configuration and environment variable based configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/adding-data-connectors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndataconnector:\n  sqlite:\n    uri: <data-connector-agent-url>\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndataconnector:\n  sqlite:\n    uri:\n      from_env: <data-connector-agent-url-environment-variable-name>\n```\n\n----------------------------------------\n\nTITLE: Filtering Descendants with _descendant_any Operator in GraphQL\nDESCRIPTION: This query uses the _descendant_any operator to select paths that are descendants of either 'Top.Collections.Pictures.Astronomy' or 'Top.Science.Astronomy'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/ltree-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  test(where: { path: { _descendant_any: [\"Top.Collections.Pictures.Astronomy\", \"Top.Science.Astronomy\"] } }) {\n    path\n  }\n  \n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes - Bash - Hasura GraphQL\nDESCRIPTION: This snippet provides the command to apply configuration changes to the Hasura GraphQL Engine by updating the metadata after column presets have been defined in the tables.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-column-presets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Untrack Article Logical Model via API\nDESCRIPTION: This HTTP request untracks the 'article' logical model using the Hasura metadata API. It specifies the 'default' source and the name 'article' to identify the model for removal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_untrack_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Requesting OpenAPI 3 Specification for RESTified GraphQL Endpoints in HTTP\nDESCRIPTION: Demonstrates how to request the OpenAPI 3 specification for all RESTified GraphQL Endpoints. This request is only accessible with admin role privileges.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/restified.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/swagger/json HTTP/1.1\nX-Hasura-Role: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Method Transform in actions.yaml\nDESCRIPTION: Example of configuring a request method transform for an action in the actions.yaml metadata file. Shows how to set the method to POST.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    method: POST\n    content_type: application/json\n    url: '{{$base_url}}/create_user'\n    query_params:\n      id: '{{$session_variables[''x-hasura-user-id'']}'\n    body: '{\"username\": {{$body.input.username}}}'\ncomment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Creating Model Permissions via API\nDESCRIPTION: Demonstrates how to create select permissions for a logical model using the HTTP API. Includes setting column access and row-level filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mongo_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"role\": \"reader\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"title\",\n        \"contents\",\n        \"date\"\n      ],\n      \"filter\": {\n        \"is_published\": {\"_eq\": true}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Metadata with Metadata API\nDESCRIPTION: This code demonstrates how to clear all existing metadata configurations in Hasura using the Metadata API. The request is sent to the `/v1/metadata` endpoint with the `clear_metadata` type and an empty arguments object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -d'{\\\"type\\\": \\\"clear_metadata\\\", \\\"args\\\": {}}' http://localhost:8080/v1/metadata\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Command to install required Python packages for the webhook server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install Flask\n```\n\n----------------------------------------\n\nTITLE: Execution Log Structure in Hasura GraphQL Engine (JSON)\nDESCRIPTION: Example of an execution log structure in Hasura GraphQL Engine. It includes request ID and statistics about the completed request, such as job details for BigQuery.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"request_id\": \"ff8d2809-8afb-4d6e-a6c3-0fb61ac813e7\",\n    \"statistics\": {\n      \"job\": {\n        \"id\": \"1230123-sd2fsdjs23djj24s57dfj\",\n        \"location\": \"europe-west2\",\n        \"state\": \"DONE\"\n      }\n    }\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-03-15T10:29:08.928+0000\",\n  \"type\": \"execution-log\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Usage Examples\nDESCRIPTION: Examples showing different ways to use the actions codegen command, including generating code for all actions, single action, multiple actions, and deriving actions from Hasura operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_codegen.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Generate code for all Actions\nhasura actions codegen\n\n# Generate code for an Action\nhasura actions codegen [action-name]\n\n# Generate code for two or more Actions\nhasura actions codegen [action-name] [action-name...]\n\n# Derive an Action from a Hasura operation\nhasura actions codegen [action-name] --derive-from \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Raw String Query Parameters via API\nDESCRIPTION: HTTP request for configuring raw string query parameters in event trigger request transformation using the Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": \"{{concat([\\\"userId=\\\", $session_variables[\\\"x-hasura-user-id\\\"]])}}\"\n      \"content_type\": \"application/json\",\n      \"body\": \"{\\n  \\\"table\\\": {\\n    \\\"name\\\": {{$body.table.name}},\\n    \\\"schema\\\": {{$body.table.schema}}\\n  },\\n  \\\"To\\\": {\\n    \\\"username\\\": {{$body.event.data.new.name}},\\n    \\\"email\\\": {{$body.event.data.new.email}}\\n  }\\n}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Webhook\nDESCRIPTION: Command to install the required Python packages (Flask with async support, OpenAI, and requests) for implementing the webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install Flask[async] openai requests\n```\n\n----------------------------------------\n\nTITLE: Multi-Tenant Access Control with Vendor Permissions\nDESCRIPTION: Managing access to products based on vendor role and vendor ID session variable\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/common-roles-auth-examples.mdx#2025-04-17_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nproducts(where: {vendor_id: {_eq: \"X-Hasura-Vendor-Id\"}}) {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Create Action API Request\nDESCRIPTION: HTTP request to create the login action via Hasura metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_action\",\n  \"args\": {\n    \"name\": \"Login\",\n    \"definition\": {\n      \"kind\": \"synchronous\",\n      \"type\": \"mutation\",\n      \"arguments\": [\n        {\n          \"name\": \"username\",\n          \"type\": \"String!\"\n        },\n        {\n          \"name\": \"password\",\n          \"type\": \"String!\"\n        }\n      ],\n      \"output_type\": \"LoginResponse\",\n      \"handler\": \"https://hasura-actions-demo.glitch.me/login\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking an Event Trigger with Custom Payload in Hasura Schema/Metadata API\nDESCRIPTION: This snippet shows how to manually invoke an event trigger with a custom JSON payload. This allows triggering events without actual database changes and requires the event trigger to be configured with enable_manual set to true.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/event-triggers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"invoke_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"payload\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker Container - Bash\nDESCRIPTION: This command launches a Grafana Docker container, exposing it on port 3000, enabling users to access the Grafana dashboard through their web browser.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: LDAP User Definition Example\nDESCRIPTION: LDIF snippet showing an example of LDAP user definition with attributes like objectClass, cn, mail, and userpassword.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ldif\nCODE:\n```\ndn: ou=People,dc=example,dc=org\nobjectClass: organizationalUnit\nou: People\n\ndn: cn=jane,ou=People,dc=example,dc=org\nobjectClass: person\nobjectClass: inetOrgPerson\nsn: doe\ncn: jane\nmail: janedoe@example.com\nuserpassword: foo\n```\n\n----------------------------------------\n\nTITLE: Setting Relationship Comment with Hasura HTTP API\nDESCRIPTION: This snippet demonstrates how to set or update a comment on a relationship in a table using the Hasura HTTP API. It requires the 'table', 'name', and 'comment' parameters, and optionally the 'comment' can be set to null to remove it. This request will target the `/v1/query` endpoint with a `POST` method.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"set_relationship_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_detail\",\n        \"comment\" : \"has extra information about an article like count etc.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Error Log Structure in JSON\nDESCRIPTION: Example of the JSON structure for OpenTelemetry error logs, showing the format of unstructured warning messages when runtime errors occur.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/best-practices.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"OTel exporter: Failed to deliver logs: Encountered retryable HTTP exception: ConnectionFailure ...\",\n  \"level\": \"warn\",\n  \"timestamp\": \"2024-06-19T06:39:51.704+0000\",\n  \"type\": \"unstructured\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackendEventTrigger Type Class for Hasura\nDESCRIPTION: A Haskell type class definition for BackendEventTrigger that enables backend-agnostic event trigger functionality. It includes methods for fetching events from a data source and logging event invocations, allowing different database backends to implement their own event processing logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-event-triggers-research.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\nclass (Backend b) => BackendEventTrigger (b :: BackendType) where\n\n   -- events are fetched per source\n   fetchEvents\n     :: MonadError QErr m\n     => SourceName\n     -> Int -- ^ events batch size\n     -> m [Event]\n\n   insertEventLogInvocation\n     :: MonadError QErr m\n     => Invocation 'EventType\n     -> m ()\n```\n\n----------------------------------------\n\nTITLE: Author Metadata Configuration\nDESCRIPTION: Metadata block defining document authors and discussion references\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors:\n   Vamshi Surabhi <vamshi@hasura.io>,\n   Gil Mizrahi <gil@hasura.io,\n   Evie Ciobanu <evie@hasura.io>,\n   Philip Lykke Carlsen <philip@hasura.io>\ndiscussion:\n   https://github.com/hasura/graphql-engine/issues/7405\nstate: published\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring API Access Token for Hasura CLI (YAML)\nDESCRIPTION: Sets up the Hasura Pro CLI with an API access token for non-interactive environments like CI pipelines. The token is added to the ~/.hasura/pro_config.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/regression-tests.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npat: <token>\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via Hasura CLI\nDESCRIPTION: Command to apply the metadata changes including the REST connector configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Creating BigQuery Remote Relationship to Remote Schema\nDESCRIPTION: HTTP POST request to create a new remote relationship from a BigQuery table to a Remote Schema. Defines relationship mapping and field selections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"bigquery_create_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"source\": \"app_db\",\n      \"table\": {\n         \"dataset\": \"<source_dataset_name>\",\n         \"name\": \"users\"\n      },\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"forum_api\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Type Generation Example\nDESCRIPTION: TypeScript code showing how to programmatically generate types and process the outputs\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateTypes()\n  .then((outputs) => {\n    console.log(\"Finished generateTypes(), outputs are\", outputs)\n    for (let output of outputs) {\n      // This is the input file path\n      console.log(\"File:\", output.file)\n      // This contains the generated text\n      console.log(\"Results:\", output.results)\n    }\n  })\n  .catch((err) => {\n    console.log(\"Got error\", err)\n  })\n  .finally(async () => {\n    // Convert the generated JSON Schema to YAML, for example\n    const generatedFolder = path.join(pathFromRoot, \"generated\", \"/\")\n    const jsonSchemas = await glob(generatedFolder + \"**.json\")\n    jsonSchemas.forEach(jsonSchemaToYAML)\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Aggregate Fields\nDESCRIPTION: Specifies a GraphQL type for integer field aggregations. Includes average, sum, max, min, count, and count distinct operations applicable to integer fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_65\n\nLANGUAGE: graphql\nCODE:\n```\ntype Int_aggregate_fields {\n  _avg: Float!\n  _sum: Int!\n  _max: Int!\n  _min: Int!\n  _count: Int! # Configurable in OpenDD in GraphqlConfig.query.aggregate.countFieldName\n  _count_distinct: Int! # Configurable in OpenDD in GraphqlConfig.query.aggregate.countDistinctFieldName\n}\n```\n\n----------------------------------------\n\nTITLE: Sample PromQL Queries for Caching Metrics\nDESCRIPTION: These PromQL queries are used to analyze the caching metrics exposed by Hasura, such as total requests handled, hit and miss requests, and the hit-miss ratio over time. They require a PromQL-compatible monitoring system like Prometheus.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/caching-metrics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(hasura_cache_request_count[1m]))\n```\n\nLANGUAGE: PromQL\nCODE:\n```\nincrease(hasura_cache_request_count{status=\"hit\"}[1m])\n```\n\nLANGUAGE: PromQL\nCODE:\n```\nincrease(hasura_cache_request_count{status=\"miss\"}[1m])\n```\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(hasura_cache_request_count{status=\"hit\"})/sum(hasura_cache_request_count)\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with SSL Configuration (Bash)\nDESCRIPTION: Configures and runs the Hasura GraphQL Engine with SSL certificates and connection to PostgreSQL databases. It sets up environment variables for SSL certificates and metadata database URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nHGE_PGSSLCERT=\"$(cat server/test-manual/postgres-replicas/certificates/client.crt)\" \\\nHGE_PGSSLKEY=\"$(cat server/test-manual/postgres-replicas/certificates/client.key)\" \\\nHGE_PGSSLROOTCERT=\"$(cat server/test-manual/postgres-replicas/certificates/root.crt)\" \\\nHASURA_GRAPHQL_ADMIN_SECRET=topsecret \\\nHASURA_GRAPHQL_PG_SSL_CERTIFICATE_PATH=dir-to-store-certificates \\\ncabal new-run --RTS -- \\\n    exe:graphql-engine-pro +RTS -N -T -s -RTS \\\n    serve --enable-console --console-assets-dir $PWD/frontend/dist/apps/server-assets-console-ee \\\n    --metadata-database-url postgres://hasura:hasura@$(docker compose port postgres 5432)/postgres\n```\n\n----------------------------------------\n\nTITLE: String Comparison with Greater Than Operator in GraphQL\nDESCRIPTION: Query to fetch authors using string comparison with the _gt operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    where: {name: {_gt: \"M\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Jupyter Notebook API Logs\nDESCRIPTION: Command to monitor the logs of the API created from a Jupyter Notebook in Hasura Cloud.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura notebook logs\n```\n\n----------------------------------------\n\nTITLE: Active Subscription Pollers Metric Definition\nDESCRIPTION: Metric definition for tracking active subscription pollers that multiplex similar subscriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_active_subscription_pollers`\nType   | Gauge\nLabels | `subscription_kind`: streaming | live-query\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Environment Variables\nDESCRIPTION: YAML configuration for setting up Hasura's metadata database URL, Redis URL, and admin secret in the env.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-google-cloud-run.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\nHASURA_GRAPHQL_REDIS_URL: 'redis://redis:6379'\nHASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: 'redis://redis:6379'\nHASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Commands to install required Node.js packages for the webhook implementation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express body-parser openai\n```\n\n----------------------------------------\n\nTITLE: MSSQL Identity Column Syntax\nDESCRIPTION: Example of MSSQL syntax for creating an Identity Column, showing the IDENTITY keyword with type, seed, and increment parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/identity-columns.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncolumn IDENTITY(type, seed, increment)\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Project\nDESCRIPTION: Create a new Google Cloud project named 'hasura' using the gcloud CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects create hasura\n```\n\n----------------------------------------\n\nTITLE: Integrating Pre-defined Metric Sets in EKG-Prometheus\nDESCRIPTION: This example shows how to incorporate pre-defined metric sets (such as GC metrics) from other libraries into your own metrics specification using the subset function to restrict store access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\n-- data AppMetrics4 :: Symbol -> Symbol -> MetricType -> Type -> Type where\n--   -- (1)\n--   GcSubset ::\n--     GcMetrics name help metricType labels ->\n--     AppMetrics4 name help metricType labels\n-- \n-- app4 :: IO ()\n-- app4 = do\n--   store <- newStore @AppMetrics4\n--   -- (2)\n--   _ <- register (subset GcSubset store) registerGcMetrics\n--   pure ()\n```\n\n----------------------------------------\n\nTITLE: Notion.so API Integration via Hasura Action\nDESCRIPTION: This snippet shows a real-world example of integrating the Notion.so API using a Hasura Action, including the action definition and the transform for the request body.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  addNotionItem (\n    databaseId: String!\n    properties: jsonb!\n    children: jsonb\n  ): ItemOutput\n}\n\ntype ItemOutput {\n  id : String!\n  object : String!\n  created_time : timestamptz!\n  last_edited_time : timestamptz!\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n   request_body:\n     {\n       \"parent\": {\n          \"database_id\": \"{{$.action.input.databaseId}}\",\n       }.\n       \"properties\": \"{{$.action.input.properties}}\",\n       \"children\":\n         {{ if $.action.input.children }}\n           {{$.action.input.children}}\n         {{ else }}\n           null\n         {{ end }}\n     }\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration for Hasura GraphQL Engine\nDESCRIPTION: Instructions for configuring the database URL in docker-compose.yaml file. Important to note that localhost within Docker container refers to container IP, not host IP.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose-postgis/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHASURA_GRAPHQL_DATABASE_URL\n```\n\n----------------------------------------\n\nTITLE: Creating Function Permission in Hasura GraphQL Engine (YAML)\nDESCRIPTION: This YAML snippet demonstrates the structure for creating a function permission in Hasura. It specifies the function name, role, and an empty definition object for future extensibility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: create_function_permission\nargs:\n  function: <function_name>\n  role: <role_name>\n  definition: {}\n```\n\n----------------------------------------\n\nTITLE: Calculating Event Triggers Saturation in Prometheus Query Language\nDESCRIPTION: A Prometheus query to calculate the saturation of Hasura Event Triggers by comparing active HTTP workers to total HTTP workers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/observability-and-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nSaturation =  No. of active HTTP workers / No. of total HTTP workers\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Relationship in Metadata YAML\nDESCRIPTION: YAML configuration for adding an object relationship named 'author' to the articles table in Hasura metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n```\n\n----------------------------------------\n\nTITLE: WebSocket Operation Start Log in Hasura\nDESCRIPTION: Example of a WebSocket log for successful operation start, including connection details and subscription query information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-06-10T10:52:54.247+0530\",\n  \"level\": \"info\",\n  \"type\": \"websocket-log\",\n  \"detail\": {\n    \"event\": {\n      \"type\": \"operation\",\n      \"detail\": {\n        \"request_id\": \"d2ede87d-5cb7-44b6-8736-1d898117722a\",\n        \"operation_id\": \"1\",\n        \"query\": {\n          \"variables\": {},\n          \"query\": \"subscription {\\n  author {\\n    name\\n  }\\n}\\n\"\n        },\n        \"operation_type\": {\n          \"type\": \"started\"\n        },\n        \"operation_name\": null\n      }\n    },\n    \"connection_info\": {\n      \"websocket_id\": \"f590dd18-75db-4602-8693-8150239df7f7\",\n      \"jwt_expiry\": null,\n      \"msg\": null\n    },\n    \"user_vars\": {\n      \"x-hasura-role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Function Documentation in Haskell\nDESCRIPTION: An example showing good documentation practices for functions. The comment clarifies information that can't be easily communicated through types or names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_16\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nresolveTableReference\n  :: OMap SchemaName TableName\n  -- ^ All tables visible to the current user. Schemas with priority in the\n  -- search path should come earlier.\n  -> Maybe SchemaName -> TableName -> Maybe QualifiedTable\nresolveTableReference = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Link with Headers in Apollo Client\nDESCRIPTION: Example showing how to set up WebSocket connection with Apollo Client including custom headers through connectionParams. This is necessary for passing authentication headers to subscription endpoints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/ms-sql-server/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wsLink = new WebSocketLink({\n  uri: `<graphql-endpoint>`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      headers: {headers-object}\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Columns in Same Table in Hasura GraphQL Engine\nDESCRIPTION: This code snippet shows the structure for comparing columns within the same table in Hasura GraphQL Engine metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"PGColumn\": {\n    \"Operator\": {\n      \"PGColumn\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Signup API Call for JWT Authentication\nDESCRIPTION: Demonstrates how to make a curl request to the signup endpoint to create a new user and receive a JWT token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" \\\n     -d'{\"username\": \"test123\", \"password\": \"test123\", \"confirmPassword\": \"test123\"}' \\\n     http://localhost:8080/signup\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata and Migrations locally\nDESCRIPTION: These commands apply the exported metadata and migrations to the local Hasura instance. The metadata is reloaded to reflect the changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\\nhasura migrate apply --all-databases\\nhasura metadata reload\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud Project\nDESCRIPTION: Creates a new Google Cloud Project named 'hasura'. This project will group together all the resources used in this deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects create hasura\n```\n\n----------------------------------------\n\nTITLE: Fetching Event by ID in PostgreSQL\nDESCRIPTION: API endpoint for retrieving specific event and its invocation logs using event_id with pagination support for invocation logs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_get_event_by_id\",\n  \"args\": {\n    \"source\" : \"default\",\n    \"event_id\" : \"009335c9-7b01-4ea5-b790-66a112e165f9\",\n    \"invocation_log_limit\" : 100,\n    \"invocation_log_offset\" : 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway Publish Command Options\nDESCRIPTION: Available command line options for the gateway publish command including gateway URL, configuration file path, admin secret, and help flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_publish.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --gateway-url string                  url of the gateway instance\n    --gateway-configuration-file string   path to the current Hasura's configuration\n    --admin-secret string                 admin secret of the gateway\n-h, --help                                help for publish\n```\n\n----------------------------------------\n\nTITLE: Creating Article Table Schema in SQL\nDESCRIPTION: SQL schema definition for an article table with UUID, title, content and author_id fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\narticle (id uuid, title text, content text, author_id uuid)\n```\n\n----------------------------------------\n\nTITLE: SQL Server Query Explain Response\nDESCRIPTION: Sample response showing execution plan for a Microsoft SQL Server backend query with SQL and execution plan details\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/explain.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"field\": \"user\",\n    \"sql\": \"SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\nFROM [dbo].[user] AS [t_user1]\\nFOR JSON PATH, INCLUDE_NULL_VALUES), '[]')\",\n    \"plan\": [\n      \"SELECT ISNULL((SELECT [t_user1].[name] AS [name]\\nFROM [dbo].[user] AS [t_user1]\\nFOR JSON PATH, INCLUDE_NULL_VALUES), '[]')\",\n      \"  |--Compute Scalar(DEFINE:([Expr1003]=isnull([Expr1001],CONVERT_IMPLICIT(nvarchar(max),'[]',0))))\",\n      \"       |--UDX(([t_user1].[name]))\",\n      \"            |--Clustered Index Scan(OBJECT:([master].[dbo].[user].[PK__user__3213E83F04195C1B] AS [t_user1]))\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cron Expression for Midnight Triggers\nDESCRIPTION: The cron expression '0 0 * * *' schedules events to be triggered at midnight daily. It's used in setting up Hasura cron triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: string\nCODE:\n```\n0 0 * * *\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Name using Not In List Operator in GraphQL\nDESCRIPTION: This query fetches a list of authors whose names are NOT part of a specified list using the _nin operator in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_nin: [\"Justin\",\"Sidney\",\"April\"]}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Azure SQL Serverless with ODBC Driver\nDESCRIPTION: Example of an ODBC connection string for connecting to a SQL Server database on Azure SQL Serverless. This string includes the driver specification, server address, database name, authentication credentials, and connection settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/getting-started/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDriver={ODBC Driver 18 for SQL Server};Server=tcp:hasura-test.database.windows.net,1433;Database=db-name;Uid=username;Pwd=password;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Condition in SQL\nDESCRIPTION: SQL implementation showing how to evaluate check conditions in the returning clause based on whether the row was inserted or updated.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/update-permission-check-condition.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nreturning\n  *,\n  IF (xmax = 0) THEN (insert's check condition) ELSE (update's check condition)\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_equals Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values equal to a specified polygon using the _st_equals operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_equals: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims Map for Auth0 in Hasura\nDESCRIPTION: JSON configuration for setting up JWT claims mapping in Hasura to force 'admin' role when using Auth0 SSO.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwt_secret\": {\n    // ...\n    \"claims_map\": {\n      \"x-hasura-allowed-roles\": [\"admin\"],\n      \"x-hasura-default-role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Selection\nDESCRIPTION: Basic GET requests for fetching model resources\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /<modelname>\n\nGET /articles\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Using Variables in Update Mutations\nDESCRIPTION: Another approach to using variables in update mutations where individual fields are specified in the _set operator and their values are provided as variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_article($ratingLimit: Int, $rating: Int, $isPublished: Boolean) {\n  update_article(\n    where: {rating: {_lte: $ratingLimit}},\n    _set: {\n      rating: $rating,\n      is_published: $isPublished\n    }\n  ) {\n    affected_rows\n    returning {\n      id\n      title\n      content\n      rating\n      is_published\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Event Trigger Logs - HTTP\nDESCRIPTION: This HTTP POST request allows manual deletion of event logs for a specified Event Trigger. It includes parameters for batch size and retention period.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n  \"type\" : \"cleanup_event_trigger_logs\",\n  \"args\": {\n    \"event_trigger_name\": \"sample_trigger\",\n    \"source\": \"default\",\n    \"batch_size\": 10000,\n    \"clear_older_than\": 168,\n    \"timeout\": 60,\n    \"clean_invocation_logs\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Squashed Migrations as Applied\nDESCRIPTION: Command to mark a squashed migration as already applied on the server without executing the SQL statements again. This prevents errors and conflicts since the individual migrations have already been applied.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# mark the squashed migration as applied on this server\nhasura migrate apply --version \"<squash-migration-version-timestamp-number>\" --skip-execution --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Grouping Key Fields Types for Invoice and Related Entities\nDESCRIPTION: GraphQL type definitions for grouping key fields that handle various entity relationships and aggregations. These types support both scalar fields and nested object relationships with proper parent-child structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_95\n\nLANGUAGE: graphql\nCODE:\n```\ntype Invoice_grouping_key_fields {\n  # Scalar fields, all nullable\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[]\n  InvoiceId: Int\n  InvoiceDate: Date\n  CustomerId: Int\n  Total: Decimal\n\n  # Nested object fields/object relationships\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[].object\n  BillingAddress: Address_grouping_key_fields!\n  # Controlled in OpenDD via GroupsExpression.definition.groupableRelationships[].object\n  Customer: Customer_grouping_key_fields!\n\n  # Array relationship/nested array of objects\n  # Controlled in OpenDD via GroupsExpression.definition.groupableRelationships[].aggregate\n  InvoiceLines_aggregate: InvoiceLine_aggregate_fields!\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[].aggregate\n  Discounts_aggregate: Discount_aggregate_fields!\n}\n\ntype Address_grouping_key_fields {\n  # Scalar fields, all nullable\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[]\n  StreetAddress: String\n  City: String\n  State: String\n  PostalCode: String\n  Country: String\n}\n\ntype Customer_grouping_key_fields {\n  # Scalar fields, all nullable\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[]\n  CustomerId: Int\n  FirstName: String\n  LastName: String\n  MobilePhone: String\n  SupportRepId: Int\n\n  # Nested object fields/object relationships\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[].object\n  Address: Address_grouping_key_fields!\n\n  # Nested array of objects/array relationships\n  # Controlled in OpenDD via GroupsExpression.definition.groupableRelationships[].aggregate\n  Invoices_aggregate: Invoice_grouping_key_fields!\n\n  # Array of scalars\n  # Controlled in OpenDD via GroupsExpression.definition.groupableFields[].aggregate\n  Emails_aggregate: String_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Root Field Names in YAML\nDESCRIPTION: Shows how to configure table root field names in the `tables.yaml` file to alter their GraphQL representation. Changes `select_by_pk` to `author` and `select` to `authors` for the `author` table. This configuration requires application through the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-field-names.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: author\n  configuration:\n    custom_root_fields:\n      select_by_pk: author\n      select: authors\n```\n\n----------------------------------------\n\nTITLE: Defining Group By Order By Input Types in GraphQL\nDESCRIPTION: This section defines input types for ordering groups by either part of the grouping key or by an aggregation of the group. It includes order by input types for Invoice, InvoiceLine, and Customer models with configurable field names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_93\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_grouping_order_by {\n  # Order by fields of the Invoice model, or into object/array relations\n  # What's specified here must actually be part of the grouping key, or the query will fail\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: Invoice_order_by # Existing type\n  # Order by an aggregation of the group\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: Invoice_aggregate_order_by # Existing type\n}\n\ninput InvoiceLine_grouping_order_by {\n  # Order by fields of the Invoice model, or into object/array relations\n  # What's specified here must actually be part of the grouping key, or the query will fail\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: InvoiceLine_order_by # Existing type\n  # Order by an aggregation of the group\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: InvoiceLine_aggregate_order_by # Existing type\n}\n\ninput Customer_grouping_order_by {\n  # Order by fields of the Customer model, or into object/array relations\n  # What's specified here must actually be part of the grouping key, or the query will fail\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: Customer_order_by # Existing type\n  # Order by an aggregation of the group\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: Customer_aggregate_order_by # Existing type\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model Select Permissions via API\nDESCRIPTION: This HTTP request shows how to create select permissions for a logical model using Hasura's metadata API. It includes parameters for specifying the source, model name, role, and permission details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\" | [\n        \"column 1\",\n        \"column 2\",\n        ...\n      ],\n      \"filter\": <boolean expression>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Reader Role Permissions Configuration in YAML\nDESCRIPTION: Specific example showing how to configure permissions for a reader role with column restrictions and a published articles filter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: '<name>'\n    fields: ...\n    select_permissions:\n      - role: reader\n        permission:\n          columns:\n            - id\n            - title\n            - contents\n            - date\n          filter:\n            is_published:\n              _eq: true\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Removing Event Data for a Specific Event Trigger in SQL\nDESCRIPTION: SQL queries to clean up both invocation logs and processed events for a specific named Event Trigger only, preserving data for other triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM\nhdb_catalog.event_invocation_logs\nWHERE event_id IN (\n    SELECT id FROM hdb_catalog.event_log\n    WHERE trigger_name = '<event_trigger_name>' );\n\nDELETE FROM\nhdb_catalog.event_log\nWHERE trigger_name = '<event_trigger_name>'\nAND (delivered = true OR error = true);\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to verify that the Hasura and Postgres containers are running correctly. It displays the container IDs, images, and port mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/bigquery/getting-started/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI plugins for cloud and notebook\nDESCRIPTION: Commands to install the necessary Hasura CLI plugins for using Jupyter Notebooks with Hasura Data Connectors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins install cloud\nhasura plugins install notebook\n```\n\n----------------------------------------\n\nTITLE: Defining Article Logical Model via API\nDESCRIPTION: This HTTP request demonstrates how to create an 'article' logical model through the Hasura metadata API. It includes field definitions for id, title, contents, published_date, and is_published with their respective types and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\":\n          {\n            \"scalar\": \"int\"\n          }\n      },\n      {\n        \"name\": \"title\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"contents\",\n        \"type\":\n          {\n            \"scalar\": \"text\"\n          }\n      },\n      {\n        \"name\": \"published_date\",\n        \"type\":\n          {\n            \"scalar\": \"date\",\n            \"nullable\": true\n          },\n      },\n      {\n        \"name\": \"is_published\",\n        \"type\":\n          {\n            \"scalar\": \"bit\"\n          }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Table Customization for MSSQL in Hasura GraphQL Engine\nDESCRIPTION: This snippet demonstrates how to use the mssql_set_table_customization API to customize a tracked table with a custom name, root fields, and column names. It replaces any existing customization for the specified table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_set_table_customization\",\n  \"args\": {\n    \"table\": \"author_details\",\n    \"source\": \"default\",\n    \"configuration\": {\n      \"identifier\": \"author\",\n      \"custom_root_fields\": {\n        \"select\": \"Authors\",\n        \"select_aggregate\": \"AuthorAggregate\",\n      },\n      \"column_config\": {\n        \"id\": {\n          \"custom_name\": \"authorId\",\n          \"comment\": \"The ID of the Author\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Default VPC Network\nDESCRIPTION: Command to create a new default VPC network with auto subnet mode if one doesn't exist.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute networks create default --subnet-mode=auto\n```\n\n----------------------------------------\n\nTITLE: Drop Inconsistent Metadata Request\nDESCRIPTION: HTTP request to purge all inconsistent objects from metadata\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/manage-metadata.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"drop_inconsistent_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Metadata with Hasura CLI\nDESCRIPTION: This code snippet shows how to reload the Hasura metadata using the CLI.  The `hasura metadata reload` command updates Hasura's understanding of the current database schema by introspecting it again and updating the metadata accordingly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata reload\"\n```\n\n----------------------------------------\n\nTITLE: Author Validation YAML Configuration\nDESCRIPTION: YAML configuration for implementing author validation, ensuring articles can only be created by active authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/data-validations.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: article\n  insert_permissions:\n    - role: user\n      permission:\n        check:\n          author:\n            is_active:\n              _eq: true\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Console Command Usage\nDESCRIPTION: Shows the basic syntax for the hasura console command with optional flags\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_console.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura console [flags]\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Connection Examples for Hasura Cloud\nDESCRIPTION: These examples show how to construct JDBC connection URLs for Oracle databases with different configurations, including default port and custom port scenarios.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/cloud.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:oracle:thin:myuser/mypassword@myhost.mycompany.com:oracletest  # assuming the default port 1521\njdbc:oracle:thin:myuser/mypassword@myhost.mycompany.com:1234:oracletest  # assuming Oracle is running on port 1234\n```\n\n----------------------------------------\n\nTITLE: Custom Root Fields Configuration\nDESCRIPTION: This snippet provides the structure for configuring custom root fields for tables in GraphQL. It allows customization of select, insert, update, and delete operations for the root fields of a table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n| Key              | Required | Schema                                          | Description                                                                                       |\n| ---------------- | -------- | ----------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n| select           | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `<table-name>` root field. Using a `String` customizes the field name.              |\n| select_by_pk     | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `<table-name>_by_pk` root field. Using a `String` customizes the field name.        |\n| select_aggregate | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `<table-name>_aggregate` root field. Using a `String` customizes the field name.    |\n| select_stream    | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `<table-name>_stream` root field. Using a `String` customizes the field name.       |\n| insert           | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `insert_<table-name>` root field. Using a `String` customizes the field name.       |\n| insert_one       | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `insert_<table-name>_one` root field. Using a `String` customizes the field name.   |\n| update           | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `update_<table-name>` root field. Using a `String` customizes the field name.       |\n| update_by_pk     | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `update_<table-name>_by_pk` root field. Using a `String` customizes the field name. |\n| delete           | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `delete_<table-name>` root field. Using a `String` customizes the field name.       |\n| delete_by_pk     | false    | `String` \\| [CustomRootField](#customrootfield) | Customize the `delete_<table-name>_by_pk` root field. Using a `String` customizes the field name. |\n\n```\n\n----------------------------------------\n\nTITLE: Dropping a Query Collection in Hasura\nDESCRIPTION: This snippet demonstrates how to drop (delete) a query collection using the Hasura Metadata API. It includes an option to cascade the deletion, which removes the collection from the allowlist if present.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/query-collections.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_query_collection\",\n    \"args\": {\n        \"collection\": \"my_collection\",\n        \"cascade\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema Permissions using Metadata API (JSON)\nDESCRIPTION: This JSON payload is sent in the body of the HTTP request to add remote schema permissions using the Hasura Metadata API. It specifies the remote schema, role, definition schema, and comment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"{\n  \\\"type\\\": \\\"add_remote_schema_permissions\\\",\n  \\\"args\\\": {\n    \\\"remote_schema\\\" : \\\"countries\\\",\n    \\\"role\\\" : \\\"user\\\",\n    \\\"definition\\\" : {\n        \\\"schema\\\" : \\\"schema { query: Query } type Continent { countries: [Country!]! name : String!} type Country { name: String! capital: String } type Query { continent(code: ID!): Continent}\\\"\n    },\n    \\\"comment\\\": \\\"remote schema permissions for role: user\\\"\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Host to TLS Allow List using API\nDESCRIPTION: This HTTP POST request adds a host to the TLS allow list using the Hasura metadata API. It specifies the host, suffix, and permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/tls-allow-list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"add_host_to_tls_allowlist\",\n  \"args\": {\n    \"host\": \"localhost\",\n    \"suffix\": \"4183\",\n    \"permissions\": [\"self-signed\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Expression Type in YAML\nDESCRIPTION: This YAML snippet shows how to define a new metadata kind 'BooleanExpressionType'. It allows for more granular control of comparison operators and their usage, replacing ObjectBooleanExpressionType and DataConnectorScalarRepresentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: album_bool_exp\n  operand:\n    object:\n      type: Album\n      comparableFields:\n        - fieldName: AlbumId\n          booleanExpressionType: pg_int_comparison_exp\n        - fieldName: ArtistId\n          booleanExpressionType: pg_int_comparison_exp_with_is_null\n        - field: Address\n          booleanExpressionType: address_bool_exp\n      comparableRelationships:\n        - relationshipName: Artist\n          booleanExpressionType: artist_bool_exp\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: app_album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Expression for Hourly Trigger - JSON\nDESCRIPTION: This JSON payload defines the trigger type for the scheduled event which is configured to run every hour and checks for abandoned carts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_type\": \"check_abandoned_carts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting GraphQL Engine for Testing\nDESCRIPTION: Command to start an instance of graphql-engine for the test suite to use, including necessary environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv EVENT_WEBHOOK_HEADER=MyEnvValue \\\n    EVENT_WEBHOOK_HANDLER=http://localhost:5592 \\\n    SCHEDULED_TRIGGERS_WEBHOOK_DOMAIN=http://127.0.0.1:5594 \\\n  cabal new-run -- exe:graphql-engine \\\n    --database-url='postgres://<user>:<password>@<host>:<port>/<dbname>' \\\n    serve --stringify-numeric-types\n```\n\n----------------------------------------\n\nTITLE: Manually Deleting SQL Trigger for Event Trigger\nDESCRIPTION: This SQL command shows how to manually delete the SQL trigger corresponding to an event trigger.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION hdb_catalog.\"notify_hasura_<event-trigger-name>_<OPERATION-NAME>\" CASCADE;\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery Remote Relationship to Remote Schema\nDESCRIPTION: HTTP POST request to update an existing remote relationship between a BigQuery table and a Remote Schema. Updates the relationship definition and mappings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"bigquery_update_remote_relationship\",\n   \"args\":{\n      \"name\": \"name_of_the_remote_relationship\",\n      \"source\": \"name_of_the_source\",\n      \"table\": \"users\",\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"name_of_the_target_remote_schema\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: API Call to Track a View in Hasura\nDESCRIPTION: This HTTP snippet demonstrates an API call to the Metadata API in Hasura for tracking a view. This operation exposes the view over the GraphQL API and facilitates interaction with it programmatically.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/views.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"bigquery_track_table\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"dataset\": \"my_data\",\n    \"name\": \"<name of view>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SQLite Agent Container\nDESCRIPTION: Docker Compose command to start the SQLite agent services in detached mode from the test directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/test/TESTING.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Untracking Tables with Warning Control\nDESCRIPTION: API endpoint for untracking multiple tables with explicit warning control using allow_warnings flag for atomic operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_untrack_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"author\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      },\n      {\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"book\"\n        },\n        \"source\": \"default\",\n        \"cascade\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Grouping Key with @oneOf Directive in GraphQL\nDESCRIPTION: This input type defines options for grouping Multicurrency data. It currently only supports grouping by scalar fields but is implemented as a @oneOf type for future extensibility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_91\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_grouping_key @oneOf {\n  # WARN: Potential name clash here\n  _scalar_field: Multicurrency_scalar_fields # Enum of all scalar fields - for grouping by scalar model fields\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping All SQL Triggers for Event Triggers\nDESCRIPTION: This SQL script drops all SQL triggers in the source that are related to Hasura event triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ndo $$\ndeclare f record;\nbegin\n  for f in select trigger_name, event_object_table\n    from information_schema.triggers\n    where trigger_name like 'notify_hasura_%'\n  loop\n    EXECUTE 'DROP FUNCTION hdb_catalog.' || QUOTE_IDENT(f.trigger_name) || ' CASCADE';\n  end loop;\nend;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Enable SQL Server Health Monitoring\nDESCRIPTION: Activates Always On health monitoring to ensure the SQL Server's availability group health status is tracked and managed appropriately across all nodes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER EVENT SESSION  AlwaysOn_health ON SERVER WITH (STARTUP_STATE=ON);\nGO\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Cloud SQL Proxy Credentials\nDESCRIPTION: Create a Kubernetes secret with the JSON key file for Cloud SQL Admin service account.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloudsql-instance-credentials \\\n        --from-file=credentials.json=[JSON_KEY_FILE_PATH]\n```\n\n----------------------------------------\n\nTITLE: Using Timetz Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom timetz scalar type for time with timezone in ISO8601 format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    time: \"17:30:15+05:30\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Restarting Hasura GraphQL Engine Docker Container\nDESCRIPTION: Command to restart the Hasura GraphQL Engine Docker container after registering for the Enterprise Edition Trial. This step is required to activate the trial features.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/try-hasura-enterprise-edition.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose restart graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Event Webhook Processing Time Metric Definition\nDESCRIPTION: Metric definition for measuring webhook processing time, including histogram buckets and labels.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_event_webhook_processing_time_seconds`\nType   | Histogram\nBuckets: 0.01, 0.03, 0.1, 0.3, 1, 3, 10\nLabels | `trigger_name`, `source_name`\nUnit   | seconds\n```\n\n----------------------------------------\n\nTITLE: Adding Hasura Enterprise License Key to ECS Task Definition\nDESCRIPTION: Adds the Hasura Enterprise Edition license key as an environment variable in the ECS task definition JSON.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"environment\": [\n    {\n      \"name\": \"HASURA_GRAPHQL_METADATA_DATABASE_URL\",\n      \"value\": \"postgres://<username>:<password>@hostname:<port>/<dbname>\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_REDIS_URL\",\n      \"value\": \"redis://hostname:6379\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\",\n      \"value\": \"redis://hostname:6379\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_ADMIN_SECRET\",\n      \"value\": \"myadminsecretkey\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_EE_LICENSE_KEY\",\n      \"value\": \"<license key>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Metrics using GADT in Haskell\nDESCRIPTION: Defines a GADT (Generalized Algebraic Data Type) to specify metrics for the application. This example defines two metrics: Requests (a counter) and Connections (a gauge).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata AppMetrics1\n  :: Symbol -- ^ Metric name\n  -> Symbol -- ^ Metric documentation\n  -> MetricType -- ^ e.g. Counter, Gauge\n  -> Type -- ^ Label set structure\n  -> Type\n  where\n  Requests :: AppMetrics1 \"app_requests\" \"\" 'CounterType ()\n  Connections :: AppMetrics1 \"app_connections\" \"\" 'GaugeType ()\n```\n\n----------------------------------------\n\nTITLE: Converting SQL Rows to JSON in MS-SQL\nDESCRIPTION: This SQL query demonstrates how to convert rows from the 'authors' table into a JSON array using the FOR JSON PATH clause in MS-SQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-event-triggers-research.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from authors FOR JSON PATH;\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura GraphQL Engine\nDESCRIPTION: Helm command to install Hasura GraphQL Engine with a specified admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install hasura --set secret.adminSecret=hasura hasura/graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'getSessionVariable' Function in Kriti Template Engine\nDESCRIPTION: Example of using the 'getSessionVariable' function in Kriti template engine to retrieve a session variable value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_54\n\nLANGUAGE: kriti\nCODE:\n```\n{{getSessionVariable(\"myVariableName\")}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema with Environment Variable URL in YAML\nDESCRIPTION: Example configuration for remote_schemas.yaml that defines a remote GraphQL schema named 'my-remote-schema' with a URL sourced from an environment variable and a timeout of 40 seconds.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- name: my-remote-schema\n  definition:\n    url_from_env: REMOTE_SCHEMA\n    timeout_seconds: 40\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Hasura GraphQL Engine with CLI Migrations\nDESCRIPTION: Example Dockerfile configuration showing how to use the Hasura GraphQL Engine with CLI migrations. It demonstrates setting up the GraphQL engine with metadata database URL and console enablement.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/cli-migrations/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM hasura/graphql-engine:<version>.cli-migrations-v3\n\nCMD graphql-engine \\\n  --metadata-database-url $METADATA_DATABASE_URL \\\n  serve \\\n  --server-port $PORT \\\n  --enable-console\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Log Structure in Hasura\nDESCRIPTION: Example of a successful HTTP request log structure showing timestamp, request details, operation information, and HTTP metadata. Includes execution time, user variables, and response metrics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-05-30T23:40:24.654+0530\",\n  \"level\": \"info\",\n  \"type\": \"http-log\",\n  \"detail\": {\n    \"request_id\": \"072b3617-6653-4fd5-b5ee-580e9d098c3d\",\n    \"operation\": {\n      \"query_execution_time\": 0.009240042,\n      \"user_vars\": {\n        \"x-hasura-role\": \"user\"\n      },\n      \"error\": null,\n      \"request_id\": \"072b3617-6653-4fd5-b5ee-580e9d098c3d\",\n      \"parameterized_query_hash\": \"7116865cef017c3b09e5c9271b0e182a6dcf4c01\",\n      \"response_size\": 105,\n      \"query\": null\n    },\n    \"http_info\": {\n      \"status\": 200,\n      \"http_version\": \"HTTP/1.1\",\n      \"url\": \"/v1/graphql\",\n      \"ip\": \"127.0.0.1\",\n      \"method\": \"POST\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Track Data with GraphQL Mutation in Hasura\nDESCRIPTION: This GraphQL mutation deletes a Track row based on the TrackId. It demonstrates the use of the delete_Track mutation with a where clause and returning fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_66\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateTrack {\n  delete_Track(\n    where: { TrackId: { _eq: 1 } },\n    ) {\n    affected_rows\n    returning {\n      TrackId\n      Milliseconds\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO with Dex IdP in Docker Compose\nDESCRIPTION: This JSON configuration demonstrates how to set up SSO with Dex Identity Provider in a Docker Compose environment. It shows the use of different URLs for public and internal access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/troubleshooting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"example-app\",\n  \"authorization_url\": \"http://localhost:5556/dex/auth\", // public: the web browser can redirect to public dns only\n  \"request_token_url\": \"http://localhost:5556/dex/token\", // public: the web browser can request to public dns only\n  \"jwt_secret\": {\n    \"type\": \"RS256\",\n    \"jwk_url\": \"http://dex:5556/dex/keys\" // private dns: graphql engine connects to dex internally\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Webhook Implementation\nDESCRIPTION: Complete Python implementation of the webhook server using Flask and smtplib to handle new user events and send welcome emails\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport smtplib\nfrom smtplib import SMTPException\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\napp = Flask(__name__)\n\n# Create an SMTP server connection\ndef create_smtp_server():\n    try:\n        server = smtplib.SMTP(host='smtp.ethereal.email', port=587)\n        server.starttls()\n        server.login('example@superstore.com', 'samplePassword123')\n        return server\n    except SMTPException as e:\n        print(f\"An error occurred while creating the SMTP server: {e}\\n\\n🔔We'll print the message to the terminal:\\n\\n\")\n        return None\n\n@app.route('/new-user', methods=['POST'])\ndef create_new_user():\n    # Confirm the authentication header is correct\n    auth_header = request.headers.get('secret-authorization-string')\n    if auth_header != 'super_secret_string_123':\n        return jsonify({'message': 'Unauthorized'}), 401\n\n    # Get the user's name and email from the request body\n    data = request.get_json()\n    name = data['event']['data']['new']['name']\n    email = data['event']['data']['new']['email']\n\n    # Create the notification email\n    # Create a message\n    msg = MIMEMultipart()\n    msg['From'] = 'sender@SuperStore.com'\n    msg['To'] = f\"{name} <{email}>\"\n    msg['Subject'] = f\"Welcome, {name.split(' ')[0]}!\"\n    message_body = f\"Hi {name.split(' ')[0]},\\n\\nWe're glad to have you as a member!\"\n    msg.attach(MIMEText(message_body, 'plain'))\n\n    server = create_smtp_server()\n    if server is not None:\n        # Send the email if server is running\n        server.sendmail('sender@SuperStore.com', email, msg.as_string())\n        server.quit()\n    else:\n        # or just print the message to the terminal\n        print(f\"From: {msg['From']}\\nTo: {msg['To']}\\nSubject: {msg['Subject']}\\n{message_body}\")\n\n    return jsonify({'message': 'Welcome email sent!'})\n\nif __name__ == '__main__':\n    app.run(port=4000)\n```\n\n----------------------------------------\n\nTITLE: Gateway Configuration JSON Schema\nDESCRIPTION: Sample configuration file structure for defining a child Hasura instance's Remote Schema, including URL, timeout, headers, and customization options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hasura-1\",\n  \"definition\": {\n    \"url\": \"https://hasura-1.hasura.app/v1/graphql\",\n    \"timeout_seconds\": 60,\n    \"customization\": {},\n    \"headers\": [\n      {\n        \"name\": \"x-hasura-admin-secret\",\n        \"value\": \"hasura-1-admin-secret\"\n      }\n    ],\n    \"forward_client_headers\": true\n  },\n  \"comment\": \"Hasura Child instance 1 for this parent gateway\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Node Count in GraphQL Queries\nDESCRIPTION: This example illustrates how nodes are counted in GraphQL operations for node limiting. It shows a query with 3 nodes (author, articles, and homepage_entries) where a node is defined as a field with a selection set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/api-limits.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  author {\n    name\n    articles {\n      id\n      title\n    }\n  }\n  homepage_entries {\n    article_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Network TLS Allowlist\nDESCRIPTION: This snippet showcases an example of `network.yaml`, configuring the TLS allowlist for network options. The example adds graphql.hasura.io to the TLS allowlist, permitting self-signed certificates for this host and any suffix under core.graphql.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntls_allowlist:\n  - host: graphql.hasura.io\n    permissions:\n      - self-signed\n    suffix: core.graphql\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Payload for Hasura Webhook\nDESCRIPTION: Outlines the structure of the JSON payload sent to the webhook, specifying the endpoint and secret keys for security and execution context.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"https://<PROJECT_NAME>.hasura.app/v1/graphql\",\n  \"secret\": \"<YOUR_ADMIN_SECRET>\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response for Non-Deleted Todos\nDESCRIPTION: This representation shows the JSON response structure from the previous query, indicating the non-deleted todos and their respective fields. It helps to illustrate the expected output when accessing existing records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/soft-deletes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"data\": {\n    \"todos\": [\n      {\n        \"id\": \"34c4e2f9-c3e2-4147-9138-f67b6e7e2947\",\n        \"name\": \"Get stuff done\",\n        \"deleted_at\": null\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Request Client\nDESCRIPTION: Python class for handling GraphQL requests to Hasura, including methods for creating users and running queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import request\n\n@dataclass\nclass Client:\n    url: str\n    headers: dict\n\n    def run_query(self, query: str, variables: dict, extract=False):\n        request = requests.post(\n            self.url,\n            headers=self.headers,\n            json={\"query\": query, \"variables\": variables},\n        )\n        assert request.ok, f\"Failed with code {request.status_code}\"\n        return request.json()\n\n    create_user = lambda self, email, password: self.run_query(\n        \"\"\"\n            mutation CreateUser($email: String!, $password: String!) {\n                insert_user_one(object: {email: $email, password: $password}) {\n                    id\n                    email\n                    password\n                }\n            }\n        \"\"\",\n        {\"email\": email, \"password\": password},\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Collection Selector Types for Hasura\nDESCRIPTION: This GraphQL schema defines the query root type and various object types with their relationships. It demonstrates how to configure selection, filtering, grouping, and aggregation operations for database entities like Customer, Invoice, and InvoiceLine in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\n# Root field type\ntype Query {\n  Customer(\n    limit: Int\n    offset: Int\n    order_by: [Customer_order_by!]\n    where: Customer_bool_exp\n  ): Customer!\n  # Configurable in OpenDD Model.definition.graphql.aggregate.queryRootField\n  Customer_aggregate(\n    # Configurable in OpenDD GraphqlConfig.definition.query.aggregate\n    filter_input: Customer_filter_input\n  ): Customer_aggregate_fields!\n  # Configurable in OpenDD Model.definition.graphql.groups.queryRootField\n  Customer_groups(\n    # Configurable in OpenDD GraphqlConfig.definition.query.groups\n    filter_input: Customer_filter_input\n    grouping_keys: [Customer_grouping_key!]!\n    grouping_type: Group_by_grouping_type # Omitting this defaults to Standard\n    having: Customer_aggregate_bool_exp\n    order_by: [Customer_grouping_order_by!]\n    offset: Int\n    limit: Int\n  ): [Customer_groups!]!\n\n  Invoice(\n    limit: Int\n    offset: Int\n    order_by: [Invoice_order_by!]\n    where: Invoice_bool_exp\n  ): Invoice!\n  # Configurable in OpenDD Model.definition.graphql.aggregate.queryRootField\n  Invoice_aggregate(\n    # Configurable in OpenDD GraphqlConfig.definition.query.aggregate\n    filter_input: Invoice_filter_input\n  ): Invoice_aggregate_fields!\n  # Configurable in OpenDD Model.definition.graphql.groups.queryRootField\n  Invoice_groups(\n    # Configurable in OpenDD GraphqlConfig.definition.query.groups\n    filter_input: Invoice_filter_input\n    grouping_keys: [Invoice_grouping_key!]!\n    grouping_type: Group_by_grouping_type # Omitting this defaults to Standard\n    having: Invoice_aggregate_bool_exp\n    order_by: [Invoice_grouping_order_by!]\n    offset: Int\n    limit: Int\n  ): [Invoice_groups!]!\n\n  InvoiceLine(\n    limit: Int\n    offset: Int\n    order_by: [InvoiceLine_order_by!]\n    where: [InvoiceLine_bool_exp!]\n  ): [InvoiceLine!]!\n  # Configurable in OpenDD Model.definition.graphql.aggregate.queryRootField\n  InvoiceLine_aggregate(\n    # Configurable in OpenDD GraphqlConfig.definition.query.aggregate\n    filter_input: InvoiceLine_filter_input\n  ): InvoiceLine_aggregate_fields!\n  # Configurable in OpenDD Model.definition.graphql.groups.queryRootField\n  InvoiceLine_groups(\n    # Configurable in OpenDD GraphqlConfig.definition.query.groups\n    filter_input: InvoiceLine_filter_input\n    grouping_keys: [InvoiceLine_grouping_key!]!\n    grouping_type: Group_by_grouping_type # Omitting this defaults to Standard\n    having: InvoiceLine_aggregate_bool_exp\n    order_by: [InvoiceLine_grouping_order_by!]\n    offset: Int\n    limit: Int\n  ): [InvoiceLine_groups!]!\n}\n\ntype Invoice {\n  # Scalar fields\n  InvoiceId: Int!\n  InvoiceDate: Date!\n  CustomerId: Int!\n  Total: Decimal!\n\n  # Nested object fields/object relationships\n  BillingAddress: Address!\n  Customer: Customer!\n\n  # Array relationships/nested array of objects\n  InvoiceLines(\n    limit: Int\n    offset: Int\n    order_by: [InvoiceLine_order_by!]\n    where: [InvoiceLine_bool_exp!]\n  ): [InvoiceLine!]!\n  # Configurable in OpenDD Relationship.definition.graphql.aggregateFieldName\n  InvoiceLines_aggregate(\n    # Configurable in OpenDD GraphqlConfig.definition.query.aggregate\n    filter_input: InvoiceLine_filter_input\n  ): InvoiceLine_aggregate_fields!\n  # Configurable in OpenDD Relationship.definition.graphql.groupsFieldName\n  InvoiceLines_groups(\n    # Configurable in OpenDD GraphqlConfig.definition.query.groups\n    filter_input: InvoiceLine_filter_input\n    grouping_keys: [InvoiceLine_grouping_key!]!\n    grouping_type: Group_by_grouping_type # Omitting this defaults to Standard\n    having: InvoiceLine_aggregate_bool_exp\n    order_by: [InvoiceLine_grouping_order_by!]\n    offset: Int\n    limit: Int\n  ): [InvoiceLine_groups!]!\n\n  Discounts: [Discount!]!\n  Discounts_aggregate: Discount_aggregate_fields!\n}\n\ntype Address {\n  # Scalar fields\n  StreetAddress: String!\n  City: String!\n  State: String!\n  PostalCode: String!\n  Country: String!\n}\n\ntype Customer {\n  # Scalar fields\n  CustomerId: Int!\n  FirstName: String!\n  LastName: String!\n  Address: Address!\n  MobilePhone: String!\n  SupportRepId: Int\n\n  # Array relationships\n  Invoices(\n    limit: Int\n    offset: Int\n    order_by: [Invoice_order_by!]\n    where: [Invoice_bool_exp!]\n  ): [Invoice!]!\n  # Configurable in OpenDD Relationship.definition.graphql.aggregateFieldName\n  Invoices_aggregate(\n    # Configurable in OpenDD GraphqlConfig.definition.query.aggregate\n    filter_input: Invoice_filter_input\n  ): Invoice_aggregate_fields!\n  # Configurable in OpenDD Relationship.definition.graphql.groupsFieldName\n  Invoices_groups(\n    # Configurable in OpenDD GraphqlConfig.definition.query.groups\n    filter_input: Invoice_filter_input\n    grouping_keys: [Invoice_grouping_key!]!\n    grouping_type: Group_by_grouping_type # Omitting this defaults to Standard\n    having: Invoice_aggregate_bool_exp\n    order_by: [Invoice_grouping_order_by!]\n    offset: Int\n    limit: Int\n  ): [Invoice_groups!]!\n\n  # Array of scalars\n  Emails: [String!]!\n  # Configurable in OpenDD ObjectType.definition.fields[].aggregateExpression & .graphql.aggregateFieldName\n  Emails_aggregate: String_aggregate_fields!\n}\n\ntype InvoiceLine {\n  # Scalar fields\n  InvoiceLineId: Int!\n  InvoiceId: Int!\n  TrackId: Int!\n  Quantity: Int!\n\n  # Nested object fields/Object relationships\n  UnitPrice: Multicurrency!\n  Invoice: Invoice!\n}\n\ntype Multicurrency {\n  # Scalar fields\n  Currency: String!\n  Value: Decimal!\n}\n\ntype Discount {\n  Description: String\n  Percentage: Decimal\n}\n\n# Configurable in OpenDD GraphqlConfig.definition.groupingType\nenum Group_by_grouping_type {\n  Standard # Normal SQL GROUP BY\n  Rollup # SQL GROUP BY ROLLUP\n  Cube # SQL GROUP BY CUBE\n}\n\ninput Customer_filter_input {\n  # Names configurable in OpenDD GraphqlConfig.definition.query.aggregate\n  where: Customer_bool_exp\n  order_by: [Customer_order_by!]\n  offset: Int\n  limit: Int\n}\n\ninput Invoice_filter_input {\n  # Names configurable in OpenDD GraphqlConfig.definition.query.aggregate\n  where: Invoice_bool_exp\n  order_by: [Invoice_order_by!]\n  offset: Int\n  limit: Int\n}\n\ninput InvoiceLine_filter_input {\n  # Names configurable in OpenDD GraphqlConfig.definition.query.aggregate\n  where: InvoiceLine_bool_exp\n  order_by: [InvoiceLine_order_by!]\n  offset: Int\n  limit: Int\n}\n\ninput Discount_filter_input {\n  # Names configurable in OpenDD GraphqlConfig.definition.query.aggregate\n  where: Discount_bool_exp\n  order_by: [Discount_order_by!]\n  offset: Int\n  limit: Int\n}\n\ninput String_filter_input {\n  # Names configurable in OpenDD GraphqlConfig.definition.query.aggregate\n  where: String_bool_exp\n  order_by: order_by\n  offset: Int\n  limit: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migration Using Hasura CLI\nDESCRIPTION: This command applies the previously defined migration involving the foreign key configuration for the 'articles' table, ensuring the database schema is updated accordingly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Starting Development Container with Docker for Hasura GraphQL Engine\nDESCRIPTION: Command to start a development container with NDC agents for testing the Hasura GraphQL Engine V3.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --build --rm dev_setup bash\n```\n\n----------------------------------------\n\nTITLE: Executing Gateway Build Command - Bash\nDESCRIPTION: The basic command syntax for building gateway metadata using the Hasura CLI. This command reads remote schema configuration and builds the final metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway [flags] build\n```\n\n----------------------------------------\n\nTITLE: Flask Server Initialization for Review Moderation\nDESCRIPTION: This code snippet initializes and runs the Flask server for the review moderation system. It sets the server to run on port 4000.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    app.run(port=4000)\n```\n\n----------------------------------------\n\nTITLE: Tracking Volatile SQL Functions as Mutations in Hasura\nDESCRIPTION: JSON configuration for tracking a volatile SQL function as a mutation using the track_function API v2. This new feature allows exposing VOLATILE functions as GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"track_function\",\n  \"version\": 2,\n  \"args\": {\n      \"function\": {\n          \"schema\": \"public\",\n          \"name\": \"some_volatile_function\"\n      },\n      \"configuration\": {\n          \"exposed_as\": \"mutation\"\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Verifying Migration Status\nDESCRIPTION: This command verifies the status of migrations for a given database in Hasura, confirming the success of the reset and setup process.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate status  --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Poll Dashboard Schema\nDESCRIPTION: SQL schema definition for a polling system with tables for polls, options, users, and votes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/use-cases.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\npoll (\n  id INT PRIMARY KEY,\n  question TEXT\n)\n\noption (\n  id INT PRIMARY KEY\n  poll_id INT FOREIGN KEY REFERENCES poll(id)\n  texts TEXT\n)\n\nuser (\n  id INT PRIMARY KEY\n  name TEXT\n)\n\nvote (\n  id INT PRIMARY KEY,\n  option_id INT FOREIGN KEY REFERENCES option(id),\n  user_id INT FOREIGN KEY REFERENCES user(id),\n  time_stamp TIMESTAMP\n)\n```\n\n----------------------------------------\n\nTITLE: Using String Scalar in GraphQL Query\nDESCRIPTION: Example of using the default GraphQL String scalar type for text data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    name: \"Raven\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter Customer objects. Includes logic operators, scalar fields, and nested relationships with aggregation capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_48\n\nLANGUAGE: graphql\nCODE:\n```\ninput Customer_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Customer_bool_exp!]\n  _or: [Customer_bool_exp!]\n  _not: Customer_bool_exp\n\n  # Scalar fields\n  CustomerId: Int_bool_exp\n  FirstName: String_bool_exp\n  LastName: String_bool_exp\n  MobilePhone: String_bool_exp\n  SupportRepId: Int_bool_exp\n\n  # Nested objects/object relationships\n  Address: Address_bool_exp\n\n  # Nested array of objects/array relationships\n  Invoices: Invoice_bool_exp # Exists() array predicate\n  # Configurable in OpenDD Relationship.definition.graphql.aggregateFieldName\n  Invoices_aggregate: Invoice_aggregate_predicate_exp # WARN: Potential name conflict with another relationship/field\n  # Nested array of scalars\n  Emails: String_bool_exp # Exists() array predicate\n  # Configurable in OpenDD ObjectType.definition.fields[].graphql.aggregateFieldName\n  Emails_aggregate: String_array_aggregate_predicate_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Analysis\nDESCRIPTION: Example GraphQL query that retrieves author ratings filtered by name, used to demonstrate performance analysis.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Mario\" } }) {\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship Using Manual Configuration\nDESCRIPTION: Creates an array relationship named 'article_details' on the author table using manual configuration for mapping columns between tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"article_details\",\n        \"source\": \"default\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"author_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Hasura with Dex SSO\nDESCRIPTION: Docker Compose configuration that sets up Hasura GraphQL Engine v2.25.0 with PostgreSQL 15 and Dex for SSO authentication. Includes environment variables for SSO configuration, database connections, and various Hasura settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15\n    restart: always\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - '5432'\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n\n  hasura-pro:\n    image: hasura/graphql-engine:v2.25.0\n    ports:\n      - '8080:8080'\n    depends_on:\n      - postgres\n    restart: always\n    environment:\n      HASURA_GRAPHQL_EE_LICENSE_KEY: <YOUR_EE_LICENSE_KEY>\n      HASURA_GRAPHQL_ADMIN_SECRET: <YOUR_ADMIN_SECRET>\n      HASURA_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'\n      HASURA_GRAPHQL_DEV_MODE: 'true'\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log\n      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics\n      HASURA_GRAPHQL_METRICS_SECRET: <YOUR_METRICS_SECRET>\n      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets\n      HASURA_GRAPHQL_SSO_PROVIDERS:\n        '[{\"client_id\": \"dex-login\",\"admin_roles\": [\"admin\", \"authors\"], \"name\": \"Dex Login\",\"authorization_url\": \"http://127.0.0.1:5556/dex/auth\",\"request_token_url\": \"http://127.0.0.1:5556/dex/token\",\"scope\": \"openid offline_access groups\",\"jwt_secret\": {\"type\": \"RS256\",\"jwk_url\": \"http://dex:5556/dex/keys\",\"issuer\": \"http://127.0.0.1:5556/dex\",\"claims_map\": {\"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }}}}]'\n\n  dex:\n    image: dexidp/dex\n    restart: always\n    volumes:\n      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml\n    ports:\n      - '5556:5556'\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Markdown\nDESCRIPTION: Example of setting a page title using both markdown heading and frontmatter syntax.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Data validations\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database URL in YAML\nDESCRIPTION: Example of setting the PostgreSQL database connection string using YAML configuration. This connects Hasura to a PostgreSQL data source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npostgres://<user>:<password>@<host>:<port>/<db-name>\n```\n\n----------------------------------------\n\nTITLE: Running Azure Functions Locally\nDESCRIPTION: Command to start the Azure Functions host locally for development and testing purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunc host start\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Migrations from Server\nDESCRIPTION: This snippet shows how to create new migration files by pulling the current schema from the server. The command exports the schema from a Postgres database, and includes a limitation that only Postgres is supported.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n## create migration files - \"this will only export public schema from postgres\"\n\nhasura migrate create \"init\" --from-server --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex LDAP Attribute Mappings\nDESCRIPTION: YAML configuration for Dex LDAP connector that maps LDAP attributes to user and group properties. It defines how users authenticate and how group memberships are determined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nusernamePrompt: Email Address\n\nuserSearch:\n  baseDN: ou=People,dc=example,dc=org\n  filter: '(objectClass=person)'\n  # we want the user using email to login\n  username: mail\n  # \"DN\" (case sensitive) is a special attribute name. It indicates that\n  # this value should be taken from the entity's DN not an attribute on\n  # the entity.\n  idAttr: DN\n  emailAttr: mail\n  nameAttr: cn\n\ngroupSearch:\n  baseDN: ou=Groups,dc=example,dc=org\n  filter: '(objectClass=groupOfNames)'\n\n  userMatchers:\n    # A user is a member of a group when their DN matches\n    # the value of a \"member\" attribute on the group entity.\n    - userAttr: DN\n      groupAttr: member\n\n  # The group name should be the \"cn\" value.\n  nameAttr: cn\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes using Hasura CLI\nDESCRIPTION: This command applies the metadata changes, including updates to the TLS allow list, using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/tls-allow-list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Creating Index on Author Name Column\nDESCRIPTION: SQL command to create an index on the 'name' column of the 'authors' table to improve query performance for name-based lookups.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/indexes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX author_name_index ON authors (name);\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Grouping Key with @oneOf Directive in GraphQL\nDESCRIPTION: This input type defines options for grouping InvoiceLine data by scalar fields or related objects. It supports grouping by UnitPrice (a Multicurrency type) or by the parent Invoice.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_89\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_grouping_key @oneOf {\n  # WARN: Potential name clash here\n  _scalar_field: InvoiceLine_scalar_fields # Enum of all scalar fields - for grouping by scalar model fields\n  UnitPrice: Multicurrency_grouping_key\n  Invoice: Invoice_grouping_key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Aggregate Boolean Expression Input Type\nDESCRIPTION: Specifies a GraphQL input type for boolean expressions on Discount aggregates. Includes logic operators, count functions, and scalar field aggregations for discount properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_63\n\nLANGUAGE: graphql\nCODE:\n```\ninput Discount_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Discount_aggregate_bool_exp!]\n  _or: [Discount_aggregate_bool_exp!]\n  _not: Discount_aggregate_bool_exp\n\n  # count all\n  _count: Int_bool_exp\n\n  # Scalar fields\n  Description: String_aggregate_bool_exp\n  Percentage: Decimal_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Relationships in SQL\nDESCRIPTION: Defines SQL tables 'user' and 'order' that can be used to establish relationships with custom object types in Hasura. These tables provide the basis for demonstrating how to connect custom types to the existing database schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nuser (id int, name text)\norder (id int, user_id int, ...)\n```\n\n----------------------------------------\n\nTITLE: Complex Routing Logic Example in Kriti\nDESCRIPTION: This comprehensive example showcases a complex routing logic considering operation type, user role, and custom headers. It demonstrates different routing decisions for queries/subscriptions and mutations based on various conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/dynamic-db-connection.mdx#2025-04-17_snippet_3\n\nLANGUAGE: kriti\nCODE:\n```\n{{ if ($.request.query.operation_type == \"query\") || ($.request.query.operation_type == \"subscription\") }}\n  {{ if $.request.session?[\"x-hasura-role\"] == \"developer\" }}\n      {{if $.request.headers?[\"route-to-read-replicas\"] == \"true\"}}\n        {{$.read_replicas}}\n      {{else}}\n        {{$.connection_set.dev_db}}\n      {{end}}\n  {{else}}\n      {{$.default}}\n  {{ end }}\n{{else}}\n    {{ if $.request.session?[\"x-hasura-role\"] == \"priority-user\" }}\n        {{$.connection_set.fast_db}}\n    {{else}}\n        {{$.primary}}\n    {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Internal Error Details for Admin Role in Hasura\nDESCRIPTION: Command to start Hasura GraphQL Engine with internal error details disabled for admin role requests, which can be useful in production environments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ graphql-engine --database-url <database-url> serve --admin-internal-errors false\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura with ClickHouse\nDESCRIPTION: Commands to download the Docker Compose file for setting up Hasura with ClickHouse Connector. Users can choose between wget or curl to fetch the file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/clickhouse/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/clickhouse/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/clickhouse/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch the first 5 authors from the list of all authors using the limit argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Currency Conversion Query in GraphQL\nDESCRIPTION: Example of how to use the implemented Action to convert currency from EUR to USD.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/quickstart.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery CurrencyQuery {\n  currencyConverter(CurrencyInfo: { amt: 1, from: \"EUR\", to: \"USD\" }) {\n    result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSO Providers in Hasura Enterprise (JSON)\nDESCRIPTION: JSON configuration for the --sso-providers argument in Hasura Enterprise. It specifies the client ID, display name, scope, authorization URL, token request URL, admin roles, and JWT secret details for SSO integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"<client-id-from-idp>\",\n    \"name\": \"<display-name>\",\n    \"scope\": \"openid\",\n    \"authorization_url\": \"<login-url>\",\n    \"request_token_url\": \"<request-token-url>\",\n    \"admin_roles\": [\"admin\"],\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"https://...\",\n      \"issuer\": \"myapp\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura Project via CLI\nDESCRIPTION: Bash command for deploying a Hasura project to Hasura Cloud using the Hasura CLI, including Metadata, Migrations, and Seeds.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura deploy --with-seeds --endpoint \"<hasura-cloud-project-endpoint>\" --admin-secret \"<admin-secret>\"\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Redis TLS Configuration\nDESCRIPTION: Configure TLS settings specifically for rate-limiting Redis instance, providing separate connection and TLS parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/enterprise-caching.mdx#2025-04-17_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nHASURA_GRAPHQL_RATE_LIMIT_REDIS_USE_TLS=\"true\"\nHASURA_GRAPHQL_RATE_LIMIT_REDIS_URL=\"redis://username:password@redishostname:port\"\nHASURA_GRAPHQL_RATE_LIMIT_REDIS_TLS_HOSTNAME=\"redishostname\"\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Query Optimization\nDESCRIPTION: SQL statement to create an index on the name column of the authors table to improve query performance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/performance.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX ON authors (name);\n```\n\n----------------------------------------\n\nTITLE: Secret Refresh Request Payload Format\nDESCRIPTION: JSON payload structure sent to the secret refresh URL when connection failures occur.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/dynamic-secrets.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"filename\": <path>}\n```\n\n----------------------------------------\n\nTITLE: Hiding Command Arguments for Specific Roles\nDESCRIPTION: Role-specific schema construction that hides certain arguments from specific roles. This example shows how to make the user_id argument visible to the admin role but hidden from the user-1 role since it will be preset with a session variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet role_annotations = HashMap::new();\n\n// insert an empty annotation for `admin` to make sure the argument remains in\nthe schema\nrole_annotations.insert(\"admin\", None);\n\n// don't add one for `user-1`, so it disappears from the schema (as it has been\nreplaced with the preset value)\nbuilder.conditional_namespaced(command_argument_schema_stuff, role_annotations)\n```\n\n----------------------------------------\n\nTITLE: Displaying Hasura CLI ASCII Logo\nDESCRIPTION: Shows the ASCII art logo for the Hasura GraphQL Engine CLI. This appears when running the base hasura command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    __\n   / /_   ____ _ _____ __  __ _____ ____ _\n  / __ \\ / __ `// ___// / / // ___// __ `/\n / / / // /_/ /(__  )/ /_/ // /   / /_/ /\n/_/ /_/ \\__,_//____/ \\__,_//_/    \\__,_/\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Listing Tables from a Postgres Database Source with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to use the pg_get_source_tables API to list the tables available on a given Postgres database in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/source.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pg_get_source_tables\",\n  \"args\": {\n    \"source\": \"pg1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Collections Schema Definition\nDESCRIPTION: JSON schema for Hasura query collections configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/QueryCollectionEntry\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Action Permission with Hasura Metadata API\nDESCRIPTION: This example demonstrates how to remove a permission for an action using the Hasura Metadata API, specifying both the action name and the role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/actions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"drop_action_permission\",\n  \"args\": {\n    \"action\": \"create_user\",\n    \"role\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Host from TLS Allow List using API\nDESCRIPTION: This HTTP POST request removes a host from the TLS allow list using the Hasura metadata API. It specifies the host and suffix to be removed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/tls-allow-list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"drop_host_from_tls_allowlist\",\n  \"args\": {\n    \"host\": \"localhost\",\n    \"suffix\": \"4183\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful SQL Query Response (Data Retrieval)\nDESCRIPTION: This snippet showcases the successful response from the GraphQL Engine after executing a data retrieval SQL query. The response includes \"result_type\": \"TuplesOk\" and the \"result\" field containing the column names in the first row and subsequent rows with the retrieved data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"result_type\": \"TuplesOk\",\n    \"result\": [\n        [\n            \"user_id\",\n            \"first_name\"\n        ],\n        [\n            \"1\",\n            \"andre\"\n        ],\n        [\n            \"2\",\n            \"angela\"\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Data for a Particular Cron Trigger - SQL\nDESCRIPTION: This SQL command snippet allows the deletion of all events related to a specific cron trigger, distinguished by its trigger name. It's useful for targeted cleanups without affecting other triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/clean-up.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_cron_events\nWHERE trigger_name = '<trigger_name>';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for CLI Mode\nDESCRIPTION: Example .env file configuration for running the Hasura console in CLI mode, including settings for API host, port, and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=development\nPORT=3000\nNX_API_HOST=http://localhost\nNX_API_PORT=9693\nNX_CDN_ASSETS=true\nNX_ASSETS_PATH=https://graphql-engine-cdn.hasura.io/console/assets\nNX_ASSETS_VERSION=channel/stable/v1.0\nNX_ENABLE_TELEMETRY=true\nNX_URL_PREFIX=/\nNX_DATA_API_URL=http://localhost:8080\nNX_SERVER_VERSION=v1.0.0\nNX_CONSOLE_MODE=cli\nNX_ADMIN_SECRET=my-admin-secret\n```\n\n----------------------------------------\n\nTITLE: MySQL JDBC Connection URL Examples\nDESCRIPTION: Practical examples of MySQL JDBC connection URLs showing how to connect to both remote and local MySQL instances, including default and custom port configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/cloud.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mysql://myhost.mycompany.com/mysqltest?user=abc&password=pqr  # assuming the default port 3306\njdbc:mysql://localhost:4533/mysqltest?user=abc&password=pqr        # assuming MySQL is running on port 4533\n```\n\n----------------------------------------\n\nTITLE: Change Request Content Type in YAML\nDESCRIPTION: This snippet demonstrates how to change the request content type to x-www-form-urlencoded and transform the body accordingly using the 'transforms' key in YAML format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n   request_body:\n     {\n       \"key1\": \"{{$.value1}}\",\n       \"key2\": \"{{$.value2}}\",\n       \"key3\": \"{{$session.x-hasura-user-id}}\"\n     }\n   request_content_type: x-www-form-urlencoded\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Type Definition Example\nDESCRIPTION: Example showing a simple JSON type structure for qualified objects in Hasura metadata\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/RFC.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": String,\n  \"schema\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role via Hasura Metadata API\nDESCRIPTION: Use the Hasura metadata API to create a new role with select permissions for a products table\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"products\",\n    \"role\": \"user\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": {\n        \"price\": {\n          \"_lt\": 1000\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Permission Configuration in JSON\nDESCRIPTION: JSON configuration for insert permissions defining conditions for admin and moderator roles in workspace membership.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/update-permission-check-condition.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_or\": [\n    {\n      \"workspace\": {\n        \"members\": {\n          \"user_id\": {\"_eq\": \"x-hasura-user-id\"},\n          \"user_role\": {\"_eq\": \"admin\"}\n        }\n      }\n    },\n    {\n      \"workspace\": {\n        \"members\": {\n          \"user_id\": {\"_eq\": \"x-hasura-user-id\"},\n          \"user_role\": {\"_eq\": \"moderator\"}\n        }\n      },\n      \"user_role\": {\n        \"_in\": [\"user\", \"moderator\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Metrics Configuration in Hasura\nDESCRIPTION: This snippet shows how to use the remove_metrics_config API to remove all metrics configurations in Hasura. It's a simple API call that doesn't require any additional arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/observability.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n    \"type\": \"remove_metrics_config\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Firewall Rules for Prometheus\nDESCRIPTION: Command to allow incoming traffic to Prometheus web interface through the Ubuntu UFW firewall on port 9090.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo ufw allow 9090/tcp\n```\n\n----------------------------------------\n\nTITLE: Adding Hasura Enterprise License Key\nDESCRIPTION: YAML configuration for adding the Hasura Enterprise Edition license key to the env.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-google-cloud-run.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\nHASURA_GRAPHQL_REDIS_URL: 'redis://redis:6379'\nHASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: 'redis://redis:6379'\nHASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\nHASURA_GRAPHQL_EE_LICENSE_KEY: '<license key>'\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Telemetry Data Sample in JSON\nDESCRIPTION: This snippet demonstrates a sample of telemetry data collected by the Hasura CLI. It includes information about the execution event, CLI version, operating system details, and server information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 115,\n  \"timestamp\": \"2019-01-21T11:36:07.86783+00:00\",\n  \"uuid\": \"e462ce20-42dd-40fd-9549-edfb92f80455\",\n  \"execution_id\": \"ddfa9c33-0693-457d-9026-c7f456c43322\",\n  \"version\": \"v0.4.27\",\n  \"command\": \"hasura version\",\n  \"is_error\": false,\n  \"os_platform\": \"linux\",\n  \"os_arch\": \"amd64\",\n  \"server_uuid\": \"a4d66fb2-f88d-457b-8db1-ea7a0b57921d\",\n  \"server_version\": \"v1.0.0-alpha36\",\n  \"payload\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Connection Template via pg_test_connection_template\nDESCRIPTION: This snippet demonstrates how to test a connection template set for a source using the `pg_test_connection_template` Metadata API. The request includes the source name, a request context with headers and session information, and the connection template to be tested.  This is an enterprise edition only feature.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_test_connection_template\",\n  \"args\": {\n    \"source_name\": \"default\",\n    \"request_context\": {\n      \"headers\": {\n        \"x-hasura-id\": 1,\n        \"x-hasura-role\": \"user\"\n      },\n      \"session\": {\n        \"x-hasura-role\": \"user\"\n      },\n      \"query\": {\n        \"operation_type\": \"query\",\n        \"operation_name\": \"users_by_pk\"\n      }\n    },\n    \"connection_template\": {\n        \"template\": \"{{ if $.request.session?[\\\"x-hasura-role\\\"] == \\\"user\\\" }} {{$.connection_set.connection_set_member_name}} {{else}} {{$.primary}} {{ end }}\"\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Datadog Agent Configuration for PostgreSQL Metrics\nDESCRIPTION: YAML configuration for the Datadog agent to collect basic PostgreSQL metrics. It specifies the connection details including host, port, username, password, and optional tags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/db-observability.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninit_config:\n\ninstances:\n  - host: localhost\n    port: 5432\n    username: datadog\n    password: <PASSWORD>\n    tags:\n      - optional_tag\n```\n\n----------------------------------------\n\nTITLE: Filtering BigQuery Articles with _like Operator\nDESCRIPTION: Demonstrates using the case-sensitive _like operator to filter articles containing the word 'amet' in their titles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/text-search-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {title: {_like: \"%amet%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of string values. Includes logic operators, string-specific aggregate functions, and a special concat aggregation function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_57\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [String_aggregate_bool_exp!]\n  _or: [String_aggregate_bool_exp!]\n  _not: String_aggregate_bool_exp\n\n  # Aggregation functions\n  _max: String_bool_exp\n  _min: String_bool_exp\n  _count: Int_bool_exp\n  _count_distinct: Int_bool_exp\n  _concat: String_concat_aggregate_predicate_args\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AG Listener for Read-Only Routing\nDESCRIPTION: SQL commands to create an Availability Group listener that routes read-only requests to secondary replicas. Configures the listener with a specific IP address and port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nALTER AVAILABILITY GROUP [AG1] REMOVE LISTENER 'AGListener';\nGO\n\nALTER AVAILABILITY GROUP [AG1]\n      ADD LISTENER 'AGListener' ( WITH IP ( (N'172.16.238.21', N'255.255.255.0') ) , PORT = 1434 );\nGO\n```\n\n----------------------------------------\n\nTITLE: Accessing Redshift Connector Health Endpoint\nDESCRIPTION: Command showing the URL endpoint for checking the health status of the Amazon Redshift connector. This endpoint can be used to verify that the connector is running properly after deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/redshift/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:8081/api/v1/redshift/health\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Documents into MongoDB Collection\nDESCRIPTION: JavaScript code to insert multiple sample user documents into the 'users' collection. Each document contains user data including name, age, email, and nested metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb.users.insertMany([\n  {\n    name: 'John',\n    age: 44,\n    email: 'john@example.com',\n    user_meta: {\n      user_role: 'user',\n      email_verified: true,\n    },\n  },\n  {\n    name: 'Jane',\n    age: 24,\n    email: 'jane@example.com',\n    user_meta: {\n      user_role: 'user',\n      email_verified: true,\n    },\n  },\n  {\n    name: 'Emma',\n    age: 36,\n    email: 'emma@example.com',\n    user_meta: {\n      user_role: 'manager',\n      email_verified: true,\n    },\n  },\n  {\n    name: 'Liam',\n    age: 64,\n    email: 'liam@example.com',\n    user_meta: {\n      user_role: 'manager',\n      email_verified: true,\n    },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating select permission via Metadata API (HTTP)\nDESCRIPTION: This HTTP request creates a select permission rule using the Hasura Metadata API. It specifies the source database, table, role (`editor`), and permission filter, which allows selecting articles only if the title is an empty string. This is an alternative to using the console or CLI for setting up permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": {\n      \"name\": \"articles\",\n      \"dataset\": \"bigquery\"\n    },\n    \"role\": \"editor\",\n    \"permission\": {\n      \"filter\": {\n        \"title\": {\n          \"_eq\": \"\"\n        }\n      }\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Selecting from System Databases\nDESCRIPTION: Runs a SQL command to list all databases present in the master database, confirming connectivity to the SQL Server node.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n1> SELECT name FROM master.dbo.sysdatabases;\n2> GO\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure Functions Using Azure CLI\nDESCRIPTION: Series of Azure CLI commands to create a resource group, storage account, and function app. It also includes commands to set up Azure Functions CLI and publish the function app.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name 'my-functions-group' --location southindia\n\naz storage account create --name 'myfunctionsstorage' --location southindia --resource-group 'my-functions-group' --sku Standard_LRS\n\naz functionapp create --name 'myfunctionsapp' --storage-account 'myfunctionsstorage' --resource-group 'my-functions-group' --consumption-plan-location southindia\n\nfunc azure login\nfunc azure subscriptions set 'Free Trial'\nfunc azure functionapp publish 'myfunctionsapp'\n```\n\n----------------------------------------\n\nTITLE: Firebase Authentication Webhook\nDESCRIPTION: Firebase-based authentication webhook for Hasura GraphQL Engine. Implements user authentication and authorization using Firebase authentication services.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Endpoint: /firebase/webhook\n```\n\n----------------------------------------\n\nTITLE: REST API Query Parameters for Artist Filtering and Pagination\nDESCRIPTION: URL query parameters example showing field filtering for Artist records with offset-based pagination and sorting. Requests Artist ID and Name fields, with page offset 0, limit of 5 records, sorted by Name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/ordering/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Artist]=ArtistId,Name&page[offset]=0&page[limit]=5&sort=Name\n```\n\n----------------------------------------\n\nTITLE: Nested Insert Request Schema\nDESCRIPTION: Detailed JSON schema showing the internal representation of the nested insert operation, including relationship definitions, insert schema, and operation specifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relationships\": [\n    {\n      \"type\": \"table\",\n      \"source_table\": [\"Album\"],\n      \"relationships\": {\n        \"Artist\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Artist\"]\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        },\n        \"Tracks\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Track\"]\n          },\n          \"relationship_type\": \"array\",\n          \"column_mapping\": {\n            \"AlbumId\": \"AlbumId\"\n          }\n        }\n      }\n    }\n  ],\n  \"insert_schema\": [...],\n  \"operations\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Postgres Type Format in SQL\nDESCRIPTION: This SQL query demonstrates how to validate if a given string is a valid literal for a specific Postgres type. It's useful for checking session variable formats.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/roles-variables.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect 's'::t;\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Signup Request Example\nDESCRIPTION: Example of sending a signup request to the authentication endpoint with email and password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST http://localhost:5000/signup HTTP/1.1\ncontent-type: application/json\n\n{\n  \"input\": {\n    \"email\": \"user@test.com\",\n    \"password\": \"password123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing YugabyteDB Connection URL for Hasura\nDESCRIPTION: Format for constructing the database connection URL to connect Hasura to a YugabyteDB Postgres instance. The URL includes parameters for username, password, host, port, database name and SSL configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/yugabyte.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>?ssl=true&sslmode=require\n```\n\n----------------------------------------\n\nTITLE: Input Object Field Presets in GraphQL Schema\nDESCRIPTION: Example of using @preset directive on input object fields\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput MessageInput {\n  from:       ID! @preset(value: \"x-hasura-user-id\")\n  to:         ID!\n  content:    String!\n}\n\ntype Message {\n  from:    ID!\n  to:      ID!\n  content: String\n}\n\ntype Query {\n  get_user_messages(user_id: ID!): [Message]\n}\n\ntype Mutation {\n  create_message(message: MessageInput!)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroupsExpression in YAML for Hasura GraphQL Engine\nDESCRIPTION: This YAML snippet demonstrates how to define a GroupsExpression for an Invoice ObjectType. It specifies groupable fields, relationships, and associated GraphQL type names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_106\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GroupsExpression\nversion: v1\ndefinition:\n  name: Invoice_groups_exp # Unique only to GroupsExpressions\n  objectType: Invoice\n  groupableFields:\n    - fieldName: InvoiceId\n    - fieldName: InvoiceDate\n    - fieldName: CustomerId\n    - fieldName: Total\n    # Nested object field\n    - fieldName: BillingAddress\n      groupsExpression: Address_groups_exp\n    # Nested array field\n    - fieldName: Discounts\n      aggregateExpression: Discount_aggregate_exp # Required to know how to aggregate this type\n  groupableRelationships:\n    # Object relationship\n    - relationshipName: Customer\n      groupsExpression: Customer_groups_exp\n    # Array relationship\n    - relationshipName: InvoiceLines\n      aggregateExpression: InvoiceLine_aggregate_exp # Required to know how to aggregate this type\n  graphql:\n    groupsTypeName: Invoice_groups\n    groupKeyTypeName: Invoice_grouping_key_fields\n    groupKeyInputTypeName: Invoice_grouping_key\n    scalarFieldsEnumTypeName: Invoice_scalar_fields\n    groupsOrderByInputTypeName: Invoice_grouping_order_by\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Server Mode\nDESCRIPTION: Example .env file configuration for running the Hasura console in server mode, including various settings like asset paths, API URL, and console mode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_ENV=development\nNX_CDN_ASSETS=true\nNX_ASSETS_PATH=https://graphql-engine-cdn.hasura.io/console/assets\nNX_ASSETS_VERSION=channel/stable/v1.0\nNX_ENABLE_TELEMETRY=true\nNX_URL_PREFIX=/\nNX_DATA_API_URL=http://localhost:8080\nNX_SERVER_VERSION=v1.0.0\nNX_CONSOLE_MODE=server\nNX_HASURA_CONSOLE_TYPE=oss\nNX_IS_ADMIN_SECRET_SET=true\n```\n\n----------------------------------------\n\nTITLE: Webhook Response Format\nDESCRIPTION: Example of the JSON response returned by the Go webhook after processing the Hasura event\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"got 'b30cc7e6-9f3b-48ee-9a10-16cce333df40' for 'INSERT' operation on 'note' table in 'public' schema from 'note_trigger' trigger\",\n    \"oldData\": null,\n    \"newData\": {\n        \"text\": \"new-entry\",\n        \"id\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Poll Results View Creation\nDESCRIPTION: SQL view definition to calculate poll results by counting votes for each option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/use-cases.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE VIEW public.\"poll_results\" AS\n  SELECT poll.id AS poll_id,\n         o.option_id,\n         count(*) AS votes\n    FROM (\n      (\n        SELECT vote.option_id,\n               option.poll_id,\n               option.texts\n          FROM (\n            vote\n              LEFT JOIN option ON ((option.id = vote.option_id))\n          )\n        ) o\n            LEFT JOIN poll ON ((poll.id = o.poll_id))\n      )\n  GROUP BY poll.question, o.option_id, poll.id;\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Help Output\nDESCRIPTION: Help output specific to Hasura actions commands, showing subcommands and flags available for action management.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nManage Hasura actions\n\nUsage:\n  hasura actions [command]\n\nAvailable Commands:\n  codegen     Generate code for actions\n  create      Create a Hasura action\n  use-codegen Use the codegen to generate code for Hasura actions\n\nFlags:\n      --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n      --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n      --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n  -h, --help                           help for actions\n      --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n\nGlobal Flags:\n      --envfile string      .env filename to load ENV vars from (default \".env\")\n      --log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n      --no-color            do not colorize output (default: false)\n      --project string      directory where commands are executed (default: current dir)\n      --skip-update-check   skip automatic update check on command execution\n\nUse \"hasura actions [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Configuring Filtering by Unrelated Tables in Hasura GraphQL Engine\nDESCRIPTION: This JSON snippet configures Hasura GraphQL Engine metadata to filter the Customer table based on a condition in the unrelated Employee table. It allows querying Customer data only if the employee doing the query is from Calgary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"replace_metadata\",\n  \"args\": {\n    \"metadata\": {\n      \"version\": 3,\n      \"backend_configs\": {\n        \"dataconnector\": {\n          \"reference\": {\n            \"uri\": \"http://localhost:8100/\"\n          }\n        }\n      },\n      \"sources\": [\n        {\n          \"name\": \"chinook\",\n          \"kind\": \"reference\",\n          \"tables\": [\n            {\n              \"table\": [\"Customer\"],\n              \"select_permissions\": [\n                {\n                  \"role\": \"employee\",\n                  \"permission\": {\n                    \"columns\": [\n                      \"CustomerId\",\n                      \"FirstName\",\n                      \"LastName\",\n                      \"Country\",\n                      \"SupportRepId\"\n                    ],\n                    \"filter\": {\n                      \"_exists\": {\n                        \"_table\": [\"Employee\"],\n                        \"_where\": {\n                          \"_and\": [\n                            { \"EmployeeId\": { \"_eq\": \"X-Hasura-EmployeeId\" } },\n                            { \"City\": { \"_eq\": \"Calgary\" } }\n                          ]\n                        }\n                      }\n                    }\n                  }\n                }\n              ]\n            },\n            {\n              \"table\": [\"Employee\"]\n            }\n          ],\n          \"configuration\": {}\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura Actions Codegen via CLI\nDESCRIPTION: Command to initialize the codegen configuration for Hasura actions through the CLI interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions use-codegen\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Event Trigger\nDESCRIPTION: This snippet outlines the configuration for creating a Hasura event trigger named 'profile_change'. It listens for Insert, Update, and Delete operations on the 'profile' table and sends events to the specified webhook URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nTrigger name: profile_change\nSchema/Table: public/profile\nOperations: Insert, Update, Delete\nWebhook URL: [Trigger URL]\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security by Comparing Data Values to Session Variables in Hasura\nDESCRIPTION: Example YAML configuration that shows how to allow access to music tracks only if the track's album's artist_id matches the current user's ID. This demonstrates Hasura's row-level security capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/sql-server.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Allow access to a music track if the track's album's artist_id is the current user\nrole: user\ntable: tracks\npermission: tracks.album.artist_id = session.user_id\n```\n\n----------------------------------------\n\nTITLE: Complete Dex Configuration File\nDESCRIPTION: A comprehensive configuration file for Dex identity service, including storage settings, HTTP endpoints, OAuth2 clients, and LDAP connector configuration with different connectivity options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# The base path of dex and the external name of the OpenID Connect service.\n# This is the canonical URL that all clients MUST use to refer to dex. If a\n# path is provided, dex's HTTP service will listen at a non-root URL.\n# Public URL that dex is available at\nissuer: http://localhost:5556/dex\n\n# The storage configuration determines where dex stores its state. Supported\n# options include SQL flavors and Kubernetes third party resources.\n#\n# See the documentation (https://dexidp.io/docs/storage/) for further information.\nstorage:\n  type: sqlite3\n  config:\n    file: /var/dex/dex.db\n\n# Configuration for the HTTP endpoints.\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n  # Uncomment for HTTPS options.\n  # https: 127.0.0.1:5554\n  # tlsCert: /etc/dex/tls.crt\n  # tlsKey: /etc/dex/tls.key\n\n# Uncomment this block to enable configuration for the expiration time durations.\n# Is possible to specify units using only s, m and h suffixes.\n# expiry:\n#   deviceRequests: \"5m\"\n#   signingKeys: \"6h\"\n#   idTokens: \"24h\"\n#   refreshTokens:\n#     reuseInterval: \"3s\"\n#     validIfNotUsedFor: \"2160h\" # 90 days\n#     absoluteLifetime: \"3960h\" # 165 days\n\n# Options for controlling the logger.\n# logger:\n#   level: \"debug\"\n#   format: \"text\" # can also be \"json\"\n\noauth2:\n  responseTypes: ['code'] # also allowed are \"token\" and \"id_token\"\n  skipApprovalScreen: true\n#\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n\nconnectors:\n  - type: ldap\n    name: OpenLDAP\n    id: ldap\n    config:\n      # The following configurations seem to work with OpenLDAP:\n      #\n      # 1) Plain LDAP, without TLS:\n      host: ldap:389\n      insecureNoSSL: true\n      #\n      # 2) LDAPS without certificate validation:\n      #host: localhost:636\n      #insecureNoSSL: false\n      #insecureSkipVerify: true\n      #\n      # 3) LDAPS with certificate validation:\n      #host: YOUR-HOSTNAME:636\n      #insecureNoSSL: false\n      #insecureSkipVerify: false\n      #rootCAData: 'CERT'\n      # ...where CERT=\"$( base64 -w 0 your-cert.crt )\"\n\n      # This would normally be a read-only user.\n      bindDN: cn=admin,dc=example,dc=org\n      bindPW: admin\n\n      usernamePrompt: Email Address\n\n      userSearch:\n        baseDN: ou=People,dc=example,dc=org\n        filter: '(objectClass=person)'\n        username: mail\n        # \"DN\" (case sensitive) is a special attribute name. It indicates that\n        # this value should be taken from the entity's DN not an attribute on\n        # the entity.\n        idAttr: DN\n        emailAttr: mail\n        nameAttr: cn\n\n      groupSearch:\n        baseDN: ou=Groups,dc=example,dc=org\n        filter: '(objectClass=groupOfNames)'\n\n        userMatchers:\n          # A user is a member of a group when their DN matches\n          # the value of a \"member\" attribute on the group entity.\n          - userAttr: DN\n            groupAttr: member\n\n        # The group name should be the \"cn\" value.\n        nameAttr: cn\n```\n\n----------------------------------------\n\nTITLE: Connecting Oracle Database to Hasura Cloud using JDBC URL\nDESCRIPTION: This code snippet demonstrates the format of the JDBC connection URL required to connect an Oracle database to Hasura Cloud. It includes placeholders for username, password, hostname, port, and service name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:oracle:thin:<username>/<password>@<hostname>:<port>:<service-name>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Query Explain Response\nDESCRIPTION: Sample response showing execution plan for a PostgreSQL backend query including SQL and execution plan details\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/explain.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"field\": \"user\",\n    \"sql\": \"SELECT  coalesce(json_agg(\\\"root\\\" ), '[]' ) AS \\\"root\\\" FROM  (SELECT  row_to_json((SELECT  \\\"_1_e\\\"  FROM  (SELECT  \\\"_0_root.base\\\".\\\"name\\\" AS \\\"name\\\"       ) AS \\\"_1_e\\\"      ) ) AS \\\"root\\\" FROM  (SELECT  *  FROM \\\"public\\\".\\\"user\\\"  WHERE ('true')     ) AS \\\"_0_root.base\\\"      ) AS \\\"_2_root\\\"      \",\n    \"plan\": [\n      \"Aggregate  (cost=40.00..40.01 rows=1 width=32)\",\n      \"  ->  Seq Scan on \\\"user\\\"  (cost=0.00..22.00 rows=1200 width=32)\",\n      \"  SubPlan 1\",\n      \"    ->  Result  (cost=0.00..0.01 rows=1 width=32)\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Hasura Version Command Inherited Options\nDESCRIPTION: Common options inherited from parent commands that can be used with the version command, including environment file configuration, logging settings, and update checking options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_version.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type with Scalar Array in YAML\nDESCRIPTION: Configuration for a Country object type with scalar array field for cities, demonstrating NDC spec v0.2.0 support for nested array filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Country\n  fields:\n    - name: id\n      type: Int!\n    - name: name\n      type: String!\n    - name: cities\n      type: [String!]!\n  graphql:\n    typeName: Country\n  dataConnectorTypeMapping: {}\n```\n\n----------------------------------------\n\nTITLE: Reloading Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to refresh the schema from a remote server. Forces Hasura to refetch and restitch the schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schemas.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"reload_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Aggregate Selection with @oneOf Directive in GraphQL\nDESCRIPTION: This input type allows selecting aggregate operations on Address collections. It supports operations on scalar fields like StreetAddress, City, State, PostalCode, and Country.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_85\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_aggregate_select @oneOf {\n  # Scalar fields\n  StreetAddress: String_aggregate_select\n  City: String_aggregate_select\n  State: String_aggregate_select\n  PostalCode: String_aggregate_select\n  Country: String_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Expression for Object Types in YAML\nDESCRIPTION: This snippet defines an AggregateExpression for an Invoice object type, specifying aggregatable fields, count operations, and GraphQL type names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_101\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: Invoice_aggregate_exp # Unique only to AggregateExpressions\n  operand:\n    object:\n      aggregatedType: Invoice\n      aggregatableFields:\n        - fieldName: InvoiceId\n          description: Aggregates over the InvoiceId field\n          aggregateExpression: Int_aggregate_exp\n        # Only nested objects are supported for now. Object relationships are not.\n        - fieldName: BillingAddress\n          description: Aggregates over the BillingAddress field\n          aggregateExpression: Address_aggregate_exp\n  # count and countDistinct are special cased because \"count\" doesn't evaluate to a scalar/object type\n  # but rather the \"nullability\" of a type\n  count:\n    enable: true\n    description: Count of all invoices\n    booleanExpression: Int_comparison_exp\n  countDistinct: # Only enable-able if the AggregateExpression is not used on a Model\n    enable: true\n    description: Distinct count of all invoices\n    booleanExpression: Int_comparison_exp\n  graphql:\n    selectTypeName: Invoice_aggregate_fields\n    orderByInputTypeName: Invoice_aggregate_order_by\n    aggregatePredicateInputTypeName: Invoice_aggregate_predicate_exp\n    aggregateBoolExpInputTypeName: Invoice_aggregate_bool_exp\n    aggregateSelectInputTypeName: Invoice_aggregate_select\n    aggregateSelectUnaryFunctionEnumTypeName: Invoice_aggregate_select_unary # Unused on object variants for now\n```\n\n----------------------------------------\n\nTITLE: Renaming Relationship in Hasura HTTP API\nDESCRIPTION: This code snippet illustrates how to rename an existing relationship in a table using the Hasura HTTP API. It involves providing the old relationship name, the new relationship name, and the table name as parameters. This operation is executed with a `POST` request to the `/v1/query` endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"rename_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_details\",\n        \"new_name\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Mutation Example\nDESCRIPTION: Example of a basic GraphQL mutation for inserting an author without variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/derive.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertAuthor {\n  insert_author_one(object: { name: \"Some name\" }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Type for Apollo Federation in Hasura\nDESCRIPTION: Example of how Hasura generates a GraphQL type for a table when Apollo Federation is enabled. It shows the use of the @key directive with the primary key field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/data-federation/apollo-federation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype user @key(fields: \"id\") {\n  id: Int!\n  name: String\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura Pro CLI Plugin using Bash\nDESCRIPTION: This command installs the Hasura Pro CLI plugin using the Hasura CLI. It requires the Hasura CLI to be installed first.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/installing-uninstalling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins install pro\n```\n\n----------------------------------------\n\nTITLE: Configuring ES256 JWT Authentication with X509 Certificate in Hasura\nDESCRIPTION: This example shows how to set up JWT authentication using an ES256 algorithm with a public key provided as an X509 certificate. This configuration is used to verify JWTs signed with ECDSA using a 256-bit key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ES256\",\n  \"key\": \"-----BEGIN CERTIFICATE-----\\nMIIBbjCCARWgAwIBAgIUGn02F6Y6s88dDGmIfwiNxWxDjhswCgYIKoZIzj0EAwIw\\nDTELMAkGA1UEBhMCSU4wHhcNMjMwNTI0MTAzNTI4WhcNMjgwNTIyMTAzNTI4WjAN\\nMQswCQYDVQQGEwJJTjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBFbP6OfrkG0\\n4y93Icpy+MF4FINkfavVFPCOZhKL1H/OkGe5DgSIycKp8w9aJmoHhB1sB3QTugfn\\nRWm5nU/TzsajUzBRMB0GA1UdDgQWBBSaqFjzps1qG+x2DPISjaXTWsTOdDAfBgNV\\nHSMEGDAWgBSaqFjzps1qG+x2DPISjaXTWsTOdDAPBgNVHRMBAf8EBTADAQH/MAoG\\nCCqGSM49BAMCA0cAMEQCIBDHHWa/uLAVdGFEk82auTmw995+MsRwv52VXLw2Z+ji\\nAiAXzOWIcGN8p25uhUN/7v9gEcADGIS4yUiv8gsn/Jk2ow==\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Artists Using GraphQL Mutation\nDESCRIPTION: A GraphQL mutation example that inserts two artists into the database. The mutation specifies the ArtistId and Name for each artist and requests the affected row count and returning data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_58\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertArtists {\n  insert_Artist(objects: [\n    {ArtistId: 300, Name: \"Taylor Swift\"},\n    {ArtistId: 301, Name: \"Phil Collins\"}\n  ]) {\n    affected_rows\n    returning {\n      ArtistId\n      Name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Reader Role Permissions via HTTP API\nDESCRIPTION: Example HTTP API request for setting up reader role permissions with specific column access and published article filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"role\": \"reader\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"title\",\n        \"contents\",\n        \"date\"\n      ],\n      \"filter\": {\n        \"is_published\": {\"_eq\": true}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Column with Cascade\nDESCRIPTION: This snippet illustrates how to drop a column from the author table while cascading changes to dependent objects. It sends a `cascade` option set to true in the request, allowing Hasura to drop related permissions as necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"source\": \"default\",\n        \"sql\": \"ALTER TABLE author DROP COLUMN bio\",\n        \"cascade\" : true\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"result_type\": \"CommandOk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Claims Mapping in Hasura GraphQL Engine\nDESCRIPTION: Example JSON configuration for mapping session variables to default JWT claims in Hasura GraphQL Engine. This feature allows specifying a mapping of Hasura session variables to values in existing claims via JSONPath or literal values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\":\"RS512\",\n  \"key\": \"<The public Key>\",\n  \"claims_map\": {\n    \"x-hasura-allowed-roles\": {\"path\":\"$.user.appRoles\"},\n    \"x-hasura-default-role\": {\"path\":\"$.user.appRoles[0]\",\"default\":\"user\"},\n    \"x-hasura-user-id\": {\"path\":\"$.user.id\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaContext with Role-based Annotations in Hasura Engine\nDESCRIPTION: The actual implementation of SchemaContext in Hasura's engine that enables role-based annotations. This implementation uses Role as the Namespace type and defines annotation types for attaching role-specific information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl gql_graphql_schema::SchemaContext for GDS {\n    type Namespace = Role;\n    type GenericNodeInfo = types::Annotation;\n    type NamespacedNodeInfo = Option<types::NamespaceAnnotation>;\n```\n\n----------------------------------------\n\nTITLE: Verifying Hasura Pro CLI Plugin Installation using Bash\nDESCRIPTION: This command verifies the installation of the Hasura Pro CLI plugin by displaying the help information. It can be used to confirm successful installation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/installing-uninstalling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura pro --help\n```\n\n----------------------------------------\n\nTITLE: Spec for Expires in Response - HTTP\nDESCRIPTION: This snippet demonstrates how to provide an Expires variable in the webhook response to set an absolute expiration time for websocket connections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/webhook.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-User-Id\": \"27\",\n    \"X-Hasura-Role\": \"user\",\n    \"X-Hasura-Is-Owner\": \"false\",\n    \"Expires\": \"Mon, 30 Mar 2020 13:25:18 GMT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Aggregate Boolean Expression Input Type\nDESCRIPTION: Specifies the GraphQL input type for boolean expressions on Address aggregates. Includes logical operators, count functions, and scalar field aggregations for address properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_61\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Address_aggregate_bool_exp!]\n  _or: [Address_aggregate_bool_exp!]\n  _not: Address_aggregate_bool_exp\n\n  # count all\n  _count: Int_bool_exp\n\n  # Scalar fields\n  StreetAddress: String_aggregate_bool_exp\n  City: String_aggregate_bool_exp\n  State: String_aggregate_bool_exp\n  PostalCode: String_aggregate_bool_exp\n  Country: String_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking SQL Function\nDESCRIPTION: Example of removing a SQL function 'search_articles' from the GraphQL schema using the pg_untrack_function API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_untrack_function\",\n    \"args\": {\n        \"function\": {\n           \"schema\": \"public\",\n           \"name\": \"search_articles\"\n        },\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Notification using cURL and GraphQL Mutation\nDESCRIPTION: This cURL command sends a POST request to the Hasura GraphQL endpoint to insert a new notification. It demonstrates how to trigger an update that will be caught by the subscription.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -H \"x-hasura-admin-secret: <YOUR_ADMIN_SECRET>\" -d '{\"query\":\"mutation InsertNewNotification {\\n  insert_notifications_one(object: {user_id: \\\"9bd9d300-65b7-11ed-b908-571fef22d2ba\\\", message: \\\"This is a live-updating subscription!\\\"}) {\\n    id\\n  }\\n}\"}' <YOUR_PROJECT_GRAPHQL_ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura GraphQL Engine with Docker Compose\nDESCRIPTION: Commands to navigate to the docker-compose directory and start the Hasura GraphQL Engine server in detached mode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd install-manifests/docker-compose\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Bash Command to Apply Metadata\nDESCRIPTION: A simple command to apply the updated metadata to Hasura using the Hasura CLI. This command propagates the changes, including the input validation settings, to the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Creating Note Revision Table Schema in SQL\nDESCRIPTION: SQL schema definition for the note revision table that tracks changes to notes with timestamp.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note_revision\n\nColumns:\n\nid         Integer auto-increment\nnote       Text\nnote_id    Integer\nupdate_at  Timestamp, default: now()\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Command in GraphQL Schema\nDESCRIPTION: Example showing how to add descriptions to a Command metadata object for both the command itself and its arguments. These descriptions appear in the generated GraphQL schema in the appropriate locations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3-descriptions.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Command\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"get_article_by_id\",\n    \"description\": \"Command to get an article by using the ID.\",\n    \"arguments\": [\n      {\n        \"name\": \"article_id\",\n        \"type\": \"Int!\",\n        \"description\": \"ID of the article.\"\n      }\n    ],\n    \"outputType\": \"commandArticle\",\n    \"graphql\": {\n      \"rootFieldName\": \"getArticleById\",\n      \"rootFieldKind\": \"Query\"\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  \"\"\"\n  Command to get an article by using the ID.\n  \"\"\"\n  getArticleById(\n    \"ID of the article.\"\n    article_id: Int!\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding CLI Assets\nDESCRIPTION: Command to rebuild assets after modifications to files in the assets directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake assets\n```\n\n----------------------------------------\n\nTITLE: Examples of using hasura migrate squash in Bash\nDESCRIPTION: These examples demonstrate how to use the 'hasura migrate squash' command. The first example squashes all migrations from version 123 to the latest, while the second example adds a custom name to the new squashed migration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_squash.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: This command is in PREVIEW. Correctness is not guaranteed and the usage may change.\n\n# squash all migrations from version 123 to the latest one:\nhasura migrate squash --from 123\n\n# Add a name for the new squashed migration\nhasura migrate squash --name \"<name>\" --from 123\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than or Equal To Operator in GraphQL\nDESCRIPTION: Query to fetch articles using the _gte operator to filter numeric ratings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {rating: {_gte: 4}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Version in YAML\nDESCRIPTION: Example of version.yaml file that specifies the metadata format version as 3. This file is required for Hasura to correctly interpret the metadata structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Cases with Records in Haskell\nDESCRIPTION: Demonstrates how to define unit test cases using records with descriptive field names for improved readability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/testing-guidelines.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ndata UnitTestCaseForSomeFunction = UnitTestCaseForSomeFunction\n  { input :: InputType,\n    expectation :: ExpectedResultType,\n    description :: String\n  }\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura Deployment YAML\nDESCRIPTION: Download the deployment YAML file for Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/google-cloud-k8s-sql/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Transform for Application/JSON in Hasura using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a request transformation for a custom action 'create_user' in Hasura to use the application/json format. It utilizes the Kriti template engine to transform the request body before sending it to the specified handler.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- name: create_user\n  definition:\n    kind: synchronous\n    handler: https://action.my_app.com/create-user\n  timeout: 60\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: POST\n    url: '{{$base_url}}/create_user'\n    query_params:\n      id: '{{$session_variables[''x-hasura-user-id'']}}'\n    body:\n      action: 'transform'\n      template: '{\"username\": {{$body.input.username}}}'\n  comment: Custom action to create user\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Search Path\nDESCRIPTION: SQL commands to configure the search path for pgcrypto extension access at database or role level.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- set search path to include schemas for the entire database\nALTER DATABASE <database_name> SET search_path TO schema1,schema2;\n\n-- OR --\n\n-- set search path to include schemas for a particular role\nALTER ROLE <hasura_role> SET search_path TO schema1,schema2;\n```\n\n----------------------------------------\n\nTITLE: Scaffolding GraphQL Action with Complex Types\nDESCRIPTION: API command to scaffold a GraphQL action with complex types. This example creates a synchronous action named 'validatedUserInsert' with various input objects, output objects, and relations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscaffolder scaffold '{ \"action\": { \"action_name\": \"validatedUserInsert\", \"action_defn\": { \"kind\": \"synchronous\", \"webhook\": \"http://192.168.0.107:5000/actions\", \"arguments\": [{ \"name\": \"user\", \"type\": \"_user_insert_input!\", \"description\": null }], \"output_type\": \"UserInfo\" } }, \"types\": { \"enums\": [{ \"name\": \"_user_constraint\", \"values\": [{ \"value\": \"user_pkey\", \"description\": null, \"is_deprecated\": null }], \"description\": null }, { \"name\": \"_user_update_column\", \"values\": [{ \"value\": \"email\", \"description\": null, \"is_deprecated\": null }, { \"value\": \"id\", \"description\": null, \"is_deprecated\": null }, { \"value\": \"username\", \"description\": null, \"is_deprecated\": null }], \"description\": null }, { \"name\": \"_article_constraint\", \"values\": [{ \"value\": \"article_pkey\", \"description\": null, \"is_deprecated\": null }], \"description\": null }, { \"name\": \"_article_update_column\", \"values\": [{ \"value\": \"author_id\", \"description\": null, \"is_deprecated\": null }, { \"value\": \"content\", \"description\": null, \"is_deprecated\": null }, { \"value\": \"id\", \"description\": null, \"is_deprecated\": null }, { \"value\": \"title\", \"description\": null, \"is_deprecated\": null }], \"description\": null }], \"objects\": [{ \"name\": \"UserInfo\", \"fields\": [{ \"name\": \"userId\", \"type\": \"Int\", \"arguments\": null, \"description\": null }, { \"name\": \"accessToken\", \"type\": \"String\", \"arguments\": null, \"description\": null }], \"description\": null, \"relationships\": [{ \"name\": \"user\", \"remote_table\": \"user\", \"field_mapping\": { \"userId\": \"id\" } }, { \"name\": \"anotherrel\", \"remote_table\": \"article\", \"field_mapping\": { \"userId\": \"id\" } }] }, { \"name\": \"SMSInfo\", \"fields\": [{ \"name\": \"sms_id\", \"type\": \"String!\", \"arguments\": null, \"description\": null }], \"description\": null, \"relationships\": null }], \"scalars\": [], \"input_objects\": [{ \"name\": \"_user_insert_input\", \"fields\": [{ \"name\": \"articles\", \"type\": \"_article_arr_rel_insert_input\", \"description\": null }, { \"name\": \"email\", \"type\": \"String\", \"description\": null }, { \"name\": \"id\", \"type\": \"Int\", \"description\": null }, { \"name\": \"username\", \"type\": \"String\", \"description\": null }], \"description\": null }, { \"name\": \"_article_arr_rel_insert_input\", \"fields\": [{ \"name\": \"data\", \"type\": \"[_article_insert_input!]!\", \"description\": null }, { \"name\": \"on_conflict\", \"type\": \"_article_on_conflict\", \"description\": null }], \"description\": null }, { \"name\": \"_article_insert_input\", \"fields\": [{ \"name\": \"author_id\", \"type\": \"Int\", \"description\": null }, { \"name\": \"content\", \"type\": \"String\", \"description\": null }, { \"name\": \"id\", \"type\": \"Int\", \"description\": null }, { \"name\": \"title\", \"type\": \"String\", \"description\": null }, { \"name\": \"user\", \"type\": \"_user_obj_rel_insert_input\", \"description\": null }], \"description\": null }, { \"name\": \"_user_obj_rel_insert_input\", \"fields\": [{ \"name\": \"data\", \"type\": \"_user_insert_input!\", \"description\": null }, { \"name\": \"on_conflict\", \"type\": \"_user_on_conflict\", \"description\": null }], \"description\": null }, { \"name\": \"_user_on_conflict\", \"fields\": [{ \"name\": \"constraint\", \"type\": \"_user_constraint!\", \"description\": null }, { \"name\": \"update_columns\", \"type\": \"[_user_update_column!]!\", \"description\": null }, { \"name\": \"where\", \"type\": \"_user_bool_exp\", \"description\": null }], \"description\": null }, { \"name\": \"_user_bool_exp\", \"fields\": [{ \"name\": \"_and\", \"type\": \"[_user_bool_exp]\", \"description\": null }, { \"name\": \"_not\", \"type\": \"_user_bool_exp\", \"description\": null }, { \"name\": \"_or\", \"type\": \"[_user_bool_exp]\", \"description\": null }, { \"name\": \"articles\", \"type\": \"_article_bool_exp\", \"description\": null }, { \"name\": \"email\", \"type\": \"_String_comparison_exp\", \"description\": null }, { \"name\": \"id\", \"type\": \"_Int_comparison_exp\", \"description\": null }, { \"name\": \"username\", \"type\": \"_String_comparison_exp\", \"description\": null }], \"description\": null }, { \"name\": \"_article_bool_exp\", \"fields\": [{ \"name\": \"_and\", \"type\": \"[_article_bool_exp]\", \"description\": null }, { \"name\": \"_not\", \"type\": \"_article_bool_exp\", \"description\": null }, { \"name\": \"_or\", \"type\": \"[_article_bool_exp]\", \"description\": null }, { \"name\": \"author_id\", \"type\": \"_Int_comparison_exp\", \"description\": null }, { \"name\": \"content\", \"type\": \"_String_comparison_exp\", \"description\": null }, { \"name\": \"id\", \"type\": \"_Int_comparison_exp\", \"description\": null }, { \"name\": \"title\", \"type\": \"_String_comparison_exp\", \"description\": null }, { \"name\": \"user\", \"type\": \"_user_bool_exp\", \"description\": null }], \"description\": null }, { \"name\": \"_Int_comparison_exp\", \"fields\": [{ \"name\": \"_eq\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_gt\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_gte\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_in\", \"type\": \"[Int!]\", \"description\": null }, { \"name\": \"_is_null\", \"type\": \"Boolean\", \"description\": null }, { \"name\": \"_lt\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_lte\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_neq\", \"type\": \"Int\", \"description\": null }, { \"name\": \"_nin\", \"type\": \"[Int!]\", \"description\": null }], \"description\": null }, { \"name\": \"_String_comparison_exp\", \"fields\": [{ \"name\": \"_eq\", \"type\": \"String\", \"description\": null }, { \"name\": \"_gt\", \"type\": \"String\", \"description\": null }, { \"name\": \"_gte\", \"type\": \"String\", \"description\": null }, { \"name\": \"_ilike\", \"type\": \"String\", \"description\": null }, { \"name\": \"_in\", \"type\": \"[String!]\", \"description\": null }, { \"name\": \"_is_null\", \"type\": \"Boolean\", \"description\": null }, { \"name\": \"_like\", \"type\": \"String\", \"description\": null }, { \"name\": \"_lt\", \"type\": \"String\", \"description\": null }, { \"name\": \"_lte\", \"type\": \"String\", \"description\": null }, { \"name\": \"_neq\", \"type\": \"String\", \"description\": null }, { \"name\": \"_nilike\", \"type\": \"String\", \"description\": null }, { \"name\": \"_nin\", \"type\": \"[String!]\", \"description\": null }, { \"name\": \"_nlike\", \"type\": \"String\", \"description\": null }, { \"name\": \"_nsimilar\", \"type\": \"String\", \"description\": null }, { \"name\": \"_similar\", \"type\": \"String\", \"description\": null }], \"description\": null }, { \"name\": \"_article_on_conflict\", \"fields\": [{ \"name\": \"constraint\", \"type\": \"_article_constraint!\", \"description\": null }, { \"name\": \"update_columns\", \"type\": \"[_article_update_column!]!\", \"description\": null }, { \"name\": \"where\", \"type\": \"_article_bool_exp\", \"description\": null }], \"description\": null }, { \"name\": \"SMSInput\", \"fields\": [{ \"name\": \"sms\", \"type\": \"String\", \"description\": null }, { \"name\": \"is_international\", \"type\": \"Boolean\", \"description\": null }, { \"name\": \"price\", \"type\": \"[Price]\", \"description\": null }], \"description\": null }, { \"name\": \"Price\", \"fields\": [{ \"name\": \"value\", \"type\": \"String\", \"description\": null }], \"description\": null }] }, \"framework\": \"typescript-express\" }'\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL GENERATED ALWAYS AS IDENTITY with OVERRIDING SYSTEM VALUE\nDESCRIPTION: Defines how PostgreSQL identity columns would work with OVERRIDING SYSTEM VALUE, making them not updatable but insertable. This requires specific handling during SQL translation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGENERATED ALWAYS AS IDENTITY, with OVERRIDING SYSTEM VALUE => not updatable, insertable\n```\n\n----------------------------------------\n\nTITLE: Creating a users table with a role field in Postgres\nDESCRIPTION: This SQL snippet creates a `users` table with columns for `id`, `name`, and `role`. The `role` column is initially defined as a text field without any constraints, which allows for arbitrary string values to be inserted.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/enums.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE users (\\n  id serial PRIMARY KEY,\\n  name text NOT NULL,\\n  role text NOT NULL\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Configuration for OpenTelemetry\nDESCRIPTION: Prometheus configuration to scrape metrics from OpenTelemetry Collector with honor_labels enabled.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: 'otel-collector-hasura'\n    scrape_interval: 30s\n    honor_labels: true\n    static_configs:\n      - targets: ['otel-collector:8889']\n```\n\n----------------------------------------\n\nTITLE: Creating Array Relationship Using Manual Configuration in Hasura\nDESCRIPTION: Creates an array relationship named 'article_details' on the 'author' table using manual configuration to map columns. This method is typically used for defining relationships with views where foreign key constraints cannot be used.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_array_relationship\",\n    \"args\": {\n        \"table\": \"author\",\n        \"name\": \"article_details\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"author_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BigQuery FunctionName Structure in JSON\nDESCRIPTION: Specifies the structure for referencing BigQuery functions with name and dataset properties. Used to identify functions within BigQuery datasets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": String,\n    \"dataset\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Update Validation Webhook Request Payload Schema\nDESCRIPTION: JSON schema for the payload sent to validation webhooks during update operations. This includes version, role, session variables, and the update input data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"<version-integer>\",\n    \"role\": \"<role-name>\",\n    \"session_variables\": {\n        \"x-hasura-user-id\": \"<session-user-id>\",\n        \"x-hasura-user-name\": \"<session-user-name>\"\n    },\n    \"data\": {\n      \"input\": \n        [\n          JSON-fied <model_name>_updates!,\n          \"pk_columns\": JSON-fied <model_name>_pk_columns_input! (only included for update_<mode_name>_by_pk)\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom User Creation Action in GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates the usage of the custom CreateUser action that includes password hashing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation MyMutation($email: String!, $name: String!, $password: String!) {\n  CreateUser(email: $email, name: $name, password: $password) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Golden Files for Hasura V3 Tests\nDESCRIPTION: Command to regenerate golden files used in tests when expected outputs change due to intentional modifications in the codebase.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\njust update-golden-files\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inconsistent Metadata in Hasura GraphQL Engine (HTTP)\nDESCRIPTION: This snippet shows how to use the 'get_inconsistent_metadata' endpoint to fetch all inconsistent Metadata objects in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"get_inconsistent_metadata\",\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Response for GraphQL Query Testing Remote Relationship\nDESCRIPTION: This snippet shows the expected JSON response when executing the GraphQL query to verify the results of the remote database relationship. It includes the ids and author_ids of the articles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"source_author\": [\n      {\n        \"articles\": [\n          {\n            \"id\": \"2\",\n            \"author_id\": \"1\",\n            \"title\": \"veniam\"\n          }\n        ]\n      },\n      {\n        \"articles\": [\n          {\n            \"id\": \"3\",\n            \"author_id\": \"2\",\n            \"title\": \"nostrud\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI Command\nDESCRIPTION: Command to apply metadata changes after modifying table configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/custom-field-names.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Audience in JSON\nDESCRIPTION: These JSON snippets demonstrate how to set the 'audience' field within JWT configuration. This field can be a single string or an array of strings representing valid audiences for the JWT. Ensuring accuracy in the 'audience' field is crucial for security against improper JWT acceptance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://......\",\n  \"audience\": \"myapp-1234\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jwk_url\": \"https://......\",\n  \"audience\": [\"myapp-1234\", \"myapp-6789\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure for replace_metadata API with Warnings\nDESCRIPTION: Sample JSON response structure showing how warnings will be included in successful API calls. Each warning includes a path to the problematic element and a descriptive message.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/warning-in-replace-metadata-API.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"success\",\n  \"warnings\": [\n    {\n      \"path\": \"$.args.metadata.sources[0]\",\n      \"message\": \"the SQL triggers cannot be cleaned up while removing the source \\\"default\\\"\"\n    },\n    {\n      \"path\": \"$.args.metadata.sources[0].table[1].event_triggers[0]\",\n      \"message\": \"the event trigger with name \\\"system.send_email\\\" may not work as expected, hasura suggests to use only alphanumeric, underscore and hyphens in an event trigger name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Operation Request Structure\nDESCRIPTION: Detailed JSON structure of the insert mutation request showing schema definitions, table information, and operation specifications. Includes field definitions, primary keys, and returning field configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relationships\": [],\n  \"insert_schema\": [\n    {\n      \"table\": [\"Artist\"],\n      \"primary_key\": [\"ArtistId\"],\n      \"fields\": {\n        \"ArtistId\": {\n          \"type\": \"column\",\n          \"column\": \"ArtistId\",\n          \"column_type\": \"number\",\n          \"nullable\": false\n        },\n        \"Name\": {\n          \"type\": \"column\",\n          \"column\": \"Name\",\n          \"column_type\": \"string\",\n          \"nullable\": false\n        }\n      }\n    }\n  ],\n  \"operations\": [\n    {\n      \"type\": \"insert\",\n      \"table\": [\"Artist\"],\n      \"rows\": [\n        [\n          {\n            \"ArtistId\": 300,\n            \"Name\": \"Taylor Swift\"\n          },\n          {\n            \"ArtistId\": 301,\n            \"Name\": \"Phil Collins\"\n          }\n        ]\n      ],\n      \"post_insert_check\": {\n        \"type\": \"and\",\n        \"expressions\": []\n      },\n      \"returning_fields\": {\n        \"ArtistId\": {\n          \"type\": \"column\",\n          \"column\": \"ArtistId\",\n          \"column_type\": \"number\"\n        },\n        \"Name\": {\n          \"type\": \"column\",\n          \"column\": \"Name\",\n          \"column_type\": \"string\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Log Filtering in YAML\nDESCRIPTION: YAML configuration for filtering specific log records using the OpenTelemetry Collector's Filter Processor. Demonstrates how to filter logs based on query types and operation names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/best-practices.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    logs:\n      log_record:\n        - 'attributes[\"type\"] == \"query-log\" and IsMatch(body[\"query\"][\"operationName\"], \"UnknownQuery\")'\n        - 'attributes[\"type\"] == \"http-log\" and IsMatch(body[\"operation\"][\"query\"][\"operationName\"], \"UnknownQuery\")'\n```\n\n----------------------------------------\n\nTITLE: Event Trigger Template for ETL in Python\nDESCRIPTION: Template for handling an event trigger to perform Extract, Transform, Load (ETL) operations using GraphQL in Python.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# POST /handle_event\n\nGRAPHQL_ENDPOINT = \"\"\nADMIN_SECRET = \"\"\n\nimport json\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\n\ndef handle_insert(row, client):\n    id = int(row['id'])\n    name = str(row['name'])\n    description = str(row['description'])\n    # In reality you would follow the URL from row['url']\n    content = \"dummy content\"\n    gql_query = gql(\"\"\"\n            mutation insertItem($id: int!, $name: text!, $description: text!) {\n                insert_Product_one(object: { product_id: $id, name: $name, description: $description }) {\n                    id\n                }\n            }\n        \"\"\")\n    print(client.execute(gql_query, variable_values={\n        'id': id, 'name': name, 'description': description}))\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Resource Group for Hasura GraphQL Engine Deployment\nDESCRIPTION: This command deletes the entire resource group associated with the Hasura GraphQL Engine deployment on Azure. It's used for cleaning up all resources when tearing down the deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz group delete --resource-group hasura\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Environment Variables in Kubernetes YAML\nDESCRIPTION: YAML snippet showing how to set important environment variables for Hasura, including database URLs, Redis URLs, and admin secret in the Kubernetes deployment file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nenv:\n  - name: HASURA_GRAPHQL_METADATA_DATABASE_URL\n    value: postgres://<username>:<password>@hostname:<port>/<dbname>\n  - name: HASURA_GRAPHQL_REDIS_URL\n    value: redis://redis:6379\n  - name: HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\n    value: redis://redis:6379\n  - name: HASURA_GRAPHQL_ADMIN_SECRET\n    value: adminsecret\n```\n\n----------------------------------------\n\nTITLE: Enterprise Stack Values Configuration\nDESCRIPTION: YAML configuration for enabling Redis and setting up enterprise features in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  redis:\n    enabled: true\n    password: redispassword\n\ngraphql-engine:\n  secret:\n    adminSecret: 'hasura'\n    eeLicenseKey: '<set your license key here>'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection URL Format for Railway Database\nDESCRIPTION: The format for the PostgreSQL connection URL that needs to be provided to Hasura to connect to a Railway Postgres database. This URL contains the user credentials, host server, port, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/railway.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<host-server>:<port>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation for Data Sources Documentation\nDESCRIPTION: YAML frontmatter configuration that defines the sidebar position, label, and class name for the Data Sources documentation section in Hasura's documentation system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_data_sources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 20\nsidebar_label: 'Data Sources'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Successful Drop CLI Output\nDESCRIPTION: This snippet shows the output of the `hasura metadata inconsistency drop` command when it has successfully removed all inconsistent objects from the metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"INFO all inconsistent objects removed from metadata\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObjRelUsingChoice Schema in Hasura\nDESCRIPTION: Describes the options for object relationship definitions, including same table and remote table configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_19\n\nLANGUAGE: haskell\nCODE:\n```\nSameTable | RemoteTable\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using DateTime Comparison Operator\nDESCRIPTION: Example GraphQL query demonstrating the use of the custom in_year comparison operator on a DateTime field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Employee(where: {BirthDate: {in_year: 1962}}) {\n    Name\n    BirthDate\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run ngrok to tunnel webhook endpoint\nDESCRIPTION: This command uses ngrok to create a secure tunnel from a local port (4000) to a public URL. This allows Hasura Cloud to communicate with a webhook endpoint running on your local machine. Replace 4000 with the port your webhook is running on.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/user-reengagement-email.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Accessing Hasura Console URL Format\nDESCRIPTION: The URL format for accessing the Hasura console after successful deployment on Render platform. The URL uses the custom slug assigned during deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/render-one-click.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-hasura-slug>.onrender.com/\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura with MongoDB\nDESCRIPTION: Commands to download the Docker Compose manifest required to deploy Hasura with MongoDB. This manifest sets up Hasura GraphQL Engine, Postgres for metadata, Redis for caching, and MongoDB.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mongodb/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mongodb/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Grouping by multiple scalar fields with complex ordering in GraphQL\nDESCRIPTION: This query groups invoices by BillingAddress.Country and BillingAddress.State, with a complex ordering strategy that combines group key values and aggregate results to determine the sort order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    # Group by BillingAddress.Country, then BillingAddress.State\n    grouping_keys: [\n      { BillingAddress: { _scalar_field: Country } }\n      { BillingAddress: { _scalar_field: State } }\n    ]\n    # Sort groups first by BillingAddress.Country asc, then by the number of states per country descending, then by BillingState descending\n    order_by: [\n      { group_key: { BillingAddress: { Country: Asc } } }\n      { group_aggregate: { _count: Desc } }\n      { group_key: { BillingAddress: { State: Desc } } }\n    ]\n  ) {\n    group_key {\n      # The value of the (billing country, billing state) tuple per group\n      BillingAddress {\n        Country\n        State\n      }\n    }\n    group_aggregate {\n      _count # The number of invoices per BillingAddress.State per BillingAddress.Country\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Hasura\nDESCRIPTION: This YAML example demonstrates how to define environment variables consistently in different environments (development and production) for a Hasura project, ensuring reliable database connections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migration-best-practices.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .env file for development\nDATABASE_URL=postgres://user:password@localhost:5432/dev_db\n\n# .env file for production\nDATABASE_URL=postgres://user:password@localhost:5432/prod_db\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Federation via Hasura CLI Configuration\nDESCRIPTION: YAML configuration snippet for enabling Apollo Federation on a specific table using the Hasura CLI. This is added to the table's metadata file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/data-federation/apollo-federation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: <table_name>\n  schema: <schema_name>\napollo_federation_config:\n  enable: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Settings in YAML\nDESCRIPTION: Example configuration for metrics_config.yaml that enables query-variable analysis and disables response body analysis. This file controls which GraphQL entities are observable via metrics for debugging and analytics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nanalyze_query_variables: true\nanalyze_response_body: false\n```\n\n----------------------------------------\n\nTITLE: Creating Articles Table using Hasura Metadata API - MS SQL Server\nDESCRIPTION: This HTTP snippet describes how to create an articles table using the Hasura Metadata API by sending a POST request to the respective endpoint with the necessary SQL command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db-name>\",\n    \"sql\": \"CREATE TABLE articles(id int NOT NULL, title text NOT NULL, content text NOT NULL, rating int NOT NULL, author_id int NOT NULL, PRIMARY KEY (id));\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Gateway Check Command Options\nDESCRIPTION: Available command line options for the gateway check command, including gateway URL, configuration file path, admin secret, and help flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --gateway-url string                  url of the gateway instance\n    --gateway-configuration-file string   path to the current Hasura's configuration\n    --admin-secret string                 admin secret of the gateway\n-h, --help                                help for check\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex Static Clients for Hasura Integration\nDESCRIPTION: YAML configuration for Dex static clients that defines how Hasura connects to Dex. Includes client ID, redirect URIs for Hasura Console's OAuth callback, and visibility settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Command Structure\nDESCRIPTION: The basic syntax for creating a new migration using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate create [migration-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress for HTTPS Access\nDESCRIPTION: Create an Ingress resource to enable HTTPS access to Hasura using the Managed Certificate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: basic-ingress\n  annotations:\n    networking.gke.io/managed-certificates: 'hasura-cert'\nspec:\n  rules:\n    - host: example.com\n      http:\n        paths:\n          - backend:\n              serviceName: hasura\n              servicePort: 80\n```\n\n----------------------------------------\n\nTITLE: Defining Order By Enum in GraphQL\nDESCRIPTION: Defines a simple enum for specifying ascending or descending order direction used across all order_by input types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nenum order_by {\n  Asc\n  Desc\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Changes for Upsert Support\nDESCRIPTION: Diff showing the schema changes required to support upsert operations in the GraphQL API. Adds if_matched parameter to insert mutations with configuration options for match columns and update behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-upsert-mutations.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ntype mutation_root {\n  insert_author(\n    objects: [author_insert_input!]!\n+   if_matched: author_if_matched\n  ): author_mutation_response\n\n  insert_author_one(\n    object: author_insert_input!\n+   if_matched: author_if_matched\n  ): author\n}\n\n+input author_if_matched {\n+  match_columns: author_match_columns!\n+  update_columns: [author_update_column!]! = []\n+  where: author_bool_exp\n+}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Field Comparison in GraphQL\nDESCRIPTION: Example demonstrating how to simplify multiple conditions on the same field into a single condition block.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nrating: {\n  _gt: 1,\n  _lt: 5\n}\n```\n\n----------------------------------------\n\nTITLE: Control Flow Examples in Kriti\nDESCRIPTION: Examples of conditional logic and loops in Kriti templates\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/kriti-templating.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"if\" : {{ if something }} 1 {{ else }} 2 {{ end }},\n  \"loop\": {{ range i, x := [1,2,3] }} [\"item\", {{ i }}, {{ x }}] {{ end }}\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Status Output Example\nDESCRIPTION: Example output of the migration status command showing version numbers, migration names, and their presence status in both the local filesystem and the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ hasura migrate status --database-name default\nVERSION        NAME                           SOURCE STATUS  DATABASE STATUS\n1654696186008  init                           Present        Present\n1654696713921  create_table_public_address    Present        Present\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: Command to apply metadata changes, including Apollo Federation configuration, using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/data-federation/apollo-federation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Validating Insert Mutation with GraphQL\nDESCRIPTION: Example GraphQL mutation for inserting a user with email and name parameters that will be validated by a webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertUser($email:String, $name: String) {\n  insert_users(objects: [{email: $email, name: $name}]) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All API Limits with Hasura Metadata API\nDESCRIPTION: This HTTP POST request removes all previously set API limits using the remove_api_limits endpoint. It takes no arguments and clears all configured limits.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/api-limits.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"remove_api_limits\"\n    \"args\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Dex Configuration for Auth0 SAML Integration\nDESCRIPTION: Full YAML configuration file for Dex including issuer URL, storage options, HTTP endpoint settings, OAuth2 client configuration, and SAML connector setup for Auth0 integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# The base path of dex and the external name of the OpenID Connect service.\n# This is the canonical URL that all clients MUST use to refer to dex. If a\n# path is provided, dex's HTTP service will listen at a non-root URL.\n# Public URL that dex is available at\nissuer: http://localhost:5556/dex\n\n# The storage configuration determines where dex stores its state. Supported\n# options include SQL flavors and Kubernetes third party resources.\n#\n# See the documentation (https://dexidp.io/docs/storage/) for further information.\nstorage:\n  type: sqlite3\n  config:\n    file: /var/dex/dex.db\n\n# Configuration for the HTTP endpoints.\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n  # Uncomment for HTTPS options.\n  # https: 127.0.0.1:5554\n  # tlsCert: /etc/dex/tls.crt\n  # tlsKey: /etc/dex/tls.key\n\n# Uncomment this block to enable configuration for the expiration time durations.\n# Is possible to specify units using only s, m and h suffixes.\n# expiry:\n#   deviceRequests: \"5m\"\n#   signingKeys: \"6h\"\n#   idTokens: \"24h\"\n#   refreshTokens:\n#     reuseInterval: \"3s\"\n#     validIfNotUsedFor: \"2160h\" # 90 days\n#     absoluteLifetime: \"3960h\" # 165 days\n\n# Options for controlling the logger.\n# logger:\n#   level: \"debug\"\n#   format: \"text\" # can also be \"json\"\n\noauth2:\n  responseTypes: ['code'] # also allowed are \"token\" and \"id_token\"\n  skipApprovalScreen: true\n#\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n\nconnectors:\n  - type: saml\n    id: saml-auth0\n    name: Auth0 SAML\n    config:\n      ssoURL: https://some-auth0-app.us.auth0.com/samlp/xxxxxxxx\n      ca: /etc/dex/saml-ca.pem\n      # insecureSkipSignatureValidation: true\n      redirectURI: http://localhost:5556/dex/callback\n      usernameAttr: http://schemas.auth0.com/name\n      emailAttr: http://schemas.auth0.com/email\n      groupsAttr: http://schemas.auth0.com/roles\n      entityIssuer: urn:some-auth0-app.us.auth0.com\n```\n\n----------------------------------------\n\nTITLE: Ordering by Computed Field in GraphQL Query\nDESCRIPTION: This GraphQL query demonstrates how to order authors by the 'full_name' computed field in descending order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/computed-fields-filters-perms-orderby.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(order_by: {full_name: desc}){\n    id\n    first_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Permission Comment using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to set or update the comment on a permission using the Hasura Metadata API.  The API endpoint is `/v1/metadata` and the `pg_set_permission_comment` type is used. Required parameters include `table` name, `role` name, `type` of permission (e.g., \"update\"), and the `comment` to set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer <auth-token> # optional if cookie is set\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_set_permission_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"role\": \"user\",\n        \"type\" : \"update\",\n        \"comment\" : \"can only modify their own rows\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Ambiguous Schema Relations\nDESCRIPTION: Example GraphQL query demonstrating ambiguous schema relationships through unions and interfaces, where different types share similar field names but map to different remote relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/remote-joins-execution.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  node(id: $some_id) {\n    ... on Article {\n      # foo is a field, returns data of type `t`\n      foo {\n         # r1 is a REMOTE relationship, returns data of type `u`\n         bar: r1 {\n         }\n      }\n    }\n    ... on Author {\n      id\n      # foo is a field, returns data of type `t`\n      foo {\n         # r2 is a REMOTE relationship, returns data of type `u`\n         bar: r2 {\n         }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Secret in Hasura GraphQL Engine\nDESCRIPTION: Demonstrates how to set an admin secret to protect the API from unauthorized access. The secret can be set either as an environment variable or as a command-line flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# set env var\nHASURA_GRAPHQL_ADMIN_SECRET=averylongpasswordstring\n\n# or use the flag\ngraphql-engine --database-url=<database-url> serve --admin-secret=averylongpasswordstring\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Basic Command\nDESCRIPTION: The basic command syntax for generating code for Hasura Actions. Can be used with an optional action name parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_codegen.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions codegen [action-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Data and Schema in Python\nDESCRIPTION: Retrieves schema information and all data from a specified table in PostgreSQL database. Shapes the schema data for easier processing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# using the argument we'll pass when we run the script, we'll identify the table we want to vectorize\ntable = sys.argv[1]\n\n# Create a cursor\ncur = conn.cursor(cursor_factory=extras.RealDictCursor)\n\n\n# function to get the schema of a table as a dictionary with column names as keys and data types as values\ndef get_schema(table):\n    cur.execute(\n        f\"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{table}'\")\n    schema = cur.fetchall()\n    return schema\n\n# get the schema of the table and shape it\nschema = get_schema(table)\nschema = {row['column_name']: row['data_type'] for row in schema}\nschema[f'{table}_id'] = schema.pop('id')\n\n# function to get the data from a table\ncur.execute(f\"SELECT * FROM {table}\")\ndata = cur.fetchall()\n```\n\n----------------------------------------\n\nTITLE: Getting Docker Compose File - Bash\nDESCRIPTION: This command fetches the docker-compose.yaml file necessary for running the Hasura GraphQL Engine and a Postgres database for local development. It ensures the project has the required setup to operate correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/docker-compose/docker-compose.yaml > docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Examples\nDESCRIPTION: Comprehensive examples showing different ways to use the migrate apply command, including applying all migrations, using admin secrets, targeting specific versions, and handling rollbacks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply all migrations\nhasura migrate apply\n\n# Use with admin secret:\nhasura migrate apply --admin-secret \"<admin-secret>\"\n\n# Apply migrations on another Hasura instance:\nhasura migrate apply --endpoint \"<endpoint>\"\n\n# Mark migration as applied on the server and skip execution:\nhasura migrate apply --skip-execution --version \"<version>\"\n\n# Mark migrations as applied on the server and skip execution:\nhasura migrate apply --skip-execution --up all\n\n# Mark migrations as rollbacked on the server and skip execution:\nhasura migrate apply --skip-execution --down all\n\n# Apply a particular migration version only:\nhasura migrate apply --version \"<version>\"\n\n# Apply last 2 down migrations:\nhasura migrate apply --down 2\n\n# Apply only 2 up migrations:\nhasura migrate apply --up 2\n\n# Apply only a particular version\nhasura migrate apply --type up --version \"<version>\"\n\n# Apply all up migrations upto version 125, last applied is 100\nhasura migrate apply --goto 125\n\n# Apply all down migrations upto version 125, last applied is 150\nhasura migrate apply --goto 125\n\n# Rollback a particular version:\nhasura migrate apply --type down --version \"<version>\"\n\n# Rollback all migrations:\nhasura migrate apply --down all\n```\n\n----------------------------------------\n\nTITLE: Querying Artist Data in GraphQL for Hasura GraphQL Engine\nDESCRIPTION: This GraphQL query fetches all artist data, specifically the ArtistId and Name fields from the Artist table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist {\n    ArtistId\n    Name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delete Permission for MSSQL Table\nDESCRIPTION: Creates a delete permission that restricts which rows can be deleted based on user role and row-level filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"filter\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Metadata using Hasura CLI\nDESCRIPTION: Command to show differences between server metadata and local project metadata. This is useful for troubleshooting or reviewing changes before applying them.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata diff\n```\n\n----------------------------------------\n\nTITLE: Constructing MS SQL Database Connection URL for Hasura\nDESCRIPTION: The connection string format required to connect Hasura to an MS SQL Server database on Azure. This string includes the driver specification, server address, database name, and authentication credentials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/mssql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDriver={ODBC Driver 17 for SQL Server};Server=myServerAddress;Database=myDataBase;UID=myUsername;PWD=myPassword;\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Versioned With Definition Enum\nDESCRIPTION: Example JSON object that would be parsed into V2(VersionTwo) using the versioned with definition approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v2\",\n  \"definition\": {\n    \"fieldTwo\": \"some_value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands for Hasura CLI\nDESCRIPTION: Details the options inherited from parent commands, including environment file configuration, logging level settings, output formatting, and project directory specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Scalar Type in YAML\nDESCRIPTION: Example showing how to declare a DateTime scalar type with custom comparison operators, aggregate functions, and update column operators in the agent capabilities configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncapabilities:\n  scalar_types:\n    DateTime:\n      comparison_operators:\n        in_year: Number\n      aggregate_functions:\n        max: DateTime\n        min: DateTime\n      update_column_operators:\n        set_year:\n          argument_type: Number\n      graphql_type: String\n```\n\n----------------------------------------\n\nTITLE: Programmatic Metadata Manipulation Example\nDESCRIPTION: Complete example showing how to load, modify, and diff metadata files including tables and actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Convert } from \"./customMetadataConverter\"\nimport {\n  TableEntry,\n  Action,\n  CustomTypes,\n  HasuraMetadataV2,\n} from \"../generated/HasuraMetadataV2\"\n\n// Read \"tables.yaml\" file as text from filesystem\nconst tablesMetadataFile = fs.readFileSync(\"./metadata/tables.yaml\", \"utf8\")\n// Convert it to JSON object with type annotation using loadYAML utility\nconst tablesMetadata: TableEntry[] = Convert.loadYAML(tablesMetadataFile)\ntablesMetadata.forEach(console.log)\n\n// Read \"actions.yaml\" file as text from filesystem\nconst actionMetadataFile = fs.readFileSync(\"./metadata/actions.yaml\", \"utf8\")\n// Convert it to JSON object with type annotation using loadYAML utility\nconst actionMetadata: {\n  actions: Action[]\n  custom_types: CustomTypes\n} = Convert.loadYAML(actionMetadataFile)\nactionMetadata.actions.forEach(console.log)\nconsole.log(actionMetadata.custom_types)\n\n// Make a new table object\nconst newTable: TableEntry = {\n  table: { schema: \"public\", name: \"user\" },\n  select_permissions: [\n    {\n      role: \"user\",\n      permission: {\n        limit: 100,\n        allow_aggregations: false,\n        columns: [\"id\", \"name\", \"etc\"],\n        computed_fields: [\"my_computed_field\"],\n        filter: {\n          id: { _eq: \"X-Hasura-User-ID\" },\n        },\n      },\n    },\n  ],\n}\n\n// Clone the tables for comparison after changes using diff()\nconst originalTablesMetadata = Convert.clone(tablesMetadata)\n// Add the new table to tables metadata\ntablesMetadata.push(newTable)\n\n// Generate a structural and text diff from the changes between original and now\nconst tableDiff = Convert.diff(originalTablesMetadata, tablesMetadata)\n// Write the diffs to /diffs folder, will output \"tables.json\" and \"tables.diff\"\nConvert.writeDiff({ folder: \"diffs\", file: \"tables\", diffs: tableDiff })\n// Ouput the updated \"tables.yaml\" to filesystem\nfs.writeFileSync(\n  \"./tables-updated.yaml\",\n  Convert.metadataToYAML(tablesMetadata)\n)\n\n// Read \"metadata.json\"\nconst metadataFile = fs.readFileSync(\"./metadata.json\", \"utf-8\")\n// Convert.to<typeName> does runtime validation of the type\nconst allMetadata: HasuraMetadataV2 = Convert.toHasuraMetadataV2(metadataFile)\nconsole.log(allMetadata)\n\n// Clone, add table\nconst beforeMetadataChanges = Convert.clone(allMetadata)\nallMetadata.tables.push(newTable)\n\n// Diff, write diff\nconst metadataDiff = Convert.diff(beforeMetadataChanges, allMetadata)\nConvert.writeDiff({ folder: \"diffs\", file: \"metadata\", diffs: metadataDiff })\n```\n\n----------------------------------------\n\nTITLE: Checking Cloud SQL Proxy Logs\nDESCRIPTION: View the logs of the Cloud SQL Proxy container for troubleshooting database connection issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs deployment/hasura -c cloudsql-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring HASURA_GRAPHQL_SSO_PROVIDERS Environment Variable for Google Workspace SSO\nDESCRIPTION: JSON configuration for the HASURA_GRAPHQL_SSO_PROVIDERS environment variable to enable Google Workspace SSO. It includes settings for client ID, admin roles, authorization URLs, JWT secret, and claims mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/google-workspace.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"dex-login\",\n    \"admin_roles\": [\"hasura-admin@company.com\"],\n    \"name\": \"Google Workspace Login\",\n    \"authorization_url\": \"http://127.0.0.1:5556/dex/auth\",\n    \"request_token_url\": \"http://127.0.0.1:5556/dex/token\",\n    \"scope\": \"openid offline_access groups\",\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http://127.0.0.1:5556/dex/keys\",\n      \"issuer\": \"http://127.0.0.1:5556:5556/dex\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": {\n          \"path\": \"$.groups\"\n        },\n        \"x-hasura-default-role\": {\n          \"path\": \"$.groups[0]\"\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Event Invocation Logs - HTTP\nDESCRIPTION: This HTTP POST request is used to fetch the invocation logs for a specified event trigger by providing necessary arguments such as trigger name and source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_get_event_invocation_logs\",\n  \"args\": {\n    \"name\": \"sample_trigger\",\n    \"source\": \"default\",\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex Issuer URL for SAML SSO\nDESCRIPTION: The base URL configuration for Dex that clients must use to reference the service. This is the canonical URL for the Dex OpenID Connect service that's publicly accessible.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://dex-domain:5556/dex\n```\n\n----------------------------------------\n\nTITLE: Structuring Database Connection URL for Hasura with EnterpriseDB\nDESCRIPTION: This snippet shows the structure of the database connection URL required to connect Hasura to an EnterpriseDB (BigAnimal) Postgres database. It includes placeholders for user name, password, host server, port, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/enterprisedb.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<host-server>:<port>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Markdown Usage Summary Documentation\nDESCRIPTION: React-based markdown documentation describing Hasura Cloud usage analysis features including usage summaries and operation inspection capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud-monitoring/usage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 4\nsidebar_label: Usage summaries\ndescription: Hasura Cloud usage analysis\ntitle: 'Cloud: Usage summaries'\nkeywords:\n  - hasura\n  - docs\n  - cloud\n  - reliability\n  - usage\n---\n\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n\n# Usage Summaries\n\n<ProductBadge pro ee />\n\n## Introduction\n\nLearn about usage with aggregate summaries and filtering tools:\n\n<Thumbnail src=\"/img/observability/pro-tab-usage.png\" alt=\"Hasura Cloud Console usage tab\" />\n\nDrill into an operation via its magnifying-glass icon in the 'Query List' table. You'll be taken to a list of similar\noperations, and can choose one to inspect for content, metadata, and error generated:\n\n<Thumbnail alt=\"Hasura Cloud Console inspect an operation\" src=\"/img/observability/pro-tab-operations-inspect.png\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Relationship via HTTP POST\nDESCRIPTION: Creates a new remote relationship between a table and remote schema. Requires admin role and specifies the relationship name, table, Hasura fields, remote schema and remote field configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"create_remote_relationship\",\n   \"args\":{\n      \"name\": \"sample_remote_relationship\",\n      \"table\": \"users\",\n      \"hasura_fields\": [\"id\"],\n      \"remote_schema\": \"my-remote-schema\",\n      \"remote_field\": {\n        \"messages\": {\n           \"arguments\": {\n              \"id\":\"$id\"\n           }\n        }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QualifiedTable Structure in JSON\nDESCRIPTION: Specifies the structure for a qualified table reference with name and schema properties. Used for precisely identifying tables in database schemas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": String,\n    \"schema\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Testing SQL Server AG Connections\nDESCRIPTION: Commands to test connections to both primary and secondary replicas using sqlcmd utility. Demonstrates how to connect with and without ReadOnly ApplicationIntent.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nsqlcmd -S 172.16.238.21,1434 -U SA  -d agtestdb -P \"Password1\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nsqlcmd -S 172.16.238.21,1434 -U SA  -d agtestdb -P \"Password1\" -K ReadOnly\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the migrate create command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables with Warning Control\nDESCRIPTION: API endpoint for tracking multiple tables with explicit warning control using allow_warnings flag set to false for atomic operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_track_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"author\"\n        }\n      },\n      {\n        \"source\": \"default\",\n        \"table\": {\n          \"dataset\": \"hasura\",\n          \"name\": \"book\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Sorting and Pagination\nDESCRIPTION: Examples of sorting and paginating resource collections\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /<modelname>?sort=field1,-field2\n\nGET /articles?sort=-created,title\n\nGET /<modelname>?page[limit]=10&page[offset]=0\n\nGET /articles?page[limit]=10&page[offset]=0\n```\n\n----------------------------------------\n\nTITLE: Deleting a Hasura Cloud Tenant using GraphQL\nDESCRIPTION: This mutation deletes a Hasura Cloud tenant with the specified tenant ID and returns the deletion status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation deleteTenant {\n  deleteTenant(tenantId: \"7a79cf94-0e53-4520-a560-1b02bf522f08\") {\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migration Command in Hasura (Bash)\nDESCRIPTION: This bash command is used to apply the migration that updates the table structure in Hasura after modifying the SQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok for Local Webhook\nDESCRIPTION: This bash command starts ngrok to expose a local server for testing webhook functionality by providing a public URL. It enables communication between the local environment and Hasura Cloud.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/product-review.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema Customization in Hasura GraphQL Engine\nDESCRIPTION: This code snippet illustrates the structure for customizing a remote schema in Hasura GraphQL Engine, including namespace, type names, and field names customization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root_fields_namespace\": \"String\",\n  \"type_names\": {\n    \"prefix\": \"String\",\n    \"suffix\": \"String\",\n    \"mapping\": {\n        \"String\": \"String\"\n        }\n    },\n  \"field_names\": [\n      {\n      \"parent_type\": \"String\",\n      \"prefix\": \"String\",\n      \"suffix\": \"String\",\n      \"mapping\": {\n          \"String\": \"String\"\n          }\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Request JSON for Cross-Table Filtering\nDESCRIPTION: This JSON represents the query request generated for the GraphQL query, including the cross-table filtering logic. It demonstrates how the Customer table is joined with the Employee table to compare the Country column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Customer\"]\n  },\n  \"relationships\": [\n    {\n      \"type\": \"table\",\n      \"source_table\": [\"Customer\"],\n      \"relationships\": {\n        \"SupportRep\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Employee\"]\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"SupportRepId\": \"EmployeeId\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Country\": {\n        \"type\": \"column\",\n        \"column\": \"Country\",\n        \"column_type\": \"string\"\n      },\n      \"CustomerId\": {\n        \"type\": \"column\",\n        \"column\": \"CustomerId\",\n        \"column_type\": \"number\"\n      },\n      \"FirstName\": {\n        \"type\": \"column\",\n        \"column\": \"FirstName\",\n        \"column_type\": \"string\"\n      },\n      \"LastName\": {\n        \"type\": \"column\",\n        \"column\": \"LastName\",\n        \"column_type\": \"string\"\n      },\n      \"SupportRepId\": {\n        \"type\": \"column\",\n        \"column\": \"SupportRepId\",\n        \"column_type\": \"number\"\n      }\n    },\n    \"where\": {\n      \"type\": \"and\",\n      \"expressions\": [\n        {\n          \"type\": \"exists\",\n          \"in_table\": {\n            \"type\": \"related\",\n            \"relationship\": \"SupportRep\"\n          },\n          \"where\": {\n            \"type\": \"binary_op\",\n            \"operator\": \"equal\",\n            \"column\": {\n              \"name\": \"Country\",\n              \"column_type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"column\",\n              \"column\": {\n                \"path\": [\"$\"],\n                \"name\": \"Country\",\n                \"column_type\": \"string\"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Expression Configuration in YAML\nDESCRIPTION: YAML configuration for aggregate expressions showing support for different scalar types in count operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: String_aggregate_exp\n  operand:\n    scalar:\n      aggregatedType: String\n      aggregationFunctions:\n        - name: _min\n          returnType: String\n        - name: _max\n          returnType: String\n      dataConnectorAggregationFunctionMapping:\n        - dataConnectorName: custom\n          dataConnectorScalarType: String\n          functionMapping:\n            _min:\n              name: min\n            _max:\n              name: max\n  count:\n    enable: true\n    returnType: Int64\n  countDistinct:\n    enable: true\n    returnType: Int64\n  description: Aggregate expression for the String type\n  graphql:\n    selectTypeName: String_aggregate_exp\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query with Arguments\nDESCRIPTION: GraphQL query demonstrating how to use the native query with max_length argument\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article_with_excerpt(args: { max_length: 20 }) {\n    id\n    title\n    date\n    excerpt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Container Definition with Hasura Image Version\nDESCRIPTION: Sample JSON snippet from the ECS task definition file showing the container image specification. This is the section that needs to be updated when upgrading to a newer version of Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n\"containerDefinitions\": [\n    {\n        \"image\": \"hasura/graphql-engine:v2.0.1\",\n    ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating 'profile' Table in Hasura\nDESCRIPTION: This SQL snippet defines the structure of the 'profile' table with columns for id, name, address, latitude, and longitude. The id is set to auto-increment, and lat/lng are nullable numeric fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: profile\n\nColumns:\n\nid: Integer auto-increment\nname: Text\naddress: Text\nlat: Numeric, Nullable\nlng: Numeric, Nullable\n```\n\n----------------------------------------\n\nTITLE: Downgrading Hasura v2 to v1 with Docker\nDESCRIPTION: This code snippet demonstrates how to downgrade from Hasura v2 to v1 using Docker. The process involves reverting the Docker image version and executing a downgrade command to revert the Metadata catalogue changes. Requires a PostgreSQL database URL set in environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/resources/upgrade-hasura-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e HASURA_METADATA_DATABASE_URL=$POSTGRES_URL hasura/graphql-engine:v2.0.0 graphql-engine downgrade --to-v1.3.3\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata (local)\nDESCRIPTION: This command exports the Hasura metadata from the local setup. The resulting YAML files are stored in the `metadata` directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata export\"\n```\n\n----------------------------------------\n\nTITLE: Adding Column with Default Value (Not Recommended)\nDESCRIPTION: Shows how to add a new column with a default value to an existing table using a single statement. This approach is not recommended as it can cause locking issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/migration-guidelines.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE <table>\nADD COLUMN col1 INT SET DEFAULT 1 NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Configure Secondary Nodes for Secure Communication\nDESCRIPTION: Runs a series of SQL commands to configure secondary nodes with the necessary logins, users, and master keys, and installs the transferred certificates for secure data mirroring.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE LOGIN dbm_login WITH PASSWORD = 'Password1';\nCREATE USER dbm_user FOR LOGIN dbm_login;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Password1';\n-- ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = 'Password1';\nGO\nCREATE CERTIFICATE dbm_certificate\n   AUTHORIZATION dbm_user\n   FROM FILE = '/tmp/dbm_certificate.cer'\n   WITH PRIVATE KEY (\n   FILE = '/tmp/dbm_certificate.pvk',\n   DECRYPTION BY PASSWORD = 'Password1'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Environment File with Hasura CLI\nDESCRIPTION: Example command showing how to use a custom environment file with the Hasura CLI. The --envfile flag allows specifying a custom environment file path, defaulting to .env if not specified.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/config-reference.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura console --envfile production.env\n```\n\n----------------------------------------\n\nTITLE: MSSQL Insert with Temporary Table for Mutation Response\nDESCRIPTION: This SQL snippet demonstrates how to use temporary tables in MSSQL to capture mutated rows and generate an appropriate response for GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mutations-mssql.md#2025-04-17_snippet_2\n\nLANGUAGE: mssql\nCODE:\n```\nINSERT INTO test (name, age) OUTPUT INSERTED.<column1>, INSERTED.<column2> INTO #temp_table values ('rakesh', 25)\n\nWITH some_alias AS (SELECT * FROM #temp_table)\nSELECT (SELECT * FROM  some_alias FOR JSON PATH, INCLUDE_NULL_VALUES)  AS [returning], count(*) AS [affected_rows] FROM some_alias FOR JSON PATH, WITHOUT_ARRAY_WRAPPER;\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Function for Computed Field in Postgres\nDESCRIPTION: This SQL function defines the 'full_name' computed field for the author table by concatenating first_name and last_name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/computed-fields-filters-perms-orderby.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.full_name(author_table author)\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\n  SELECT author_table.first_name || ' ' || author_table.last_name\n$function$\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Root Fields in Hasura Metadata with YAML\nDESCRIPTION: This YAML configuration is used to set custom root field names for a BigQuery table 'authors'. It maps the default select field to a new field 'authors_aggregate', which will be exposed in the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/custom-field-names.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\\n    dataset: hasura\\n    name: authors\\n  configuration:\\n    custom_root_fields:\\n      select: authors_aggregate\"\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query\nDESCRIPTION: A basic GraphQL query example for fetching products, which would use the HTTP link in Apollo Client.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetProducts {\n  products {\n    id\n    name\n    price\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML SSO Provider for Hasura with Dex\nDESCRIPTION: JSON configuration for setting up Dex as a SAML SSO provider in Hasura Enterprise Edition. This includes client ID, authorization URLs, scope, admin roles, and JWT secret configuration for Dex.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/azure-ad.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"example-app\",\n    \"name\": \"Dex SAML Login\",\n    \"authorization_url\": \"http://127.0.0.1:5556/dex/auth\",\n    \"request_token_url\": \"http://localhost:5556/dex/token\",\n    \"scope\": \"openid offline_access groups\",\n    \"admin_roles\": [\"admin\"],\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http://dex:5556/dex/keys\",\n      \"issuer\": \"http://localhost:5556/dex\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\n        \"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Expression for Scalar Types in YAML\nDESCRIPTION: This snippet defines an AggregateExpression for a String scalar type, specifying aggregation functions, their return types, and mappings to data connector functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_102\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: String_aggregate_exp # Unique only to AggregateExpressions\n  operand:\n    scalar:\n      aggregatedType: String\n      aggregationFunctions:\n        - name: _min # Name you want to give the function in OpenDD and GraphQL\n          returnType: String! # This is an OpenDD type\n          description: Returns the lexicographically least string\n          # The boolean expression to use to compare against the aggregated return value\n          # Omit to remove from aggregation predicates\n          booleanExpression: String_comparison_exp\n        - name: _max\n          returnType: String!\n          description: Returns the lexicographically most string\n          booleanExpression: String_comparison_exp\n        - name: _concat\n          arguments:\n            - name: separator\n              type: String!\n          graphql:\n            argsInputTypeName: String_concat_aggregate_args # `{ separator: \", \" }`\n            orderByArgsInputTypeName: String_concat_aggregate_order_by # `{ args: { separator: \", \" }, ordering: Asc }`\n            aggregatePredicateArgsInputTypeName: String_concat_aggregate_predicate_args # `{ args: { separator: \", \" }, comparison: { _eq: \"test\" } }`\n          returnType: String!\n          description: Concatenates all string together with a separator\n          booleanExpression: String_comparison_exp\n        - name: _concat_comma\n          # This doesn't need arguments, since all the arguments are preset in the\n          returnType: String!\n          description: Concatenates all strings together with a comma\n          booleanExpression: String_comparison_exp\n      dataConnectorAggregationFunctionMapping:\n        - dataConnectorName: pg_1\n          dataConnectorScalarType: text\n          functionMapping:\n            _min: # OpenDD function name\n              name: min # Data connector aggregation function name\n            _max:\n              name: max\n            _concat:\n              name: concat\n              argumentMapping:\n                # OpenDD -> NDC\n                separator: separator\n            _concat_comma:\n              name: count\n              argumentPresets:\n                - argument: separator\n                  value:\n                    literal: \",\"\n  # count and countDistinct are special cased because \"count\" doesn't evaluate to a scalar/object type\n  # but rather the \"nullability\" of a type\n  count:\n    enable: true\n    description: Counts all non-null Ints\n    booleanExpression: Int_comparison_exp\n  countDistinct:\n    enable: true\n    description: Counts all distinct non-null Ints\n    booleanExpression: Int_comparison_exp\n  graphql:\n    selectTypeName: String_aggregate_fields\n    orderByInputTypeName: String_aggregate_order_by\n    aggregatePredicateInputTypeName: String_array_aggregate_predicate_exp\n    aggregateBoolExpInputTypeName: String_aggregate_bool_exp\n    aggregateSelectInputTypeName: String_aggregate_select\n    aggregateSelectUnaryFunctionEnumTypeName: String_aggregate_select_unary\n```\n\n----------------------------------------\n\nTITLE: Implementing Parser Type in Haskell\nDESCRIPTION: Defines the core Parser type that combines static type information with parsing functionality. Used as the foundation for GraphQL schema parsing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\ndata Parser n a = Parser\n  { parserType :: TypeInfo\n  , parserFunc :: ParserInput -> n a\n  }\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query for Computed Field Filtering\nDESCRIPTION: This SQL query is generated by Hasura to support filtering on the 'full_name' computed field in the GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/computed-fields-filters-perms-orderby.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  coalesce(json_agg(\"root\"), '[]') AS \"root\"\nFROM\n  (\n    SELECT\n      row_to_json(\n        (\n          SELECT\n            \"_2_e\"\n          FROM\n            (\n              SELECT\n                \"_1_root.base\".\"first_name\" AS \"first_name\",\n                \"_1_root.base\".\"last_name\" AS \"last_name\",\n                \"public\".\"user_full_name\"(\"_1_root.base\") AS \"full_name\"\n            ) AS \"_2_e\"\n        )\n      ) AS \"root\"\n    FROM\n      (\n        SELECT\n          *\n        FROM\n          \"public\".\"user\" AS \"_0_base\"\n        WHERE\n          (\n            (\"public\".\"user_full_name\"(\"_0_base\".*)) = (('Bob Morley') :: text)\n          )\n      ) AS \"_1_root.base\"\n  ) AS \"_3_root\"\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Hasura CLI on Linux/macOS\nDESCRIPTION: This command installs a specific version of the Hasura CLI by setting the VERSION environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | VERSION=v2.46.0 bash\n```\n\n----------------------------------------\n\nTITLE: Executing Batched Relay GraphQL Queries\nDESCRIPTION: This example demonstrates how to send two query operations in a single request using the Hasura Relay GraphQL API. It queries author connections with specific IDs and retrieves their details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery first {\n  author_connection(where: {id: {_eq: 1}}){\n    edges {\n      node {\n        id\n        name\n        username\n      }\n    }\n  }\n}\nquery second {\n  author_connection(where: {id: {_eq: 2}}){\n    edges {\n      node {\n        id\n        name\n        username\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model Permissions via HTTP API\nDESCRIPTION: This HTTP request creates select permissions for a logical model using Hasura API. It defines the model, role, and permissions including columns and row filter. Requires an admin role header for API access. Input parameters include JSON payload with model details and response is structured in JSON format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\" | [\n        \"column 1\",\n        \"column 2\",\n        ...\n      ],\n      \"filter\": <boolean expression>\n    }\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"article\",\n    \"role\": \"reader\",\n    \"permission\": {\n      \"columns\": [\n        \"id\",\n        \"title\",\n        \"contents\",\n        \"date\"\n      ],\n      \"filter\": {\n        \"is_published\": {\"_eq\": true}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret with Custom Claims Mapping in JSON\nDESCRIPTION: This snippet demonstrates how to set up a JWT secret configuration with custom claims mapping for role selection. It shows how to map roles from a non-standard JWT payload structure to Hasura's expected format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_id\": \"example-app\",\n  // ...\n  \"jwt_secret\": {\n    \"type\": \"RS256\",\n    \"jwk_url\": \"http://dex:5556/dex/keys\",\n    \"issuer\": \"http://localhost:5556/dex\",\n    \"claims_map\": {\n      \"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\n      \"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create webhook to send re-engagement emails\nDESCRIPTION: This JavaScript code defines an Express.js server that handles the webhook request to send re-engagement emails. It uses Nodemailer to send emails to inactive users fetched from the database via a GraphQL query. The webhook checks for a secret authorization header before processing the request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/user-reengagement-email.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\n\n// Create a Nodemailer transporter using Ethereal email service\n// Ideally, this configuration would be stored somewhere else\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create a testing account. ' + err.message);\n    return process.exit(1);\n  }\n\n  // If all goes as planned, here's the console telling us we're 👍\n  console.log('Credentials obtained, listening on the webhook...');\n\n  // Create a transporter object for nodemailer\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass,\n    },\n  });\n\n  // Function to fetch inactive users\n  async function getInactiveUsers(oneWeekAgo) {\n    const response = await fetch('<YOUR_CLOUD_PROJECT_ENDPOINT>', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-hasura-admin-secret': '<YOUR_ADMIN_SECRET>',\n      },\n      body: JSON.stringify({\n        query: `\n          query InactiveUsersQuery($oneWeekAgo: timestamptz!) {\n            users(where: {last_seen: {_lt: $oneWeekAgo}}) {\n              id\n              name\n              email\n            }\n          }\n        `,\n        variables: {\n          oneWeekAgo: oneWeekAgo.toISOString(),\n        },\n      }),\n    });\n\n    const { data } = await response.json();\n    return data.users;\n  }\n\n  // Function to send emails to inactive users\n  async function sendInactiveUserEmails(transporter, inactiveUsers) {\n    for (const user of inactiveUsers) {\n      // Create a message object\n      const message = {\n        from: 'SuperStore.com <sender@SuperStore.com>',\n        to: `${user.name} <${user.email}>`,\n        subject: `We miss you, ${user.name.split(' ')[0]}!`,\n        text: `Hi ${\n          user.name.split(' ')[0]\n        }, it's been over one week since you last logged in. Come back and do things!`,\n      };\n\n      // Send the message using the Nodemailer transporter\n      const info = await transporter.sendMail(message);\n\n      // Log the message info\n      console.log(`\\nMessage sent to ${user.name}: ${nodemailer.getTestMessageUrl(info)}`);\n    }\n  }\n\n  // Our route for the webhook\n  app.post('/user-reengagement-email', async (req, res) => {\n    // confirm the auth header is correct — ideally, you'd keep the secret in an environment variable\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      return res.status(401).json({\n        message: 'Unauthorized',\n      });\n    }\n\n    // Calculate the date one week ago\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n    // Fetch the list of users who haven't logged in for over one week\n    const inactiveUsers = await getInactiveUsers(oneWeekAgo);\n\n    // Send emails to inactive users\n    await sendInactiveUserEmails(transporter, inactiveUsers);\n\n    // Return a JSON response to the client\n    res.json({\n      message: 'Inactive user emails sent!',\n    });\n  });\n\n  // Start the server\n  app.listen(4000, () => {\n    console.log('Server started on port 4000');\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Querying with _st_intersects_geom_nband GraphQL Queries\nDESCRIPTION: _st_intersects_geom_nband filters raster values that intersect with a given geometry, potentially using a specific band number. Only the geometry input is mandatory, and results include the intersecting raster data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery getIntersectingValues ($point: geometry!){\n  dummy_rast(where: {rast: {_st_intersects_geom_nband: {geommin: $point}}}){\n    rid\n    rast\n  }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n \"data\": {\n   \"dummy_rast\": [\n     {\n       \"rid\": 1,\n       \"rast\": \"01000001009A9999999999E93F9A9999999999E9BF000000000000F0BF000000000000104000000000000000000000000000000000E610000005000500440000010101000101010101010101010101010101010001010100\"\n     },\n     {\n       \"rid\": 2,\n       \"rast\": \"0100000100166C8E335B91F13FE2385B00285EF6BF360EE40064EBFFBF8D033900D9FA134000000000000000000000000000000000E610000005000500440000000101010001010101010101010101010101000101010000\"\n     }\n   ]\n }\n}\n```\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n \"point\": {\n   \"type\": \"Point\",\n   \"coordinates\": [\n     1,\n     2\n   ],\n   \"crs\": {\n     \"type\": \"name\",\n     \"properties\": {\n       \"name\": \"urn:ogc:def:crs:EPSG::4326\"\n     }\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with Docker Compose\nDESCRIPTION: Command to start the Hasura GraphQL Engine and related containers using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Subscribing to User Notifications in GraphQL\nDESCRIPTION: Demonstrates how to use GraphQL subscriptions to get real-time updates for user notifications, filtering by user ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription UserNotificationSubscription {\n  notifications(where: { user_id: { _eq: 123 } }) {\n    id\n    created_at\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Top-Level Queries in Hasura GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch a list of authors and a list of articles in a single request. It limits the results to 2 items for each query and retrieves specific fields for each type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/multiple-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(limit: 2) {\n    id\n    name\n  }\n  articles(limit: 2) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table Schema\nDESCRIPTION: SQL command to create a profiles table with an auto-incrementing ID and name field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nprofiles (\n  id SERIAL PRIMARY KEY, -- serial -> auto-incrementing integer\n  name TEXT\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Container Instance for Hasura GraphQL Engine\nDESCRIPTION: This command creates a container instance for Hasura GraphQL Engine with specified environment variables and configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz container create --resource-group hasura \\\n   --name hasura-graphql-engine \\\n   --image hasura/graphql-engine \\\n   --dns-name-label \"<dns-name-label>\" \\\n   --ports 80 \\\n   --environment-variables \"HASURA_GRAPHQL_SERVER_PORT\"=\"80\" \"HASURA_GRAPHQL_ENABLE_CONSOLE\"=\"true\" \"HASURA_GRAPHQL_ADMIN_SECRET\"=\"<admin-secret>\"\\\n   --secure-environment-variables \"HASURA_METADATA_DATABASE_URL\"=\"<database-url>\" \"PG_DATABASE_URL\"=\"<database-url>\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud CLI\nDESCRIPTION: Command to log in to Google Cloud using the gcloud CLI tool.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: React JSX Action Links Component\nDESCRIPTION: Navigation card components displaying different types of Hasura Actions with descriptive text and links.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"overview-gallery\">\n  <VersionedLink to=\"/actions/rest-connectors/\">\n    <div className=\"card\">\n      <h3>REST Connectors</h3>\n      <p>Integrate existing REST APIs into your GraphQL schema with Actions by applying context and transforms.</p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/actions/open-api/\">\n    <div className=\"card\">\n      <h3>Import OpenAPI to Actions</h3>\n      <p>\n        Upload an API written in the OpenAPI spec, select the operation you want as a Hasura Action and it will be\n        imported for you.\n      </p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/actions/async-actions/\">\n    <div className=\"card\">\n      <h3>Async Actions</h3>\n      <p>Subscribe to the result of a long-running action in order to be updated as results are processed.</p>\n    </div>\n  </VersionedLink>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship with Aggregates in YAML\nDESCRIPTION: This YAML snippet shows how to define a relationship with aggregates. It specifies an 'aggregate' in the Relationship's target, which is only supported when the target is a Model. It also includes the 'aggregateFieldName' under the graphql section.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: invoices\n  sourceType: Customer\n  target:\n    model:\n      name: Invoice\n      relationshipType: Array\n      aggregate:\n        aggregateExpression: Invoice_aggregate_exp\n        description: Aggregate of the customer's invoices\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: customerId\n      target:\n        modelField:\n          - fieldName: customerId\n  graphql:\n    aggregateFieldName: invoicesAggregate\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Hasura with Dex Integration\nDESCRIPTION: A Docker Compose configuration that sets up a complete environment with Postgres, Hasura GraphQL Engine, and Dex for SSO integration. It includes environment variables for connecting Hasura to Dex as an OpenID Connect provider with proper JWT configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/adfs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15\n    restart: always\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - '5432'\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n\n  hasura-pro:\n    image: hasura/graphql-engine:v2.25.0\n    ports:\n      - '8080:8080'\n    depends_on:\n      - postgres\n    restart: always\n    environment:\n      HASURA_GRAPHQL_EE_LICENSE_KEY: <YOUR_EE_LICENSE_KEY>\n      HASURA_GRAPHQL_ADMIN_SECRET: <YOUR_ADMIN_SECRET>\n      HASURA_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'\n      HASURA_GRAPHQL_DEV_MODE: 'true'\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log\n      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics\n      HASURA_GRAPHQL_METRICS_SECRET: <YOUR_METRICS_SECRET>\n      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets\n      HASURA_GRAPHQL_SSO_PROVIDERS:\n        '[{\"client_id\": \"dex-login\",\"admin_roles\": [\"hasura-admin@company.com\"], \"name\": \"Dex\n        Login\",\"authorization_url\": \"http://127.0.0.1:5556/dex/auth\",\"request_token_url\":\n        \"http://127.0.0.1:5556/dex/token\",\"scope\": \"openid offline_access groups\",\"jwt_secret\": {\"type\":\n        \"RS256\",\"jwk_url\": \"http://dex:5556/dex/keys\",\"issuer\": \"http://127.0.0.1:5556/dex\",\"claims_map\":\n        {\"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }}}}]'\n\n  dex:\n    image: dexidp/dex\n    restart: always\n    volumes:\n      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml\n      - ./dex/adfs-saml.cer:/dex/adfs-saml.cer\n    ports:\n      - '5556:5556'\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Restricting Schema Access for Public Role in GraphQL\nDESCRIPTION: Modified schema to limit field access for the public role\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  first_name String!\n  last_name  String!\n}\n\ntype Query {\n  get_users_by_name (first_name: String!, last_name: String): [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Shareable URL for GraphQL Endpoint\nDESCRIPTION: This HTTP snippet demonstrates how to construct a URL with query parameters to easily share a GraphQL API endpoint. The URL includes optional configuration options like endpoint and headers. It is essential to URL encode the values for proper usage.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/graphql-api-explorer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.hasura.io/public/graphiql?header=content-type:application/json&header=Authorization:bearer%20%3Center%20your%20token%20here%3E&endpoint=https://api.github.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Constructing Database Connection URL for AWS RDS Aurora\nDESCRIPTION: Template for constructing the PostgreSQL connection URL needed to connect Hasura to an AWS RDS Aurora database. The URL includes user credentials, host address, port number, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/aws-aurora.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>\n```\n\n----------------------------------------\n\nTITLE: Embedding Deploy to Hasura Cloud Button in HTML\nDESCRIPTION: HTML snippet for adding a Deploy to Hasura Cloud button in a web page.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://cloud.hasura.io/deploy?github_repo=<LINK-TO-GIT-REPO>&hasura_dir=<PATH-TO-HASURA-DIRECTORY-IN-REPO>&branch=<BRANCH-NAME>\"><img src=\"https://hasura.io/deploy-button.svg\" alt=\"Deploy to Hasura Cloud\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Defining Source Customization Schema in JSON\nDESCRIPTION: JSON schema for customizing source configurations including root fields, type names and naming conventions. Used to customize GraphQL API structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root_fields\": {\n    \"namespace\": String,\n    \"prefix\": String,\n    \"suffix\": String\n    },\n  \"type_names\": {\n    \"prefix\": String,\n    \"suffix\": String\n    },\n  \"naming_convention\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hasura Metadata Inconsistency Drop Command\nDESCRIPTION: Basic command syntax for dropping inconsistent metadata objects from Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_drop.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata inconsistency drop [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Check Constraints in PostgreSQL\nDESCRIPTION: Demonstrates the creation of a PostgreSQL table with a check constraint to validate that the column 'price' is greater than zero. Requires PostgreSQL environment with Hasura Console for GUI interactions. Involves creating a table with a UUID column as primary key and a numeric column for price with a constraint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_47\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE products (\n    product_id UUID DEFAULT gen_random_uuid(),\n    name TEXT,\n    price NUMERIC CONSTRAINT positive_price CHECK (price > 0)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Note Table Schema in Hasura\nDESCRIPTION: SQL table definition for creating a 'note' table with auto-incrementing ID and text fields\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note\n\nColumns:\n\nid     Integer auto-increment\nnote   Text\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment for Auth Webhook\nDESCRIPTION: Docker commands to build and run the authentication webhook container. Exposes the webhook on port 5000.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t hasura-auth-webhook .\ndocker run -p 5000:5000 hasura-auth-webhook\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo GraphQL Plugin in VS Code\nDESCRIPTION: This snippet shows how to install the Apollo GraphQL plugin in Visual Studio Code using the Quick Open feature. This plugin is essential for enhancing development with features like syntax highlighting and auto-completion for GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/resources/visual-studio-code.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\next install apollographql.vscode-apollo\n```\n\n----------------------------------------\n\nTITLE: Dataset Interactions Flowchart\nDESCRIPTION: Mermaid flowchart illustrating the dataset resource interactions, methods, and potential responses\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_74\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD;\n    NAME[\"Dataset Name\"] --> GET[\"GET /datasets/templates/:template_name\"];\n    style NAME stroke:#0f3,stroke-width:2px\n    NAME -- clone_name --> POST;\n    NAME -- from --> POST[\"POST /datasets/clones/:clone_name { from: TEMPLATE_NAME }\"];\n    GET --> EXISTS[\"{ exists: true }\"];\n    GET --> EXISTSF[\"{ exists: false }\"];\n    GET --> FAILUREG[\"400\"];\n    style FAILUREG stroke:#f33,stroke-width:2px\n    POST --> FAILUREP[\"400\"];\n    style FAILUREP stroke:#f33,stroke-width:2px\n    NAME --> DELETE[\"DELETE /datasets/clones/:clone_name\"];\n    POST --> CONFIG[\"Source Config\"];\n    style CONFIG stroke:#0f3,stroke-width:2px\n    DELETE --> SUCCESSD[\"{ message: 'success' }\"];\n    DELETE --> FAILURED[\"400\"];\n    style FAILURED stroke:#f33,stroke-width:2px\n    CONFIG --> SCHEMA[\"POST /schema\"];\n    CONFIG --> QUERY[\"POST /query\"];\n    CONFIG --> MUTATION[\"POST /mutation\"];\n```\n\n----------------------------------------\n\nTITLE: Insert Permission Configuration in Hasura\nDESCRIPTION: Schema for configuring insert permissions including check conditions, preset values, column restrictions, and backend-only access controls.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Key            | Required | Schema                                 | Description                                                                                                                                                                                                                       |\n| -------------- | -------- | -------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| check          | true     | [BoolExp](#boolexp)                    | This expression has to hold true for every new row that is inserted                                                                                                                                                               |\n| set            | false    | [ColumnPresetsExp](#columnpresetexp)   | Preset values for columns that can be sourced from session variables or static values                                                                                                                                             |\n| columns        | false    | [PGColumn](#pgcolumn) array (or) `'*'` | Can insert into only these columns (or all when `'*'` is specified)                                                                                                                                                               |\n| backend_only   | false    | Boolean                                | When set to `true` the mutation is accessible only if the `x-hasura-use-backend-only-permissions` session variable exists and is set to `true` and the request is made with `x-hasura-admin-secret` set if any auth is configured |\n| validate_input | false    | [InputValidation](#input-validation)   | The input validation definition for the insert mutation.                                                                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Disallowing Warnings While Tracking Tables in Hasura GraphQL (HTTP)\nDESCRIPTION: Demonstrates how to configure the 'mssql_track_tables' API to not allow warnings during tracking, ensuring that any failure to track tables results in a complete failure of the request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_tables\",\n  \"args\": {\n    \"allow_warnings\": false,\n    \"tables\": [\n      {\n        \"source\": \"default\",\n        \"table\": \"author\"\n      },\n      {\n        \"source\": \"default\",\n        \"table\": \"book\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing GraphQL Query Pipeline with Mermaid Flowchart\nDESCRIPTION: Flowchart showing the current GraphQL query processing pipeline from raw query through validation, transformation to IR, and query plan generation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[/GraphQL Query/]\n    B[/Validated GraphQL Query/]\n    C[/IR/]\n    D[/Query Plan/]\n\n    A -->|\"Validation \\n (uses 'Schema')\"| B\n    B -->|\"Transformation \\n (no additional context is required)\"| C\n    C -->|\"Query Plan Generation\"| D\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed PostgreSQL and Redis Services\nDESCRIPTION: Environment variables required for configuring Hasura to use managed PostgreSQL and Redis instances instead of containerized ones.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nHASURA_GRAPHQL_METADATA_DATABASE_URL HASURA_GRAPHQL_REDIS_URL HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring License Key and Admin Secret in Docker Compose\nDESCRIPTION: Example of setting the enterprise license key and admin secret in the Docker Compose configuration file for Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_EE_LICENSE_KEY: <your_license_key>\n    HASURA_GRAPHQL_ADMIN_SECRET: <your_secret_key>\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura Docker Compose File\nDESCRIPTION: Commands to download the Hasura docker-compose file using wget or curl. This file is essential for setting up Hasura with Docker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/bigquery/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Dropping a Relationship in MSSQL Metadata\nDESCRIPTION: Removes an existing relationship from a table, with optional cascade option to drop dependent objects\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_drop_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"relationship\": \"article_detail\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Query Schema in JSON\nDESCRIPTION: JSON schema for defining collection queries with name and query string parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": String,\n  \"query\": String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook URL for Scheduled Triggers in Hasura\nDESCRIPTION: Demonstrates how to set the webhook URL for a Scheduled Trigger in Hasura, facilitating external endpoint interaction for automation tasks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://us-central1-websitecloud-352908.cloudfunctions.net/docs-scheduled-trigger-sample-app\n```\n\n----------------------------------------\n\nTITLE: Calculating Hit-Miss Ratio in Caching Metrics\nDESCRIPTION: This formula explains how to calculate the hit-miss ratio from the hasura_cache_request_count metric, which helps in understanding the caching efficiency and performance by comparing served requests from cache versus source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/caching-metrics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhit-miss ratio = hit count / (hit count + miss count)\n```\n\n----------------------------------------\n\nTITLE: Setting a Field to NULL During Insert in MS SQL Server Using GraphQL Mutation\nDESCRIPTION: This mutation showcases how to insert a record with nullable fields by either omitting the field entirely or explicitly setting it to null. Both methods ensure the field is stored as null in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/insert.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: \"Jeff\"\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_author\": {\n      \"returning\": [\n        {\n            \"id\": 11,\n            \"name\": \"Jeff\",\n            \"age\": null\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: \"Jeff\",\n        age: null\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_author\": {\n      \"returning\": [\n        {\n            \"id\": 11,\n            \"name\": \"Jeff\",\n            \"age\": null\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options in Hasura CLI\nDESCRIPTION: Comprehensive list of inherited command options from parent commands, including authentication, endpoint configuration, and execution parameters for Hasura CLI metadata management.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Error: Missing Required Header\nDESCRIPTION: This JSON snippet shows the error response when a required header, specifically `x-hasura-user-id`, is missing in the request. The error indicates that the GraphQL engine expects the header to be present but it was not found during the mutation. This typically occurs when a column preset is configured to use a session variable and that variable is not provided in the request headers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/column-presets.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"path\": \"$\",\n      \"error\": \"\\\"x-hasura-user-id\\\" header is expected but not found\",\n      \"code\": \"not-found\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Article without Matching Columns\nDESCRIPTION: This GraphQL mutation attempts to insert a new article into the 'article' table but does not specify any match columns, ensuring that it always performs an insertion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/ms-sql-server/upsert.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n<GraphiQLIDE\n  query={`mutation upsert_article {\n  insert_article (\n    objects: [\n      {\n        title: \"Article 1\",\n        content: \"Article 1 content\",\n        published_on: \"2018-10-12\"\n      }\n    ],\n    if_matched: {\n      match_columns: [],\n      update_columns: content\n    }\n  ) {\n    returning {\n      id\n      title\n      content\n      published_on\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"insert_article\": {\n      \"returning\": [\n        {\n          \"id\": 3,\n          \"title\": \"Article 1\",\n          \"content\": \"Article 1 content\",\n          \"published_on\": \"2018-06-15\"\n        }\n      ]\n    }\n  }\n}`}/>\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Error Example in Hasura\nDESCRIPTION: Example of an SSL certificate error that occurs when a web browser cannot verify the SSL certificate installed on a site. Shows the error code, errno, and failure message.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\ncode: EPROTO,\nerrno: EPROTO,\nmessage:\nrequest to <graphql-api> failed, reason: write EPROTO <....> alert handshake failure:..<...>: SSL alert number 40\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Gateway Configuration Using Hasura CLI\nDESCRIPTION: Basic command syntax for publishing gateway configuration using the Hasura CLI gateway publish command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_publish.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway [flags] publish\n```\n\n----------------------------------------\n\nTITLE: Querying Database Lock Statistics in PostgreSQL\nDESCRIPTION: SQL query to monitor database activity and locks during catalog migrations. The query aggregates information about running queries, lock status, transaction timing, and blocking queries, focusing specifically on DDL operations in the hdb_catalog schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/catalog-migration-db-stats-logging.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT json_agg(json_build_object('query', psa.query, 'lock_granted', pl.granted, 'lock_mode', pl.mode, 'transaction_start_time', psa.xact_start, 'query_start_time', psa.query_start, 'wait_event_type', psa.wait_event_type, 'blocking_query', SUBSTRING(blocking.query, 1, 20) ) order BY psa.query_start)\nFROM     pg_stat_activity psa\nJOIN     pg_stat_activity blocking ON blocking.pid = ANY(pg_blocking_pids(psa.pid))\nLEFT JOIN pg_locks pl ON psa.pid = pl.pid\nWHERE    psa.query LIKE '%hdb_catalog%' AND psa.wait_event_type IS NOT NULL AND psa.query ilike any (array ['%create%', '%drop%', '%alter%']);\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata in Hasura CLI\nDESCRIPTION: This bash command applies the metadata changes, including the newly created Event Trigger, using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Vectorizing Documents - NodeJS\nDESCRIPTION: This snippet defines an asynchronous function which transforms document data by modifying the 'id' field for Weaviate compatibility, creates a class schema in Weaviate, and adds the documents in batches to the Weaviate database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// function to vectorize our documents\nasync function vectorize(className, data) {\n  let newDocuments;\n\n  try {\n    // transform the id into <className>_id to avoid conflicts since weaviate reserves the id field\n    data.forEach(document => {\n      document[`${className}_id`] = document.id;\n      delete document.id;\n    });\n\n    const classObj = {\n      class: className,\n      vectorizer: 'text2vec-openai',\n      moduleConfig: {\n        'text2vec-openai': {\n          model: 'ada',\n          modelVersion: '002',\n          type: 'text',\n        },\n      },\n    };\n\n    try {\n      const schema = await client.schema.classCreator().withClass(classObj).do();\n      if (schema) {\n        console.log(`✅ Schema created ${schema}`);\n      }\n    } catch (err) {\n      console.error(`❌ schema already exists`);\n    }\n\n    console.log(`⏲️ Adding ${data.length} documents to ${className} class`);\n    newDocuments = await addDocuments(className, data);\n\n    // Look at those vectors 👀\n    console.log(newDocuments);\n  } catch (err) {\n    console.error(err.message);\n  }\n  return newDocuments;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auto-completion in Various Environments\nDESCRIPTION: Examples of how to set up Hasura CLI auto-completion in different environments including Linux, Mac, Windows Git Bash, and Zsh with oh-my-zsh.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_completion.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Bash\n  # Linux\n    # Add Bash completion file using:\n    $ sudo hasura completion bash --file=/etc/bash_completion.d/hasura\n  # Mac\n    # Install bash-completion using homebrew:\n    $ brew install bash-completion\n    # Add to your ~/.bash_profile:\n    if [ -f $(brew --prefix)/etc/bash_completion ]; then\n        . $(brew --prefix)/etc/bash_completion\n    fi\n    # Add the completion file:\n    $ sudo hasura completion bash --file=$(brew --prefix)/etc/bash_completion.d/hasura\n  # Windows (Git Bash)\n    # open git bash\n    $ mkdir -p ~/.bash_completion.d\n    # Add the completion file:\n    $ cd ~ && hasura completion bash --file=.bash_completion.d/hasura\n    # Add the following to ~/.bash_profile\n      if [ -f ~/.bash_completion.d/hasura ]; then\n        . ~/.bash_completion.d/hasura\n      fi\n    # restart git bash\n\n# Zsh (using oh-my-zsh)\n  $ mkdir -p $HOME/.oh-my-zsh/completions\n  $ hasura completion zsh --file=$HOME/.oh-my-zsh/completions/_hasura\n\n# Reload the shell for the changes to take effect!\n```\n\n----------------------------------------\n\nTITLE: ConnectionObject Structure Definition\nDESCRIPTION: Detailed structure of a Relay connection object showing pageInfo and edges components with their respective fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nconnection-object {\n  pageInfo: {\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    endCursor\n  }\n  edges: {\n    cursor\n    node: {\n      id\n      field1\n      field2\n      json_field[(path: String)]\n      ..\n      nested object1\n      nested object2\n      aggregate nested object1\n      ..\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Data for Weaviate - Python\nDESCRIPTION: This snippet handles the transformation of PostgreSQL data by mapping the 'id' field to '<className>_id' for compatibility with Weaviate. It defines a function to create a custom class in Weaviate based on a provided schema, prepares the data, and inserts it into Weaviate in batches.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor row in data:\n        row[f'{table}_id'] = row.pop('id')\n\ndef add_to_weaviate(schema, table, data):\n    def create_custom_class(class_name, schema):\n        properties = [\n            {\n                \"name\": prop_name,\n                \"dataType\": [data_type],\n            }\n            for prop_name, data_type in schema.items()\n        ]\n\n        print(properties)\n        helper.convert_data_types(properties)\n\n        class_obj = {\n            \"class\": class_name,\n            \"properties\": properties,\n            \"vectorizer\": \"text2vec-openai\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {\n                    \"vectorizeClassName\": False,\n                    \"model\": \"ada\",\n                    \"modelVersion\": \"002\",\n                    \"type\": \"text\"\n                }\n            }\n        }\n        return class_obj\n\n    class_obj = create_custom_class(table, schema)\n    client.schema.create_class(class_obj)\n\n    with client.batch() as batch:\n        for item in data:\n            # Check if the item is a dictionary\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    # Check if the value is a datetime object\n                    if isinstance(value, datetime):\n                        # Convert the datetime object to a string\n                        item[key] = value.isoformat()\n\n            batch.add_data_object(\n                class_name=table,\n                data_object=item\n            )\n\n    return f\"✅ {len(data)} objects added to Weaviate\"\n\n```\n\n----------------------------------------\n\nTITLE: Webhook Transformer Output Example\nDESCRIPTION: Shows the transformed output from the webhook transformer, demonstrating how the template expressions are resolved into a final URL with query parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrequest_method: GET\nrequest_url: http://httbin.org/1?param1=bob&param2=cat\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Configuration via CLI\nDESCRIPTION: Command to apply the metadata configuration using Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/dynamic-secrets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL User Password\nDESCRIPTION: Command to set the password for the default postgres user in the Cloud SQL instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql users set-password postgres --instance=hasura-postgres --password=<PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC Connection String Examples\nDESCRIPTION: Practical examples of Oracle JDBC connection strings, showing how to connect with default port 1521 and with a custom port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:oracle:thin:myuser/mypassword@myhost.mycompany.com:oracletest # assuming the default port 1521\njdbc:oracle:thin:myuser/mypassword@myhost.mycompany.com:1234:oracletest # assuming Oracle is running on port 1234\n```\n\n----------------------------------------\n\nTITLE: Successful Signup Response in JSON\nDESCRIPTION: Example of the JSON response returned after successful user creation, including the user ID, username, and authentication token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/passport-js/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"username\": \"test123\",\n  \"token\": \"4ffd5ee92853787836325dcea74c02e4\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Structure with SourcePosition Objects in TypeScript\nDESCRIPTION: A fragment of a GraphQL Abstract Syntax Tree showing nested SourcePosition objects that define line and column positions for different parts of a GraphQL document. This structure is used to track the precise location of elements in the source document.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0006_selection_with_fragment_spread.txt#2025-04-17_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 1,\n                            },\n                            end: SourcePosition {\n                                line: 15,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 15,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Updating GRUB Configuration\nDESCRIPTION: Command to generate and update the GRUB configuration file after parameter changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/README_AMI.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n----------------------------------------\n\nTITLE: Payload for Scheduled Trigger\nDESCRIPTION: Defines a JSON payload for a scheduled task in Hasura. Uses a simple message to indicate task notifications. No additional dependencies but intended for POST requests to specified endpoints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"You have incomplete tasks!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Weaviate Class and Schema Creation Function\nDESCRIPTION: Creates a custom Weaviate class with specified properties, using OpenAI text vectorization configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef create_custom_class(class_name, schema):\n        properties = [\n            {\n                \"name\": prop_name,\n                \"dataType\": [data_type],\n            }\n            for prop_name, data_type in schema.items()\n        ]\n\n        print(properties)\n        helper.convert_data_types(properties)\n\n        class_obj = {\n            \"class\": class_name,\n            \"properties\": properties,\n            \"vectorizer\": \"text2vec-openai\",\n            \"moduleConfig\": {\n                \"text2vec-openai\": {\n                    \"vectorizeClassName\": False,\n                    \"model\": \"ada\",\n                    \"modelVersion\": \"002\",\n                    \"type\": \"text\"\n                }\n            }\n        }\n        return class_obj\n```\n\n----------------------------------------\n\nTITLE: New Relic OpenTelemetry Collector Configuration\nDESCRIPTION: OpenTelemetry Collector configuration for exporting logs to New Relic with body transformation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nexporters:\n  otlp/newrelic:\n    endpoint: otlp.nr-data.net:4317\n    headers:\n      api-key: ${NEW_RELIC_API_KEY}\n\nprocessors:\n  transform/new_relic_logs:\n    log_statements:\n      - context: log\n        statements:\n          - set(body, Concat([body, \"\"], \"\"))\n\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [transform/new_relic_logs]\n      exporters: [otlp/newrelic]\n```\n\n----------------------------------------\n\nTITLE: Checking Jupyter Notebook Status in Hasura Cloud\nDESCRIPTION: Command to check the status of a Jupyter Notebook in Hasura Cloud.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura notebook status\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Container in Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up Jaeger all-in-one container with required ports and environment variables for tracing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njaeger:\n  image: jaegertracing/all-in-one:1.37\n  restart: always\n  ports:\n    - 5775:5775/udp\n    - 6831:6831/udp\n    - 6832:6832/udp\n    - 5778:5778\n    - 4002:16686\n    - 14250:14250\n    - 14268:14268\n    - 14269:14269\n    - 4317:4317 # OTLP gRPC\n    - 4318:4318 # OTLP HTTP\n    - 9411:9411\n  environment:\n    COLLECTOR_OTLP_ENABLED: 'true'\n    COLLECTOR_ZIPKIN_HOST_PORT: '9411'\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to Hasura Health Check API\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Hasura Health Check API endpoint using curl. It includes the 'strict' parameter set to false.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/health-checks/healthz-check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -XGET https://advanced-hasura.hasura.app/healthz?strict=false\n```\n\n----------------------------------------\n\nTITLE: Adding a Computed Field to a Table using Hasura Metadata API\nDESCRIPTION: This HTTP request demonstrates how to add a computed field to a table in Hasura using the Metadata API. The request includes the database name, table details, computed field name, function definition, return table, and argument mapping. The `bigquery_add_computed_field` type specifies the operation to be performed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/computed-fields.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_add_computed_field\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": {\n      \"name\": \"author\",\n      \"dataset\": \"hasura\"\n    },\n    \"name\": \"fetch_articles\",\n    \"definition\": {\n      \"function\": {\n        \"name\": \"fetch_articles\",\n        \"dataset\": \"hasura\"\n      },\n      \"return_table\": {\n        \"name\": \"article\",\n        \"dataset\": \"hasura\"\n      },\n      \"argument_mapping\": {\n        \"author_id_arg\": \"author_id\"\n      }\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Naming Convention\nDESCRIPTION: JSON configuration for setting the naming convention for a Postgres source in Hasura metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource_version\": 2,\n  \"metadata\": {\n    \"version\": 1,\n    \"sources\": [\n      {\n        \"name\": \"default\",\n        \"kind\": \"postgres\",\n        \"tables\": [],\n        \"configuration\": {},\n        \"customization\": {\n          \"naming_convention\": \"graphql-default\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transforms Schema in Haskell\nDESCRIPTION: This snippet defines the schema for the 'transforms' key in Haskell, including request method, URL, body, content type, query params, headers, and templating engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\ndata RequestMethod = GET | POST | PUT | PATCH | DELETE\ndata ContentType = JSON | XWWWFORM\nnewtype TemplatingEngine = KritiLang\nnewtype TemplateText = TemplateText T.Text\n\ndata Transforms\n  = Transforms\n  { requestMethod ::  Maybe RequestMethod\n -- ^ Change the request method to one provided here. Nothing means POST.\n\n  , requestURL    ::  Maybe TemplateText\n -- ^ Change the request URL to one provided here. Nothing means original URL.\n\n  , request_body  ::  Maybe TemplateText\n -- ^ Change the request_body to one provided here. Nothing means original payload. Only applicable for POST, PUT, PATCH methods\n -- The encoding of the content is defined by the 'request_content_type' field defined below.\n\n  , request_content_type :: Maybe ContentType\n -- ^ Only the following Content-Types are allowed (default: application/json):\n -- 1) application/json\n -- 2) application/x-www-form-urlencoded\n\n  , query_params  ::  Maybe (HashMap Text TemplateText)   # Key-value based templating\n -- ^ Add query params provided here to URL\n -- Each param is URL encoded\n\n  , request_headers :: Maybe TransformHeaders\n -- ^ Tranform headers as defined here.\n -- Certain headers cannot be transformed (e.g. `Content-Type` and should return a warning)\n\n   , templating_engine :: Maybe TemplatingEngine\n -- ^ The template engine to use for transformations. Default: go-basic\n  }\n\n-- | The order of evaluation is removeHeaders and then addHeaders\ntype HeaderName = Text\ndata TransformHeaders\n  = TransformHeaders\n  { addHeaders :: [(HeaderName, TemplateText}]\n  , removeHeaders :: [HeaderName]\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Event Invocations in Hasura - Cron Example\nDESCRIPTION: API endpoint for retrieving scheduled event invocations for a specific cron trigger. Supports pagination with limit and offset parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"get_scheduled_event_invocations\",\n    \"args\": {\n        \"type\": \"cron\",\n        \"trigger_name\": \"daily_trigger\",\n        \"limit\": 10,\n        \"offset\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors by Articles via Computed Fields - GraphQL\nDESCRIPTION: Fetches a list of authors sorted by their articles returned by a computed field. This snippet shows how to aggregate and sort results based on other computable relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query{\n  author(order_by: {get_articles_aggregate: {count: desc}}){\n    id\n    name\n    get_articles{\n      id\n      title\n      content\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"author\": [\n      {\n        \"id\": 1,\n        \"name\": \"Author 1\",\n        \"get_articles\": [\n          {\n            \"id\": 1,\n            \"title\": \"Article 1\",\n            \"content\": \"Sample article content 1\"\n          }\n        ]\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Author 2\",\n        \"get_articles\": []\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking Hasura GraphQL Engine Logs\nDESCRIPTION: View the logs of the Hasura GraphQL Engine container for troubleshooting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs deployment/hasura -c graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Custom Function Root Fields Configuration\nDESCRIPTION: This snippet describes the configuration for custom function root fields which allows for setting up GraphQL root fields related to specific functions within the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n| Key                | Required | Schema   | Description                                          |\n| ------------------ | -------- | -------- | ---------------------------------------------------- |\n| function           | false    | `String` | Customize the `<function-name>` root field           |\n| function_aggregate | false    | `String` | Customize the `<function-name>_aggregate` root field |\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Pool Settings via CLI YAML\nDESCRIPTION: YAML configuration example showing how to set total_max_connections and other database connection parameters in the metadata configuration file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/cloud-connection-pooling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: default\n  kind: postgres\n  configuration:\n    connection_info:\n      use_prepared_statements: false\n      database_url:\n        from_env: PG_DATABASE_URL\n      isolation_level: read-committed\n      pool_settings:\n        total_max_connections: 60\n  tables: '!include default/tables/tables.yaml'\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Enhanced Logical Operators in GraphQL\nDESCRIPTION: Shows the new way of using logical operators in GraphQL queries, allowing them at every level of the where clause, including the scalar type level.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  AuthorMany(where: { author_id: { _or: [{ _eq: 1 }, { _eq: 2 }] } }) {\n    author_id\n    first_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited options for hasura migrate delete in SASS\nDESCRIPTION: This snippet shows the options inherited from parent commands for 'hasura migrate delete', including settings for admin secret, endpoint, database name, and various configuration options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with BigQuery Service Account\nDESCRIPTION: Command to run Hasura Docker container with the BigQuery service account JSON file. This sets up the necessary authentication for Hasura to connect to BigQuery.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/bigquery/getting-started/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e BIGQUERY_SA_ACCOUNT=$(cat /path/to/the/service-account.json) <rest-of-the-flags>\n```\n\n----------------------------------------\n\nTITLE: Creating Container Instance with JWT Configuration\nDESCRIPTION: This command creates a container instance for Hasura GraphQL Engine with JWT configuration and other environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz container create --resource-group hasura \\\n      --name hasura-graphql-engine \\\n      --image hasura/graphql-engine \\\n      --dns-name-label \"<dns-name-label>\" \\\n      --ports 80 \\\n      --environment-variables \"HASURA_GRAPHQL_SERVER_PORT\"=\"80\" \\\n      \"HASURA_GRAPHQL_ENABLE_CONSOLE\"=\"true\" \\\n      \"HASURA_GRAPHQL_ADMIN_SECRET\"=\"<admin-secret>\" \\\n      \"HASURA_GRAPHQL_JWT_SECRET\"= \\ \"{\\\"type\\\": \\\"RS512\\\",\\\"key\\\": \\\"-----BEGIN CERTIFICATE-----\\\\nMIIDBzCCAe+gAwIBAgIJTpEEoUJ/bOElMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNV\\\\nBAMTFnRyYWNrLWZyOC51cy5hdXRoMC5jb20wHhcNMjAwNzE3MDYxMjE4WhcNMzQw\\\\nMzI2MDYxMjE4WjAhMR8wHQYDVQQDExZ0cmFjay1mcjgudXMuYXV0aDAuY29tMIIB\\\\nIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuK9N9FWK1hEPtwQ8ltYjlcjF\\\\nX03jhGgUKkLCLxe8q4x84eGJPmeHpyK+iZZ8TWaPpyD3fk+s8BC3Dqa/Sd9QeOBh\\\\nZH/YnzoB3yKqF/FruFNAY+F3LUt2P2t72tcnuFg4Vr8N9u8f4ESz7OHazn+XJ7u+\\\\ncuqKulaxMI4mVT/fGinCiT4uGVr0VVaF8KeWsF/EJYeZTiWZyubMwJsaZ2uW2U52\\\\n+VDE0RE0kz0fzYiCCMfuNNPg5V94lY3ImcmSI1qSjUpJsodqACqk4srmnwMZhICO\\\\n14F/WUknqmIBgFdHacluC6pqgHdKLMuPnp37bf7ACnQ/L2Pw77ZwrKRymUrzlQID\\\\nAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBSOG3E+4lHiI+l0i91u\\\\nxG2Rca2NATAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEBAKgmxr6c\\\\nYmSNJOTPtjMFFDZHHX/7iwr+vqzC3nalr6ku8E3Zs0/IpwAtzqXp0eVVdPCWUY3A\\\\nQCUTt63GrqshBHYAxTbT0rlXFkqL8UkJvdZQ3XoQuNsqcp22zlQWGHxsk3YP97rn\\\\nltPI56smyHqPj+SBqyN/Vs7Vga9G8fHCfltJOdeisbmVHaC9WquZ9S5eyT7JzPAC\\\\n5dI5ZUunm0cgKFVbLfPr7ykClTPy36WdHS1VWhiCyS+rKeN7KYUvoaQN2U3hXesL\\\\nr2M+8qaPOSQdcNmg1eMNgxZ9Dh7SXtLQB2DAOuHe/BesJj8eRyENJCSdZsUOgeZl\\\\nMinkSy2d927Vts8=\\\\n-----END CERTIFICATE-----\\\"}\" \n      --secure-environment-variables \"HASURA_METADATA_DATABASE_URL\"=\"<database-url>\" \"PG_DATABASE_URL\"=\"<database-url>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Input Validation Schema in Hasura\nDESCRIPTION: Schema definition for input validation configuration including webhook URL, headers, timeout settings, and client header forwarding options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                    | Required | Schema                                                                      | Description                                                                                 |\n| ---------------------- | -------- | --------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- |\n| url                    | true     | [WebhookURL](#webhookurl)                                                   | The input validations's webhook URL                                                         |\n| headers                | false    | \\[[HeaderFromValue](#headerfromvalue) \\| [HeaderFromEnv](#headerfromenv) \\] | List of defined headers to be sent to the handler                                           |\n| forward_client_headers | false    | boolean                                                                     | If set to `true` the client headers are forwarded to the webhook handler (default: `false`) |\n| timeout                | false    | Integer                                                                     | Number of seconds to wait for response before timing out. Default: 10                       |\n```\n\n----------------------------------------\n\nTITLE: Embedding Deploy to Hasura Cloud Button in Markdown\nDESCRIPTION: Markdown snippet for adding a Deploy to Hasura Cloud button in a README file or dashboard.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Hasura Cloud](https://hasura.io/deploy-button.svg)](https://cloud.hasura.io/deploy?github_repo=<LINK-TO-GIT-REPO>&hasura_dir=<PATH-TO-HASURA-DIRECTORY-IN-REPO>&branch=<BRANCH-NAME>)\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Aggregate Fields Selection Type\nDESCRIPTION: Specifies a GraphQL type for selecting aggregate fields on InvoiceLine objects. Includes count functions, scalar field aggregations, and nested object relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_71\n\nLANGUAGE: graphql\nCODE:\n```\ntype InvoiceLine_aggregate_fields {\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  InvoiceLineId: Int_aggregate_fields!\n  InvoiceId: Int_aggregate_fields!\n  TrackId: Int_aggregate_fields!\n  Quantity: Int_aggregate_fields!\n\n  # Nested object fields\n  UnitPrice: Multicurrency_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Stored Procedure Query\nDESCRIPTION: This JSON response represents the data returned from the GraphQL query that executes the `sp_tables` stored procedure.  It shows a list of tables, each with properties such as TABLE_QUALIFIER, TABLE_OWNER, TABLE_NAME, and TABLE_TYPE. The output is structured according to the defined Logical Model.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"data\": {\n    \"sp_tables\": [\n      {\n        \"TABLE_QUALIFIER\": \"master\",\n        \"TABLE_OWNER\": \"dbo\",\n        \"TABLE_NAME\": \"MSreplication_options\",\n        \"TABLE_TYPE\": \"TABLE\"\n      },\n      {\n        \"TABLE_QUALIFIER\": \"master\",\n        \"TABLE_OWNER\": \"dbo\",\n        \"TABLE_NAME\": \"spt_fallback_db\",\n        \"TABLE_TYPE\": \"TABLE\"\n      },\n      {\n        \"TABLE_QUALIFIER\": \"master\",\n        \"TABLE_OWNER\": \"dbo\",\n        \"TABLE_NAME\": \"spt_fallback_dev\",\n        \"TABLE_TYPE\": \"TABLE\"\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment for Hasura\nDESCRIPTION: Command to create the Kubernetes deployment and service for Hasura using the configured YAML file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging Health Check Error in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet illustrates the JSON structure of a health check log when an error occurs. It includes detailed error information, source name, status, timestamp, and internal configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"warn\",\n  \"timestamp\": \"2022-07-28T12:30:06.643+0530\",\n  \"type\": \"health-check-log\",\n  \"detail\": {\n    \"source_name\": \"postgres\",\n    \"status\": \"ERROR\",\n    \"timestamp\": \"2022-07-28T07:00:06.643Z\",\n    \"error\": {\n      \"message\": \"connection error\",\n      \"extra\": \"connection to server at \\\"localhost\\\" (::1), port 6432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\nconnection to server at \\\"localhost\\\" (127.0.0.1), port 6432 failed: Connection refused\\n\\tIs the server running on that host and accepting TCP/IP connections?\\n\"\n    },\n    \"internal\": {\n      \"interval\": 10,\n      \"max_retries\": 3,\n      \"retry_iteration\": 3,\n      \"timeout\": 5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Hasura GraphQL Engine\nDESCRIPTION: This snippet lists two crucial Python packages required for the Hasura GraphQL Engine: graphene and graphql-core. These libraries are fundamental for implementing GraphQL functionality in Python.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/benchmark_sets/remote_schema/graphql_server/requirements-graphql-server.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngraphene\ngraphql-core\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Generation and Password Rehashing\nDESCRIPTION: Functions for generating JWT tokens and rehashing passwords when necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport jwt\n\nHASURA_JWT_SECRET = os.getenv(\"HASURA_GRAPHQL_JWT_SECRET\", \"a-very-secret-secret\")\n\ndef generate_token(user) -> str:\n    user_roles = [\"user\"]\n    admin_roles = [\"user\", \"admin\"]\n    is_admin = user[\"email\"] == \"admin@site.com\"\n    payload = {\n        \"https://hasura.io/jwt/claims\": {\n            \"x-hasura-allowed-roles\": admin_roles if is_admin else user_roles,\n            \"x-hasura-default-role\": \"admin\" if is_admin else \"user\",\n            \"x-hasura-user-id\": user[\"id\"],\n        }\n    }\n    token = jwt.encode(payload, HASURA_JWT_SECRET, \"HS256\")\n    return token.decode(\"utf-8\")\n\ndef rehash_and_save_password_if_needed(user, plaintext_password):\n    if Password.check_needs_rehash(user[\"password\"]):\n        client.update_password(user[\"id\"], Password.hash(plaintext_password))\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Hasura with HTTPS\nDESCRIPTION: Docker Compose configuration file that sets up Hasura GraphQL Engine with secure HTTPS support via Caddy webserver. The configuration includes environment variables for database connection and admin security.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose-https/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query AST Structure in Rust\nDESCRIPTION: This code snippet represents the Abstract Syntax Tree (AST) structure of a parsed GraphQL query. It includes nested objects, key-value pairs, and source position information for each element. This structure is typically used in GraphQL parsers or compilers for query processing and validation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0030_values.txt#2025-04-17_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nstart: SourcePosition {\n    line: 8,\n    col: 20,\n},\nend: SourcePosition {\n    line: 8,\n    col: 21,\n},\n},\n},\nstart: SourcePosition {\n    line: 8,\n    col: 9,\n},\nend: SourcePosition {\n    line: 8,\n    col: 21,\n},\n},\nSpanning {\nitem: KeyValue {\n    key: Spanning {\n        item: Name(\n            \"emptyObject\",\n        ),\n        start: SourcePosition {\n            line: 9,\n            col: 9,\n        },\n        end: SourcePosition {\n            line: 9,\n            col: 19,\n        },\n    },\n    value: Spanning {\n        item: Object(\n            [],\n        ),\n        start: SourcePosition {\n            line: 9,\n            col: 22,\n        },\n        end: SourcePosition {\n            line: 9,\n            col: 23,\n        },\n    },\n},\nstart: SourcePosition {\n    line: 9,\n    col: 9,\n},\nend: SourcePosition {\n    line: 9,\n    col: 23,\n},\n},\n],\nstart: SourcePosition {\n    line: 2,\n    col: 9,\n},\nend: SourcePosition {\n    line: 10,\n    col: 5,\n},\n},\n),\ndirectives: [],\nselection_set: None,\n},\n),\nstart: SourcePosition {\n    line: 2,\n    col: 5,\n},\nend: SourcePosition {\n    line: 2,\n    col: 8,\n},\n},\n],\n},\nstart: SourcePosition {\n    line: 1,\n    col: 1,\n},\nend: SourcePosition {\n    line: 11,\n    col: 1,\n},\n},\n},\n),\nstart: SourcePosition {\n    line: 1,\n    col: 1,\n},\nend: SourcePosition {\n    line: 11,\n    col: 1,\n},\n},\n],\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura and Postgres with Docker Compose\nDESCRIPTION: Command to start both the Hasura GraphQL Engine and the Postgres database in Docker containers in detached mode using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/docker-simple.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Schema with Federation Directives\nDESCRIPTION: Sample GraphQL schema demonstrating federation directives and type definitions for a Users table with basic CRUD operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: query_root\n  mutation: mutation_root\n  subscription: subscription_root\n}\n\ntype query_root {\n  usersAggregate(\n    where: UsersBoolExp\n    orderBy: [UsersOrderBy!]\n    limit: Int\n    offset: Int\n    distinctOn: [UsersSelectColumn!]\n  ): UsersAggregate!\n  users(\n    where: UsersBoolExp\n    orderBy: [UsersOrderBy!]\n    limit: Int\n    offset: Int\n    distinctOn: [UsersSelectColumn!]\n  ): [Users!]!\n  usersByPk(id: Int!): Users\n}\n\ntype Users @key(fields: \"id\") {\n  id: Int!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura CLI Console Server\nDESCRIPTION: Command to start the Hasura CLI console server with a specified endpoint and optional admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhasura console --endpoint <DATA_API_URL> --admin-secret <your-admin-secret> (optional)\n```\n\n----------------------------------------\n\nTITLE: Handling Cache Store Capacity Exceeded\nDESCRIPTION: The snippet provides an example of an HTTP response header indicating a rate-limit breach during cache writes. It originates from the leaky bucket algorithm used in Hasura to prevent excessive writes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/how-it-works.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nWarning: 199 - cache-store-capacity-exceeded\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Actions Codegen Command\nDESCRIPTION: The basic command syntax for generating action code using the Hasura CLI codegen feature.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_use-codegen.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions use-codegen [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Image for SQL Server Setup\nDESCRIPTION: Defines a Dockerfile to create a Docker image with MS SQL Server 2019 installed. This setup includes enabling necessary services such as SQL Agent and configuring SQL Server HADR settings. The image exposes the SQL Server's port and specifies entry points.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM ubuntu:18.04\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update\nRUN apt-get install apt-utils -y\n\nRUN apt-get install sudo wget curl gnupg gnupg1 gnupg2 -y\nRUN apt-get install software-properties-common systemd vim -y\nRUN wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n\nRUN add-apt-repository \"$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)\"\nRUN apt-get update\nRUN apt-get install -y mssql-server\n\nRUN /opt/mssql/bin/mssql-conf set hadr.hadrenabled  1\nRUN /opt/mssql/bin/mssql-conf set sqlagent.enabled true\n\nEXPOSE 1433\n\nENTRYPOINT /opt/mssql/bin/sqlservr\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Table of Contents with Links in JSX\nDESCRIPTION: Shows how to create a custom table of contents using manual links and custom components. This approach is useful for creating index pages or when more control over the TOC structure is needed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/table-of-contents.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport {\n  CustomTOCList,\n  CustomTOCListSection,\n  CustomTOCListHead,\n  CustomTOCListContent,\n} from '@site/src/components/CustomTOCList';\n\n<CustomTOCList>\n  <CustomTOCListSection>\n    <CustomTOCListContent>\n      <Link to=\"/docs/graphql/cloud/security/allow-lists\">Allow Lists</Link>\n      <Link to=\"/docs/graphql/cloud/security/api-limits\">API Limits</Link>\n      <Link to=\"/docs/graphql/cloud/security/disable-graphql-introspection\">\n        Disable GraphQL Introspection\n      </Link>\n      <Link to=\"/docs/graphql/cloud/security/rotating-admin-secrets\">\n        Rotating Admin Secrets\n      </Link>\n    </CustomTOCListContent>\n  </CustomTOCListSection>\n</CustomTOCList>;\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query\nDESCRIPTION: Example GraphQL query to fetch all profiles with their IDs and names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  profiles {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Function\nDESCRIPTION: Command to deploy the cloud function with NodeJS 6 runtime and HTTP trigger in Asia South region.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta functions deploy trigger \\\n       --runtime nodejs6 \\\n       --trigger-http \\\n       --region asia-south1 \\\n       --env-vars-file .env.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Method Transform via Metadata API\nDESCRIPTION: Example of using the Metadata API to create an action with a request method transform. Shows how to set the method to POST in the API request body.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n  \"args\":{\n    \"name\":\"create_user\",\n    \"definition\":{\n      \"kind\":\"synchronous\",\n      \"arguments\":[\n        {\n          \"name\":\"username\",\n          \"type\":\"String!\"\n        },\n        {\n          \"name\":\"email\",\n          \"type\":\"String!\"\n        }\n      ],\n      \"output_type\":\"User\",\n      \"handler\":\"{{ACTION_BASE_URL}}\",\n      \"timeout\":60,\n      \"request_transform\": {\n        \"template_engine\": \"Kriti\",\n        \"method\": \"POST\",\n        \"url\": \"{{$base_url}}/create_user\",\n        \"query_params\": {\n          \"id\": \"{{$session_variables['x-hasura-user-id']}}\"\n        },\n        \"content_type\": \"application/json\",\n        \"body\": \"{\\\"username\\\": {{$body.input.username}}}\"\n      }\n    },\n    \"comment\": \"Custom action to create user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Service Status for Hasura Console Access\nDESCRIPTION: This kubectl command retrieves the status of Kubernetes services, allowing you to find the external IP and port for accessing the Hasura console. The example shows output for a local Kubernetes setup using Docker for Desktop on macOS.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/kubernetes/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get svc\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\nhasura       LoadBalancer   10.96.214.240   localhost     80:30303/TCP   4m\nkubernetes   ClusterIP      10.96.0.1       <none>        443/TCP        8m\n```\n\n----------------------------------------\n\nTITLE: Inserting Zoomable Image Using Thumbnail Component in JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the Thumbnail component to add an image with click-to-zoom functionality. It includes props for the image source, alt text, and width.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/graphql/manual/schema/validation-add-check-constraint.png\"\n  alt=\"Add check constraint\"\n  width=\"700px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Data Connector SDK\nDESCRIPTION: Command to spin up the entire stack using Docker Compose, including Hasura GraphQL Engine, Postgres DB, Data Connector Agent Test Suite, Reference Agent, and SwaggerUI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: SQL translation of redaction in ordering\nDESCRIPTION: This SQL snippet demonstrates the translation of the JSON query with redaction in ordering. The `ORDER BY` clause uses a `CASE` statement to apply redaction to `ColumnA` before sorting the results in ascending order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"Id\"\nFROM \"Test\"\nORDER BY\n  (CASE\n    WHEN \"Id\" IN (1,2) THEN \"ColumnA\"\n    ELSE NULL\n  END) ASC\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to verify that all required containers (Hasura GraphQL Engine, MS SQL Server, and Postgres) are running properly after starting with Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/getting-started/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID   IMAGE                                        COMMAND                  CREATED         STATUS         PORTS                    NAMES\n1bbfb6c6311d   hasura/graphql-engine:v2.8.4                 \"graphql-engine serve\"   4 seconds ago   Up 2 seconds   0.0.0.0:8080->8080/tcp   hasura-graphql-engine-1\n1ce5806438bb   mcr.microsoft.com/mssql/server:2022-latest   \"/opt/mssql/bin/perm…\"   4 seconds ago   Up 3 seconds   1433/tcp                 hasura-mssql-1\n0e09d1f31c0e   postgres:14                                  \"docker-entrypoint.s…\"   4 seconds ago   Up 3 seconds   5432/tcp                 hasura-postgres-1\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Query Tags Demonstration\nDESCRIPTION: A simple GraphQL query example that retrieves child names, which Hasura will transform into a SQL query with query tags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetChild {\n  child {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Description in Hasura\nDESCRIPTION: A brief description of the Action's purpose, which will be visible in the GraphQL API documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nConvert currency with real-time exchange rates.\n```\n\n----------------------------------------\n\nTITLE: Defining Structured Error with Position in Rust for Hasura GraphQL Engine\nDESCRIPTION: This code defines an error structure in Rust, encapsulating an 'OtherError' with a message about exceeding the recursion limit. It includes position information (line and column) where the error occurred. This structure is likely used for precise error reporting in the GraphQL parsing or execution process.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/6000_stackoverflow1.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: OtherError(\n            \"Recursion limit exceeded\",\n        ),\n        position: SourcePosition {\n            line: 1,\n            col: 120,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Event Triggers Tables from Hasura Catalog\nDESCRIPTION: These SQL commands delete event trigger-related tables from the Hasura catalog schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS hdb_catalog.hdb_source_catalog_version;\nDROP FUNCTION IF EXISTS hdb_catalog.insert_event_log(text, text, text, text, json);\nDROP TABLE IF EXISTS hdb_catalog.event_invocation_logs;\nDROP TABLE IF EXISTS hdb_catalog.event_log;\nDROP TABLE IF EXISTS hdb_catalog.hdb_event_log_cleanups;\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Source Telemetry Data Sample in JSON\nDESCRIPTION: This snippet shows a sample of telemetry data collected for data sources in the Enterprise Edition server. It includes information about the backend type, number of tables, views, relationships, permissions, and various feature enablements specific to the data source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"license_jti\": \"e86e5a54-ad3b-49e6-98ca-ab34b0a50f8f\",\n  \"client_id\": null,\n  \"metadata_db_uid\": \"4492082b-a2d6-4d4c-81e5-f481b2aea669\",\n  \"instance_uid\": \"f6d67a85-4a4f-4897-a767-89a86253b59c\",\n  \"sample_uid\": \"2a18421a-baff-466b-bf34-b7fd6a5c76c8\",\n  \"hasura_version\": \"12345\",\n  \"metrics\": {\n    \"backend_type\": \"postgres\",\n    \"read_replicas\": 0,\n    \"health_check_enabled\": false,\n    \"tables\": 0,\n    \"views\": 0,\n    \"enum_tables\": 0,\n    \"relationships_manual\": 0,\n    \"relationships_auto\": 0,\n    \"permissions_select\": 0,\n    \"permissions_insert\": 0,\n    \"permissions_update\": 0,\n    \"permissions_delete\": 0,\n    \"permissions_roles\": 0,\n    \"event_triggers\": 0,\n    \"functions\": 0,\n    \"native_queries\": 0,\n    \"query_tags_enabled\": false,\n    \"connection_templates_enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Logical Models with References via API\nDESCRIPTION: This snippet demonstrates how to track Logical Models with references to each other (article and author) using the Hasura Metadata API via an HTTP POST request within a `bulk_atomic` operation. It defines both the `article` and `author` models, including nested relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bulk_atomic\\\",\\n  \\\"args\\\":\\n  [\\n    {\\n      \\\"type\\\": \\\"bigquery_track_logical_model\\\",\\n      \\\"args\\\": {\\n        \\\"source\\\": \\\"default\\\",\\n        \\\"name\\\": \\\"article\\\",\\n        \\\"fields\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"integer\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"title\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"text\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"contents\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"text\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"author_id\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"integer\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"author\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"logical_model\\\": \\\"author\\\",\\n              },\\n          }\\n        ]\\n      }\\n    },\\n    {\\n      \\\"type\\\": \\\"bigquery_track_logical_model\\\",\\n      \\\"args\\\": {\\n        \\\"source\\\": \\\"default\\\",\\n        \\\"name\\\": \\\"author\\\",\\n        \\\"fields\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"integer\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"name\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"scalar\\\": \\\"text\\\"\\n              }\\n          },\\n          {\\n            \\\"name\\\": \\\"articles\\\",\\n            \\\"type\\\":\\n              {\\n                \\\"array\\\":\\n                  {\\n                    \\\"logical_model\\\": \\\"article\\\"\\n                  }\\n              }\\n          }\\n        ]\\n      }\\n    }\\n  ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Citus Relationship Support Matrix Table\nDESCRIPTION: Markdown table showing supported relationship types between different table types (Local, Reference, and Distributed) in Citus when used with Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/citus-hyperscale-postgres/hasura-citus-compatibility.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                      | To Local      | To Reference  | To Distributed |\n| -------------------- | ------------- | ------------- | -------------- |\n| **From Local**       | Object, Array | Object, Array |                |\n| **From Reference**   | Object, Array | Object, Array |                |\n| **From Distributed** |               | Object        | Object, Array  |\n```\n\n----------------------------------------\n\nTITLE: Transform Request Body Example in YAML\nDESCRIPTION: This snippet demonstrates how to transform the request body using the 'transforms' key in YAML format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n   request_body:\n     {\n       \"key1\": \"{{$.value1}}\",\n       \"key2\": \"{{$.value2}}\",\n       \"key3\": \"{{$.session['x-hasura-user-id']}}\"\n     }\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Webhook URL for Scheduled Event - JavaScript\nDESCRIPTION: This snippet outlines the configuration details for a webhook URL which receives data when a scheduled event is triggered. It checks for abandoned carts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Webhook URL for Hasura to call when the event is triggered\nhttps://<your-webhook-url>/abandoned-cart\n```\n\n----------------------------------------\n\nTITLE: Securing Hasura GraphQL Engine with admin secret\nDESCRIPTION: Docker Compose configuration that adds security by enabling the admin secret. This restricts access to the GraphQL Engine and console, requiring authentication with the specified admin secret key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/commit_diff.txt#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n    - db_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n  graphql-engine:\n    image: hasura/graphql-engine:v2.0.10\n    ports:\n    - \"8080:8080\"\n    depends_on:\n    - \"postgres\"\n    restart: always\n    environment:\n      ## postgres database to store Hasura metadata\n      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      ## enable the console served by server\n      HASURA_GRAPHQL_ENABLE_CONSOLE: \"true\" # set to \"false\" to disable console\n      ## enable debugging mode. It is recommended to disable this in production\n      HASURA_GRAPHQL_DEV_MODE: \"true\"\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log\n      ## uncomment next line to set an admin secret\n      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Creating Derived Action\nDESCRIPTION: Hasura CLI command to create a derived action from an existing GraphQL mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/derive.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura actions create insertAuthor --derive-from 'mutation insertAuthor($name: String) {\n     insert_author_one(\n       object: {\n         name: $name\n     }) {\n     id\n     name\n   }\n }'\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax\nDESCRIPTION: Basic syntax for the hasura metadata diff command with optional file parameters\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_diff.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata diff [file1] [file2] [flags]\n```\n\n----------------------------------------\n\nTITLE: SQL-to-OpenDD Query Translation in Rust\nDESCRIPTION: Example of how the SQL frontend would convert a SQL query into the corresponding OpenDD query structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nQuery {\n    model_name: ModelName(\"Artist\"),\n    fields: Map[ ( Alias(\"id\"), Field(\"id\"),\n                 ( Alias(\"name\"), Field(\"name\"),\n               ],\n    filter: None,\n    order_by: None\n    limit: None,\n    offset: None,\n}\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-line options for the update-project-v2 command, including admin secret, endpoint configuration, and TLS settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for update-project-v2\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n    --metadata-dir string             (default \"metadata\")\n```\n\n----------------------------------------\n\nTITLE: Nested Relations Structure in Order By\nDESCRIPTION: Example of the relations property structure for order_by that captures multiple target_paths. Shows how complex relationships like Artist->Albums, Artist, and Tracks would be represented in the JSON format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Artist\": {\n    \"where\": null,\n    \"subrelations\": {\n      \"Albums\": {\n        \"where\": null,\n        \"subrelations\": {}\n      }\n    }\n  },\n  \"Tracks\": {\n    \"where\": null,\n    \"subrelations\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Script Execution\nDESCRIPTION: Bash command to run the vectorization script with a specified table name\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npython index.py <YOUR_TABLE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Listing Inconsistent Objects with Hasura CLI\nDESCRIPTION: This code snippet demonstrates how to list inconsistent objects within the Hasura metadata using the CLI. It uses the `hasura metadata inconsistency list` command to identify any discrepancies between the metadata and the actual database schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata inconsistency list\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for Hasura Seed Command in SASS\nDESCRIPTION: This code snippet shows the options inherited from parent commands for the 'hasura seed' command. It includes options for specifying the environment file, log level, project directory, and update check settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Downloading Cloud Run Environment Variables File\nDESCRIPTION: Command to download the Cloud Run environment variables file from the Hasura installation manifests repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-google-cloud-run.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/enterprise/google-cloud-run/env.yaml\n```\n\n----------------------------------------\n\nTITLE: Consistent Metadata CLI Output\nDESCRIPTION: This snippet displays the expected output when the Hasura metadata is consistent. The CLI logs a message indicating that the metadata is consistent.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"INFO metadata is consistent\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Connector in Dex for Auth0 Integration\nDESCRIPTION: YAML configuration for the SAML connector in Dex that connects to Auth0. Includes SSO URL, certificate settings, attribute mappings for username, email and groups, and entity issuer information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconnectors:\n  - type: saml\n    id: saml-auth0\n    name: Auth0 SAML\n    config:\n      ssoURL: https://some-auth0-app.us.auth0.com/samlp/xxxxxxxx\n      ca: /etc/dex/saml-ca.pem\n      # insecureSkipSignatureValidation: true\n      redirectURI: http://localhost:5556/dex/callback\n      usernameAttr: http://schemas.auth0.com/name\n      emailAttr: http://schemas.auth0.com/email\n      groupsAttr: http://schemas.auth0.com/roles\n      entityIssuer: urn:some-auth0-app.us.auth0.com\n```\n\n----------------------------------------\n\nTITLE: Generalizing Metadata and IR Types in Haskell\nDESCRIPTION: Demonstrates how the Backend typeclass is used to generalize metadata types like TableInfo and IR types like AnnDelG across different backends.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\n-- Metadata\ndata TableInfo (b :: BackendType) =\n  TableInfo { tableName   :: TableName b\n            , tableConfig :: TableConfig\n            }\n\n-- IR\ndata AnnDelG (b :: BackendType) v\n  = AnnDel { dqp1Table   :: !(TableName b)\n           , dqp1Where   :: !(AnnBoolExp b v, AnnBoolExp b v)\n           }\n```\n\n----------------------------------------\n\nTITLE: Setting GraphQL Engine Executable Path in Bash\nDESCRIPTION: Exports the path to the graphql-engine executable for use in tests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export GRAPHQL_ENGINE=$(cabal list-bin exe:graphql-engine)\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connections for Hasura and API (Mac)\nDESCRIPTION: Markdown table outlining network configurations for various connection scenarios between Hasura and APIs on Mac, including Docker and non-Docker setups.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Connection                                                | Config                            | Comment                                    |\n| --------------------------------------------------------- | --------------------------------- | ------------------------------------------ |\n| **Hasura to API (outside Docker)**                        | `host.docker.internal:3000`       | Assuming the API is running on port `3000` |\n| **API (outside Docker) to Hasura**                        | `localhost:8080`                  | Hasura runs on port `8080` by default      |\n| **Hasura to API (both in docker-compose)**                | service name, e.g.: `api:3000`    | Assuming the API is running on port `3000` |\n| **API to Hasura (both in docker-compose)**                | service name, e.g.: `hasura:8080` | Hasura runs on port `8080` by default      |\n| **Hasura to API (both running with separate docker run)** | Docker internal IP address        | Can be obtained with `docker inspect`      |\n| **API to Hasura (both running with separate docker run)** | Docker internal IP address        | Can be obtained with `docker inspect`      |\n```\n\n----------------------------------------\n\nTITLE: Allocating IP Range for VPC Peering\nDESCRIPTION: Command to allocate an IP address range for Google-managed services in the VPC network.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute addresses create google-managed-services-default \\\n    --global \\\n    --purpose=VPC_PEERING \\\n    --prefix-length=24 \\\n    --network=default\n```\n\n----------------------------------------\n\nTITLE: Querying a Materialized View in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to query the 'popular_active_authors' materialized view to retrieve the name and rating of popular active authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name, rating from popular_active_authors;\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Standard Query Tags Format\nDESCRIPTION: Example of a SQL query generated by Hasura with standard query tags format appended as SQL comments, containing request_id, field_name, and operation_name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM child /* request_id=487c2ed5-08a4-429a-b0e0-4666a82e3cc6, field_name=child, operation_name=GetChild */\n```\n\n----------------------------------------\n\nTITLE: Nested Exists Expression for Filtering\nDESCRIPTION: This JSON snippet presents a nested exists expression that filters a person table to see if they have any children with friends who share the same first name, showing how exists expressions can be combined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"exists\",\n  \"in_table\": {\n    \"type\": \"related\",\n    \"relationship\": \"children\"\n  },\n  \"where\": {\n    \"type\": \"exists\",\n    \"in_table\": {\n      \"type\": \"related\",\n      \"relationship\": \"friends\"\n    },\n    \"where\": {\n      \"type\": \"binary_op\",\n      \"operator\": \"equal\",\n      \"column\": {\n        \"name\": \"first_name\", // This column refers to the children's friend's name\n        \"column_type\": \"string\"\n      },\n      \"value\": {\n        \"type\": \"column\",\n        \"column\": {\n          \"path\": [\"$\"],\n          \"name\": \"first_name\", // This column refers to the parent's name\n          \"column_type\": \"string\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers for Event Trigger Payload\nDESCRIPTION: Specifies the Content-Type header used when sending the Event Trigger payload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/payload.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources with Include and Fields Parameters\nDESCRIPTION: Examples of GET requests demonstrating resource fetching with included relationships and sparse fieldsets\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /articles/1?include=comments\n\nGET /articles/1?include=comments.author\n\nGET /articles/1?include=comments.author,ratings\n\nGET /articles/1/relationships/comments?include=comments.author\n\nGET /articles?include=author&fields[articles]=title,body&fields[people]=name\n```\n\n----------------------------------------\n\nTITLE: Querying a Table with GraphQL Default Naming Convention\nDESCRIPTION: Example GraphQL query demonstrating the naming convention changes when 'graphql-default' is applied, showing camel case for field names and arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  myTable(orderBy: {dateOfBirth: asc}, limit: 10) {\n    id\n    dateOfBirth\n    lastSeen\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Request Payload Schema\nDESCRIPTION: JSON schema for the webhook request payload sent by Hasura to the validation endpoint, including version, role, and session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"<version-integer>\",\n    \"role\": \"<role-name>\",\n    \"session_variables\": {\n        \"x-hasura-user-id\": \"<session-user-id>\",\n        \"x-hasura-user-name\": \"<session-user-name>\"\n    },\n    \"data\": {\n        \"input\": [JSON-fied <model_name>_insert_input!]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Authentication for Terraform\nDESCRIPTION: Commands to authenticate with Google Cloud using the CLI and set the project for Terraform deployments. Required before creating any Google Cloud resources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Sorting by Array Relationship Aggregates\nDESCRIPTION: Query to fetch authors sorted by their article count in descending order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors (\n    order_by: {\n      articles_aggregate: {count: desc}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate{\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Egress Metric Definition\nDESCRIPTION: Metric definition for measuring total size of WebSocket messages sent in bytes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_websocket_messages_sent_bytes_total`\nType   | Counter\nLabels | `operation_name`, `parameterized_query_hash`\nUnit   | bytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Connector Source in Hasura\nDESCRIPTION: Metadata configuration for setting up a data connector source in Hasura GraphQL Engine. Defines backend configuration, source details, and relationship mappings between Album and Artist tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"replace_metadata\",\n  \"args\": {\n    \"metadata\": {\n      \"version\": 3,\n      \"backend_configs\": {\n        \"dataconnector\": {\n          \"reference\": {\n            \"uri\": \"http://localhost:8100/\"\n          }\n        }\n      },\n      \"sources\": [\n        {\n          \"name\": \"chinook\",\n          \"kind\": \"reference\",\n          \"tables\": [\n            {\n              \"table\": [\"Album\"],\n              \"object_relationships\": [\n                {\n                  \"name\": \"Artist\",\n                  \"using\": {\n                    \"manual_configuration\": {\n                      \"remote_table\": [\"Artist\"],\n                      \"column_mapping\": {\n                        \"ArtistId\": \"ArtistId\"\n                      }\n                    }\n                  }\n                }\n              ]\n            },\n            {\n              \"table\": [\"Artist\"],\n              \"array_relationships\": [\n                {\n                  \"name\": \"Album\",\n                  \"using\": {\n                    \"manual_configuration\": {\n                      \"remote_table\": [\"Album\"],\n                      \"column_mapping\": {\n                        \"ArtistId\": \"ArtistId\"\n                      }\n                    }\n                  }\n                }\n              ]\n            }\n          ],\n          \"configuration\": {\n            \"value\": {\n              \"tables\": [ \"Artist\", \"Album\" ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting User Data with GraphQL Mutation to Test Webhook\nDESCRIPTION: This GraphQL mutation inserts a new user into the 'users' table with name and email fields, which should trigger the webhook to send a welcome email. The mutation returns the ID of the newly created user record.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insert_users_one(object: { name: \"<YOUR_NAME>\", email: \"YOUR_EMAIL\" }) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Scheduled Event\nDESCRIPTION: This JSON object sends additional data when the Hasura scheduled event is triggered. It categorizes the event type as a 'coupon_reminder'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_type\": \"coupon_reminder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI on Linux/Mac - Basic\nDESCRIPTION: Basic installation command for Hasura CLI that installs the binary in /usr/local/bin on Linux or Mac systems.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/install-hasura-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Transform Request Method and Query Params in YAML\nDESCRIPTION: This snippet demonstrates how to transform the request method to GET and map payload to query parameters using the 'transforms' key in YAML format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n   request_method: GET\n   query_params:\n     param1: {{$.value1}}\n     param2: {{$.value2}}\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Cloud Preview App using GraphQL Mutation\nDESCRIPTION: This GraphQL mutation demonstrates how to create a Preview App for a Hasura Cloud project using the createGitHubPreviewApp API. It specifies project details, GitHub repository information, and environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/preview-apps.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createGitHubPreviewApp {\n  createGitHubPreviewApp(\n    payload: {\n      githubPersonalAccessToken: \"<github_access_token>\"\n      githubRepoDetails: { branch: \"main\", owner: \"my-org\", repo: \"my-repo\", directory: \"backend/hasura\" }\n      projectOptions: {\n        cloud: \"aws\"\n        region: \"us-east-2\"\n        plan: \"cloud_free\"\n        name: \"my-app_name\"\n        envVars: [\n          { key: \"HASURA_GRAPHQL_AUTH_HOOK\", value: \"https://my-webhook.com\" }\n          { key: \"MY_ENV_VAR_1\", value: \"my value 1\" }\n        ]\n      }\n    }\n  ) {\n    githubPreviewAppJobID # job ID of the Preview App creation job\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Initialize the Google Cloud SDK after installation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook with Express and Nodemailer\nDESCRIPTION: This JavaScript code creates an Express server that listens for POST requests at the `/expiration_check` endpoint. It authenticates the request using a secret header, queries a Hasura GraphQL endpoint for coupons expiring in two days, and sends email reminders to the users associated with those coupons using Nodemailer. The Nodemailer transporter is configured to use Ethereal's email service for testing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"const express = require('express');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\n\n// Create a Nodemailer transporter using Ethereal email service\n// Ideally, this configuration would be stored somewhere else\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create a testing account. ' + err.message);\n    return process.exit(1);\n  }\n\n  // If all goes as planned, here's the console telling us we're 👍\n  console.log('Credentials obtained, listening on the webhook...');\n\n  // Create a transporter object for nodemailer\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass,\n    },\n  });\n\n  // helper function to turn timestamp into a date\n  function timestampToDate(timestamp) {\n    const date = new Date(timestamp);\n    return date;\n  }\n\n  // Our route for the webhook\n  app.post('/expiration_check', async (req, res) => {\n    // confirm the auth header is correct — ideally, you'd keep the secret in an environment variable\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      return res.status(401).json({\n        message: 'Unauthorized',\n      });\n    }\n\n    // get our date ready for the query\n    const today = new Date();\n    const twoDaysFromNow = today.setDate(today.getDate() + 2);\n    const twoDaysFromNowTimestamp = new Date(twoDaysFromNow).toISOString();\n\n    // Fetch the data from our Hasura instance\n    async function getExpiringCoupons() {\n      const response = await fetch('<YOUR_CLOUD_PROJECT_ENDPOINT>', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-hasura-admin-secret': '<YOUR_ADMIN_SECRET>',\n        },\n        body: JSON.stringify({\n          query: `\n          query GetExpiringCoupons($two_days_from_now: timestamptz!) {\n            coupons(where: {expiration_date: {_lte: $two_days_from_now, _gte: today}}) {\n                id\n                code\n                expiration_date\n                user {\n                id\n                name\n                email\n                }\n              }\n            }\n          `,\n          variables: {\n            two_days_from_now: twoDaysFromNowTimestamp,\n          },\n        }),\n      });\n      const { data } = await response.json();\n      return data.coupons;\n    }\n\n    let coupons = await getExpiringCoupons();\n\n    // map over the data and send an email to each customer\n    async function sendCouponReminder(coupons) {\n      let outcomes = [];\n      coupons.map(async coupon => {\n        // Create a message object\n        const message = {\n          from: 'SuperStore.com <sender@SuperStore.com>',\n          to: `${coupon.user.name} <${coupon.user.email}>`,\n          subject: `You've got a coupon expiring soon, ${coupon.user.name.split(' ')[0]}!`,\n          text: `Yo ${coupon.user.name.split(' ')[0]},\\n\\nYour coupon code, ${\n            coupon.code\n          }, is expiring soon! Use it before ${timestampToDate(coupon.expiration_date)}.\\n\\nThanks,\\nSuperStore.com`,\n        };\n\n        // Send the message using the Nodemailer transporter\n        const info = await transporter.sendMail(message);\n\n        // Log the message info\n        console.log(`\\nMessage sent to ${coupon.user.name}: ${nodemailer.getTestMessageUrl(info)}`);\n\n        // add the info to the outcomes array\n        outcomes.push({\n          messageId: info.messageId,\n          previewUrl: nodemailer.getTestMessageUrl(info),\n        });\n        return outcomes;\n      });\n    }\n\n    await sendCouponReminder(coupons);\n\n    // Return a JSON response to the client\n    res.json({\n      message: 'Coupons sent!',\n    });\n  });\n\n  // Start the server\n  app.listen(4000, () => {\n    console.log('Server started on port 4000');\n  });\n});\n\"\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Inconsistency List Command in Bash\nDESCRIPTION: The basic command syntax for listing metadata inconsistencies in Hasura projects. Used to identify objects that are in an inconsistent state.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata inconsistency list [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging into Hasura Cloud via CLI\nDESCRIPTION: Command to log into Hasura Cloud using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura cloud login\n```\n\n----------------------------------------\n\nTITLE: REST API Endpoint Definition\nDESCRIPTION: Sample REST API endpoints showing the available HTTP methods and routes for user operations\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/rest-wrapper/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET /users\nGET /users/:userId\nPOST /users\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura GraphQL Engine Docker Image\nDESCRIPTION: YAML configuration example showing how to update the Hasura GraphQL Engine image version in the docker-compose file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Constructing Positioned Error in Rust for Hasura GraphQL Engine\nDESCRIPTION: This code creates a structured error object in Rust, likely used in the Hasura GraphQL Engine. It combines an error message with source position information, indicating that at least one item must be specified in a query at line 1, column 10.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0047_empty_variable_definition.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: OtherError(\n            \"At least one item must be specified\",\n        ),\n        position: SourcePosition {\n            line: 1,\n            col: 10,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Command for Deployment\nDESCRIPTION: Command to start the Hasura GraphQL Engine and PostgreSQL services in detached mode using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose-postgis/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Azure Functions Deployment Commands\nDESCRIPTION: Azure CLI commands for creating resource group, storage account, and function app, followed by deploying the application.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ az group create --name 'my-functions-group' --location southindia\n\n$ az storage account create --name 'myfunctionsstorage' --location southindia --resource-group 'my-functions-group' --sku Standard_LRS\n\n$ az functionapp create --name 'hello-graphql' --storage-account 'myfunctionsstorage' --resource-group 'my-functions-group' --consumption-plan-location southindia\n\n$ az functionapp deployment source config-zip  -g \"my-functions-group\" -n \"hello-graphql\" --src graphql.zip\n```\n\n----------------------------------------\n\nTITLE: Now Deployment Setup\nDESCRIPTION: Commands to install and configure Now deployment tool for hosting the webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g now\nnow login\n```\n\n----------------------------------------\n\nTITLE: Converting Data Types for Weaviate - Python\nDESCRIPTION: This snippet defines a function to convert PostgreSQL data types to Weaviate compatible types. It maps various data types and ensures that each property is assigned a valid Weaviate data type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef convert_data_types(properties):\n    print(properties)\n    valid_data_type_map = {\n        \"uuid\": \"text\",\n        \"string\": \"text\",\n        \"integer\": \"int\",\n        \"float\": \"number\",\n        \"timestamp with time zone\": \"text\",\n        \"bool\": \"boolean\",\n        \"datetime\": \"date\",\n        \"phone_number\": \"phoneNumber\",\n    }\n\n    converted_properties = []\n\n    for prop in properties:\n        prop_name = prop.get(\"name\")\n        data_type = prop.get(\"dataType\")\n        data_type = data_type[0]\n\n        if data_type is None:\n            raise ValueError(\n                f\"Property '{prop_name}' is missing the 'dataType' key.\")\n\n        converted_data_type = valid_data_type_map.get(data_type.lower())\n\n        if converted_data_type is None:\n            prop[\"dataType\"] = [data_type]\n        else:\n            prop[\"dataType\"] = [converted_data_type]\n        converted_properties.append(prop)\n\n    return converted_properties\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the metadata export command, including authentication, endpoint configuration, and logging options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_export.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura with Environment Variables in Docker Compose\nDESCRIPTION: Illustrates how to set up environment variables for Hasura GraphQL Engine in a docker-compose.yaml file, including database connections, console settings, and debugging options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.6'\nservices:\n  postgres:\n    image: postgres:12\n    restart: always\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n  graphql-engine:\n    image: hasura/graphql-engine:v2.15.0\n    ports:\n      - '8080:8080'\n    depends_on:\n      - 'postgres'\n    restart: always\n    environment:\n      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'\n      HASURA_GRAPHQL_DEV_MODE: 'true'\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log\n      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets\n      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\nvolumes:\n  db_data:\n```\n\n----------------------------------------\n\nTITLE: Health Check API Response\nDESCRIPTION: Sample successful response from the health check endpoint indicating the server is healthy.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/health.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Sample Webhook Response\nDESCRIPTION: Example JSON response returned by the NodeJS webhook after processing the trigger event.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"received 'b30cc7e6-9f3b-48ee-9a10-16cce333df40' for 'INSERT' operation on 'note' table in 'public' schema from 'note_trigger' trigger\",\n    \"oldData\": null,\n    \"newData\": {\n        \"text\": \"new-entry\",\n        \"id\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetupAction data type in Haskell\nDESCRIPTION: Definition of the SetupAction data type which encodes how to setup and tear down test system state. It pairs a setup function that returns a value with a teardown function that takes that value as input, ensuring proper cleanup even if exceptions occur.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\ndata SetupAction = forall a.\n  SetupAction\n    { setupAction :: IO a,\n      teardownAction :: Maybe a -> IO ()\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting PostgreSQL Primary Port\nDESCRIPTION: Command to retrieve the exposed port of the PostgreSQL primary server that has been mapped from the container's port 5432.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose port postgres-primary 5432\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container - Bash\nDESCRIPTION: This command runs a Prometheus Docker container, mapping port 9090 on the host to port 9090 in the container, and mounts a local configuration file for Prometheus metrics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9090:9090 -v /path/to/your/local/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Environment Variables in Hasura Cloud\nDESCRIPTION: Environment variables required for configuring the OTLP endpoint and authentication in Hasura Cloud. These variables are used to establish connection with Grafana Cloud's telemetry endpoints.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/grafana-cloud-otlp-guide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nOTLP_ENDPOINT=https://your-grafana-cloud-otlp-endpoint\nOTLP_AUTH_HEADER=Basic <base64(InstanceID:APIToken)>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Strict Data Type in Haskell\nDESCRIPTION: An example showing the preferred way of defining data types with strict fields. This approach helps avoid common pitfalls caused by excessive laziness.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_9\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\ndata Point = Point\n  { pointX :: !Double\n  , pointY :: !Double\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Dependencies\nDESCRIPTION: List of required Python packages for implementing the authentication system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nflask\nargon2-cffi\nrequests\npyjwt\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Response in GraphiQL\nDESCRIPTION: This snippet shows an example JSON response that corresponds to the GraphQL query provided above, returning order details and related user information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"data\": {\n    \"order\": [\n      {\n        \"id\": 1,\n        \"user_id\": 2,\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\"\n        }\n      }\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL query to select articles\nDESCRIPTION: This GraphQL query selects the `body`, `title`, and `author_id` fields from the `bigquery_articles` table. It's used to demonstrate the effect of the select permissions defined for the `editor` role, where only articles with empty titles are returned when the `X-Hasura-Role` is set to `editor`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/data-validations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"query {\\n  bigquery_articles {\\n    body\\n    title\\n    author_id\\n  }\\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Mutation Response Structure using JSON\nDESCRIPTION: This JSON snippet shows the structure of a mutation response from the `graphql-engine`. It contains an array of `operation_results`, where each element corresponds to a mutation operation in the request.  Each result includes the number of affected rows and the data returned, as requested by the `returning_fields` of the mutation operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_55\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"operation_results\": [ // There will be a result object per operation, returned here in the same order as in the request\n    {\n      \"affected_rows\": 1, // The number of rows affected by the mutation operation\n      \"returning\": [ // The rows that were affected; each row object contains the fields requested in `returning_fields`\n        {\n          \"FieldName\": \"FieldValue\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending PostgreSQL Dump to Hasura Edit PG Dump Service with curl\nDESCRIPTION: Command to send a PostgreSQL dump file to the Hasura Edit PG Dump service and save the cleaned output to a new file. The service removes SQL front matter, schema creation statements, comments, empty lines, and Hasura-created triggers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/scripts/edit-pg-dump/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --data-binary @file.sql https://hasura-edit-pg-dump.now.sh > cleaned.sql\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Regression Test Suite\nDESCRIPTION: Run the regression tests on a specified Hasura endpoint with the provided test suite ID and project ID. Exclude the 'v1/graphql' suffix in the URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/regression-tests.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura pro regression-tests run --testsuite-id 17609e8f-c976-4d91-818d-235e0ac215e0 --project-id a6b3e7eb-bc46-4340-9ce9-72a0a8991b76\n```\n\nLANGUAGE: bash\nCODE:\n```\nhasura pro regression-tests run --testsuite-id \\u003ctest-suite-id\\u003e --project-id \\u003cproject-id\\u003e  --endpoint \\u003chasura-instance-url\\u003e\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex Static Clients for ADFS SSO\nDESCRIPTION: YAML configuration for Dex static clients, specifying the client ID and redirect URIs for Hasura Console OAuth2 callback.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/adfs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Decimal\nDESCRIPTION: This GraphQL snippet provides an example of querying a decimal field. The `Decimal` scalar type represents an exact numeric value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    decimal_col: 0.8\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Local Development Server\nDESCRIPTION: This bash script installs the Apollo Server dependency and starts a local development server using Node.js. It demonstrates how to set up the environment for local testing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/google-cloud-functions/nodejs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --no-save apollo-server\n$ node localDev.js\n\nOutput:\n\nServer ready at http://localhost:4000/\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Format for Timescale Postgres\nDESCRIPTION: The structure of the PostgreSQL connection URL for connecting Hasura to a Timescale database. It includes the username, password, public IP, port, and database name with SSL mode required for secure connection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/timescale-cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>?sslmode=require\n```\n\n----------------------------------------\n\nTITLE: Query Request JSON for Filtering by Unrelated Tables\nDESCRIPTION: This JSON represents the query request generated for the GraphQL query when filtering by unrelated tables. It includes an 'exists' clause to check conditions in the Employee table before returning Customer data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Customer\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"fields\": {\n      \"Country\": {\n        \"type\": \"column\",\n        \"column\": \"Country\",\n        \"column_type\": \"string\"\n      },\n      \"CustomerId\": {\n        \"type\": \"column\",\n        \"column\": \"CustomerId\",\n        \"column_type\": \"number\"\n      },\n      \"FirstName\": {\n        \"type\": \"column\",\n        \"column\": \"FirstName\",\n        \"column_type\": \"string\"\n      },\n      \"LastName\": {\n        \"type\": \"column\",\n        \"column\": \"LastName\",\n        \"column_type\": \"string\"\n      },\n      \"SupportRepId\": {\n        \"type\": \"column\",\n        \"column\": \"SupportRepId\",\n        \"column_type\": \"number\"\n      }\n    },\n    \"where\": {\n      \"type\": \"exists\",\n      \"in_table\": {\n        \"type\": \"unrelated\",\n        \"table\": [\"Employee\"]\n      },\n      \"where\": {\n        \"type\": \"and\",\n        \"expressions\": [\n          {\n            \"type\": \"binary_op\",\n            \"operator\": \"equal\",\n            \"column\": {\n              \"name\": \"EmployeeId\",\n              \"column_type\": \"number\"\n            },\n            \"value\": {\n              \"type\": \"scalar\",\n              \"value\": 2,\n              \"value_type\": \"number\"\n            }\n          },\n          {\n            \"type\": \"binary_op\",\n            \"operator\": \"equal\",\n            \"column\": {\n              \"name\": \"City\",\n              \"column_type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"scalar\",\n              \"value\": \"Calgary\",\n              \"value_type\": \"string\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Geography\nDESCRIPTION: This GraphQL snippet shows how to query a geography field. The `geography` scalar type represents geographical data in the standard OpenGIS format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    point: \"POINT(32 210)\"\n    polygon: \"POLYGON((0 0, 2 2, 2 0, 0 0), (2 2, 3 4, 2 4))\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations\nDESCRIPTION: Import statements for React components used in the observability documentation page, including custom components for thumbnails, versioned links, product badges and icons.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport ProductBadge from '@site/src/components/ProductBadge';\nimport Observability from '@site/static/icons/features/observability.svg';\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query for Table Creation\nDESCRIPTION: This snippet shows a POST request to execute a SQL query that creates a table named 'item' with columns 'id', 'name', and 'category'. The request includes parameters such as the source database and SQL query, along with a flag to disable metadata consistency checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"run_sql\",\n  \"args\": {\n    \"source\": \"default\",\n    \"sql\": \"create table item ( id serial,  name text,  category text,  primary key (id))\",\n    \"check_metadata_consistency\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Infrastructure Prerequisites\nDESCRIPTION: Lists the required Docker components needed to run Hasura GraphQL Engine\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/docker-compose/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Docker](https://docs.docker.com/install/)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n```\n\n----------------------------------------\n\nTITLE: Tracking a Table or View in Hasura (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a table to be tracked by the Hasura GraphQL Engine. This operation allows the specified table to be exposed over the GraphQL API. The metadata directory must be updated, and the changes applied using the CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n- table:\n    schema: dbo\n    name: <table name>\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response JSON\nDESCRIPTION: Sample JSON response from the webhook showing the result of the mutation operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/mutation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"data\": {\n            \"insert_note_revision\": {\n                \"returning\": [\n                    {\n                        \"__typename\": \"note_revision\",\n                        \"id\": 1\n                    }\n                ],\n                \"affected_rows\": 1,\n                \"__typename\": \"note_revision_mutation_response\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plan Function Signature in Rust\nDESCRIPTION: Function signature for creating an execution plan from an OpenDD query, which would handle permissions and generate the appropriate plan.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn create_plan(&self, session: opendd::Sesion, query: opendd::Query) -> engine::Plan\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Shows additional options inherited from parent commands that can be used with the console command\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_console.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Defining Address Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on Address aggregate functions, with nested string aggregations for all address component fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_aggregate_order_by @oneOf {\n  # Scalar fields\n  StreetAddress: String_aggregate_order_by\n  City: String_aggregate_order_by\n  State: String_aggregate_order_by\n  PostalCode: String_aggregate_order_by\n  Country: String_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake JDBC URL as Environment Variable in Hasura Metadata (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add a Snowflake JDBC URL as an environment variable in the Hasura metadata configuration. It uses a template to retrieve the JDBC URL from an environment variable named SNOWFLAKE_JDBC_URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/snowflake/getting-started/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"template\": \"{\\\"fully_qualify_all_names\\\": false, \\\"jdbc_url\\\": \\\"{{getEnvironmentVariable(\\\"SNOWFLAKE_JDBC_URL\\\")}}\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the metadata clear command, including admin secret, endpoint configuration, and logging options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_clear.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Create Initial Migration from Server Schema\nDESCRIPTION: Command to generate an initial migration file capturing the entire current database schema using Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate create \"init\" --from-server\n```\n\n----------------------------------------\n\nTITLE: HTTP Signup Response Example\nDESCRIPTION: Example response from the signup endpoint containing a JWT token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 256\nServer: Werkzeug/1.0.1 Python/3.8.2\nDate: Sun, 10 May 2020 19:59:36 GMT\n\n{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.z9ey1lw9p89gUkAmWEa7Qbpa1R71TgfkjZnEunGJ1ig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Serverless VPC Access API\nDESCRIPTION: Command to enable the Serverless VPC Access API for creating VPC connectors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable vpcaccess.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: Command to apply metadata changes to the Hasura instance, which includes any Allow List configurations that have been defined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/allow-list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Ngrok Tunnel Command\nDESCRIPTION: Command to create a tunnel for exposing local webhook endpoint to the internet using ngrok\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Containerized Prometheus Configuration\nDESCRIPTION: Basic Prometheus configuration file for a containerized setup, defining global settings for scrape and evaluation intervals.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# my global config\nglobal:\n  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n  # scrape_timeout is set to the global default (10s).\n\n# Alertmanager configuration\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval '.\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Column Width Control Using HTML in Docusaurus MDX\nDESCRIPTION: Shows how to create a table using HTML syntax in Docusaurus MDX, which allows for column width control and handling of complex content like links and code snippets within table cells.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th width=\"20%\">Field</th>\n      <th width=\"40%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Region</td>\n      <td>The region of the datacenter where your New Relic account stores its data. <Link to=\"https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers\">Read more about regions on New Relic docs.</Link></td>\n    </tr>\n    <tr>\n      <td>API Key</td>\n      <td>API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from <Link to=\"https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you are in New Relic US region and <Link to=\"https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you're in New Relic EU region.</td>\n    </tr>\n    <tr>\n      <td>Host</td>\n      <td>The name of the originating host of the log and metrics.</td>\n    </tr>\n    <tr>\n      <td>Custom Attributes</td>\n      <td>Custom Attributes associated with your logs and metrics. A default source tag <code>hasura-cloud-metrics</code> is added to all exported logs and metrics. Attributes <code>project_id</code> and <code>project_name</code> are added to all exported metrics.</td>\n    </tr>\n    <tr>\n      <td>Service Name</td>\n      <td>The name of the application or service generating the log events.</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Describing Network Interface to Get Public IP in AWS CLI\nDESCRIPTION: Retrieves detailed information about the Elastic Network Interface to find the public IP address of the Hasura GraphQL Engine. This allows users to access the Hasura console in a web browser.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-network-interfaces --network-interface-id  eni-0fa40520aeEXAMPLE\n```\n\n----------------------------------------\n\nTITLE: Creating a Postgres Table Structure for CSV Import\nDESCRIPTION: SQL command to create a table that matches the structure of a CSV file with firstName, lastName, and email columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/import-data-from-csv.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nprofile (\n  firstName TEXT,\n  lastName TEXT,\n  email VARCHAR\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura SSO Providers for Auth0\nDESCRIPTION: JSON configuration for setting up the HASURA_GRAPHQL_SSO_PROVIDERS environment variable to enable Auth0 SSO in Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"<Auth0 Client ID>\",\n    \"admin_roles\": [\"admin\"],\n    \"name\": \"Auth0 Login\",\n    \"authorization_url\": \"https://some-auth0-app.us.auth0.com/authorize\",\n    \"request_token_url\": \"https://some-auth0-app.us.auth0.com/oauth/token\",\n    \"scope\": \"openid\",\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"https://some-auth0-app.us.auth0.com/.well-known/jwks.json\",\n      \"issuer\": \"https://some-auth0-app.us.auth0.com/\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Data Redaction Capability Declaration\nDESCRIPTION: JSON configuration for declaring data redaction capability in the agent. Required for implementing column-level access control in inherited roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"queries\": {\n    \"redaction\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Revision Table Structure in SQL\nDESCRIPTION: SQL table definition for the 'note_revision' table that tracks changes to notes with timestamp.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note_revision\n\nColumns:\n\nid         Integer auto-increment\nnote       Text\nnote_id    Integer\nupdate_at  Timestamp, default: now()\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Comparing Equal Geometries using _st_equals\nDESCRIPTION: GraphQL query using the _st_equals operator to find geometries that have exactly the same shape and size as a specified polygon.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  locations(where: {geometry: {_st_equals: {polygon: {type: \"Polygon\", coordinates: [[[-73.9857, 40.7484], [-73.9857, 40.759], [-73.9684, 40.759], [-73.9684, 40.7484], [-73.9857, 40.7484]]]}}}}) {\n    id\n    name\n    geometry\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Presets in YAML - MS SQL Server - Hasura GraphQL\nDESCRIPTION: This snippet demonstrates how to define column presets in the tables.yaml file within the metadata directory for the Hasura GraphQL Engine. It specifies the table schema, permissions for the user role, and the user_id preset value that is set based on a session variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-column-presets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: article\n  insert_permissions:\n    - role: user\n      permission:\n        check: {}\n        set:\n          user_id: x-hasura-User-Id\n        columns:\n          - content\n          - rating\n          - title\n        backend_only: false\n```\n\n----------------------------------------\n\nTITLE: Forcing Cache Refresh in GraphQL Query\nDESCRIPTION: Demonstrates how to force a cache refresh using the refresh argument, ensuring the latest data is retrieved\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/quickstart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyProducts @cached(refresh: true) {\n  products {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Upsert Parser in Haskell\nDESCRIPTION: Function signature for creating a parser to handle upsert arguments in the GraphQL schema. The parser takes an optional input parser and returns an InputFieldsParser for the upsert operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-upsert-mutations.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nmkUpsertParser ::\n    MonadParse m =>\n    Maybe (Parser 'Input m a) ->\n    InputFieldsParser m (Maybe a)\n```\n\n----------------------------------------\n\nTITLE: Deleting Google Cloud Project\nDESCRIPTION: Deletes the entire Google Cloud Project, removing all resources created during the deployment process.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects delete hasura\n```\n\n----------------------------------------\n\nTITLE: Decrementing Integer Columns in GraphQL\nDESCRIPTION: Mutation that decrements the 'likes' of an article by 2 using the _inc operator with a negative value. This demonstrates how to decrease values in integer fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/update.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_likes {\n  update_article(\n    where: {id: {_eq: 1}},\n    _inc: {likes: -2}  # initial value: 3\n  ) {\n    affected_rows\n    returning {\n      id\n      likes\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Google Cloud Function Trigger URL\nDESCRIPTION: This YAML snippet shows the structure of the httpsTrigger response, which contains the URL for the deployed Cloud function. This URL is used to set up the Hasura event trigger.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://us-central1-hasura-test.cloudfunctions.net/nodejs-echo\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Inheritance in Hasura GraphQL Engine\nDESCRIPTION: This YAML configuration demonstrates how to set up role inheritance in Hasura, allowing for intelligent merging of permission policies. It shows how to define private and public roles, and then combine them into a user role that can be safely assigned to all logged-in users.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/sql-server.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Role 1\nprivate: user can access their own data, and all fields of that data: [id, email, username]\n\n# Role 2\npublic: user can access anyone's data, but only id and username\n\n# Role3 = Role1 + Role 2\nuser: [public, private]\n\n# the user role can now safely be assigned to all logged-in users\n```\n\n----------------------------------------\n\nTITLE: Reloading Metadata with Metadata API\nDESCRIPTION: This code shows how to reload the Hasura metadata using the Metadata API. The request is sent to the `/v1/metadata` endpoint with the `reload_metadata` type and specified arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n    \\\"type\\\" : \\\"reload_metadata\\\",\\n    \\\"args\\\": {\\n        \\\"reload_remote_schemas\\\": true,\\n        \\\"reload_sources\\\": false,\\n        \\\"recreate_event_triggers\\\": true\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip\nDESCRIPTION: This command installs the Python packages required for the webhook: Flask for creating the web server, secure-smtplib and email for sending emails, and requests for making HTTP requests to the Hasura GraphQL endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install Flask secure-smtplib requests\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Group in Azure\nDESCRIPTION: This command creates a new resource group named 'hasura' in the 'westus' location using Azure CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name hasura --location westus\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter Multicurrency objects. Includes logic operators and scalar fields for currency properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_52\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Multicurrency_bool_exp!]\n  _or: [Multicurrency_bool_exp!]\n  _not: Multicurrency_bool_exp\n\n  # Scalar fields\n  Currency: String_bool_exp\n  Value: Decimal_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Running Regression Tests via Hasura CLI (Bash)\nDESCRIPTION: Command to fetch and run the entire test suite from Hasura Pro against a specified endpoint using the admin secret. Results are reported on the terminal and available in the Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/regression-tests.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura pro regression-test run --project prod --target-project dev --endpoint http://localhost:8080 --admin-secret adminsecretkey\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Secret in Docker Compose for Hasura\nDESCRIPTION: YAML configuration snippet showing how to set the admin secret as an environment variable in the docker-compose.yml file for Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v2.12.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\n  ...\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Deployment\nDESCRIPTION: Apply the Hasura deployment configuration to the Kubernetes cluster.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura SSO Demo with Docker Compose\nDESCRIPTION: Commands to clone the Hasura SSO demo repository, set up environment variables, and start the Docker Compose services for testing SSO configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/auth0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ee-sso-demo.git\ncd ee-sso-demo\ncp dotenv .env\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Checking GraphQL Engine Logs\nDESCRIPTION: Retrieves the logs for the GraphQL Engine container, useful for troubleshooting any deployment issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs deployment/hasura -c graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Root Field Properties\nDESCRIPTION: This snippet defines the parameters for customizing root field properties in GraphQL, including custom field names and descriptions for better clarity and usability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n| Key     | Required | Schema   | Description                                                                                                                                        |\n| ------- | -------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| name    | false    | `String` | The custom root field name                                                                                                                         |\n| comment | false    | `String` | Customize the description shown for the root field in GraphQL introspection. If null or omitted then an autogenerated description is used instead. |\n\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura V3 Engine with Custom Metadata\nDESCRIPTION: Command to start the Hasura V3 engine using custom metadata files, specifying paths for metadata, authentication config, and setting up OTLP endpoint and port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin engine -- \\\n    --metadata-path /path/to/project/engine/build/open_dd.json \\\n    --authn-config-path /path/to/project/engine/build/auth_config.json \\\n    --otlp-endpoint http://localhost:4317 \\\n    --port 3001\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment and Service for Hasura\nDESCRIPTION: These kubectl commands create the Kubernetes deployment and service for Hasura GraphQL engine using the previously configured YAML files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/kubernetes/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f deployment.yaml\nkubectl get -f svc.yaml\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation with JSON Constants\nDESCRIPTION: Sample GraphQL mutation demonstrating basic JSON field update with constant value\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_table(\n  where: {},\n  _json_modify:\n  {\n    data:\n    {\n      path: \"lax $.name\",\n      new_value: \"John Doe\"\n    }\n  }\n  )\n  { affected_rows }\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration for Hasura GraphQL Engine with CLI Migrations\nDESCRIPTION: This Dockerfile snippet shows how to use the CLI Migrations image for Hasura GraphQL Engine. It sets up the command to run the GraphQL engine with database URL, server port, and console enabled.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/cli-migrations/v2/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM hasura/graphql-engine:<version>.cli-migrations-v2\n\nCMD graphql-engine \\\n  --database-url $DATABASE_URL \\\n  serve \\\n  --server-port $PORT \\\n  --enable-console\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Certificates for Secure Communication\nDESCRIPTION: Creates and backs up a SQL Server certificate for secure communications in an Always On Availability Group. This includes setting up login and user accounts, a master key, and exporting a certificate for sharing with secondary nodes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUSE master\nGO\n\nCREATE LOGIN dbm_login WITH PASSWORD = 'Password1';\nCREATE USER dbm_user FOR LOGIN dbm_login;\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Password1';\ngo\nCREATE CERTIFICATE dbm_certificate WITH SUBJECT = 'dbm';\nBACKUP CERTIFICATE dbm_certificate\nTO FILE = '/tmp/dbm_certificate.cer'\nWITH PRIVATE KEY (\n      FILE = '/tmp/dbm_certificate.pvk',\n      ENCRYPTION BY PASSWORD = 'Password1'\n   );\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Secret JSON Object\nDESCRIPTION: Example configuration for JWT authentication with multiple optional parameters for token verification and claims mapping\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authentication/jwt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"<optional-type-of-key>\",\n  \"key\": \"<optional-key-as-string>\",\n  \"jwk_url\": \"<optional-url-to-refresh-jwks>\",\n  \"claims_namespace\": \"<optional-key-name-in-claims>\",\n  \"claims_namespace_path\":\"<optional-json-path-to-the-claims>\",\n  \"claims_format\": \"json|stringified_json\",\n  \"audience\": \"<optional-string-or-list-of-strings-to-verify-audience>\",\n  \"issuer\": \"<optional-string-to-verify-issuer>\",\n  \"claims_map\": \"<optional-object-of-session-variable-to-claim-jsonpath-or-literal-value>\",\n  \"allowed_skew\": \"<optional-number-of-seconds-in-integer>\",\n  \"header\": \"<optional-key-to-indicate-cookie-or-authorization-header>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Configuration\nDESCRIPTION: Base metadata configuration for tracking tables and functions without customization\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nsources:\n- name: wb\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: WORKBENCH_URL\n  tables:\n  - table: article\n  functions:\n  - function: search_articles\n```\n\n----------------------------------------\n\nTITLE: Displaying Hasura Metadata Command Options in SASS Format\nDESCRIPTION: Lists the available options for the 'hasura metadata' command, including admin secret, certificate authority path, endpoint configuration, and help options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for metadata\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n```\n\n----------------------------------------\n\nTITLE: Setting ClickHouse Connection String as Environment Variable in JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to configure the ClickHouse connection string using an environment variable for improved security. It shows the structure to add to the metadata.json file's configuration object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/clickhouse/getting-started/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"template\": \"{\\\"url\\\": \\\"your_clickhouse_url_here\\\", \\\"user\\\": \\\"your_clickhouse_user\\\", \\\"password\\\": \\\"{{getEnvironmentVariable(\\\"CLICKHOUSE_PASSWORD\\\")}}\\\", \\\"tables\\\": null}\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the upgrade command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_upgrade.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Referencing Metadata Types RFC in Markdown\nDESCRIPTION: This snippet demonstrates how to create a reference link in Markdown to the existing Metadata Types RFC document. It provides a hyperlink to the RFC document stored in the project's GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[Metadata Types RFC]: https://github.com/hasura/graphql-engine-mono/blob/main/contrib/metadata-types/RFC.md\n```\n\n----------------------------------------\n\nTITLE: SQL Implementation of Redacted Aggregations\nDESCRIPTION: Demonstrates how to apply data redaction to aggregate functions using CASE statements to conditionally include values in the aggregation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  MAX(\n    CASE\n      WHEN \"Id\" IN (1,2) THEN \"ColumnA\"\n      ELSE NULL\n    END\n  ) AS \"aggregate_max_ColumnA\",\n  COUNT(\n    CASE\n      WHEN \"Id\" IN (2,3) THEN \"ColumnC\"\n      ELSE NULL\n    END\n  ) AS \"aggregate_count_ColumnC\"\nFROM \"Test\"\n```\n\n----------------------------------------\n\nTITLE: Executing Hasura GraphQL Engine Downgrade Command\nDESCRIPTION: This command runs the Hasura GraphQL Engine Docker container to execute the downgrade command. It requires setting the HASURA_METADATA_DATABASE_URL environment variable and specifying the desired version to downgrade to.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/downgrading.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e HASURA_METADATA_DATABASE_URL=$DATABASE_URL hasura/graphql-engine:<VERSION> graphql-engine downgrade --to-<NEW-VERSION>\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available options specific to the metadata apply command including flags for consistency checking, dry runs, and output format selection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --disallow-inconsistent-metadata   disallow inconsistent metadata to be applied. Defaults to false\n    --dry-run                          show metadata generated from project directory without applying to server.  generated metadata will be printed as JSON by default, use -o flag for other display formats\n-h, --help                             help for apply\n-o, --output string                    specify an output format to show applied metadata. Allowed values: json, yaml (default \"json\")\n```\n\n----------------------------------------\n\nTITLE: Removing Event Trigger Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to remove an event trigger configuration from a table's metadata file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n   schema: public\n   name: author\nevent_triggers:\n   - name: author_trigger\n   definition:\n      enable_manual: false\n      insert:\n         columns: \"*\"\n      update:\n         columns: \"*\"\n   webhook: https://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Accessing Relay Schema in Hasura GraphQL Engine\nDESCRIPTION: This snippet explains how to access the Relay schema for Postgres tables with a primary key defined in Hasura GraphQL Engine, using the /v1beta1/relay endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nThe Relay schema can be accessed through `/v1beta1/relay` endpoint.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Native Query Relationships with Arguments\nDESCRIPTION: Example GraphQL query that demonstrates how to query authors and their articles with different argument values. The query retrieves author names and their articles with both short and long excerpts based on a length parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_authors {\n    name\n\n    short_excerpt: articles(args: { length: 10 }) {\n      title\n      contents\n    }\n\n    long_excerpt: articles(args: { length: 100 }) {\n      title\n      contents\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drop BigQuery Logical Model Select Permission\nDESCRIPTION: API endpoint to remove select permissions from a logical model in BigQuery source. Requires source, function name and role specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"bigquery_drop_logical_model_select_permission\",\n    \"args\": {\n       \"source\": \"default\",\n       \"function\": \"get_articles\",\n       \"role\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings Configuration\nDESCRIPTION: JSON schema mappings for VS Code JSON and YAML files\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\"**/metadata.json\"],\n      \"url\": \"./MetadataExport.schema.json\"\n    }\n  ],\n  \"yaml.schemas\": {\n    \"./ActionsYAML.schema.json\": \"**/actions.yaml\",\n    \"./AllowListYAML.schema.json\": \"**/allow_list.yaml\",\n    \"./CronTriggerYAML.schema.json\": \"**/cron_triggers.yaml\",\n    \"./FunctionsYAML.schema.json\": \"**/functions.yaml\",\n    \"./QueryCollectionsYAML.schema.json\": \"**/query_collections.yaml\",\n    \"./RemoteSchemasYAML.schema.json\": \"**/remote_schemas.yaml\",\n    \"./TablesYAML.schema.json\": \"**/tables.yaml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database on Azure PostgreSQL Server\nDESCRIPTION: This command creates a new database named 'hasura' on the previously created PostgreSQL server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naz postgres db create --resource-group hasura \\\n   --server-name \"<server_name>\" \\\n   --name hasura\n```\n\n----------------------------------------\n\nTITLE: Example of Filtering using Exists Expression with Same Name\nDESCRIPTION: This JSON snippet shows a filtering condition that checks if any children of a person share the same first name as that person, using a column reference in the exists expression.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"exists\",\n  \"in_table\": {\n    \"type\": \"related\",\n    \"relationship\": \"children\"\n  },\n  \"where\": {\n    \"type\": \"binary_op\",\n    \"operator\": \"equal\",\n    \"column\": {\n      \"name\": \"first_name\", // This column refers to the child's name,\n      \"column_type\": \"string\"\n    },\n    \"value\": {\n      \"type\": \"column\",\n      \"column\": {\n        \"path\": [\"$\"],\n        \"name\": \"first_name\", // This column refers to the parent's name\n        \"column_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cabal Project for C Dependencies\nDESCRIPTION: Adds configuration to cabal.project.local to specify include and library directories for C dependencies. This allows Cabal to find the required libraries during compilation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npackage odbc\n  extra-include-dirs: /opt/homebrew/opt/unixodbc/include\n  extra-lib-dirs: /opt/homebrew/opt/unixodbc/lib\n\npackage pcre-light\n  extra-include-dirs: /opt/homebrew/opt/pcre/include\n  extra-lib-dirs: /opt/homebrew/opt/pcre/lib\n\npackage postgresql-libpq\n  extra-include-dirs:\n    /opt/homebrew/opt/libpq/include\n    /opt/homebrew/opt/openssl/include\n  extra-lib-dirs:\n    /opt/homebrew/opt/libpq/lib\n    /opt/homebrew/opt/openssl/lib\n\npackage pg-client\n  extra-include-dirs:\n    /opt/homebrew/opt/libpq/include\n    /opt/homebrew/opt/openssl/include\n  extra-lib-dirs:\n    /opt/homebrew/opt/libpq/lib\n    /opt/homebrew/opt/openssl/lib\n```\n\n----------------------------------------\n\nTITLE: Track Logical Model via Metadata API (Generic)\nDESCRIPTION: This HTTP request shows the structure for tracking a generic logical model using the Hasura Metadata API. The `mssql_track_logical_model` type is used. The important parameters are `source`, `name`, and `fields`.  Each field must have a `name`, `type`, `nullable` property, and can optionally have a `description`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Logging Health Check Timeout in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet demonstrates the JSON structure of a health check log when the check times out. It includes the source name, status, timestamp, and internal configuration details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"warn\",\n  \"timestamp\": \"2022-07-28T12:28:16.165+0530\",\n  \"type\": \"health-check-log\",\n  \"detail\": {\n    \"source_name\": \"mssql\",\n    \"status\": \"TIMEOUT\",\n    \"timestamp\": \"2022-07-28T06:58:16.165Z\",\n    \"error\": null,\n    \"internal\": {\n      \"interval\": 5,\n      \"max_retries\": 3,\n      \"retry_iteration\": 3,\n      \"timeout\": 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Remote Relationship in YAML\nDESCRIPTION: This YAML snippet is used to create remote relationships between schemas in the Hasura GraphQL engine. It specifies the left-hand side schema attributes and the relationship definition directed towards a remote schema or a database source. Postgres is the only supported database for the right-hand side. The required parameters include the schema name, type name, relationship name, and a definition map. The snippet illustrates the usage of the required keys and values needed for defining such relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntype: create_remote_schema_remote_relationship\nargs:\n  remote_schema: LeftHandSide\n  type_name: LeftHandSideTypeName\n  name: RelationshipName\n  definition:\n    to_remote_schema:\n      remote_schema: RightHandSideSchema\n      lhs_fields: [LHSJoinKeyName]\n      remote_field:\n        rhsFieldName:\n          arguments:\n            ids: $LHSJoinKeyName\n\ntype: create_remote_schema_remote_relationship\nargs:\n  remote_schema: LeftHandSide\n  type_name: LeftHandSideTypeName\n  name: RelationshipName\n  definition:\n    to_source:\n      source: RightHandSideSource\n      table: {schema: public, name: RHSTable}\n      relationship_type: object\n      field_mapping:\n        LHSJoinKeyName: RHSColumnName\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Header in GraphiQL\nDESCRIPTION: These plaintext snippets show the key-value pair for the authorization header used in GraphiQL, employing Bearer JWT token for authenticating requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNlYW4iLCJlbWFpbCI6InNlYW5kZW1vQGhhc3VyYS5pbyIsImlhdCI6MTUxNjIzOTAyMiwiaHR0cHM6Ly9oYXN1cmEuaW8vand0L2NsYWltcyI6eyJ4LWhhc3VyYS1hbGxvd2VkLXJvbGVzIjpbInVzZXIiLCJhZG1pbiJdLCJ4LWhhc3VyYS1kZWZhdWx0LXJvbGUiOiJ1c2VyIiwieC1oYXN1cmEtdXNlci1pZCI6IjdjZjBhNjZjLTY1YjctMTFlZC1iOTA0LWZiNDlmMDM0ZmJiYiJ9fQ.jSp42PsCa4r-2ObfopkiDBvTn9nDysIv-NOIEnU3wR0\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Bytes\nDESCRIPTION: This GraphQL snippet shows an example of querying a bytes field. The `Bytes` scalar type encodes raw binary data, represented as UTF-8 character sequences.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    bytes: \"Raven\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Securing Hasura Metrics Endpoint with Secret\nDESCRIPTION: Environment variable configuration to secure the Prometheus metrics endpoint with a secret token to prevent unauthorized access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_GRAPHQL_METRICS_SECRET=<secret>\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Engine with Cabal\nDESCRIPTION: Command to run the GraphQL Engine server using Cabal, specifying database URL and console options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cabal new-run -- exe:graphql-engine \\\n    --database-url='postgres://<user>:<password>@<host>:<port>/<dbname>' \\\n    serve --enable-console --console-assets-dir=frontend/dist/apps/server-assets-console-ce\n```\n\n----------------------------------------\n\nTITLE: Deleting Migration Records from Server Only\nDESCRIPTION: Command to delete migration records from the Hasura server without affecting local files. This removes the record of migrations being applied but doesn't roll back database schema changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate delete --all --server --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Defining String Aggregate Selection Options in GraphQL\nDESCRIPTION: This input type and enum define aggregate functions that can be applied to string fields, such as count, count distinct, max, and min operations, along with a placeholder for string concatenation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_81\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_aggregate_select @oneOf {\n  _unary_fn: String_aggregate_select_unary\n  _concat: String_concat_aggregate_args\n}\n\nenum String_aggregate_select_unary {\n  _count\n  _count_distinct\n  _max\n  _min\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura with Snowflake Docker Compose Configuration\nDESCRIPTION: Commands to download the Docker Compose configuration file for Hasura with Snowflake connector. Users can choose between wget or curl to retrieve the configuration file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/snowflake/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/snowflake/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/snowflake/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Deploy SQL Certificates to Secondary Nodes\nDESCRIPTION: Copies the previously exported SQL Server certificates from the primary node to the local system, and then transfers them to each secondary node for configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp sqlNode1:/tmp/dbm_certificate.cer .\ndocker cp sqlNode1:/tmp/dbm_certificate.pvk .\ndocker cp dbm_certificate.cer sqlNode2:/tmp/\ndocker cp dbm_certificate.pvk sqlNode2:/tmp/\ndocker cp dbm_certificate.cer sqlNode3:/tmp/\ndocker cp dbm_certificate.pvk sqlNode3:/tmp/\n```\n\n----------------------------------------\n\nTITLE: Connecting Database Using Hasura CLI YAML Configuration\nDESCRIPTION: YAML configuration to connect a database to Hasura using the CLI. The configuration specifies database connection information with environment variables for the connection URL and pool settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/database-config/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: <db_name>\n  configuration:\n    connection_info:\n      database_url:\n        from_env: <DB_URL_ENV_VAR>\n      pool_settings:\n        idle_timeout: 180\n        max_connections: 50\n        retries: 1\n    tables: []\n    functions: []\n```\n\n----------------------------------------\n\nTITLE: Starting Development Services\nDESCRIPTION: Commands to start Postgres, MSSQL and GraphQL Engine services for development using dev.sh script.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nscripts/dev.sh postgres\nscripts/dev.sh mssql\nscripts/dev.sh graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Aggregate Query Example\nDESCRIPTION: Demonstrates a simple GraphQL query using max aggregate function on ArtistId column\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist_aggregate {\n    aggregate {\n      max {\n        ArtistId\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Prometheus Authentication\nDESCRIPTION: Command to test the Prometheus authentication by attempting to access the metrics endpoint with the configured username and password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:<YOUR_PASSWORD> http://localhost:9090/metrics\n```\n\n----------------------------------------\n\nTITLE: Building Console Assets for GraphQL Engine\nDESCRIPTION: Installs dependencies and builds the console assets for the GraphQL Engine. This step requires Python 2 to be available in the system path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd frontend\nnpm ci\nnpm run server-build:ce\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Notes and Note Revisions in SQL\nDESCRIPTION: SQL schema for creating 'notes' and 'note_revision' tables. The 'notes' table stores the main note data, while 'note_revision' tracks revisions with timestamps and foreign key relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs6/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: notes\n\nColumns:\nid: Integer auto-increment\nnote: Text\n\nTable name: note_revision\n\nColumns:\nid: Integer auto-increment\nnote: Text\nnote_id: Integer (foreign key to notes.id)\nupdate_at: Timestamp, default `now()`\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cloud Function\nDESCRIPTION: YAML configuration file containing Google Maps API key and Hasura GraphQL endpoint URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# .env.yaml\nGMAPS_API_KEY: '[GMAPS_API_KEY]'\nHASURA_GRAPHQL_ENGINE_URL: 'http://[HGE_IP]/v1/graphql'\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install required Python packages for the webhook implementation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install Flask[async] openai requests\n```\n\n----------------------------------------\n\nTITLE: Hasura Environment Configuration\nDESCRIPTION: Environment variables required to configure Hasura with the authentication webhook and admin secret key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_GRAPHQL_ADMIN_SECRET=myadminsecretkey\nHASURA_GRAPHQL_AUTH_WEBHOOK=http://localhost:5000/auth-webhook\n```\n\n----------------------------------------\n\nTITLE: Example Hasura Gateway Check Command\nDESCRIPTION: Shows a real-world example of the check command with multiple flags including gateway-url, configuration file path, and admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --gateway-url https://gateway-hasura-app.hasura.app --gateway-configuration-file /path/to/gateway-configuration.json --admin-secret myadminsecret check\n```\n\n----------------------------------------\n\nTITLE: Successful Template Validation Response\nDESCRIPTION: Example of a successful template validation response showing the transformed payload and request details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payload\": \"world\",\n  \"headers\": [\n    [\n      \"content-type\",\n      \"application/json\"\n    ]\n  ],\n  \"method\": \"GET\",\n  \"webhook_url\": \"https://localhost:1234/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Webhook Implementation\nDESCRIPTION: Partial Python implementation of the webhook showing OpenAI integration and review visibility functions\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport openai\nimport requests\nimport json\n\napp = Flask(__name__)\n\n# Hasura and OpenAI config\nconfig = {\n    'url': '<YOUR_PROJECT_ENDPOINT>',\n    'secret': '<YOUR_ADMIN_SECRET>',\n    'openAIKey': '<YOUR_OPENAI_KEY>',\n}\n\n# OpenAI API config and client\nopenai.api_key = config[\"openAIKey\"]\n\nprompt = (\n    \"You are a content moderator for SuperStore.com. A customer has left a review for a product they purchased. \"\n    'Your response should only be a JSON object with two properties: \"feedback\" and \"is_appropriate\". '\n    'The \"feedback\" property should be a string containing your response to the customer only if the review \"is_appropriate\" value is false. '\n    \"The feedback should be on why their review was flagged as inappropriate, not a response to their review. \"\n    'The \"is_appropriate\" property should be a boolean indicating whether or not the review contains inappropriate content and it should be set by you.'\n    '\"is_appropriate\" is set to TRUE for appropriate content and to FALSE for inappropriate content.'\n    \"The review is as follows:\"\n)\n\n\n# Send a request to ChatGPT to see if the review contains inappropriate content\ndef check_review_with_chat_gpt(review_text):\n    try:\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\"role\": \"system\", \"content\": prompt},\n                {\"role\": \"user\", \"content\": review_text},\n            ],\n        )\n        response_content = response[\"choices\"][0][\"message\"][\"content\"]\n        return json.loads(response_content)\n    except Exception as e:\n        print(f\"Error evaluating content: {review_text}\")\n        print(str(e))\n        return None\n\n\n# Mark their review as visible if there's no feedback\nasync def mark_review_as_visible(user_review, review_id):\n    response = requests.post(\n        config[\"url\"],\n        json={\n            \"query\": \"\"\"\n        mutation UpdateReviewToVisible($review_id: uuid!) {\n            update_reviews_by_pk(pk_columns: {id: $review_id}, _set: {is_visible: true}) {\n                id\n            }\n        }      \n        \"\"\",\n            \"variables\": {\n                \"review_id\": review_id,\n            },\n        },\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"x-hasura-admin-secret\": config[\"secret\"],\n        },\n    )\n    print(f\"🎉 Review approved: {user_review}\")\n    data = response.json()\n    return data.get(\"update_reviews_by_pk\", None)\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Command Options\nDESCRIPTION: Specific options available for the actions codegen command, including deriving from existing operations and help flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_codegen.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --derive-from string   derive Action from a Hasura operation\n-h, --help                 help for codegen\n```\n\n----------------------------------------\n\nTITLE: Setting Table Custom Fields\nDESCRIPTION: Deprecated API to set custom root fields and column names for an existing tracked table 'author'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"set_table_custom_fields\",\n   \"version\": 2,\n   \"args\": {\n     \"table\": \"author\",\n     \"custom_root_fields\": {\n        \"select\": \"Authors\",\n        \"select_by_pk\": \"Author\",\n        \"select_aggregate\": \"AuthorAggregate\",\n        \"insert\": \"AddAuthors\",\n        \"insert_one\":\"AddAuthor\",\n        \"update\": \"UpdateAuthors\",\n        \"update_by_pk\": \"UpdateAuthor\",\n        \"delete\": \"DeleteAuthors\",\n        \"delete_by_pk\": \"DeleteAuthor\"\n     },\n     \"custom_column_names\": {\n        \"id\": \"authorId\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootFieldAlias Data Type in Haskell\nDESCRIPTION: This Haskell code snippet defines the RootFieldAlias data type to represent root fields with optional namespaces. It also introduces the RootFieldMap type alias for use in place of InsOrdHashMap Name a.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/source-customization.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\ndata RootFieldAlias = RootFieldAlias\n  { _rfaNamespace :: !(Maybe G.Name),\n    _rfaAlias :: !G.Name\n  }\n  deriving (Show, Eq, Generic)\n\ntype RootFieldMap = InsOrdHashMap RootFieldAlias\n```\n\n----------------------------------------\n\nTITLE: Using the Managed Monad for Resource Management in Haskell\nDESCRIPTION: Demonstrates how to use the Managed monad to simplify resource management, replacing the nested structure with a more linear and readable approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nmain = runManaged do\n  loggers    <- managed withLoggers\n  pgPool     <- managed withPGPool\n  mssqlPool  <- managed withMSSQLPool\n  metadataDB <- managed withMetadataConnection\n  runEngine loggers pgPool mssqlPool metadataDB\n```\n\n----------------------------------------\n\nTITLE: Querying Author with Computed Field in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch an author using a computed field 'full_name' in the filter condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/computed-fields-filters-perms-orderby.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: {full_name: {_eq: \"Bob Morley\"}}){\n    id\n    full_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Migrations with CLI\nDESCRIPTION: CLI command to apply Hasura migrations after creating migration files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Defining Address Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering Address query results by scalar fields such as address components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ninput Address_order_by @oneOf {\n  # Scalar fields\n  StreetAddress: order_by\n  City: order_by\n  State: order_by\n  PostalCode: order_by\n  Country: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Redelivering Event with Hasura Metadata API\nDESCRIPTION: Redelivers a failed event by its ID, resetting the retry count and following the configured retry policy.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_redeliver_event\",\n    \"args\" : {\n        \"event_id\": \"ad4f698f-a14e-4a6d-a01b-38cd252dd8bf\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing columns across related tables in permission boolean expressions example in GraphQL\nDESCRIPTION: An example demonstrating how to compare columns across related tables in permission boolean expressions. This example shows checking inventory quantities before inserting items into a shopping cart.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\nConsider two tables, `items(id, name, quantity)` and `shopping_cart(id, item_id, quantity)`\nand these two tables are related via the `item_id` column. Now, while defining insert permission\non the `shopping_cart` table, there can be a check to insert an item into the shopping cart\nonly when there are enough present in the items inventory.\n```\n\n----------------------------------------\n\nTITLE: Defining Group By Field Selection Type for Invoice in GraphQL\nDESCRIPTION: This type allows selection of fields from the group key or objects from the group. It includes fields for accessing the group key and group aggregate, with configurable field names in OpenDD.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_94\n\nLANGUAGE: graphql\nCODE:\n```\ntype Invoice_groups {\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupKeyFieldName\n  group_key: Invoice_grouping_key_fields!\n  # Name customizable in OpenDD: GraphqlConfig.definition.groups.groupAggregateFieldName\n  group_aggregate: Invoice_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inherited Roles via HTTP API\nDESCRIPTION: Sends a POST request to Hasura's metadata API to create an inherited role. This requires HTTP headers specifying content type and admin role, along with a JSON body containing the role type, name, and set of roles to inherit from.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"add_inherited_role\",\n  \"args\": {\n     \"role_name\":\"sample_inherited_role\",\n     \"role_set\":[\n        \"user\",\n        \"editor\"\n     ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Snowflake Connector Health\nDESCRIPTION: Example showing how to check the health of the Snowflake connector by accessing its health endpoint. The connector runs on port 8081 and provides a health API endpoint for monitoring.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/snowflake/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:8081/api/v1/snowflake/health\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for REST Endpoint\nDESCRIPTION: This JSON snippet illustrates the expected response when querying the REST endpoint for a single product. It returns the product's details, including id, name, and description, ensuring that the data is encapsulated under the 'products_by_pk' key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products_by_pk\": {\n    \"id\": \"7992fdfa-65b5-11ed-8612-6a8b11ef7372\",\n    \"name\": \"The Original Tee\",\n    \"description\": \"When you want to keep it simple\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Options for Metadata Drop\nDESCRIPTION: Available flags specific to the metadata inconsistency drop command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_drop.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for drop\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project\nDESCRIPTION: Command to set the current project ID in the gcloud CLI configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Notes and Revision Tracking\nDESCRIPTION: SQL schema specification for creating 'notes' and 'note_revision' tables. The schema establishes a relationship between notes and their revision history with appropriate columns for tracking changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/python/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: notes\n\nColumns:\nid: Integer auto-increment\nnote: Text\n\nTable name: note_revision\n\nColumns:\nid: Integer auto-increment\nnote: Text\nnote_id: Integer (foreign key to notes.id)\nupdate_at: Timestamp, default `now()`\n```\n\n----------------------------------------\n\nTITLE: Edge Type Definition\nDESCRIPTION: GraphQL type definition for the Edge object containing cursor and node fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype tableEdge {\n  cursor: String!\n  node: table!\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Template and AST in Haskell\nDESCRIPTION: This snippet provides an example of a JSON template using the 'go-basic' syntax and its corresponding Abstract Syntax Tree (AST) representation in Haskell.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\nexampleJson = [r|\n{\n  \"author\": {\n    \"name\": {{$.event.name}},\n    \"age\": {{$.event.age}},\n    \"articles\": [\n{{ range _, $article $.event.author.articles }}\n      {\n        \"id\": {{$article.id}},\n        \"title\": {{$article.title}}\n      }\n{{ end }}\n    ]\n  }\n}\n|]\n\nexampleAst :: ValueExt\nexampleAst =\n  Object $ M.fromList\n  [ (\"author\"\n    , Object $ M.fromList\n      [ (\"name\", Path [Obj \"event\", Obj \"name\"])\n      , (\"age\", Path [Obj \"event\", Obj \"age\"])\n      , (\"articles\"\n        , Range Nothing \"$article\" (Path [Obj \"$\", Obj \"event\", Obj \"author\", Obj \"articles\"])\n            [ Object $ M.fromList\n                [ (\"id\", Path [Obj \"$article\", Obj \"id\"])\n                , (\"title\", Path [Obj \"$article\", Obj \"title\"])\n                ]\n            ]\n\n        )\n      ]\n    )\n  ]\n```\n\n----------------------------------------\n\nTITLE: Connecting VPC to Service Networking API\nDESCRIPTION: Command to establish VPC peering connection between the VPC network and the Service Networking API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services vpc-peerings connect \\\n    --service=servicenetworking.googleapis.com \\\n    --ranges=google-managed-services-default \\\n    --network=default \\\n    --project=<PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Declaring Foreach Query Support in Agent Capabilities\nDESCRIPTION: JSON structure for data connector agents to declare support for foreach queries. This capability enables the agent to be used as a target data source for remote relationships in Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"queries\": {\n    \"foreach\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Object Type for Articles - MS SQL Server\nDESCRIPTION: This GraphQL definition outlines the generated object type for the articles table, specifying its fields and their types, which can be queried through the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Articles {\n  id: Int\n  title: String\n  content: String\n  rating: Int\n  author_id: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Single Resource Selection\nDESCRIPTION: Examples of fetching single resources by unique identifier\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /<modelname>/<unique-identifier>\n\nGET /articles/1\nGET /articles/1\nGET /articles/1/author\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura CLI project with endpoint\nDESCRIPTION: This command initializes a Hasura CLI project with a specific endpoint, which is typically the local project endpoint. It creates the `migrations` and `metadata` directories and a `config.yaml` file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura init <project-name> --endpoint <local-project-endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Connection with SSL Authentication using psql\nDESCRIPTION: This command uses psql to test the connectivity to the PostgreSQL database with SSL authentication. It includes the same connection string format as the Hasura configuration, allowing users to verify the connection directly from the Hasura container.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npsql \"postgresql://<user>@<host>:<port>/<database>?sslmode=verify-ca&sslcert=/path/to/client.crt&sslkey=/path/to/client.pem&sslrootcert=/path/to/rootCA.crt\"\n```\n\n----------------------------------------\n\nTITLE: Despliegue en DigitalOcean con un clic - Motor Hasura GraphQL\nDESCRIPTION: Botón para desplegar rápidamente el Motor Hasura GraphQL en DigitalOcean a través de su marketplace.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/translations/README.mx_spanish.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to DigitalOcean](https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png)](https://marketplace.digitalocean.com/apps/hasura?action=deploy&refcode=c4d9092d2c48&utm_source=hasura&utm_campaign=readme)\n```\n\n----------------------------------------\n\nTITLE: Installing direnv configuration for Nix\nDESCRIPTION: Creates a local direnv configuration file to use the Nix flake for development environment setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nuse flake\n```\n\n----------------------------------------\n\nTITLE: Updated Export Metadata Response Format in Hasura GraphQL Engine\nDESCRIPTION: This JSON structure shows the proposed changes to the export_metadata API response, including the new resourceVersion field alongside the existing metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/optimistic-concurrency-control.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"resourceVersion\": \"x\",\n   \"metadata\": \"Metadata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Badge Component - React\nDESCRIPTION: This snippet renders the ProductBadge component, indicating different product tiers (free, pro, ee) for users during the project creation process. It visually informs users of available options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ProductBadge free pro ee />\n```\n\n----------------------------------------\n\nTITLE: Generated Action Types\nDESCRIPTION: Auto-generated GraphQL types for the derived action defining the mutation and output type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/derive.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  insertAuthor(name: String): InsertAuthorOutput\n}\n\ntype InsertAuthorOutput {\n  id: Int!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in with Hasura Pro CLI\nDESCRIPTION: This command initiates the login process for Hasura Pro CLI. It prompts the user to enter their personal access token, which can be generated from the Hasura Cloud account settings. The token is used for authenticating all API interactions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura pro login\n```\n\n----------------------------------------\n\nTITLE: Compiling console assets in Node.js\nDESCRIPTION: Commands to compile the console assets using Node.js and npm. This process is required before building the server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd frontend\n$ nvm use\n$ npm ci\n$ npm run server-build:ce\n$ cd ..\n```\n\n----------------------------------------\n\nTITLE: Structuring API Request with JSON:API Pagination and Sorting\nDESCRIPTION: This URL query string demonstrates how to request specific fields, implement pagination, and apply sorting using JSON:API conventions. It selects only the ArtistId and Name fields from the Artist resource, limits results to 5 items starting at offset 0, and sorts by Name in descending order (indicated by the minus sign).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/reversed-ordering/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nfields[Artist]=ArtistId,Name&page[offset]=0&page[limit]=5&sort=-Name\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI Plugin Basic Command\nDESCRIPTION: The basic command syntax for installing a Hasura CLI plugin. Requires specifying the plugin name as an argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_install.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins install [plugin-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Tracking Volatile SQL Function as Mutation\nDESCRIPTION: Example of tracking a VOLATILE SQL function 'reset_widget' as a mutation endpoint using the pg_track_function API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_track_function\",\n    \"args\": {\n        \"function\": {\n            \"schema\": \"public\",\n            \"name\": \"reset_widget\"\n        },\n        \"configuration\": {\n            \"exposed_as\": \"mutation\"\n        },\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Web Configuration\nDESCRIPTION: Command to check the syntax of the Prometheus web configuration file using the promtool utility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npromtool check web-config /etc/prometheus/web.yml\n```\n\n----------------------------------------\n\nTITLE: Running Tests for SQLite Data Connector Agent\nDESCRIPTION: Command to run tests for the SQLite data connector agent using cabal, with specific environment variables set for testing mutations and datasets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncabal run dc-api:test:tests-dc-api -- test --agent-base-url http://localhost:8100 sandwich --tui\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Root Fields via BigQuery Metadata API\nDESCRIPTION: This HTTP POST request sets custom root field names for a table in the GraphQL API. The request modifies the 'authors' table to expose new names for the select fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/custom-field-names.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n\"POST /v1/metadata HTTP/1.1\\nContent-Type: application/json\\nX-Hasura-Role: admin\\n\\n{\\n  \\\"type\\\": \\\"bigquery_set_table_customization\\\",\\n  \\\"args\\\": {\\n    \\\"source\\\": \\\"<db_name>\\\",\\n    \\\"table\\\": \\\"authors\\\",\\n    \\\"configuration\\\": {\\n      \\\"column_config\\\": {\\n        \\\"id\\\": {\\n          \\\"custom_name\\\": \\\"AuthorId\\\"\\n        }\\n      },\\n      \\\"custom_root_fields\\\": {\\n        \\\"select\\\": \\\"authors\\\",\\n        \\\"select_aggregate\\\": \\\"authors_aggregate\\\"\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Subscription Response Examples\nDESCRIPTION: Example JSON responses from a streaming subscription showing batched message delivery.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"message\": \"How are you!\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"id\": 5,\n      \"message\": \"I am fine\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hasura CLI Plugin Basic Command\nDESCRIPTION: The basic command syntax for uninstalling a Hasura CLI plugin. Takes the plugin name as an argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_uninstall.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins uninstall [plugin-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Customizing BigQuery Table Configuration\nDESCRIPTION: API endpoint for customizing table names, root fields, and column names for tracked tables with support for comments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_set_table_customization\",\n  \"args\": {\n    \"table\": {\n      \"dataset\": \"hasura\",\n      \"name\": \"author_details\"\n    },\n    \"source\": \"default\",\n    \"configuration\": {\n      \"custom_name\": \"author\",\n      \"custom_root_fields\": {\n        \"select\": \"Authors\",\n        \"select_aggregate\": \"AuthorAggregate\"\n      },\n      \"column_config\": {\n        \"id\": {\n          \"custom_name\": \"authorId\",\n          \"comment\": \"The ID of the Author\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hasura Metrics Endpoint with Authorization\nDESCRIPTION: Command to access the Hasura metrics endpoint using the configured secret token in the Authorization header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://127.0.0.1:8080/v1/metrics' -H 'Authorization: Bearer <secret>'\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Flask Application\nDESCRIPTION: This requirements.txt file lists the necessary Python packages and their versions for a Flask-based web application. It includes Flask, Gunicorn (WSGI HTTP Server), and related dependencies for web development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nClick==7.0\nFlask==1.0.2\ngunicorn==19.9.0\nitsdangerous==0.24\nJinja2==2.10\nMarkupSafe==1.0\nWerkzeug==0.14.1\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and its dependencies using Docker Compose in detached mode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Timestamp (Timezone)\nDESCRIPTION: This GraphQL snippet demonstrates querying a timestamp field with specific timezone. The `Timestamp` scalar type represents a date and time value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    timestamp: \"2016-07-20 17:30:15 Europe/Copenhagen\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nested Insert Response Format\nDESCRIPTION: Example JSON response showing the structure of a successful nested insert operation, including affected rows count and returned data from all related tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation_results\": [\n    {\n      \"affected_rows\": 4,\n      \"returning\": [\n        {\n          \"AlbumId\": 400,\n          \"Title\": \"Fearless\",\n          \"Artist\": {\n            \"rows\": [\n              {\n                \"ArtistId\": 300,\n                \"Name\": \"Taylor Swift\"\n              }\n            ]\n          },\n          \"Tracks\": {\n            \"rows\": [\n              {\n                \"TrackId\": 4000,\n                \"Name\": \"Fearless\"\n              },\n              {\n                \"ArtistId\": 4001,\n                \"Name\": \"Fifteen\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Key Columns Identification for Updates\nDESCRIPTION: Illustrates how to specify primary key columns in update mutations for identifying objects to be updated based on their primary key values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\npk_columns: {\n  column-1: value-1\n  column-2: value-2\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hasura GraphQL Engine URL\nDESCRIPTION: Example URL format for accessing the deployed Hasura GraphQL Engine console on Azure Container Instances.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/azure-container-with-pg/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://hasura-graphql-engine.centralindia.azurecontainer.io\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request to the Version API Endpoint in HTTP\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Hasura Version API endpoint. The endpoint `/v1/version` accepts GET requests and returns server type and version information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/version.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/version HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Address Scalar Fields Enum in GraphQL\nDESCRIPTION: This enum defines all scalar fields available on the Address model that can be used for grouping operations. It includes address components like StreetAddress, City, State, PostalCode, and Country.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_77\n\nLANGUAGE: graphql\nCODE:\n```\nenum Address_scalar_fields {\n  StreetAddress\n  City\n  State\n  PostalCode\n  Country\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Environment Variables in ECS Task Definition\nDESCRIPTION: Sets up environment variables for Hasura, including database URLs and admin secret, in the ECS task definition JSON.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"environment\": [\n    {\n      \"name\": \"HASURA_GRAPHQL_METADATA_DATABASE_URL\",\n      \"value\": \"postgres://<username>:<password>@hostname:<port>/<dbname>\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_REDIS_URL\",\n      \"value\": \"redis://hostname:6379\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL\",\n      \"value\": \"redis://hostname:6379\"\n    },\n    {\n      \"name\": \"HASURA_GRAPHQL_ADMIN_SECRET\",\n      \"value\": \"myadminsecretkey\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Local Deployment Steps for JWT Authentication Server\nDESCRIPTION: Provides a series of commands to set up and run the JWT authentication server locally, including cloning the repo, installing dependencies, generating RSA keys, and starting the app.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncd community/boilerplates/auth-servers/passportjs-jwt-roles\nnpm install\nopenssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -pubout > public.pem\nawk -v ORS='\\\\n' '1' private.pem\nawk -v ORS='\\\\n' '1' public.pem\nexport DATABASE_URL=postgres://postgres:@localhost:5432/postgres\nknex migrate:latest\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud SQL Postgres Instance\nDESCRIPTION: Create a Cloud SQL Postgres instance named 'hasura-postgres' in the us-west2 region with specified CPU and memory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances create hasura-postgres --database-version POSTGRES_9_6 \\\n       --cpu 1 --memory 3840MiB --region us-west2 --project hasura\n```\n\n----------------------------------------\n\nTITLE: User Login API Call for JWT Authentication\nDESCRIPTION: Shows how to make a curl request to the login endpoint to authenticate a user and receive a JWT token.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" \\\n     -d'{\"username\": \"test123\", \"password\": \"test123\"}' \\\n     http://localhost:8080/login\n```\n\n----------------------------------------\n\nTITLE: Data Type Conversion Utility for Weaviate\nDESCRIPTION: Converts PostgreSQL data types to compatible Weaviate data types, handling various scalar types\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef convert_data_types(properties):\n    valid_data_type_map = {\n        \"uuid\": \"text\",\n        \"string\": \"text\",\n        \"integer\": \"int\",\n        \"float\": \"number\",\n        \"timestamp with time zone\": \"text\",\n        \"bool\": \"boolean\",\n        \"datetime\": \"date\",\n        \"phone_number\": \"phoneNumber\",\n    }\n\n    converted_properties = []\n\n    for prop in properties:\n        prop_name = prop.get(\"name\")\n        data_type = prop.get(\"dataType\")\n        data_type = data_type[0]\n\n        converted_data_type = valid_data_type_map.get(data_type.lower())\n\n        if converted_data_type is None:\n            prop[\"dataType\"] = [data_type]\n        else:\n            prop[\"dataType\"] = [converted_data_type]\n        converted_properties.append(prop)\n\n    return converted_properties\n```\n\n----------------------------------------\n\nTITLE: Enabling Private IP for Cloud SQL Instance\nDESCRIPTION: Command to configure the Cloud SQL instance to use private IP within the default network.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances patch hasura-postgres --network=default\n```\n\n----------------------------------------\n\nTITLE: Logging Cron Event Generator Process in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet illustrates the JSON structure of a cron event generator process log in Hasura GraphQL Engine. It includes details of cron triggers fetched for events generation and the number of fetches within a 10-minute timeframe.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"cron_triggers\": [\n      {\n        \"max_scheduled_time\": \"2023-01-31T13:18:00Z\",\n        \"name\": \"every_two_minutes\",\n        \"upcoming_events_count\": 99\n      }\n    ],\n    \"num_fetches\": 10\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-01-31T15:31:55.773+0530\",\n  \"type\": \"cron-event-generator-process\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphQL Parser Error Structure in Rust\nDESCRIPTION: This code shows the structure of a GraphQL parser error in Rust. It demonstrates how the Hasura GraphQL engine represents an error with token context, expected token types, and source position information. This specific error shows an unterminated string error at line 3, column 47.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0035_unterminated_string_value_in_object_value.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    Unterminated,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 3,\n            col: 47,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Running SQLite Data Connector Agent\nDESCRIPTION: Commands for installing dependencies, building, and running the SQLite data connector agent using npm.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Checking Hasura GraphQL Engine Logs\nDESCRIPTION: Command to view the logs of the Hasura GraphQL Engine service deployed on Kubernetes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f svc/hasura\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Script on Primary Node\nDESCRIPTION: Uses `sqlcmd` to run a script file that sets up the primary SQL node with necessary configurations. The script includes encryption and certificate operations vital for node communication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsqlcmd -S 172.16.238.1,1501 -U SA -P \"Password1\" -i 1-primary-setup-certificate.sql\n```\n\n----------------------------------------\n\nTITLE: Failed Template Validation Response\nDESCRIPTION: Example of a failed template validation response showing error details and position information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payload\": {\n    \"error_code\": \"TypeErrorCode\",\n    \"source_position\": {\n      \"end_column\": 15,\n      \"start_line\": 1,\n      \"end_line\": 1,\n      \"start_column\": 12\n    },\n    \"message\": \"Type Error: Expected object\"\n  },\n  \"headers\": [\n    [\n      \"content-type\",\n      \"application/json\"\n    ]\n  ],\n  \"method\": \"GET\",\n  \"webhook_url\": \"https://localhost:1234/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Thumbnail for Revoking Collaboration Invitation\nDESCRIPTION: This snippet illustrates the process of revoking an invitation sent to a collaborator. It demonstrates how users can manage pending invitations effectively in the Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail\n  src=\"/img/projects/revoke-collaboration-invitation.png\"\n  alt=\"Revoke collaboration invitation\"\n  width=\"1000px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining String Concatenation Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a specialized GraphQL input type for ordering based on string concatenation with arguments and ordering direction.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_concat_aggregate_order_by {\n  args: String_concat_aggregate_args!\n  ordering: order_by!\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Role-specific Annotations During Request Execution\nDESCRIPTION: Code snippet showing how role-specific annotations are processed during query execution. This example demonstrates accessing ArgumentPresets annotation during the IR generation phase to apply role-specific argument values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nmatch field_call.info.namespaced {\n  None => {}\n  Some(NamespaceAnnotation::ArgumentPresets(argument_presets)) => {\n    // use `argument_presets` for current role to generate IR\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking SQL Function with Session Argument\nDESCRIPTION: Example of tracking a custom SQL function 'search_articles' with a Hasura session argument using the pg_track_function API endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_track_function\",\n    \"args\": {\n        \"source\": \"default\",\n        \"function\": {\n            \"schema\": \"public\",\n            \"name\": \"search_articles\"\n        },\n        \"configuration\": {\n            \"session_argument\": \"hasura_session\"\n        },\n        \"comment\": \"This function helps search for articles\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Column Default via SQL ALTER TABLE\nDESCRIPTION: SQL command to alter a table column and set a default timestamp value using the now() function\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/postgres-defaults.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE ONLY \"public\".\"article\" ALTER COLUMN \"created_at\" SET DEFAULT now();\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE article ALTER COLUMN created_at DROP DEFAULT;\n```\n\n----------------------------------------\n\nTITLE: Creating ECS Service with Private Subnet\nDESCRIPTION: Creates an ECS service for Hasura using a private subnet with NAT gateway for internet access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws ecs create-service \\\n--cluster hasura-fargate-cluster \\\n--service-name hasura-fargate-service \\\n--task-definition hasura:1 \\\n--desired-count 1 \\\n--launch-type \"FARGATE\" \\\n--network-configuration \"awsvpcConfiguration={subnets=[subnet-abcd1234],securityGroups=[sg-abcd1234]}\"\n```\n\n----------------------------------------\n\nTITLE: Defining QualifiedFunction Structure in JSON\nDESCRIPTION: Specifies the structure for a qualified function reference with name and schema properties. Used for precisely identifying functions in database schemas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": String,\n    \"schema\": String\n}\n```\n\n----------------------------------------\n\nTITLE: List-based Integer Filtering in GraphQL\nDESCRIPTION: Query to fetch articles with specific ratings using the _in operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {rating: {_in: [1,3,5]}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Hasura with Dex SSO Integration\nDESCRIPTION: This Docker Compose configuration sets up a complete environment with PostgreSQL, Hasura GraphQL Engine, and Dex identity provider. It includes all necessary environment variables and volume mounts to enable Google Workspace SSO with Dex for Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/google-workspace.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15\n    restart: always\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - '5432'\n    environment:\n      POSTGRES_PASSWORD: postgrespassword\n\n  hasura-pro:\n    image: hasura/graphql-engine:v2.25.0\n    ports:\n      - '8080:8080'\n    depends_on:\n      - postgres\n    restart: always\n    environment:\n      HASURA_GRAPHQL_EE_LICENSE_KEY: <YOUR_EE_LICENSE_KEY>\n      HASURA_GRAPHQL_ADMIN_SECRET: <YOUR_ADMIN_SECRET>\n      HASURA_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres?sslmode=disable\n      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'\n      HASURA_GRAPHQL_DEV_MODE: 'true'\n      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log,query-log\n      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics\n      HASURA_GRAPHQL_METRICS_SECRET: <YOUR_METRICS_SECRET>\n      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets\n      HASURA_GRAPHQL_SSO_PROVIDERS:\n        '[{\"client_id\": \"dex-login\",\"admin_roles\": [\"hasura-admin@company.com\"], \"name\": \"Dex\n        Login\",\"authorization_url\": \"http://127.0.0.1:5556/dex/auth\",\"request_token_url\":\n        \"http://127.0.0.1:5556/dex/token\",\"scope\": \"openid offline_access groups\",\"jwt_secret\": {\"type\":\n        \"RS256\",\"jwk_url\": \"http://dex:5556/dex/keys\",\"issuer\": \"http://127.0.0.1:5556/dex\",\"claims_map\":\n        {\"x-hasura-allowed-roles\": { \"path\": \"$.groups\" },\"x-hasura-default-role\": { \"path\": \"$.groups[0]\" }}}}]'\n\n  dex:\n    image: dexidp/dex\n    restart: always\n    volumes:\n      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml\n      - ./dex/google-sa.json:/dex/google-sa.json\n    ports:\n      - '5556:5556'\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter Discount objects. Includes logic operators and scalar fields for discount properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\ninput Discount_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Discount_bool_exp!]\n  _or: [Discount_bool_exp!]\n  _not: Discount_bool_exp\n\n  # Scalar fields\n  Description: String_bool_exp\n  Percentage: Decimal_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Cloud Deployment in YAML\nDESCRIPTION: Example of a hasura-cloud-deploy-config.yaml file for configuring One Click Deploy app details, including app name, static environment variables, and user-defined environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'hasura-ecommerce-sample-app'\n\nstatic-env:\n  HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous\n\nuser-env:\n  PG_DATABASE_URL:\n    description: 'Postgres database URL'\n    mandatory: true\n  NEXTJS_SERVER_URL:\n    default: 'http://localhost:3000'\n    description: 'Next.js Server URL for authentication and custom business logic'\n    mandatory: true\n  HASURA_GRAPHQL_JWT_SECRET:\n    default: '{\"key\": \"this-is-the-hasura-nextjs-secret-key-replace-it-with-something-secure\",\"type\": \"HS256\"}'\n    description: 'JWT Secret key'\n    mandatory: true\n```\n\n----------------------------------------\n\nTITLE: Creating DELETE Event Trigger in MS-SQL\nDESCRIPTION: This SQL code creates an AFTER DELETE trigger on the 'authors' table. It formats the deleted data into JSON and inserts it into the event_log table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-event-triggers-research.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR ALTER TRIGGER hasuraAuthorsAfterDelete\nON authors\nAFTER DELETE\nAS\nBEGIN\nDECLARE @json NVARCHAR(MAX)\nSET @json =  (\nSELECT id as [data.old.id], name as [data.old.name,] NULL as [data.new]\nFROM DELETED\nFOR JSON PATH, INCLUDE_NULL_VALUES\n)\ninsert into hdb_catalog.event_log (schema_name,table_name,trigger_name,payload)\nselect 'dbo','authors','authors_delete', value from OPENJSON (@json)\nEND;\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response for Remote Schema Relationship\nDESCRIPTION: This GraphQL response snippet represents the expected output when querying for articles and their associated user information through the defined remote schema relationship. It demonstrates the integration between local and remote data sources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  \"data\": {\n    \"articles\": [\n      {\n        \"id\": 1,\n        \"author_id\": 2,\n        \"user\": {\n          \"id\": 2,\n          \"name\": \"Bob\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Upsert Mutation in GraphQL\nDESCRIPTION: Example of an upsert mutation for MS SQL Server, using the if_matched section to specify update behavior when a matching record is found.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  insert_author(\n    objects: { id: 1, name: \"aaa\" }\n    if_matched: { match_columns: author_pkey, update_columns: name }\n  ) {\n    returning {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Same GraphQL Query with Different Formatting\nDESCRIPTION: This snippet highlights how Hasura considers queries with identical structures as the same, as long as the only difference lies in spacing. This recognition reduces unnecessary cache fragmentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/how-it-works.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users {\n    name\n    id\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCachedQuery @cached {\n  users { name id }\n}\n```\n\n----------------------------------------\n\nTITLE: Rollback SQL for Table Structure Modification (SQL)\nDESCRIPTION: This SQL snippet provides the reverse operation for the previous modification, ensuring that the 'output' column is set to NOT NULL if a rollback of the migration is necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"public\".\"sql_function_table\" ALTER COLUMN \"output\" SET NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Payload configuration for Scheduled Event\nDESCRIPTION: This JSON payload is sent to the webhook endpoint when the scheduled event is triggered. It includes a `trigger_type` property to categorize the event as a `user_reengagement_email`. This can be extended to include other relevant data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/user-reengagement-email.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger_type\": \"user_reengagement_email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting License Key for Hasura Enterprise Edition\nDESCRIPTION: YAML configuration snippet demonstrating how to add the Enterprise Edition license key as an environment variable in the docker-compose.yml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngraphql-engine:\n  image: hasura/graphql-engine:v2.12.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey\n    HASURA_GRAPHQL_EE_LICENSE_KEY: '<license key>'\n  ...\n```\n\n----------------------------------------\n\nTITLE: Executing graphql-engine Command with Flags in Bash\nDESCRIPTION: Demonstrates how to run the graphql-engine command with server flags to set the metadata database URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ graphql-engine --metadata-database-url \"postgres://<user>:<password>@<host>:<port>/<db-name>\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Input Validation via CLI\nDESCRIPTION: Shows how to configure input validations in a `table.yaml` file for use with the Hasura CLI. The `validate_input` section specifies the HTTP webhook to call for validation, including the URL, headers, client header forwarding, and timeout.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"- table:\\n    schema: public\\n    name: products\\n  insert_permissions:\\n    - role: user\\n      permission:\\n        columns: []\\n        filter: {}\\n        validate_input:\\n          type: http\\n          definition:\\n            url: http://www.somedomain.com/validateProducts\\n            headers:\\n              - name: X-Validate-Input-API-Key\\n                value_from_env: VALIDATION_HOOK_API_KEY\\n            forward_client_headers: true\\n            timeout: 5\"\n```\n\n----------------------------------------\n\nTITLE: Creating UPDATE Event Trigger in MS-SQL\nDESCRIPTION: This SQL code creates an AFTER UPDATE trigger on the 'books' table. It handles both cases where the primary key is updated and not updated, formatting the data into JSON and inserting it into the event_log table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-event-triggers-research.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE   TRIGGER hasuraAuthorsAfterUpdate\nON books\nAFTER UPDATE\nAS\nBEGIN\nDECLARE @json_pk_not_updated NVARCHAR(MAX)\nDECLARE @json_pk_updated NVARCHAR(MAX)\n\n-- When primary key is not updated during a UPDATE transaction then construct both\n-- 'data.old' and 'data.new'.\nSET @json_pk_not_updated =  \n      (SELECT \n         DELETED.name as [payload.data.old.name],  DELETED.id as [payload.data.old.id],  INSERTED.name as [payload.data.new.name],  INSERTED.id as [payload.data.new.id],\n         'UPDATE' as [payload.op],\n         'dbo' as [schema_name],\n         'books' as [table_name],\n         'insert_test_books' as [trigger_name]\n      FROM DELETED\n      JOIN INSERTED\n      ON  INSERTED.id = DELETED.id \n      where  INSERTED.name != DELETED.name  OR  INSERTED.id != DELETED.id \n      FOR JSON PATH\n      )\n\ninsert into hdb_catalog.event_log (schema_name,table_name,trigger_name,payload)\nselect * from OPENJSON (@json_pk_not_updated)\nWITH(\nschema_name NVARCHAR(MAX) '$.schema_name',\ntable_name NVARCHAR(MAX) '$.table_name',\ntrigger_name NVARCHAR(MAX) '$.trigger_name',\n[payload] NVARCHAR(MAX) AS JSON\n)\n\n-- When primary key is updated during a UPDATE transaction then construct only 'data.new'\n-- since according to the UPDATE Event trigger spec for MSSQL, the 'data.old' would be NULL\nIF (1 = 1)\nBEGIN\n   SET @json_pk_updated =\n         -- The following SQL statement checks, if there are any rows in INSERTED\n         -- table whose primary key does not match to any rows present in DELETED\n         -- table. When such an situation occurs during a UPDATE transaction, then\n         -- this means that the primary key of the row was updated.\n         (SELECT \n            NULL as [payload.data.old],  INSERTED.name as [payload.data.new.name],  INSERTED.id as [payload.data.new.id],\n            'UPDATE' as [payload.op],\n            'dbo' as [schema_name],\n            'books' as [table_name],\n            'insert_test_books' as [trigger_name]\n         FROM INSERTED\n         WHERE NOT EXISTS (SELECT * FROM DELETED WHERE  INSERTED.id = DELETED.id )\n         FOR JSON PATH, INCLUDE_NULL_VALUES\n         )\n\n   insert into hdb_catalog.event_log (schema_name,table_name,trigger_name,payload)\n   select * from OPENJSON (@json_pk_updated)\n   WITH(\n      schema_name NVARCHAR(MAX) '$.schema_name',\n      table_name NVARCHAR(MAX) '$.table_name',\n      trigger_name NVARCHAR(MAX) '$.trigger_name',\n      [payload] NVARCHAR(MAX) AS JSON\n   )\nEND\n\nEND;\n```\n\n----------------------------------------\n\nTITLE: Logging into Azure CLI\nDESCRIPTION: This command logs into the Azure account using the Azure CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Testing\nDESCRIPTION: Configures environment variables for C libraries, creates a Python virtual environment, and installs Python dependencies required for testing the GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport PKG_CONFIG_PATH=\"/opt/homebrew/opt/libffi/lib/pkgconfig\"\nexport LDFLAGS=\"-L/opt/homebrew/opt/openssl@1.1/lib\"\nexport CPPFLAGS=\"-I/opt/homebrew/opt/openssl@1.1/include\"\n\ncd server\npython3 -m venv .python-venv\nsource .python-venv/bin/activate\npip3 install -r tests-py/requirements.txt\n(cd tests-py/remote_schemas/nodejs && npm ci)\n```\n\n----------------------------------------\n\nTITLE: Capturing User Information in a Trigger\nDESCRIPTION: This SQL snippet illustrates how to access the user information stored in the session variables using the `current_setting` function in a trigger. It allows capturing the user role and session variables that were set during the transaction, thus facilitating the logging of audit information in response to changes in the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/auditing-tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_setting('hasura.user');\n```\n\n----------------------------------------\n\nTITLE: Defining Sample GraphQL Requests\nDESCRIPTION: Example of a sample-requests.graphql file containing pre-filled GraphQL queries for the Console API explorer.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery users {\n  user {\n    id\n    name\n  }\n}\n\nquery usersWithOrders {\n  user {\n    id\n    name\n    orders {\n      id\n      status\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Postgres User\nDESCRIPTION: Sets the password for the default 'postgres' user in the Cloud SQL instance. [PASSWORD] should be replaced with a strong password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql users set-password postgres --instance hasura-postgres \\\n       --password [PASSWORD] --project hasura\n```\n\n----------------------------------------\n\nTITLE: Foreach Query Request Structure\nDESCRIPTION: Example of a foreach query request structure that instructs the data connector to execute the same query multiple times with different filter values. The query retrieves Album data filtered by different ArtistId values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Album\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"fields\": {\n      \"AlbumId\": {\n        \"type\": \"column\",\n        \"column\": \"AlbumId\",\n        \"column_type\": \"number\"\n      },\n      \"Title\": {\n        \"type\": \"column\",\n        \"column\": \"Title\",\n        \"column_type\": \"string\"\n      }\n    }\n  },\n  \"foreach\": [\n    { \"ArtistId\": {\"value\": 1, \"value_type\": \"number\"} },\n    { \"ArtistId\": {\"value\": 2, \"value_type\": \"number\"} }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Related Table Columns in Hasura\nDESCRIPTION: JSON structure showing how to order Album query results by the Name column from the related Artist table. Demonstrates the use of target_path to navigate relationships for sorting purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Album\"]\n  },\n  \"relationships\": [\n    {\n      \"type\": \"table\",\n      \"source_table\": [\"Album\"],\n      \"relationships\": {\n        \"Artist\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Artist\"]\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Title\": { \"type\": \"column\", \"column\": \"Title\", \"column_type\": \"string\" }\n    },\n    \"order_by\": {\n      \"relations\": {\n        \"Artist\": {\n          \"where\": null,\n          \"subrelations\": {}\n        }\n      },\n      \"elements\": [\n        {\n          \"target_path\": [\"Artist\"],\n          \"target\": {\n            \"type\": \"column\",\n            \"column\": \"Name\"\n          },\n          \"order_direction\": \"desc\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revised ObjectType Definition with Type Mappings in OpenDD YAML\nDESCRIPTION: Updated ObjectType definition that includes data connector type mappings. This change moves type mappings from Model/Command definitions to the ObjectType for better reusability and clarity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-boolean-expression-types.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Author\n  fields:\n    - name: id\n      type: Int!\n    - name: name\n      type: String\n  dataConnectorTypeMapping: # Optional key\n    - dataConnectorName: my_db\n      dataConnectorObjectType: author\n      fieldMapping:\n        id:\n          column: author_id\n        name:\n          column: author_name\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Secret in Hasura CLI\nDESCRIPTION: This snippet shows how to configure the admin secret for Hasura CLI commands using config.yaml, environment variables, or command-line flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nendpoint: https://my-graphql-endpoint.com\nadmin_secret: XXXXXXXXXXXXXXXX\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport HASURA_GRAPHQL_ADMIN_SECRET=xxxxx\nhasura console\n\n# OR in a single line\nHASURA_GRAPHQL_ADMIN_SECRET=xxxxx hasura console\n```\n\nLANGUAGE: bash\nCODE:\n```\nhasura console --admin-secret=XXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Notification Log Output\nDESCRIPTION: Example log output from a successful webhook notification triggered by changing an order status to 'delivered'. The log confirms the notification was sent and shows the message format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nNotification sent. The user has received the following notification: Status of Order #<ORDER_ID> is now delivered.\n```\n\n----------------------------------------\n\nTITLE: Importing Thumbnail Component in React\nDESCRIPTION: React component import statement for the Thumbnail component used to display deployment-related images in the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/nhost-one-click.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Sparse Checkout of Hasura V3 Engine Code\nDESCRIPTION: Series of git commands to selectively checkout only the V3 engine code from the repository, reducing download size and time by excluding other components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --no-checkout https://github.com/hasura/graphql-engine.git --depth 1\ncd graphql-engine\ngit sparse-checkout init --cone\ngit sparse-checkout set v3\ngit checkout @\n```\n\n----------------------------------------\n\nTITLE: Example Query Tags Configuration for Multiple Sources\nDESCRIPTION: Example YAML configuration showing how to set different query tag configurations for multiple database sources in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsources:\n  - name: test_db\n    configuration:\n    query_tags:\n      disabled: true\n\n  - name: hasura_db_herokou\n      configuration:\n      query_tags:\n        format: sqlcommenter\n        omit_request_id: false\n\n  - name: hasura_db_2\n      configuration:\n      query_tags:\n        format: standard\n        disabled: true\n```\n\n----------------------------------------\n\nTITLE: Command Options for Hasura Actions CLI Command\nDESCRIPTION: Lists the available options for the 'hasura actions' command, including admin secret, certificate authority path, endpoint configuration, and help options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for actions\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship via HTTP API\nDESCRIPTION: HTTP POST request to Hasura's metadata API for creating a remote schema relationship. It defines a relationship named 'user' between 'Order' type and 'user-remote-schema'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_remote_schema_remote_relationship\",\n  \"args\": {\n    \"name\": \"user\",\n    \"remote_schema\": \"order-remote-schema\",\n    \"type_name\": \"Order\",\n    \"definition\": {\n      \"to_remote_schema\": {\n        \"remote_schema\": \"user-remote-schema\",\n        \"lhs_fields\": [\"user_id\"],\n        \"remote_field\": {\n          \"user\": {\n            \"arguments\": {\n              \"id\":\"$user_id\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Including Related Data with URL Query Parameters in Hasura\nDESCRIPTION: URL query string that specifies which fields to return for Author and Article entities, sets a page limit, and includes related articles. Uses the JSON:API style parameter format with bracket notation for nested fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/include/Authors.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Author]=author_id,first_name&fields[Article]=title&page[limit]=1&include=articles_remote\n```\n\n----------------------------------------\n\nTITLE: Dropping Delete Permission for MSSQL Table\nDESCRIPTION: Removes an existing delete permission for a specific role on a table in MSSQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_drop_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating JavaScript Semicolon Usage and Quote Preference\nDESCRIPTION: Demonstrates the use of semicolons at the end of statements and the preference for single quotes in JavaScript code blocks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/code-blocks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst example = 'This is a string';\n```\n\n----------------------------------------\n\nTITLE: Hasura update-cli Command Options in SASS\nDESCRIPTION: Lists the specific options available for the 'hasura update-cli' command. It includes options for getting help and specifying a version to install.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_update-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for update-cli\n    --version string   a specific version to install\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Gateway Command Structure\nDESCRIPTION: Demonstrates the basic syntax pattern for Hasura Gateway CLI commands using flags and values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --<flag> \"<flag_value>\" <command>\n```\n\n----------------------------------------\n\nTITLE: Error example for null values in boolean expressions in GraphQL v2\nDESCRIPTION: Shows how null values in boolean expressions now cause errors in v2 instead of evaluating to true for all rows, addressing a long-standing issue with unintuitive behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ndelete_users(where: {_id: {_eq: null}})  # error: argument of _eq cannot be null\n```\n\n----------------------------------------\n\nTITLE: Disabling Hasura Schema API via Command Line\nDESCRIPTION: Shows how to disable the Schema API using the 'enabled-apis' flag or the 'HASURA_GRAPHQL_ENABLED_APIS' environment variable. This example enables only the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# enable only graphql api, disable Metadata and pgdump\n--enabled-apis=\"graphql\"\nHASURA_GRAPHQL_ENABLED_APIS=\"graphql\"\n```\n\n----------------------------------------\n\nTITLE: Setting Row Fetch Limit in Hasura Console - YAML\nDESCRIPTION: This YAML snippet is used to set row fetch limits for a specific table by defining select permissions for the user role. It specifies which columns are accessible and includes a filter based on the user's ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-fetch-limit.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: users\n  select_permissions:\n    - role: user\n      permission:\n        columns:\n          - id\n          - name\n        filter:\n          user_id:\n            _eq: X-Hasura-User-Id\n        limit: 1\n```\n\n----------------------------------------\n\nTITLE: Initializing NodeJS Project for PostgreSQL Vectorization\nDESCRIPTION: Sets up a new NodeJS project, configures it to use modules, and installs required dependencies for connecting to PostgreSQL and Weaviate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i pg weaviate-ts-client\n```\n\n----------------------------------------\n\nTITLE: Logging in a User with the Login API using cURL\nDESCRIPTION: Example of how to authenticate an existing user by making a POST request to the /login endpoint with username and password credentials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/passport-js/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" \\\n     -d'{\"username\": \"test123\", \"password\": \"test123\"}' \\\n     http://localhost:8080/login\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Variables for Single Product\nDESCRIPTION: This query fetches a single product by its ID using a variable. It demonstrates how to use variables in GraphQL queries for dynamic data fetching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductById($id: uuid!) {\n  products_by_pk(id: $id) {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"cd6be51c-65b6-11ed-a2f4-4b71f0d3d70f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: Command to verify if Hasura GraphQL Engine and Postgres containers are running.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n```\n\n----------------------------------------\n\nTITLE: Creating INSERT Event Trigger in MS-SQL\nDESCRIPTION: This SQL code creates an AFTER INSERT trigger on the 'authors' table. It formats the inserted data into JSON and inserts it into the event_log table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-event-triggers-research.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR ALTER TRIGGER hasuraAuthorsAfterInsert\nON authors\nAFTER INSERT\nAS\nBEGIN\nDECLARE @json NVARCHAR(MAX)\nSET @json =  (\n  SELECT id as [data.new.id], name as [data.new.name], NULL as [data.old]\n  FROM INSERTED\n  FOR JSON PATH\n)\ninsert into hdb_catalog.event_log (schema_name,table_name,trigger_name, new_payload)\nselect 'dbo','authors','authors_insert', value from OPENJSON (@json)\nEND\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Hasura GraphQL Engine Documentation - JavaScript\nDESCRIPTION: This snippet includes an iframe to embed a YouTube video within the Hasura GraphQL Engine documentation to provide visual content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<iframe\n        src=\"https://www.youtube.com/embed/5E4T6SDWLJQ\"\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n```\n\n----------------------------------------\n\nTITLE: Defining TemplateEngine Schema in Hasura GraphQL Engine\nDESCRIPTION: Schema definition for TemplateEngine, specifying the JSON templating language to be used for transformations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n\"Kriti\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with SQLCommenter Format Tags\nDESCRIPTION: Example of a SQL query with SQLCommenter format tags, following the specification defined at google.github.io/sqlcommenter/spec/.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM child /* field_name='child', operation_name='GetChild', parameterized_query_hash='b2a71ce23928ca7f0021f9060e5d590e9f9bb00f' ,  request_id='487c2ed5-08a4-429a-b0e0-4666a82e3cc6' */\n```\n\n----------------------------------------\n\nTITLE: Updating ECS Service with New Task Definition in AWS CLI\nDESCRIPTION: Command to update the ECS service to use the new task definition revision. This rolls out the updated Hasura GraphQL Engine version to the running service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\naws ecs update-service --cluster hasura-fargate-cluster --service hasura-fargate-service --task-definition hasura:7\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via Hasura CLI\nDESCRIPTION: Command to apply metadata changes after updating the actions.yaml file\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/rest-connectors.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Initializing Git repository\nDESCRIPTION: These commands initialize a Git repository in the project directory, add all files, and commit the changes. This prepares the project for version control and deployment via Git.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"# in the project directory\\n\\ngit init\\ngit add .\\ngit commit -m \\\"initialize metadata and migrations\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Building CLI Extension Binaries with npm or make\nDESCRIPTION: Commands to build the CLI extension binaries using npm or make. The binaries are built using the pkg package and will be placed in the 'bin' directory at the root.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\nOR \nmake clean-build\n```\n\n----------------------------------------\n\nTITLE: Argument Preset Example in GraphQL\nDESCRIPTION: Example of using the @preset directive to set a static value for an argument in a GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name String\n  id   Int\n}\n\ntype Query {\n  user(user_id: Int! @preset(value: 1))\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Decoding Command\nDESCRIPTION: Bash command to decode a JWT token and view Hasura claims.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/codegen/python-flask.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ decode_jwt 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.z9ey1lw9p89gUkAmWEa7Qbpa1R71TgfkjZnEunGJ1ig'\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hasura CLI Binary\nDESCRIPTION: Commands to locate and remove the Hasura CLI binary from the system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/install-hasura-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# By default, the binary is installed at /usr/local/bin/hasura\n$ which hasura\n  /usr/local/bin/hasura\n\n# use sudo if required\n$ rm /usr/local/bin/hasura\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura with Docker Compose\nDESCRIPTION: Command to start the Hasura GraphQL Engine, MS SQL Server, and Postgres database containers in detached mode using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/ms-sql-server/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Data Connector Agent\nDESCRIPTION: Command to run the test suite against the reference agent using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sdk/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run tests\n```\n\n----------------------------------------\n\nTITLE: Export Command Options\nDESCRIPTION: Specific options available for the metadata export command, including help flag and output format specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_export.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help            help for export\n-o, --output string   write metadata to standard output in given format for exported metadata (note: this won't modify project metadata) Allowed values: json, yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Cluster\nDESCRIPTION: Create a Kubernetes cluster named 'hasura-k8s' in the us-west2-a zone with 1 node.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters create hasura-k8s --zone us-west2-a \\\n       --num-nodes 1 --project hasura\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Containers for PostgreSQL Replication (Docker Compose)\nDESCRIPTION: Stops the running Docker containers for PostgreSQL primary and replica instances.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Adding a Metadata Database to Hasura\nDESCRIPTION: This snippet shows how to configure a separate metadata database for Hasura GraphQL Engine using environment variables or flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\n\n# flag\n--metadata-database-url=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\nPG_DATABASE_URL=postgres://<user>:<password>@<host>:<port>/<db-name>\n\n# flag\n--metadata-database-url=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\n--database-url=postgres://<user>:<password>@<host>:<port>/<db-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_METADATA_DATABASE_URL=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\n\n# flag\n--metadata-database-url=postgres://<user>:<password>@<host>:<port>/<metadata-db-name>\n```\n\n----------------------------------------\n\nTITLE: Creating migration files from local setup\nDESCRIPTION: This command creates migration files from a local Hasura setup. It requires the admin secret and database name to connect to the local database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura migrate create init --from-server --admin-secret <admin-secret> --database-name <database-name>\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"# note down the version\\n\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"# mark the migration as already applied on the local server\\n\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura migrate apply --admin-secret <admin-secret> --version <version-number> --skip-execution\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Subscriptions with GraphQL\nDESCRIPTION: This GraphQL snippet demonstrates how to set up a streaming subscription to listen for changes in user messages based on their ID. The query uses cursor-based streaming, specifying the initial cursor value and ordering direction, alongside batch size and filtering conditions. The expected output is a set of JSON responses where each batch contains the updated message data. The key parameters include cursor information, batch size, and user ID condition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetUserLatestMessages ($user_id: uuid!) {\n  messages_stream (cursor: {initial_value: {id: 0}, ordering: ASC}, batch_size: 1, where: {user_id: {_eq: $user_id}} ) {\n    id\n    from\n    to\n  }\n}\n\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"from\": 155234,\n      \"to\": 155523\n    }\n    ]\n}\n\n{\n  \"data\": [\n    {\n      \"id\": 5,\n      \"from\": 178234,\n      \"to\": 187523\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering Discount query results by scalar fields like description and percentage.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ninput Discount_order_by @oneOf {\n  # Scalar fields\n  Description: order_by\n  Percentage: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Hasura GraphQL Engine Container Image\nDESCRIPTION: YAML snippet showing how to update the Hasura GraphQL Engine container image version in the Kubernetes deployment file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - image: hasura/graphql-engine:v1.0.0-alpha01\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Hasura Config API (HTTP)\nDESCRIPTION: This snippet shows a sample JSON response from the Hasura Config API. It includes various configuration details such as version, permissions settings, JWT configuration, and live query settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"version\": \"v1.0.0-beta.3\",\n  \"is_function_permissions_inferred\": true,\n  \"is_remote_schema_permissions_enabled\": false,\n  \"is_admin_secret_set\": true,\n  \"is_auth_hook_set\": false,\n  \"is_jwt_set\": true,\n  \"jwt\": {\n    \"claims_namespace\": \"https://hasura.io/jwt/claims\",\n    \"claims_format\": \"json\"\n  },\n  \"is_allow_list_enabled\": false,\n  \"live_queries\": {\n    \"batch_size\": 100,\n    \"refetch_delay\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Date Range Filtering in GraphQL\nDESCRIPTION: Query to fetch articles published after a specific date using the _gte operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {published_on: {_gte: \"2018-01-01\"}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Structure for Notes in Hasura\nDESCRIPTION: SQL-like definition for creating a 'notes' table with integer ID and text fields. This table structure will be used as the data source for the Hasura GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/python/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Aggregate Selection with @oneOf Directive in GraphQL\nDESCRIPTION: This input type allows selecting aggregate operations on Discount collections. It supports operations on the Description string field and the Percentage decimal field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_86\n\nLANGUAGE: graphql\nCODE:\n```\ninput Discount_aggregate_select @oneOf {\n  # Scalar fields\n  Description: String_aggregate_select\n  Percentage: Decimal_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Artists with Pagination Parameters in URL Format\nDESCRIPTION: This URL query string requests specific fields from the Artist table with pagination. It selects the ArtistId and Name fields, skips the first 2 records (offset=2), and limits the result to 6 records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/select_model/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Artist]=ArtistId,Name&page[offset]=2&page[limit]=6\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Hasura Plugins List Command\nDESCRIPTION: These examples demonstrate how to use the 'hasura plugins list' command, including listing all plugins and using the flag to avoid updating the index.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all plugins\nhasura plugins list\n\n# The command also updates the plugin index that is cached locally\n# To avoid updating the index, use the following flag:\nhasura plugins list --dont-update-index\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Body with GET Method (API)\nDESCRIPTION: HTTP POST request configuration for disabling request body and changing method to GET for an event trigger using Hasura Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"version\": 2,\n      \"method\": \"GET\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"body\": {\n        \"action\": \"remove\"\n      },\n      \"request_headers\": {\n        \"remove_headers\": [\"content-type\"],\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Fields and Including Relations in REST API Query Parameters\nDESCRIPTION: This query string demonstrates how to request specific fields from the Customer entity (CustomerId, FirstName, LastName, Email) and include related Employee data in the response. This parameter format follows a common pattern used in REST APIs for resource filtering and inclusion of related entities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/failing/include/Customer.txt#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nfields[Customer]=CustomerId,FirstName,LastName,Email&include=Employee\n```\n\n----------------------------------------\n\nTITLE: Column Type Change Using Additive Approach (Recommended)\nDESCRIPTION: Demonstrates the preferred way to change a column type from boolean to timestamp using additive changes. This approach uses multiple smaller operations that minimize table locking and improve performance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/migration-guidelines.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE hdb_catalog.event_log RENAME COLUMN locked TO locked_boolean;\n\nALTER TABLE hdb_catalog.event_log ADD COLUMN locked TIMESTAMPTZ;\n\nUPDATE hdb_catalog.event_log\nSET locked = NOW()\nWHERE locked_boolean = 't';\n\nALTER TABLE hdb_catalog.event_log DROP COLUMN locked_boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema URL in Hasura\nDESCRIPTION: The GraphQL service URL for the remote schema to be added to Hasura. This URL points to a public GraphQL API for country information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://countries.trevorblades.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Disabling Metadata API in Hasura GraphQL Engine (Bash)\nDESCRIPTION: This snippet demonstrates how to disable the Metadata and pgdump APIs while enabling only the GraphQL API in Hasura. It uses either a command-line flag or an environment variable to configure the enabled APIs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# enable only graphql api, disable Metadata and pgdump\n--enabled-apis=\"graphql\"\nHASURA_GRAPHQL_ENABLED_APIS=\"graphql\"\n```\n\n----------------------------------------\n\nTITLE: Defining RemoteField in JSON\nDESCRIPTION: The `RemoteField` is defined as a recursive JSON structure pointing to specific fields in a remote schema the current schema needs to join with. It requires careful nesting when the target field is deeply nested within the remote schema, and input arguments are specified within the structure to map data correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  FieldName: {\n    \"arguments\": InputArguments \"field\": RemoteField # optional\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": {\n    \"arguments\":{\n      \"message_id\":\"$id\"\n      }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": {\n    \"arguments\": {\n      \"limit\": 100\n    },\n    \"field\": {\n    \"private\": {\n      \"arguments\": {\n        \"id\" : \"$id\"\n      }\n    }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Document into AST Structure in Rust\nDESCRIPTION: This code represents the result of parsing a GraphQL query into an Abstract Syntax Tree (AST) structure in Rust. The query is named 'SomeQuery' and takes two non-nullable String parameters (param1 and param2). The structure shows how a GraphQL query is represented internally after parsing, including source position information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0037_operation_type_definition_with_inline_fragment.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"SomeQuery\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 15,\n                                },\n                            },\n                        ),\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"param1\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 2,\n                                                    col: 4,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 2,\n                                                    col: 9,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"String\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: false,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 2,\n                                                    col: 12,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 2,\n                                                    col: 18,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 18,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"param2\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 3,\n                                                    col: 4,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 3,\n                                                    col: 9,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"String\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: false,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 3,\n                                                    col: 12,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 3,\n                                                    col: 18,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 18,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 16,\n                                },\n                                end: SourcePosition {\n                                    line: 4,\n                                    col: 1,\n                                },\n                            },\n                        ),\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"item1\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 5,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 5,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"param1\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 6,\n                                                                            col: 5,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 6,\n                                                                            col: 10,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Variable(\n                                                                            Name(\n                                                                                \"param1\",\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Configure CI Environment with Hasura Pro\nDESCRIPTION: Commands to set environment variables for Hasura Pro endpoints and personal access token in a CI environment. Ensure correct domain paths for URLs based on Kubernetes Ingress rules.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/regression-tests.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport HASURA_PRO_METRICS_SERVER_ENDPOINT=\\u003croot-domain\\u003e/metrics\nexport HASURA_PRO_DATA_SERVER_ENDPOINT=\\u003croot-domain\\u003e/data\nexport HASURA_PRO_OAUTH_SERVER_ENDPOINT=\\u003croot-domain\\u003e/oauth\nexport HASURA_ACCOUNT_PAT=\\u003cpat-token\\u003e\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport HASURA_PRO_METRICS_SERVER_ENDPOINT=mydomain.com/metrics\nexport HASURA_PRO_DATA_SERVER_ENDPOINT=mydomain.com/data\nexport HASURA_PRO_OAUTH_SERVER_ENDPOINT=mydomain.com/oauth\nexport HASURA_ACCOUNT_PAT=ayrQdBG7UAzl642mLskLDtSuGNe7l9Bh8eIdQOtnXAG1GjxotHT38qOdSXl1smmp\n```\n\n----------------------------------------\n\nTITLE: Generating Static JWT Token for Anonymous Users in JWT Authentication\nDESCRIPTION: This JSON snippet demonstrates the structure of a static JWT token that can be generated for anonymous users to bypass JWT authentication. It includes claims for role and allowed roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-bypass-auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"0000000000\",\n  \"iat\": 1516239022,\n  \"role\": \"anonymous\",\n  \"https://hasura.io/jwt/claims\": {\n    \"x-hasura-allowed-roles\": [\"anonymous\"],\n    \"x-hasura-default-role\": \"anonymous\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Usage examples for hasura migrate delete in Bash\nDESCRIPTION: These examples demonstrate how to use the 'hasura migrate delete' command to delete a specific migration version or all migrations for a selected database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Usage to delete a version:\nhasura migrate delete --version <version_delete> --database-name <database-name>\n\n# Usage to delete all versions\n hasura migrate delete --all --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Function with HTTP Trigger\nDESCRIPTION: This bash command deploys a Python-based Google Cloud Function named 'python-echo' with an HTTP trigger. It uses Python 3.7 runtime.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/python/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta functions deploy python-echo \\\n       --runtime python37 \\\n       --trigger-http\n```\n\n----------------------------------------\n\nTITLE: Defining Order By Expression in YAML with OpenDD\nDESCRIPTION: A YAML definition for an order by expression that specifies which fields and relationships can be used for ordering. It includes configuration for orderable fields with direction constraints and orderable relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-expression-type-changes.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  # This name is unique only in the context of the `orderedType`.\n  name: Album_order_by_exp\n  orderedType: Album\n  orderableFields:\n    - fieldName: AlbumId\n      enableOrderByDirections: [Asc, Desc]\n    - fieldName: ArtistId\n      enableOrderByDirections: [Asc]\n    - # This field has an object type\n      fieldName: Address\n      # Use this order by expression for this object type\n      orderByExpression: Address_order_by_default_exp\n  # Only local relationships are permitted.\n  orderableRelationships:\n    - relationshipName: artist\n      # orderByExpression is optional for model relationships.\n      # If you don't specify it, we use the model's orderByExpression configuration.\n      # For local command relationships, this is required.\n      orderByExpression: Artist_order_by_default_exp\n  graphql:\n    expressionTypeName: App_Album_order_by_exp\n```\n\n----------------------------------------\n\nTITLE: Creating Native Query via CLI in YAML\nDESCRIPTION: YAML configuration for creating a native query with root field name, arguments, relationships, and query definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  native_queries:\n    - root_field_name: \"<root field name>\"\n      arguments:\n        \"<argument name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n          array_relationships:\n            - name: \"<relationship name>\"\n              using:\n                column_mapping:\n                  \"<local column>\": \"<remote column>\"\n                remote_native_query: <remote native query name>\"\n          object_relationships: <same as array_relationships>\n          description: \"<text>\"\n          code: \"<SQL query>\"\n          returns: \"<logical model name>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Object Boolean Expression Type in YAML with OpenDD\nDESCRIPTION: A YAML definition for an object boolean expression type that specifies which fields and relationships of an object can be compared. It includes configuration for comparable fields, comparable relationships, logical operators, and null checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-expression-type-changes.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v2\ndefinition:\n  name: Album_bool_exp\n  operand:\n    object:\n      # This is an OpenDD object type\n      type: Album\n      comparableFields:\n        - fieldName: AlbumId\n          # Use this boolean expression for this field\n          booleanExpressionType: pg_Int_Comparison_exp\n        - fieldName: ArtistId\n          booleanExpressionType: pg_Int_Comparison_exp_with_is_null\n          # This field has a complex type.\n        - fieldName: Address\n          booleanExpressionType: Address_bool_exp\n      comparableRelationships:\n        - relationshipName: artist\n          # This is optional for relationships to models, and defaults to the filterExpressionType of the model\n          booleanExpressionType: Artist_bool_exp\n  # whether to enable _and / _or / _not\n  logicalOperators:\n    # This is nested to allow for renaming of logical operators here in the future\n    enable: true\n  # whether to enable _is_null\n  isNull:\n    # This is nested to allow for renaming of is_null here in the future\n    enable: true\n  graphql:\n    typeName: App_Album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Format for Google Cloud SQL Postgres\nDESCRIPTION: Template for constructing the PostgreSQL database connection URL with username, password, public IP, and port parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/gcp.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/\n```\n\n----------------------------------------\n\nTITLE: Console Log Example for Hasura Webhook Trigger in JSON\nDESCRIPTION: This snippet provides a JSON example of console logs generated when Hasura Scheduled Triggers are correctly firing webhooks for abandoned cart reminders. It lists user carts and whether a reminder was sent, as well as a sample message log with confirmation links. This can help verify that the Hasura cron job and webhook configurations work as expected. No specific dependencies beyond a functioning Hasura setup are noted.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": \"e2f27008-673d-11ed-8a24-7224baf239e5\",\n  \"created_at\": \"2023-08-20T16:22:21.68884+00:00\",\n  \"user_id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n  \"is_reminder_sent\": false,\n  \"user\": {\n    \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n    \"email\": \"seandemo@hasura.io\",\n    \"name\": \"Sean\"\n  }\n}\n{\n  \"id\": \"e6e0edc0-673d-11ed-8a25-7224baf239e5\",\n  \"created_at\": \"2023-08-20T12:22:21.68884+00:00\",\n  \"user_id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n  \"is_reminder_sent\": false,\n  \"user\": {\n    \"id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n    \"email\": \"robdemo@hasura.io\",\n    \"name\": \"Rob\"\n  }\n}\n{\n  \"id\": \"ea226f5e-673d-11ed-8a26-7224baf239e5\",\n  \"created_at\": \"2023-08-20T02:22:21.68884+00:00\",\n  \"user_id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n  \"is_reminder_sent\": false,\n  \"user\": {\n    \"id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n    \"email\": \"mariondemo@hasura.io\",\n    \"name\": \"Marion\"\n  }\n}\n{\n  \"id\": \"ee2c0948-673d-11ed-8a27-7224baf239e5\",\n  \"created_at\": \"2023-08-20T20:22:21.68884+00:00\",\n  \"user_id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n  \"is_reminder_sent\": false,\n  \"user\": {\n    \"id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n    \"email\": \"sandeepdemo@hasura.io\",\n    \"name\": \"Sandeep\"\n  }\n}\n{\n  \"id\": \"f11e43aa-673d-11ed-8a28-7224baf239e5\",\n  \"created_at\": \"2023-08-20T20:22:21.68884+00:00\",\n  \"user_id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n  \"is_reminder_sent\": false,\n  \"user\": {\n    \"id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n    \"email\": \"abbydemo@hasura.io\",\n    \"name\": \"Abby\"\n  }\n}\n\nMessage sent to Sean: https://ethereal.email/message/ZOOv8vpfkoUaaaERZOOwe8.vdLF4IYAAAAAAC9ZopFVSeISEbido2clhdIY\n\nMessage sent to Rob: https://ethereal.email/message/ZOOv8vpfkoUaaaERZOOwfbf8ObJ559KGAAAADNWlylfrS2nLoNm08jGBs8U\n\nMessage sent to Marion: https://ethereal.email/message/ZOOv8vpfkoUaaaERZOOwf8.vdLF4IYADAAAADeBzopphA4UxwgtGz41In74\n\nMessage sent to Sandeep: https://ethereal.email/message/ZOOv8vpfkoUaaaERZOOwgfNxowjZihTyAAAADnGmSjpMKPsxQbwhwmVjlcE\n\nMessage sent to Abby: https://ethereal.email/message/ZOOv8vpfkoUaaaERZOOwg.NxowjZihT1AAAAD-Lx3fc0Cofq6XFMj6bn69E\n```\n\n----------------------------------------\n\nTITLE: Running Valgrind with mimalloc\nDESCRIPTION: Example of running Valgrind on a program using mimalloc while enabling statistics reporting to verify mimalloc is being used. The --soname-synonyms option tells Valgrind not to intercept malloc calls itself.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nMIMALLOC_SHOW_STATS=1 valgrind --soname-synonyms=somalloc=*mimalloc* -- <myprogram>\n```\n\n----------------------------------------\n\nTITLE: Specifying REST Endpoint for Currency Conversion\nDESCRIPTION: The URL of the external REST API used for currency conversion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://api.exchangerate.host/convert\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Status Examples\nDESCRIPTION: Examples showing how to use the migrate status command with admin secret and custom endpoint configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_status.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Use with admin secret:\nhasura migrate status --admin-secret \"<your-admin-secret>\"\n\n# Check status on a different server:\nhasura migrate status --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Updating Source Health Check via API\nDESCRIPTION: HTTP POST request to update Health Check configuration for a database source using the Hasura Metadata API. It sets the test query, interval, timeout, retries, and retry interval.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/health-checks/source-health-check.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  {\n    \"type\": \"pg_update_source\",\n    \"args\": {\n      \"name\": \"default\",\n      \"health_check\": {\n        \"test\": {\n          \"sql\": \"SELECT 1\"\n        },\n        \"interval\": 100,\n        \"timeout\": 2,\n        \"retries\": 3,\n        \"retry_interval\": 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura with Amazon Athena\nDESCRIPTION: Commands to download the Docker Compose file for setting up Hasura with Amazon Athena support. Users can choose between using wget or curl to fetch the file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/athena/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/athena/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/athena/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Thumbnail for Removing Collaborator\nDESCRIPTION: This snippet provides a visual guide for removing a collaborator from a project within the Hasura Console. It is crucial for users to know how to manage collaborator access effectively.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail src=\"/img/projects/remove-collaborator.png\" alt=\"Remove collaborator\" width=\"450px\" />\n```\n\n----------------------------------------\n\nTITLE: Haskell Type Definition for Entity Union Field Parser\nDESCRIPTION: Function type signature for mkEntityUnionFieldParser that creates a FieldParser for the _entities query. It uses the union selection set Parser and the FieldParsers of fields with @key directives to evaluate the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_7\n\nLANGUAGE: haskell\nCODE:\n```\nmkEntityUnionFieldParser ::\n  P.Parser 'P.Output (P.Parse) [[P.ParsedSelection a1]] ->\n  [(G.Name, [G.Directive Void], FieldParser (P.Parse) (NamespacedField (QueryRootField UnpreparedValue)))] ->\n  FieldParser (P.Parse) (NamespacedField (QueryRootField UnpreparedValue))\nmkEntityUnionFieldParser bodyParser fieldParsers = undefined\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins with Hasura CLI\nDESCRIPTION: This command lists all available plugins for the Hasura CLI, showing their versions and installation status. It also updates the local plugin index cache by default.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins list [flags]\n```\n\n----------------------------------------\n\nTITLE: Vehicle Location Tracking Schema Definition\nDESCRIPTION: SQL schema definition for a vehicle tracking system with vehicle and vehicle_location tables, establishing a relationship between vehicles and their location data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/ms-sql-server/use-cases.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nvehicle (\n  id INT PRIMARY KEY,\n  vehicle_number TEXT\n)\n\nvehicle_location (\n  id INT PRIMARY KEY,\n  location TEXT,\n  timestamp TIMESTAMP,\n  /* used to create relationship 'locations' for vehicle */\n  vehicle_id INT FOREIGN KEY REFERENCES vehicle(id)\n)\n```\n\n----------------------------------------\n\nTITLE: Running Specific API Tests in Bash\nDESCRIPTION: Executes specific API tests using matching or skipping patterns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cabal run api-tests:exe:api-tests -- -m \"SQLServer\" # SQLServer tests only\n$ cabal run api-tests:exe:api-tests -- --match=\"Views\" # All tests concerning views\n$ cabal run api-tests:exe:api-tests -- -s \"BigQuery\" # Skip BigQuery tests\n$ cabal run api-tests:exe:api-tests -- --skip=\"Mutations\" # Skip tests around mutations\n```\n\n----------------------------------------\n\nTITLE: Using the hasura completion Command\nDESCRIPTION: Basic syntax for the hasura completion command that generates auto-completion code for the specified shell.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_completion.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura completion [shell] [flags]\n```\n\n----------------------------------------\n\nTITLE: Modifying Metadata API Endpoint with URL Parameter in Hasura GraphQL Engine\nDESCRIPTION: This snippet demonstrates an alternative approach to including the resourceVersion in metadata operations by adding it as a URL parameter to the API endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/optimistic-concurrency-control.md#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata?resourceVersion=x\n{\n   \"type\": \"operation_name\",\n   \"version\": \"version_of_the_operation\",\n   \"args\": \"OperationArgs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Non-Admin Roles in Hasura\nDESCRIPTION: Command to start Hasura GraphQL Engine in development mode, which enables detailed error information in the 'internal' field for non-admin roles, useful for debugging during development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ graphql-engine --database-url <database-url> serve --dev-mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cloud Function\nDESCRIPTION: YAML configuration file containing Google Maps API key and Hasura GraphQL endpoint URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# .env.yaml\nGMAPS_API_KEY: '[GMAPS_API_KEY]'\nHASURA_GRAPHQL_ENGINE_URL: 'http://[HGE_IP]/v1/graphql'\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with dev.sh\nDESCRIPTION: Shows how to use dev.sh to run integration tests, including specifying backends and filtering tests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration\n```\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration --backend mssql\n```\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration --backend mssql -k MSSQL\n```\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration --backend mssql -k \"MSSQL and not Permission\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration --backend mssql -k MSSQL -x\n```\n\n----------------------------------------\n\nTITLE: ID Transformation for Weaviate Compatibility\nDESCRIPTION: Transforms the 'id' field to prevent conflicts with Weaviate's reserved ID field by renaming it to <table>_id\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfor row in data:\n        row[f'{table}_id'] = row.pop('id')\n```\n\n----------------------------------------\n\nTITLE: Starting SQLite Data Connector Agent\nDESCRIPTION: Command to launch the SQLite implementation of the Data Connector Agent\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> make start-sqlite-agent\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Database using MongoShell\nDESCRIPTION: MongoShell command to create a new MongoDB database named 'demo'. This is executed through the MongoDB Compass shell interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mongodb/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nuse demo;\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation of Hasura Gateway Plugin - Bash\nDESCRIPTION: This command verifies the installation of the Hasura Gateway plugin by using the help flag, ensuring users possess the correct setup and parameters to utilize the plugin effectively.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway --help\n```\n\n----------------------------------------\n\nTITLE: Testing Webhook Transform in Hasura GraphQL Engine (HTTP)\nDESCRIPTION: This snippet shows how to use the 'test_webhook_transform' endpoint to test request transformations using mock data. It includes request headers, body, and a transformation template.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/manage-metadata.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"test_webhook_transform\",\n    \"args\" : {\n      \"webhook_url\": \"http://localhost:1234\",\n      \"request_headers\": [[\"myKey\", \"myValue\"]],\n      \"body\": { \"hello\": \"world\" },\n      \"request_transform\": {\n        \"body\": \"{{ $body.world }}\",\n        \"template_engine\": \"Kriti\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating migration files from Cloud project\nDESCRIPTION: This command creates migration files from a Hasura Cloud project, fetching the database schema. It requires the project URL, admin secret, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura migrate create init --from-server --endpoint <hasura-cloud-project-url> --admin-secret <admin-secret> --database-name <database-name>\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"# note down the version\\n\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"# mark the migration as applied on the cloud project\\n\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura migrate apply --endpoint <hasura-cloud-project-url> --admin-secret <admin-secret> --version <version-number> --skip-execution\"\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Component for Usage Reports Navigation - JSX\nDESCRIPTION: This JSX snippet uses the Thumbnail component to display an image related to the Professional Plan Usage Reports navigation in the Hasura Cloud dashboard. It sets the source, alternative text, and width for the image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/plans.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail\n  src=\"/img/account-management/billing/billing-usage-professional.png\"\n  alt=\"Professional Plan Usage Reports Navigation\"\n  width=\"1000px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'not' Function in Kriti Template Engine\nDESCRIPTION: Example of using the 'not' function in Kriti template engine to negate a boolean value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_52\n\nLANGUAGE: kriti\nCODE:\n```\n{{not(true)}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Hasura Metrics Endpoint Configuration\nDESCRIPTION: Configuration to enable the Prometheus metrics endpoint in Hasura GraphQL Engine. By default, the metrics endpoint is disabled and needs to be explicitly enabled via environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_GRAPHQL_ENABLED_APIS=metadata,graphql,config,metrics\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Services\nDESCRIPTION: Command to list Kubernetes services, useful for finding the external IP to access the Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-kubernetes.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc\n```\n\n----------------------------------------\n\nTITLE: Inherited options for hasura metadata reload command in SASS\nDESCRIPTION: This snippet lists the options inherited from parent commands. These options include settings for admin secret, certificate authority, endpoint, environment file, TLS verification, log level, output colorization, project directory, and update checking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_reload.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Deleting Applied Migration in Hasura CLI\nDESCRIPTION: This command marks a specific migration version as unapplied on the server. It's useful when database objects are inconsistent due to skipped migrations, allowing for reapplication of the migration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/github-integration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate delete --version <migration_version> --server --database-name <database-name> --endpoint <cloud_project_endpoint>\n```\n\n----------------------------------------\n\nTITLE: PageInfo Type Definition\nDESCRIPTION: GraphQL type definition for the PageInfo object used in pagination handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/relay-graphql-api/query.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String!\n  endCursor: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter InvoiceLine objects. Includes logic operators, scalar fields, and nested object relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_51\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [InvoiceLine_bool_exp!]\n  _or: [InvoiceLine_bool_exp!]\n  _not: InvoiceLine_bool_exp\n\n  # Scalar fields\n  InvoiceLineId: Int_bool_exp\n  InvoiceId: Int_bool_exp\n  TrackId: Int_bool_exp\n  Quantity: Int_bool_exp\n\n  # Nested objects/object relationships\n  UnitPrice: Multicurrency_bool_exp\n  Invoice: Invoice_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: Command to verify that the Hasura GraphQL Engine and Postgres containers are running correctly after setup. This helps ensure that the installation was successful.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/citus-hyperscale-postgres/getting-started/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL Replica Database Port (Docker Compose)\nDESCRIPTION: Retrieves the exposed port for the PostgreSQL replica database container.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose port postgres-replica 5432\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgreSQL Primary Database Port (Docker Compose)\nDESCRIPTION: Retrieves the exposed port for the PostgreSQL primary database container.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose port postgres-primary 5432\n```\n\n----------------------------------------\n\nTITLE: Registering Atomic Sampling Group for GC Metrics in Haskell\nDESCRIPTION: Demonstrates how to create and register an atomic sampling group for GC metrics using the ekg-prometheus library. It shows the definition of metric types, creation of a sampling group, and registration using the registerGroup function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_7\n\nLANGUAGE: haskell\nCODE:\n```\n-- (1)\ndata GcMetrics' :: Symbol -> Symbol -> MetricType -> Type -> Type where\n  Gcs' :: GcMetrics' \"rts_gcs\" \"\" 'CounterType ()\n  MaxLiveBytes' :: GcMetrics' \"rts_max_live_bytes\" \"\" 'GaugeType ()\n\napp5 :: IO ()\napp5 = do\n  store <- newStore @GcMetrics'\n\n  -- (2)\n  let samplingGroup =\n        SamplingGroup\n          :> (Gcs', (), fromIntegral . gcs)\n          :> (MaxLiveBytes', (), fromIntegral . max_live_bytes)\n\n  _ <- register store $\n        registerGroup samplingGroup getRTSStats -- (3)\n  pure ()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Thumbnail Image for Project Creation - React\nDESCRIPTION: This snippet showcases a Thumbnail component with an image and alt text for visual aid in the project creation process. It enhances user experience by illustrating the project setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail src=\"/img/projects/create-project.png\" alt=\"Create new project in Hasura Console\" width=\"900px\" />\n```\n\n----------------------------------------\n\nTITLE: Hardcoding Admin Role in JWT Secret Configuration\nDESCRIPTION: This JSON configuration snippet shows how to hardcode the 'admin' role in the JWT secret for testing purposes or when there's no equivalent field for roles in the JWT payload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"admin_roles\": [\"admin\"],\n  \"jwt_secret\": {\n    // ...\n    \"claims_map\": {\n      \"x-hasura-allowed-roles\": [\"admin\"],\n      \"x-hasura-default-role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Poll Results View Creation\nDESCRIPTION: SQL view definition that aggregates poll results by counting votes for each option in a poll.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/ms-sql-server/use-cases.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE VIEW public.\"poll_results\" AS\n  SELECT poll.id AS poll_id,\n         o.option_id,\n         count(*) AS votes\n    FROM (\n      (\n        SELECT vote.option_id,\n               option.poll_id,\n               option.text\n          FROM (\n            vote\n              LEFT JOIN option ON ((option.id = vote.option_id))\n          )\n        ) o\n            LEFT JOIN poll ON ((poll.id = o.poll_id))\n      )\n  GROUP BY poll.question, o.option_id, poll.id;\n```\n\n----------------------------------------\n\nTITLE: Using the Question Mark Operator for Error Propagation in Rust\nDESCRIPTION: Demonstrates how to use the '?' operator to automatically unwrap and chain Result values, enabling early returns with errors while maintaining clean code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfunction display_very_important_data() -> Result<i32, ErrorType> {\n    let user = authenticate_user()?;\n    let data = retrieve_very_important_data_for(user)?;\n    for item in data {\n        emit(item)?;\n    }\n    Ok(data.len()) // you must wrap the return value if it is \"pure\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SendGrid API Request Body Template for Hasura Event Trigger\nDESCRIPTION: This code snippet shows the JSON template needed for SendGrid's Mail Send API. It uses event data from Hasura triggers to dynamically insert the recipient's email and name from the database record that triggered the event.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n{\n  \"personalizations\":\n   [\n     {\n       \"from\": { \"email\": \"<from_email>\", \"name\": \"<from_name>\" },\n       \"to\":\n         [\n           {\n             \"email\": {{ $body.event.data.new.email }},\n             \"name\": {{ $body.event.data.new.name }}\n           }\n         ]\n     }\n   ],\n  \"from\": { \"email\": \"<from_email>\", \"name\": \"<from_name>\" },\n  \"reply_to\": { \"email\": \"<replyto_email>\", \"name\": \"<from_name>\" },\n  \"subject\": \"Welcome!\",\n  \"content\":\n    [\n      {\n        \"type\": \"text/html\",\n        \"value\": \"<p>Mail from a Hasura Event Trigger!</p>\"\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring a Haskell Test Module\nDESCRIPTION: Demonstrates the recommended structure for a Haskell test module, including explicit export list, test grouping, and documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/testing-guidelines.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n-- | Overview of what this module tests.\nmodule My.Data.StructureTest where\n  ( spec\n  ) where\n\nimport ...\n\n-- | Why are the tests grouped this way?\nspec :: Spec\nspec = do\n  runBasicTests\n  runOtherTests\n\n-- | What does this group cover? Any peculiarities?\nrunBasicTests :: Spec\nrunBasicTests =\n  describe \"Basic Structure tests\" do\n    traverse_ runSort\n      [ StructureTest\n          { input = [],\n            expected = []\n          }\n      , StructureTest\n          { input = [1, 2, 3, 4],\n            expected = [1, 2, 3, 4]\n          }\n      , StructureTest\n          { input = [4, 3, 2, 1],\n            expected = [1, 2, 3, 4]\n          }\n      ]\n\n-- | Add documentation if anything has the potential to be surprising.\ndata StructureTest = StructureTest\n  { input :: [Int],\n    expected :: [Int],\n    description :: String\n  }\n\n-- | Add documentation if anything has the potential to be surprising.\nrunSort :: StructureTest -> Spec\nrunSort ...\n```\n\n----------------------------------------\n\nTITLE: Metadata API for Setting Query Tags\nDESCRIPTION: YAML schema for the Metadata API operation to configure query tags, showing the required source_name parameter and optional configuration flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/query-tags.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntype: 'set_query_tags'\nargs:\n  source_name: # Name of the source | Required\n  disabled: # Optional Field | Type: Bool | Values: true or false\n  format: # Optional Field  | Values: standard or sqlcommenter\n  omit_request_id: # Optional Field | Type: Bool | Values: true or false\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Installation\nDESCRIPTION: Pip command to install required dependencies for the Python webhook implementation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install Flask secure-smtplib\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Filtering with _ilike Operator\nDESCRIPTION: Demonstrates case-insensitive filtering using the _ilike operator to find articles containing 'lorem' regardless of case.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/text-search-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {title: {_ilike: \"%lorem%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Aggregate Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions over aggregations of InvoiceLine objects. Includes logic operators, count aggregation, and field-specific aggregate functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_53\n\nLANGUAGE: graphql\nCODE:\n```\ninput InvoiceLine_aggregate_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [InvoiceLine_aggregate_bool_exp!]\n  _or: [InvoiceLine_aggregate_bool_exp!]\n  _not: InvoiceLine_aggregate_bool_exp\n\n  # count all\n  _count: Int_bool_exp\n\n  # Scalar fields\n  InvoiceLineId: Int_aggregate_bool_exp\n  InvoiceId: Int_aggregate_bool_exp\n  TrackId: Int_aggregate_bool_exp\n  Quantity: Int_aggregate_bool_exp\n\n  # Nested object fields & object relationships\n  UnitPrice: Multicurrency_aggregate_bool_exp\n  Invoice: Invoice_aggregate_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Logs for Hasura GraphQL Engine on Azure Container Instances\nDESCRIPTION: This command retrieves logs from the Hasura GraphQL Engine container in Azure Container Instances. It helps in diagnosing issues when the Console doesn't load or for general troubleshooting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naz container logs --resource-group hasura \\\n   --name hasura-graphql-engine \\\n   --container-name hasura-graphql-engine\n# use --follow flag to stream logs\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Options for Scheduled Trigger - YAML\nDESCRIPTION: This YAML snippet includes advanced options for the Scheduled Trigger, such as retry configurations, headers, and an optional comment. These options allow for more flexibility and error handling for the trigger's execution.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-cron-trigger.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: eod_reports\n  webhook: https://mywebhook.com/eod\n  schedule: 0 22 * * 1-5\n  include_in_metadata: true\n  payload: {}\n  retry_conf:\n    num_retries: 3\n    timeout_seconds: 120\n    tolerance_seconds: 21675\n    retry_interval_seconds: 12\n  comment: This is a comment\n```\n\n----------------------------------------\n\nTITLE: Examples of using hasura metadata reload command in Bash\nDESCRIPTION: These examples demonstrate various ways to use the 'hasura metadata reload' command, including reloading all metadata, using an admin secret, and specifying an endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_reload.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Reload all the metadata information from database:\nhasura metadata reload\n\n# Use with admin secret:\nhasura metadata reload --admin-secret \"<admin-secret>\"\n\n# Use with a specific endpoint:\nhasura metadata reload --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObjRelUsing Schema in Hasura\nDESCRIPTION: Specifies the schema for object relationships, including foreign key constraints and manual configuration options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foreign_key_constraint_on\": \"ObjRelUsingChoice\",\n  \"manual_configuration\": \"ObjRelUsingManualMapping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes using Hasura CLI\nDESCRIPTION: This bash command applies the metadata changes after removing the event trigger configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Insert Permission for MSSQL Table in Hasura\nDESCRIPTION: This example shows a more complex insert permission that includes multiple conditions in the check clause. It allows insertion based on the author_id, category, and review status of the article.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\",\n        \"permission\" : {\n            \"check\" : {\n                \"author_id\" : \"X-HASURA-USER-ID\",\n                \"$or\" : [\n                    {\n                        \"category\" : \"editorial\",\n                        \"is_reviewed\" : false\n                    },\n                    {\n                        \"category\" : { \"$neq\" : \"editorial\"}\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing API Query Parameters for Author Filtering and Pagination\nDESCRIPTION: This URL query string filters author fields and implements pagination. It requests the 'first_name' field for Author, sets the page offset to 1, and limits results to 4 items.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/select_model/Authors.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Author]=first_name&page[offset]=1&page[limit]=4\n```\n\n----------------------------------------\n\nTITLE: Using Backend Tags for Type-Safe Dispatch in Haskell\nDESCRIPTION: Implements a solution to the dependency cycle using GADT-based backend tags. This approach allows explicit dispatch to backend-specific implementations while maintaining type safety without requiring the typeclass constraint in the existential constructor.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\ndata BackendTag (b :: BackendType) where\n  PostgresTag :: BackendTag 'Postgres\n  MSSQLTag    :: BackendTag 'MSSQL\n  ...\n\ndata BackendSourceInfo = forall b. Backend b => BackendSourceInfo (BackendTag b) (SourceInfo b)\n\nbuildSource\n  :: (BackendSchema b, MonadSchema m)\n  => SourceInfo b\n  -> m SomeExistentialSchemaInfo\nbuildSource = ...\n\nbuildAllSources\n  :: MonadSchema m\n  => SourceCache\n  -> m [SomeExistentialSchemaInfo]\nbuildAllSources cache = for cache $ \\(BackendSourceInfo backendTag sourceInfo) -> case backendTag of\n  PostgresTag -> buildSource sourceInfo\n  MSSQLTag    -> buildSource sourceInfo\n  ...\n```\n\n----------------------------------------\n\nTITLE: Dex Configuration for Azure AD SAML Integration\nDESCRIPTION: YAML configuration for Dex service to integrate with Azure AD SAML. This includes issuer, storage, web settings, static clients, and SAML connector configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/azure-ad.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: http://localhost:5556/dex\n\nstorage:\n  type: memory\n\nweb:\n  http: 0.0.0.0:5556\n  allowedOrigins: ['*']\n\nstaticClients:\n  - id: hasura-app\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Hasura App'\n    public: true\n\nconnectors:\n  - type: saml\n    id: saml\n    name: SAML\n    config:\n      ssoURL: https://login.microsoftonline.com/<Directory (tenant) ID>/saml2\n      ca: /path/to/saml-ca.pem\n      redirectURI: http://localhost:5556/dex/callback\n      usernameAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n      emailAttr: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\n      groupsAttr: http://schemas.microsoft.com/ws/2008/06/identity/claims/role\n      entityIssuer: spn:<client-id>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Timestamp (UTC)\nDESCRIPTION: This GraphQL snippet demonstrates querying a timestamp field with UTC timezone. The `Timestamp` scalar type represents a date and time value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    timestamp: \"2016-07-20T17:30:15+05:30\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental SQL Optimizations in Hasura\nDESCRIPTION: This snippet shows how to enable experimental SQL optimizations in Hasura GraphQL Engine. These optimizations are designed to improve performance for queries with row-level permissions. Enable it using either a command-line flag or an environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n\"`--experimental-features=optimize_permission_filters`\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n\"`HASURA_GRAPHQL_EXPERIMENTAL_FEATURES`\"\n```\n\n----------------------------------------\n\nTITLE: Deploying a Webhook with Flask and smtplib in Python\nDESCRIPTION: This snippet sets up a Flask server to handle incoming webhook requests from Hasura. It verifies the request headers and queries the database using Hasura GraphQL endpoint. Email notifications are sent through an SMTP server set up with smtplib. Necessary dependencies like Flask and requests can be installed with pip. It includes a route at '/daily-summary' to handle POST requests and sends emails directly using stored credentials. The server operates on port 4000.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/daily-summary-email.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport smtplib\nfrom smtplib import SMTPException\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom datetime import datetime, timedelta\nimport requests\n\napp = Flask(__name__)\n\n# Create an SMTP server connection\ndef create_smtp_server():\n    try:\n        server = smtplib.SMTP(host='smtp.ethereal.email', port=587)\n        server.starttls()\n        server.login('example@superstore.com', 'samplePassword123')\n        return server\n    except SMTPException as e:\n        print(f\"An error occurred while creating the SMTP server: {e}\\n\\n🔔We'll print the message to the terminal:\\n\\n\")\n        return None\n\n@app.route('/daily-summary', methods=['POST'])\ndef send_daily_summary():\n    # Confirm the authentication header is correct\n    auth_header = request.headers.get('secret-authorization-string')\n    if auth_header != 'super_secret_string_123':\n        return jsonify({'message': 'Unauthorized'}), 401\n\n    # Get the date for the query\n    today = datetime.now()\n    twenty_four_hours_prior = today - timedelta(days=1)\n\n    # Fetch data from your Hasura instance (replace with actual endpoint and admin secret)\n    endpoint = '<YOUR_CLOUD_PROJECT_ENDPOINT>'\n    admin_secret = '<YOUR_ADMIN_SECRET>'\n    query = {\n        \"query\": \"\"\"\n        query DailyNotificationsQuery($start_time: timestamptz!) {\n          notifications(where: {created_at: {_gte: $start_time}}) {\n            id\n            message\n            user {\n              id\n              email\n              name\n            }\n          }\n        }\n        \"\"\",\n        \"variables\": {\"start_time\": twenty_four_hours_prior.isoformat()}\n    }\n    headers = {\n        'Content-Type': 'application/json',\n        'x-hasura-admin-secret': admin_secret\n    }\n    response = requests.post(endpoint, json=query, headers=headers)\n    data = response.json()\n    notifications = data.get('data', {}).get('notifications', [])\n\n    # Create an email and send it for each notification\n    recipients = []\n    for notification in notifications:\n        # Create a message\n        msg = MIMEMultipart()\n        msg['From'] = 'sender@SuperStore.com'\n        msg['To'] = f\"{notification['user']['name']} <{notification['user']['email']}>\"\n        msg['Subject'] = f\"You've got new notifications, {notification['user']['name'].split(' ')[0]}!\"\n        message_body = f\"Hi {notification['user']['name'].split(' ')[0]},\\n\\nCheck out your recent notifications:\\n\\n{notification['message']}\\n\\nThanks,\\nSuperStore.com\"\n        msg.attach(MIMEText(message_body, 'plain'))\n\n        server = create_smtp_server()\n        if server is not None:\n            # Send the email if server is running\n            server.sendmail('sender@SuperStore.com', notification['user']['email'], msg.as_string())\n            server.quit()\n        else:\n            # or just print the message to the terminal\n            print(f\"From: {msg['From']}\\nTo: {msg['To']}\\nSubject: {msg['Subject']}\\n{message_body}\")\n\n        recipients.append(notification['user']['email'])\n\n    return jsonify({'message': 'Notifications sent!', 'recipients': recipients})\n\nif __name__ == '__main__':\n    app.run(port=4000)\n```\n\n----------------------------------------\n\nTITLE: API Query Parameters with Field Selection and Pagination\nDESCRIPTION: URL query parameters demonstrating field selection for Track entity (TrackId, Name, Composer), pagination limit of 5 records, and inclusion of an Album relationship with an unknown property. Uses square bracket notation for nested parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/failing/include/Track.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Track]=TrackId,Name,Composer&page[limit]=5&include=Album.Unknown\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons in JavaScript\nDESCRIPTION: This code snippet demonstrates the importation of components and icons for managing database schema documentation. The components include Thumbnail and VersionedLink, while the icon is a schema SVG. These imports are crucial for rendering interactive UI and documentation functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport Schema from '@site/static/icons/features/schema.svg';\n```\n\n----------------------------------------\n\nTITLE: Passing JWT to Hasura in Authorization Header\nDESCRIPTION: Example of how to pass the JWT in the Authorization header when making requests to Hasura through the Lambda function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/lambda-cognito/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Bearer <JWT>\n```\n\n----------------------------------------\n\nTITLE: OpenDD Field Argument Definition Approach 1\nDESCRIPTION: Defines a new OpenDD kind called 'FieldArgument' that would contain the argument definitions and mappings for a specific field. This approach creates separate metadata objects for field arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-field-argument-types-changes.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: FieldArgument\nversion: v1\ndefinition:\n  name: Artist_Name_Field_Argument\n  arguments:\n    - name: full\n      argumentType: Bool\n    - name: initialsOnly\n      argumentType: Bool\n    - name: truncateAfter\n      argumentType: Int\n  dataConnectorArgumentsMapping:\n    - dataConnectorName: pg_1\n      dataConnectorObjectType: artist\n      dataConnectorFieldName: name\n      argumentMapping:\n        full: full_name\n        initialsOnly: convert_to_initials\n        truncateAfter: truncate_length\n```\n\n----------------------------------------\n\nTITLE: Granting Secret Access to Service Account\nDESCRIPTION: Command to grant the Secret Manager Secret Accessor role to the default compute service account.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding <PROJECT_NUMBER> \\\n    --member='serviceAccount:<PROJECT_NUMBER>-compute@developer.gserviceaccount.com' \\\n    --role='roles/secretmanager.secretAccessor'\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies with Homebrew for GraphQL Engine\nDESCRIPTION: Installs all required system dependencies using Homebrew, including Google Cloud SDK, Node.js, OpenSSL, PCRE, database drivers and other tools needed to compile the GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install google-cloud-sdk \\\n             node@16 \\\n             openssl \\\n             pcre \\\n             unixodbc \\\n             libpq \\\n             libffi \\\n             microsoft/mssql-release/mssql-tools18 \\\n             direnv \\\n             coreutils \\\n             pcre\n```\n\n----------------------------------------\n\nTITLE: Setting up Graphql-Engine executable path in Bash\nDESCRIPTION: Command to export the path of the graphql-engine executable produced by cabal for use in the test harness. This enables testing against an external GraphQL-Engine process rather than an in-thread server instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export GRAPHQL_ENGINE=$(cabal list-bin exe:graphql-engine)\n```\n\n----------------------------------------\n\nTITLE: Making Health Check API Request\nDESCRIPTION: Example of making a GET request to the Hasura health check endpoint with an optional strict parameter to check server health status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/health.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /healthz?strict=false HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Aggregate Selection Options in GraphQL\nDESCRIPTION: This input type and enum define aggregate functions that can be applied to decimal fields, such as count, sum, average, max, and min operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_82\n\nLANGUAGE: graphql\nCODE:\n```\ninput Decimal_aggregate_select @oneOf {\n  _unary_fn: Decimal_aggregate_select_unary\n}\n\nenum Decimal_aggregate_select_unary {\n  _count\n  _count_distinct\n  _sum\n  _avg\n  _max\n  _min\n}\n```\n\n----------------------------------------\n\nTITLE: Create SQL Server Endpoint for Always On\nDESCRIPTION: Sets up a high availability endpoint on the primary SQL node that uses TCP for data mirroring, with certificate-based authentication and AES encryption. The endpoint is essential for Always On configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ENDPOINT [Hadr_endpoint]\n   AS TCP (LISTENER_IP = (0.0.0.0), LISTENER_PORT = 5022)\n   FOR DATA_MIRRORING (\n      ROLE = ALL,\n      AUTHENTICATION = CERTIFICATE dbm_certificate,\n      ENCRYPTION = REQUIRED ALGORITHM AES\n      );\nALTER ENDPOINT [Hadr_endpoint] STATE = STARTED;\nGRANT CONNECT ON ENDPOINT::[Hadr_endpoint] TO [dbm_login];\n```\n\n----------------------------------------\n\nTITLE: Response Structure from Hasura Webhook Invocation\nDESCRIPTION: Sample response from invoking Hasura's webhook, containing results of a completed scheduled trigger, including user data with unfinished carts.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/quickstart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"body\": \"{\\\"endpoint\\\":\\\"https://<PROJECT_NAME>.hasura.app/v1/graphql\\\",\\\"unfinished_carts\\\":3,\\\"emails\\\":[\\\"Hello, Rob! \\\\n\\\\nYou have items in your cart: Hasuras in The Cloud Tee, Get Ship Done Mug, Sticker Sheet. \\\\n\\\\nDon't you want to buy them?\\\",\\\"Hello, Marion! \\\\n\\\\nYou have items in your cart: Monogram Baseball Cap, The Original Tee, Sticker Sheet. \\\\n\\\\nDon't you want to buy them?\\\",\\\"Hello, Abby! \\\\n\\\\nYou have items in your cart: Monogram Baseball Cap, The Original Tee. \\\\n\\\\nDon't you want to buy them?\\\"]}\",\n    \"status\": 200\n  },\n  \"type\": \"webhook_response\",\n  \"version\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing mimalloc events using Windows Performance Recorder (WPR)\nDESCRIPTION: This batch script demonstrates how to use WPR to start recording mimalloc events, run a program, and stop recording. The resulting .etl file can be analyzed in Windows Performance Analyzer (WPA).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/src/prim/windows/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n> wpr -start src\\prim\\windows\\etw-mimalloc.wprp -filemode\n> <my mimalloc program>\n> wpr -stop test.etl\n```\n\n----------------------------------------\n\nTITLE: Reregistering and Deregistering Metrics in EKG-Prometheus\nDESCRIPTION: This code demonstrates how to handle metric lifecycle with EKG-Prometheus, including registering metrics, replacing existing metrics, and using deregistration handles to remove specific metrics from the store.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\n-- app3 :: IO ()\n-- app3 = do\n--   store <- newStore @AppMetrics1 -- reusing a previous specification\n-- \n--   requestsCounter <- Counter.new\n--   connectionsGauge <- Gauge.new\n-- \n--   -- Register the metrics, retaining the deregistration handle. -- (1)\n--   deregistrationHandle <- register store $\n--     registerCounter Requests () (Counter.read requestsCounter) <>\n--     registerGauge Connections () (Gauge.read connectionsGauge)\n-- \n--   Counter.inc requestsCounter\n--   Gauge.set connectionsGauge 99\n-- \n--   sample1 <- sampleAll store\n--   let expectedSample1 = M.fromList\n--         [ (\"app_requests\", (\"\", M.singleton HM.empty (Counter 1)))\n--         , (\"app_connections\", (\"\", M.singleton HM.empty (Gauge 99)))\n--         ]\n--   assert (sample1 == expectedSample1) $ pure ()\n-- \n--   -- Replace (reregister) the connections gauge metric with a new one.\n--   replacementConnectionsGauge <- Gauge.new\n--   Gauge.set replacementConnectionsGauge 5\n--   _ <- register store $\n--     registerGauge Connections () (Gauge.read replacementConnectionsGauge)\n-- \n--   sample2 <- sampleAll store\n--   let expectedSample2 = M.fromList\n--         [ (\"app_requests\", (\"\", M.singleton HM.empty (Counter 1)))\n--         , (\"app_connections\", (\"\", M.singleton HM.empty (Gauge 5)))\n--         ]\n--   assert (sample2 == expectedSample2) $ pure ()\n-- \n--   -- Use the deregistration handle to deregister the original metrics.\n--   deregistrationHandle -- (2)\n-- \n--   sample3 <- sampleAll store\n--   let expectedSample3 =\n--         M.singleton \"app_connections\" $\n--           (\"\", M.singleton HM.empty (Gauge 5))\n--   assert (sample3 == expectedSample3) $ pure ()\n```\n\n----------------------------------------\n\nTITLE: Rendering Hasura Overview Page with React Components in JSX\nDESCRIPTION: This JSX code renders the Hasura Getting Started overview page with imported components, descriptive text, and embedded video. It includes links to various guides and displays the Hasura basics icon.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport Basics from '@site/static/icons/features/basics.svg';\n\n# <Basics /> Getting Started with Hasura\n\n<div className=\"overview-header\">\n  <div className=\"overview-text\">\n    <p>\n        The Hasura GraphQL Engine is a blazingly-fast GraphQL server that gives you instant, real-time GraphQL APIs over many popular databases and other data sources.\n        \n        \n        You can quickly get started with Hasura by using <a href=\"https://cloud.hasura.io\">Hasura Cloud</a>, our hosted platform, or by running \n        it on your own infrastructure.\n    </p>\n    <h4>Quick Links</h4>\n    <ul>\n      <li>\n        <VersionedLink to=\"/getting-started/use-case/overview/\">Get started using Hasura Cloud with one of our use case guides.</VersionedLink>\n      </li>\n      <li>\n        Get started using <VersionedLink to=\"/getting-started/docker-simple\">Docker</VersionedLink> or check out one of our <VersionedLink to=\"/deployment/deployment-guides/index\">deployment guides.</VersionedLink>\n      </li>\n    </ul>\n    <p>\n        To learn more about the functionalities of Hasura, check out <VersionedLink to=\"/getting-started/how-it-works/index/\">how it works</VersionedLink>.\n    </p>\n\n  </div>\n <iframe\n        src=\"https://www.youtube.com/embed/XDGw-uQKTOc\"\n        frameBorder=\"0\"\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n      />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Invoking Event Trigger with Payload - MSSQL\nDESCRIPTION: This snippet explains how to invoke an event trigger with a custom payload using the `mssql_invoke_event_trigger` API. It includes parameters for the event trigger name, source database, and the payload to be sent.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_invoke_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"source\": \"default\",\n        \"payload\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Existential Types for Backend Source Information in Haskell\nDESCRIPTION: Creates an existential type wrapper to store heterogeneous backend source information. This allows storing information about different database backends in the same container while preserving type safety.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\ndata BackendSourceInfo = forall b. Backend b => BackendSourceInfo (SourceInfo b)\n```\n\n----------------------------------------\n\nTITLE: Git Initialization and Commit\nDESCRIPTION: These bash commands initialize a Git repository in the Hasura project directory.  `git init` initializes the repository, `git add .` stages all files for commit, and `git commit -m \"hasura project init\"` commits the staged changes with the message \"hasura project init\". This helps track the initial state of the Hasura project under version control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"# initialize version control\ngit init\n\n# commit initial project status\ngit add .\ngit commit -m \\\"hasura project init\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Tokenization Error in Rust for GraphQL Engine\nDESCRIPTION: This code snippet defines an error structure for handling tokenization errors in the Hasura GraphQL Engine. It includes details about expected tokens, the specific lexer error encountered (an invalid string with an unknown escape sequence), and the position of the error in the source code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/9005_escaped_char.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Name,\n            ],\n            found: LexerError(\n                InvalidString(\n                    UnknownEscapeSequence(\n                        \"\\\\97\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 2,\n            col: 11,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for hasura completion\nDESCRIPTION: Options specific to the hasura completion command, including the file destination parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_completion.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --file string   file to which output has to be written\n-h, --help          help for completion\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Aggregate Selection Options in GraphQL\nDESCRIPTION: This input type and enum define aggregate functions that can be applied to integer fields, such as count, sum, average, max, and min operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_79\n\nLANGUAGE: graphql\nCODE:\n```\ninput Int_aggregate_select @oneOf {\n  _unary_fn: Int_aggregate_select_unary\n}\n\nenum Int_aggregate_select_unary {\n  _count\n  _count_distinct\n  _sum\n  _avg\n  _max\n  _min\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Webhook for Abandoned Cart Reminders in JavaScript\nDESCRIPTION: A Node.js webhook implementation using Express and Nodemailer to send email reminders for abandoned shopping carts. Connects to a Hasura GraphQL endpoint to retrieve cart data and sends personalized emails to users.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst nodemailer = require('nodemailer');\n\nconst app = express();\n\nnodemailer.createTestAccount((err, account) => {\n  if (err) {\n    console.error('Failed to create a testing account. ' + err.message);\n    return process.exit(1);\n  }\n\n  console.log('Credentials obtained, listening on the webhook...');\n\n  const transporter = nodemailer.createTransport({\n    host: 'smtp.ethereal.email',\n    port: 587,\n    secure: false,\n    auth: {\n      user: account.user,\n      pass: account.pass,\n    },\n  });\n\n  app.post('/abandoned-cart', async (req, res) => {\n    const authHeader = req.headers['secret-authorization-string'];\n    if (authHeader !== 'super_secret_string_123') {\n      return res.status(401).json({\n        message: 'Unauthorized',\n      });\n    }\n\n    // Rest of webhook implementation\n  });\n\n  app.listen(4000, () => {\n    console.log('Server started on port 4000');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel\nDESCRIPTION: Command to start an ngrok tunnel for exposing local webhook endpoint to the internet.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with bench.sh Script\nDESCRIPTION: Command example showing how to run the chinook benchmark against a specific Hasura GraphQL Engine Docker image. The bench.sh script executes a particular benchmark set against either a specified Docker image or a locally running Hasura instance on port 8181.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bench.sh chinook hasura/graphql-engine:v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Creating a Jupyter Notebook in Hasura Cloud\nDESCRIPTION: Command to create a new Jupyter Notebook in Hasura Cloud, requiring a user-defined password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura notebook create -p <password>\n```\n\n----------------------------------------\n\nTITLE: Building and Running Data Connector Agent with npm\nDESCRIPTION: Commands to install dependencies and start the Data Connector agent using npm. Requires NodeJS 16.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/reference/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install\n> npm start\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura Enterprise with MariaDB\nDESCRIPTION: Commands to download the Docker Compose file for Hasura Enterprise Edition with MariaDB integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mariadb/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mariadb/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Disable Hasura Server Console\nDESCRIPTION: This bash command sets the environment variable `HASURA_GRAPHQL_ENABLE_CONSOLE` to `false`. This disables the Hasura Console served directly by the Hasura Server, forcing all changes to be made through the Hasura CLI to ensure proper tracking of migrations and metadata.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"HASURA_GRAPHQL_ENABLE_CONSOLE=false\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Maybe Handling in Haskell\nDESCRIPTION: An example showing a preferred way of handling Maybe values using monadic binding. This approach avoids the need for intermediate variable names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nparseOptionalArgument userRole value >>= \\case\n  Just argument -> ...\n  Nothing -> ...\n```\n\n----------------------------------------\n\nTITLE: Installing @hasura/metadata Package\nDESCRIPTION: Command to install the @hasura/metadata package using yarn or npm package managers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hasura/metadata # npm i @hasura/metadata\n```\n\n----------------------------------------\n\nTITLE: Insert Operation Response Structure\nDESCRIPTION: JSON response structure showing the result of the insert operation, including the number of affected rows and the returning data for the inserted records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation_results\": [\n    {\n      \"affected_rows\": 2,\n      \"returning\": [\n        {\n          \"ArtistId\": 300,\n          \"Name\": \"Taylor Swift\"\n        },\n        {\n          \"ArtistId\": 301,\n          \"Name\": \"Phil Collins\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Installation\nDESCRIPTION: Command to check if Prometheus is correctly installed by displaying its version information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nprometheus --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik as a Reverse Proxy for Hasura\nDESCRIPTION: Sample Traefik configuration files (traefik.toml and traefik-dynamic.toml) to proxy requests to Hasura GraphQL Engine. It includes HTTPS redirection and SSL certificate handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/serve-behind-proxy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n#traefik.toml\n\n[providers]\n  [providers.file]\n    filename = \"traefik-dynamic.toml\"\n\n[api]\n  dashboard = true\n  debug = true\n\n[entryPoints]\n  [entryPoints.web]\n    address = \":80\"\n\n    [entryPoints.web.http]\n      [entryPoints.web.http.redirections]\n        [entryPoints.web.http.redirections.entryPoint]\n          to = \"web-secure\"\n          scheme = \"https\"\n\n  [entryPoints.web-secure]\n    address = \":443\"\n\n[certificatesResolvers.sample.acme]\n  email = \"myemail@example.com\"\n  storage = \"acme.json\"\n\n  [certificatesResolvers.sample.acme.httpChallenge]\n    # used during the challenge\n    entryPoint = \"web\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n#traefik-dynamic.toml\n\n[http]\n    [http.routers]\n       [http.routers.my-router]\n          rule = \"Host(`hasura.example.com`)\"\n          service = \"hasura\"\n          entryPoints = [\"web-secure\"]\n       [http.routers.my-router.tls]\n          certResolver = \"sample\"\n\n    [http.services]\n        [http.services.hasura.loadbalancer]\n            [[http.services.hasura.loadbalancer.servers]]\n                url = \"http://127.0.0.1:5000\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n#traefik-dynamic.toml\n...\n\n    [http.routers]\n       [http.routers.my-router]\n          rule = \"Host(`example.com`) && Path(`/hasura`))\"\n          service = \"hasura\"\n          entryPoints = [\"web-secure\"]\n       [http.routers.my-router.tls]\n          certResolver = \"sample\"\n\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployed Function URL\nDESCRIPTION: This YAML snippet shows the structure of the output containing the deployed function's URL. It demonstrates how to locate the HTTPS trigger URL for the deployed GraphQL service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/google-cloud-functions/nodejs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://us-central1-hasura-test.cloudfunctions.net/hello-graphql\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Table of Contents in JSX\nDESCRIPTION: Demonstrates how to generate a partial table of contents for a specific section using the filterTOC prop of the TOCInline component.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/table-of-contents.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Render only the \"Partial (Sub) Table of Contents\" sub-items if any.\n<TOCInline toc={toc} filterTOC={'partial-sub-table-of-contents'} />\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Date\nDESCRIPTION: This GraphQL snippet demonstrates querying a date field. The `Date` scalar type represents a calendar date (year, month, day) in the format yyyy-mm-dd.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    date: \"1996-03-15\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Event Trigger HTTP Workers Metric Definition\nDESCRIPTION: Metric definition for monitoring active Event Trigger HTTP workers in Hasura, showing metric name, type and labels.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_event_trigger_http_workers`\nType   | Gauge\nLabels | none\n```\n\n----------------------------------------\n\nTITLE: Dropping Hasura Catalog Schema\nDESCRIPTION: This SQL command drops the entire Hasura catalog schema to clean up footprints when using a different metadata database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/remove-event-triggers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDROP SCHEMA IF EXISTS hdb_catalog;\n```\n\n----------------------------------------\n\nTITLE: Using Int Scalar in GraphQL Query\nDESCRIPTION: Example of using the default GraphQL Int scalar type for integer values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    int_col: 27\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cloud Function Trigger URL Response\nDESCRIPTION: YAML response showing the deployed cloud function's HTTPS trigger URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://asia-south1-hasura-test.cloudfunctions.net/trigger\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to render a ProductBadge component within the Markdown content, likely indicating that the described features are available in Pro and Enterprise editions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/account-management/billing/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductBadge pro ee />\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok for Webhook URL in Bash\nDESCRIPTION: This snippet demonstrates how to set up ngrok for tunneling a local webhook endpoint. It provides a command to expose a local server to the internet.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/daily-summary-email.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Identify Docker Gateway IP Address\nDESCRIPTION: Uses the `ifconfig` command to discover the IP address of the Docker bridge network interface. This IP is required to connect to Dockerized services externally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$> ifconfig\n\nbr-7d762e376414: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n     inet 172.16.238.1  netmask 255.255.255.0  broadcast 172.16.238.255\n     inet6 fe80::42:b0ff:fe8b:57ef  prefixlen 64  scopeid 0x20<link>\n     ether 02:42:b0:8b:57:ef  txqueuelen 0  (Ethernet)\n     RX packets 20022  bytes 2157399 (2.1 MB)\n     RX errors 0  dropped 0  overruns 0  frame 0\n     TX packets 36571  bytes 8365375 (8.3 MB)\n     TX errors 0  dropped 0  overruns 0  carrier 0  collisions 0\n```\n\n----------------------------------------\n\nTITLE: Successful SQL Query Response (Schema Modification)\nDESCRIPTION: This snippet illustrates a successful response from the GraphQL Engine after executing a schema modification SQL query, such as creating a table. The response includes \"result_type\": \"CommandOk\" and a null \"result\", indicating that the command was executed successfully without returning any data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-api/run-sql.mdx#2025-04-17_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"result_type\": \"CommandOk\",\n  \"result\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering with Relationships in GraphQL\nDESCRIPTION: Shows how to order articles based on a related author's id using a GraphQL query. This demonstrates the ability to use nested objects in ordering clauses for MySQL data in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mysql-relationships.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles( order_by: { author: { id: desc } } ) {\n    id\n\tname\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Links in React JSX for Hasura Documentation\nDESCRIPTION: A JSX fragment that displays a list of navigation links for Hasura GraphQL Engine documentation. The component includes versioned links to policy documentation, with several links commented out indicating features that might be in development or not yet publicly available.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <ul>\n    {/* <li>\n      <VersionedLink to=\"/schema/overview/\">HIPAA compliance</VersionedLink>\n    </li> */}\n    <li>\n      <VersionedLink to=\"/policies/sla/\">Priority response SLAs</VersionedLink>\n    </li>\n    {/* <li>\n      <VersionedLink to=\"/schema/overview/\">Onboarding program</VersionedLink>\n    </li>\n    <li>\n      <VersionedLink to=\"/schema/overview/\">Named customer success manager</VersionedLink>\n    </li> */}\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Events Fetched Per Batch Metric Definition\nDESCRIPTION: Metric definition showing the number of events fetched per batch from Hasura Event tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/metrics.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nName   | `hasura_events_fetched_per_batch`\nType   | Gauge\nLabels | none\n```\n\n----------------------------------------\n\nTITLE: Defining LDAP Group Structure in LDIF Format\nDESCRIPTION: LDIF format entries that define the organizational structure for groups in an LDAP directory, including the creation of an admins group with a member.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ldif\nCODE:\n```\ndn: ou=Groups,dc=example,dc=org\nobjectClass: organizationalUnit\nou: Groups\n\ndn: cn=admins,ou=Groups,dc=example,dc=org\nobjectClass: groupOfNames\ncn: admins\nmember: cn=jane,ou=People,dc=example,dc=org\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Certificate for HTTPS\nDESCRIPTION: Create a Managed Certificate resource for HTTPS access to Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.gke.io/v1beta1\nkind: ManagedCertificate\nmetadata:\n  name: hasura-cert\nspec:\n  domains:\n    - example.com\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes in Hasura CLI\nDESCRIPTION: Bash command to apply metadata changes in Hasura CLI after modifying the tables.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/using-existing-database.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Keyset Cursor Based Pagination in GraphQL\nDESCRIPTION: This GraphQL query shows how to implement keyset cursor based pagination by using a where clause instead of offset, fetching authors with id greater than 5.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/pagination.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    limit: 5,\n    where: { id: {_gt: 5} }\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Column Name Configuration in CLI\nDESCRIPTION: YAML configuration for customizing table and column names in Hasura metadata\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/custom-field-names.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: dbo\n    name: authors\n  configuration:\n    custom_root_fields:\n      select: authors_aggregate\n```\n\n----------------------------------------\n\nTITLE: Disabling Console in Hasura GraphQL Engine\nDESCRIPTION: Illustrates how to disable the Hasura Console in production deployments to prevent accidental changes. This can be done by setting an environment variable or omitting a specific flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/production-checklist.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# set the env var to false or do not set it at all to disable the Console\nHASURA_GRAPHQL_ENABLE_CONSOLE=false\n\n# when using flags, no --enable-console flag implies the Console is disabled\ngraphql-engine --database-url=<database-url> serve\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Instance Information\nDESCRIPTION: This command retrieves the FQDN and provisioning state of the Hasura GraphQL Engine container instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/azure-container-instances-postgres.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naz container show --resource-group hasura \\\n   --name hasura-graphql-engine \\\n   --query \"{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}\" \\\n   --out table\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook URL Format\nDESCRIPTION: Template format for the webhook URL endpoint that will handle review moderation requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/moderate-user-content-with-gpt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your-webhook-url>/check-review\n```\n\n----------------------------------------\n\nTITLE: MariaDB JDBC Connection URL Examples\nDESCRIPTION: Specific examples of JDBC connection URLs for MariaDB, including default and custom port scenarios.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mariadb://myhost.mycompany.com/mariadb?user=abc&password=pqr  # assuming the default port 3306\njdbc:mariadb://localhost:4533/mariadb?user=abc&password=pqr        # assuming MariaDB is running on port 4533\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Service Status\nDESCRIPTION: Command to check the status of the deployed Kubernetes services and their external IP addresses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get svc\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE\nhasura       LoadBalancer   10.96.214.240   localhost     80:30303/TCP   4m\nkubernetes   ClusterIP      10.96.0.1       <none>        443/TCP        8m\n```\n\n----------------------------------------\n\nTITLE: Proposed GraphQL Query Annotation in GraphQL\nDESCRIPTION: Proposed simplified approach for annotating GraphQL queries with just model and field names, to be used with the common OpenDD query pipeline.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Author @Annotation(model_name: \"Author\") {\n    id @Annotation(field_name: \"id\")\n    name @Annotation(field_name: \"name\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hoogle using Cabal in Bash\nDESCRIPTION: This command installs the Hoogle Haskell API search engine using Cabal package manager.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cabal install hoogle\n```\n\n----------------------------------------\n\nTITLE: Clearing All Event Data for Cron and Scheduled Events - SQL\nDESCRIPTION: This snippet provides SQL commands for completely clearing all events associated with cron and scheduled triggers, including both the event data and their invocation logs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/clean-up.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_cron_events;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_scheduled_events;\n```\n\n----------------------------------------\n\nTITLE: Deleting All Action Logs in SQL\nDESCRIPTION: SQL command to delete all entries from the action log table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/logs-clean-up.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_action_log;\n```\n\n----------------------------------------\n\nTITLE: Error Handling (Python)\nDESCRIPTION: This error handler catches any exceptions that occur during the execution of the Flask application and returns a JSON response with an error message and a 500 status code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Error handling\n@app.errorhandler(Exception)\ndef handle_error(error):\n  print(error)\n  response = jsonify({\"error_message\": \"An error occurred\"})\n  response.status_code = 500\n  return response\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Fragment Definition in Rust\nDESCRIPTION: This code demonstrates how a GraphQL fragment is represented after being parsed in Rust. The fragment defines fields for a User type including id, name, and profilePic with a size argument. The structure includes source position tracking for each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0012_fragment_definition.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Fragment(\n                    FragmentDefinition {\n                        name: Spanning {\n                            item: Name(\n                                \"friendFields\",\n                            ),\n                            start: SourcePosition {\n                                line: 1,\n                                col: 10,\n                            },\n                            end: SourcePosition {\n                                line: 1,\n                                col: 21,\n                            },\n                        },\n                        type_condition: Spanning {\n                            item: TypeCondition {\n                                on: Spanning {\n                                    item: TypeName(\n                                        Name(\n                                            \"User\",\n                                        ),\n                                    ),\n                                    start: SourcePosition {\n                                        line: 1,\n                                        col: 26,\n                                    },\n                                    end: SourcePosition {\n                                        line: 1,\n                                        col: 29,\n                                    },\n                                },\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 23,\n                            },\n                            end: SourcePosition {\n                                line: 1,\n                                col: 29,\n                            },\n                        },\n                        directives: [\n                            Spanning {\n                                item: Directive {\n                                    name: Spanning {\n                                        item: Name(\n                                            \"example\",\n                                        ),\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 32,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 38,\n                                        },\n                                    },\n                                    arguments: None,\n                                },\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 31,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 38,\n                                },\n                            },\n                        ],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"id\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 6,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 6,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"name\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 8,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 8,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"profilePic\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 4,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 4,\n                                                        col: 14,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"size\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 16,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 19,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: SimpleValue(\n                                                                            Integer(\n                                                                                50,\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 4,\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: This simple command applies the metadata changes to the Hasura GraphQL Engine after configuring the Event Trigger headers in the YAML file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/create-trigger.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Custom Root Fields Configuration\nDESCRIPTION: Complete metadata configuration with both custom name and custom root fields\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nsources:\n- name: wb\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: WORKBENCH_URL\n  tables:\n  - table: article\n  functions:\n  - function: search_articles\n    configuration:\n      custom_name: find_articles\n      custom_root_fields:\n        function: FindArticles\n        function_aggregate: FindArticlesAggregate\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI\nDESCRIPTION: Command to apply metadata changes in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Adding Homebrew Dependencies to Environment Path\nDESCRIPTION: Adds the installed dependencies to the shell environment path by appending export statements to the .zshrc file. This ensures the system can find the required executables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho 'export PATH=\"/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin:$PATH\"' >> ~/.zshrc\necho 'export PATH=\"/opt/homebrew/opt/openssl@1.1/bin:$PATH\"' >> ~/.zshrc\necho 'export PATH=\"/opt/homebrew/opt/node@16/bin:$PATH\"' >> ~/.zshrc\necho 'export PATH=\"/opt/homebrew/opt/libpq/bin:$PATH\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for hasura init\nDESCRIPTION: Available flags specific to the hasura init command that allow customizing the initialization of a Hasura project, including setting admin secret and endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string   admin secret for Hasura GraphQL Engine\n    --endpoint string       http(s) endpoint for Hasura GraphQL Engine\n-h, --help                  help for init\n    --version int           config version to be used (default 3)\n```\n\n----------------------------------------\n\nTITLE: Joining Secondary Nodes to Availability Group\nDESCRIPTION: Configures the secondary nodes to join the existing Availability Group, ensuring that they are set up to participate in data replication and high availability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nALTER AVAILABILITY GROUP [ag1] JOIN WITH (CLUSTER_TYPE = NONE);\nALTER AVAILABILITY GROUP [ag1] GRANT CREATE ANY DATABASE;\nGO\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Arguments Parser in Haskell\nDESCRIPTION: Constructs a parser for table query arguments including where clauses, ordering, limits and offsets. Combines multiple sub-parsers using applicative style.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ntableArguments\n  :: (MonadSchema m, MonadParse n)\n  => SourceName     -- ^ name of the source we're building the schema for\n  -> TableInfo b    -- ^ internal information about the given table (e.g. columns)\n  -> SelPermInfo b  -- ^ selection permissions for that table\n  -> m (\n       -- parser for a group of input fields, such as arguments to a field\n       -- has an Applicative instance to allow to write one parser for a group of\n       -- arguments\n       InputFieldsParser n (\n         -- internal representation of the arguments to a table select\n         IR.SelectArgs b\n       )\n     )\ntableArguments sourceName tableInfo selectPermissions = do\n  -- construct other parsers in the outer `m` monad\n  whereParser    <- tableWhereArg    sourceName tableInfo selectPermissions\n  orderByParser  <- tableOrderByArg  sourceName tableInfo selectPermissions\n  distinctParser <- tableDistinctArg sourceName tableInfo selectPermissions\n  -- combine them using an \"applicative do\"\n  pure do\n    whereArg    <- whereParser\n    orderByArg  <- orderByParser\n    limitArg    <- tableLimitArg\n    offsetArg   <- tableOffsetArg\n    distinctArg <- distinctParser\n    pure $ IR.SelectArgs\n      { IR._saWhere    = whereArg\n      , IR._saOrderBy  = orderByArg\n      , IR._saLimit    = limitArg\n      , IR._saOffset   = offsetArg\n      , IR._saDistinct = distinctArg\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a Standard View for Popular Authors in Postgres\nDESCRIPTION: This SQL snippet creates a standard view named 'popular_authors' that filters authors with a rating greater than 6. The view doesn't store data but represents the result of the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW popular_authors AS\n  SELECT name, rating\n  FROM authors\n  WHERE rating > 6;\n```\n\n----------------------------------------\n\nTITLE: Displaying Recursion Limit Error in Rust\nDESCRIPTION: A Rust error structure representing a GraphQL recursion limit exceeded error. The error includes the specific error message and the source position (line and column) where the error occurred in the GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/6001_stackoverflow2.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: OtherError(\n            \"Recursion limit exceeded\",\n        ),\n        position: SourcePosition {\n            line: 2,\n            col: 190,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Table Structure in Hasura\nDESCRIPTION: SQL table definition for storing profile information including name, address, and geographical coordinates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: profile\n\nColumns:\n\nid: Integer auto-increment\nname: Text\naddress: Text\nlat: Numeric, Nullable\nlng: Numeric, Nullable\n```\n\n----------------------------------------\n\nTITLE: Transform Request Headers in YAML\nDESCRIPTION: This snippet shows how to transform request headers by adding and removing headers using the 'transforms' key in YAML format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n   request_headers:\n     add_headers: [{\"x-cutom-id\": \"{{$.event.user_id}}\"}, { \"User-Agent\": myapp-server}]\n     remove_headers: [User-Agent]\n```\n\n----------------------------------------\n\nTITLE: Options for Hasura Plugins List Command\nDESCRIPTION: This snippet shows the available options specific to the 'hasura plugins list' command, including the flag to prevent index updating and the help option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dont-update-index   don't update the plugin index local cache, only show the list\n-h, --help                help for list\n```\n\n----------------------------------------\n\nTITLE: Deleting All Table Objects in GraphQL\nDESCRIPTION: Explains how to delete all objects in an 'article' table through GraphQL using an empty filter expression that matches all records. The operation returns the count of affected rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/delete.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_all_articles {\n  delete_article (\n    where: {}\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema Definition\nDESCRIPTION: SQL schema definition for benchmarking purposes, creating author and article tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndrop table if exists author;\ndrop table if exists article;\nCREATE TABLE author(\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL\n);\nCREATE TABLE article(\n  id SERIAL PRIMARY KEY,\n  title TEXT NOT NULL,\n  author_id INTEGER\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Metadata Modification for Test Groups in Haskell\nDESCRIPTION: Proposes a function signature for modifying blank metadata structures to add test group-specific metadata. This function may fail if preconditions are not met, resulting in a test failure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/hspec-test-suite.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\nmodifyMetadata :: TestGroup -> Metadata -> Either MetadataError Metadata\n```\n\n----------------------------------------\n\nTITLE: Implementing DB-to-DB Joins Test Setup in Haskell\nDESCRIPTION: Shows the current implementation of metadata setup for DB-to-DB joins testing, using a mix of WaiSession and TestM monad. This approach may be refactored based on the outcome of the RFC.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/hspec-test-suite.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nwithMetadata\n:: ((SourceMetadata ('Postgres 'Vanilla), Application) -> IO b)\n-> IO b\n```\n\n----------------------------------------\n\nTITLE: Dropping Select Permission for MSSQL Table in Hasura\nDESCRIPTION: This example shows how to drop an existing select permission for the 'user' role on the 'article' table. It removes all select constraints previously set for this role and table combination.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_drop_select_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Comment on a PostgreSQL Relationship in Hasura\nDESCRIPTION: This endpoint sets or updates a comment on a relationship. The example adds a descriptive comment to the 'article_detail' relationship on the 'article' table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_set_relationship_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"name\": \"article_detail\",\n        \"comment\" : \"has extra information about an article like count etc.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Computed Field\nDESCRIPTION: A GraphQL query that demonstrates how to use the computed field 'likedByMe' which accesses session variables to determine if the current user liked an article.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    title\n    content\n    likedByMe\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the diff command\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_diff.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Aggregating Nested Arrays of Scalars in GraphQL\nDESCRIPTION: GraphQL query showing aggregation over a nested array of scalars, specifically the Emails field of the Customer collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Customer {\n    # Select all Customer objects\n    Emails_aggregate {\n      # Aggregate each customer's emails array\n      _count # The total number of non-null entries in the array\n      _max # The alphabetically last email in the array\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Clear Usage Examples\nDESCRIPTION: Examples showing different ways to use the metadata clear command, including basic usage, using admin secret, and specifying a different endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_clear.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clear all the metadata information from database:\nhasura metadata clear\n\n# Use with admin secret:\nhasura metadata clear --admin-secret \"<admin-secret>\"\n\n# Clear metadata on a different Hasura instance:\nhasura metadata clear --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Node.js Function to Google Cloud\nDESCRIPTION: Command to deploy a Node.js HTTP-triggered function to Google Cloud Functions using runtime nodejs8.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta functions deploy nodejs-echo \\\n       --runtime nodejs8 \\\n       --trigger-http\n```\n\n----------------------------------------\n\nTITLE: Implementing Links in React Components\nDESCRIPTION: Example of using Docusaurus Link component for both internal and external links in React components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\n\n// Internal Link\n<Link to=\"/rst-vs-mdx-guide/links#root-relative-links\">Root Relative Links</Link>\n\n// External Link\n<Link to=\"https://hasura.io\">Hasura</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasets Capability in JSON\nDESCRIPTION: Simple configuration example showing how to declare dataset capabilities for an agent.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"datasets\": { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Various examples showing how to use the metadata diff command with different options including admin secret, diff types, and custom endpoints\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_diff.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# NOTE: This command is in preview, usage and diff format may change.\n\n# Show changes between server metadata and the exported metadata file:\nhasura metadata diff\n\n# Apply admin secret for Hasura GraphQL Engine:\nhasura metadata diff --admin-secret \"<admin-secret>\"\n\n# Specify a diff type\nhasura metadata diff --type \"unified-json\"\nhasura metadata diff --type \"json\"\n\n# Diff metadata on a different Hasura instance:\nhasura metadata diff --endpoint \"<endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Example Trigger Payload JSON\nDESCRIPTION: Sample JSON payload showing the structure of the event data sent to the trigger when a note is updated.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/mutation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": {\n        \"op\": \"UPDATE\",\n        \"data\": {\n            \"old\": {\n                \"note\": \"note1\",\n                \"id\": 1\n            },\n            \"new\": {\n                \"note\": \"note1 updated\",\n                \"id\": 1\n            }\n        }\n    },\n    \"created_at\": \"2018-10-02T06:38:22.67311Z\",\n    \"id\": \"f57a1c79-72ba-4c19-8791-37d1b9616bcf\",\n    \"trigger\": {\n        \"name\": \"note_revision_trigger\",\n        \"id\": \"5d85cbd1-c134-45ce-810c-7ecd3b4fc1ee\"\n    },\n    \"table\": {\n        \"schema\": \"public\",\n        \"name\": \"note\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Command Examples\nDESCRIPTION: Basic Docker Compose commands for starting the container and running tests with the Hasura Data Connector SDK.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/data-connector-sdk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run tests\n```\n\n----------------------------------------\n\nTITLE: Single Model Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for a user insert operation. The webhook receives input data including name and email fields for each object being inserted.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n        \"input\": [\n            {\n                \"name\": \"Jane\",\n                \"email\": \"jane@b.com\",\n            },\n            {\n                \"name\": \"Doe\",\n                \"email\": \"doe@b.com\",\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mutation Constraint Violation Error using JSON\nDESCRIPTION: This JSON snippet represents the structure of an error response returned when a mutation fails due to a constraint violation, such as a primary key violation. It includes a `type` indicating the error type, a `message` providing a descriptive error message, and `details` containing structured information about the violation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mutation-constraint-violation\",\n  \"message\": \"Violation of PRIMARY KEY constraint PK_Artist. Cannot insert duplicate key in table Artist. The duplicate key value is (1).\", // Can be any helpfully descriptive error message\n  \"details\": { // Any helpful structured error information, the below is just an example\n    \"constraint_name\": \"PK_Artist\",\n    \"table\": [\"Artist\"],\n    \"key_value\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Event Trigger with Hasura Metadata API\nDESCRIPTION: Deletes an existing Event Trigger by specifying its name and optional source database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_delete_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Countries Data from Remote Schema\nDESCRIPTION: Example GraphQL query demonstrating how to fetch country data including emoji, name and language information from a remote schema endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/remote-schemas.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n   countries {\n     emoji\n     name\n     languages {\n       name\n       native\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Project Update Command\nDESCRIPTION: Examples showing how to use the update-project-v2 command with different options, including specifying a custom metadata directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Read more about v2 configuration for CLI at https://docs.hasura.io\n\n# Update the Hasura Project from config v1 to v2\nhasura scripts update-project-v2\n\n# Update the Hasura Project from config v1 to v2 with a different metadata directory:\nhasura scripts update-project-v2 --metadata-dir \"metadata\"\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Including Function Definitions\nDESCRIPTION: This snippet shows a `functions.yaml` file that includes definitions for database functions. The functions included in this file will be exposed as top-level GraphQL fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- '!include public_search_author.yaml'\n\n```\n\n----------------------------------------\n\nTITLE: Seed Creation Options\nDESCRIPTION: Available command-specific options for seed creation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --from-table stringArray   name of table from which seed file has to be initialized. e.g. table1, myschema1.table1\n-h, --help                     help for create\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Addon in main.ts\nDESCRIPTION: This snippet shows how to add the console env addon to the Storybook configuration. It modifies the addons array in the StorybookConfig object to include 'storybook-addon-console-env'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/nx/storybook-addon-console-env/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: StorybookConfig = {\n  ...\n  addons: [\n    ...\n    'storybook-addon-console-env',\n    ...\n  ],\n  ...\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table for Notes in SQL\nDESCRIPTION: Defines the structure of a 'notes' table with 'id' and 'note' columns. The 'id' is an integer type, and 'note' is a text type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Specifies required Python packages and their versions for the project. Includes security-related packages like bcrypt and cryptography, AWS SDK packages like boto3, and utility packages for SSH and file operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbcrypt==3.2.0\nboto3==1.17.62\nbotocore==1.20.62\ncffi==1.14.5\ncryptography==3.4.7\nfabric==2.6.0\ninvoke==1.5.0\njmespath==0.10.0\nparamiko==2.7.2\npatchwork==1.0.1\npathlib2==2.3.5\npycparser==2.20\nPyNaCl==1.4.0\npython-dateutil==2.8.1\ns3transfer==0.4.2\nsix==1.15.0\nurllib3==1.26.4\n```\n\n----------------------------------------\n\nTITLE: Implementing API Server with Event Publishing\nDESCRIPTION: Express server implementation that handles device management and publishes events through PubSub when devices are created.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/docs/subscriptions.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport pubsub from './pubsub';\n\nconst HTTP_PORT = 4000;\n\nconst Devices = {\n  'Audio-player': {\n    name: 'Audio-player',\n    userName: 'johnny',\n  },\n  Drone: {\n    name: 'Drone',\n    userName: 'eric',\n  },\n};\n\nconst startServer = () => {\n  const app = express();\n\n  app.use(bodyParser.json());\n\n  const httpServer = app.listen(HTTP_PORT, () => {\n    app.get('/api/devices', (req, res) => {\n      res.status(200).send(Object.values(Devices));\n    });\n\n    app.post('/api/devices', (req, res) => {\n      if (req.body.userName && req.body.name) {\n        const device = req.body;\n        Devices[device.name] = device;\n        const packet = {\n          topic: `/api/${device.userName}/devices/${req.method.toUpperCase()}/${device.name}`,\n          payload: Buffer.from(JSON.stringify(device)),\n        };\n\n        // Use pubsub to publish the event\n        pubsub.publish(packet);\n\n        res.status(200).send(device);\n      } else {\n        res.status(404).send({\n          message: 'Wrong device schema',\n        });\n      }\n    });\n\n    app.get('/api/devices/:deviceName', (req, res) => {\n      if (req.params.deviceName in Devices) {\n        res.status(200).send(Devices[req.params.deviceName]);\n      } else {\n        res.status(404).send({\n          message: 'Wrong device ID.',\n        });\n      }\n    });\n  });\n};\n\nstartServer();\n```\n\n----------------------------------------\n\nTITLE: Custom Name Configuration\nDESCRIPTION: Metadata configuration showing how to set a custom name for a function\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nsources:\n- name: wb\n  kind: postgres\n  configuration:\n    connection_info:\n      database_url:\n        from_env: WORKBENCH_URL\n  tables:\n  - table: article\n  functions:\n  - function: search_articles\n    configuration:\n      custom_name: find_articles\n```\n\n----------------------------------------\n\nTITLE: Hasura Version Command Help Options\nDESCRIPTION: Available help options specific to the version command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_version.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet defines the structure of a GraphQL query using Rust structs. It includes fields for name, arguments, directives, and nested selection sets, along with source position information for each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0004_selection_with_fields_aliases_arguments.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nSpanning {\n    item: Field(\n        Field {\n            alias: None,\n            name: Spanning {\n                item: Name(\n                    \"name\",\n                ),\n                start: SourcePosition {\n                    line: 10,\n                    col: 13,\n                },\n                end: SourcePosition {\n                    line: 10,\n                    col: 16,\n                },\n            },\n            arguments: None,\n            directives: [],\n            selection_set: None,\n        },\n    ),\n    start: SourcePosition {\n        line: 10,\n        col: 13,\n    },\n    end: SourcePosition {\n        line: 10,\n        col: 16,\n    },\n},\nSpanning {\n    item: Field(\n        Field {\n            alias: None,\n            name: Spanning {\n                item: Name(\n                    \"faveSnack\",\n                ),\n                start: SourcePosition {\n                    line: 11,\n                    col: 13,\n                },\n                end: SourcePosition {\n                    line: 11,\n                    col: 21,\n                },\n            },\n            arguments: None,\n            directives: [],\n            selection_set: None,\n        },\n    ),\n    start: SourcePosition {\n        line: 11,\n        col: 13,\n    },\n    end: SourcePosition {\n        line: 11,\n        col: 21,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Tagging Docker Image for JWT Authentication Server\nDESCRIPTION: Shows the command to build and tag a Docker image for the JWT authentication server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t hasura/passportjs-jwt-roles:latest\n```\n\n----------------------------------------\n\nTITLE: Setting GraphQL Engine Version\nDESCRIPTION: Sets the version number of the GraphQL Engine to be built. This affects the version reported by the compiled binary and is used for fetching frontend assets from CDN.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho '2.13.0' > server/CURRENT_VERSION\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Identity Column Syntax\nDESCRIPTION: Examples of PostgreSQL syntax for creating Identity Columns, showing both GENERATED BY DEFAULT and GENERATED ALWAYS options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/identity-columns.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncolumn GENERATED BY DEFAULT AS IDENTITY\n```\n\nLANGUAGE: sql\nCODE:\n```\ncolumn GENERATED ALWAYS AS IDENTITY\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Web Configuration File\nDESCRIPTION: Command to create a YAML file for configuring password protection for the Prometheus web interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo touch web.yml\n```\n\n----------------------------------------\n\nTITLE: Multiple Updates Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for multiple article updates, containing an array of update operations to be validated.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n        \"input\": [\n            {\n              \"where\": {\"rating\": {\"_lte\": 1}},\n              \"_set\": {\"is_published\": false}\n            },\n            {\n              \"where\": {\"rating\": {\"_gte\": 4}},\n              \"_set\": {\"is_published\": true}\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in BigQuery\nDESCRIPTION: Demonstrates how to fetch a limited number of records (first 5 authors) from a BigQuery table using GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/pagination.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors(\n    limit: 5\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cloud SQL Instance Connection Name\nDESCRIPTION: Retrieve the connection name for the Cloud SQL instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances describe hasura-postgres \\\n       --format=\"value(connectionName)\" --project hasura\n```\n\n----------------------------------------\n\nTITLE: Hasura Console Command Options\nDESCRIPTION: Lists all available command-line options for configuring the Hasura console including network settings, security options, and display preferences\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_console.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --address string                 address to serve console and migration API from (default \"localhost\")\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --api-host string                (PREVIEW: usage may change in future) host serving migrate api (default \"http://localhost\")\n    --api-port string                port for serving migrate api (default \"9693\")\n    --browser string                 open console in a specific browser\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --console-hge-endpoint string    endpoint on which the CLI Console should reach the HGE Server\n    --console-port string            port for serving console (default \"9695\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for console\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n    --no-browser                     do not automatically open console in browser\n    --static-dir string              directory where static assets mentioned in the console html template can be served from\n    --use-server-assets              when rendering console, use assets provided by HGE server\n```\n\n----------------------------------------\n\nTITLE: Configuring Permissions with Remote Relationships in Hasura API\nDESCRIPTION: HTTP request to create select permissions on a reviews table using a remote relationship. The permission checks if the user ID matches the owner ID of the product in a remote database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"snowflake_create_select_permission\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"table\": \"reviews\",\n    \"role\": \"user\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": {\n        \"review_product\": {\n          \"owner_id\": {\n            \"_eq\": \"X-Hasura-User-Id\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Count Aggregates\nDESCRIPTION: Shows how to use distinct count and regular count aggregates in a GraphQL query\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Album_aggregate {\n    aggregate {\n      distinct_count: count(columns: Title, distinct: true)\n      count\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ECS Task Definition\nDESCRIPTION: Registers the Hasura task definition with ECS using the AWS CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ecs register-task-definition --cli-input-json file://hasura-fargate-task.json\n```\n\n----------------------------------------\n\nTITLE: Creating Event Trigger with Auto Cleanup via Hasura Metadata API\nDESCRIPTION: This HTTP request demonstrates how to create an event trigger with auto cleanup configuration using the Hasura Metadata API. It includes parameters for the trigger and the cleanup configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/auto-cleanup.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\" : \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"send_email\",\n    \"source\": \"default\",\n    \"table\": \"users\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"webhook\": \"https://send.email\",\n    \"cleanup_config\": {\n      \"batch_size\": 10000,\n      \"clean_invocation_logs\": true,\n      \"clear_older_than\": 168,\n      \"paused\": false,\n      \"schedule\": \"0 0 * * *\",\n      \"timeout\": 60\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing hasura migrate squash command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'hasura migrate squash' command. It allows developers to squash multiple migrations into a single one, which can be useful for consolidating iterative changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_squash.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate squash [flags]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Data Connector Agent with Docker\nDESCRIPTION: Docker commands to build and run the Data Connector agent. Exposes the agent on port 8100.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/reference/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> docker build . -t dc-reference-agent:latest\n> docker run -it --rm -p 8100:8100 dc-reference-agent:latest\n```\n\n----------------------------------------\n\nTITLE: SQL Function for Retrieving Articles\nDESCRIPTION: This SQL function is used as a computed field to get articles for an author. It takes the author table as input and a search parameter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/using-computed-fields.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nget_articles(table_input author, search text)\n```\n\n----------------------------------------\n\nTITLE: Creating Event Trigger in MSSQL\nDESCRIPTION: API endpoint for creating or replacing event triggers in MSSQL with support for insert, update, and delete operations. Includes configuration for webhooks, headers, and cleanup settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_create_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"table\": {\n           \"name\": \"users\",\n           \"schema\": \"public\"\n        },\n        \"source\": \"default\",\n        \"webhook\": \"https://httpbin.org/post\",\n        \"insert\": {\n            \"columns\": \"*\",\n            \"payload\": [\"username\"]\n        },\n        \"update\": {\n            \"columns\": [\"username\", \"real_name\"],\n            \"payload\": \"*\"\n        },\n        \"delete\": {\n            \"columns\": \"*\"\n        },\n        \"headers\":[\n          {\n              \"name\": \"X-Hasura-From-Val\",\n              \"value\": \"myvalue\"\n          },\n          {\n              \"name\": \"X-Hasura-From-Env\",\n              \"value_from_env\": \"EVENT_WEBHOOK_HEADER\"\n          }\n        ],\n        \"cleanup_config\": {\n            \"schedule\": \"0 0 * * *\",\n            \"batch_size\": 10000,\n            \"clear_older_than\": 168,\n            \"timeout\": 60,\n            \"clean_invocation_logs\": false,\n            \"paused\": false\n        },\n        \"replace\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Docusaurus Tabs Component in JSX\nDESCRIPTION: Demonstrates how to import and implement tabbed interface components using Docusaurus theme components. Shows setup of Tabs with multiple TabItem elements containing markdown content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/tabs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs className=\"api-tabs\">\n  <TabItem value=\"console\" label=\"Console\">\n    Click the `Reload` button in the `Remote Schema` section on the Hasura\n    Console.\n  </TabItem>\n  <TabItem value=\"api\" label=\"API\">\n    Make a request to the [reload_remote_schema](#) API.\n  </TabItem>\n</Tabs>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Error Enum in Rust\nDESCRIPTION: Shows how to define a simple error type as an enum where each variant represents a specific kind of error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenum Error {\n    UserNotFound,\n    InvalidPassword,\n    PasswordNotMatched,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex Service for SAML SSO with Azure AD\nDESCRIPTION: Docker Compose configuration for setting up the Dex service to proxy Azure AD SAML login. This includes volume mounts for configuration files and port mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/azure-ad.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dex:\n    image: dexidp/dex\n    volumes:\n      - ./dex/config.docker.yaml:/etc/dex/config.docker.yaml\n      - ./dex/saml-ca.pem:/etc/dex/saml-ca.pem:ro\n    ports:\n      - '5556:5556'\n```\n\n----------------------------------------\n\nTITLE: SQL Implementation of Column-Level Data Redaction\nDESCRIPTION: Example SQL query showing how to implement data redaction using CASE statements for conditional column access based on role permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  \"Id\",\n  CASE\n    WHEN \"Id\" IN (1,2) THEN \"ColumnA\"\n    ELSE NULL\n  END AS \"ColumnA\",\n  \"ColumnB\",\n  CASE\n    WHEN \"Id\" IN (2,3) THEN \"ColumnC\"\n    ELSE NULL\n  END AS \"ColumnC\"\nFROM \"Test\"\nWHERE \"Id\" IN (1,2) OR \"Id\" IN (2,3)\n```\n\n----------------------------------------\n\nTITLE: Install webhook dependencies\nDESCRIPTION: This command installs the necessary npm packages for the webhook: express for creating the server and nodemailer for sending emails.  This is a prerequisite for running the javascript webhook code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/user-reengagement-email.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express nodemailer\n```\n\n----------------------------------------\n\nTITLE: Example of Equality Filtering between Columns\nDESCRIPTION: This JSON snippet illustrates a filtering condition where a person's first name is checked for equality against their last name, utilizing a binary comparison operator with a column reference.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"binary_op\",\n  \"operator\": \"equal\",\n  \"column\": {\n    \"name\": \"first_name\",\n    \"column_type\": \"string\"\n  },\n  \"value\": {\n    \"type\": \"column\",\n    \"column\": {\n      \"name\": \"last_name\",\n      \"column_type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Optional Arguments in GraphQL\nDESCRIPTION: Demonstrates the new ability to omit empty 'args' object when all arguments have presets in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery\n  ActorsByMovieMany {\n    actor_id\n    movie_id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Meta Tags Import Matrix Table\nDESCRIPTION: A markdown table showing the import rules between different meta tags (legacy, package). The matrix shows which meta-tagged libraries can import from other meta-tagged libraries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/tags.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| ![Can row import colum](./can-import-icon.png) | `meta:legacy` | `meta:package` |\n| ---------------------------------------------- | :-----------: | :------------: |\n| `meta:legacy`                                  |      ✅       |       ⛔       |\n| `meta:package`                                 |      ⛔       |       ✅       |\n```\n\n----------------------------------------\n\nTITLE: Proposed Field-Specific Validation Configuration\nDESCRIPTION: YAML configuration example for a potential enhancement allowing users to specify which fields should be included in the validation payload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvalidate_input:\n  type: http\n  defintion: <DEFINITION>\n  fields:\n  - column_1\n  - column_2\n  - relationship_1\n  - relationship_2\n```\n\n----------------------------------------\n\nTITLE: Despliegue en Azure con un clic - Motor Hasura GraphQL\nDESCRIPTION: Botón para desplegar rápidamente el Motor Hasura GraphQL en Azure utilizando una plantilla de Azure Resource Manager.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/translations/README.mx_spanish.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json)\n```\n\n----------------------------------------\n\nTITLE: Returning Schema Information in JSON for Hasura GraphQL Engine\nDESCRIPTION: This JSON structure defines the schema for tables in a database, including table names, types, primary keys, columns, and mutability properties. It's returned by the GET /schema endpoint when the metadata is (re)loaded by graphql-engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": [\"Artist\"],\n      \"type\": \"table\",\n      \"primary_key\": [\"ArtistId\"],\n      \"description\": \"Collection of artists of music\",\n      \"columns\": [\n        {\n          \"name\": \"ArtistId\",\n          \"type\": \"number\",\n          \"nullable\": false,\n          \"description\": \"Artist primary key identifier\",\n          \"insertable\": true,\n          \"updatable\": false,\n          \"value_generated\": { \"type\": \"auto_increment\" }\n        },\n        {\n          \"name\": \"Name\",\n          \"type\": \"string\",\n          \"nullable\": true,\n          \"description\": \"The name of the artist\",\n          \"insertable\": true,\n          \"updatable\": true\n        }\n      ],\n      \"insertable\": true,\n      \"updatable\": true,\n      \"deletable\": true\n    },\n    {\n      \"name\": [\"Album\"],\n      \"type\": \"table\",\n      \"primary_key\": [\"AlbumId\"],\n      \"description\": \"Collection of music albums created by artists\",\n      \"columns\": [\n        {\n          \"name\": \"AlbumId\",\n          \"type\": \"number\",\n          \"nullable\": false,\n          \"description\": \"Album primary key identifier\",\n          \"insertable\": true,\n          \"updatable\": false,\n          \"value_generated\": { \"type\": \"auto_increment\" }\n        },\n        {\n          \"name\": \"Title\",\n          \"type\": \"string\",\n          \"nullable\": false,\n          \"description\": \"The title of the album\",\n          \"insertable\": true,\n          \"updatable\": true\n        },\n        {\n          \"name\": \"ArtistId\",\n          \"type\": \"number\",\n          \"nullable\": false,\n          \"description\": \"The ID of the artist that created this album\",\n          \"insertable\": true,\n          \"updatable\": true\n        }\n      ],\n      \"insertable\": true,\n      \"updatable\": true,\n      \"deletable\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HIE configuration for IDE support\nDESCRIPTION: Commands to set up the Haskell IDE Engine (HIE) configuration for better IDE support when developing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -s sample.hie.yaml hie.yaml\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Options specific to the metadata clear command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_clear.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for clear\n```\n\n----------------------------------------\n\nTITLE: Current GraphQL Query Annotation in GraphQL\nDESCRIPTION: Current approach for annotating GraphQL queries with connector, collection, and field information after validation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    Author @Annotation(connector: ..., collection: ..., permission_filter: ...) {\n        id @Annotation(ndc_field_name: ..., ndc_field_type: ...)\n        name @Annotation(ndc_field_name: ..., ndc_field_type: ...)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Managed Monad in Haskell\nDESCRIPTION: Presents the definition of the Managed monad, which encapsulates the pattern of resource acquisition and release in a monadic structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\nnewtype Managed a = Managed (forall r . (a -> IO r) -> IO r)\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data into Specific Postgres Table Columns\nDESCRIPTION: psql command to import data from a CSV file into specific columns of a table. This approach is useful when the CSV doesn't contain all columns defined in the table schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/import-data-from-csv.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# \\copy <table_name> (<column1>, <column2>, ...) from '</path/to/file/filename.csv>' delimiter ',' CSV HEADER;\n\n\\copy profile (firstName, lastName) from '/Users/sarahlewis/documents/profile.csv' delimiter ',' CSV HEADER;\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled APIs in Hasura GraphQL Engine using Bash\nDESCRIPTION: This snippet demonstrates how to enable only the GraphQL API while disabling the Metadata and pgdump APIs in Hasura GraphQL Engine. It shows both the command-line flag and environment variable approaches.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# enable only graphql api, disable Metadata and pgdump\n--enabled-apis=\"graphql\"\nHASURA_GRAPHQL_ENABLED_APIS=\"graphql\"\n```\n\n----------------------------------------\n\nTITLE: Repository Clone for Hasurians\nDESCRIPTION: Command to clone the private Hasura GraphQL Engine repository for Hasura employees.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine-mono.git\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Scalar Fields Enum in GraphQL\nDESCRIPTION: This enum defines all scalar fields available on the Multicurrency model that can be used for grouping operations. It includes fields for Currency and Value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_92\n\nLANGUAGE: graphql\nCODE:\n```\nenum Multicurrency_scalar_fields {\n  Currency\n  Value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Revision Table Schema in SQL\nDESCRIPTION: SQL definition for the 'note_revision' table that stores revision history. It includes auto-incrementing id, note content, reference to the original note, and a timestamp for when the revision was created.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note_revision\n\nColumns:\n\nid         Integer auto-increment\nnote       Text\nnote_id    Integer\nupdate_at  Timestamp, default: now()\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hasura Plugins Commands\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'hasura plugins list' command. They include environment file specification, log level setting, and project directory selection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Examples of null values in boolean expressions in GraphQL\nDESCRIPTION: Examples showing how null values in boolean expressions were handled in v1 and the changes in v2. These examples demonstrate various equivalent queries that delete all users due to null value handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ndelete_users(where: {_id: {_eq: null}})  # field is null, which is as if it were omitted\ndelete_users(where: {_id: {}})           # object is empty, evaluates to True for all rows\ndelete_users(where: {})                  # object is empty, evaluates to True for all rows\ndelete_users()                           # delete all users\n```\n\n----------------------------------------\n\nTITLE: One-click Deployment Links\nDESCRIPTION: HTML links for deploying Hasura to various cloud platforms including Heroku, DigitalOcean, Azure and Render.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/V2-README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Infra provider** | **One-click link** | **Additional information** |\n|:------------------:|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------:|\n| Heroku | [![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku) | [docs](https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html) |\n| DigitalOcean | [![Deploy to DigitalOcean](https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png)](https://marketplace.digitalocean.com/apps/hasura?action=deploy&refcode=c4d9092d2c48&utm_source=hasura&utm_campaign=readme) | [docs](https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app) |\n| Azure | [![Deploy to Azure](http://azuredeploy.net/deploybutton.png)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json) | [docs](https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html) |\n| Render | [![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql) | [docs](https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html) |\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata\nDESCRIPTION: This command exports the Hasura metadata from the specified project URL using the admin secret. The metadata is exported to YAML files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata export --endpoint <hasura-project-url> --admin-secret <admin-secret>\"\n```\n\n----------------------------------------\n\nTITLE: Quick Checklist in Markdown for PR Review\nDESCRIPTION: A markdown checklist for quick PR reviews, covering common issues like spelling, heading cases, link integrity, and code snippet rendering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/checklist.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Check for spelling or grammatical errors.\n- [ ] Check that `<h1>` is title case.\n- [ ] Check that `<h2>`s and below are sentence case.\n- [ ] Check that Hasura features (e.g., Console `||` Actions) are title case.\n- [ ] Check for broken internal links.\n- [ ] Check for broken external links.\n- [ ] Check for broken images.\n- [ ] Check for broken (questionably rendered) code snippets.\n```\n\n----------------------------------------\n\nTITLE: Deleting Test Databases in Bash\nDESCRIPTION: Removes persistent databases after shutting down containers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Environment Variables for Glitch\nDESCRIPTION: Environment variables configuration for Firebase service account that needs to be added to the .env file when deploying to Glitch.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nFIREBASE_CONFIG='{\n  \"type\": \"service_account\",\n  \"project_id\": \"testapp-2222\",\n  \"private_key_id\": \"f02aca08952f702de43ed577b428f405efe2d377\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n<your-private-key>\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"firebase-adminsdk-t4sik@testapp-24a60.iam.gserviceaccount.com\",\n  \"client_id\": \"113608616484852272199\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-t4sik%40testapp-22222.iam.gserviceaccount.com\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI using go get\nDESCRIPTION: This command installs the Hasura CLI using the Go package manager.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/hasura/graphql-engine/cli/cmd/hasura\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Event Trigger\nDESCRIPTION: Configuration for creating a Hasura event trigger that responds to profile table operations by calling a webhook URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nTrigger name: profile_change\nSchema/Table: public/profile\nOperations: Insert, Update, Delete\nWebhook URL: [Trigger URL]\n```\n\n----------------------------------------\n\nTITLE: Defining SameTable Schema in Hasura\nDESCRIPTION: Specifies the schema for same table object relationships using a column name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_20\n\nLANGUAGE: haskell\nCODE:\n```\nPGColumn\n```\n\n----------------------------------------\n\nTITLE: Mark Migrations as Applied\nDESCRIPTION: Command to mark existing migrations as applied without re-executing them, useful for synchronizing migration states\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --skip-execution --version 1650879664716 --endpoint https://another-hasura-instance.hasura.app\n```\n\n----------------------------------------\n\nTITLE: Dropping Insert Permission for MSSQL Table in Hasura\nDESCRIPTION: This snippet shows how to drop an existing insert permission for the 'user' role on the 'article' table. It removes all insert constraints previously set for this role and table combination.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_drop_insert_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Export Settings in YAML\nDESCRIPTION: YAML configuration file showing how to set up OpenTelemetry export parameters including data types, headers, resource attributes, endpoints, and batch processing settings for traces, metrics and logs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus: enabled # accept enabled, disabled or env template {{ENV_NAME}}\ndata_types:\n  - traces\n  - metrics\n  - logs\nexporter_otlp:\n  headers:\n    - name: x-test-header\n      value: testing\n    - name: x-header-from-env\n      value_from_env: TEST_ENV_VAR\n  resource_attributes:\n    - name: stage\n      value: production\n    - name: region\n      value: us-east\n  otlp_traces_endpoint: http://host.docker.internal:4318/v1/traces\n  otlp_metrics_endpoint: http://host.docker.internal:4318/v1/metrics\n  otlp_logs_endpoint: http://host.docker.internal:4318/v1/logs\n  protocol: http/protobuf\n  traces_propagators:\n    - tracecontext\nbatch_span_processor:\n  max_export_batch_size: 512\n```\n\n----------------------------------------\n\nTITLE: Connecting to CockroachDB Container\nDESCRIPTION: Command to connect to the CockroachDB container and start the SQL command line tool.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it docker-compose-cockroach-cockroach-1 ./cockroach sql --insecure\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining metadata like title, description, keywords, and sidebar position\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud-monitoring/alerting/configure-alerts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Configure alerts\ndescription: Configure Alerts for Hasura Cloud\nsidebar_label: Configure alerts\nkeywords:\n  - hasura\n  - docs\n  - observability\n  - alert\nsidebar_position: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema Permissions HTTP Request\nDESCRIPTION: HTTP POST request to add Remote Schema permissions with required arguments including remote schema name and role. Requires enabling Remote Schema permissions via server flag or environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_remote_schema_permissions\",\n    \"args\" : {\n        \"remote_schema\" : \"user_messages\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Heterogeneous GraphQL Query Execution\nDESCRIPTION: Example of a GraphQL query that fetches data from both Postgres and a remote schema in a single request, demonstrating the new heterogeneous execution feature.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles {\n    title\n  }\n  weather {\n    temperature\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options for hasura migrate squash command in SASS format\nDESCRIPTION: This snippet lists the specific options available for the 'hasura migrate squash' command. It includes options for deleting source files, specifying version ranges, and naming the new squashed migration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_squash.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --delete-source   delete the source files after squashing without any confirmation\n    --from uint       start squashing from this version\n-h, --help            help for squash\n    --name string     name for the new squashed migration (default \"squashed\")\n    --to int          squash up to this version (default -1)\n```\n\n----------------------------------------\n\nTITLE: Error Message from Failed Validation\nDESCRIPTION: This snippet shows the error message that will be returned when the trigger prevents an operation due to an inactive author. The message comes from the RAISE EXCEPTION statement in the check_author_active function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/triggers.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plsql\nCODE:\n```\nunexpected : Author must be active\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with PostgreSQL Replica\nDESCRIPTION: Command to run the Hasura GraphQL Engine with the PostgreSQL primary server as the metadata database, enabling the console with specified assets directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncabal run graphql-engine:exe:graphql-engine -- \\\n  --metadata-database-url=\"postgresql://postgres:password@$(docker compose --project-directory=server/test-manual/postgres-replicas port postgres-primary 5432)\" \\\n  serve \\\n  --enable-console \\\n  --console-assets-dir=$PWD/frontend/dist/apps/server-assets-console\n```\n\n----------------------------------------\n\nTITLE: Example of an Exported Operation Log in JSON Format\nDESCRIPTION: A sample JSON structure showing how Hasura Cloud combines various GraphQL Engine server logs (http_logs, query_logs, websocket_logs, etc.) into a single operation log that gets exported to observability tools.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation_type\": \"query\",\n  \"request_read_time\": 0.00000776,\n  \"response_size\": 443,\n  \"execution_time\": 0.254919258,\n  \"user_role\": \"admin\",\n  \"hostname\": \"hasura-cloud\",\n  \"project_id\": \"6450524a-ecc2-4676-9ecb-ba6a90a13c3d\",\n  \"is_error\": false,\n  \"operation_id\": \"a456caf866ebcab1a592ade80f07a622652181a9\",\n  \"request_size\": 100,\n  \"user_vars\": {\n    \"x-hasura-role\": \"admin\"\n  },\n  \"client_name\": \"\",\n  \"ws_operation_id\": \"\",\n  \"parameterized_query_hash\": \"a456caf866ebcab1a592ade80f07a622652181a9\",\n  \"server_client_id\": \"\",\n  \"websocket_id\": \"\",\n  \"kind\": \"\",\n  \"query\": {\n    \"query\": \"query MyQuery {\\n author {\\n id\\n }\\n}\\n\",\n    \"operationName\": \"MyQuery\"\n  },\n  \"instance_uid\": \"c9e43acf-2e09-41a7-8aa8-ddeff4e64a21\",\n  \"transport\": \"http\",\n  \"url\": \"/v1/graphql\",\n  \"operation_name\": \"MyQuery\",\n  \"service\": \"polite-muskox-52\",\n  \"request_headers\": {\n    \"referer\": \"https://cloud.hasura.io/\",\n    \"sec-fetch-site\": \"cross-site\",\n    \"origin\": \"https://cloud.hasura.io\",\n    \"true-client-ip\": \"106.51.72.39\",\n    \"CDN-Loop\": \"cloudflare\",\n    \"Accept-Encoding\": \"gzip\",\n    \"CF-Connecting-IP\": \"106.51.72.39\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"content-type\": \"application/json\",\n    \"Content-Length\": \"100\",\n    \"X-Real-IP\": \"106.51.72.39\",\n    \"sec-fetch-mode\": \"cors\",\n    \"CF-IPCountry\": \"IN\",\n    \"CF-RAY\": \"7a08f2590e4cf45e-BOM\",\n    \"accept-language\": \"en-US,en;q=0.9\",\n    \"X-Request-Id\": \"2f1280a31e31716e4300e84550cc7eb7\",\n    \"Connection\": \"close\",\n    \"X-Forwarded-Proto\": \"https\",\n    \"CF-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\",\n    \"Host\": \"polite-muskox-52.hasura.app\",\n    \"dnt\": \"1\",\n    \"accept\": \"*/*\",\n    \"sec-ch-ua\": \"\\\"Not A(Brand\\\";v=\\\"24\\\", \\\"Chromium\\\";v=\\\"110\\\"\",\n    \"sec-ch-ua-platform\": \"\\\"macOS\\\"\",\n    \"X-Forwarded-For\": \"106.51.72.39\",\n    \"X-NginX-Proxy\": \"true\",\n    \"sec-fetch-dest\": \"empty\",\n    \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\"\n  },\n  \"db_uid\": \"\",\n  \"error_code\": \"\",\n  \"time\": \"2023-02-28T11:51:09.116Z\",\n  \"request_id\": \"2f1280a31e31716e4300e84550cc7eb7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Enterprise Version\nDESCRIPTION: Helm command to install Hasura GraphQL Engine with enterprise license key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes-helm.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install hasura --set secret.adminSecret=hasura --set secret.eeLicenseKey=<license-key> hasura/graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available options specific to the 'migrate create' command for customizing migration creation behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --from-server                 take pg_dump of schema (default: public) and Hasura metadata from the server\n    --sql-from-file string        path to an SQL file which contains the SQL statements\n    --schema strings              name of Postgres schema to export as a migration. provide multiple schemas with a comma separated list e.g. --schema public,user (default [public])\n    --metadata-from-file string   path to a hasura metadata file to be used for up actions\n    --metadata-from-server        take metadata from the server and write it as an up migration file\n    --up-sql string              sql string/query that is to be used to create an up migration\n    --down-sql string            sql string/query that is to be used to create a down migration\n-h, --help                        help for create\n```\n\n----------------------------------------\n\nTITLE: Displaying Enterprise Edition Server Telemetry Data Sample in JSON\nDESCRIPTION: This snippet demonstrates a sample of additional telemetry data collected by the Enterprise Edition server. It includes information about API limits, logging configurations, resource usage, and various feature enablements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"license_jti\": \"e86e5a54-ad3b-49e6-98ca-ab34b0a50f8f\",\n  \"client_id\": null,\n  \"metadata_db_uid\": \"4492082b-a2d6-4d4c-81e5-f481b2aea669\",\n  \"instance_uid\": \"f6d67a85-4a4f-4897-a767-89a86253b59c\",\n  \"sample_uid\": \"2a18421a-baff-466b-bf34-b7fd6a5c76c8\",\n  \"hasura_version\": \"v2.23.0\",\n  \"metrics\": {\n    \"api_limits_enabled\": true,\n    \"api_limits_roles_with_limits\": 0,\n    \"api_limits_rate_limits\": 0,\n    \"api_limits_depth_limits\": 0,\n    \"api_limits_node_limits\": 0,\n    \"api_limits_time_limits\": 0,\n    \"api_limits_batch_limits\": 0,\n    \"prometheus_endpoint_enabled\": false,\n    \"prometheus_secret_enabled\": false,\n    \"otel_enabled\": false,\n    \"otel_traces_enabled\": false,\n    \"allow_list_roles\": 0,\n    \"logs_http_response_log_enabled\": false,\n    \"logs_api_limit_log_enabled\": false,\n    \"logs_live_query_poller_log_enabled\": false,\n    \"logs_caching_log_enabled\": false,\n    \"logs_tracing_log_enabled\": true,\n    \"logs_metrics_log_enabled\": false,\n    \"logs_health_check_log_enabled\": false,\n    \"rate_limiting_enabled\": false,\n    \"caching_enabled\": false,\n    \"remote_schemas\": 0,\n    \"actions_synchronous\": 0,\n    \"actions_asynchronous\": 0,\n    \"actions_query\": 0,\n    \"actions_type_relationships\": 0,\n    \"actions_custom_types\": 0,\n    \"resource_cpu\": 2048,\n    \"resource_memory\": 0,\n    \"resource_checker_error_code\": \"CPU_MEMORY_INCONCLUSIVE\",\n    \"jwt_secrets_configured\": 2,\n    \"admin_secrets_configured\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BigQuery service account key in Bash\nDESCRIPTION: Command to set the HASURA_BIGQUERY_SERVICE_KEY environment variable from a file, which is required for BigQuery testing. This variable stores the service account key used for authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export HASURA_BIGQUERY_SERVICE_KEY=$(cat /path/to/service/account)\n```\n\n----------------------------------------\n\nTITLE: Running All API Tests in Bash\nDESCRIPTION: Executes all API tests using cabal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cabal run api-tests:exe:api-tests\n```\n\n----------------------------------------\n\nTITLE: Deploying Auth Webhook Locally with Bash Commands\nDESCRIPTION: Instructions for cloning the repository, installing dependencies, setting up the PostgreSQL database connection, and running the auth webhook locally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/passport-js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repo\ngit clone https://github.com/hasura/graphql-engine\n\n# Change directory\ncd graphql-engine/community/boilerplates/auth-webhooks/passport-js\n\n# Install NPM dependencies\nnpm install\n\n# Set DATABASE_URL env\nexport DATABASE_URL=postgres://<username>:<password>@<host>:<port>/<database_name>\n\n# Apply migrations\n# (Note) this step creates a \"users\" table in the database\nknex migrate:latest\n\n# Then simply start your app\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Sidebar with Markdown Frontmatter\nDESCRIPTION: Markdown frontmatter configuration that sets up the sidebar navigation properties including position, label and custom CSS class name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_basics.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 10\nsidebar_label: 'Basics'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Local Setup for Python Flask Auth Webhook\nDESCRIPTION: Commands to install dependencies and run the Flask application locally. The webhook will be available at http://localhost:5000/auth-webhook.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\nexport FLASK_APP=auth-webhook.py\nflask run\n```\n\n----------------------------------------\n\nTITLE: Select Permission Configuration in Hasura\nDESCRIPTION: Schema for configuring select permissions including column access, computed fields, filtering, and pagination controls.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                      | Required | Schema                                                | Description                                                                                                                               |\n| ------------------------ | -------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| columns                  | true     | [PGColumn](#pgcolumn) array (or) `'*'`                | Only these columns are selectable (or all when `'*'` is specified)                                                                        |\n| computed_fields          | false    | [ComputedFieldName](#computedfieldname) array         | Only these computed fields are selectable                                                                                                 |\n| filter                   | true     | [BoolExp](#boolexp)                                   | Only the rows where this expression holds true are selectable                                                                             |\n| limit                    | false    | `Integer`                                             | The maximum number of rows that can be returned                                                                                           |\n| allow_aggregations       | false    | `Boolean`                                             | Toggle allowing aggregate queries                                                                                                         |\n| query_root_fields        | false    | [QueryRootField](#queryRootField) array               | Only given root fields will be enabled in the `query` root field. An empty list will mean no query root fields are enabled .              |\n| subscription_root_fields | false    | [SubscriptionRootField](#subscriptionRootField) array | Only given root fields will be enabled in the `subscription` root field. An empty list will mean no subscription root fields are enabled. |\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Object CLI Output Example\nDESCRIPTION: This is an example output from the `hasura metadata inconsistency list` command, showing an inconsistent table named 'author'. It indicates that the table/view does not exist in the source database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resolving-metadata-inconsistencies.mdx#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"NAME    TYPE   DESCRIPTION                             REASON\\n\\nauthor  table  {\\\"name\\\":\\\"author\\\",\\\"schema\\\":\\\"public\\\"}...  Inconsistent object: no such table/view exists in source: \\\"author\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Aggregation and Grouping in OpenDD\nDESCRIPTION: YAML configuration for customizing GraphQL aggregate and grouping behavior in the Hasura GraphQL Engine. This configuration defines field naming conventions, enum values, and type structure for aggregation operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n    argumentsInput:\n      fieldName: args\n    limitInput:\n      fieldName: limit\n    offsetInput:\n      fieldName: offset\n    filterInput:\n      fieldName: where\n      operatorNames:\n        and: _and\n        or: _or\n        not: _not\n        isNull: _is_null\n    orderByInput:\n      fieldName: order_by\n      enumDirectionValues:\n        asc: Asc\n        desc: Desc\n      enumTypeNames:\n        - directions:\n            - Asc\n            - Desc\n          typeName: OrderBy\n    # New!\n    aggregate:\n      filterInputFieldName: filter_input\n      countFieldName: _count\n      countDistinctFieldName: _count_distinct\n      unaryFnFieldName: _unary_fn\n    # New!\n    groups:\n      filterInputFieldName: filter_input\n      groupingKeysFieldName: grouping_keys\n      groupingTypeFieldName: grouping_type\n      havingFieldName: having\n      groupKeyFieldName: group_key\n      groupAggregateFieldName: group_aggregate\n      scalarFieldFieldName: _scalar_field\n      groupingType:\n        enumValues:\n          standard: Standard\n          rollup: Rollup\n          cube: Cube\n        groupingTypeEnumTypeNames:\n          - groupingTypes: [Standard, Rollup, Cube]\n            typeName: GroupingType\n\n  mutation:\n    rootOperationTypeName: Mutation\n```\n\n----------------------------------------\n\nTITLE: Connect to SQL Server Node using SQLCMD\nDESCRIPTION: Illustrates connecting to one of the SQL Server nodes via `sqlcmd`, using the Docker bridge IP and assigned port to test database connectivity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$> sqlcmd -S 172.16.238.1,1501 -U SA -P \"Password1\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including environment file configuration and logging settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Section Linking Examples in Markdown\nDESCRIPTION: Demonstrates how to create links to specific sections using heading IDs in both same-document and cross-document scenarios\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Link to Sub Section](/path/to/sub/section.mdx#heading-h2-example)`.\n\n<!-- or just the hash-param if its in the same document -->\n\n[Link to sub section in same document](#heading-ids)\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Format for Aiven Postgres\nDESCRIPTION: The structure of the connection string required to connect Hasura to an Aiven Postgres database. It includes user credentials, connection details, and SSL configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/aiven.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>?sslmode=require\n```\n\n----------------------------------------\n\nTITLE: Building mimalloc with CMake on Unix Systems\nDESCRIPTION: Commands to build mimalloc as shared, static and object libraries using CMake build system\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> mkdir -p out/release\n> cd out/release\n> cmake ../..\n> make\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL GENERATED BY DEFAULT AS IDENTITY\nDESCRIPTION: Defines how PostgreSQL's GENERATED BY DEFAULT AS IDENTITY columns would work, making them both updatable and insertable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nGENERATED BY DEFAULT AS IDENTITY => updatable, insertable\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Construction in Kriti\nDESCRIPTION: Example of basic JSON value construction in Kriti template syntax\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/kriti-templating.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": [1, 2, 3],\n  \"b\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Query to Collection - HTTP POST Request\nDESCRIPTION: Adds a new GraphQL query to an existing collection. Requires collection name, query name, and the query text.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_query_to_collection\",\n    \"args\": {\n         \"collection_name\": \"my_collection\",\n         \"query_name\": \"query_2\",\n         \"query\": \"query {test {name}}\"\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Todos with Admin Privileges\nDESCRIPTION: GraphQL query to fetch all todo items' id, title, and completion status, demonstrating unrestricted admin access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllTodos {\n  todos {\n    id\n    title\n    is_completed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura and CockroachDB with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and a CockroachDB instance using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Versioned With Definition Enum Implementation\nDESCRIPTION: Example of an enum implementation using the versioned with definition approach. The JSON object uses a 'version' key as a tag, and the variant value is deserialized from the 'definition' key value in the object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(opendds_derive::OpenDd)]\n#[opendd(as_versioned_with_definition)]\nenum VersionedEnum {\n    V1(VersionOne),\n    V2(VersionTwo),\n}\n\n#[derive(opendds_derive::OpenDd)]\nstruct VersionTwo {\n    #[opendd(use_serde_json)]\n    field_two: String\n}\n```\n\n----------------------------------------\n\nTITLE: Foreach Query Response Format\nDESCRIPTION: Structure of the response for a foreach query, showing how results must be organized. The response contains a rows array with each element corresponding to one iteration of the foreach query, maintaining the same order as the request.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_45\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rows\": [ // The results of each foreach query must be put into this array. The order of results in here must be in the same order as in the query request foreach.\n    {\n      \"query\": { // The results of running each query must be put under a field called \"query\"\n        \"rows\": [\n          { \"AlbumId\": 1, \"Title\": \"For Those About To Rock We Salute You\" },\n          { \"AlbumId\": 4, \"Title\": \"Let There Be Rock\" }\n        ]\n      }\n    },\n    {\n      \"query\": {\n        \"rows\": [\n          { \"AlbumId\": 2, \"Title\": \"Balls to the Wall\" },\n          { \"AlbumId\": 3, \"Title\": \"Restless and Wild\" }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Notes Database Schema\nDESCRIPTION: SQL-like schema definition for creating notes and note_revision tables. The notes table stores main entries while note_revision tracks historical changes with timestamps.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs8/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: notes\n\nColumns:\nid: Integer auto-increment\nnote: Text\n\nTable name: note_revision\n\nColumns:\nid: Integer auto-increment\nnote: Text\nnote_id: Integer (foreign key to notes.id)\nupdate_at: Timestamp, default `now()`\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query for Frontend Translation\nDESCRIPTION: Simple SQL query example that needs to be converted to an OpenDD query structure by the SQL frontend.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name from Author\n```\n\n----------------------------------------\n\nTITLE: Importing ProductBadge Component in JSX\nDESCRIPTION: This snippet shows how to import the ProductBadge component at the top of a markdown file. It's typically placed near the frontmatter of the document.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/product-badges.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Type Tags Import Matrix Table\nDESCRIPTION: A markdown table showing the import rules between different type tags (utils, data, ui, feature, app, storybook, e2e). The matrix indicates allowed and disallowed dependencies between different types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/tags.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| ![Can row import colum](./can-import-icon.png) | `type:utils` | `type:data` | `type:ui` | `type:feature` | `type:app` | `type:storybook` | `type:e2e` |\n| ---------------------------------------------- | :----------: | :---------: | :-------: | :------------: | :--------: | :--------------: | :--------: |\n| `type:utils`                                   |      ✅      |     ⛔      |    ⛔     |       ⛔       |     ⛔     |        ⛔        |     ⛔     |\n| `type:data`                                    |      ✅      |     ✅      |    ⛔     |       ⛔       |     ⛔     |        ⛔        |     ⛔     |\n| `type:ui`                                      |      ✅      |     ⛔      |    ✅     |       ⛔       |     ⛔     |        ⛔        |     ⛔     |\n| `type:feature`                                 |      ✅      |     ✅      |    ✅     |       ✅       |     ⛔     |        ⛔        |     ⛔     |\n| `type:app`                                     |      ✅      |     ✅      |    ✅     |       ✅       |     ⛔     |        ⛔        |     ⛔     |\n| `type:storybook`                               |      ✅      |     ✅      |    ✅     |       ✅       |     ⛔     |        ✅        |     ⛔     |\n| `type:e2e`                                     |      ✅      |     ✅      |    ✅     |       ✅       |     ✅     |        ✅        |     ✅     |\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended JSON Value Type in Haskell\nDESCRIPTION: This snippet defines an extended JSON Value type in Haskell, including core Aeson terms and extended terms for templating and transformations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata Accessor = Obj String | Arr Int\n  deriving (Show, Eq)\n\ndata ValueExt =\n  -- Core Aeson Terms\n    Object (M.HashMap Text ValueExt)\n  | Array (V.Vector ValueExt)\n  | String Text\n  | Number Scientific\n  | Boolean Bool\n  | Null\n  -- Extended Terms\n  | Path [Accessor]\n  | Iff ValueExt ValueExt ValueExt\n  | Eq ValueExt ValueExt\n  | Gt ValueExt ValueExt\n  | Lt ValueExt ValueExt\n  | AND ValueExt ValueExt\n  | OR ValueExt ValueExt\n  | Member ValueExt ValueExt\n  | Range (Maybe Text) Text [Accessor] ValueExt\n  -- ^ {{ range i, x := $.foo.bar }}\n  deriving (Show, Eq, Read)\n```\n\n----------------------------------------\n\nTITLE: Cron Expression for Daily Trigger in Text Format\nDESCRIPTION: This snippet presents a cron expression used to schedule the event at 9:00 AM every day. It establishes the timing for when to trigger the daily summary email.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/daily-summary-email.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0 9 * * *\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates for PostgreSQL (Bash)\nDESCRIPTION: Executes a script to generate fresh server and client SSL certificates for PostgreSQL authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./make-certificates.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the console-ce project. Requires .env file configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx serve console-ce\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata Changes via CLI\nDESCRIPTION: Command for applying metadata changes in Hasura CLI after configuring a remote database relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Remote Join to Articles in GraphQL\nDESCRIPTION: Example GraphQL query showing a remote join between authors and their articles. The query requests the name of authors and titles of their articles, where articles is a remote join field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/remote-joins-execution.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors {\n    name\n    articles { # remote join\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Expression Index for Casted Column in SQL\nDESCRIPTION: This SQL command shows how to create an expression index for a geometry column casted to geography type, which can improve query performance when filtering on the casted field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX cities_location_geography ON cities USING GIST ((location::geography));\n```\n\n----------------------------------------\n\nTITLE: Available Options for Hasura CLI\nDESCRIPTION: Lists all available global options/flags for the Hasura CLI command. These flags can be used with any subcommand and control aspects like environment file loading, logging level, and update checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --envfile string      .env filename to load ENV vars from (default \".env\")\n-h, --help                help for hasura\n    --log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n    --no-color            do not colorize output (default: false)\n    --project string      directory where commands are executed (default: current dir)\n    --skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Structure in Rust\nDESCRIPTION: Demonstrates the error structure returned when a GraphQL parser encounters an unexpected closing brace instead of a name token. The error includes position information and expected vs found tokens.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0046_incomplete_spreads.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Name,\n            ],\n            found: Token(\n                Punctuation(\n                    BraceR,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 15,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Query Relationships via Hasura Metadata API\nDESCRIPTION: Example of tracking Native Queries with relationships using Hasura's metadata API. Shows how to define article and author models with their respective relationships, including object and array relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\": [\n    {\n      \"type\": \"snowflake_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"title\",\n            \"nullable\": false,\n            \"type\": \"varchar\"\n          },\n          {\n            \"name\": \"author_id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"author\",\n            \"type\": {\n              \"logical_model\": \"author\",\n              \"nullable\": false\n            }\n          }\n        ],\n        \"name\": \"article\",\n        \"source\": \"snowflake\"\n      }\n    },\n    {\n      \"type\": \"snowflake_track_logical_model\",\n      \"args\": {\n        \"description\": \"\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"nullable\": false,\n            \"type\": \"integer\"\n          },\n          {\n            \"name\": \"name\",\n            \"nullable\": false,\n            \"type\": \"varchar\"\n          },\n          {\n            \"name\": \"articles\",\n            \"type\": {\n              \"array\": {\n                \"logical_model\": \"article\"\n              },\n              \"nullable\": false\n            }\n          }\n        ],\n        \"name\": \"author\",\n        \"source\": \"snowflake\"\n      }\n    },\n    {\n      \"type\": \"snowflake_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Logical Models', 1), (2, 'Native Queries', 2), (3, 'Relationships', 3), (4, 'Graph Relationships', 4), (5, 'Permissions', 5)) as t(\\\"id\\\", \\\"title\\\", \\\"author_id\\\")\",\n        \"object_relationships\": [\n          {\n            \"name\": \"author\",\n            \"using\": {\n              \"column_mapping\": {\n                \"author_id\": \"id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"author\"\n            }\n          }\n        ],\n        \"returns\": \"article\",\n        \"root_field_name\": \"article\",\n        \"source\": \"snowflake\",\n        \"type\": \"query\"\n      }\n    },\n    {\n      \"type\": \"snowflake_track_native_query\",\n      \"args\": {\n        \"arguments\": {},\n        \"array_relationships\": [\n          {\n            \"name\": \"articles\",\n            \"using\": {\n              \"column_mapping\": {\n                \"id\": \"author_id\"\n              },\n              \"insertion_order\": null,\n              \"remote_native_query\": \"article\"\n            }\n          }\n        ],\n        \"code\": \"SELECT * FROM (VALUES (1, 'Tom'), (2, 'Dan'), (3, 'Philip'), (4, 'Gil'), (5, 'Samir')) as t(\\\"id\\\", \\\"name\\\")\",\n        \"object_relationships\": [],\n        \"returns\": \"author\",\n        \"root_field_name\": \"author\",\n        \"source\": \"snowflake\",\n        \"type\": \"query\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Options for hasura metadata reload command in SASS\nDESCRIPTION: This snippet shows the available options specific to the 'hasura metadata reload' command. It includes the help flag for displaying command usage information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_reload.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for reload\n```\n\n----------------------------------------\n\nTITLE: WebSocket Error Log in Hasura\nDESCRIPTION: Example of a WebSocket log for an operation error, showing validation failure details and error information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-06-10T10:55:20.650+0530\",\n  \"level\": \"error\",\n  \"type\": \"websocket-log\",\n  \"detail\": {\n    \"event\": {\n      \"type\": \"operation\",\n      \"detail\": {\n        \"request_id\": \"150e3e6a-e1a7-46ba-a9d4-da6b192a4005\",\n        \"operation_id\": \"1\",\n        \"query\": {\n          \"variables\": {},\n          \"query\": \"subscription {\\n  author {\\n    namex\\n  }\\n}\\n\"\n        },\n        \"operation_type\": {\n          \"type\": \"query_err\",\n          \"detail\": {\n            \"path\": \"$.selectionSet.author.selectionSet.namex\",\n            \"error\": \"field 'namex' not found in type: 'author'\",\n            \"code\": \"validation-failed\"\n          }\n        },\n        \"operation_name\": null\n      }\n    },\n    \"connection_info\": {\n      \"websocket_id\": \"49932ddf-e54d-42c6-bffb-8a57a1c6dcbe\",\n      \"jwt_expiry\": null,\n      \"msg\": null\n    },\n    \"user_vars\": {\n      \"x-hasura-role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Tables for Hasura GraphQL Engine\nDESCRIPTION: Creates two tables: 'notes' with id and note columns, and 'note_revision' with id, note, note_id (foreign key), and update_at columns. This structure allows for storing notes and their revision history.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: notes\n\nColumns:\nid: Integer auto-increment\nnote: Text\n\nTable name: note_revision\n\nColumns:\nid: Integer auto-increment\nnote: Text\nnote_id: Integer (foreign key to notes.id)\nupdate_at: Timestamp, default `now()`\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Command to install all required npm dependencies for the project\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregate Query Request Structure\nDESCRIPTION: Shows how the GraphQL aggregate query is transformed into a query request format for the data connector\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"table\": [\"Artist\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"aggregates\": {\n      \"aggregate_max_ArtistId\": {\n        \"type\": \"single_column\",\n        \"function\": \"max\",\n        \"column\": \"ArtistId\",\n        \"result_type\": \"number\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphiQLIDE for Fetching Users in Hasura v2\nDESCRIPTION: This snippet demonstrates how to construct a GraphQL query using the GraphiQLIDE component to fetch users while adhering to the new validation rules introduced in Hasura v2. The query includes a required variable, which, if not referenced, will trigger an error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/resources/upgrade-hasura-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query fetch_users($role_type: String!) { \n  users { \n    displayName \n    id \n    role \n    } \n}`}\n  variables={`{ \"role_type\": \"user\" }`}\n  response={`{\n  \"errors\": [\n    {\n      \"extensions\": {\n        \"code\": \"validation-failed\",\n        \"path\": \"$\"\n      },\n      \"message\": \"unexpected variables in variableValues: role_type\"\n    }\n  ]\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Templater Function Structure for File Generation\nDESCRIPTION: Example structure for a templater function that generates files. Each templater must return an array of file objects with name and content properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"name\": \"filename1.js\",\n    \"content\": \"filename1 content\"\n  },\n  {\n    \"name\": \"filename2.js\",\n    \"content\": \"filename2 content\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Describing ECS Tasks to Find Network Interface in AWS CLI\nDESCRIPTION: Retrieves task information from ECS to locate the Elastic Network Interface (ENI) ID for a Hasura GraphQL Engine container. This command is used to find networking details that will help locate the public IP address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naws ecs describe-tasks --cluster hasura-fargate-cluster --tasks <task-id-here>\n```\n\n----------------------------------------\n\nTITLE: Firebase Authorization Header Format for Hasura\nDESCRIPTION: Example of the Authorization header format when making queries to Hasura GraphQL engine with Firebase authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Authorization\": \"Bearer <id_token>\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query without Null Argument\nDESCRIPTION: This GraphQL query represents the forwarded query after the `remote-schema-skip-nulls` setting has been applied by the Hasura GraphQL engine. The `users` field is called without the `type` argument, as the engine skipped the `null` value. The result of this query is the same as if you are calling the `users` without parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery RemoteQuery {\n  users {\n    id\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Components\nDESCRIPTION: Commands to update and install Google Cloud beta components required for function deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud components update &&\ngcloud components install beta\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Beta Components\nDESCRIPTION: Command to install the Google Cloud Beta components required for working with the cloud functions. This needs to be executed before deploying any of the sample functions to the Google Cloud platform.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud components update && gcloud components install beta\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura Migrations and Metadata to Another Instance\nDESCRIPTION: Command to apply all migrations and metadata to a different Hasura server instance, ensuring schema consistency across environments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# in project dir\nhasura deploy --endpoint http://another-server-instance.hasura.app\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Clear Command Syntax\nDESCRIPTION: The basic syntax for the hasura metadata clear command with optional flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_clear.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata clear [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Metrics with EKG-Prometheus in Haskell\nDESCRIPTION: This example demonstrates how to register and use labeled metrics with the EKG-Prometheus library. It shows creating counters and gauges with different label sets, updating their values, and verifying the sampled metrics match expected values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\n-- app2 :: IO ()\n-- app2 = do\n--   store <- newStore @AppMetrics2\n-- \n--   harpsichordRequests <- Counter.new\n--   tablaRequests <- Counter.new\n--   dbConnections <- Gauge.new\n-- \n--   _ <- register store $ mconcat\n--     [ registerCounter HTTPRequests (EndpointLabels \"dev/harpsichord\") (Counter.read harpsichordRequests)\n--     , registerCounter HTTPRequests (EndpointLabels \"dev/tabla\") (Counter.read tablaRequests)\n--     , let labels = DataSourceLabels\n--             { source_name = \"myDB\"\n--             , conn_info = \"localhost:5432\" }\n--       in  registerGauge DBConnections labels (Gauge.read dbConnections)\n--     ]\n-- \n--   Counter.inc tablaRequests\n--   Gauge.set dbConnections 99\n-- \n--   sample <- sampleAll store\n-- \n--   let expectedSample = M.fromList\n--         [ ( \"requests\"\n--           , ( \"\"\n--             , M.fromList\n--                 [ (HM.singleton \"endpoint\" \"dev/harpsichord\", Counter 0)\n--                 , (HM.singleton \"endpoint\" \"dev/tabla\", Counter 1)\n--                 ]\n--             )\n--           )\n--         , ( \"total_connections\"\n--           , ( \"\"\n--             , M.singleton\n--                 ( HM.fromList\n--                   [ (\"source_name\", \"myDB\")\n--                   , (\"conn_info\", \"localhost:5432\")\n--                   ]\n--                 )\n--                 (Gauge 99)\n--             )\n--           )\n--         ]\n--   assert (sample == expectedSample) $ pure ()\n```\n\n----------------------------------------\n\nTITLE: Deploying Google Cloud Function with HTTP Trigger\nDESCRIPTION: This bash command deploys a Node.js function named 'nodejs-echo' to Google Cloud Functions with an HTTP trigger. It uses the beta version of the gcloud CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud beta functions deploy nodejs-echo \\\n       --trigger-http\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Migration Command\nDESCRIPTION: The base command syntax for applying Hasura migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply [flags]\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: Command to apply metadata changes after updating the actions.yaml file. This is required to make the relationship configuration active in the Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/action-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose\nDESCRIPTION: Starts the Docker Compose setup invoking the defined YAML configuration to bring up the SQL Server nodes as daemons.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating a User with the Signup API using cURL\nDESCRIPTION: Example of how to create a new user by making a POST request to the /signup endpoint with username and password credentials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/passport-js/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" \\\n     -d'{\"username\": \"test123\", \"password\": \"test123\", \"confirmPassword\": \"test123\"}' \\\n     http://localhost:8080/signup\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Command Options\nDESCRIPTION: Available command-specific options for the codegen feature including framework selection, output directory, and starter kit options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_use-codegen.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --framework string    framework to be used by codegen\n-h, --help                help for use-codegen\n    --output-dir string   directory to create the codegen files\n    --with-starter-kit    clone starter kit for a framework\n```\n\n----------------------------------------\n\nTITLE: Showing Proper JSON Formatting and Indentation\nDESCRIPTION: Example of correct JSON formatting with 2-space indentation and no comments. This format should be followed for all JSON code blocks in the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/code-blocks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\",\n  \"nested\": {\n    \"subkey\": \"subvalue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Prometheus Service\nDESCRIPTION: Command to restart the Prometheus system service after making configuration changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart prometheus\n```\n\n----------------------------------------\n\nTITLE: Pricing Table for Hasura Cloud Plans - JSX\nDESCRIPTION: This JSX snippet creates a pricing table that details the applicable plans and their features. It categorizes different plans for various use cases and outlines the features included in each.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/plans.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<table className=\"pricing-table\">\n  <thead>\n    <tr>\n      <th>Application type</th>\n      <th>Plan</th>\n      <th>Features</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <ul>\n          <li>Testing, starter, and hobby projects</li>\n        </ul>\n      </td>\n      <td>\n        <b>Cloud Free</b>: If you're interested in trying out Hasura Cloud, you can start with the Cloud Free plan. It's\n        completely free to use, requires no credit card, and gives you a fully-managed GraphQL API - with some of our\n        best features - right out of the box.\n      </td>\n      <td>\n        <ul>\n          <li>Instant GraphQL and REST APIs with role-based authorization</li>\n          <li>Advanced database connections, including Snowflake, SQL Server, and more</li>\n          <li>Up to three Projects</li>\n          <li>Up to two data connectors</li>\n          <li>Up to 3M API requests/month</li>\n          <li>100 MB of data passthrough per month</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <ul>\n          <li>Low-scale production APIs</li>\n        </ul>\n      </td>\n      <td>\n        <b>Cloud Professional</b>: If you're building a low-scale production API, you can start with the Cloud\n        Professional plan. It's a pay-as-you-go monthly subscription plan. You only pay for your consumption every\n        month. Consumption is calculated based on the{' '}\n        <VersionedLink to=\"/hasura-cloud/plans#billing-calculations\">number of hours</VersionedLink> each Project runs\n        and the amount of data passthrough.\n      </td>\n      <td>\n        <ul>\n          <li>Unlimited databases per project</li>\n          <li>Unlimited data passthrough at $0.13/GB</li>\n          <li>Up to 6M API requests/month</li>\n          <li>Performance tuning (query caching and read replicas)</li>\n          <li>Observability data and integrations</li>\n          <li>Core security features (for e.g., role-based API limits and allow lists)</li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <ul>\n          <li>High-scale production APIs</li>\n          <li>Mission-critical APIs</li>\n          <li>APIs with security and compliance needs</li>\n        </ul>\n      </td>\n      <td>\n        <b>Cloud Enterprise</b>: For APIs that are mission-critical, require high-scale, and have security and\n        compliance needs, we have the Cloud Enterprise plan, which offers the ability to commit to a minimum spending\n        amount over a minimum 12-month commitment period. You can view the total amount of accrued usage during the\n        commitment term and the amount of committed spending left in your account. You can renew your commitment if your\n        commitment is depleted before the expiry of the commitment period.\n        <br />\n        <br />\n        Talk to a Hasura <a href=\"mailto:sales@hasura.io\">sales representative</a> to discuss your specific use case and\n        the pricing.\n      </td>\n      <td>\n        <ul>\n          <li>Unlimited databases per project</li>\n          <li>Unlimited data passthrough at $0.13/GB</li>\n          <li>Unlimited API requests/month</li>\n          <li>Dedicated infrastructure and VPC peering</li>\n          <li>Unlimited query caching and read replicas</li>\n          <li>Advanced security (e.g., SSO) and compliance</li>\n          <li>Expert 24x7 technical support, with customizable SLAs</li>\n        </ul>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Relationship via HTTP POST\nDESCRIPTION: Deletes an existing remote relationship by specifying the table and relationship name. Requires admin role to execute the deletion.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"delete_remote_relationship\",\n    \"args\" : {\n       \"table\":{\n          \"name\":\"users\",\n          \"schema\":\"public\"\n       },\n       \"name\":\"sample_remote_relationship\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Upgrade Command Options\nDESCRIPTION: Available flags specific to the upgrade command, including help and version specification options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_upgrade.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for upgrade\n    --version string   version to be upgraded\n```\n\n----------------------------------------\n\nTITLE: Building Hasura GraphQL Engine from Source\nDESCRIPTION: Command to build the Hasura GraphQL Engine V3 from source after installing the required dependencies.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Representing GraphQL AST Field with Arguments in Rust\nDESCRIPTION: This code snippet shows part of a parsed GraphQL query AST (Abstract Syntax Tree) structure in Rust. It specifically represents a field named 'faveSnack' with a 'quantity' argument that has an integer value of 4. The structure includes source position tracking for each component.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0004_selection_with_fields_aliases_arguments.txt#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nitem: Name(\n    \"faveSnack\",\n),\nstart: SourcePosition {\n    line: 14,\n    col: 5,\n},\nend: SourcePosition {\n    line: 14,\n    col: 13,\n},\n},\narguments: Some(\n    Spanning {\n        item: [\n            Spanning {\n                item: KeyValue {\n                    key: Spanning {\n                        item: Name(\n                            \"quantity\",\n                        ),\n                        start: SourcePosition {\n                            line: 14,\n                            col: 15,\n                        },\n                        end: SourcePosition {\n                            line: 14,\n                            col: 22,\n                        },\n                    },\n                    value: Spanning {\n                        item: SimpleValue(\n                            Integer(\n                                4,\n                            ),\n                        ),\n                        start: SourcePosition {\n                            line: 14,\n                            col: 25,\n                        },\n                        end: SourcePosition {\n                            line: 14,\n                            col: 25,\n                        },\n                    },\n                },\n                start: SourcePosition {\n                    line: 14,\n                    col: 15,\n                },\n                end: SourcePosition {\n                    line: 14,\n                    col: 25,\n                },\n            },\n        ],\n        start: SourcePosition {\n            line: 14,\n            col: 14,\n        },\n        end: SourcePosition {\n            line: 14,\n            col: 26,\n        },\n    },\n),\ndirectives: [],\nselection_set: None,\n```\n\n----------------------------------------\n\nTITLE: Defining Column Presets in Hasura GraphQL Engine\nDESCRIPTION: This code snippet demonstrates how to define column presets in Hasura GraphQL Engine, including static values and values derived from session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"x-hasura-User-Id\",\n  \"city\": \"San Francisco\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Webhook Project for Heroku Deployment\nDESCRIPTION: Commands to clone the repository, copy the webhook boilerplate, and initialize a Git repository for Heroku deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncp -r graphql-engine/community/boilerplates/auth-webhooks/nodejs-express <some-dir>\ncd <some-dir>\ngit init && git add . && git commit -m \"init auth webhook\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Builds the Docker image using the previously defined Dockerfile. Tags the image as `sqlag:ha` for use in subsequent container setups.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/mssql-guides/mssql-read-replicas-docker-setup.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t sqlag:ha .\n```\n\n----------------------------------------\n\nTITLE: Running npm Package Lockfile Derivation Command\nDESCRIPTION: Command to derive individual package-lock.json files for reference and sqlite packages from the root lockfile\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> make derive-lockfiles\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Retrieving Customer Data with Employee Role\nDESCRIPTION: This GraphQL query retrieves customer data when the X-Hasura-Role is set to 'employee' and X-Hasura-EmployeeId is set to '2'. It's used to demonstrate filtering by unrelated tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCustomer {\n  Customer {\n    CustomerId\n    FirstName\n    LastName\n    Country\n    SupportRepId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Migration Status Command\nDESCRIPTION: Basic syntax for running the hasura migrate status command to check database migration status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_status.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate status [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Note Admonition in Markdown\nDESCRIPTION: Demonstrates how to create a basic note admonition using Markdown syntax. It includes a link to Discord for further information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n**This** is an example of a call-out admonition. For more info please get in touch with us on [Discord]\n(https://discord.gg/vBPpJkS).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Clearing Data Before a Particular Time Period - SQL\nDESCRIPTION: This snippet includes SQL commands for deleting processed events and logs that are older than a specified time period determined by the user. Useful for maintaining only recent event data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/clean-up.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_cron_events\nWHERE status IN ('delivered', 'error', 'dead')\n  AND scheduled_time < now() - interval '3 months';\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM hdb_catalog.hdb_scheduled_events\nWHERE status IN ('delivered', 'error', 'dead')\n AND scheduled_time < now() - interval '3 months';\n```\n\n----------------------------------------\n\nTITLE: Structured Representation of a GraphQL Mutation Query in Rust\nDESCRIPTION: This code snippet shows the result of parsing a GraphQL mutation query into a tree-like structure in Rust. It represents a 'UpdateStuff' mutation with a 'stuffUpdate' field that includes an input argument containing tag information. The structure tracks source positions and maintains the hierarchical nature of the original query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/9013_emoji_char_in_string_value.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Mutation,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"UpdateStuff\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 10,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 20,\n                                },\n                            },\n                        ),\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"stuffUpdate\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 13,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"input\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 15,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 19,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Object(\n                                                                            [\n                                                                                Spanning {\n                                                                                    item: KeyValue {\n                                                                                        key: Spanning {\n                                                                                            item: Name(\n                                                                                                \"tags\",\n                                                                                            ),\n                                                                                            start: SourcePosition {\n                                                                                                line: 3,\n                                                                                                col: 5,\n                                                                                            },\n                                                                                            end: SourcePosition {\n                                                                                                line: 3,\n                                                                                                col: 8,\n                                                                                            },\n                                                                                        },\n                                                                                        value: Spanning {\n                                                                                            item: SimpleValue(\n                                                                                                String(\n                                                                                                    \"really great 👻 halloween\",\n                                                                                                ),\n                                                                                            ),\n                                                                                            start: SourcePosition {\n                                                                                                line: 3,\n                                                                                                col: 11,\n                                                                                            },\n                                                                                            end: SourcePosition {\n                                                                                                line: 3,\n                                                                                                col: 36,\n                                                                                            },\n                                                                                        },\n                                                                                    },\n                                                                                    start: SourcePosition {\n                                                                                        line: 3,\n                                                                                        col: 5,\n                                                                                    },\n                                                                                    end: SourcePosition {\n                                                                                        line: 3,\n                                                                                        col: 36,\n                                                                                    },\n                                                                                },\n                                                                            ],\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 22,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 3,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 2,\n                                                                    col: 15,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 3,\n                                                                },\n                                                            },\n                                                        ],\n                                                        start: SourcePosition {\n                                                            line: 2,\n                                                            col: 14,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 4,\n                                                            col: 4,\n```\n\n----------------------------------------\n\nTITLE: JSON Mutation Request for Deleting Track Data in Hasura\nDESCRIPTION: This JSON structure represents the mutation request sent to delete a Track row. It includes the table name, where clause, and returning fields for the delete operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relationships\": [],\n  \"operations\": [\n    {\n      \"type\": \"delete\",\n      \"table\": [\"Track\"],\n      \"where\": {\n        \"type\": \"binary_op\",\n        \"operator\": \"equal\",\n        \"column\": {\n          \"name\": \"TrackId\",\n          \"column_type\": \"number\"\n        },\n        \"value\": {\n          \"type\": \"scalar\",\n          \"value\": 1,\n          \"value_type\": \"number\"\n        }\n      },\n      \"returning_fields\": {\n        \"TrackId\": {\n          \"type\": \"column\",\n          \"column\": \"TrackId\",\n          \"column_type\": \"number\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Hasura GraphQL Engine Image in Docker Compose\nDESCRIPTION: Example of how to specify a custom Hasura GraphQL Engine image in the Docker Compose file. This is useful when testing specific versions or custom builds of the engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: hasura/graphql-engine:dev-e3bc433-main.ubuntu.arm64\n```\n\n----------------------------------------\n\nTITLE: Constructing Azure PostgreSQL Connection String for Hasura\nDESCRIPTION: Template for creating the PostgreSQL connection URL required to connect Azure database with Hasura. The URL includes username (with @ escaped as %40), password, server name, port, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/azure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgresql://<user-name>:<password>@<public-ip>:<postgres-port>/<db>\n```\n\n----------------------------------------\n\nTITLE: Thumbnail for Collaborators Tab\nDESCRIPTION: This snippet displays a Thumbnail component which visualizes the Collaborators tab in the Hasura Console, aiding users in understanding the interface layout for managing collaborators.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail src=\"/img/projects/collaborators-view.png\" alt=\"Collaborators tab\" width=\"1146px\" />\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Structure for Hasura GraphQL Engine in Rust\nDESCRIPTION: This code snippet shows the directory structure of the Hasura GraphQL Engine project, highlighting the most important parts from a server perspective. It includes crates for open-dds, metadata-resolve, graphql (with subcomponents), execute, jsonapi, sql, and engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncrates\n├── open-dds\n├── metadata-resolve\n├── graphql\n│   ├── lang-graphql\n│   │   ├── src\n│   │   │   ├── ast\n│   │   │   ├── normalized_ast\n│   │   │   ├── lexer\n│   │   │   ├── parser\n│   │   │   ├── schema\n│   │   │   ├── introspection\n│   │   │   ├── validation\n│   ├── schema\n│   │   ├── operations\n│   │   ├── types\n│   ├── ir\n│   ├── frontend\n├── execute\n├── jsonapi\n├── sql\n├── engine\n│   ├── bin\n│   │   ├── engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Insert Permission Metadata for Role pr2\nDESCRIPTION: JSON configuration for an insert permission with a different check constraint based on user ID for role pr2\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pg_create_insert_permission\",\n  \"args\": {\n    \"table\": \"article\",\n    \"source\": \"default\",\n    \"role\": \"pr2\",\n    \"permission\": {\n      \"check\": {\n        \"author_id\": \"X-HASURA-USER-ID\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrRelUsingManualMapping Schema in Hasura\nDESCRIPTION: Specifies the schema for manual mapping of array relationships, including remote table and column mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote_table\": \"TableName\",\n  \"column_mapping\": \"Object (PGColumn : PGColumn)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Casting JSONB to String for Text Search in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to cast a JSONB field to a string type to use text search operators for filtering authors based on their address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery get_authors_in_bengaluru {\n  authors(\n    where: {\n      address: {_cast: {String: {_ilike: \"%bengaluru%\"}}}\n    }\n  ) {\n    id\n    name\n    address\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PostgreSQL Connection URL for Hasura Data Source\nDESCRIPTION: Command to generate a PostgreSQL connection URL for the primary server that can be used as the default data source in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"postgresql://postgres:password@$(docker compose --project-directory=server/test-manual/postgres-replicas port postgres-primary 5432)\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Event Logs in PostgreSQL\nDESCRIPTION: API endpoint for retrieving event logs for a specific trigger. Supports filtering by status and pagination through limit and offset parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_get_event_logs\",\n  \"args\": {\n    \"name\": \"sample_trigger\",\n    \"source\": \"default\",\n    \"status\": \"processed\",\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Database Credentials\nDESCRIPTION: Create a Kubernetes secret with the database username and password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloudsql-db-credentials \\\n        --from-literal=username=postgres --from-literal=password=[PASSWORD]\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed PostgreSQL and Redis for Hasura Enterprise\nDESCRIPTION: YAML snippet showing how to configure environment variables for using managed PostgreSQL and Redis instances with Hasura Enterprise Edition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_REDIS_URL: 'redis://redis:6379'\n    HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: 'redis://redis:6379'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Native Queries\nDESCRIPTION: Example GraphQL query demonstrating how to invoke native queries with arguments in Hasura GraphQL Engine\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_72\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  native_baz {\n    a\n    quux(args: {y: true}) {\n      x\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Track Logical Model via Hasura Metadata API\nDESCRIPTION: This HTTP request body demonstrates how to track a logical model in Hasura using the Metadata API. The `mssql_track_logical_model` type is used, specifying the source database, model name (`tables`), and the fields with their types and nullability. This allows Hasura to understand the structure of the data that will be returned by the stored procedure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_logical_model\",\n  \"args\": {\n    \"source\": \"mssql\",\n    \"name\": \"tables\",\n    \"fields\": [\n      {\n        \"name\": \"TABLE_QUALIFIER\",\n        \"type\": \"sysname\",\n        \"nullable\": true\n      },\n      {\n        \"name\": \"TABLE_OWNER\",\n        \"type\": \"sysname\",\n        \"nullable\": true\n      },\n      {\n        \"name\": \"TABLE_NAME\",\n        \"type\": \"sysname\",\n        \"nullable\": true\n      },\n      {\n        \"name\": \"TABLE_TYPE\",\n        \"type\": \"varchar(32)\",\n        \"nullable\": true\n      },\n      {\n        \"name\": \"REMARKS\",\n        \"type\": \"varchar(254)\",\n        \"nullable\": true\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Dependencies Installation\nDESCRIPTION: NPM command to install required dependencies for the JavaScript webhook implementation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express body-parser nodemailer\n```\n\n----------------------------------------\n\nTITLE: Listing Installation Methods for Hasura GraphQL Engine in Markdown\nDESCRIPTION: This snippet provides a numbered list of different installation and deployment methods for Hasura GraphQL Engine. It includes links to specific directories for each method, covering various scenarios and platforms.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1. [Docker Compose](docker-compose)\n2. [Docker Compose with HTTPS using Caddy](docker-compose-https)\n3. [Docker Compose with PostGIS enabled Postgres](docker-compose-postgis)\n4. [Docker Compose with pgAdmin](docker-compose-pgadmin)\n5. [Docker run](docker-run)\n6. [Kubernetes](kubernetes)\n7. [Azure Container Instance without Postgres](azure-container)\n8. [Azure Container Instances with Postgres](azure-container-with-pg)\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object in Hasura GraphQL Engine\nDESCRIPTION: This code snippet shows an empty JSON object, which is used in various parts of Hasura GraphQL Engine metadata definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Input Validation Type Definition in Hasura\nDESCRIPTION: Schema for defining input validation type and its associated definition structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Key        | Required | Schema                                                    | Description                                                          |\n| ---------- | -------- | --------------------------------------------------------- | -------------------------------------------------------------------- |\n| type       | true     | `String`                                                  | The interface for input validation. (Currently only supports \"http\") |\n| definition | true     | [InputValidationDefinition](#input-validation-definition) | The definition for the input validation                              |\n```\n\n----------------------------------------\n\nTITLE: Checking Amazon Athena Connector Health\nDESCRIPTION: Command to check the health of the Amazon Athena connector using the /health endpoint. This endpoint is available after launching the Hasura services with Amazon Athena support.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/athena/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:8081/api/v1/athena/health\n```\n\n----------------------------------------\n\nTITLE: Running Linter for Hasura Project Files\nDESCRIPTION: Command to run the linter across all project files using the nx build system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnx run-many --target=lint\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project Environment Variable\nDESCRIPTION: Sets the Google Cloud project where resources will be deployed. Can be added to .envrc.local for automatic loading with direnv.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ export GOOGLE_CLOUD_PROJECT='<project name>'\n```\n\n----------------------------------------\n\nTITLE: Apply Migrations to Hasura Instance\nDESCRIPTION: Command to apply migrations to a different Hasura instance, with optional version specification\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --endpoint https://another-hasura-instance.hasura.app\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Types for MSSQL Backend in Haskell\nDESCRIPTION: Shows how extension types are used to prune the IR AST for specific backends, in this case making the XRelay feature unrepresentable for MSSQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ninstance Backend 'MSSQL where\n  type XRelay 'MSSQL = Void\n\ndata AnnFieldG (b :: BackendType) v\n  = AFColumn !(AnnColumnField b)\n  ...\n  | AFNodeId (XRelay b) !(TableName b) !(PrimaryKeyColumns b)\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Boolean Expression Type in YAML with OpenDD\nDESCRIPTION: A YAML definition for a scalar boolean expression type that maps OpenDD operators to data connector scalar types. It includes configuration for comparison operators, mapping to data connector operators, logical operators, and null checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-expression-type-changes.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: Int_comparison_exp_with_eq_within_and_is_null\n  operand:\n    scalar:\n      type: Int\n      comparisonOperators:\n        - name: _eq # Name you want to give the operator in OpenDD / graphql\n          argumentType: Int! # This is an OpenDD type\n        - name: _within\n          argumentType: WithinInput!\n        - name: _in\n          argumentType: \"[Int!]!\"\n      dataConnectorOperatorMapping:\n        - dataConnectorName: pg_1\n          dataConnectorScalarType: int8\n          operatorMapping:\n            _within: int_within\n            _eq: _eq\n        - dataConnectorName: pg_2\n          dataConnectorScalarType: int8\n          # defaults to the same operator name (e.g. \"_eq: _eq\") if no explicit mapping is present.\n          operatorMapping:\n            _within: int_within\n  # whether to enable _and / _or / _not\n  logicalOperators:\n    # This is nested to allow for renaming of logical operators here in the future\n    enable: true\n  # whether to enable _is_null\n  isNull:\n    # This is nested to allow for renaming of is_null here in the future\n    enable: true\n  graphql:\n    typeName: Int_comparison_exp_with_eq_within_and_is_null\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global options inherited from parent commands including authentication, endpoint configuration, and general CLI behavior settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Applying Seed Migrations with Hasura CLI\nDESCRIPTION: Commands to apply seed migrations to the database using Hasura CLI. You can either apply all seed files or specify a particular seed file to apply.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n# apply all seeds on the database:\nhasura seed apply\n\n# apply only a particular seed\nhasura seed apply --file 1234_add_some_seed_data.sql\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Upgrade Command Syntax\nDESCRIPTION: The basic command syntax for upgrading a Hasura CLI plugin. This command is used with plugin name as an argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_upgrade.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins upgrade [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mimalloc in Haskell Project\nDESCRIPTION: Cabal configuration snippet showing how to include and configure mimalloc in a Haskell project. Sets up the necessary C source files, include directories, and compiler options to override malloc implementation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\ncommon preload-mimalloc\n    c-sources:       ../preload-mimalloc/mimalloc/src/static.c\n    include-dirs:    ../preload-mimalloc/mimalloc/include\n    cc-options:      -DMI_MALLOC_OVERRIDE\n```\n\n----------------------------------------\n\nTITLE: Deploying the Webhook to Heroku\nDESCRIPTION: Commands to create a Heroku app and deploy the webhook service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku apps:create\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Defining a Scalar Boolean Expression Type in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a scalar boolean expression type for integer comparisons. It includes comparison operators and their argument types, as well as data connector operator mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: pg_int_comparison_exp\n  operand:\n    scalar:\n      type: Int\n      comparisonOperators:\n        - name: equals\n          argumentType: String!\n        - name: _in\n          argumentType: [String!]!\n      dataConnectorOperatorMapping:\n        - dataConnectorName: postgres_db\n          dataConnectorScalarType: String\n          operatorMapping:\n            equals: _eq\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: app_postgres_int_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Cabal Update Commands\nDESCRIPTION: Commands used to update dependencies and regenerate the freeze file after manually modifying cabal.project.freeze.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncabal update\\ncabal freeze\n```\n\n----------------------------------------\n\nTITLE: Now Deployment Execution\nDESCRIPTION: Command to deploy the webhook using Now platform.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Types via Metadata API\nDESCRIPTION: HTTP request to set custom types for the action using Hasura's metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [],\n    \"objects\": [\n      {\n        \"name\": \"AddResult\",\n        \"fields\": [\n          {\n            \"name\": \"sum\",\n            \"type\": \"Int!\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura ECS Task Definition\nDESCRIPTION: Downloads the Hasura Fargate task definition JSON file from the Hasura GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/enterprise/aws-ecs/hasura-fargate-task.json\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Commands for executing Jest unit tests for the whole project or affected files\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnx test console-ce\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx affected:test\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Schema Boilerplate Options in Markdown\nDESCRIPTION: This code snippet lists various boilerplate options for GraphQL servers using different languages and deployment runtimes. It includes links to specific implementations for Node.js, Python, and Rust.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- nodejs: [aws](aws-lambda/nodejs), [azure](azure-functions/nodejs), [google](google-cloud-functions/nodejs)\n- python: [zeit](zeit-now/python)\n- [rust](https://github.com/ronanyeah/rust-hasura)\n```\n\n----------------------------------------\n\nTITLE: Executing Metadata Consistency Check Command - Bash\nDESCRIPTION: The basic command syntax for checking Hasura metadata consistency status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_status.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata inconsistency status [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderValue Schema in Hasura GraphQL Engine\nDESCRIPTION: Schema definition for HeaderValue, which is a String type used in header transformations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\nString\n```\n\n----------------------------------------\n\nTITLE: Setting Enum Table Configuration\nDESCRIPTION: API request to configure an existing table 'user_role' as an enum table for use in GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/table-view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_table_is_enum\",\n  \"args\": {\n    \"table\": {\n      \"schema\": \"public\",\n      \"name\": \"user_role\"\n    },\n    \"is_enum\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Hasura Auth Webhook (Bash)\nDESCRIPTION: Commands to clone the Hasura GraphQL engine repository, copy the auth webhook boilerplate, and initialize a new git repository for deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-express/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncp -r graphql-engine/community/boilerplates/auth-webhooks/nodejs-express <some-dir>\ncd <some-dir>\ngit init && git add . && git commit -m \"init auth webhook\"\n```\n\n----------------------------------------\n\nTITLE: Thumbnail for Project Collaboration Invitations\nDESCRIPTION: This snippet shows a visual representation of the projects a user is invited to collaborate on. It helps users track their collaboration opportunities within the Hasura environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail\n  src=\"/img/projects/project-collaboration-invitation.png\"\n  alt=\"Projects invited to collaborate\"\n  width=\"1146px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Enterprise License Key and Admin Secret\nDESCRIPTION: YAML snippet showing how to set the Hasura Enterprise Edition license key and admin secret in the Docker Compose file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mariadb/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_EE_LICENSE_KEY: <license key>\n    HASURA_GRAPHQL_ADMIN_SECRET: <your secretkey>\n```\n\n----------------------------------------\n\nTITLE: Webhook Token API Call for JWT Authentication\nDESCRIPTION: Illustrates how to make a curl request to the webhook endpoint to obtain a webhook token for authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" \\\n     -d'{\"username\": \"test123\", \"password\": \"test123\"}' \\\n     http://localhost:8080/login\n```\n\n----------------------------------------\n\nTITLE: Creating Note Table Schema in SQL\nDESCRIPTION: SQL schema definition for the main note table with auto-incrementing ID and text content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note\n\nColumns:\n\nid     Integer auto-increment\nnote   Text\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Versioned Internally Tagged Enum\nDESCRIPTION: Example JSON object that would be parsed into V1(VersionOne) using the versioned internally tagged approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v1\",\n  \"fieldOne\": \"some_value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Unicode Escape Sequence in GraphQL Parser\nDESCRIPTION: A structured error output from the Rust-based GraphQL parser showing expected token types, an invalid Unicode escape sequence error, and the position information. The error occurs when parsing a string with an invalid code point (0xD801).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/1002_multibyte_chars_bad.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    InvalidUnicodeEscapeSequence(\n                        \"0xD801 is not a valid code point\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 2,\n            col: 21,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Batch Log Streaming\nDESCRIPTION: SQL query generated by Hasura to fetch log entries efficiently using cursor-based pagination. Returns log details and updates the cursor for subsequent fetches.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/architecture/streaming-subscriptions.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT log_type, log_level, log_data, MAX(id) as cursor\nFROM\n( SELECT * FROM logs WHERE id > $id LIMIT 10 )\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video using an iframe in JSX. It includes attributes for frameBorder, allow, and allowFullScreen to control the video's behavior and appearance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://youtube.com/embed/Kvy9v8pVk8o\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Deployment Package\nDESCRIPTION: Maven command to package the Java Lambda function into a deployable JAR file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/java/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Example Trigger Payload JSON\nDESCRIPTION: Sample JSON payload sent by the trigger when a note is updated, including both old and new values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/mutation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": {\n        \"op\": \"UPDATE\",\n        \"data\": {\n            \"old\": {\n                \"note\": \"note1\",\n                \"id\": 1\n            },\n            \"new\": {\n                \"note\": \"note1 updated\",\n                \"id\": 1\n            }\n        }\n    },\n    \"created_at\": \"2018-10-02T06:38:22.67311Z\",\n    \"id\": \"f57a1c79-72ba-4c19-8791-37d1b9616bcf\",\n    \"trigger\": {\n        \"name\": \"note_revision_trigger\",\n        \"id\": \"5d85cbd1-c134-45ce-810c-7ecd3b4fc1ee\"\n    },\n    \"table\": {\n        \"schema\": \"public\",\n        \"name\": \"note\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Hasura Gateway Check Command\nDESCRIPTION: Basic command syntax for running the Hasura gateway check command to verify compatibility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/commands/gateway_check.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura gateway [flags] check\n```\n\n----------------------------------------\n\nTITLE: Viewing Azure Function App Logs\nDESCRIPTION: Command to stream logs from the deployed Azure Function App for monitoring and debugging.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/azure-functions/nodejs/echo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfunc azure functionapp logstream 'myfunctionsapp'\n```\n\n----------------------------------------\n\nTITLE: Updating Python Dependencies with pip\nDESCRIPTION: Commands for updating Python package dependencies and generating a new requirements lock file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements-top-level.txt\npip3 freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Hasura Auth Webhook\nDESCRIPTION: Commands to clone the Hasura GraphQL Engine repository and navigate to the Python Flask auth webhook directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/python-flask/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncd graphql-engine/community/boilerplates/auth-webhooks/python-flask\n```\n\n----------------------------------------\n\nTITLE: Implementing MSSQL Identity Columns without SET IDENTITY_INSERT\nDESCRIPTION: Defines how MSSQL identity columns would work without SET IDENTITY_INSERT, making them neither updatable nor insertable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nIDENTITY(..), w/o  SET_IDENTITY_INSERT => not updatable, not insertable\n```\n\n----------------------------------------\n\nTITLE: Using Character Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom character scalar type for single character values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    char_column: \"a\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing ProductBadge Component in JSX\nDESCRIPTION: This code snippet imports a custom React component called ProductBadge from a specific file path. The component is likely used to display a badge or label for the Enterprise Edition product.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/release-notes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for hasura migrate Command in Sass\nDESCRIPTION: This code snippet shows the options inherited from parent commands for the 'hasura migrate' command. It includes options for specifying environment file, log level, project directory, and update check settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Git Commit Command\nDESCRIPTION: Command to create a commit with documentation changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"docs: update / fix / add <feature>\"\n```\n\n----------------------------------------\n\nTITLE: Untagged With Kind Enum Implementation\nDESCRIPTION: Example of an enum implementation using the untagged with kind approach. The JSON object is not explicitly tagged with any variant, but relies on inner enums with kind-based tags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(opendds_derive::OpenDd)]\n#[opendd(as_kind)]\nenum KindEnumOne {\n    VariantOne(OneStruct),\n    VaraintTwo(TwoStruct),\n}\n\n#[derive(opendds_derive::OpenDd)]\n#[opendd(as_kind)]\nenum KindEnumTwo {\n    VariantThree(ThreeStruct),\n    VaraintFour(FourStruct)\n}\n\n#[derive(opendds_derive::OpenDd)]\n#[opendd(untagged_with_kind)]\nenum UntaggedEnum {\n    KindOne(KindEnumOne),\n    KindTwo(KindEnumTwo),\n}\n\n#[derive(opendds_derive::OpenDd)]\nstruct FourStruct {\n    #[opendd(use_serde_json)]\n    field_four: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Database Credentials\nDESCRIPTION: Creates a Kubernetes secret containing the database username and password. [PASSWORD] should be replaced with the actual password set earlier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloudsql-db-credentials \\\n        --from-literal=username=postgres --from-literal=password=[PASSWORD]\n```\n\n----------------------------------------\n\nTITLE: Ordering Institutions by Nested Fields in GraphQL\nDESCRIPTION: Shows how to order query results by nested fields, specifically ordering institutions by the city field within the location column.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  InstitutionMany(order_by: { location: { city: Asc } }) {\n    id\n    location {\n      city\n      campuses\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Console Development Server\nDESCRIPTION: Commands to switch to the correct Node.js version using nvm and start the Hasura console development server using Nx.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm install\nnvm use\nnpx nx run console-ce:serve\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Component for Enterprise Usage Reports Navigation - JSX\nDESCRIPTION: This JSX snippet uses the Thumbnail component to display an image related to the Cloud Enterprise Plan Usage Reports navigation in the Hasura Cloud dashboard. It specifies the image source, alternative text, and width for responsive display.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/plans.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail\n  src=\"/img/account-management/billing/billing-usage-EE.png\"\n  alt=\"Cloud Enterprise Plan Usage Reports Navigation\"\n  width=\"500px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Writer Monad with Except Monad in Haskell\nDESCRIPTION: Example Haskell code demonstrating how to combine Writer monad with Except monad to collect warnings while handling errors in API handlers. Shows behavior with different inputs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/warning-in-replace-metadata-API.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE ImportQualifiedPost #-}\n\nmodule Main where\nimport Control.Monad\nimport Control.Monad.Except\nimport Control.Monad.IO.Class (liftIO, MonadIO)\nimport Prelude\nimport Control.Monad.Trans.Writer.CPS qualified as CPS\nimport Control.Monad.Writer.Class\n\ntype Warnings = [String]\n\nexample ::\n  (\n    MonadIO m,\n    MonadError String m,\n    MonadWriter Warnings m\n  ) =>\n  Int -> m Int\nexample x = do\n  tell [\"warning: starting the operation\"]\n  when (x < 0) $ throwError \"error: negative input\"\n  when (x < 10) $ tell [\"warning: input is less than 10\"]\n  when (x > 20) $ tell [\"warning: input is more than 20\"]\n  liftIO $ putStrLn \"hello\" -- performs some action for non error case\n  return x\n\nhandleInput :: Int -> IO ()\nhandleInput input = do\n  putStrLn $ \"--------- input: \"<> show input <>\" ---------\"\n  (res, warnings) <- CPS.runWriterT $ runExceptT (example input)\n  print warnings\n  case res of\n    Left err -> print err\n    Right result -> print result\n  putStrLn \"-----------------------------\"\n\n\nmain :: IO ()\nmain = do\n  handleInput (-1)\n  handleInput 5\n  handleInput 15\n  handleInput 25\n\n-- >>> main\n-- --------- input: -1 ---------\n-- [\"warning: starting the operation\"]\n-- \"error: negative input\"\n-- -----------------------------\n--\n-- --------- input: 5 ---------\n-- hello\n-- [\"warning: starting the operation\",\"warning: input is less than 10\"]\n-- 5\n-- -----------------------------\n--\n-- --------- input: 15 ---------\n-- hello\n-- [\"warning: starting the operation\"]\n-- 15\n-- -----------------------------\n--\n-- --------- input: 25 ---------\n-- hello\n-- [\"warning: starting the operation\",\"warning: input is more than 20\"]\n-- 25\n-- -----------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining HeaderKey Schema in Hasura GraphQL Engine\nDESCRIPTION: Schema definition for HeaderKey, which is a String type used in header transformations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\nString\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Structure for Render Postgres in Bash\nDESCRIPTION: This snippet shows the structure of the database connection URL for connecting a Render Postgres database to Hasura. It includes placeholders for the user name, password, host server, and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/render.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://<user-name>:<password>@<host-server>/<database-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura GraphQL Engine for JWT Authentication\nDESCRIPTION: Shows how to configure the Hasura GraphQL engine with the JWT secret for RS256 authentication using either a public key or JWKS URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-servers/passportjs-jwt-roles/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": \"RS256\", \"key\": \"<AUTH_PUBLIC_KEY>\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": \"RS256\", \"jwk_url\": \"hostname:port/jwks\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Custom Table of Contents in JSX\nDESCRIPTION: Demonstrates how to create a grouped custom table of contents using custom components. This is useful for creating more complex TOC structures with multiple sections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/table-of-contents.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport {\n  CustomTOCList,\n  CustomTOCListSection,\n  CustomTOCListHead,\n  CustomTOCListContent,\n} from '@site/src/components/CustomTOCList';\n\n<CustomTOCList>\n  <CustomTOCListSection>\n    <CustomTOCListHead>API Security</CustomTOCListHead>\n\n    <CustomTOCListContent>\n      <Link to=\"/root/relative/path/to/cloud-api-reference\">API Limits</Link>\n      <Link to=\"/root/relative/path/to/allow-lists\">Allow Lists</Link>\n    </CustomTOCListContent>\n  </CustomTOCListSection>\n\n  <CustomTOCListSection>\n    <CustomTOCListHead>Reference</CustomTOCListHead>\n\n    <CustomTOCListContent>\n      <Link to=\"/root/relative/path/to/cloud-api-reference\">\n        Cloud API Reference\n      </Link>\n      <Link to=\"/root/relative/path/to/glossary\">Glossary</Link>\n      <Link to=\"/root/relative/path/to/hasurapro-cli\">Hasura Pro CLI</Link>\n    </CustomTOCListContent>\n  </CustomTOCListSection>\n</CustomTOCList>;\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Engine API with curl and yaml2json\nDESCRIPTION: Example of converting YAML metadata to JSON and sending it to the GraphQL Engine API using curl and yaml2json utility.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat /tmp/metadata.yaml | yaml2json | curl -d @- http://localhost:8181/v1/metadata\n```\n\n----------------------------------------\n\nTITLE: Querying Authors with Logical Operators in GraphQL\nDESCRIPTION: Demonstrates the previous way of using logical operators in GraphQL queries, which only allowed them at the object type level of expressions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  AuthorMany(\n    where: { _or: [{ author_id: { _eq: 1 } }, { author_id: { _eq: 2 } }] }\n  ) {\n    author_id\n    first_name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching on Error Variants in Rust\nDESCRIPTION: Demonstrates how to handle different error variants using pattern matching, highlighting how error enums can become unwieldy as they grow.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn handle_error(err: Error) {\n    match err {\n        Error::UserNotFound => {set_status(404)},\n        Error::InvalidPassword => {set_status(400)},\n        Error::PasswordNotMatched => {set_status(401)},\n        // Code here will be expanded with more error variants.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AST Structure in Python\nDESCRIPTION: This code snippet represents a portion of a GraphQL Abstract Syntax Tree (AST) structure in Python. It includes nested objects for fields, arguments, directives, and source positions, which are typical components of a GraphQL query or schema definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0005_selection_with_inline_fragments.txt#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nline: 6,\ncol: 13,\n},\n},\narguments: None,\ndirectives: [],\nselection_set: None,\n},\n),\nstart: SourcePosition {\nline: 6,\ncol: 9,\n},\nend: SourcePosition {\nline: 6,\ncol: 13,\n},\n},\n],\n},\nstart: SourcePosition {\nline: 5,\ncol: 17,\n},\nend: SourcePosition {\nline: 7,\ncol: 7,\n},\n},\n),\n},\n),\nstart: SourcePosition {\nline: 5,\ncol: 7,\n},\nend: SourcePosition {\nline: 5,\ncol: 15,\n},\n},\n],\n},\nstart: SourcePosition {\nline: 4,\ncol: 16,\n},\nend: SourcePosition {\nline: 8,\ncol: 5,\n},\n},\n},\n),\nstart: SourcePosition {\nline: 4,\ncol: 5,\n},\nend: SourcePosition {\nline: 8,\ncol: 5,\n},\n},\n],\n},\nstart: SourcePosition {\nline: 1,\ncol: 1,\n},\nend: SourcePosition {\nline: 9,\ncol: 1,\n},\n},\n},\n),\nstart: SourcePosition {\nline: 1,\ncol: 1,\n},\nend: SourcePosition {\nline: 9,\ncol: 1,\n},\n},\n],\n},\n)\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response JSON\nDESCRIPTION: Sample JSON response from the webhook after successfully creating a note revision.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/mutation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"insert_note_revision\": {\n            \"affected_rows\": 1,\n            \"returning\": [\n                {\n                    \"id\": 2\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet shows the Rust representation of a parsed GraphQL query. It includes details such as the query name, field selections, arguments, and nested objects. The structure is deeply nested to capture all aspects of the GraphQL query syntax.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/9011_escaped_char.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"MyQuery\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 13,\n                                },\n                            },\n                        ),\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"Album\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"limit\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 13,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: SimpleValue(\n                                                                            Integer(\n                                                                                10,\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 16,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 17,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 2,\n                                                                    col: 9,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 2,\n                                                                    col: 17,\n                                                                },\n                                                            },\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"where\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 20,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 2,\n                                                                            col: 24,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Object(\n                                                                            [\n                                                                                Spanning {\n                                                                                    item: KeyValue {\n                                                                                        key: Spanning {\n                                                                                            item: Name(\n                                                                                                \"Title\",\n                                                                                            ),\n                                                                                            start: SourcePosition {\n                                                                                                line: 2,\n                                                                                                col: 28,\n                                                                                            },\n                                                                                            end: SourcePosition {\n                                                                                                line: 2,\n                                                                                                col: 32,\n                                                                                            },\n                                                                                        },\n                                                                                        value: Spanning {\n                                                                                            item: Object(\n                                                                                                [\n                                                                                                    Spanning {\n                                                                                                        item: KeyValue {\n                                                                                                            key: Spanning {\n                                                                                                                item: Name(\n                                                                                                                    \"_eq\",\n                                                                                                                ),\n                                                                                                                start: SourcePosition {\n                                                                                                                    line: 2,\n                                                                                                                    col: 36,\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Frontend Translation\nDESCRIPTION: Sample GraphQL query that needs to be converted to an OpenDD query structure by the GraphQL frontend.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Author {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Command Schema with Role-specific Argument Presets\nDESCRIPTION: Pseudo-Rust code demonstrating how to create a command schema with role-specific argument presets. This example shows how to preset a user_id argument with a session variable for the user-1 role while allowing admin role unrestricted access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet role_annotations = HashMap::new();\n\nrole_annotations.insert(\"user-1\", Some(ArgumentPresets { \"user_id\":\n\"x-hasura-role-id\" }));\n\nrole_annotations.insert(\"admin\", None);\n\nbuilder.conditional_namespaced(command_schema_stuff, role_annotations)\n```\n\n----------------------------------------\n\nTITLE: Alternative CLI Build Command\nDESCRIPTION: Alternative command for building the CLI when the standard build command fails, which builds the CLI extension and copies it to the appropriate location.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build-cli-ext copy-cli-ext\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet demonstrates the nested structure used to represent a GraphQL query in Rust. It includes fields for name, alias, arguments, directives, and nested selection sets, along with source position tracking for each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0003_selection_with_fields.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nSpanning {\n    item: Field(\n        Field {\n            alias: None,\n            name: Spanning {\n                item: Name(\n                    \"playmates\",\n                ),\n                start: SourcePosition {\n                    line: 9,\n                    col: 9,\n                },\n                end: SourcePosition {\n                    line: 9,\n                    col: 17,\n                },\n            },\n            arguments: None,\n            directives: [],\n            selection_set: Some(\n                Spanning {\n                    item: SelectionSet {\n                        items: [\n                            Spanning {\n                                item: Field(\n                                    Field {\n                                        alias: None,\n                                        name: Spanning {\n                                            item: Name(\n                                                \"name\",\n                                            ),\n                                            start: SourcePosition {\n                                                line: 10,\n                                                col: 13,\n                                            },\n                                            end: SourcePosition {\n                                                line: 10,\n                                                col: 16,\n                                            },\n                                        },\n                                        arguments: None,\n```\n\n----------------------------------------\n\nTITLE: Bash Commands for Heroku Deployment of Hasura GraphQL Engine\nDESCRIPTION: These Bash commands demonstrate how to create a Heroku app using a manifest file, initialize a Git repository, and deploy the Hasura GraphQL Engine to Heroku using Git push.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/cli-migrations/v2/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku create heroku-migration-tester --manifest\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport HEROKU_GIT_REMOTE=https://git.heroku.com/heroku-migration-tester.git\ngit init && git add .\ngit commit -m \"first commit\"\ngit remote add heroku HEROKU_GIT_REMOTE\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Object in Hasura with No Language\nDESCRIPTION: This snippet outlines the structure for defining an aggregate object in Hasura. It demonstrates various aggregate functions such as count, sum, avg, and others, applied to table columns. To use these definitions, a specific column to aggregate on must be provided, and its results help in query simplification. The snippet doesn't require specific prerequisites.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nobject-name_aggregate {\n  aggregate {\n    count\n    sum {\n      field\n      ..\n    }\n    avg {\n      field\n      ..\n    }\n    stddev {\n      field\n      ..\n    }\n    stddev_samp {\n      field\n      ..\n    }\n    stddev_pop {\n      field\n      ..\n    }\n    variance {\n      field\n      ..\n    }\n    var_samp {\n      field\n      ..\n    }\n    var_pop {\n      field\n      ..\n    }\n    max {\n      field\n      ..\n    }\n    min {\n      field\n      ..\n    }\n  nodes {\n    field1\n    field2\n    ..\n    nested object1\n    nested object2\n    aggregate nested object1\n    ..\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Command Options\nDESCRIPTION: Available command-line options specific to the migrate apply command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --up string        apply all or N up migration steps\n    --down string      apply all or N down migration steps\n    --goto string      apply migration chain up to to the version specified\n    --version string   only apply this particular migration\n    --skip-execution   skip executing the migration action, but mark them as applied\n    --type string      type of migration (up, down) to be used with version flag (default \"up\")\n    --dry-run          print the names of migrations which are going to be applied\n    --all-databases    set this flag to attempt to apply migrations on all databases present on server\n    --no-transaction   disable transaction for migration (env \"HASURA_GRAPHQL_NO_TRANSACTION\")\n-h, --help             help for apply\n```\n\n----------------------------------------\n\nTITLE: Redaction in Filtering using JSON\nDESCRIPTION: This JSON snippet demonstrates how data redaction can be applied within the filter expression of a GraphQL query. The `redaction_expressions` define conditions under which the `ColumnA` is redacted based on the value of `Id`. The `where` clause then compares the redacted value of `ColumnA` with a scalar value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_50\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Test\"]\n  },\n  \"relationships\": [],\n  // Redaction expressions are defined per table/function\n  \"redaction_expressions\": [\n    {\n      \"target\": {\n        \"type\": \"table\",\n        \"table\": [\"Test\"] // These expressions are defined for the Test table\n      },\n      \"expressions\": {\n        // Redaction expressions are named (names are only unique within a table/function)\n        \"RedactionExp0\": {\n          \"type\": \"binary_arr_op\",\n          \"operator\": \"in\",\n          \"column\": { \"name\": \"Id\", \"column_type\": \"number\" },\n          \"values\": [1,2],\n          \"value_type\": \"number\"\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Id\": {\n        \"type\": \"column\",\n        \"column\": \"Id\",\n        \"column_type\": \"number\"\n      }\n    },\n    \"where\": {\n      \"type\": \"binary_op\",\n      \"operator\": \"equals\",\n      // ALl column comparisons in \"binary_op\", \"binary_arr_op\", and \"unary_op\"\n      // can potentially have a redaction expression\n      \"column\": {\n        \"name\": \"ColumnA\",\n        \"column_type\": \"string\",\n        \"redaction_expression\": \"RedactionExp0\"\n      },\n      \"value\": {\n        \"type\": \"scalar\",\n        \"value\": \"A1\",\n        \"value_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Inherited from Parent Commands in SASS Format\nDESCRIPTION: Shows the options inherited from parent commands, including environment file configuration, log level settings, color output control, project directory specification, and update check controls.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Secret Header in YAML for Hasura CLI\nDESCRIPTION: Demonstrates how to add a custom header for action secret in the Hasura metadata YAML file, used for securing action handlers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-handlers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- actions\n  - name: actionName\n    definition:\n       kind: synchronous\n       handler: http://localhost:3000\n       forward_client_headers: true\n       headers:\n         - name: ACTION_SECRET\n           value_from_env: ACTION_SECRET_ENV\n```\n\n----------------------------------------\n\nTITLE: Querying an Ordered Authors View in Postgres\nDESCRIPTION: This SQL snippet shows how to query the 'authors_ordered_by_rating' view to retrieve the name and rating of authors in the order specified by the view definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/views.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name, rating from authors_ordered_by_rating;\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Uninstall Example\nDESCRIPTION: Example showing how to uninstall a specific plugin using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_uninstall.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstall a plugin\nhasura plugins uninstall [plugin-name]\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Installation Inherited Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the install command, including environment configuration and logging options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_install.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Updating Remote Schema Relationship to Remote Schema in Hasura GraphQL Engine\nDESCRIPTION: This HTTP POST request updates an existing remote relationship on a Remote Schema's type to another Remote Schema. It allows modifying the relationship definition while keeping the name, source schema, and type the same.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\":\"update_remote_schema_remote_relationship\",\n   \"args\":{\n      \"name\": \"messages\",\n      \"remote_schema\": \"users_api\",\n      \"type\": \"user\",\n      \"definition\": {\n        \"to_remote_schema\": {\n          \"remote_schema\": \"forum_api\",\n          \"lhs_fields\": [\"id\"],\n          \"remote_field\": {\n            \"messages\": {\n               \"arguments\": {\n                  \"user_id\":\"$id\"\n               }\n            }\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Schema Building in Haskell\nDESCRIPTION: Haskell code demonstrating how table selection parsers would be built recursively, which would lead to infinite recursion without proper memoization techniques.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_8\n\nLANGUAGE: haskell\nCODE:\n```\nselectTable tableName tableInfo = do\n  arguments    <- tableArguments tableInfo\n  selectionSet <- traverse mkField $ fields tableInfo\n  pure $ selection tableName arguments selectionSet\n\nmkField = \\case\n  TableColumn c  -> field_ (name c)\n  Relationship r -> field (name r) $ selectTable (target r)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the AWS Lambda project location.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/java/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd community/boilerplates/serverless-triggers/aws-lambda/java/echo\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation Type Definition with @key Directive\nDESCRIPTION: GraphQL type definition showing how Hasura enables Apollo Federation by adding the @key directive to the GraphQL schema with the table's primary key as the fields argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype user @key(fields: \"id\") {\n  id: Int!\n  name: String\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura Enterprise with MySQL\nDESCRIPTION: Commands to download the Docker Compose manifest file for setting up Hasura Enterprise Edition with MySQL integration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mysql/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/mysql/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI Command\nDESCRIPTION: Bash command to apply metadata changes after configuring column presets in YAML files\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/column-presets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating to Project Directory\nDESCRIPTION: These bash commands clone the Hasura GraphQL Engine repository and navigate to the specific directory containing the Google Cloud Functions NodeJS boilerplate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/google-cloud-functions/nodejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:hasura/graphql-engine\n$ cd graphql-engine/community/boilerplates/remote-schemas/google-cloud-functions/nodejs\n```\n\n----------------------------------------\n\nTITLE: Plugin Upgrade Example Usage\nDESCRIPTION: Example showing how to upgrade a specific plugin by providing its name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_upgrade.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade a plugin to a newer version\nhasura plugins upgrade [plugin-name]\n```\n\n----------------------------------------\n\nTITLE: Preparing AWS Lambda Function Deployment in Bash\nDESCRIPTION: Bash commands for installing dependencies and creating a zip file for AWS Lambda deployment. These steps prepare the function code for upload to AWS Lambda.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs6/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nzip -r hge-mutation.zip .\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex Connector for Mock Authentication\nDESCRIPTION: This YAML configuration snippet shows how to set up a mock connector in Dex for testing the authentication flow between Dex and Hasura Enterprise Edition without an actual Identity Provider.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/troubleshooting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# dex/config.docker.yaml\nconnectors:\n  - type: mockCallback\n    id: mock\n    name: Mock\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LatestRelease Component in JSX\nDESCRIPTION: This snippet shows how to import and use the LatestRelease component to display the latest stable and pre-release versions of Hasura GraphQL Engine. The component is used within code tags to format the output.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/release-tag.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LatestRelease from \"@site/src/components/LatestRelease\";\n\nThe current latest stable version is:\n\n<code>hasura/graphql-engine:<LatestRelease /></code>\n\nThe current latest pre-release version is:\n\n<code>hasura/graphql-engine:<LatestRelease prerelease /></code>\n```\n\n----------------------------------------\n\nTITLE: Marking Migration as Applied in Hasura CLI\nDESCRIPTION: This command marks a specific migration version as already applied on the project, useful when encountering 'relation already exists' errors. It skips the actual execution and updates the project's migration status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/github-integration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --skip-execution --version <migration_version> --endpoint \"<cloud_project_endpoint>\"\n```\n\n----------------------------------------\n\nTITLE: Defining AndExp Schema in Hasura\nDESCRIPTION: Specifies the schema for AND logical expressions in boolean conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$and\": [BoolExp]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook URL Format\nDESCRIPTION: Basic URL format for the webhook endpoint that handles order status change events.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your-webhook-url>/order-status-change\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Profile Table in SQL\nDESCRIPTION: SQL definition for creating a profile table with id and name fields, where id is the primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/ruby/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nprofile (\n  id INT PRIMARY KEY,\n  name TEXT\n)\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Git clone commands to get the boilerplate code and navigate to the project directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/aws-lambda/nodejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:hasura/graphql-engine\n$ cd graphql-engine/community/boilerplates/remote-schemas/aws-lambda/nodejs\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura Auth Webhook with Now (Bash)\nDESCRIPTION: Commands to clone the repository, navigate to the auth webhook directory, install Now globally, and deploy the webhook using Now.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-express/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncd graphql-engine/community/boilerplates/auth-webhooks/nodejs-express\nnpm install -g now\nnow\n```\n\n----------------------------------------\n\nTITLE: Formatting Hasura Project Files\nDESCRIPTION: Command to format all project files using nx formatting tools.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx format:write\n```\n\n----------------------------------------\n\nTITLE: Defining Labeled Metrics with ToLabels in Haskell\nDESCRIPTION: This code snippet demonstrates how to define a metrics specification with labeled metrics using the ToLabels typeclass. It shows both manual implementation and GHC.Generics-derived instances of ToLabels for structured label sets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\n-- data AppMetrics2\n--   :: Symbol\n--   -> Symbol\n--   -> MetricType\n--   -> Type -- ^ Label set structure\n--   -> Type\n--   where\n--   -- (1)\n--   HTTPRequests ::\n--     AppMetrics2 \"requests\" \"\" 'CounterType EndpointLabels\n--   DBConnections ::\n--     AppMetrics2 \"total_connections\" \"\" 'GaugeType DataSourceLabels\n-- \n-- -- (2)\n-- newtype EndpointLabels = EndpointLabels { endpoint :: T.Text }\n-- \n-- instance ToLabels EndpointLabels where\n--   toLabels (EndpointLabels endpoint') = HM.singleton \"endpoint\" endpoint'\n-- \n-- -- 3\n-- data DataSourceLabels = DataSourceLabels\n--   { source_name :: T.Text\n--   , conn_info :: T.Text\n--   } deriving (Generic)\n-- instance ToLabels DataSourceLabels\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Metadata in Markdown\nDESCRIPTION: This snippet defines metadata for a sidebar in a documentation system, likely using Docusaurus. It sets the position, label, and CSS class name for the sidebar item.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 40\nsidebar_label: 'Auth'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Reference Data Connector Agent\nDESCRIPTION: Command to launch the Reference implementation of the Data Connector Agent\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> make start-reference-agent\n```\n\n----------------------------------------\n\nTITLE: Sample Trigger Event Payload\nDESCRIPTION: Example JSON payload sent by Hasura when the trigger is executed on insert operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": {\n        \"op\": \"INSERT\",\n        \"data\": {\n            \"old\": null,\n            \"new\": {\n                \"text\": \"new-entry\",\n                \"id\": 1\n            }\n        }\n    },\n    \"created_at\": \"2018-10-01T17:21:03.76895Z\",\n    \"id\": \"b30cc7e6-9f3b-48ee-9a10-16cce333df40\",\n    \"trigger\": {\n        \"name\": \"note_trigger\",\n        \"id\": \"551bd6a9-6f8b-4644-ba7f-80c08eb9227b\"\n    },\n    \"table\": {\n        \"schema\": \"public\",\n        \"name\": \"note\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Uninstall Command Options\nDESCRIPTION: Available command-line options specific to the uninstall command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_uninstall.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for uninstall\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet shows the structure of a parsed GraphQL query in Rust. It defines an ExecutableDocument with nested structures for operations, fields, and arguments. The code includes source position information for each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0030_values.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"user\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 8,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"id\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 10,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: SimpleValue(\n                                                                            Integer(\n                                                                                4,\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 13,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 13,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 3,\n                                                                    col: 9,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 3,\n                                                                    col: 13,\n                                                                },\n                                                            },\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"size\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 12,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Variable(\n                                                                            Name(\n                                                                                \"size\",\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 15,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 4,\n                                                                            col: 19,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 9,\n                                                                },\n                                                                end: SourcePosition {\n                                                                    line: 4,\n                                                                    col: 19,\n                                                                },\n                                                            },\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"value\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 5,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 5,\n                                                                            col: 13,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: SimpleValue(\n                                                                            String(\n                                                                                \"string\",\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Dynamic Override of malloc with mimalloc on MacOS\nDESCRIPTION: Example of preloading the mimalloc shared library on MacOS systems to override the standard malloc interface. This uses the DYLD_INSERT_LIBRARIES environment variable specific to MacOS.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nenv DYLD_INSERT_LIBRARIES=/usr/lib/libmimalloc.dylib myprogram\n```\n\n----------------------------------------\n\nTITLE: Installing Python bcrypt for Password Hashing\nDESCRIPTION: Command to install the Python bcrypt library, which is used to generate hashed passwords for Prometheus web interface authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-bcrypt -y\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Integer\nDESCRIPTION: This GraphQL snippet shows an example of querying an integer field. The `Int` scalar type represents a signed integer.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    int_col: 27\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Syntax-Highlighted GraphQL Query in Docusaurus MDX\nDESCRIPTION: Demonstrates how to add a GraphQL query as a code block in Docusaurus MDX, including line highlighting and comments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```graphql {2,5}\n    query {\n    // highlight-next-line\n      authors (where: {articles: {rating: {_gt: 4}}}) {\n        id\n        name\n        // highlight-next-line\n        articles (where: {rating: {_gt: 4}}) {\n          id\n          title\n          rating\n        }\n      }\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Hasura Project Update\nDESCRIPTION: The basic command syntax to update a Hasura project from config v1 to v2 format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura scripts update-project-v2 [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Local Build for Hasura DDN Project\nDESCRIPTION: Command to generate a local build for a Hasura DDN project, creating resolved metadata files in the engine/build directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Defining Logical Model in YAML\nDESCRIPTION: This YAML code defines a logical model named 'article_excerpt' with fields for id, title, date, and excerpt.  It's part of the Hasura metadata configuration for databases.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/native-queries.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogical_models:\n  - name: article_excerpt\n    fields:\n      id:\n        type: integer\n      title:\n        type: text\n      date:\n        type: date\n      excerpt:\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Hasura V3 GraphQL Components\nDESCRIPTION: Commands to run benchmarks for the lexer, parser, and validation components of the Hasura V3 GraphQL engine using Cargo.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench -p lang-graphql \"lexer\"\ncargo bench -p lang-graphql \"parser\"\ncargo bench -p lang-graphql \"validation/.*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Server Telemetry Data Sample in JSON\nDESCRIPTION: This snippet shows a sample of the telemetry data collected by the Hasura GraphQL Engine server. It includes information such as database and instance UUIDs, version, CI environment, and various metrics about tables, views, relationships, and other tracked entities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 12,\n  \"timestamp\": \"2019-01-21T19:43:33.63838+00:00\",\n  \"db_uid\": \"dddff371-dab2-450f-9969-235bca66dab1\",\n  \"instance_uid\": \"6799360d-a431-40c5-9f68-24592a9f07df\",\n  \"version\": \"v1.0.0-alpha36\",\n  \"ci\": \"TRAVIS\",\n  \"metrics\": {\n    \"views\": 1,\n    \"tables\": 2,\n    \"functions\": 1,\n    \"permissions\": {\n      \"roles\": 1,\n      \"delete\": 2,\n      \"insert\": 1,\n      \"select\": 2,\n      \"update\": 2\n    },\n    \"relationships\": {\n      \"auto\": 2,\n      \"manual\": 0\n    },\n    \"event_triggers\": 0,\n    \"remote_schemas\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Logical Model Permissions via HTTP API\nDESCRIPTION: Shows how to remove permissions for a specific role from a logical model using the HTTP API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_drop_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-parse Plugin in YAML\nDESCRIPTION: Example of OpenDD metadata for configuring a pre-parse plugin, which can be used to add functionalities like an allow list to the DDN.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\nname: allow list\nurl: http://localhost:8787\npre: parse\nconfig:\n  request:\n    headers:\n      additional:\n      hasura-m-auth:\n        value: \"your-strong-m-auth-key\"\n    session: {}\n    rawRequest:\n      query: {}\n      variables: {}\n```\n\n----------------------------------------\n\nTITLE: Building Secure Version of mimalloc\nDESCRIPTION: Commands to build a secure version of mimalloc with guard pages and encrypted free lists\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> mkdir -p out/secure\n> cd out/secure\n> cmake -DMI_SECURE=ON ../..\n> make\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaContext with No Annotations in Rust\nDESCRIPTION: A basic implementation of the SchemaContext trait with no meaningful annotations. This example from tests shows how to define namespace types without adding functional role-based behavior.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl SchemaContext for SDL {\n    type Namespace = Namespace;\n    type GenericNodeInfo = ();\n    type NamespacedNodeInfo = ();\n```\n\n----------------------------------------\n\nTITLE: Dropping Update Permission for MSSQL Table\nDESCRIPTION: Removes an existing update permission for a specific role on a table in MSSQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_drop_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"source\": \"default\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Retrieving Customer Data\nDESCRIPTION: This GraphQL query retrieves customer data including CustomerId, FirstName, LastName, Country, and SupportRepId. The X-Hasura-Role session variable should be set to 'user' for this query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCustomer {\n  Customer {\n    CustomerId\n    FirstName\n    LastName\n    Country\n    SupportRepId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Haskell integration tests\nDESCRIPTION: Commands to start the required databases and run the Haskell integration test suite using Docker Compose and Cabal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --detach --wait\n$ cabal run api-tests:exe:api-tests\n```\n\n----------------------------------------\n\nTITLE: Fetching Event Logs - MSSQL\nDESCRIPTION: This snippet illustrates how to fetch the logs for a specific event trigger using the `mssql_get_event_logs` API. It allows to filter logs based on event status and paginate the results with limit and offset parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_get_event_logs\",\n  \"args\": {\n    \"name\": \"sample_trigger\",\n    \"source\": \"default\",\n    \"status\": \"processed\",\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed GraphQL Schema for distinct_on Feature in Hasura\nDESCRIPTION: This GraphQL schema snippet shows the proposed implementation for the distinct_on feature, which was ultimately discarded. It includes types for query root, select columns, and scalar fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_107\n\nLANGUAGE: graphql\nCODE:\n```\n# Existing query root type\ntype query_root {\n  Invoice_aggregate(\n    distinct_on: [Invoice_select_column!]\n    limit: Int\n    offset: Int\n    order_by: [Invoice_order_by!]\n    where: Invoice_bool_exp\n  ): Invoice_aggregate!\n}\n\n# Allows the selection of a column. Does not allow the selection of an aggregation of an\n# array relationship/nested array or navigation into object relationships\ninput Invoice_select_column @oneOf {\n  scalar: Invoice_scalar_fields\n  object: Invoice_object_fields\n}\n\n# All scalar fields in the model\nenum Invoice_scalar_fields {\n  InvoiceId\n  InvoiceDate\n  CustomerId\n  Total\n}\n\ninput Invoice_object_fields @oneOf {\n  BillingAddress: Address_select_column\n}\n\ninput Address_select_column @oneOf {\n  scalar: Address_scalar_fields\n  # No nested object fields, object property omitted\n}\n\nenum Address_scalar_fields {\n  StreetAddress\n  City\n  State\n  PostalCode\n  Country\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of GraphQL Query without Admin Secret\nDESCRIPTION: This JSON represents the data returned when the admin secret is disabled, showing limited data access based on JWT roles, with only the current user's data visible.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n        \"email\": \"seandemo@hasura.io\",\n        \"name\": \"Sean\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling the GraphQL Engine server with Cabal\nDESCRIPTION: Commands to set up the Cabal project configuration and build the GraphQL Engine server using Cabal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ln -s cabal/dev.project cabal.project.local\n$ cabal new-update\n$ cabal new-build graphql-engine\n```\n\n----------------------------------------\n\nTITLE: Action Error Response Format Before Improvement\nDESCRIPTION: Example of the internal error field format for Action errors before the improvement in v1.2.0-beta5. This shows the simplified webhook_response structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"extensions\": {\n        \"internal\": {\n          \"webhook_response\": {\n            \"age\": 25,\n            \"name\": \"Alice\",\n            \"id\": \"some-id\"\n          }\n        },\n        \"path\": \"$\",\n        \"code\": \"unexpected\"\n      },\n      \"message\": \"unexpected fields in webhook response: age\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Downgrading Hasura GraphQL Engine Docker Command\nDESCRIPTION: Command-line interface for downgrading Hasura GraphQL Engine from one version to an earlier version using Docker. Allows automatic running of SQL statements for version rollback.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hasura/graphql-engine:v1.2.0 graphql-engine --database-url <db-url> downgrade --to-v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Example JSON for Metadata V3\nDESCRIPTION: JSON snippet showing how the version discriminator would be used in the actual metadata output.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3\n  // more fields described by the #/components/schemas/MetadataV3 OpenAPI document\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Model Definition in YAML with OpenDD v2\nDESCRIPTION: A YAML definition for a model using the version 2 format that incorporates the new expression type approach. It shows how to reference boolean expression and order by expression types in a model definition.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-expression-type-changes.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v2\ndefinition:\n  name: Albums\n  objectType: Album\n  filterExpressionType: Album_bool_exp\n  # This replaces orderableFields\n  orderByExpression: Album_order_by_exp\n  graphql:\n    selectMany:\n      queryRootField: App_Albums\n    # There is no `orderByExpressionType` anymore within `graphql`.\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query AST in Rust\nDESCRIPTION: This code snippet shows the Rust representation of a parsed GraphQL query AST. It includes an operation definition, fields, aliases, and nested selection sets. The structure uses custom types like ExecutableDocument, OperationDefinition, and Field to represent different parts of the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0020_operation_type_definition.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"myQuery\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 13,\n                                },\n                            },\n                        ),\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: Some(\n                                                    Spanning {\n                                                        item: Alias(\n                                                            Name(\n                                                                \"animal\",\n                                                            ),\n                                                        ),\n                                                        start: SourcePosition {\n                                                            line: 2,\n                                                            col: 5,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 2,\n                                                            col: 10,\n                                                        },\n                                                    },\n                                                ),\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"cat\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 13,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 15,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 13,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 15,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"dog\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: Some(\n                                                    Spanning {\n                                                        item: SelectionSet {\n                                                            items: [\n                                                                Spanning {\n                                                                    item: Field(\n                                                                        Field {\n                                                                            alias: None,\n                                                                            name: Spanning {\n                                                                                item: Name(\n                                                                                    \"panda\",\n                                                                                ),\n                                                                                start: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 9,\n                                                                                },\n                                                                                end: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 13,\n                                                                                },\n                                                                            },\n                                                                            arguments: None,\n                                                                            directives: [],\n                                                                            selection_set: Some(\n                                                                                Spanning {\n                                                                                    item: SelectionSet {\n                                                                                        items: [\n                                                                                            Spanning {\n                                                                                                item: Field(\n                                                                                                    Field {\n                                                                                                        alias: None,\n                                                                                                        name: Spanning {\n                                                                                                            item: Name(\n                                                                                                                \"anotherCat\",\n                                                                                                            ),\n                                                                                                            start: SourcePosition {\n                                                                                                                line: 5,\n                                                                                                                col: 13,\n                                                                                                            },\n                                                                                                            end: SourcePosition {\n                                                                                                                line: 5,\n                                                                                                                col: 22,\n                                                                                                            },\n                                                                                                        },\n                                                                                                        arguments: None,\n                                                                                                        directives: [\n                                                                                                            Spanning {\n                                                                                                                item: Directive {\n                                                                                                                    name: Spanning {\n```\n\n----------------------------------------\n\nTITLE: Creating and Inserting Data into Users Table - SQL\nDESCRIPTION: This SQL script creates a 'users' table and populates it with initial data. It also allows tracking the table in Hasura's metadata, ensuring it's managed correctly within the application framework.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT NOT NULL UNIQUE\n);\n\nINSERT INTO users (name, email) VALUES ('John', 'john.doe@hasura.io');\nINSERT INTO users (name, email) VALUES ('Jane', 'jane.doe@hasura.io');\n```\n\n----------------------------------------\n\nTITLE: OpenDD Field Argument Definition Approach 2 - Extending ObjectType\nDESCRIPTION: Shows how to extend the existing OpenDD ObjectType definition to include field arguments. This integrates the argument definitions and mappings directly within the object type definition, making maintenance easier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-field-argument-types-changes.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Artist\n  graphql:\n    typeName: artist\n    inputTypeName: artistInput\n    apolloFederation:\n      keys:\n        - fields:\n            - ArtistId\n  fields:\n    - name: ArtistId\n      type: int4!\n    - name: Name\n      type: varchar\n      arguments:\n        - name: full\n          argumentType: Bool\n        - name: initialsOnly\n          argumentType: Bool\n        - name: truncateAfter\n          argumentType: Int\n    - name: CryptoHash\n      type: varchar\n      arguments:\n        - name: algorithm\n          argumentType: varchar!\n  dataConnectorTypeMapping:\n    - dataConnectorName: db\n      dataConnectorObjectType: Artist\n      fieldMapping:\n        ArtistId:\n          column:\n            name: ArtistId\n        Name:\n          column:\n            name: Name\n          argumentMapping:\n            full: full_name\n            initialsOnly: convert_to_initials\n            truncateAfter: truncate_length\n        CryptoHash:\n          column:\n            name: hash\n          argumentMapping:\n            - algorithm: algo\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: This snippet lists Python package dependencies with their specific versions. It's typically used in a requirements.txt file to ensure consistent package versions across different environments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/scripts/coalesce_run_sql/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbackcall==0.2.0\ndecorator==4.4.2\nipython==7.19.0\nipython-genutils==0.2.0\njedi==0.18.0\nparso==0.8.1\npexpect==4.8.0\npickleshare==0.7.5\nprompt-toolkit==3.0.8\nptyprocess==0.6.0\nPygments==2.7.3\nruamel.yaml==0.16.12\ntraitlets==5.0.5\nwcwidth==0.2.5\n```\n\n----------------------------------------\n\nTITLE: Information Schema Permission Warnings\nDESCRIPTION: Example of common permission warnings when granting information_schema access that can be safely ignored.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/postgres-requirements.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\npostgres=> GRANT SELECT ON ALL TABLES IN SCHEMA information_schema TO hasurauser;\nWARNING:  no privileges were granted for \"sql_packages\"\nWARNING:  no privileges were granted for \"sql_features\"\nWARNING:  no privileges were granted for \"sql_implementation_info\"\nERROR:  permission denied for table sql_parts\n\npostgres=> GRANT SELECT ON ALL TABLES IN SCHEMA pg_catalog TO hasurauser;\nERROR:  permission denied for table pg_statistic\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud SDK\nDESCRIPTION: Initializes the Google Cloud SDK after installation. This step is necessary to set up the gcloud CLI for further operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Aggregate Fields Selection Type\nDESCRIPTION: Specifies a GraphQL type for selecting aggregate fields on Discount objects. Includes count functions and field-specific aggregations for discount properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_73\n\nLANGUAGE: graphql\nCODE:\n```\ntype Discount_aggregate_fields {\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  Description: String_aggregate_fields!\n  Percentage: Decimal_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Inherited Options\nDESCRIPTION: Options inherited from parent commands including endpoint configuration, authentication, and general CLI behavior settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_codegen.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Logs\nDESCRIPTION: Command to view the logs of the Hasura GraphQL Engine service running on Kubernetes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/kubernetes.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl logs -f svc/hasura\n\n{\"timestamp\":\"2018-10-09T11:20:32.054+0000\", \"level\":\"info\", \"type\":\"http-log\", \"detail\":{\"status\":200, \"query_hash\":\"01640c6dd131826cff44308111ed40d7fbd1cbed\", \"http_version\":\"HTTP/1.1\", \"query_execution_time\":3.0177627e-2, \"request_id\":null, \"url\":\"/v1/graphql\", \"user\":{\"x-hasura-role\":\"admin\"}, \"ip\":\"127.0.0.1\", \"response_size\":209329, \"method\":\"POST\", \"detail\":null}}\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Command Options\nDESCRIPTION: Core command line options available for the 'hasura plugins' command to manage Hasura CLI plugins.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for plugins\n```\n\n----------------------------------------\n\nTITLE: Sample Delete Mutation in GraphQL\nDESCRIPTION: Example GraphQL delete mutation that targets the articles table with a condition on the author's ID.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nmutation delete_articles {\n  delete_article(where: { author: { id: { _eq: 7 } } }) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Complete list of inherited command options including authentication, database selection, and various configuration parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_status.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition for Related Tables\nDESCRIPTION: GraphQL schema type definitions showing a circular relationship between Author and Article types, demonstrating the graph structure of the schema rather than a tree.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Author {\n  id: Int!\n  name: String!\n  articles: [Article!]!\n}\n\ntype Article {\n  id: Int!\n  name: String!\n  author: Author!\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting BigQuery service account email in Bash\nDESCRIPTION: Command to set the HASURA_BIGQUERY_SERVICE_ACCOUNT_EMAIL environment variable, which is required for initial verification of BigQuery credentials. This variable stores the service account email address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/test-harness/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export HASURA_BIGQUERY_SERVICE_ACCOUNT_EMAIL=hasura@email.com\n$ ./scripts/verify-bigquery-creds.sh\n```\n\n----------------------------------------\n\nTITLE: Heroku Deployment Commands\nDESCRIPTION: Series of bash commands for deploying both REST API and GraphQL wrapper to Heroku\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/rest-wrapper/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\nLANGUAGE: bash\nCODE:\n```\nheroku create\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Records with Postgres in GraphQL\nDESCRIPTION: Example of using the new update_many operation in GraphQL to update multiple records in a single transaction. Shows how to provide multiple conditions and update operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_artist_many(\n  updates: [\n    { where: { id: { _eq: 1 } },\n      _set: { name: \"new name\", description: \"other\" }\n    }\n    { where: { id: { _eq: 2 } },\n      _set: { name: \"new name\" }\n    }\n    ]\n) {\n  affected_rows\n  returning {\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nupdate_artist_many(\n  updates: [\n    { where: { id: { _lte: 3 } },\n      _set: { name: \"first\", description: \"other\" }\n    }\n    { where: { id: { _eq: 2 } },\n      _set: { name: \"second\" }\n    }\n    { where: { id: { _gt: 2 } },\n      _set: { name: \"third\", description: \"hello\" }\n    }\n    { where: { id: { _eq: 1 } },\n      _set: { name: \"done\" }\n    }\n    ]\n) {\n  affected_rows\n  returning {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Container Status\nDESCRIPTION: Command to verify that all containers (Hasura GraphQL Engine, PostgreSQL, Redis, and data connector) are running properly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\nCONTAINER ID IMAGE                              ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine              ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres                           ... 1m ago  Up 1m  5432/tcp ...\n3a29aa348999 redis:7                            ... 1m ago  Up 1m  6379/tcp ...\n7b5b2ee70ece hasura/graphql-data-connector      ... 1m ago  Up 1m  5005/tcp ..\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Maintenance Mode\nDESCRIPTION: Imports essential components required for rendering the maintenance mode UI, including Thumbnail, HeadingIcon, and ProductBadge. These imports are necessary to create the visual elements on the maintenance mode page.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/maintenance-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Creating Notes Table Schema\nDESCRIPTION: Defines a simple database table schema for storing notes with an integer ID and text content fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs8/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in Cloud SQL\nDESCRIPTION: Command to create a new database in the Cloud SQL Postgres instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql databases create <DATABASE_NAME> --instance=hasura-postgres\n```\n\n----------------------------------------\n\nTITLE: Executing hasura update-cli Command in Bash\nDESCRIPTION: Shows the basic syntax for running the 'hasura update-cli' command. This command is used to update the Hasura CLI to the latest version or a specific version.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_update-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura update-cli [flags]\n```\n\n----------------------------------------\n\nTITLE: Sorting Authors by Article Count Descending - GraphQL\nDESCRIPTION: Fetches a list of authors sorted by the count of their articles in descending order by utilizing the `articles_aggregate` relationship in the `order_by` argument.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/sorting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<GraphiQLIDE\n  query={`query {\n  authors (\n    order_by: {\n      articles_aggregate: {count: desc}\n    }\n  ) {\n    id\n    name\n    articles_aggregate {\n      aggregate{\n        count\n      }\n    }\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"authors\": [\n      {\n        \"id\": 5,\n        \"name\": \"Amii\",\n        \"articles_aggregate\":{\n          \"aggregate\": {\n            \"count\": 3\n          }\n        }\n      },\n      {\n        \"id\": 4,\n        \"name\": \"Anjela\",\n        \"articles_aggregate\":{\n          \"aggregate\": {\n            \"count\": 2\n          }\n        }\n      },\n      {\n        \"id\": 8,\n        \"name\": \"April\",\n        \"articles_aggregate\":{\n          \"aggregate\": {\n            \"count\": 2\n          }\n        }\n      }\n    ]\n  }\n}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Processor Configuration\nDESCRIPTION: Configuration for OpenTelemetry Collector processor to handle instance ID assignment for accurate metric aggregation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/opentelemetry/graphql-engine.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  transform:\n    error_mode: ignore\n    metric_statements:\n      - context: datapoint\n        statements:\n          - set(attributes[\"instance\"], resource.attributes[\"host.name\"])\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Hasura Documentation with JSX\nDESCRIPTION: This code embeds a YouTube video about Hasura security features using an iframe element. The video is embedded with standard YouTube parameters including autoplay and encrypted media permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/security/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n    src=\"https://www.youtube.com/embed/gxYnpuXITPo\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n  />\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for PostgreSQL Replication (Docker Compose)\nDESCRIPTION: Uses Docker Compose to start PostgreSQL primary and replica instances with SSL configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas-with-ssl-client-certs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --wait\n```\n\n----------------------------------------\n\nTITLE: Exporting a Single Spec Function in Haskell\nDESCRIPTION: Shows how to export a single spec function that combines multiple test groups, as required by hspec-discover.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/testing-guidelines.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nspec :: Spec\nspec = do\n  firstGroup\n  secondGroup\n  -- ...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Schema\nDESCRIPTION: Basic GraphQL schema definition that includes a simple Query type with a hello field returning a String.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello:  String\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Lambda Function in Bash\nDESCRIPTION: Bash command to run the build script that packages the Golang Lambda function for deployment to AWS Lambda. The script likely compiles the code and creates a zip file ready for upload.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/mutation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash build.sh\n```\n\n----------------------------------------\n\nTITLE: Running Reference Agent Independently\nDESCRIPTION: Command to run the reference agent on its own using Docker Compose.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sdk/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run reference-agent\n```\n\n----------------------------------------\n\nTITLE: Defining forkManagedT for Thread Management in Haskell\nDESCRIPTION: Demonstrates the use of ManagedT for managing concurrent threads, allowing spawning of threads in any underlying monad with automatic resource cleanup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\nforkManagedT\n  :: MonadBaseControl IO m\n  => m Void\n  -> ManagedT m Immortal.Thread\n```\n\n----------------------------------------\n\nTITLE: Executing a GraphQL Query in Hasura Console\nDESCRIPTION: This snippet demonstrates how to run a GraphQL query in the Hasura Console after setting up a CockroachDB data source. The actual query is not provided in the image, but it shows the interface for writing and executing GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/cloud.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n# Example GraphQL query\n# (actual query not provided in the image)\nquery {\n  # Your query here\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Cities Using GraphQL Query\nDESCRIPTION: GraphQL query example showing how to filter countries based on city names in an array field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  CountryMany(where: { cities: { _eq: \"Melbourne\" } }) {\n    id\n    name\n    cities\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query AST Structure in Rust\nDESCRIPTION: A detailed AST (Abstract Syntax Tree) representation of a GraphQL query document in Rust. Shows nested field structures with variables, spanning information, and source positions for each node.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/1111_parses_variable_inline_values.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"field\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 1,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 1,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"complex\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 1,\n                                                                            col: 9,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 1,\n                                                                            col: 15,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Object(\n                                                                            [\n                                                                                Spanning {\n                                                                                    item: KeyValue {\n                                                                                        key: Spanning {\n                                                                                            item: Name(\n                                                                                                \"a\",\n                                                                                            ),\n                                                                                            start: SourcePosition {\n                                                                                                line: 1,\n                                                                                                col: 20,\n                                                                                            },\n                                                                                            end: SourcePosition {\n                                                                                                line: 1,\n                                                                                                col: 20,\n                                                                                            },\n                                                                                        },\n                                                                                        value: Spanning {\n                                                                                            item: Object(\n                                                                                                [\n                                                                                                    Spanning {\n                                                                                                        item: KeyValue {\n                                                                                                            key: Spanning {\n                                                                                                                item: Name(\n                                                                                                                    \"b\",\n                                                                                                                ),\n                                                                                                                start: SourcePosition {\n                                                                                                                    line: 1,\n                                                                                                                    col: 25,\n                                                                                                                },\n                                                                                                                end: SourcePosition {\n                                                                                                                    line: 1,\n                                                                                                                    col: 25,\n                                                                                                                },\n                                                                                                            },\n                                                                                                            value: Spanning {\n                                                                                                                item: List(\n                                                                                                                    [\n                                                                                                                        Spanning {\n                                                                                                                            item: Variable(\n                                                                                                                                Name(\n                                                                                                                                    \"var\",\n                                                                                                                                ),\n                                                                                                                            ),\n                                                                                                                            start: SourcePosition {\n                                                                                                                                line: 1,\n                                                                                                                                col: 30,\n                                                                                                                            },\n                                                                                                                            end: SourcePosition {\n                                                                                                                                line: 1,\n                                                                                                                                col: 33,\n                                                                                                                            },\n                                                                                                                        },\n                                                                                                                    ],\n                                                                                                                ),\n                                                                                                                start: SourcePosition {\n                                                                                                                    line: 1,\n                                                                                                                    col: 28,\n                                                                                                                },\n```\n\n----------------------------------------\n\nTITLE: Basic Help Options\nDESCRIPTION: Basic help flag options for the migrate status command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_status.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for status\n```\n\n----------------------------------------\n\nTITLE: Running graphql-engine Serve Command with Port Flag in Bash\nDESCRIPTION: Shows how to use the 'serve' sub-command with the graphql-engine command, setting both the metadata database URL and the server port.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ graphql-engine --metadata-database-url \"postgres://user:password@host:port/db-name\" serve --port 3000\n```\n\n----------------------------------------\n\nTITLE: Despliegue en Heroku con un clic - Motor Hasura GraphQL\nDESCRIPTION: Botón para desplegar rápidamente el Motor Hasura GraphQL en Heroku con un add-on gratuito de Postgres.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/translations/README.mx_spanish.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku)\n```\n\n----------------------------------------\n\nTITLE: Hasura OLAP Requirements and Features List\nDESCRIPTION: Markdown list detailing core requirements and features needed for optimal Hasura integration with OLAP data warehouses, including performance optimizations, aggregation capabilities, and database-specific implementations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/guides/OLAP.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hasura + SQL (OLAP)\n\nWhat do people like doing with SQL OLAP DBs?\n\n- Use SQL to extract business insights from their data\n  - SQL syntax and power is very important\n- Since data is not frequently written and comes from another source consistency is assumed once data is in the OLAP store\n  - Physical data modeling, normalization is not important\n  - Joins are not important, data is often denormalized\n\nThe Hasura + X story:\n\n- Hasura makes OLAP stores high-concurrency and low-latency\n  - Query batching\n  - Caching\n- Hasura brings end-user authz to aggregations API (on single tables)\n- Hasura brings out the best of OLAP features using PMs\n\n**What Hasura needs to have to make Hasura + OLAP CDWs awesome:**\n\n1. All single model features\n2. Aggregations roadmap:\n   - Group By\n   - CTEs, Pivot tables\n3. Parameterized models\n4. High-concurrency by batching queries per second\n5. Low-latency by allowing pre-warm caches\n6. Solutions guide to ETL data to a row-storage engine instead of columnar\n7. Async queries for slow running queries\n\n**Clickhouse specifics over and above:**\n\n1. Support dictionaries instead of joins\n2. Support PKs and skip indices\n\n**Snowflake specifics over and above:**\n\n1. Support time based snapshots in parameterized models\n```\n\n----------------------------------------\n\nTITLE: Test Directory Structure Example\nDESCRIPTION: Example directory structure showing test organization into groups and backends.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/hspec-test-suite.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntest/\n  groups/\n    basic-queries/\n      postgres/\n      mysql/\n      sqlserver/\n    remote-joins/\n      postgres/\n      mysql/\n```\n\n----------------------------------------\n\nTITLE: Structuring Database Connection URL for ElephantSQL in Bash\nDESCRIPTION: This snippet shows the structure of the database connection URL for ElephantSQL. It includes placeholders for the username, password, and host server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/elephant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://<user-name>:<password>@<host-server>\n```\n\n----------------------------------------\n\nTITLE: Including Code Blocks in Table Cells in Docusaurus MDX\nDESCRIPTION: Demonstrates how to include code blocks within table cells using HTML syntax in Docusaurus MDX. This approach is necessary when table cells contain complex content like code snippets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th width=\"10%\">Status code</th>\n    <th width=\"10%\">Description</th>\n    <th width=\"30%\">Response Structure</th>\n  </tr>\n</thead>\n<tbody>\n<tr>\n<td><code>200</code></td>\n<td>Success</td>\n<td>\n\n```\nRequest Specific\n```\n\n</td>\n</tr>\n<tr>\n<td><code>400</code></td>\n<td>Bad Request</td>\n<td>\n\n```haskell\n{\n    \"path\"  : String,\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n<tr>\n<td><code>401</code></td>\n<td>Unauthorized</td>\n<td>\n\n```haskell\n{\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n<tr>\n<td><code>500</code></td>\n<td>Internal server error</td>\n<td>\n\n```haskell\n{\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Global Options for Hasura CLI Commands\nDESCRIPTION: Common options that can be used with any Hasura CLI command, including hasura init, to configure environment files, logging, and project directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Cloning Hasura Repository with Shallow Clone\nDESCRIPTION: Command to perform a shallow clone of the Hasura repository, which only downloads the latest commit to save space and time.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine.git --depth 1\n```\n\n----------------------------------------\n\nTITLE: Creating Note Table Structure in SQL\nDESCRIPTION: SQL table definition for the main 'note' table with auto-incrementing ID and text content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note\n\nColumns:\n\nid     Integer auto-increment\nnote   Text\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to ObjectType in GraphQL Schema\nDESCRIPTION: Example showing how to add descriptions to both the ObjectType itself and to individual fields. The descriptions appear in the generated GraphQL schema with proper formatting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3-descriptions.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"author\",\n    \"description\": \"Author object containing unique identifier and name.\",\n    \"fields\": [\n      {\n        \"name\": \"author_id\",\n        \"type\": \"CustomInt!\",\n        \"description\": \"ID to uniquely identify an author.\"\n      },\n      {\n        \"name\": \"first_name\",\n        \"type\": \"String!\"\n      },\n      {\n        \"name\": \"last_name\",\n        \"type\": \"String!\"\n      }\n    ],\n    \"globalIdFields\": [\n      \"author_id\"\n    ],\n    \"graphql\": {\n      \"typeName\": \"Author\"\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nAuthor object containing unique identifier and name.\n\"\"\"\ntype Author {\n  \"\"\"\n  ID to uniquely identify an author.\n  \"\"\"\n  author_id: CustomInt!,\n  first_name: String!,\n  last_name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Title with Frontmatter\nDESCRIPTION: Example of setting page title and sidebar label using YAML frontmatter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data validations\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes via CLI\nDESCRIPTION: Command to apply metadata changes in Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform Provider Dependencies\nDESCRIPTION: Command to update Terraform providers to the latest versions, which helps ensure compatibility when modifying the Terraform configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform get -update\n```\n\n----------------------------------------\n\nTITLE: Subscription Navigation Cards JSX Component\nDESCRIPTION: React/JSX code for rendering navigation cards that link to different subscription-related documentation sections including Postgres streaming, live queries, and client integrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"overview-gallery\">\n  <VersionedLink to=\"/subscriptions/postgres/streaming/index/\">\n    <div className=\"card\">\n      <h3>Streaming subscriptions with Postgres</h3>\n      <p>See only the newest data in realtime as it is inserted into your Postgres database.</p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/subscriptions/postgres/livequery/index/\">\n    <div className=\"card\">\n      <h3>Live queries with Postgres</h3>\n      <p>\n        Hasura live queries allow you to receive real-time updates as soon as data changes, enabling you to build\n        responsive and dynamic applications that can react instantly to user interactions.\n      </p>\n    </div>\n  </VersionedLink>\n  <VersionedLink to=\"/subscriptions/integrations/index/\">\n    <div className=\"card\">\n      <h3>Integrations with GraphQL clients</h3>\n      <p>Learn how to integrate Hasura subscriptions with your favorite GraphQL client.</p>\n    </div>\n  </VersionedLink>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Command for Metadata Export in JSON Format\nDESCRIPTION: Example of using the Hasura CLI to export metadata in JSON format and write to stdout using the new -o/--output flag.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# export metadata and write to stdout\n$ hasura metadata export -o json\n```\n\n----------------------------------------\n\nTITLE: CLI Output for Metadata Clear Operation\nDESCRIPTION: Standard output from the Hasura CLI when metadata is successfully cleared.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nINFO Metadata cleared\n```\n\n----------------------------------------\n\nTITLE: Building GraphQL Engine with profiling support\nDESCRIPTION: Command to build the GraphQL Engine with profiling support enabled using Cabal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cabal build exe:graphql-engine -f profiling --enable-profiling\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Replication Containers with Docker Compose\nDESCRIPTION: Command to start the PostgreSQL primary and replica containers using Docker Compose, with the --wait flag to ensure services are fully started before returning.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --wait\n```\n\n----------------------------------------\n\nTITLE: Generating Hoogle Database for GraphQL Engine in Bash\nDESCRIPTION: This command uses a custom script to generate a Hoogle database for the GraphQL Engine server code, storing it in the dist-newstyle directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/hoogle.sh generate\n```\n\n----------------------------------------\n\nTITLE: Manual SQL Downgrade for Hasura Catalog\nDESCRIPTION: This SQL script manually downgrades the Hasura catalog from version 48 to 47. It removes columns from the hdb_version table and updates the version number. This is a workaround for versions 2.12.1 and later where automatic downgrade is unavailable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/downgrading.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE hdb_catalog.hdb_version\n  DROP COLUMN ee_client_id,\n  DROP COLUMN ee_client_secret;\nINSERT INTO hdb_catalog.hdb_version (version, upgraded_on) VALUES (47, NOW())\n    ON CONFLICT ((version IS NOT NULL))\n    DO UPDATE SET version = EXCLUDED.version;\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links Using Root-Relative Paths in Markdown\nDESCRIPTION: Demonstrates how to create internal documentation links using root-relative file paths instead of relative paths to maintain link integrity when files are moved.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Postgres tables](/schema/postgres/tables.mdx)\n```\n\n----------------------------------------\n\nTITLE: Reference-Style Links in Markdown\nDESCRIPTION: Example of using reference-style links in Markdown for better maintainability when the same links are used multiple times in a document.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: Deleting a Cron Trigger with Hasura Metadata API\nDESCRIPTION: This snippet shows how to delete an existing cron trigger using the Hasura Metadata API. It requires specifying the name of the cron trigger to be deleted.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"delete_cron_trigger\",\n    \"args\" : {\n        \"name\": \"sample_cron\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Error Handling in Rust for GraphQL Parsing\nDESCRIPTION: Demonstrates the error structure returned when an invalid token is encountered during GraphQL parsing. The error includes the expected valid tokens (Query, Mutation, Subscription), the actual invalid token found (\"uasdf21230jkdw\"), and its position in the source (line 1, column 1).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0025_document_with_incorrect_definition_and_selection_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Keyword(\n                    Query,\n                ),\n                Keyword(\n                    Mutation,\n                ),\n                Keyword(\n                    Subscription,\n                ),\n            ],\n            found: Token(\n                Name(\n                    Name(\n                        \"uasdf21230jkdw\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 1,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body Transformation (API)\nDESCRIPTION: HTTP POST request configuration for transforming request body to application/json format using Hasura Metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_create_event_trigger\",\n  \"args\": {\n    \"name\": \"insert_trigger_on_users\",\n    \"replace\": true,\n    \"source\": \"default\",\n    \"table\": {\n      \"name\": \"users\",\n      \"schema\": \"public\"\n    },\n    \"webhook\": \"https://api.somedomain.com\",\n    \"insert\": {\n      \"columns\": \"*\"\n    },\n    \"headers\": [\n      {\n        \"name\": \"Authorization\",\n        \"value\": \"bearer xxxx\"\n      }\n    ],\n    \"request_transform\": {\n      \"template_engine\": \"Kriti\",\n      \"version\": 2,\n      \"method\": \"POST\",\n      \"url\": \"{{$base_url}}/api/v3/endpoint\",\n      \"query_params\": {\n        \"query_param\": \"xxxxx\"\n      },\n      \"body\": {\n        \"action\": \"transform\",\n        \"template\": \"{\\\"username\\\": {{$body.table.username}}}\"\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Model Definition with Filter Expression Type in OpenDD YAML\nDESCRIPTION: Revised Model definition that references a separately defined filter expression type. This update removes type mappings and filterable fields from the Model definition and adds a reference to an ObjectFilterExpressionType.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/open-dd-boolean-expression-types.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v1\ndefinition:\n  name: Authors\n  objectType: Author\n  filterExpressionType: AuthorFilterExpression\n  orderableFields: ...\n  graphql:\n    orderByExpressionType: Author_order_by\n    selectMany:\n      queryRootField: authors\n  source:\n    dataConnectorName: author\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version of mimalloc\nDESCRIPTION: Commands to build a debug version of mimalloc with internal checks and detailed statistics\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> mkdir -p out/debug\n> cd out/debug\n> cmake -DCMAKE_BUILD_TYPE=Debug ../..\n> make\n```\n\n----------------------------------------\n\nTITLE: Deleting Google Cloud Project\nDESCRIPTION: Clean up all resources by deleting the entire Google Cloud Project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects delete hasura\n```\n\n----------------------------------------\n\nTITLE: Checking Cloud SQL Proxy Logs\nDESCRIPTION: Retrieves the logs for the Cloud SQL Proxy container, useful for troubleshooting database connection issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs deployment/hasura -c cloudsql-proxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutations Capability in JSON\nDESCRIPTION: Configuration example showing how to declare mutation capabilities including insert, update, delete operations and atomicity support levels.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"mutations\": {\n      \"insert\": {\n        \"supports_nested_inserts\": true\n      },\n      \"update\": {},\n      \"delete\": {},\n      \"atomicity_support_level\": \"heterogeneous_operations\",\n      \"returning\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura Pro Add-on for CLI\nDESCRIPTION: Command to install the Hasura Pro add-on in the CLI. Requires initial installation of the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/regression-tests.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins install pro\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Command Options\nDESCRIPTION: Common command line options inherited from parent commands that apply to all plugin operations, including environment configuration, logging, and project settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Exclusion with _nilike Operator\nDESCRIPTION: Shows how to use the _nilike operator for case-insensitive exclusion of articles containing the word 'ipsum'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/text-search-operators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {title: {_nilike: \"%ipsum%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Containers for DataConnector Agent\nDESCRIPTION: Command to rebuild Docker containers to ensure the latest version of the DataConnector agent is being used when encountering general DataConnector failures.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI with Custom Path\nDESCRIPTION: Installation command for Hasura CLI with a custom installation path specified through the INSTALL_PATH variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/install-hasura-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | INSTALL_PATH=$HOME/bin bash\n```\n\n----------------------------------------\n\nTITLE: Webhook URL for Event Trigger Demo\nDESCRIPTION: This URL is used as an example endpoint for demonstrating event triggers in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhttp://httpbin.org/post\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Configuration via pg_set_table_customization\nDESCRIPTION: This snippet demonstrates customizing a table's configuration, including its identifier, custom root fields, and column names using `pg_set_table_customization`. The request sets custom names for queries, mutations, and columns, allowing for more descriptive and user-friendly GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_set_table_customization\",\n  \"args\": {\n    \"table\": \"author_details\",\n    \"source\": \"default\",\n    \"configuration\": {\n      \"identifier\": \"author\",\n      \"custom_root_fields\": {\n        \"select\": \"Authors\",\n        \"select_by_pk\": \"Author\",\n        \"select_aggregate\": \"AuthorAggregate\",\n        \"insert\": \"AddAuthors\",\n        \"insert_one\":\"AddAuthor\",\n        \"update\": \"UpdateAuthors\",\n        \"update_by_pk\": \"UpdateAuthor\",\n        \"delete\": \"DeleteAuthors\",\n        \"delete_by_pk\": \"DeleteAuthor\"\n      },\n      \"column_config\": {\n        \"id\": {\n          \"custom_name\": \"authorId\",\n          \"comment\": \"The ID of the Author\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Permissions in Hasura Metadata (YAML)\nDESCRIPTION: This YAML snippet shows how function permissions are defined within the Hasura metadata structure. It includes the function name, configuration, and permissions with roles and definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-permissions.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 3\nsources:\n  - name: default\n    functions:\n    - function: some_function\n      configuration: {}\n      permissions:\n      - role: some_role\n        definition: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI\nDESCRIPTION: Command to globally install the Netlify command-line interface tool using npm\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install netlify-cli -g\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status\nDESCRIPTION: Checks the status of the created service to get the external IP address assigned to the LoadBalancer.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get service\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Hasura CLI - MS SQL Server\nDESCRIPTION: This bash command applies the created migration to the Hasura environment, ensuring changes to the database schema are implemented.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hasura Console Development\nDESCRIPTION: Commands to clone the repository, navigate to the console directory, set up the correct Node.js version, and install dependencies for Hasura console development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-user-name>/graphql-engine\ncd graphql-engine\ncd console\nnvm use\nyarn install\nyarn nx build-server-assets console-ce\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger with Schema API (HTTP)\nDESCRIPTION: This HTTP request demonstrates how to create a trigger in Postgres by running a defined SQL function through the Hasura schema API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v2/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"run_sql\",\n  \"args\": {\n    \"source\": \"<db_name>\",\n    \"sql\": \"<above SQL>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Function Trigger URL Response\nDESCRIPTION: YAML output showing the deployed function's HTTPS trigger URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://asia-south1-hasura-test.cloudfunctions.net/trigger\n```\n\n----------------------------------------\n\nTITLE: Basic Seed Creation Command\nDESCRIPTION: Basic command syntax for creating a new seed file in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura seed create seed_name [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Hasura Auth Webhook to Heroku (Bash)\nDESCRIPTION: Commands to create a new Heroku app and deploy the auth webhook to Heroku.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-express/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku apps:create\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnail Component in Docusaurus (JSX)\nDESCRIPTION: This code snippet demonstrates how to use the Thumbnail component in Docusaurus to display an image. It includes properties for source, alt text, and width.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail\n  src=\"/img/wiki/broken-image.png\"\n  alt=\"Add check constraint\"\n  width=\"1000px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: This bash command applies the metadata changes to the Hasura project using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Single Update Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for a single author update operation, including where condition and set values to be validated.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n      \"input\": [\n          {\n              \"where\": {\"id\": {\"_eq\": 3}},\n              \"_set\": {\"name\": \"Jane\"}\n          }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Hasura CLI\nDESCRIPTION: Command to build the Hasura CLI binary which outputs cross-platform binaries to the _output directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Updating MSSQL Tools for macOS\nDESCRIPTION: Shell commands to update the mssql-tools symlink on macOS when encountering 'Inconsistent object: mssql connection error' during SQL Server tests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install microsoft/mssql-release/mssql-tools@18\nbrew unlink mssql-tools18 && brew link mssql-tools18\n```\n\n----------------------------------------\n\nTITLE: Exporting Data Connector Agent OpenAPI Spec\nDESCRIPTION: Command to export the OpenAPI specification for the Data Connector Agent API, which is useful for ensuring API compliance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/dc-api/test/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncabal run test:tests-dc-api -- export-openapi-spec\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura APIs for OpenTelemetry Integration\nDESCRIPTION: Configuration snippet to enable specific Hasura APIs while disabling the metrics API for OpenTelemetry integration. This configuration enables metadata, graphql, and config APIs while disabling the native metrics endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/observability/enterprise/README.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nHGE_ENABLED_APIS=metadata,graphql,config\n```\n\n----------------------------------------\n\nTITLE: Getting CI Vendor Information in Haskell\nDESCRIPTION: Function to identify the CI vendor name. Returns Nothing if not in a CI environment, or Just CI_UNKNOWN_VENDOR if the CI vendor cannot be determined.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ci-info/README.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ngetCI :: IO (Maybe CI)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Success Response Schema\nDESCRIPTION: Schema for successful mutation response including affected rows and returning data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-upsert-mutations.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{ data # the returned data is specified by the `mutation-response` section\n    {\n    affected_rows\n    returning { # the `returning` statement can include nested objects\n        response-field1\n        response-field2\n        ..\n    }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options in Sass Format\nDESCRIPTION: Lists the specific options available for the metadata inconsistency list command, including help flag and output format selection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help            help for list\n-o, --output string   select output format for inconsistent metadata objects(Allowed values: json)\n```\n\n----------------------------------------\n\nTITLE: Executing Hasura Version Command in Bash\nDESCRIPTION: Basic command syntax for checking the Hasura CLI version number with optional flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_version.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura version [flags]\n```\n\n----------------------------------------\n\nTITLE: Complete Benchmark Script\nDESCRIPTION: Bash script that combines data generation, schema creation, and benchmark execution into a single automated process.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"* Generating data...\"\nrunghc data-gen.hs 1000 200\n\necho \"* Creating schema and inserting data...\"\nPGPASSWORD=postgres psql -h 127.0.0.1 -p 25432 postgres -U postgres -f tables.ddl > /dev/null\nPGPASSWORD=postgres psql -h 127.0.0.1 -p 25432 postgres -U postgres -f insert_author.sql > /dev/null\nPGPASSWORD=postgres psql -h 127.0.0.1 -p 25432 postgres -U postgres -f insert_article.sql > /dev/null\n\necho \"* Benchmarking...\"\necho \"\"\necho \"-------------------------\"\necho \"** Query 1: <description>\"\necho \"-------------------------\"\nPGPASSWORD=postgres pgbench -c 1 -T 20 -n -U postgres -d postgres -p 25432 -h 127.0.0.1 -f <query_1>.sql 2> /dev/null\necho \"-------------------------\"\necho \"** Query 2: <description>\"\necho \"-------------------------\"\nPGPASSWORD=postgres pgbench -c 1 -T 20 -n -U postgres -d postgres -p 25432 -h 127.0.0.1 -f <query_2>.sql 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options in Sass Format\nDESCRIPTION: Comprehensive list of options inherited from parent commands, including authentication, endpoint configuration, and general CLI behavior settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Permissions for Message Reactions in JSON\nDESCRIPTION: This snippet shows a complex JSON structure for defining permissions on a message_reaction table. It demonstrates how permissions can become nested and cumbersome as relationships deepen in the data model.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/disable-query-and-subscription-root-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": {\"channel\": {\"workspace\": {\"members\": {\"user_id\": \"x-hasura-user-id\"}}}}}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckPermissions Data Type in Haskell\nDESCRIPTION: Defines a CheckPermissions data type and implements a Semigroup instance for combining permissions. This model is used for handling mutation and remote schema permissions inheritance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/inherited-roles-improvements.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\ndata CheckPermissions permissionType = Undefined | Defined permissionType | Inconsistent\n\ninstance (Eq permissionType) => Semigroup (CheckPermissions permissionType) where\n  Undefined <> x = x\n  x <> Undefined = x\n  Inconsistent <> x = Inconsistent\n  x <> Inconsistent = Inconsistent\n  Defined e1 <> Defined e2\n    | e1 == e2 = Defined e1\n    | otherwise = Inconsistent\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Connector Agent with Default Settings\nDESCRIPTION: JSON configuration for the Data Connector agent to expose all tables without a schema namespace. This is the default behavior if no configuration is provided.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/reference/README.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that can be used with the 'hasura actions create' command, including admin secret, endpoint configurations, and project settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Tests\nDESCRIPTION: Instructions for creating a Python virtual environment and installing dependencies for running tests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .python-venv\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource .python-venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r tests-py/requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\n(cd tests-py/remote_schemas/nodejs && npm ci)\n```\n\n----------------------------------------\n\nTITLE: Dropping Logical Model Permissions via HTTP API\nDESCRIPTION: This HTTP request removes select permissions for a logical model in Hasura. It specifies the model and role to drop permissions for, using a JSON format payload. Headers must include admin role for authorization. The JSON input defines the model source, name, and role for which permissions should be dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/logical-models.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_drop_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Formatter in Makefile\nDESCRIPTION: Command to run the code formatter according to the graphql-engine style guide. This is referenced in the README as the way to ensure code follows the project's style guidelines.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/pg-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake format\n```\n\n----------------------------------------\n\nTITLE: Custom Metadata Converter Implementation\nDESCRIPTION: Extended implementation of the Convert class adding YAML conversion and diff functionality for metadata manipulation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// customMetadataConverter.ts\nimport fs from \"fs\"\nimport { load, dump } from \"js-yaml\"\nimport { createPatch } from \"diff\"\nimport { detailedDiff } from \"deep-object-diff\"\nimport {\n  Convert as _Convert,\n  TableEntry,\n  Action,\n  CustomTypes,\n  CronTrigger,\n  HasuraMetadataV2,\n} from \"../generated/HasuraMetadataV2\"\n\ninterface DiffOutput {\n  structuralDiff: object\n  textDiff: string\n}\n\ninterface WriteDiffOpts {\n  folder: string\n  file: string\n  diffs: DiffOutput\n}\n\nexport class Convert extends _Convert {\n  public static loadYAML = load\n  public static dumpYAML = dump\n  public static diffYaml = createPatch\n  public static diffJson = detailedDiff\n\n  public static clone(obj: any) {\n    if (obj == null || typeof obj != \"object\") return obj\n    let temp = new obj.constructor()\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        temp[key] = Convert.clone(obj[key])\n      }\n    }\n    return temp\n  }\n\n  public static diff(before: object, after: object): DiffOutput {\n    const originalYaml = Convert.metadataToYaml(before)\n    const updatedYaml = Convert.metadataToYaml(after)\n    const structuralDiff = Convert.diffJson(before, after)\n    const textDiff = Convert.diffYaml(\"\", originalYaml, updatedYaml)\n    return { structuralDiff, textDiff }\n  }\n\n  public static writeDiff(opts: WriteDiffOpts) {\n    const { file, folder, diffs } = opts\n    fs.writeFileSync(`${folder}/${file}.diff`, diffs.textDiff)\n    fs.writeFileSync(\n      `${folder}/${file}.json`,\n      JSON.stringify(diffs.structuralDiff, null, 2)\n    )\n  }\n\n  /**\n   * Converts metadata objects into YAML strings\n   */\n  public static metadataToYaml(value: object): string {\n    // JSON Stringify + Parse to remove \"undefined\" key/values from YAML\n    return dump(JSON.parse(JSON.stringify(value)))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Documentation Links in Markdown\nDESCRIPTION: Navigation menu with markdown links to documentation pages for various database and data processing technologies.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/guides/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [OLTP](OLTP.md)\n- [OLAP](OLAP.md)\n- [NoSQL](NoSQL.md)\n- [Redis](Redis.md)\n- [Cassandra](Cassandra.md)\n- [Kafka](Kafka.md)\n```\n\n----------------------------------------\n\nTITLE: Webhook URL Format\nDESCRIPTION: Basic URL format template for the webhook endpoint that will handle new user events\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/new-user-welcome.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your-webhook-url>/new-user\n```\n\n----------------------------------------\n\nTITLE: Fetching Authors List from BigQuery using GraphQL\nDESCRIPTION: A GraphQL query to fetch a list of authors from a BigQuery table. The query returns basic author information including id and name fields. The response format shows the data structure with multiple author records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/simple-object-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_authors {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bigquery_authors\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Justin\"\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Beltran\"\n      },\n      {\n        \"id\": \"3\",\n        \"name\": \"Sidney\"\n      },\n      {\n        \"id\": \"4\",\n        \"name\": \"Anjela\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Configuration in YAML\nDESCRIPTION: Configuration file for the type generator specifying input language, file patterns, output directory and language-specific options\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/RFC.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nselected_input_language: Typescript\n\ninput_files:\n  JsonSchema: './src/types/**.schema.json'\n  Typescript: ['./src/types/**.ts', './src/otherfolder/**.ts']\n\noutput_directory: './generated'\n\nquicktype_config:\n  go:\n    package: hasura_metadata\n  haskell: ~\n  python:\n    python-version: '3.7'\n  schema: ~\n  typescript: ~\n```\n\n----------------------------------------\n\nTITLE: Untracking Table in Hasura\nDESCRIPTION: Example of removing a table from the GraphQL schema with cascade option to remove dependent metadata objects.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_untrack_table\",\n  \"args\": {\n    \"table\": {\n      \"schema\": \"public\",\n      \"name\": \"author\"\n    },\n    \"source\": \"default\",\n    \"cascade\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Hasura Usage Metrics Telemetry Data Sample in JSON\nDESCRIPTION: This snippet demonstrates a sample of usage metrics collected by the Enterprise Edition server. It includes various counters and gauges for different Hasura operations such as requests, connections, and data transfer.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{  \"license_jti\": \"e86e5a54-ad3b-49e6-98ca-ab34b0a50f8f\",\n  \"client_id\": null,\n  \"metadata_db_uid\": \"4492082b-a2d6-4d4c-81e5-f481b2aea669\",\n  \"instance_uid\": \"f6d67a85-4a4f-4897-a767-89a86253b59c\",\n  \"sample_uid\": \"2a18421a-baff-466b-bf34-b7fd6a5c76c8\",\n  \"hasura_version\": \"12345\",\n  \"metrics\": {\n    \"hasura_action_request_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_action_response_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_active_subscriptions\": [ { \"value\": 0 } ],\n    \"hasura_cron_events_invocation_total\": [{\"status\": \"success\",\"value\": 0}],\n    \"hasura_event_invocations_total\": [{\"status\": \"success\",\"value\": 0}],\n    \"hasura_event_trigger_http_workers\": [ { \"value\": 0 } ],\n    \"hasura_events_fetched_per_batch\": [ { \"value\": 0 } ],\n    \"hasura_event_trigger_request_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_event_trigger_response_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_graphql_requests_total\": [{\"operation_type\": \"query\",\"response_status\": \"failed\",\"value\": 0}],\n    \"hasura_http_connections\": [ { \"value\": 0 } ],\n    \"hasura_http_request_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_http_response_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_metadata_resource_version\": [ { \"value\": 1 } ],\n    \"hasura_postgres_connections\": [{\"role\": \"primary\",\"source_name\": \"default\",\"value\": 1}],\n    \"hasura_scheduled_trigger_request_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_scheduled_trigger_response_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_websocket_connections\": [ { \"value\": 0 } ],\n    \"hasura_websocket_messages_received_bytes_total\": [ { \"value\": 0 } ],\n    \"hasura_websocket_messages_sent_bytes_total\": [ { \"value\": 0 } ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Hasura Seed Command in SASS\nDESCRIPTION: This code snippet shows the available options for the 'hasura seed' command. It includes options for specifying the admin secret, certificate authority, database name, and other configuration settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --database-name string           database on which operation should be applied\n    --disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for seed\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n```\n\n----------------------------------------\n\nTITLE: Start Flask Server (Python)\nDESCRIPTION: This code block starts the Flask development server on the specified port. The `debug=True` option enables debugging mode, which provides more detailed error messages and automatic reloading of the server when code changes are detected.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Start the server on the specified port\nif __name__ == \"__main__\":\n  app.run(debug=True, port=PORT)\n```\n\n----------------------------------------\n\nTITLE: Inserting Author with Array Field using GraphQL\nDESCRIPTION: This mutation inserts a new author with a text array emails field. It shows how to handle array data types in GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_author {\n  insert_author (\n    objects: [\n      {\n        name: \"Ash\",\n        emails: [\"ash@ash.com\", \"ash123@ash.com\"]\n      }\n    ]\n  ) {\n    affected_rows\n    returning {\n      id\n      name\n      emails\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Heading ID Assignment in Markdown\nDESCRIPTION: Shows how to assign custom IDs to headings using the kebab-case format\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## Step 1: Create a Hasura Cloud project {#create-hasura-project-aws-rds-aurora}\n\nOn the Hasura Cloud dashboard, create a new project:\n```\n\n----------------------------------------\n\nTITLE: Tracking Multiple Tables in Hasura (YAML)\nDESCRIPTION: This YAML snippet illustrates how to track multiple tables in the metadata directory by listing each table under the 'tables.yaml' configuration. This approach allows for bulk tracking of all desired tables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/using-existing-database.mdx#2025-04-17_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n- table:\n    schema: dbo\n    name: <table-name-1>\n- table:\n    schema: dbo\n    name: <table-name-2>\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Schema Relationship using CLI\nDESCRIPTION: YAML configuration for adding a remote relationship from a database table to a remote schema in Hasura. The example shows how to configure a relationship named 'user' from an 'order' table to a 'user-remote-schema'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/remote-relationships/remote-schema-relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: public\n    name: order\n  remote_relationships:\n    - name: user\n      definition:\n        remote_field:\n          user:\n            arguments:\n              id: $user_id\n        hasura_fields:\n          - user_id\n        remote_schema: user-remote-schema\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter Invoice objects. Includes logic operators, scalar field comparisons, and nested object/array relationship filters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_bool_exp {\n  # Logic operators\n  # WARN: Potential name conflicts\n  _and: [Invoice_bool_exp!]\n  _or: [Invoice_bool_exp!]\n  _not: Invoice_bool_exp\n\n  # Scalar fields\n  InvoiceId: Int_bool_exp\n  InvoiceDate: Date_bool_exp\n  CustomerId: Int_bool_exp\n  Total: Decimal_bool_exp\n\n  # Nested objects/object relationships\n  BillingAddress: Address_bool_exp\n  Customer: Customer_bool_exp\n\n  # Nested array of objects/array relationships\n  InvoiceLines: InvoiceLine_bool_exp # Exists() array predicate\n  # Configurable in OpenDD Relationship.definition.graphql.aggregateFieldName\n  InvoiceLines_aggregate: InvoiceLine_aggregate_predicate_exp # WARN: Potential name conflict with another relationship/field\n  Discounts: Discount_bool_exp\n  # Configurable in OpenDD ObjectType.definition.fields[].graphql.aggregateFieldName\n  Discounts_aggregate: Discount_aggregate_predicate_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Grouping Key with @oneOf Directive in GraphQL\nDESCRIPTION: This input type defines options for grouping Customer data by scalar fields, nested objects, array relationships, or arrays of scalars. It supports complex grouping operations across multiple related entities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_87\n\nLANGUAGE: graphql\nCODE:\n```\ninput Customer_grouping_key @oneOf {\n  # WARN: Potential name clash here\n  _scalar_field: Customer_scalar_fields\n\n  # Nested object\n  Address: Address_grouping_key\n\n  # Array relationships\n  Invoices_aggregate: Invoice_aggregate_select\n\n  # Array of scalars\n  Emails_aggregate: String_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Managed Services\nDESCRIPTION: YAML configuration showing how to configure environment variables for connecting to external PostgreSQL and Redis instances in a production environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres\n    HASURA_GRAPHQL_REDIS_URL: 'redis://redis:6379'\n    HASURA_GRAPHQL_RATE_LIMIT_REDIS_URL: 'redis://redis:6379'\n```\n\n----------------------------------------\n\nTITLE: Installing CLI Dependencies with Make\nDESCRIPTION: Command to install all dependencies required for CLI development using the Make system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake deps\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Response in JSON\nDESCRIPTION: Sample JSON response from the Lambda function after successfully inserting a new revision record. The response includes the number of affected rows and returns the ID of the newly created revision.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/mutation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"insert_note_revision\": {\n            \"affected_rows\": 1,\n            \"returning\": [\n                {\n                    \"id\": 2\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Order By in Hasura GraphQL Engine Queries\nDESCRIPTION: JSON structure that defines ordering logic for query results. It shows how to specify ordering elements with target columns and direction, demonstrating ordering by last_name ascending and first_name descending.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relations\": {},\n  \"elements\": [\n    {\n      \"target_path\": [],\n      \"target\": {\n        \"type\": \"column\",\n        \"column\": \"last_name\"\n      },\n      \"order_direction\": \"asc\"\n    },\n    {\n      \"target_path\": [],\n      \"target\": {\n        \"type\": \"column\",\n        \"column\": \"first_name\"\n      },\n      \"order_direction\": \"desc\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional query example with variable in GraphQL\nDESCRIPTION: An example of a conditional query using a variable that relies on the handling of null values in boolean expressions. This pattern was used by some users in v1.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nquery($isVerified: Boolean) {\n  users(where: {_isVerified: {_eq: $isVerified}}) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Function that Returns a Result Type in Rust\nDESCRIPTION: Shows the basic syntax for a function that returns a Result<T, E> in Rust, which is the primary mechanism for exception handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn my_function() -> Result<T, E> {}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ngrok for Tunneling - Bash\nDESCRIPTION: This command is used to set up ngrok, allowing local development of the webhook endpoint by exposing it to the internet.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/abandoned-cart.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 4000\n```\n\n----------------------------------------\n\nTITLE: Installing Required System Packages on Ubuntu\nDESCRIPTION: Installation of necessary system packages including CPU power management tools, PostgreSQL client, Docker, and other utilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/README_AMI.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt dist-upgrade\nsudo apt install cpupower linux-tools-common linux-tools-aws postgresql-client-common git\nsudo apt install docker-ce docker-ce-cli containerd.io\nsudo groupadd docker && sudo usermod -aG docker ${USER}\nsudo apt install fio linux-tools-aws linux-tools-common\nsudo apt install jq\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies for Webhook\nDESCRIPTION: Commands to initialize a Node.js project and install the required dependencies (openai and express) for the webhook implementation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install openai express\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Local Server\nDESCRIPTION: Commands for installing required npm packages and starting the local development server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd graphql\n$ npm i --no-save apollo-server express\n$ node localDev.js\n\nOutput:\n\nServer ready at http://localhost:4000/\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options\nDESCRIPTION: Global options inherited from parent commands that can be used with seed creation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Inherited Options\nDESCRIPTION: Global options inherited from parent commands including authentication, endpoint configuration, and general CLI behavior settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_use-codegen.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for hasura migrate Command in Sass\nDESCRIPTION: This code snippet shows the available options for the 'hasura migrate' command. It includes options for specifying admin secret, certificate authority, database name, and other configuration settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --database-name string           database on which operation should be applied\n    --disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n-h, --help                           help for migrate\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n```\n\n----------------------------------------\n\nTITLE: Makefile Command for Formatting\nDESCRIPTION: Command to run the code formatter on the project files\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/graphql-parser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake format\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Node Structure in Rust\nDESCRIPTION: Detailed AST node structure showing field definitions, source positions, and nested elements for a GraphQL query parser. Demonstrates precise source location tracking for each parsed element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0020_operation_type_definition.txt#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nitem: Name(\n    \"deprecated\",\n),\nstart: SourcePosition {\n    line: 5,\n    col: 25,\n},\nend: SourcePosition {\n    line: 5,\n    col: 34,\n},\narguments: None,\nselection_set: None,\ndirectives: [],\nname: Spanning {\n    item: Name(\n        \"lion\",\n    ),\n    start: SourcePosition {\n        line: 8,\n        col: 5,\n    },\n    end: SourcePosition {\n        line: 8,\n        col: 8,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Nested Arrays of Objects in GraphQL\nDESCRIPTION: GraphQL query demonstrating aggregation over nested arrays of objects, specifically the Discounts field of the Invoice collection.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice {\n    # All invoices\n    Discounts_aggregate {\n      # Aggregate each Invoice's Discounts nested array\n      Percentage {\n        _max # The highest percentage discount in each invoice\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting PostgreSQL Replica Port\nDESCRIPTION: Command to retrieve the exposed port of the PostgreSQL replica server that has been mapped from the container's port 5432.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose port postgres-replica 5432\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Hasura GraphQL Engine Documentation - JavaScript\nDESCRIPTION: This snippet imports various React components and static assets necessary for the documentation layout of the Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport ArrowRight from '@site/static/icons/arrow_right.svg';\nimport Actions from '@site/static/icons/features/actions.svg';\nimport Basics from '@site/static/icons/features/basics.svg';\nimport GraphQL from '@site/static/icons/features/graphql.svg';\nimport BusinessLogic from '@site/static/icons/features/business_logic.svg';\nimport Auth from '@site/static/icons/features/auth.svg';\nimport Enterprise from '@site/static/icons/features/enterprise.svg';\nimport Deployments from '@site/static/icons/features/deployment.svg';\nimport Learn from '@site/static/icons/features/learn.svg';\nimport Cloud from '@site/static/icons/features/cloud.svg';\nimport Observability from '@site/static/icons/features/observability.svg';\nimport Caching from '@site/static/icons/features/caching.svg';\nimport Remote from '@site/static/icons/features/remote_schema.svg';\nimport Security from '@site/static/icons/features/security.svg';\nimport Testing from '@site/static/icons/features/testing.svg';\n```\n\n----------------------------------------\n\nTITLE: Updating API Types Dependencies\nDESCRIPTION: Command to update all dependencies to use the new version of dc-api-types\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> make update-api-types-deps\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Commands for Dynamic Asset Loader\nDESCRIPTION: CLI commands for building the nx-unplugin-dynamic-asset-loader library and running its Jest-based unit tests using Nx\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/nx/unplugin-dynamic-asset-loader/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build nx-unplugin-dynamic-asset-loader\nnx test nx-unplugin-dynamic-asset-loader\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Table Filtering in Hasura GraphQL Engine\nDESCRIPTION: This JSON snippet configures a Customer and Employee table in Hasura GraphQL Engine, setting up a select permission rule on Customer to only show customers from the same country as their SupportRep Employee for users in the 'user' role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"replace_metadata\",\n  \"args\": {\n    \"metadata\": {\n      \"version\": 3,\n      \"backend_configs\": {\n        \"dataconnector\": {\n          \"reference\": {\n            \"uri\": \"http://localhost:8100/\"\n          }\n        }\n      },\n      \"sources\": [\n        {\n          \"name\": \"chinook\",\n          \"kind\": \"reference\",\n          \"tables\": [\n            {\n              \"table\": [\"Customer\"],\n              \"object_relationships\": [\n                {\n                  \"name\": \"SupportRep\",\n                  \"using\": {\n                    \"manual_configuration\": {\n                      \"remote_table\": [\"Employee\"],\n                      \"column_mapping\": {\n                        \"SupportRepId\": \"EmployeeId\"\n                      }\n                    }\n                  }\n                }\n              ],\n              \"select_permissions\": [\n                {\n                  \"role\": \"user\",\n                  \"permission\": {\n                    \"columns\": [\n                      \"CustomerId\",\n                      \"FirstName\",\n                      \"LastName\",\n                      \"Country\",\n                      \"SupportRepId\"\n                    ],\n                    \"filter\": {\n                      \"SupportRep\": {\n                        \"Country\": {\n                          \"_ceq\": [\"$\",\"Country\"]\n                        }\n                      }\n                    }\n                  }\n                }\n              ]\n            },\n            {\n              \"table\": [\"Employee\"]\n            }\n          ],\n          \"configuration\": {}\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Program with mimalloc\nDESCRIPTION: Example of compiling a program with mimalloc library linkage\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> gcc -o myprogram -lmimalloc myfile.c\n```\n\n----------------------------------------\n\nTITLE: Sample Response from the Version API Endpoint in HTTP\nDESCRIPTION: A sample HTTP response from the Version API endpoint showing a successful status code and the JSON payload that includes server_type and version. The response indicates the server is a community edition (ce) running version v1.0.0-alpha01.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/version.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"server_type\": \"ce\",\n  \"version\": \"v1.0.0-alpha01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Field Name Customization in Haskell\nDESCRIPTION: This Haskell code snippet defines types and functions for root field name customization. It introduces MkRootFieldName and withRootFieldNameCustomization to allow passing customization functions for root field names.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/source-customization.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ntype MkRootFieldName = Name -> Name\n\nwithRootFieldNameCustomization :: forall m r a. (MonadReader r m, Has MkRootFieldName r) => MkRootFieldName -> m a -> m a\n```\n\n----------------------------------------\n\nTITLE: Theoretical Dependency Cycle Example in Haskell\nDESCRIPTION: Demonstrates a theoretical implementation that would cause a dependency cycle. It shows how existential types with typeclass constraints could be used to simplify dispatch, but explains why this approach isn't feasible in the current architecture.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\ndata BackendSourceInfo = forall b. BackendSchema b => BackendSourceInfo (SourceInfo b)\n\nbuildSource\n  :: (BackendSchema b, MonadSchema m)\n  => SourceInfo b\n  -> m SomeExistentialSchemaInfo\nbuildSource = ...\n\nbuildAllSources\n  :: MonadSchema m\n  => SourceCache\n  -> m [SomeExistentialSehemaInfo]\nbuildAllSources cache = for cache $ \\(BackendSourceInfo sourceInfo) -> buildSource sourceInfo\n```\n\n----------------------------------------\n\nTITLE: Example Query Response\nDESCRIPTION: JSON response showing the formatted output from the article excerpt query\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"article_with_excerpt\": [\n      {\n        \"id\": 3,\n        \"title\": \"Did you know\",\n        \"date\": \"2023-03-03\",\n        \"excerpt\": \"Ratio quidem vestra ...\"\n      },\n      {\n        \"id\": 4,\n        \"title\": \"They just cannot\",\n        \"date\": \"2023-04-04\",\n        \"excerpt\": \"Itaque hic ipse iam ...\"\n      },\n      {\n        \"id\": 5,\n        \"title\": \"What on earth\",\n        \"date\": \"2023-05-05\",\n        \"excerpt\": \"Venit ad extremum; A...\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service URLs in Markdown\nDESCRIPTION: Example URLs for accessing the GraphQL Engine interface and OpenAPI schema documentation when running the Data Connector agent locally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8300\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Typeclass in Haskell\nDESCRIPTION: Defines the Backend typeclass with associated types for TableName and ColumnType, and provides an instance for Postgres. This typeclass is used to generalize metadata types and IR for different backends.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/multiple-backends-architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nclass ( Show (TableName  b), Eq (TableName  b)\n      , Show (ColumnType b), Eq (ColumnType b)\n      ) => Backend (b :: BackendType) where\n  type TableName  b\n  type ColumnType b\n\ninstance Backend 'Postgres where\n  type TableName  'Postgres = PGTableName\n  type ColumnType 'Postgres = PGColumnType\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with Docker Compose\nDESCRIPTION: Command to start Hasura along with a Postgres database using Docker Compose. This sets up the necessary containers for Hasura to function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/bigquery/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Logging into Heroku CLI\nDESCRIPTION: This command logs the user into their Heroku account using the Heroku CLI. It's a prerequisite for creating and deploying the GraphQL API app to Heroku.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/auth0-wrapper/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nheroku login\n```\n\n----------------------------------------\n\nTITLE: SSH Access to AlloyDB Bastion Host for Troubleshooting\nDESCRIPTION: Commands to access the bastion host via SSH and view the AlloyDB auth proxy logs for debugging connection issues. Requires enabling SSH in the configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ gcloud compute ssh <name>-testing-alloydb-bastion\nbastion$ cat /alloydb-auth-proxy.log\n```\n\n----------------------------------------\n\nTITLE: Improved Action Error Response Format\nDESCRIPTION: Example of the improved internal error field format for Action errors in v1.2.0-beta5. This shows the detailed structure with request, response, and error information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"extensions\": {\n        \"internal\": {\n          \"error\": \"unexpected response\",\n          \"response\": {\n            \"status\": 200,\n            \"body\": {\n              \"age\": 25,\n              \"name\": \"Alice\",\n              \"id\": \"some-id\"\n            },\n            \"headers\": [\n              {\n                \"value\": \"application/json\",\n                \"name\": \"Content-Type\"\n              },\n              {\n                \"value\": \"abcd\",\n                \"name\": \"Set-Cookie\"\n              }\n            ]\n          },\n          \"request\": {\n            \"body\": {\n              \"session_variables\": {\n                \"x-hasura-role\": \"admin\"\n              },\n              \"input\": {\n                \"arg\": {\n                  \"age\": 25,\n                  \"name\": \"Alice\",\n                  \"id\": \"some-id\"\n                }\n              },\n              \"action\": {\n                \"name\": \"mirror\"\n              }\n            },\n            \"url\": \"http://127.0.0.1:5593/mirror-action\",\n            \"headers\": []\n          }\n        },\n        \"path\": \"$\",\n        \"code\": \"unexpected\"\n      },\n      \"message\": \"unexpected fields in webhook response: age\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure Example\nDESCRIPTION: Example of a markdown frontmatter showing metadata and formatting for a documentation page in the Hasura project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/general.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: General\ndescription: General documentation style\nsidebar_position: 1\nkeywords:\n  - hasura\n  - style\n  - general\nslug: general\n---\n```\n\n----------------------------------------\n\nTITLE: Actions YAML Schema Definition\nDESCRIPTION: JSON schema for Hasura actions configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"actions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/Action\"\n      }\n    },\n    \"custom_types\": {\n      \"type\": \"object\",\n      \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/CustomTypes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example in YAML\nDESCRIPTION: Sample GraphQL query structure in YAML format for testing purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nquery: |\n  query {\n    author {\n      id\n      name\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Boolean Predicate Usage in Haskell\nDESCRIPTION: An example showing a less preferred way of handling sum types using boolean predicates. This approach is less robust to future changes in the sum type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_7\n\nLANGUAGE: haskell\nCODE:\n```\n-- bad\nisPaused :: LiveQueryState -> Bool\nisPaused LQPaused = True\nisPaused _        = False\n\n...\n\nunless (isPaused queryState) do\n  handleActiveQuery query\n```\n\n----------------------------------------\n\nTITLE: Timestamp Formatting Example\nDESCRIPTION: This code snippet provides an example of the ISO 8601 format used for timestamps in Hasura. It illustrates how to enter the year, month, day, hour, minute, second, and millisecond for setting a specific date. The example provided sets the date to `2023-10-10`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/user-reengagement-email.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n\"YYYY-MM-DDTHH:MM:SS.SSSZ\"\n```\n\n----------------------------------------\n\nTITLE: Response Transform Function in TypeScript\nDESCRIPTION: TypeScript function for transforming author data in the API response\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function author_name(author?: AuthorType): string {\n  if (!author) {\n\treturn \"Invalid author\";\n  }\n  return author.name;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hasura Metadata Types in TypeScript\nDESCRIPTION: Demonstrates how to import the root type MetadataV3 from the @hasura/metadata-api package for working with Hasura GraphQL Engine metadata exports and imports.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/metadata-api-types/typescript/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MetadataV3 } from '@hasura/metadata-api'\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Aggregate Fields\nDESCRIPTION: Specifies a GraphQL type for decimal field aggregations. Includes average, sum, max, min, count, and count distinct operations applicable to decimal fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_67\n\nLANGUAGE: graphql\nCODE:\n```\ntype Decimal_aggregate_fields {\n  _avg: Decimal!\n  _sum: Decimal!\n  _max: Decimal!\n  _min: Decimal!\n  _count: Int!\n  _count_distinct: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: Command to verify that the Hasura and CockroachDB containers are running.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Running Tests for OpenAPI to GraphQL Library\nDESCRIPTION: Command to execute unit tests for the library using Jest test runner through Nx.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnx test open-api-to-graphql\n```\n\n----------------------------------------\n\nTITLE: Password Generation Script for Prometheus\nDESCRIPTION: Python script to generate a bcrypt-hashed password for Prometheus web interface authentication. The script prompts for a password and outputs the hashed value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport getpass\nimport bcrypt\n\npassword = getpass.getpass(\"password: \")\nhashed_password = bcrypt.hashpw(password.encode(\"utf-8\"), bcrypt.gensalt())\nprint(hashed_password.decode())\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Hasura Console Migration\nDESCRIPTION: Shows the new folder structure for the Hasura console project after migration, including apps and libraries for both Community Edition (CE) and Enterprise Edition (EE).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/from-previous-console.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\napps\n  console-ce => empty shell (for now) that contains the globals css for the ce console\n  console-ce-e2e => cypress tests for the ce console\n  console-ee => empty shell (for now) that contains the globals css for the ee console\nlibs\n  console\n    legacy-ce => main library for the ce console\n      src\n        lib => 1:1 mapping from the old /console/src folder\n        exports => 1:1 mapping from the old /console/exports folder\n       index.ts => entrypoint for the library\n    legace-ee => main library for the ee console\n      src\n      \tlib => 1:1 mapping from the old /pro/console folder\n        index.ts => entrypoint for the library\n```\n\n----------------------------------------\n\nTITLE: Initializing and Deploying AlloyDB with Terraform\nDESCRIPTION: Commands to initialize Terraform and deploy an AlloyDB instance with a password parameter. The password should be strong for security reasons.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform init\n$ terraform apply -var password='<a strong password>'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Structure for Notes\nDESCRIPTION: Defines a simple database table structure for notes with an integer ID and text content. This table will be used with Hasura GraphQL and monitored for changes via the Lambda trigger.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs6/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A simple list of Python packages required for the project. It includes boto3 for AWS SDK functionality, fabric for SSH deployment and server management, and patchwork which extends fabric's capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/requirements-top-level.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nboto3\nfabric\npatchwork\n```\n\n----------------------------------------\n\nTITLE: Test Data JSON Example\nDESCRIPTION: Sample JSON test data that matches the TypeScript interface structure\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John\",\n  \"age\": 30\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of GraphQL Query with Admin Secret\nDESCRIPTION: This JSON output shows the full user record returned by a GraphQL query when the admin secret is enabled. It lists all user entries in the users table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/quickstart.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n        \"email\": \"seandemo@hasura.io\",\n        \"name\": \"Sean\"\n      },\n      {\n        \"id\": \"82001336-65b7-11ed-b905-7fa26a16d198\",\n        \"email\": \"robdemo@hasura.io\",\n        \"name\": \"Rob\"\n      },\n      {\n        \"id\": \"86d5fba0-65b7-11ed-b906-afb985970e2e\",\n        \"email\": \"mariondemo@hasura.io\",\n        \"name\": \"Marion\"\n      },\n      {\n        \"id\": \"8dea1160-65b7-11ed-b907-e3c5123cb650\",\n        \"email\": \"sandeepdemo@hasura.io\",\n        \"name\": \"Sandeep\"\n      },\n      {\n        \"id\": \"9bd9d300-65b7-11ed-b908-571fef22d2ba\",\n        \"email\": \"abbydemo@hasura.io\",\n        \"name\": \"Abby\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Project for PostgreSQL Vectorization\nDESCRIPTION: Creates a new Python project directory and installs required dependencies for connecting to PostgreSQL and Weaviate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir vectorize-postgresql-data && cd vectorize-postgresql-data && touch index.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install psycopg2 weaviate-client\n```\n\n----------------------------------------\n\nTITLE: Local Development Server Setup\nDESCRIPTION: Commands to install dependencies and start the local development server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/aws-lambda/nodejs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --no-save apollo-server express\n$ node localDev.js\n\nOutput:\n\nServer ready at http://localhost:4000/\n```\n\n----------------------------------------\n\nTITLE: Creating an Info Note Admonition with Proper Formatting in Markdown\nDESCRIPTION: Illustrates the correct way to format an info note admonition, emphasizing the importance of empty lines at the start and end to avoid formatting issues with Prettier.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n+\n:::info Note\n+\nMake sure to place the note/admonition in a place where the user will see it at the appropriate time.\n+\n:::\n+\n```\n\n----------------------------------------\n\nTITLE: Cron Trigger Schema Definition\nDESCRIPTION: JSON schema for Hasura cron trigger configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/CronTrigger\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Conjunction Filtering in GraphQL\nDESCRIPTION: This JSON snippet demonstrates how to define a conjunction of subexpressions where a person's first and last names are both checked against specified values, using binary comparison operators.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"and\",\n  \"expressions\": [\n    {\n      \"type\": \"binary_op\",\n      \"operator\": \"equal\",\n      \"column\": {\n        \"name\": \"first_name\",\n        \"column_type\": \"string\"\n      },\n      \"value\": {\n        \"type\": \"scalar\",\n        \"value\": \"John\",\n        \"value_type\": \"string\"\n      }\n    },\n    {\n      \"type\": \"binary_op\",\n      \"operator\": \"equal\",\n      \"column\": {\n        \"name\": \"last_name\",\n        \"column_type\": \"string\"\n      },\n      \"value\": {\n        \"type\": \"scalar\",\n        \"value\": \"John\",\n        \"value_type\": \"string\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Schema Definition\nDESCRIPTION: SQL code defining an article table and search function that demonstrates the use case for custom function names\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/function-root-field-customisation.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table article (\n  id serial primary key,\n  title text not null,\n  content text not null\n);\ncreate function search_articles(key text)\nreturns setof articles AS $$\n  select * from article\n  where\n    title ilike ('%' || key || '%')\n    OR content ilike ('%' || key || '%')\n$$ language sql stable;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Bool Usage in Haskell Data Types\nDESCRIPTION: An example showing a less preferred way of representing state in a data type using a Bool. This approach lacks clarity and is less extensible.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\n-- bad\ndata LiveQuery = LiveQuery\n  { ...\n  , lqIsPaused :: !Bool\n  , ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of MonadWarnings in Metadata API Handlers\nDESCRIPTION: Code snippet showing how to use the MonadWarnings interface in a Hasura metadata API handler. It demonstrates creating and adding a warning using the warn method.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/warning-in-replace-metadata-API.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\nimport Hasura.RQL.DDL.Warnings\n\nsomeMetadataAPIHandler :: args -> m EncJSON\nsomeMetadataAPIHandler args = successMsgWithWarnings $ do\n  -- do some stuff\n  let warning = MetadataWarning (MOSource defaultSource) \"some warning message\"\n  -- we use the `warn` method to add a warning\n  warn $ warning\n  -- do some more stuff\n  pure ()\n```\n\n----------------------------------------\n\nTITLE: WebSocket Operation Stop Log in Hasura\nDESCRIPTION: Example of a WebSocket log for operation stop, showing the termination of a subscription operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2019-06-10T11:01:40.939+0530\",\n  \"level\": \"info\",\n  \"type\": \"websocket-log\",\n  \"detail\": {\n    \"event\": {\n      \"type\": \"operation\",\n      \"detail\": {\n        \"request_id\": null,\n        \"operation_id\": \"1\",\n        \"query\": null,\n        \"operation_type\": {\n          \"type\": \"stopped\"\n        },\n        \"operation_name\": null\n      }\n    },\n    \"connection_info\": {\n      \"websocket_id\": \"7f782190-fd58-4305-a83f-8e17177b204e\",\n      \"jwt_expiry\": null,\n      \"msg\": null\n    },\n    \"user_vars\": {\n      \"x-hasura-role\": \"admin\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Expression Variable Examples\nDESCRIPTION: JSON examples showing different boolean expression inputs for subscription queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/postgres/livequery/execution.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": {\n    \"_eq\": 2\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\n    \"_eq\": \"ABC\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Action Types in GraphQL Schema\nDESCRIPTION: Example of defining nested response types for actions, allowing complex return types instead of generic jsonb outputs. This enables more precise type information for the API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n id: bigint!\n name: String\n}\ntype ElasticOutput {\n products: [Product!]!\n aggregations: jsonb\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Untagged With Kind Enum\nDESCRIPTION: Example JSON object that would be parsed into UntaggedEnum::KindTwo(KindEnumTwo::VariantFour(FourStruct)) using the untagged with kind approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"VariantFour\",\n  \"fieldFour\": \"four\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Retrieving Non-Deleted Todos\nDESCRIPTION: This GraphQL query retrieves all todos from the database, specifically only those that are not soft deleted. It is used to demonstrate the application of permissions in conjunction with the soft delete pattern.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/data-modeling/soft-deletes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  todos {\n    id\n    name\n    deleted_at\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GRUB Parameters for CPU Performance\nDESCRIPTION: GRUB configuration to set CPU idle states and polling for consistent performance testing on EC2.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/benchmarks/README_AMI.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# https://engineering.mongodb.com/post/reducing-variability-in-performance-tests-on-ec2-setup-and-key-results\nGRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash intel_idle.max_cstate=1 idle=poll\"\n```\n\n----------------------------------------\n\nTITLE: Update Product Description in Hasura (Python)\nDESCRIPTION: This function updates the product description in Hasura using a GraphQL mutation. It sends a POST request to the Hasura GraphQL endpoint with the product ID and the improved description. It requires the `requests` library and the `HASURA_GRAPHQL_ENDPOINT` and `HASURA_ADMIN_SECRET` environment variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def update_product_description(product_id, improved_description):\n  \"\"\"\n  Function to update the product description in Hasura.\n\n  Args:\n      product_id (str): The unique ID of the product.\n      improved_description (str): The improved product description.\n\n  Returns:\n      str: The ID of the updated product or None if an error occurred.\n  \"\"\"\n  headers = {\n    \"Content-Type\": \"application/json\",\n    \"x-hasura-admin-secret\": HASURA_ADMIN_SECRET,\n  }\n\n  #Ideally store your querys in another file where you can re-use them\n  body = {\n      \"query\": \"\"\"\n          mutation UpdateProduct($id: uuid!, $description: String) {\n              update_products_by_pk(pk_columns: {id: $id}, _set: {description: $description}) {\n              id\n              description\n              }\n          }\n      \"\"\",\n      \"variables\": {\n          \"id\": product_id,\n          \"description\": improved_description\n      }\n  }\n\n  try:\n      # Send a POST request to Hasura's GraphQL endpoint to update the product description\n      response = requests.post(HASURA_GRAPHQL_ENDPOINT,json=body, headers=headers)\n\n      response.raise_for_status()\n\n      return response.json()[\"data\"][\"update_products_by_pk\"][\"id\"]\n\n  except Exception as e:\n      print(f\"An error occurred while updating description: {e}\")\n      return None\n```\n\n----------------------------------------\n\nTITLE: Creating 'profile' Table in Hasura\nDESCRIPTION: This snippet defines the structure of the 'profile' table to be created in Hasura. It includes columns for id, name, address, latitude, and longitude.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/python/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: profile\n\nColumns:\n\nid: Integer auto-increment\nname: Text\naddress: Text\nlat: Numeric, Nullable\nlng: Numeric, Nullable\n```\n\n----------------------------------------\n\nTITLE: Hasura Actions Codegen Usage Examples\nDESCRIPTION: Examples showing different ways to use the codegen command, including specifying frameworks, output directories, and using starter kits.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_actions_use-codegen.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Use codegen by providing framework\nhasura actions use-codegen --framework nodejs-express\n\n# Use codegen from framework list\nhasura actions use-codegen\n\n# Set output directory\nhasura actions use-codegen --output-dir codegen\n\n# Use a codegen with a starter kit\nhasura actions use-codegen --with-starter-kit true\n```\n\n----------------------------------------\n\nTITLE: Track Logical Model via Metadata API\nDESCRIPTION: This HTTP request demonstrates how to track a logical model using Hasura's metadata API. The request includes the logical model's name, fields, types, and nullability settings, which are all defined in the request body.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_logical_model\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<name>\",\n    \"fields\": [\n      {\n        \"name\": \"<field name>\",\n        \"type\": \"<PostgreSQL field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      },\n      ...\n    ]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku App for GraphQL API\nDESCRIPTION: This command creates a new Heroku app for the GraphQL API. It should be executed in the directory containing the Auth0 wrapper code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/auth0-wrapper/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nheroku create\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Type Invariant Enforcement in Haskell\nDESCRIPTION: An example showing good practices for enforcing type invariants. The invariant is enforced by the type system rather than being described in a comment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_15\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nimport Data.Text.Conversions (Base64)\nnewtype AuthenticationToken\n  = AuthenticationToken\n  { unAuthenticationToken :: Base64 ByteString\n  }\n```\n\n----------------------------------------\n\nTITLE: Authenticating Docker with GitHub Container Registry\nDESCRIPTION: Command to log in to the GitHub Container Registry using Docker, required for running tests. Requires a GitHub username and personal access token with appropriate permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker login -u <username> -p <token> ghcr.io\n```\n\n----------------------------------------\n\nTITLE: Metadata API Request Types Table in Markdown\nDESCRIPTION: A comprehensive table listing all available metadata API request types, their arguments, versions and descriptions. Includes bulk operations, Postgres source management, table tracking, and function management operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `type` | `args` | `version` | Synopsis |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| **bulk** | [Query](#metadata-query) array | 1 | Execute multiple operations in a single query |\n| **bulk_atomic** | [Query](#metadata-query) array | 1 | Execute multiple operations in a single **transaction**. Currently only supports logical model and native query tracking/untracking operations. |\n| **concurrent_bulk** | [Query](#metadata-query) array | 2 | Execute multiple **read only** operations in a single **transaction** |\n| **bulk_keep_going** | [Query](#metadata-query) array | 1 | Like `bulk`, but subcommands can fail without the whole batch failing |\n```\n\n----------------------------------------\n\nTITLE: Basic GraphiQL IDE Usage in JSX\nDESCRIPTION: Demonstrates the basic usage of the GraphiQLIDE component with a simple GraphQL query and response.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query {\n  author_by_pk(id: 1) {\n    id\n    name\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"author_by_pk\": {\n      \"id\": 1,\n      \"name\": \"Justin\"\n    }\n  }\n}`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Hasura UI\nDESCRIPTION: This snippet imports the React components `Thumbnail`, `HeadingIcon`, and `ProductBadge` from site-specific directories. These components are intended to be used for rendering UI elements within the Hasura documentation portal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/sso.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Registering Updated Task Definition in AWS CLI\nDESCRIPTION: Command to register the updated ECS task definition with the new Hasura GraphQL Engine version. This creates a new revision of the task definition that can be used to update the service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\naws ecs register-task-definition --cli-input-json file://hasura-fargate-task.json\n```\n\n----------------------------------------\n\nTITLE: Listing Hasura Plugins - Bash\nDESCRIPTION: This snippet lists all the installed Hasura plugins, allowing users to view and manage their current plugin installations. It supports the verification of existing plugins before proceeding with any new installations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins list\n```\n\n----------------------------------------\n\nTITLE: Initializing PubSub with EventEmitter2\nDESCRIPTION: Sets up a PubSub instance using EventEmitter2 for handling GraphQL subscription events. Configures wildcards and delimiters for event handling.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/docs/subscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EventEmitter2 } from 'eventEmitter2';\nimport { PubSub } = from 'graphql-subscriptions'\n\nconst eventEmitter = new EventEmitter2({\n  wildcard: true,\n  delimiter: '/'\n});\n\n// Create the PubSub instance (here by wrapping an EventEmitter client)\nconst pubsub = new PubSub()\n\nexport default pubsub\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Table Structure in Hasura\nDESCRIPTION: SQL table definition for storing profile information including name, address, and geographical coordinates (latitude and longitude).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: profile\n\nColumns:\n\nid: Integer auto-increment\nname: Text\naddress: Text\nlat: Numeric, Nullable\nlng: Numeric, Nullable\n```\n\n----------------------------------------\n\nTITLE: Running Address Sanitizer with mimalloc\nDESCRIPTION: Example of running a program built with ASAN-enabled mimalloc, showing how to set ASAN options for verbosity. This helps detect memory errors at runtime.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nASAN_OPTIONS=verbosity=1 <myprogram>\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura CLI to a custom location on Linux/macOS\nDESCRIPTION: This command allows specifying a custom installation path for the Hasura CLI using the INSTALL_PATH environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | INSTALL_PATH=$HOME/bin bash\n```\n\n----------------------------------------\n\nTITLE: Simulating Static Metrics in Haskell with ekg-prometheus\nDESCRIPTION: Illustrates how to register metrics that cannot be removed or modified after registration, effectively creating static metrics. It demonstrates the use of subset functions to create restricted references to the metric store for static and dynamic metrics.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_8\n\nLANGUAGE: haskell\nCODE:\n```\n-- (1)\ndata AppMetrics6 :: Symbol -> Symbol -> MetricType -> Type -> Type where\n  DynamicSubset ::\n    DynamicMetrics name help metricType labels ->\n    AppMetrics6 name help metricType labels\n  StaticSubset ::\n    StaticMetrics name help metricType labels ->\n    AppMetrics6 name help metricType labels\n\ndata StaticMetrics :: Symbol -> Symbol -> MetricType -> Type -> Type where\n  MyStaticMetric :: StaticMetrics \"my_static_metric\" \"\" 'CounterType ()\n\ndata DynamicMetrics :: Symbol -> Symbol -> MetricType -> Type -> Type where\n  MyDynamicMetric :: DynamicMetrics \"my_dynamic_metric\" \"\" 'CounterType ()\n\napp6 :: IO ()\napp6 = do\n  (_store, _staticMetrics) <- do\n    store <- newStore @AppMetrics6\n    -- (2)\n    let staticRef = subset StaticSubset store\n        dynamicRef = subset DynamicSubset store\n    staticMetrics <- registerStaticMetrics staticRef\n    pure (dynamicRef, staticMetrics)\n\n  -- (3)\n  pure ()\n\nregisterStaticMetrics :: Store StaticMetrics -> IO Counter.Counter\nregisterStaticMetrics store = do\n  counter <- Counter.new\n  _ <- register store $\n        registerCounter MyStaticMetric () (Counter.read counter)\n  pure counter\n```\n\n----------------------------------------\n\nTITLE: Checking CI Environment in Haskell\nDESCRIPTION: Function to check if the current environment is a CI server, returning a Boolean value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ci-info/README.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nisCI :: IO Bool\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cloud Function Directory\nDESCRIPTION: Command to change directory to the cloud function implementation folder.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/mutation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cloudfunction\n```\n\n----------------------------------------\n\nTITLE: Agent Query Request JSON for Aggregate Query\nDESCRIPTION: Internal JSON representation of the GraphQL query, showing how pagination and aggregation parameters are processed\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Artist\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"aggregates_limit\": null,\n    \"limit\": 2,\n    \"offset\": null,\n    \"aggregates\": {\n      \"aggregate_count\": {\n        \"type\": \"star_count\"\n      }\n    },\n    \"fields\": {\n      \"nodes_Name\": {\n        \"type\": \"column\",\n        \"column\": \"Name\",\n        \"column_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataDTO Sum Type in Haskell\nDESCRIPTION: Example Haskell code showing how different metadata versions can be represented using a sum type for the DTO.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\ndata MetadataDTO = MetadataDTOV1 MetadataV1\n                 | MetadataDTOV2 MetadataV2\n\t\t | MetadataDTOV3 MetadataV3\n```\n\n----------------------------------------\n\nTITLE: Running Python Test Suite with pytest\nDESCRIPTION: Command to run the Python test suite using pytest, specifying the GraphQL engine URL and database URL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tests-py\npytest --hge-urls http://localhost:8080 \\\n       --pg-urls 'postgres://<user>:<password>@<host>:<port>/<dbname>'\n```\n\n----------------------------------------\n\nTITLE: Quick Setup Script for Hasura Employees\nDESCRIPTION: One-line automation script to clone the repository, install dependencies and start the docs development server for Hasura employees.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine-mono.git\ncd graphql-engine-mono/docs\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform-Managed Resources\nDESCRIPTION: Command to tear down all resources created by Terraform when testing is complete. This is important for cost management and resource cleanup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB using Mongosh\nDESCRIPTION: Command to connect to the MongoDB instance started by the Docker Compose setup. This uses the mongosh command-line tool to connect to the database running on the Docker host.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmongosh \"mongodb://host.docker.internal:27017\"\n```\n\n----------------------------------------\n\nTITLE: Struct Implementation Examples for OpenDd\nDESCRIPTION: Examples of struct implementations that can use the OpenDd derive macro. Only structs with named fields and single unnamed field (newtype) are supported.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(opendds_derive::OpenDd)]\nstruct NamedFieldStruct {\n  named_field_1: Type1,\n  named_field_2: Type2,\n}\n\n#[derive(opendds_derive::OpenDd)]\nstruct NewTypeStruct(Field);\n```\n\n----------------------------------------\n\nTITLE: Importing Hasura Metadata Types\nDESCRIPTION: Basic TypeScript import statement for core Hasura metadata types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HasuraMetadataV2, Action, ComputedField } from \"@hasura/metadata-types\"\n```\n\n----------------------------------------\n\nTITLE: Stopping PostgreSQL Replication Containers\nDESCRIPTION: Command to stop the PostgreSQL containers. The optional -v flag can be added to delete the persistent data volumes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/postgres-replicas/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Flowchart: Proposed JSON to DTO to Metadata Conversion\nDESCRIPTION: Mermaid flowchart illustrating the proposed conversion process from JSON to DTO to internal Metadata type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    JSON <--> DTO <--> Metadata\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Token for Basic Authentication\nDESCRIPTION: Command to generate a base64-encoded token for Basic HTTP authentication with the Jupyter Notebook API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\necho -ne \"<username>:<password>\" | base64\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Self-Documenting Naming in Haskell\nDESCRIPTION: An example showing good naming practices that make the purpose of the type clear without requiring additional comments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_13\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\ndata CommandLineOptions = ...\n```\n\n----------------------------------------\n\nTITLE: Running BigQuery Tests\nDESCRIPTION: Command to run BigQuery-specific tests using dev.sh, requiring specific environment variables to be set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nscripts/dev.sh test --integration --backend bigquery -k TestGraphQLQueryBasicBigquery\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Category in JSON\nDESCRIPTION: Shows how to override default sidebar settings for directories by using a _category_.json file with label and position properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Actions\",\n  \"position\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Type Definition Example\nDESCRIPTION: Sample TypeScript interface definition showing basic type structure\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyType {\n  name: string\n  age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Grouping Key Input with @oneOf Directive in GraphQL\nDESCRIPTION: This snippet defines an input type for selecting grouping keys for the Invoice model. It includes options for grouping by scalar fields, related objects, or aggregates of related collections. The @oneOf directive ensures only one option can be selected at a time.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_74\n\nLANGUAGE: graphql\nCODE:\n```\ninput Invoice_grouping_key @oneOf {\n  # WARN: Potential name clash here\n  _scalar_field: Invoice_scalar_fields # Enum of all scalar fields - for grouping by scalar model fields\n  # All object relationships/nested object fields on the Invoice model\n  # For grouping by fields off of object-related model/nested objects\n  BillingAddress: Address_grouping_key\n  Customer: Customer_grouping_key\n\n  # For grouping by aggregates of array-related model/nested arrays\n  InvoiceLines_aggregate: InvoiceLine_aggregate_select\n  Discounts_aggregate: Discount_aggregate_select\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Packaging Go Echo Lambda Function\nDESCRIPTION: Bash command to run the build script that compiles and packages the Go Echo application into a zip file ready for AWS Lambda deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash build.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Hasura GraphQL Engine Console URL\nDESCRIPTION: Example URL for accessing the Hasura GraphQL Engine console after deployment on Azure Container Instances.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/azure-container/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://hasura-graphql-engine.centralindia.azurecontainer.io\n```\n\n----------------------------------------\n\nTITLE: Server URLs for Testing\nDESCRIPTION: URLs for accessing the Hasura GraphQL Engine and OpenAPI Schema during development.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/data-connector-sdk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080\nhttp://localhost:8300\n```\n\n----------------------------------------\n\nTITLE: Querying Hasura GraphQL with Firebase Authentication\nDESCRIPTION: This JavaScript code shows how to create a user service that queries the Hasura GraphQL endpoint using the authenticated postAxios function. It demonstrates a simple query to fetch user data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/firebase-cloud-functions/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { postAxios } from './postAxios'\n\nexport default {\n  async getUsers () {\n    const queryString = `\n      query {\n        user\n        {\n          id\n          name\n        }\n      }\n  　`\n\n    const result = await postAxios(queryString)\n    return result.data.data.user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Structured GraphQL Parsing Error in Rust\nDESCRIPTION: A detailed error structure from a GraphQL parser that shows an invalid string with an unknown escape sequence (\"\\115\"). The error provides context including expected valid tokens and the precise source position (line 2, column 13) of the error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0031_argument_with_erronous_string_value.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    UnknownEscapeSequence(\n                        \"\\\\115\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 2,\n            col: 13,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Nx Internal Plugin\nDESCRIPTION: Command to execute unit tests for the nx-internal-plugin library using Jest test runner via Nx.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/nx/internal-plugin/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nRun `nx test nx-internal-plugin` to execute the unit tests via [Jest](https://jestjs.io).\n```\n\n----------------------------------------\n\nTITLE: Fetching Cron Triggers in Hasura GraphQL Engine\nDESCRIPTION: API endpoint for retrieving all cron triggers from the metadata, including those with include_in_metadata set to false. Requires admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"get_cron_triggers\",\n    \"args\" : {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenDD Query Structure in Rust\nDESCRIPTION: Proposed Rust struct definition for an `opendd::Query` type that captures query intent on an OpenDD model without NDC mappings or permissions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nstruct Query {\n    model_name: Qualified<ModelName>,\n    // where field could be one of scalar fields or relationship fields\n    fields: Map<Alias, Field>,\n    filter: Option<BooleanExpression>,\n    order_by: Option<Vec<OrderByExpression>>,\n    limit: Option<int32>,\n    offset: Option<int32>,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing SQL Query Pipeline with Mermaid Flowchart\nDESCRIPTION: Flowchart showing the current SQL query processing pipeline, including validation, transformation to add NDCQuery, and permissions application.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/multiple-frontends.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[/SQL Query/]\n    B[/LogicalPlan/]\n    C[/LogicalPlan With NDCQuery/]\n    D[/PhysicalPlan/]\n\n    A -->|\"Validation \\n (uses 'sql::Context')\"| B\n    B -->|\"Transformation \\n (replace TableScan with NDCQuery)\"| C\n    C -->|\"Permissions are added to NDCQuery\"| D\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands\nDESCRIPTION: Commands to build and run the GraphQL server using Docker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t graphql .\ndocker run -p 4000:4000 graphql\n```\n\n----------------------------------------\n\nTITLE: Untracking MS SQL Stored Procedure with Hasura Metadata API\nDESCRIPTION: HTTP POST request to untrack a stored procedure and remove it from the GraphQL schema. Requires source database name and stored procedure name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/stored-procedures.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_untrack_stored_procedure\",\n    \"args\": {\n      \"source\": \"default\",\n      \"stored_procedure\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Sidebar Label and Position in Markdown Frontmatter\nDESCRIPTION: Demonstrates how to set the sidebar label and position for individual files using frontmatter in Markdown.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: Creating actions\nsidebar_position: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Update by Primary Key Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for an update by primary key operation, including the primary key values and set values to be validated.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n      \"input\": [\n          {\n              \"pk_columns\": {\"id\": 3},\n              \"_set\": {\"name\": \"Jane\"}\n          }\n      ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Token Error in Rust for GraphQL Engine\nDESCRIPTION: This code defines an error structure for token parsing in the Hasura GraphQL Engine. It includes a list of expected tokens, the actual error found (an invalid Unicode escape sequence), and the position of the error in the source code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/1001_multibyte_chars_bad.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    InvalidUnicodeEscapeSequence(\n                        \"invalid hex digits\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 2,\n            col: 21,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional Resources Note Admonition in Markdown\nDESCRIPTION: Shows how to create a note admonition for additional resources, including a link to a webinar on data federation with Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note Additional Resources\n\nData Federation with Hasura - [Watch Webinar](https://hasura.io/events/webinar/data-federation-hasura-graphql/).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Deploying Function to Zeit\nDESCRIPTION: Command to deploy the NodeJS function to Zeit (now.sh) platform.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in YAML\nDESCRIPTION: Configuration for running automated tests against generated type definitions using sample JSON data\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/RFC.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- typeDefinitionFile: './generated/HasuraMetadataV2.ts'\n  jsonInputTests:\n    - files: './src/tests/**.json'\n      expectType: HasuraMetadataV2\n```\n\n----------------------------------------\n\nTITLE: Viewing Hasura GraphQL Engine Logs\nDESCRIPTION: Commands to check the logs of the Hasura GraphQL Engine container deployed using Docker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n\n\ndocker logs 097f58433a2b\n\n{\"timestamp\":\"2018-10-09T11:20:32.054+0000\", \"level\":\"info\", \"type\":\"http-log\", \"detail\":{\"status\":200, \"query_hash\":\"01640c6dd131826cff44308111ed40d7fbd1cbed\", \"http_version\":\"HTTP/1.1\", \"query_execution_time\":3.0177627e-2, \"request_id\":null, \"url\":\"/v1/graphql\", \"user\":{\"x-hasura-role\":\"admin\"}, \"ip\":\"127.0.0.1\", \"response_size\":209329, \"method\":\"POST\", \"detail\":null}}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Sidebar Properties in YAML\nDESCRIPTION: YAML frontmatter configuration for a documentation page that sets the sidebar position, label and class name for content about trigger-based logic.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_trigger_based_logic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsidebar_position: 50\nsidebar_label: 'Trigger-based Logic'\nsidebar_class_name: sidebar_heading\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Thumbnail Component in Markdown\nDESCRIPTION: This code snippet shows how to use the Thumbnail component to display an image related to billing in the Hasura Cloud dashboard. It specifies the source path and alt text for the image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/account-management/billing/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail src=\"/img/account-management/billing/billing.png\" alt=\"Billing\" />\n```\n\n----------------------------------------\n\nTITLE: Tables Schema Definition\nDESCRIPTION: JSON schema for Hasura tables configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/TableEntry\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet shows the nested structure of a parsed GraphQL query in Rust. It includes field definitions, source positions, and selection sets. The code uses custom types to represent different elements of the query structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0037_operation_type_definition_with_inline_fragment.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nend: SourcePosition {\n    line: 10,\n    col: 20,\n},\n},\n},\nstart: SourcePosition {\n    line: 10,\n    col: 9,\n},\nend: SourcePosition {\n    line: 10,\n    col: 20,\n},\n},\n),\ndirectives: [],\nselection_set: Spanning {\nitem: SelectionSet {\n    items: [\n        Spanning {\n            item: Field(\n                Field {\n                    alias: None,\n                    name: Spanning {\n                        item: Name(\n                            \"field3\",\n                        ),\n                        start: SourcePosition {\n                            line: 11,\n                            col: 7,\n                        },\n                        end: SourcePosition {\n                            line: 11,\n                            col: 12,\n                        },\n                    },\n                    arguments: None,\n                    directives: [],\n                    selection_set: Some(\n                        Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"field4\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 12,\n                                                        col: 9,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 12,\n                                                        col: 14,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 12,\n                                            col: 9,\n                                        },\n                                        end: SourcePosition {\n                                            line: 12,\n                                            col: 14,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 11,\n                                col: 14,\n                            },\n                            end: SourcePosition {\n                                line: 13,\n                                col: 7,\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Command to install required Node.js packages for the webhook server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/order-status-notification.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express body-parser\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Command Examples in Markdown\nDESCRIPTION: Basic Docker Compose commands for running and testing a Data Connector agent implementation. Shows how to start the stack and run tests in a containerized environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose run tests\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Hasura Cloud Integration\nDESCRIPTION: This snippet imports React components used in a CI/CD setup with Hasura Cloud. The components provide visual elements for product badges in the user interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura Deployment YAML\nDESCRIPTION: Downloads the deployment YAML file for Hasura GraphQL Engine from the official GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/google-cloud-k8s-sql/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hasura Gateway Plugin - Bash\nDESCRIPTION: This command uninstalls the Hasura Gateway plugin, removing it from the plugin list for users who no longer require it. It's a straightforward method to manage plugin dependencies.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/gateway-plugin/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins uninstall gateway\n```\n\n----------------------------------------\n\nTITLE: Event Trigger Columns Schema Definition\nDESCRIPTION: Defines the structure for specifying column selections in event triggers, allowing either all columns ('*') or a specific list of PostgreSQL columns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_51\n\nLANGUAGE: haskell\nCODE:\n```\n\"*\" | [PGColumn]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Acceptable Maybe Naming in Haskell\nDESCRIPTION: An example showing an acceptable way to name Maybe values when intermediate variables are necessary. It uses a full type name prefix instead of abbreviations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\n-- Okay\nmaybeArgument <- parseOptionalArgument userRole value\ndoSomethingElse\ncase maybeArgument of\n  Just argument -> ...\n  Nothing -> ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Node Structure with Source Positions in Rust\nDESCRIPTION: This code snippet shows the nested structure of a GraphQL AST with source position tracking. Each node includes a start and end position with line and column information, which is essential for error reporting and syntax highlighting in GraphQL implementations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0021_operation_type_definition_with_arguments.txt#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 9,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 49,\n                            },\n                            end: SourcePosition {\n                                line: 4,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 4,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar for Products Section in Hasura GraphQL Engine Docs\nDESCRIPTION: This YAML-like configuration sets up the sidebar properties for the Products section in the Hasura GraphQL Engine documentation. It defines the position, label, and CSS class name for the sidebar entry.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_products.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 90\nsidebar_label: 'Products'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Defining String Concatenation Aggregate Arguments in GraphQL\nDESCRIPTION: Defines arguments for string concatenation aggregate operations, specifying the separator to use when concatenating strings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_concat_aggregate_args {\n  separator: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL Slug in Markdown Frontmatter\nDESCRIPTION: Illustrates how to manually set the URL slug for index files using the slug metadata in Markdown frontmatter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: index\n---\n```\n\n----------------------------------------\n\nTITLE: Running Data Connector Agent Tests with Sandwich TUI\nDESCRIPTION: Command to run tests using the Sandwich test framework's Terminal UI mode, allowing for interactive test execution and result viewing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/dc-api/test/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncabal run test:tests-dc-api -- test --agent-base-url \"http://localhost:8100\" --agent-config '{}' sandwich --tui\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed GraphQL Endpoint\nDESCRIPTION: cURL command to test the deployed GraphQL endpoint with a sample query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://app-name-something.now.sh/graphql \\\n     -H 'Content-Type:application/json' \\\n     -d'{\"query\":\"{ hello }\"}'\n\n{\"data\":{\"hello\":\"Hello World!\"}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Console Telemetry Data Sample in JSON\nDESCRIPTION: This snippet shows a sample of telemetry data collected by the Hasura Console. It includes information about runtime errors, anonymized route names, server version, and various identifiers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/policies/telemetry.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server_version\": \"2.0.0\",\n  \"event_type\": \"Main/RUN_TIME_ERROR\",\n  \"url\": \"/data/schema/SCHEMA_NAME/tables/TABLE_NAME/modify\",\n  \"console_mode\": \"cli\",\n  \"cli_uuid\": \"0e4e2e9b-7fc9-44b8-9d5c-955673e20e0b\",\n  \"server_uuid\": \"015a8f49-2fbd-4c41-8066-23f48d9c620a\",\n  \"data\": { \"message\": \"Uncaught TypeError: something is not a function\", \"stack\": [\" at main.js:1:3\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Management with withFoo in Haskell\nDESCRIPTION: Demonstrates a typical 'withX' function pattern for resource management in Haskell, using the 'finally' combinator to ensure resource release.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nwithFoo :: FooArgs -> (Foo -> IO a) -> IO a\nwithFoo args callback = do\n  foo <- acquireFoo args\n  callback foo `finally` releaseFoo foo\n  -- or: bracket (acquireFoo args) releaseFoo callback\n```\n\n----------------------------------------\n\nTITLE: File Structure for Mimalloc Portability Layer in C\nDESCRIPTION: Outlines the file structure for the portability layer in Mimalloc. It includes a header file for the primitive API definition and platform-specific implementation files for Unix, WASI, Windows, and macOS.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/src/prim/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninclude/mimalloc/prim.h: primitive portability API definition.\nprim.c: Selects one of `unix/prim.c`, `wasi/prim.c`, or `windows/prim.c` depending on the host platform\n        (and on macOS, `osx/prim.c` defers to `unix/prim.c`).\n```\n\n----------------------------------------\n\nTITLE: Basic Inconsistency Command Options in Hasura CLI\nDESCRIPTION: Basic command options for the metadata inconsistency management feature in Hasura CLI, showing the help flag option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for inconsistency\n```\n\n----------------------------------------\n\nTITLE: Global Options for Hasura CLI Commands\nDESCRIPTION: Common options inherited by all Hasura CLI commands, including environment file specification, logging level, and update check settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_completion.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: NativeQueryArgument Schema Documentation\nDESCRIPTION: Defines the structure for native query arguments including type information and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\n| Key         | Required | Schema    | Description                                                     |\n| ----------- | -------- | --------- | --------------------------------------------------------------- |\n| type        | true     | `String`  | The type of the column, according to the underlying data source |\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Console Development Servers\nDESCRIPTION: Commands to start the Hasura console development server in community edition mode and launch the Storybook for legacy components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/generic-info.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run console-ce:serve\nnpx nx run console-legacy-ce:storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring PubSub with MQTT\nDESCRIPTION: Alternative PubSub setup using MQTT client for handling subscription events through a message broker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/docs/subscriptions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } = from 'mqtt'\nimport { MQTTPubSub } = from 'graphql-mqtt-subscriptions'\n\nconst MQTT_PORT = 1883\n\n// Create a PubSub instance (here by wrapping a MQTT client)\nconst client = connect(`mqtt://localhost:${MQTT_PORT}`)\n\nconst pubsub = new MQTTPubSub({\n  client\n})\n\nexport default pubsub\n```\n\n----------------------------------------\n\nTITLE: Building Project\nDESCRIPTION: Command to build the console-ce project. Build artifacts are stored in the dist/ directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnx build console-ce\n```\n\n----------------------------------------\n\nTITLE: Exporting Schema in JSON format using graphqurl in Bash\nDESCRIPTION: This snippet shows how to get the GraphQL schema in JSON format using graphqurl. It includes the command and the required flag to change the output format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/common-patterns/export-graphql-schema.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Getting the schema in .json format\ngq https://my-graphql-engine.com/v1/graphql --introspect --format json > schema.json\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection Options in Hasura GraphQL Engine\nDESCRIPTION: This snippet shows how to use the --pg-connection-options command-line flag to pass parameters to PostgreSQL when starting the Hasura GraphQL Engine server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n- server: add `--pg-connection-options` command-line flag for passing parameters to PostgreSQL (close #5092) (#5187)\n```\n\n----------------------------------------\n\nTITLE: Extending JSON Payload for Metadata Operations in Hasura GraphQL Engine\nDESCRIPTION: This snippet shows the proposed extension to the existing JSON payload for metadata operations, including a new resourceVersion field for optimistic concurrency control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/optimistic-concurrency-control.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"operation_name\",\n   \"version\": \"version_of_the_operation\",\n   \"args\": \"OperationArgs\",\n   \"resourceVersion\": \"resourceVersion\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status\nDESCRIPTION: Checks the status of the deployed pods to ensure they are running correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Defining String Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on string aggregate functions like max, min, count, and specialized string concatenation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_aggregate_order_by @oneOf {\n  _max: order_by\n  _min: order_by\n  _count: order_by\n  _count_distinct: order_by\n  _concat: String_concat_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Function Trigger URL Configuration\nDESCRIPTION: YAML configuration showing the HTTPS trigger URL for the deployed cloud function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs8/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://us-central1-hasura-test.cloudfunctions.net/nodejs-echo\n```\n\n----------------------------------------\n\nTITLE: Code Deployment Command\nDESCRIPTION: Command to zip the project files for AWS Lambda deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/aws-lambda/nodejs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ zip -r graphql.zip *\n```\n\n----------------------------------------\n\nTITLE: Defining the ManagedT Transformer in Haskell\nDESCRIPTION: Introduces the ManagedT transformer, which extends the Managed monad to work with more complex monadic stacks beyond just IO.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\nnewtype ManagedT m a = ManagedT (forall r. (a -> m r) -> m r)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Structure for Notes Application\nDESCRIPTION: SQL schema definition for a simple 'notes' table with an auto-incrementing integer ID primary key and a text field for the note content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes:\n  id: Integer (auto-increment)\n  note: Text\n\n  Primary key: id\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Documentation in Haskell\nDESCRIPTION: An example showing poor documentation practices. The comment doesn't add value beyond what's already conveyed by the type name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_12\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\n\n-- | Configuration options given on the command-line.\ndata Options = ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Test Class in Haskell\nDESCRIPTION: Suggests creating a new BackendTest type class in Haskell to implement backend-specific functionality for testing, including database provisioning, test group support, schema setup, and transactional test execution.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/hspec-test-suite.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nclass BackendTest backend where\n  provisionTestDatabase :: backend -> IO Database\n  listSupportedTestGroups :: backend -> [TestGroup]\n  setupTestSchema :: backend -> Database -> IO ()\n  createBlankMetadata :: backend -> Metadata\n  runTestTransactionally :: backend -> Database -> Test -> IO TestResult\n```\n\n----------------------------------------\n\nTITLE: Functions Schema Definition\nDESCRIPTION: JSON schema for Hasura functions configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/Function\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Parser in Haskell\nDESCRIPTION: Parser combinator that handles nullable GraphQL types by transforming a parser of type 'a' into a parser of 'Maybe a'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nnullable :: MonadParse m => Parser m a -> Parser m (Maybe a)\nnullable parser = Parser\n  { pType = nullableType $ pType parser\n  , pParser = \\case\n      JSONValue A.Null   -> pure Nothing\n      GraphQLValue VNull -> pure Nothing\n      value              -> Just <$> pParser parser value\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Data Connector Agent Tests with Cabal\nDESCRIPTION: Command to run tests against a Data Connector agent using Cabal. It specifies the agent's URL and configuration JSON.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/dc-api/test/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncabal run test:tests-dc-api -- test --agent-base-url \"http://localhost:8100\" --agent-config '{}'\n```\n\n----------------------------------------\n\nTITLE: Verbose Mode with Dynamic Override on Linux/BSD\nDESCRIPTION: Example of running a program with mimalloc's verbose mode enabled while using dynamic override on Linux/BSD systems. This helps verify that mimalloc is being used correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nenv MIMALLOC_VERBOSE=1 LD_PRELOAD=/usr/lib/libmimalloc.so myprogram\n```\n\n----------------------------------------\n\nTITLE: Firebase Service Account Configuration for Heroku\nDESCRIPTION: Sample Firebase service account JSON configuration that needs to be set as an environment variable in Heroku.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"testapp-2222\",\n  \"private_key_id\": \"f02aca08952f702de43ed577b428f405efe2d377\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n<your-private-key>\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"firebase-adminsdk-t4sik@testapp-24a60.iam.gserviceaccount.com\",\n  \"client_id\": \"113608616484852272199\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-t4sik%40testapp-22222.iam.gserviceaccount.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Webhook with Zeit Now\nDESCRIPTION: Commands to deploy the Firebase auth webhook using Zeit Now with environment variables for Firebase configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/nodejs-firebase/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/graphql-engine\ncd graphql-engine/community/boilerplates/auth-webhooks/nodejs-express\nnpm install -g now\nnow -e \\\nFIREBASE_CONFIG='{\n        \"type\": \"service_account\",\n        \"project_id\": \"testapp-2222\",\n        \"private_key_id\": \"f02aca08952f702de43ed577b428f405efe2d377\",\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n<your-private-key>\\n-----END PRIVATE KEY-----\\n\",\n        \"client_email\": \"firebase-adminsdk-t4sik@testapp-24a60.iam.gserviceaccount.com\",\n        \"client_id\": \"113608616484852272199\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-t4sik%40testapp-22222.iam.gserviceaccount.com\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Test Configuration YAML Definition\nDESCRIPTION: YAML configuration for type testing showing file path and expected type mapping\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- typeDefinitionFile: \"./generated/HasuraMetadataV2.ts\"\n  jsonInputTests:\n    - files: \"./src/tests/**.json\"\n      # This gets called as \"Convert.to(expectType)\" -> e.g \"Convert.toHasuraMetadataV2\" in generated TS SDK\n      expectType: HasuraMetadataV2\n```\n\n----------------------------------------\n\nTITLE: GraphQL Token Error Structure in Rust\nDESCRIPTION: Demonstrates error handling for GraphQL token parsing, showing expected valid tokens (Query, Mutation, Subscription, Fragment, BraceL) versus an invalid string token found. Includes source position tracking for error location.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0030_operation_definition_with_description.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Keyword(\n                    Query,\n                ),\n                Keyword(\n                    Mutation,\n                ),\n                Keyword(\n                    Subscription,\n                ),\n                Keyword(\n                    Fragment,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: Token(\n                String(\n                    \"after this PR this should not be an issue: https://github.com/graphql/graphql-spec/pull/892\",\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 1,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dependencies\nDESCRIPTION: Command to generate and view a diagram of project dependencies in the Nx workspace\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnx graph\n```\n\n----------------------------------------\n\nTITLE: Basic Command Schema Creation without Role-specific Arguments\nDESCRIPTION: An example of creating a command schema that allows all namespaces (roles) without any role-specific annotations. This approach was used before the implementation of preset arguments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/roles-and-annotations.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nbuilder.allow_all_namespace(command_schema_stuff, None)\n```\n\n----------------------------------------\n\nTITLE: Article Model Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for the article model when inserted through a nested mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n        \"input\": [\n            {\n                \"id\": 123,\n            },\n            {\n                \"id\": 345\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Commands to install dependencies and start the local development server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Mutation Operation in Rust\nDESCRIPTION: This code snippet shows the parsed structure of a GraphQL mutation operation. It includes the operation type, field name, and source positions for various elements of the mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/1114_parses_anonymous_mutation.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Mutation,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"mutationField\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 9,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 21,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 9,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 21,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 16,\n                            },\n                            end: SourcePosition {\n                                line: 3,\n                                col: 7,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 7,\n                },\n                end: SourcePosition {\n                    line: 3,\n                    col: 7,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Function to Google Cloud\nDESCRIPTION: This bash command deploys the GraphQL function to Google Cloud Functions. It specifies the function name, entry point, runtime, and trigger type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/google-cloud-functions/nodejs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud functions deploy hello-graphql --entry-point handler --runtime nodejs8 --trigger-http\n```\n\n----------------------------------------\n\nTITLE: Automated Unit Test Runner\nDESCRIPTION: Command for running unit tests automatically using ghcid with specific configuration for the GraphQL engine tests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nghcid -a -c \"cabal repl graphql-engine:graphql-engine-tests -f -O0\" --test Main.main --setup \":set args --match TheNameOfTestsIWantToRun\" --width 100 --height 30\n```\n\n----------------------------------------\n\nTITLE: Deploying Function to Zeit/Now.sh\nDESCRIPTION: Command to deploy the Go function to Zeit/Now.sh platform\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Connector Agent with Table Filtering and Schema\nDESCRIPTION: JSON configuration for the Data Connector agent to filter exposed tables and set a schema. This example exposes only the Artist and Album tables under the 'my_schema' namespace.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/reference/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\"Artist\", \"Album\"],\n  \"schema\": \"my_schema\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query into Rust Data Structure\nDESCRIPTION: This code shows the parsed representation of a GraphQL query as a Rust data structure. The query fetches information about a pet, including its name and birthday (with the month of the birthday as a nested field). The structure uses the Spanning type to track source positions for each element in the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0003_selection_with_fields.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"pet\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: Some(\n                                                    Spanning {\n                                                        item: SelectionSet {\n                                                            items: [\n                                                                Spanning {\n                                                                    item: Field(\n                                                                        Field {\n                                                                            alias: None,\n                                                                            name: Spanning {\n                                                                                item: Name(\n                                                                                    \"name\",\n                                                                                ),\n                                                                                start: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 9,\n                                                                                },\n                                                                                end: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 12,\n                                                                                },\n                                                                            },\n                                                                            arguments: None,\n                                                                            directives: [],\n                                                                            selection_set: None,\n                                                                        },\n                                                                    ),\n                                                                    start: SourcePosition {\n                                                                        line: 4,\n                                                                        col: 9,\n                                                                    },\n                                                                    end: SourcePosition {\n                                                                        line: 4,\n                                                                        col: 12,\n                                                                    },\n                                                                },\n                                                                Spanning {\n                                                                    item: Field(\n                                                                        Field {\n                                                                            alias: None,\n                                                                            name: Spanning {\n                                                                                item: Name(\n                                                                                    \"birthday\",\n                                                                                ),\n                                                                                start: SourcePosition {\n                                                                                    line: 5,\n                                                                                    col: 9,\n                                                                                },\n                                                                                end: SourcePosition {\n                                                                                    line: 5,\n                                                                                    col: 16,\n                                                                                },\n                                                                            },\n                                                                            arguments: None,\n                                                                            directives: [],\n                                                                            selection_set: Some(\n                                                                                Spanning {\n                                                                                    item: SelectionSet {\n                                                                                        items: [\n                                                                                            Spanning {\n                                                                                                item: Field(\n                                                                                                    Field {\n                                                                                                        alias: None,\n                                                                                                        name: Spanning {\n                                                                                                            item: Name(\n                                                                                                                \"month\",\n                                                                                                            ),\n                                                                                                            start: SourcePosition {\n                                                                                                                line: 6,\n                                                                                                                col: 13,\n                                                                                                            },\n                                                                                                            end: SourcePosition {\n                                                                                                                line: 6,\n                                                                                                                col: 17,\n                                                                                                            },\n                                                                                                        },\n                                                                                                        arguments: None,\n                                                                                                        directives: [],\n                                                                                                        selection_set: None,\n                                                                                                    },\n                                                                                                ),\n                                                                                                start: SourcePosition {\n                                                                                                    line: 6,\n                                                                                                    col: 13,\n                                                                                                },\n                                                                                                end: SourcePosition {\n                                                                                                    line: 6,\n                                                                                                    col: 17,\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnail Component for Codespaces Example (JSX)\nDESCRIPTION: This code snippet shows the usage of the Thumbnail component to display a GIF image demonstrating how to create a Codespace in GitHub. It includes properties for source, alt text, and width.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail\n  src=\"/img/wiki/codespaces-1.gif\"\n  alt=\"Create Codespace\"\n  width=\"1000px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running the Complete Test Suite\nDESCRIPTION: Command to run the full test suite for the Hasura CLI, which requires setting environment variables for the HGE Docker image and CLI path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test-all\n```\n\n----------------------------------------\n\nTITLE: RFC Metadata Configuration in YAML\nDESCRIPTION: Metadata configuration for the RFC document specifying authors and related discussion links.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors: Philip Lykke Carlsen <philip@hasura.io>\ndiscussion:\n   https://github.com/hasura/graphql-engine-mono/issues/2407\n   https://github.com/hasura/graphql-engine-mono/pull/2507\n---\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Fragment Definition in Rust\nDESCRIPTION: This code snippet shows the Rust struct representation of a parsed GraphQL fragment definition. It includes details such as the fragment name, type condition, and selection set with fields and a fragment spread.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0013_fragment_definition_with_fragment_spread.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Fragment(\n                    FragmentDefinition {\n                        name: Spanning {\n                            item: Name(\n                                \"friendFields\",\n                            ),\n                            start: SourcePosition {\n                                line: 1,\n                                col: 10,\n                            },\n                            end: SourcePosition {\n                                line: 1,\n                                col: 21,\n                            },\n                        },\n                        type_condition: Spanning {\n                            item: TypeCondition {\n                                on: Spanning {\n                                    item: TypeName(\n                                        Name(\n                                            \"User\",\n                                        ),\n                                    ),\n                                    start: SourcePosition {\n                                        line: 1,\n                                        col: 26,\n                                    },\n                                    end: SourcePosition {\n                                        line: 1,\n                                        col: 29,\n                                    },\n                                },\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 23,\n                            },\n                            end: SourcePosition {\n                                line: 1,\n                                col: 29,\n                            },\n                        },\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"id\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 6,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 6,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"name\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 8,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 8,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: FragmentSpread(\n                                            FragmentSpread {\n                                                fragment_name: Spanning {\n                                                    item: Name(\n                                                        \"standardProfilePic\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 4,\n                                                        col: 8,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 4,\n                                                        col: 25,\n                                                    },\n                                                },\n                                                directives: [],\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 4,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 4,\n                                            col: 25,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 31,\n                            },\n                            end: SourcePosition {\n                                line: 5,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 5,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Points within Polygon using _st_contains\nDESCRIPTION: GraphQL query demonstrating the _st_contains operator to find geometries that are completely contained within a specified polygon. Uses GeoJSON format for geometric data representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/postgis-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  locations(where: {geometry: {_st_contains: {polygon: {type: \"Polygon\", coordinates: [[[-73.9857, 40.7484], [-73.9857, 40.759], [-73.9684, 40.759], [-73.9684, 40.7484], [-73.9857, 40.7484]]]}}}}) {\n    id\n    name\n    geometry\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Axum Extension Overview - Markdown\nDESCRIPTION: Header and brief description of the axum-ext package that provides shared helpers for Axum framework, specifically mentioning graceful shutdown functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/axum-ext/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# axum-ext\\n\\nShared helpers for axum, currently for graceful shutdown.\n```\n\n----------------------------------------\n\nTITLE: Using ProductBadge Component in JSX\nDESCRIPTION: This example demonstrates how to use the ProductBadge component in a markdown file. It should be placed immediately after the page's title (h1 tag) and specifies which Hasura products the feature is available for.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/product-badges.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductBadge ce free />\n```\n\n----------------------------------------\n\nTITLE: Webhook URL for IP Geolocation Action\nDESCRIPTION: This URL points to an API that provides geolocation data for IP addresses.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.techniknews.net/ipgeo\n```\n\n----------------------------------------\n\nTITLE: Basic Hasura Seed Apply Command\nDESCRIPTION: The basic command syntax for applying seed data using the Hasura CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_seed_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura seed apply [flags]\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with 5-Rated Articles in GraphQL\nDESCRIPTION: This GraphQL query fetches all authors and includes only their articles with a rating of 5. It demonstrates how to use the 'where' argument in an array relationship.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/using-nested-objects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bigquery_authors {\n    id\n    name\n    articles(where: {rating: {_eq: 5}}) {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Bullet Lists in Markdown\nDESCRIPTION: This snippet demonstrates the correct way to format bullet lists in Markdown. It includes guidelines on when to use bullet points, proper indentation, punctuation, and spacing between points.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/bullets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Don't use bullet points for one point.\n- Make sure that content which belongs under a bullet point is actually indented under that bullet point in markdown.\n- Use a period at the end of bullet lists which are a sentence, like this.\n- Bullet points should not have a blank line between each point.\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Hasura with Amazon Redshift\nDESCRIPTION: Bash commands to download the necessary Docker Compose configuration file for setting up Hasura with Amazon Redshift connector. Users can choose between wget or curl to retrieve the file from the Hasura GitHub repository.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/redshift/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/redshift/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests/enterprise/redshift/docker-compose.yaml -o docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Using Metadata Types SDK in TypeScript\nDESCRIPTION: Example of using the Metadata Types SDK to create a type-safe table entry in TypeScript. This SDK provides auto-generated type definitions for Hasura metadata, enabling users to build type-safe tooling around metadata interactions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TableEntry } from \"../generated/HasuraMetadataV2\";\n\nconst newTable: TableEntry = {\n  table: { schema: \"public\", name: \"user\" },\n  select_permissions: [\n    {\n      role: \"user\",\n      permission: {\n        limit: 100,\n        allow_aggregations: false,\n        columns: [\"id\", \"name\", \"etc\"],\n        computed_fields: [\"my_computed_field\"],\n        filter: {\n          id: { _eq: \"X-Hasura-User-ID\" },\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Document Links in Markdown\nDESCRIPTION: Examples of basic internal document references using relative paths in Markdown format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Get started With Hasura Cloud](../relative/path/to/getting-started-document.mdx)\n\n[Remote Schemas](../relative/path/to/remote-schemas-document.mdx)\n```\n\n----------------------------------------\n\nTITLE: Updating Command Files\nDESCRIPTION: Moves the new files into their final positions, replacing the old versions of commands.json files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/codegen/HOW-TO-UPDATE.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmv commands.json.new.orig commands.json.orig\nmv commands.json.new commands.json\n```\n\n----------------------------------------\n\nTITLE: Deploying to Zeit Now\nDESCRIPTION: Command to deploy the application to Zeit Now platform.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Exposing Hasura GraphQL Engine\nDESCRIPTION: Creates a LoadBalancer service to expose the Hasura GraphQL Engine on an external IP address.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deploy/hasura \\\n     --port 80 --target-port 8080 \\\n     --type LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Node Position Tracking in Rust\nDESCRIPTION: AST parsing implementation that tracks source positions and spans for GraphQL query nodes. Shows nested structure for representing positions, key-value pairs, and list values in the parse tree.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0030_values.txt#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nline: 5,\ncol: 16,\n},\nend: SourcePosition {\n    line: 5,\n    col: 23,\n},\n},\n},\nstart: SourcePosition {\n    line: 5,\n    col: 9,\n},\nend: SourcePosition {\n    line: 5,\n    col: 23,\n},\n},\nSpanning {\nitem: KeyValue {\n    key: Spanning {\n        item: Name(\n            \"input\",\n        ),\n        start: SourcePosition {\n            line: 6,\n            col: 9,\n        },\n        end: SourcePosition {\n            line: 6,\n            col: 13,\n        },\n    },\n    value: Spanning {\n        item: List(\n            [\n                Spanning {\n                    item: SimpleValue(\n                        String(\n                            \"one\",\n                        ),\n                    ),\n                    start: SourcePosition {\n                        line: 6,\n                        col: 18,\n                    },\n                    end: SourcePosition {\n                        line: 6,\n                        col: 22,\n                    },\n                },\n                Spanning {\n                    item: SimpleValue(\n                        Float(\n                            1.34,\n                        ),\n                    ),\n                    start: SourcePosition {\n                        line: 6,\n                        col: 25,\n                    },\n                    end: SourcePosition {\n                        line: 6,\n                        col: 28,\n                    },\n                },\n            ],\n        ),\n        start: SourcePosition {\n            line: 6,\n            col: 16,\n        },\n        end: SourcePosition {\n            line: 6,\n            col: 30,\n        },\n    },\n},\nstart: SourcePosition {\n    line: 6,\n    col: 9,\n},\nend: SourcePosition {\n    line: 6,\n    col: 30,\n},\n},\nSpanning {\nitem: KeyValue {\n    key: Spanning {\n        item: Name(\n            \"otherInput\",\n        ),\n        start: SourcePosition {\n            line: 7,\n            col: 9,\n        },\n        end: SourcePosition {\n            line: 7,\n            col: 18,\n        },\n    },\n    value: Spanning {\n        item: Object(\n            [\n                Spanning {\n                    item: KeyValue {\n                        key: Spanning {\n                            item: Name(\n                                \"key\",\n                            ),\n                            start: SourcePosition {\n                                line: 7,\n                                col: 23,\n                            },\n                            end: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Including External References in Haskell Comments\nDESCRIPTION: Demonstrates how to properly link to external specifications or issues in comments. This provides valuable context for implementation decisions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_18\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nisValidEnumName name =\n  -- see https://graphql.github.io/graphql-spec/June2018/#EnumValue\n  isValidName name && name `notElem` [\"true\", \"false\", \"null\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Command Options - SASS\nDESCRIPTION: Available command-specific options for the metadata inconsistency status check.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_status.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for status\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Time\nDESCRIPTION: This GraphQL snippet illustrates querying a time field. The `Time` scalar type represents the time of day without a time zone in the format `[H]H:[M]M:[S]S[.DDDDDD]`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    time: \"17:30:15.001\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: InputArgument Schema Documentation\nDESCRIPTION: Specifies the structure for input arguments in GraphQL actions with name and type definitions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_47\n\nLANGUAGE: markdown\nCODE:\n```\n| Key  | Required | Schema                      | Description          |\n| ---- | -------- | --------------------------- | -------------------- |\n| name | true     | text                        | Name of the argument |\n| type | true     | [GraphQLType](#graphqltype) | Type of the argument |\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Deployment Commands\nDESCRIPTION: Commands for installing dependencies and creating deployment package for AWS Lambda function\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/nodejs8/mutation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nzip -r hge-mutation.zip .\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Component Usage\nDESCRIPTION: JSX implementation showing how to use the Thumbnail component to display a Grafana dashboard image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/observability-best-practices.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail src=\"/img/observability/grafana-overview-dashboard.png\" alt=\"Hasura Overview Dashboard\" width=\"1000px\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Lazy Data Type in Haskell\nDESCRIPTION: An example showing a less preferred way of defining data types with lazy fields. This approach can lead to unexpected behavior and performance issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_10\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\ndata Point = Point\n  { pointX :: Double\n  , pointY :: Double\n  }\n```\n\n----------------------------------------\n\nTITLE: Referencing Notes in Haskell Code\nDESCRIPTION: Demonstrates how to reference a previously defined Note within the codebase. This allows detailed documentation to be centralized while still being accessible where relevant.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_22\n\nLANGUAGE: haskell\nCODE:\n```\n-- see Note [Checking metadata consistency in run_sql]\ncontainsDDLKeyword :: Text -> Bool\ncontainsDDLKeyword = TDFA.match $$(quoteRegex ...)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Jupyter Notebook in Hasura Cloud\nDESCRIPTION: Command to delete a Jupyter Notebook from Hasura Cloud when it's no longer needed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhasura notebook delete\n```\n\n----------------------------------------\n\nTITLE: Verifying Datadog Agent Connection to PostgreSQL\nDESCRIPTION: Shell command to verify that the Datadog agent can successfully connect to PostgreSQL and access the metrics. It attempts to query pg_stat_database and reports success or failure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/db-observability.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -h <server> -U datadog postgres -c \\ \"select * from pg_stat_database LIMIT(1);\" && echo -e \"\\e[0;32mPostgres connection - OK\\e[0m\" || \\ || echo -e \"\\e[0;31mCannot connect to Postgres\\e[0m\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Table with Apollo Federation in Hasura\nDESCRIPTION: API request to track a table with Apollo Federation enabled, setting the @key directive based on the table's primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pg_track_table\",\n  \"args\": {\n    \"table\": \"user\",\n    \"schema\": \"public\",\n    \"apollo_federation_config\": {\n        \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BigQuery Environment Variables in Bash\nDESCRIPTION: Exports BigQuery project ID and service account key for testing the BigQuery backend.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export HASURA_BIGQUERY_PROJECT_ID=??? # The project ID\n$ export HASURA_BIGQUERY_SERVICE_KEY=??? # The service account key\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on Discount aggregate functions, including count and nested aggregations for description and percentage fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\ninput Discount_aggregate_order_by @oneOf {\n  _count: order_by # WARN: Potential name clash here\n  # Scalar fields\n  Description: String_aggregate_order_by\n  Percentage: Decimal_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query to AST in Rust\nDESCRIPTION: A Rust representation of a parsed GraphQL query. The AST shows a simple query with two fields ('pet' and 'faveSnack') including source position information for each element in the syntax tree.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0002_selection_simple.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"pet\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 7,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"faveSnack\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 13,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 13,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 1,\n                            },\n                            end: SourcePosition {\n                                line: 4,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 4,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Hasura CLI Commands in SASS\nDESCRIPTION: Presents the options inherited from parent commands that can be used with 'hasura update-cli'. These include options for specifying environment files, log levels, color output, project directory, and update checks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_update-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Link for Next.js\nDESCRIPTION: Special implementation of the WebSocket link for Next.js applications to ensure it only initializes on the client side.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/subscriptions/integrations/apollo-subscriptions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst wsLink = typeof window !== \"undefined\" ? new GraphQLWsLink(createClient({\n  url: 'ws://vast-fawn-54.hasura.app/v1/graphql',\n})) : null;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP Header Capitalization in API Requests\nDESCRIPTION: Example of proper HTTP header formatting with first-letter capitalization for each word. This style should be used consistently in all HTTP code blocks.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/code-blocks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nFirst-Letter-Capitalized-Like-This\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Error Response Schema\nDESCRIPTION: Schema for error response when mutation fails.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-upsert-mutations.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{ errors {\n    extensions\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Contributing Guidelines for Auth Webhook Boilerplates\nDESCRIPTION: Guidelines for contributing new auth webhook boilerplates to the repository, including directory naming conventions and README documentation requirements.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Boilerplates for auth webhooks\n\nThis directory is a compilation of code samples (boilerplates) that can be used to implement custom auth webhooks for the Hasura GraphQL engine. \n\n## Contributing\n\n- Please fork this repo and submit a PR with your changes\n- Please create a directory name, lowercase, hyphenated\n- Please add a helpful README that has the following sections:\n  - Overview\n  - Deployment instructions\n  - Creation of any specific environment variables or secrets\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Cloud Function Webhook\nDESCRIPTION: This bash command shows the endpoint created after deploying the Firebase Cloud Function. The endpoint will be used as the authentication webhook for Hasura GraphQL.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/firebase-cloud-functions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://us-central1-xxxxx-auth.cloudfunctions.net/hasuraWebhook\n```\n\n----------------------------------------\n\nTITLE: Defining Float Boolean Expression Input Type in GraphQL\nDESCRIPTION: GraphQL input type for creating boolean expressions to filter float values. Includes logic operators and comparison operators specific to float values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_45\n\nLANGUAGE: graphql\nCODE:\n```\ninput Float_bool_exp {\n  # Logic operators\n  _and: [Float_bool_exp!]\n  _or: [Float_bool_exp!]\n  _not: Float_bool_exp\n\n  # Comparisons\n  _eq: Float\n  _gt: Float\n  _gte: Float\n  _in: [Float!]\n  _is_null: Boolean\n  _lt: Float\n  _lte: Float\n  _neq: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for documentation page metadata, including description, keywords, and sidebar settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/observability-best-practices.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Observability best practices\nkeywords:\n  - hasura\n  - docs\n  - best practices\nsidebar_label: Best Practices\nsidebar_position: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Google Cloud Function Trigger URL\nDESCRIPTION: This YAML snippet shows the structure of the response containing the HTTP trigger URL for the deployed Google Cloud Function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/python/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttpsTrigger:\n  url: https://us-central1-hasura-test.cloudfunctions.net/python-echo\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AST Structure in Rust\nDESCRIPTION: This code snippet shows the structure of a GraphQL AST in Rust. It includes nested fields, arguments, directives, and source positions for each element. The structure appears to be part of a larger AST representation for a GraphQL query or mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0031_variables_with_default.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\narguments: None,\ndirectives: [],\nselection_set: None,\n},\n),\nstart: SourcePosition {\n    line: 2,\n    col: 5,\n},\nend: SourcePosition {\n    line: 2,\n    col: 10,\n},\n},\n],\n},\nstart: SourcePosition {\n    line: 1,\n    col: 61,\n},\nend: SourcePosition {\n    line: 3,\n    col: 1,\n},\n},\n},\n),\nstart: SourcePosition {\n    line: 1,\n    col: 1,\n},\nend: SourcePosition {\n    line: 3,\n    col: 1,\n},\n},\n],\n},\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphQL Parser Error for Invalid Fragment Name in Rust\nDESCRIPTION: This code shows the structured error output from Hasura's GraphQL engine when a fragment is incorrectly named 'on'. The error is wrapped in a Positioned struct that provides line and column information for where the error occurred in the source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0007_fragment_definition_with_invalid_fragment_name.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: OtherError(\n            \"A fragment may not be named \\\"on\\\". Maybe you forgot the name?\",\n        ),\n        position: SourcePosition {\n            line: 1,\n            col: 10,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Teardown in Haskell\nDESCRIPTION: Example of modifying a test fixture to prevent teardown for debugging purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_7\n\nLANGUAGE: haskell\nCODE:\n```\nspec :: SpecWith GlobalTestEnvironment\nspec =\n  Fixture.run\n    [ Fixture.fixture (Fixture.Backend Sqlserver.backendTypeMetadata)\n        { Fixture.mkLocalTestEnvironment = Fixture.noLocalTestEnvironment,\n          setupTeardown = \\testEnv ->\n            [ Fixture.SetupAction\n               { Fixture.setupAction = SqlServer.setup schema testEnv,\n-                Fixture.teardownAction = \\_ -> SqlServer.teardown schema testEnv\n+                Fixture.teardownAction = \\_ -> pure ()\n               }\n            ]\n        }]\n```\n\n----------------------------------------\n\nTITLE: Exposing Hasura via LoadBalancer\nDESCRIPTION: Expose the Hasura deployment using a LoadBalancer service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-kubernetes-engine-cloud-sql.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl expose deploy/hasura \\\n     --port 80 --target-port 8080 \\\n     --type LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Import Components in JavaScript\nDESCRIPTION: This code snippet imports three components: Thumbnail, HeadingIcon, and ProductBadge from a site path. These components are likely used for UI elements within the Hasura Cloud documentation platform. Dependencies include the '@site/src/components' module path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Test Setup in Bash\nDESCRIPTION: Starts the necessary Docker containers for testing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Apollo Federation Config for BigQuery Table using HTTP POST\nDESCRIPTION: This HTTP POST request sets the Apollo Federation configuration for a BigQuery table named 'author_details'. It enables Apollo Federation v1, allowing the table type to be used in other subgraphs.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/table-view.mdx#2025-04-17_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bigquery_set_apollo_federation_config\",\n  \"args\": {\n    \"table\": \"author_details\",\n    \"source\": \"default\",\n    \"apollo_federation_config\": {\n      \"enable\": \"v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Translation for Complex Update\nDESCRIPTION: SQL equivalent of the complex JSON field renaming operation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE ... SET data = JSON_MODIFY(JSON_MODIFY(data, 'lax $.new', JSON_QUERY(data, 'lax $.old')), 'lax $.old', JSON_VALUE('null'))\n```\n\n----------------------------------------\n\nTITLE: Constructing API Query Parameters for Hasura GraphQL Engine\nDESCRIPTION: This URL query string specifies fields to select for Artist and Track entities, sets a page limit, and includes related Albums and Tracks. It's used to fetch specific data from a music database through the Hasura GraphQL Engine API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/include/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nfields[Artist]=ArtistId,Name&fields[Track]=TrackId,Name,Composer&page[limit]=1&include=Albums,Albums.Tracks\n```\n\n----------------------------------------\n\nTITLE: Externally Tagged Enum Implementation\nDESCRIPTION: Example of an enum implementation using the externally tagged approach. The JSON object is structured with the variant name as a property name and the variant contents as that property's value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(OpenDd)]\n#[opendd(externally_tagged)]\nenum ExternallyTaggedEnum {\n    VariantOne(VariantOneStruct),\n    VariantTwo(VariantTwoStruct),\n}\n\n#[derive(Debug, PartialEq, OpenDd)]\nstruct VariantOneStruct {\n    prop_a: String,\n    prop_b: i32,\n}\n\n#[derive(Debug, PartialEq, OpenDd)]\nstruct VariantTwoStruct {\n    prop_1: bool,\n    prop_2: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Root Relative Path Example\nDESCRIPTION: Demonstration of using root relative paths for document linking that starts after the 'latest' directory level.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[MDX Root Relative Actions Link](/actions/overview.mdx)\n```\n\n----------------------------------------\n\nTITLE: Building GraphQL Engine with Cabal\nDESCRIPTION: Updates Cabal package database and builds the GraphQL Engine executable. The -j4 flag limits the build to using 4 cores in parallel.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncabal update\ncabal build exe:graphql-engine -j4\n```\n\n----------------------------------------\n\nTITLE: Updating Track Data with GraphQL Mutation in Hasura\nDESCRIPTION: This GraphQL mutation updates a Track row by setting the UnitPrice and incrementing the Milliseconds. It demonstrates the use of the update_Track mutation with where clause and returning fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_64\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateTrack {\n  update_Track(\n    where: { TrackId: { _eq: 1 } },\n    _set: { UnitPrice: 2.50 },\n    _inc: { Milliseconds: 100 }\n    ) {\n    affected_rows\n    returning {\n      TrackId\n      Milliseconds\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: A Rust representation of a parsed GraphQL query showing the abstract syntax tree (AST) structure. The query fetches pet data with aliased fields and nested selections for birthday information. Includes source position tracking for error reporting.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0004_selection_with_fields_aliases_arguments.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"pet\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 7,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: Some(\n                                                    Spanning {\n                                                        item: SelectionSet {\n                                                            items: [\n                                                                Spanning {\n                                                                    item: Field(\n                                                                        Field {\n                                                                            alias: Some(\n                                                                                Spanning {\n                                                                                    item: Alias(\n                                                                                        Name(\n                                                                                            \"name\",\n                                                                                        ),\n                                                                                    ),\n                                                                                    start: SourcePosition {\n                                                                                        line: 4,\n                                                                                        col: 9,\n                                                                                    },\n                                                                                    end: SourcePosition {\n                                                                                        line: 4,\n                                                                                        col: 12,\n                                                                                    },\n                                                                                },\n                                                                            ),\n                                                                            name: Spanning {\n                                                                                item: Name(\n                                                                                    \"nickname\",\n                                                                                ),\n                                                                                start: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 15,\n                                                                                },\n                                                                                end: SourcePosition {\n                                                                                    line: 4,\n                                                                                    col: 22,\n                                                                                },\n                                                                            },\n                                                                            arguments: None,\n                                                                            directives: [],\n                                                                            selection_set: None,\n                                                                        },\n                                                                    ),\n                                                                    start: SourcePosition {\n                                                                        line: 4,\n                                                                        col: 15,\n                                                                    },\n                                                                    end: SourcePosition {\n                                                                        line: 4,\n                                                                        col: 22,\n                                                                    },\n                                                                },\n                                                                Spanning {\n                                                                    item: Field(\n                                                                        Field {\n                                                                            alias: None,\n                                                                            name: Spanning {\n                                                                                item: Name(\n                                                                                    \"birthday\",\n                                                                                ),\n                                                                                start: SourcePosition {\n                                                                                    line: 5,\n                                                                                    col: 9,\n                                                                                },\n                                                                                end: SourcePosition {\n                                                                                    line: 5,\n                                                                                    col: 16,\n                                                                                },\n                                                                            },\n                                                                            arguments: None,\n                                                                            directives: [],\n                                                                            selection_set: Some(\n                                                                                Spanning {\n                                                                                    item: SelectionSet {\n                                                                                        items: [\n                                                                                            Spanning {\n                                                                                                item: Field(\n                                                                                                    Field {\n                                                                                                        alias: None,\n                                                                                                        name: Spanning {\n                                                                                                            item: Name(\n                                                                                                                \"month\",\n                                                                                                            ),\n                                                                                                            start: SourcePosition {\n                                                                                                                line: 6,\n                                                                                                                col: 13,\n                                                                                                            },\n                                                                                                            end: SourcePosition {\n                                                                                                                line: 6,\n                                                                                                                col: 17,\n                                                                                                            }\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura CLI project\nDESCRIPTION: This command initializes a Hasura CLI project locally. It creates the necessary directory structure for managing metadata and migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura init <project-name>\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Patch Changes\nDESCRIPTION: Compares the newly patched file with its backup to verify changes were applied correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/codegen/HOW-TO-UPDATE.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndiff commands.json.new commands.json.new.orig\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query into AST in Rust\nDESCRIPTION: Demonstrates the parsed AST structure of a GraphQL query named 'myQuery' that includes two variable definitions ('var' and 'varOther') and two field selections ('animal' and 'treat'). The structure shows detailed source positioning and type information for each node.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0021_operation_type_definition_with_arguments.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"myQuery\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 13,\n                                },\n                            },\n                        ),\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"var\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 16,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 18,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"input\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 21,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 25,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 15,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 25,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"varOther\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 28,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 35,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"otherInput\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 38,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 47,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 27,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 47,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 14,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 48,\n                                },\n                            },\n                        ),\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"animal\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 10,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 10,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"treat\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 9,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n```\n\n----------------------------------------\n\nTITLE: Creating Action Permission with Hasura Metadata API\nDESCRIPTION: This snippet shows how to create a permission for an action, making it visible to a specific role using the Hasura Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/actions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"create_action_permission\",\n  \"args\": {\n    \"action\": \"create_user\",\n    \"role\": \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Crates for OpenDDS Derive Macro in Rust\nDESCRIPTION: This snippet demonstrates the necessary crate imports for using the OpenDDS derive macro. It requires the 'opendds' crate with the 'derive' feature and the 'strum' crate for variant names functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_12\n\nLANGUAGE: Rust\nCODE:\n```\nuse opendds::derive::OpenDd;\nuse strum::VariantNames;\n```\n\n----------------------------------------\n\nTITLE: Build Server Command\nDESCRIPTION: Command to serve the built documentation site locally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Cabal Project Configuration\nDESCRIPTION: Creates a symbolic link from the prepared Cabal configuration file to the standard location. This allows for easier management of the build configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/COMPILING-ON-MACOS.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nln -s cabal/dev-sh.project.local cabal.project.local\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Flask GraphQL Application\nDESCRIPTION: Lists required Python packages with version specifications for a Flask application with GraphQL support. Includes core dependencies for Flask web framework, GraphQL integration, database connectivity via SQLAlchemy and PostgreSQL, and Gunicorn server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/python/flask-graphene-sqlalchemy/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFlask==1.0.2\nFlask-GraphQL==2.0.0\ngunicorn==19.9.0\nsqlalchemy\npsycopg2\ngraphene[sqlalchemy]\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Global configuration options inherited from parent commands including endpoint configuration, authentication, and execution parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_drop.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Filtering using Exists Expression on Unrelated Table\nDESCRIPTION: This JSON snippet demonstrates a filtering condition that checks if an unrelated administrators table contains an admin with the username 'superuser', affecting the rows returned from the original table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"exists\",\n  \"in_table\": {\n    \"type\": \"unrelated\",\n    \"table\": [\"administrators\"]\n  },\n  \"where\": {\n    \"type\": \"binary_op\",\n    \"operator\": \"equal\",\n    \"column\": {\n      \"name\": \"username\",\n      \"column_type\": \"string\"\n    },\n    \"value\": {\n      \"type\": \"scalar\",\n      \"value\": \"superuser\",\n      \"value_type\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video\nDESCRIPTION: This snippet illustrates how to embed a YouTube video within the documentation for enhanced user engagement, providing a visual tutorial on Hasura Caching features.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<iframe\n  src=\"https://www.youtube.com/embed/QLaXWQmMF-8\"\n  frameBorder=\"0\"\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Deleting Event Trigger - MSSQL\nDESCRIPTION: This snippet demonstrates how to delete an existing event trigger in the Hasura GraphQL engine using the `mssql_delete_event_trigger` API. It specifies the name of the event trigger to be deleted and the source database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"mssql_delete_event_trigger\",\n    \"args\" : {\n        \"name\": \"sample_trigger\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Resource Management Example in Haskell\nDESCRIPTION: Shows a nested structure of resource management using multiple 'withX' functions, demonstrating the potential complexity and readability issues.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nmain = do\n  withLoggers \\loggers -> do\n    withPGPool \\pgPool -> do\n      withMSSQLPool \\mssqlPool -> do\n        withMetadataConnection \\metadataDB -> do\n          runEngine loggers pgPool mssqlPool metadataDB\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontmatter in Docusaurus Markdown\nDESCRIPTION: Example of frontmatter implementation for Hasura GraphQL Engine documentation. Shows the basic structure including title, description, and keywords metadata fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\ntitle: Hasura GraphQL Engine Documentation\ndescription: Hasura GraphQL Engine Documentation\nkeywords: - hasura - docs - manual - graphql engine\n\n---\n```\n\n----------------------------------------\n\nTITLE: Project Metadata Configuration\nDESCRIPTION: YAML metadata configuration defining the document authors and discussion links for the MySQL permissions implementation project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/permissions-mysql.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors: Philip Lykke Carlsen <philip@hasura.io>\ndiscussion:\n  https://github.com/hasura/graphql-engine-mono/pull/2183\nstate: published\n---\n```\n\n----------------------------------------\n\nTITLE: Thumbnail for Adding Collaborator\nDESCRIPTION: This snippet shows an image representation of the interface used to add collaborators in a project. It visually guides users on the process of inviting new collaborators in the Hasura Console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Thumbnail src=\"/img/projects/add-collaborator.png\" alt=\"Add collaborator\" width=\"450px\" />\n```\n\n----------------------------------------\n\nTITLE: Refactoring with Better Structure Instead of Comments in Haskell\nDESCRIPTION: Illustrates how to improve code readability by using appropriate structure (where clauses) instead of relying on comments. The code is self-documenting through its structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_20\n\nLANGUAGE: haskell\nCODE:\n```\nrunSelectQuery tables constraints cache shouldPrepare =\n  constructQuery >>= executeQuery\n  where\n    constructQuery = do\n      select <- buildSelect tables\n      conditions <- traverse buildCondition constraints\n      query <- buildQuery select conditions\n\n    executeQuery = do\n      plan <- cacheLookup query (generateQueryPlan query) cache\n      prepared <- if shouldPrepare then prepareQueryPlan plan else pure plan\n      runQueryPlan prepared\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Function Template\nDESCRIPTION: Command to create a new Netlify function using the Hasura template\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nntl functions:create # and pick the hasura template\n```\n\n----------------------------------------\n\nTITLE: Installing Zeit Now CLI\nDESCRIPTION: Command to globally install the Now CLI tool via npm package manager\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g now\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-route Engine Plugins for Restify Middleware in Hasura\nDESCRIPTION: Example of OpenDD metadata for configuring pre-route engine plugins, which can be used to implement functionalities like restify middleware. It shows how to set up URL matching patterns, HTTP methods, and request forwarding configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: route\n  name: restified_endpoints\n  url:\n    value: http://localhost:5001/restified\n  config:\n    match: \"/v1/api/rest/*\"\n    matchMethods: [\"GET\", \"POST\"]\n    request:\n      method: POST\n      headers:\n        forward:\n          - Authorization\n        additional:\n          hasura-m-auth:\n            value: \"your-strong-m-auth-key\"\n      rawRequest:\n        path: {}\n        query: {}\n        method: {}\n        body: {}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Reference Links\nDESCRIPTION: Example of using reference-style links in markdown to avoid repetition and improve maintainability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: Generated Heading ID Example in Markdown\nDESCRIPTION: Shows how Docusaurus automatically generates kebab-case IDs for headings and how to link to them\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Heading H2 example\n\n<!-- will have a generated id as below -->\n\nheading-h2-example\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This snippet shows the import statements for React components used in the Markdown documentation. It includes components for thumbnails, heading icons, and product badges.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/account-management/billing/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Adding Column with Default Value (Recommended)\nDESCRIPTION: Demonstrates the preferred way to add a new column with a default value. This approach breaks the operation into multiple steps to minimize locking and improve performance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/migration-guidelines.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE <table>\nADD COLUMN col1 INT;\n\nUPDATE <table>\nSET col1 = 1;\n\nALTER TABLE <table>\n  ALTER COLUMN col1 SET DEFAULT 1\n  ALTER COLUMN col1 SET NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Running Local Bash Version of Hasura Edit PG Dump\nDESCRIPTION: Command to use the local Bash script version of the Hasura Edit PG Dump tool. This script performs the same cleaning operations as the serverless function but locally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/scripts/edit-pg-dump/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./edit-pg-dump.sh filename.sql\n```\n\n----------------------------------------\n\nTITLE: Patching New Commands File\nDESCRIPTION: Applies the saved Hedis-specific changes to the new Redis commands file while creating a backup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/codegen/HOW-TO-UPDATE.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npatch -b commands.json.new my-changes.diff\n```\n\n----------------------------------------\n\nTITLE: Current SQL Query Implementation\nDESCRIPTION: Example of the current SQL query structure showing how joins and limits are handled before optimization.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/limit-over-join-optimization.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n  FROM <base-table> LEFT JOIN <other-table>\n LIMIT <limit>;\n```\n\n----------------------------------------\n\nTITLE: Filtering MediaType Records with URL Query Parameters\nDESCRIPTION: A URL query string that filters MediaType records by specifying field selection, equality conditions, and pagination limits. The query targets records with MediaTypeId equal to 1 and Name equal to 'MPEG audio file', limiting results to 10 items.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/filtering/MediaType.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[MediaType]=Name&filter={\"MediaTypeId\":{\"$equals\": 1},\"Name\":{\"$eq\": \"MPEG audio file\"}}&page[limit]=10\n```\n\n----------------------------------------\n\nTITLE: Setting Developer Name Environment Variable for Terraform\nDESCRIPTION: Sets an environment variable to identify the developer in Terraform commands, preventing conflicts between multiple users. This uses the developer's Hasura email name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export TF_VAR_name='tanmaigopal'\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Migration Link\nDESCRIPTION: Markdown formatted link directing users to the new repository location for the json2graphql project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/tools/json2graphql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## This project has been moved to [hasura/json2graphql](https://github.com/hasura/json2graphql)\n```\n\n----------------------------------------\n\nTITLE: New Branch Creation\nDESCRIPTION: Command to create and switch to a new branch for documentation changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <your-name>/docs/<short-update-description>\n```\n\n----------------------------------------\n\nTITLE: Rendering ProductBadge Component in JSX\nDESCRIPTION: This code snippet renders the imported ProductBadge component with a 'self' prop. It's placed within the markdown content to display a product-specific badge.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/release-notes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductBadge self />\n```\n\n----------------------------------------\n\nTITLE: Creating New Cabal Sub-Configuration Helper Function in Bash\nDESCRIPTION: A bash function that helps create new cabal sub-configurations by setting up the necessary symlinks and empty project.local file. This function navigates to the cabal directory, creates symlinks to the main cabal.project and cabal.project.freeze files, and creates an empty local configuration file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cabal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfunction hasura_new_sub_config () {\n    cd \"$(git rev-parse --show-toplevel)/cabal\"\n    ln -s ../cabal.project.freeze \"$1.project.freeze\"\n    ln -s ../cabal.project \"$1.project\"\n    touch \"$1.project.local\"\n    echo \"continue editing: $1.project.local\"\n    cd - &>/dev/null\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Hasura Scripts Command in SASS\nDESCRIPTION: This code snippet shows the available options for the 'hasura scripts' command, including the help option.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for scripts\n```\n\n----------------------------------------\n\nTITLE: GraphQL AST Node Structure in Rust\nDESCRIPTION: This code snippet shows the structure of a GraphQL AST (Abstract Syntax Tree) in Rust, particularly representing fields in a query with source position tracking. Each node includes information about its location in the source code with line and column numbers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0022_operation_type_definition_with_arguments_and_directives.txt#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 10,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 10,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"treat\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 9,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 9,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 70,\n                            },\n                            end: SourcePosition {\n                                line: 4,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 4,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Haskell SQL Generation Test\nDESCRIPTION: Unit test example for testing SQL generation in Haskell, specifically for MSSQL delete operations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nmodule Hasura.Backends.MSSQL.FromIRTest\n  ( spec,\n  )\nwhere\n\nimport Control.Monad.Validate (runValidate)\nimport Database.ODBC.SQLServer\nimport Debug.Trace qualified as D\nimport Hasura.Backends.MSSQL.FromIr\nimport Hasura.Backends.MSSQL.Types.Internal hiding (FieldName)\nimport Hasura.Backends.MSSQL.Types.Internal qualified as MSSQL\nimport Hasura.Prelude\nimport Hasura.RQL.IR\nimport Hasura.RQL.Types\nimport Language.GraphQL.Draft.Syntax\nimport Test.Hspec\n\nspec :: Spec\nspec =\n  describe \"Translate Delete\" $\n    it \"AnnDel to Delete\" $ do\n      runValidate (runFromIr (fromDelete input)) `shouldSatisfy` thing\n  where\n    thing =\n      \\case\n        Left _ -> False\n        Right x -> D.traceShow x True\n```\n\n----------------------------------------\n\nTITLE: Logging into Netlify CLI\nDESCRIPTION: Command to authenticate with Netlify CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nntl login\n```\n\n----------------------------------------\n\nTITLE: Import Thumbnail Component\nDESCRIPTION: React/JSX import statement for a Thumbnail component used in the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/observability-best-practices.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Agent Docker Image\nDESCRIPTION: Docker build command to create the SQLite agent image from the dc-agents/sqlite directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/test/TESTING.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker build . -t sqlite-agent\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query AST Definition in Rust\nDESCRIPTION: Rust structure representing a parsed GraphQL query AST with variable definitions and field selections. The query includes a height parameter of type [Int] and selects id and trees fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0036_parses_variable_definition_with_list_type.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"height\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 9,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 14,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: List(\n                                                        TypeContainer {\n                                                            base: Named(\n                                                                TypeName(\n                                                                    Name(\n                                                                        \"Int\",\n                                                                    ),\n                                                                ),\n                                                            ),\n                                                            nullable: true,\n                                                        },\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 17,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 21,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 8,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 21,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 22,\n                                },\n                            },\n                        ),\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"id\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 6,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 6,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"trees\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 3,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 3,\n                                                        col: 9,\n                                                    },\n                                                },\n                                                arguments: Some(\n                                                    Spanning {\n                                                        item: [\n                                                            Spanning {\n                                                                item: KeyValue {\n                                                                    key: Spanning {\n                                                                        item: Name(\n                                                                            \"height\",\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 11,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 16,\n                                                                        },\n                                                                    },\n                                                                    value: Spanning {\n                                                                        item: Variable(\n                                                                            Name(\n                                                                                \"height\",\n                                                                            ),\n                                                                        ),\n                                                                        start: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 19,\n                                                                        },\n                                                                        end: SourcePosition {\n                                                                            line: 3,\n                                                                            col: 25,\n                                                                        },\n                                                                    },\n                                                                },\n                                                                start: SourcePosition {\n                                                                    line: 3,\n                                                                    col: 11,\n                                                                },\n                                                                end: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Example Response from update_many Operation in JSON\nDESCRIPTION: JSON response structure returned from the update_many operation showing the results of multiple updates with affected row counts and returning data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"update_artist_many\": [\n      {\n        \"affected_rows\": 3,\n        \"returning\": [\n          {\n            \"id\": 1,\n            \"name\": \"first\"\n          },\n          {\n            \"id\": 2,\n            \"name\": \"first\"\n          },\n          {\n            \"id\": 3,\n            \"name\": \"first\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 1,\n        \"returning\": [\n          {\n            \"id\": 2,\n            \"name\": \"second\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 2,\n        \"returning\": [\n          {\n            \"id\": 3,\n            \"name\": \"third\"\n          },\n          {\n            \"id\": 4,\n            \"name\": \"third\"\n          }\n        ]\n      },\n      {\n        \"affected_rows\": 1,\n        \"returning\": [\n          {\n            \"id\": 1,\n            \"name\": \"done\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parsed Literals with HTML in Docusaurus\nDESCRIPTION: Illustrates how to use HTML tags to create parsed literals in code blocks, allowing for the inclusion of links and preserving indentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"parsed-literal\">\n  <pre>\n<code>\n{`{\n  \"table\"  : `}<a href=\"#tablename\">TableName</a>{`\n  \"column\" : `}<a href=\"#pgcolumn\">PGColumn</a>{`\n}`}\n</code>\n</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Webhook Request Payload Structure for Validate Input\nDESCRIPTION: JSON format of the payload sent to validation webhooks, including version information, role, session variables, and delete operation data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"<version-integer>\",\n    \"role\": \"<role-name>\",\n    \"session_variables\": {\n        \"x-hasura-user-id\": \"<session-user-id>\",\n        \"x-hasura-user-name\": \"<session-user-name>\"\n    },\n    \"data\": {\n      \"input\": \n        {\n            JSON-fied <model_name>_bool_exp!,\n            \"pk_columns\": JSON-fied <model_name>_pk_columns_input! (only included for delete_<mode_name>_by_pk)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Migrations via CLI\nDESCRIPTION: This command applies existing migrations from the previous project to the newly created Hasura project without executing them. It requires the endpoint and admin secret of the new project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/move-project-manual.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --skip-execution --endpoint <new-project-endpoint> --admin-secret <new-project-admin-secret> --all-databases\n```\n\n----------------------------------------\n\nTITLE: Running Python Integration Tests with run.sh\nDESCRIPTION: Demonstrates how to run Python integration tests using the run.sh script, including filtering specific test files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./server/tests-py/run.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./server/tests-py/run.sh -- create_async_action_with_nested_output_and_relation.py\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hoogle Server on Custom Port in Bash\nDESCRIPTION: This command starts a local Hoogle server on a specified custom port, allowing for flexible configuration of the search service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/hoogle.sh serve --port 8181\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Externally Tagged Enum\nDESCRIPTION: Example JSON object that would be parsed into ExternallyTaggedEnum::VariantTwo(VariantTwoStruct) using the externally tagged approach.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variantTwo\": {\n    \"prop1\": true,\n    \"prop2\": \"testing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components for Project Creation - JavaScript\nDESCRIPTION: This snippet imports two components, Thumbnail and ProductBadge, necessary for rendering the project creation UI in a React application. These components are used to enhance the visual presentation and functionality of the project creation interface.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AST Structure in Rust\nDESCRIPTION: This snippet shows a portion of a Rust implementation for representing a GraphQL query's Abstract Syntax Tree. It includes nested structures for fields, selection sets, and source positions, demonstrating how complex GraphQL queries can be modeled in Rust's type system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/9013_emoji_char_in_string_value.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nField {\n    alias: None,\n    name: Spanning {\n        item: Name(\n            \"stuff\",\n        ),\n        start: SourcePosition {\n            line: 4,\n            col: 8,\n        },\n        end: SourcePosition {\n            line: 4,\n            col: 12,\n        },\n    },\n    arguments: None,\n    directives: [],\n    selection_set: Some(\n        Spanning {\n            item: SelectionSet {\n                items: [\n                    Spanning {\n                        item: Field(\n                            Field {\n                                alias: None,\n                                name: Spanning {\n                                    item: Name(\n                                        \"tags\",\n                                    ),\n                                    start: SourcePosition {\n                                        line: 4,\n                                        col: 16,\n                                    },\n                                    end: SourcePosition {\n                                        line: 4,\n                                        col: 19,\n                                    },\n                                },\n                                arguments: None,\n                                directives: [],\n                                selection_set: None,\n                            },\n                        ),\n                        start: SourcePosition {\n                            line: 4,\n                            col: 16,\n                        },\n                        end: SourcePosition {\n                            line: 4,\n                            col: 19,\n                        },\n                    },\n                ],\n            },\n            start: SourcePosition {\n                line: 4,\n                col: 14,\n            },\n            end: SourcePosition {\n                line: 4,\n                col: 21,\n            },\n        },\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotExp Schema in Hasura\nDESCRIPTION: Specifies the schema for NOT logical expressions in boolean conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$not\": BoolExp\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing REST API Query Parameters with Field Selection and Pagination\nDESCRIPTION: A REST API query string that demonstrates selecting specific fields from multiple entities (Artist and Track), implementing pagination with a limit parameter, and including related entities. It shows how to request specific fields (ArtistId, Name for Artist and TrackId, Name, Composer for Track) while limiting results to 1 record and attempting to include an 'Unknown' related entity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/failing/include/Artist.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Artist]=ArtistId,Name&fields[Track]=TrackId,Name,Composer&page[limit]=1&include=Unknown\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Hasura Cloud Documentation\nDESCRIPTION: This code snippet imports React components used in the Hasura Cloud documentation page for account management. It includes icons and badges for visual enhancement of the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/account-management/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport AccountManagement from '@site/static/icons/features/account_management.svg';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Heroku App URL Format\nDESCRIPTION: Shows the URL format for accessing Hasura console after Heroku deployment\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/event-triggers.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://<app-name>.herokuapp.com\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON:API Query Parameters with Pagination and Field Selection\nDESCRIPTION: A URL query string that follows the JSON:API specification to request specific fields and pagination parameters. It selects author_id, first_name, and last_name fields from the Author resource, with pagination set to fetch the first item (offset 0, limit 1).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/failing/select_model/Authors.txt#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nfields[Author]=author_id,first_name,last_name&page[offset]=0&page[limit]=1\n```\n\n----------------------------------------\n\nTITLE: Creating Note Table Schema in Hasura\nDESCRIPTION: SQL table definition for creating a 'note' table with auto-incrementing ID and text columns in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note\n\nColumns:\n\nid     Integer auto-increment\nnote   Text\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Statistics Mode with Debug Version on Linux/BSD\nDESCRIPTION: Example of running a program with mimalloc's statistics mode enabled using the debug version of the library. This provides detailed allocation statistics for analysis.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nenv MIMALLOC_SHOW_STATS=1 LD_PRELOAD=/usr/lib/libmimalloc-debug.so myprogram\n```\n\n----------------------------------------\n\nTITLE: Markdown Header Definition\nDESCRIPTION: Frontmatter metadata configuration for the FAQ documentation page, defining title, description, keywords, and sidebar positioning.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/faq.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Hasura FAQs\ntitle: FAQs\nkeywords:\n  - hasura\n  - docs\n  - FAQs\nsidebar_position: 106\nsidebar_label: FAQs\n# adding index slug in case this root doc becomes a directory later\nslug: faq/index\n---\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key Constraint in SQL for MS SQL Server\nDESCRIPTION: This SQL code is used to drop the foreign key constraint on the 'articles' table in case of a rollback, maintaining the ability to revert migrations if necessary.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE articles\nDROP CONSTRAINT articles_author_id_fkey;\n```\n\n----------------------------------------\n\nTITLE: Filtering BigQuery Articles with _nlike Operator\nDESCRIPTION: Shows how to use the _nlike operator to exclude articles with titles containing the word 'Lorem'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/text-search-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {title: {_nlike: \"%Lorem%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet represents a parsed GraphQL query structure in Rust. It includes nested fields, arguments, and selection sets, with detailed source position tracking for each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0006_selection_with_fragment_spread.txt#2025-04-17_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\ncol: 8,\n},\nend: SourcePosition {\n    line: 12,\n    col: 8,\n},\n},\narguments: Some(\n    Spanning {\n        item: [\n            Spanning {\n                item: KeyValue {\n                    key: Spanning {\n                        item: Name(\n                            \"N\",\n                        ),\n                        start: SourcePosition {\n                            line: 12,\n                            col: 10,\n                        },\n                        end: SourcePosition {\n                            line: 12,\n                            col: 10,\n                        },\n                    },\n                    value: Spanning {\n                        item: SimpleValue(\n                            Integer(\n                                0,\n                            ),\n                        ),\n                        start: SourcePosition {\n                            line: 12,\n                            col: 13,\n                        },\n                        end: SourcePosition {\n                            line: 12,\n                            col: 13,\n                        },\n                    },\n                },\n                start: SourcePosition {\n                    line: 12,\n                    col: 10,\n                },\n                end: SourcePosition {\n                    line: 12,\n                    col: 13,\n                },\n            },\n        ],\n        start: SourcePosition {\n            line: 12,\n            col: 9,\n        },\n        end: SourcePosition {\n            line: 12,\n            col: 14,\n        },\n    },\n),\n},\nstart: SourcePosition {\n    line: 12,\n    col: 7,\n},\nend: SourcePosition {\n    line: 12,\n    col: 14,\n},\n},\n],\nselection_set: Spanning {\n    item: SelectionSet {\n        items: [\n            Spanning {\n                item: Field(\n                    Field {\n                        alias: None,\n                        name: Spanning {\n                            item: Name(\n                                \"a\",\n                            ),\n                            start: SourcePosition {\n                                line: 13,\n                                col: 5,\n                            },\n                            end: SourcePosition {\n                                line: 13,\n                                col: 5,\n                            },\n                        },\n                        arguments: None,\n                        directives: [],\n                        selection_set: None,\n                    },\n                ),\n                start: SourcePosition {\n                    line: 13,\n                    col: 5,\n                },\n                end: SourcePosition {\n                    line: 13,\n                    col: 5,\n                },\n            },\n        ],\n    },\n    start: SourcePosition {\n        line: 12,\n        col: 16,\n    },\n    end: SourcePosition {\n        line: 14,\n        col: 3,\n    },\n},\n},\n),\nstart: SourcePosition {\n    line: 12,\n    col: 3,\n},\nend: SourcePosition {\n    line: 14,\n    col: 3,\n},\n```\n\n----------------------------------------\n\nTITLE: Cloning Hedis Git Repository\nDESCRIPTION: Command to clone the master git repository of Hedis using Git.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git://github.com/informatikr/hedis.git\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Server\nDESCRIPTION: Commands to download and install the latest version of Prometheus from the official GitHub repository to a Debian/Ubuntu system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt -y install wget curl\nmkdir -p /tmp/prometheus && cd /tmp/prometheus\ncurl -s https://api.github.com/repos/prometheus/prometheus/releases/latest |\ngrep browser_download_url | grep linux-amd64 | cut -d '\"' -f 4 | wget -qi -\ntar xvf prometheus*.tar.gz\ncd prometheus*/\nsudo mv prometheus promtool /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Showcasing YAML Indentation and Partial Code Examples\nDESCRIPTION: Demonstrates the correct 2-space indentation for YAML and how to indicate omitted lines in partial code examples for clarity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/code-blocks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkey: value\nnestedKey:\n  subKey: subValue\n...\notherKey: otherValue\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Intermediate Variable Naming in Haskell\nDESCRIPTION: An example showing a less preferred way of handling Maybe values with intermediate variables. This approach requires coming up with multiple variants of the same name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\nargumentM <- parseOptionalArgument userRole value\ncase argumentM of\n  Just argument -> ...\n  Nothing -> ...\n```\n\n----------------------------------------\n\nTITLE: Using ManagedT for Complex Resource Management in Haskell\nDESCRIPTION: Shows how to use ManagedT in a more complex monadic stack, allowing resource allocation in the underlying monad while maintaining the benefits of managed resources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/managed.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\nmain = do\n  appEnv <- getAppEnv\n  runAppM appEnv do\n    -- this block is in `AppM`, which is on top of `IO`\n    lowerManagedT do\n      -- this block is in `ManagedT AppM`\n      foo <- allocate acquireFoo releaseFoo\n      -- we run the engine in the original `AppM`, *without ManagedT*\n      lift $ runEngine foo\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statements\nDESCRIPTION: Import statements for React components used in the documentation page\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/cloud-monitoring/alerting/configure-alerts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ProductBadge from '@site/src/components/ProductBadge';\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Constructing URL Query Parameters for Album Filtering\nDESCRIPTION: URL query string that specifies fields to return (Album Title), applies filters for exact matches on Title and ArtistId, and limits results to 10 records. Uses JSON-structured filtering criteria within URL parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/passing/filtering/Album.txt#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nfields[Album]=Title&filter={\"$and\":[{\"Title\":{\"$eq\": \"Greatest Hits I\"}},{\"ArtistId\":{\"$eq\": 51}}]}&page[limit]=10\n```\n\n----------------------------------------\n\nTITLE: Streaming Subscription Query\nDESCRIPTION: GraphQL subscription query example demonstrating streaming subscriptions with cursor-based pagination and filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription GetUserLatestMessages ($user_id: uuid!) {\n  messages_stream (\n    cursor: {\n      initial_value: {id: 0},\n      ordering: ASC\n    },\n    batch_size: 1,\n    where: {user_id: {_eq: $user_id}}\n  ) {\n    id\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Deprecation Notice in Markdown\nDESCRIPTION: This markdown snippet provides information about the deprecation of console-related code in the Hasura GraphQL Engine project. It includes links to the new README and contribution guidelines.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/console/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- prettier-ignore-start -->\n\n# Deprecated\nPlease note that all console related code has been moved to `frontend` folder in this repo, which uses NX based build system. All old code (now deleted) in this directory has been deprecated as of Feb 7, 2023, or commits since the [v2.18.0-beta.1 tag](https://github.com/hasura/graphql-engine/tree/v2.18.0-beta.1). Please refer to this new [Readme](https://github.com/hasura/graphql-engine/blob/master/frontend/README.md). \n\nMore details on how to contribute can be found [here](https://github.com/hasura/graphql-engine/blob/master/CONTRIBUTING.md)\n```\n\n----------------------------------------\n\nTITLE: Embedded YouTube Video Component\nDESCRIPTION: HTML iframe element for embedding a YouTube video about Hasura observability features, with security and playback settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    src=\"https://www.youtube.com/embed/Y9-43_KcoGY\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Inline Comments for Context in Haskell\nDESCRIPTION: Example of a good inline comment that explains reasoning behind a non-obvious code implementation. This example shows how to provide context about why a function behaves in a particular way.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_17\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nallComparableTypes\n  -- due to casting, we need to generate both geometry and geography operations\n  -- even if just one of the two appears directly in the table schema\n  | anyGeoTypes = geoTypes <> columnTypes\n  | otherwise = columnTypes\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Basic GraphQL schema definition with a single query that returns a String type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/aws-lambda/nodejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello:  String\n}\n```\n\n----------------------------------------\n\nTITLE: Categorizing Errors by Kind in Rust\nDESCRIPTION: Demonstrates how to group similar error variants into nested error types for better organization and handling of errors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/docs/errors.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(thiserror::Error, Debug)]\npub enum UserError {\n    #[error(\"username {0} is not valid\")]\n    InvalidUserName(String),\n    #[error(\"internal error: {0}\")]\n    Internal(#[from] InternalError),\n}\n\n#[derive(thiserror::Error, Debug)]\npub enum InternalError {\n    #[error(\"DB exception: {0}\")]\n    DatabaseException(#[from] DBException),\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Rust Parser Error Structure\nDESCRIPTION: Demonstrates the structure of a parser error in Rust where a 'User' token was found when 'ON' keyword was expected. Includes position information showing the error occurred at line 1, column 23.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0008_fragment_definition_with_invalid_type_condition.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Keyword(\n                    On,\n                ),\n            ],\n            found: Token(\n                Name(\n                    Name(\n                        \"User\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 23,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Product Badge Component\nDESCRIPTION: This snippet renders the ProductBadge component to indicate the type of project (free, pro, enterprise) for the users managing collaborators. This component is essential for user interface clarity regarding project status.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ProductBadge free pro ee />\n```\n\n----------------------------------------\n\nTITLE: Tutorial Verification Main Function in Haskell\nDESCRIPTION: Defines the main function that runs all the example applications (app1 to app6) to verify the tutorial code. This ensures that all code snippets in the tutorial are executable and function as expected.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_9\n\nLANGUAGE: haskell\nCODE:\n```\nmain :: IO ()\nmain = do\n  app1\n  app2\n  app3\n  app4\n  app5\n  app6\n```\n\n----------------------------------------\n\nTITLE: Creating Native Query via CLI in Hasura\nDESCRIPTION: YAML configuration for creating a native query in the metadata/databases/databases.yaml file. It defines the query name, arguments, relationships, SQL code, and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  native_queries:\n    - root_field_name: \"<root field name>\"\n      arguments:\n        \"<argument name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n          array_relationships:\n            - name: \"<relationship name>\"\n              using:\n                column_mapping:\n                  \"<local column>\": \"<remote column>\"\n                remote_native_query: <remote native query name>\"\n          object_relationships: <same as array_relationships>\n          description: \"<text>\"\n          code: \"<SQL query>\"\n          returns: \"<logical model name>\"\n```\n\n----------------------------------------\n\nTITLE: Scope Tags Import Matrix Table\nDESCRIPTION: A markdown table showing the import rules between different scope tags (shared, console, nx-plugins). The matrix indicates which scopes can import from other scopes using checkmark and cross symbols.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/docs/tags.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ![Can row import colum](./can-import-icon.png) | `scope:shared` | `scope:console` | `scope:nx-plugins` |\n| ---------------------------------------------- | :------------: | :-------------: | :----------------: |\n| `scope:shared`                                 |       ✅       |       ⛔        |         ⛔         |\n| `scope:console`                                |       ✅       |       ✅        |         ⛔         |\n| `scope:nx-plugins`                             |       ✅       |       ⛔        |         ✅         |\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP middleware for server metrics collection in Go\nDESCRIPTION: This function creates middleware that wraps an HTTP handler to measure and collect server metrics. It records the time before and after the request is processed, creates a histogram of response times, and sets relevant headers in the response. The function also records system information like memory usage.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/src-rsr/catalog_version.txt#2025-04-17_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithServerMetricsInstrumentation(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tvar memStats runtime.MemStats\n\t\truntime.ReadMemStats(&memStats)\n\t\themBefore := memStats.HeapAlloc\n\n\t\tstarti := time.Now()\n\t\tw.Header().Set(\"X-Hasura-Server-Time\", starti.Format(time.RFC3339Nano))\n\t\tw.Header().Set(\"X-Hasura-Client-IP\", getClientIP(r))\n\n\t\th.ServeHTTP(w, r)\n\n\t\tellapsed := time.Since(starti)\n\n\t\truntime.ReadMemStats(&memStats)\n\t\themAfter := memStats.HeapAlloc\n\n\t\tserverTimings := fmt.Sprintf(\"total;dur=%d.%d total_cpu;dur=%d.%d heap_delta;desc=%d;\", (ellapsed.Nanoseconds()/1000000), ellapsed.Nanoseconds()%1000000, int64(runtime.NumCPU()*1000000), (ellapsed.Nanoseconds()/1000000), (int64(hemAfter) - int64(hemBefore)))\n\t\tw.Header().Set(\"Server-Timing\", serverTimings)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom CLI Extension Binary with pkg\nDESCRIPTION: Commands to build a specific CLI extension binary for a custom target. This approach allows building for different node versions, platforms, and architectures.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pkg\npkg ./build/command.js --output <output-path> -t <node-range>-<platform>-<architecture>\n```\n\n----------------------------------------\n\nTITLE: Hasura React Component Import\nDESCRIPTION: Import statement for a Thumbnail component used to display images in the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Describing ECS Service\nDESCRIPTION: Retrieves detailed information about the running Hasura ECS service using the AWS CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws ecs describe-services --cluster hasura-fargate-cluster --services hasura-fargate-service\n```\n\n----------------------------------------\n\nTITLE: Using ProductBadge Component for Hasura Caching\nDESCRIPTION: This snippet demonstrates the integration of the ProductBadge component to represent the Hasura Enterprise Edition in the documentation, enhancing the visual aspect of the caching feature by indicating its premium availability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ProductBadge from '@site/src/components/ProductBadge';\n<ProductBadge pro ee self />\n```\n\n----------------------------------------\n\nTITLE: Using mimalloc as a drop-in malloc replacement on Linux\nDESCRIPTION: Demonstrates how to use mimalloc as a drop-in replacement for malloc on Linux systems using LD_PRELOAD.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> LD_PRELOAD=/usr/lib/libmimalloc.so  myprogram\n```\n\n----------------------------------------\n\nTITLE: Connecting to AlloyDB via Proxy\nDESCRIPTION: Command to connect to the deployed AlloyDB instance using psql and the connection URL from Terraform output. The URL contains connection credentials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/test-manual/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ psql \"$(terraform output -raw url)\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObjRelUsingManualMapping Schema in Hasura\nDESCRIPTION: Specifies the schema for manual mapping of object relationships, including remote table, column mapping, and insertion order.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote_table\": \"TableName\",\n  \"column_mapping\": \"Object (PGColumn : PGColumn)\",\n  \"insertion_order\": \"InsertOrder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on Customer aggregate functions, including various scalar field aggregations and nested object field aggregations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\ninput Customer_aggregate_order_by @oneOf {\n  # Scalar fields\n  CustomerId: Int_aggregate_order_by\n  FirstName: String_aggregate_order_by\n  LastName: String_aggregate_order_by\n  MobilePhone: String_aggregate_order_by\n  SupportRepId: Int_aggregate_order_by\n\n  # Object relationships & Nested object fields\n  Address: Address_aggregate_order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Properties in YAML\nDESCRIPTION: YAML front matter configuration that defines sidebar position, label and class name for a documentation page about materials.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_materials.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 100\nsidebar_label: 'Materials'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with YAML Frontmatter\nDESCRIPTION: Documentation page metadata including title, description, keywords and sidebar configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hasura CLI\ndescription: Use Hasura's command line tooling\nkeywords:\n  - hasura\n  - docs\n  - CLI\nhide_table_of_contents: true\nsidebar_position: 1\nsidebar_label: Overview\n---\n```\n\n----------------------------------------\n\nTITLE: Primary Command Options in SASS\nDESCRIPTION: Main configuration options for the update-project-v3 command, including admin secret, endpoint configuration, and database settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n    --certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n    --database-name string           database name for which the current migrations / seeds belong to\n    --endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n    --force                          do not ask for confirmation\n-h, --help                           help for update-project-v3\n    --insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n    --move-state-only                do only a state migration from old hdb_catalog.* table to catalog state and skip others\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Error with Position Information in Rust\nDESCRIPTION: This snippet shows a Rust error structure from a parser that encountered an unexpected token. It indicates that a left brace '{' was expected, but a right brace '}' was found at line 1, column 18.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0040_operation_definition_missing_selection_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: Token(\n                Punctuation(\n                    BraceR,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 18,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Error Response Format using JSON\nDESCRIPTION: This JSON snippet defines the general format for error responses returned by the Agent. It specifies the structure, comprising an error `type`, a human-readable `message`, and an arbitrary `details` field for structured error information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": String,    // A specific error type, see below\n  \"message\": String, // A plain-text message for display purposes\n  \"details\": Value   // An arbitrary JSON Value containing error details\n}\n```\n\n----------------------------------------\n\nTITLE: Unsuccessful Webhook Response Format for Validation\nDESCRIPTION: HTTP response format for unsuccessful validation with status code 400 and optional JSON message that gets forwarded to the client.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\n400 BAD REQUEST\n\n{\n    \"message\": \"Phone number invalid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Player Component to Add Video in Hasura Docs\nDESCRIPTION: This example demonstrates how to use the Player component to embed a video in the Hasura documentation. It specifies the source path for the video file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/images.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Player src=\"/img/<SUBDIRECTORY>/<FILENAME>.webm\" />\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options - SASS\nDESCRIPTION: Additional options inherited from parent commands including authentication, endpoint configuration, and execution parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_inconsistency_status.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Making PG Dump API Request\nDESCRIPTION: Example HTTP POST request to the PG Dump API endpoint showing required headers and request body structure. The request includes options for pg_dump execution and output cleaning.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/pgdump.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1alpha1/pg_dump HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\nX-Hasura-Admin-Secret: <admin-secret>\n\n{\n  \"opts\": [\"-O\", \"-x\", \"--schema-only\", \"--schema\", \"public\"],\n  \"clean_output\": true,\n  \"source\": \"<database-source-name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deployment Package\nDESCRIPTION: Command to create a zip file containing all project resources for deployment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ zip -r graphql.zip *\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote Schema URL in Hasura\nDESCRIPTION: URL for connecting the social networking API as a Remote Schema in Hasura. This URL points to a read-only GraphQL API that provides social networking functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/api-gateway.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://growth-gateway-1.hasura.app/v1/graphql\n```\n\n----------------------------------------\n\nTITLE: Untracking Snowflake SQL Function from GraphQL Schema\nDESCRIPTION: API request to remove the SQL function 'search_articles' from the GraphQL schema. The request requires admin privileges and specifies the function name and source database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/custom-functions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"snowflake_untrack_function\",\n    \"args\": {\n        \"function\": [\"search_articles\"],\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Sampling Metrics in Haskell\nDESCRIPTION: Demonstrates how to create a metric store, register metrics, update metric values, and sample all metrics. This example uses the previously defined AppMetrics1 specification.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\napp1 :: IO ()\napp1 = do\n  -- Create a mutable reference to a metric store.\n  store <- newStore @AppMetrics1 -- (1)\n\n  -- Initialize mutable references to metrics.\n  requestsCounter <- Counter.new\n  connectionsGauge <- Gauge.new\n\n  -- Register the metrics to the metric store.\n  _ <- register store $ -- (2)\n    registerCounter Requests () (Counter.read requestsCounter) <>\n    registerGauge Connections () (Gauge.read connectionsGauge)\n\n  -- Update the values of the metrics.\n  Counter.inc requestsCounter\n  Gauge.set connectionsGauge 99\n\n  -- Get the current values of all the metrics in the store.\n  sample <- sampleAll store -- (3)\n\n  -- Verify the sample, just for this tutorial.\n  let expectedSample = M.fromList\n        [ (\"app_requests\", (\"\", M.singleton HM.empty (Counter 1)))\n        , (\"app_connections\", (\"\", M.singleton HM.empty (Gauge 99)))\n        ]\n  assert (sample == expectedSample) $ pure ()\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Select Permissions with YAML for Hasura\nDESCRIPTION: This YAML snippet demonstrates how to set complex row-level permissions that use the '_and' operator to combine multiple conditions. The rule restricts access to products based on both price and name criteria for the 'user' role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/permissions/row-level-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n\"- table:\\n    schema: public\\n    name: products\\n  select_permissions:\\n    - role: user\\n      permission:\\n        columns: []\\n        filter:\\n          _and:\\n            - price: { _lt: 1000 }\\n            - name: { _ilike: acme% }\"\n```\n\n----------------------------------------\n\nTITLE: Haskell Type Definition for SDL Generation\nDESCRIPTION: Function type signature for generateSDL which converts a schema introspection object into SDL text. This will be used to generate the Federation-compatible schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/apollo-federation.md#2025-04-17_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\ngenerateSDL :: G.SchemaIntrospection -> Text\ngenerateSDL = undefined\n```\n\n----------------------------------------\n\nTITLE: VS Code Extensions Configuration\nDESCRIPTION: JSON configuration for recommended VS Code extensions\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"recommendations\": [\"redhat.vscode-yaml\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Extension Module Documentation\nDESCRIPTION: Markdown documentation for a Rust crate that extends serde_json functionality. The crate provides additional features and extensions to enhance JSON handling capabilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/json-ext/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# json_ext\n\nCrate for extending `serde_json` functionality.\n```\n\n----------------------------------------\n\nTITLE: Building OpenAPI to GraphQL Library with Nx\nDESCRIPTION: Command to build the open-api-to-graphql library using Nx build system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnx build open-api-to-graphql\n```\n\n----------------------------------------\n\nTITLE: Response Structure for replace_metadata API without Warnings\nDESCRIPTION: Standard JSON response structure for successful API calls when no warnings are present. The response simply includes a success message without a warnings field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/warning-in-replace-metadata-API.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"success\"\n}\n```\n\n----------------------------------------\n\nTITLE: Value and String Interpolation Examples\nDESCRIPTION: Demonstrations of value and string interpolation in Kriti templates\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/kriti-templating.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": 1,\n  \"b\": {{ 2 }}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Hello world {{ 1 }}\"\n```\n\n----------------------------------------\n\nTITLE: Closing a GraphQL AST Node Structure in Rust\nDESCRIPTION: This code snippet shows the closing structure of what appears to be a GraphQL Abstract Syntax Tree (AST) node. It contains source position information with line and column numbers, and several closing braces indicating the end of nested structures.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/9013_emoji_char_in_string_value.txt#2025-04-17_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n                end: SourcePosition {\n                    line: 5,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Remote Schema Architecture Diagram in Markdown\nDESCRIPTION: This code snippet shows how to include an architecture diagram for remote schemas in the markdown document. It uses an image link to display the diagram.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Remote schema architecture diagram](../../../assets/remote-schemas-arch.png)\n```\n\n----------------------------------------\n\nTITLE: Example Commit Message Format in Markdown\nDESCRIPTION: Examples showing the correct format for commit messages, emphasizing imperative present tense and 50 character limit for summary line.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nresolve answers to everything (fix #42)\nresolve answers to everything, fix #42\n```\n\n----------------------------------------\n\nTITLE: Using Combinators for Simple Test Cases in Haskell\nDESCRIPTION: Shows how to use combinators for simple test cases where they can be more descriptive than records.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/testing-guidelines.md#2025-04-17_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\n[ [1, 2, 3, 4] `shouldSortTo` [1, 2, 3, 4],\n  [4, 3, 2, 1] `shouldSortTo` [1, 2, 3, 4]\n]\n```\n\n----------------------------------------\n\nTITLE: Importing TOC Components in JSX\nDESCRIPTION: Demonstrates importing necessary components for creating table of contents, including Docusaurus built-in components and custom components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/table-of-contents.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport TOCInline from '@theme/TOCInline';\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport Link from '@docusaurus/Link';\nimport {\n  CustomTOCList,\n  CustomTOCListSection,\n  CustomTOCListHead,\n  CustomTOCListContent,\n} from '@site/src/components/CustomTOCList';\n```\n\n----------------------------------------\n\nTITLE: x_www_form_urlencoded Request Body Transformation (CLI)\nDESCRIPTION: YAML configuration for transforming request body to x_www_form_urlencoded format using Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: POST\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params:\n      query_param: xxxxx\n    body:\n      action: 'x_www_form_urlencoded'\n      form_template:\n        username: '{{$body.table.username}}'\n    request_headers:\n      remove_headers: ['content-type']\n      add_headers:\n        'content-type': 'application/x-www-form-urlencoded'\n```\n\n----------------------------------------\n\nTITLE: Regenerating TypeScript Types from Haskell\nDESCRIPTION: Command to regenerate TypeScript types from Haskell types, update version numbers, and update dependencies\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> make regenerate-types\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Type Invariant Documentation in Haskell\nDESCRIPTION: An example showing poor documentation of type invariants. The invariant is described in a comment instead of being enforced by the type system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_14\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\nnewtype AuthenticationToken\n  = AuthenticationToken\n  { unAuthenticationToken :: Text\n  -- ^ Invariant: contains Base64-encoded binary data.\n  }\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation for Community\nDESCRIPTION: Command to install documentation dependencies for community contributors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd graphql-engine/docs && yarn install\n```\n\n----------------------------------------\n\nTITLE: Update Permission Filter in JSON\nDESCRIPTION: JSON configuration for update permissions specifying which rows can be modified by moderator or admin roles.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/update-permission-check-condition.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"workspace\": {\n    \"members\": {\n      \"user_id\": {\"_eq\": \"x-hasura-user-id\"},\n      \"user_role\": {\"_in\": [\"admin\", \"moderator\"]}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query AST Structure - Rust Implementation\nDESCRIPTION: Detailed AST representation of a GraphQL query named 'getOutput' with two variable definitions ('input' and 'config') and a field selection ('animal'). The structure includes source position tracking and type information for each node.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0031_variables_with_default.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"getOutput\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 15,\n                                },\n                            },\n                        ),\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"input\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 18,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 22,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"Int\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 25,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 27,\n                                                },\n                                            },\n                                            default_value: Some(\n                                                Spanning {\n                                                    item: SimpleValue(\n                                                        Integer(\n                                                            5,\n                                                        ),\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 1,\n                                                        col: 31,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 1,\n                                                        col: 31,\n                                                    },\n                                                },\n                                            ),\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 17,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 31,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"config\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 34,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 39,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"String\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 42,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 47,\n                                                },\n                                            },\n                                            default_value: Some(\n                                                Spanning {\n                                                    item: SimpleValue(\n                                                        String(\n                                                            \"Config\",\n                                                        ),\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 1,\n                                                        col: 51,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 1,\n                                                        col: 58,\n                                                    },\n                                                },\n                                            ),\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 33,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 58,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 16,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 59,\n                                },\n                            },\n                        ),\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"animal\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 5,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 10,\n                                                    },\n                                                },\n```\n\n----------------------------------------\n\nTITLE: Implementing MSSQL Identity Columns with SET IDENTITY_INSERT\nDESCRIPTION: Defines how MSSQL identity columns would work with SET IDENTITY_INSERT enabled, making them not updatable but insertable. This requires specific handling during SQL translation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nIDENTITY(..), with SET IDENTITY_INSERT => not updatable, insertable\n```\n\n----------------------------------------\n\nTITLE: Cabal Dependency Error Message\nDESCRIPTION: Common error message encountered when Cabal cannot resolve dependencies due to frozen index-state.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncabal: Could not resolve dependencies:\n```\n\n----------------------------------------\n\nTITLE: Static Override with gcc Compilation\nDESCRIPTION: Example of statically linking mimalloc to override the standard malloc interface during compilation with gcc. By linking mimalloc.o as the first object file, the standard malloc symbols resolve to mimalloc implementations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngcc -o myprogram mimalloc.o myfile1.c ...\n```\n\n----------------------------------------\n\nTITLE: Loading APIs.guru Test Data - JavaScript\nDESCRIPTION: Script to load APIs.guru APIs test data into the tmp subfolder within the test/evaluation directory\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/test/evaluation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode apis_guru_test.js\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React\nDESCRIPTION: This snippet imports necessary components used for managing project collaborators in a Hasura Cloud project. These components help in the rendering of the user interface elements such as product badges and thumbnails.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/projects/collaborators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport ProductBadge from '@site/src/components/ProductBadge';\n```\n\n----------------------------------------\n\nTITLE: Creating Query Collection - HTTP POST Request\nDESCRIPTION: Creates a new query collection with specified name, optional comment, and definition containing GraphQL queries. The queries are validated against the schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/query-collections.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"create_query_collection\",\n    \"args\": {\n         \"name\": \"my_collection\",\n         \"comment\": \"an optional comment\",\n         \"definition\": {\n             \"queries\": [\n                 {\"name\": \"query_1\", \"query\": \"query { test {id name}}\"}\n              ]\n         }\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Heading Hierarchy Example in Markdown\nDESCRIPTION: Demonstrates the correct usage of heading levels from h1 to h6 using markdown syntax\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is the Main Page Title\n\n## This is a H2 heading\n\n### This is a H3 heading\n\n#### This is a H4 heading\n\n##### This is a H5 heading\n\n###### This is a H6 heading\n```\n\n----------------------------------------\n\nTITLE: Writing a GraphQL Query Test in Haskell\nDESCRIPTION: Example of writing a test case for a GraphQL query using hspec and custom helpers.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/api-tests/README.md#2025-04-17_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\n  it \"Where id=1\" \\testEnvironment -> do\n    let actual :: IO Value\n        actual =\n          postGraphql\n            testEnvironment\n            [graphql|\n              query {\n                hasura_author(where: {id: {_eq: 1}}) {\n                  name\n                  id\n                }\n              }\n            |]\n\n        expected :: Value\n        expected =\n          [yaml|\n            data:\n              hasura_author:\n              - name: Author 1\n                id: 1\n          |]\n\n    actual `shouldReturnYaml` expected\n```\n\n----------------------------------------\n\nTITLE: Request Structure for replace_metadata API with Strict Mode\nDESCRIPTION: Sample JSON request structure showing the new fail_on_warning parameter for enabling strict mode. In strict mode, warnings are treated as errors and prevent metadata changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/warning-in-replace-metadata-API.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fail_on_warning\": ...,\n  \"allow_inconsistent_metadata\": ...,\n  \"metadata\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema for Metadata Versions\nDESCRIPTION: YAML snippet demonstrating how the MetadataDTO sum type can be represented in OpenAPI, using oneOf and a discriminator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  oneOf:\n    - $ref: '#/components/schemas/MetadataV1'\n    - $ref: '#/components/schemas/MetadataV2'\n    - $ref: '#/components/schemas/MetadataV3'\n  discriminator:\n    propertyName: version\n    mapping:\n      1: '#/components/schemas/MetadataV1'\n      2: '#/components/schemas/MetadataV2'\n      3: '#/components/schemas/MetadataV3'\n  properties:\n    version:\n      type: integer\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation for Hasurians\nDESCRIPTION: Command to install documentation dependencies for Hasura employees.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd graphql-engine-mono/docs && yarn install\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Schema\nDESCRIPTION: SQL schema definition for a 'notes' table with id and note fields\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/nodejs/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Using Versioned Links in JSX\nDESCRIPTION: This snippet illustrates how to use the `VersionedLink` component to navigate between different configuration options for RESTified endpoints within a React-based web page. This is part of the user interface in documentation for URL paths towards REST endpoint configurations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/overview.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VersionedLink to=\"/restified/restified-config#configuration-options\">\n  <div className=\"card\">\n    <h3>Configuration Options</h3>\n    <p>Check out the available configuration options for RESTified endpoints.</p>\n  </div>\n</VersionedLink>\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty ExecutableDocument in Rust for GraphQL Parsing\nDESCRIPTION: This code snippet creates an ExecutableDocument struct with an empty items vector, wrapped in an Ok result. It represents a successfully parsed or initialized GraphQL document with no executable items.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0001_empty.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Capturing ETW Traces for mimalloc on Windows\nDESCRIPTION: Example of using Windows Performance Recorder (WPR) to capture Event Tracing for Windows (ETW) data from a mimalloc-enabled application for later analysis with Windows Performance Analyzer or specialized tools.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwpr -start src\\prim\\windows\\etw-mimalloc.wprp -filemode\n<my_mimalloc_program>\nwpr -stop <my_mimalloc_program>.etl\n```\n\n----------------------------------------\n\nTITLE: Development Loop for SQLite Data Connector Agent\nDESCRIPTION: A command using 'entr' to set up a development loop for the SQLite data connector agent, with the DB_READONLY environment variable set.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho src/**/*.ts | xargs -n1 echo | DB_READONLY=y entr -r npm run start\n```\n\n----------------------------------------\n\nTITLE: Allow List Schema Definition\nDESCRIPTION: JSON schema for Hasura allow list configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/README.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"$ref\": \"./HasuraMetadataV2.schema.json#definitions/AllowList\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Video Embed Component\nDESCRIPTION: Embedded YouTube video iframe for Hasura CLI documentation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n    src=\"https://www.youtube.com/embed/MnYhMZBSY-A\"\n    frameBorder=\"0\"\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Error Structure Pattern in Rust\nDESCRIPTION: Shows a nested error structure that includes both an error message and source position information. The error indicates that at least one item must be specified, with the error occurring at line 1, column 8.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0029_operation_definition_with_empty_selection_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: OtherError(\n            \"At least one item must be specified\",\n        ),\n        position: SourcePosition {\n            line: 1,\n            col: 8,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Function for Note Revision Tracking\nDESCRIPTION: JavaScript AWS Lambda function that handles Hasura Event Trigger events. When a note is updated, it captures the old note data and inserts it into the note_revision table using a GraphQL mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/serverless.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Lambda which gets triggered on insert, and in turns performs a mutation\n\nconst fetch = require('node-fetch');\n\nconst adminSecret = process.env.ADMIN_SECRET;\nconst hgeEndpoint = process.env.HGE_ENDPOINT;\n\nconst query = `\n  mutation updateNoteRevision ($noteId: Int!, $data: String!) {\n    insert_note_revision (objects: [\n      {\n        note_id: $noteId,\n        note: $data\n      }\n    ]) {\n      affected_rows\n    }\n  }`;\n\nexports.handler = (event, context, callback) => {\n  let request;\n  try {\n    request = JSON.parse(event.body);\n  } catch (e) {\n    return callback(null, { statusCode: 400, body: 'cannot parse hasura event' });\n  }\n\n  const response = {\n    statusCode: 200,\n    body: 'success',\n  };\n  const qv = { noteId: request.event.data.old.id, data: request.event.data.old.note };\n  fetch(hgeEndpoint + '/v1/graphql', {\n    method: 'POST',\n    body: JSON.stringify({ query: query, variables: qv }),\n    headers: { 'Content-Type': 'application/json', 'x-hasura-admin-secret': adminSecret },\n  })\n    .then(res => res.json())\n    .then(json => {\n      console.log(json);\n      callback(null, response);\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema Permissions via HTTP POST\nDESCRIPTION: HTTP POST request to add Remote Schema permissions for the 'user' role using the Hasura Metadata API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"add_remote_schema_permissions\",\n    \"args\" : {\n        \"remote_schema\" : \"user_messages\",\n        \"role\" : \"user\",\n        \"definition\" : {\n            \"schema\" : \"type User {     user_id: Int     name: String     userMessages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]   }    interface Communication {     id: Int!     msg: String!   }    type Message implements Communication {     id: Int!     name: String!     msg: String!     errorMsg: String   }    input MessageWhereInpObj {     name: StringCompareObj   }    input IntCompareObj {     eq : Int     gt : Int     lt : Int   }    input StringCompareObj {     eq : String   }    input IncludeInpObj {     id: [Int]     name: [String]   }    type Query {     hello: String     messages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]     user(user_id: Int! @preset(value: \\\"x-hasura-user-id\\\")): User   }    schema {     query: Query  }\"\n        },\n       \"comment\":\"remote schema permissions for role: user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Column Type Change Using Transformational Approach (Not Recommended)\nDESCRIPTION: Shows how to change a column type from boolean to timestamp using a direct transformation approach. This method is not recommended as it acquires a lock on the table until all rows are transformed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/migration-guidelines.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE hdb_catalog.event_log ALTER COLUMN locked TYPE TIMESTAMPTZ USING CASE WHEN locked THEN NOW() ELSE NULL END;\n```\n\n----------------------------------------\n\nTITLE: Dropping a Computed Field using HTTP POST in Hasura schema/Metadata API\nDESCRIPTION: Removes the computed field 'full_name' from the 'author' table. The request is sent as an HTTP POST to the /v1/query endpoint with JSON payload. The 'cascade' option is set to false, meaning dependent objects will not be automatically dropped.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/computed-field.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"drop_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"schema\":\"public\"\n        },\n        \"name\":\"full_name\",\n        \"cascade\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Thumbnail Component in React JSX\nDESCRIPTION: This snippet demonstrates how to import the Thumbnail component and use it in a React application. It shows the basic usage with props for source, alt text, and width.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/thumbnail.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/account-management/billing/add_new_card.png\"\n  alt=\"add a new card\"\n  width=\"437px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Structure in Rust for GraphQL Operations\nDESCRIPTION: Shows the structure of a parsing error where an 'extend' keyword was found when expecting Query, Mutation, or Subscription operation types. The error includes position tracking and token comparison details.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0027_invalid_type_system_extension.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Keyword(\n                    Query,\n                ),\n                Keyword(\n                    Mutation,\n                ),\n                Keyword(\n                    Subscription,\n                ),\n            ],\n            found: Token(\n                Name(\n                    Name(\n                        \"extend\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 1,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Structure in Rust\nDESCRIPTION: Displays a structured error output from a parser indicating an expected left brace token was not found, instead encountering end of file at line 1, column 30.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0009_fragment_definition_with_invalid_selection_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: EndOfFile,\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 30,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OrExp Schema in Hasura\nDESCRIPTION: Describes the schema for OR logical expressions in boolean conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$or\": [BoolExp]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Hasura GraphQL Engine Resources on Google Cloud\nDESCRIPTION: This bash script provides commands to delete the resources created for the Hasura GraphQL Engine deployment on Google Cloud. It includes deleting the SQL instance, Cloud Run service, IP address, and secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances delete hasura-postgres\ngcloud run services delete hasura-graphql-engine\ngcloud compute addresses delete google-managed-services-default --global\ngcloud secrets delete hasura-db-connection-string\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Seed Command in YAML\nDESCRIPTION: Example configuration for Prisma's seed command implementation showing how seed scripts are defined in prisma.yml. The configuration specifies a Node.js script to be executed when running the seed command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/seed-data.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nseed:\n  run: node ./data/seed.js\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hoogle Server in Bash\nDESCRIPTION: This command starts a local Hoogle server using the previously generated database. It allows for searching through the GraphQL Engine server code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/hoogle.sh serve\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Billing Overview - JavaScript\nDESCRIPTION: This snippet imports necessary React components used for rendering the billing and pricing table in Hasura Cloud documentation. Dependencies include 'VersionedLink', 'ProductBadge', and 'Thumbnail' from the site components.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/plans.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport ProductBadge from '@site/src/components/ProductBadge';\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Displaying Broken Markdown Link Error in Docusaurus (Bash)\nDESCRIPTION: This snippet shows the console output when a markdown link in Docusaurus documentation cannot be resolved. It includes the file path of the broken link and the document containing the error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nError: Docs markdown link couldn't be resolved: (/styles/index.mdx) in ~/hasura/graphql-engine-mono/docs/wiki/contributions.mdx for version current\n    at Array.forEach (<anonymous>)\nclient (webpack 5.70.0) compiled with 1 error\n```\n\n----------------------------------------\n\nTITLE: Sample Hasura Event Trigger Payload\nDESCRIPTION: Example of the JSON payload sent by Hasura to the webhook on a table insert operation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/echo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": {\n        \"op\": \"INSERT\",\n        \"data\": {\n            \"old\": null,\n            \"new\": {\n                \"text\": \"new-entry\",\n                \"id\": 1\n            }\n        }\n    },\n    \"created_at\": \"2018-10-01T17:21:03.76895Z\",\n    \"id\": \"b30cc7e6-9f3b-48ee-9a10-16cce333df40\",\n    \"trigger\": {\n        \"name\": \"note_trigger\",\n        \"id\": \"551bd6a9-6f8b-4644-ba7f-80c08eb9227b\"\n    },\n    \"table\": {\n        \"schema\": \"public\",\n        \"name\": \"note\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Boolean Values in GraphQL\nDESCRIPTION: Query to fetch articles by comparing a boolean is_published field using the _eq operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {is_published: {_eq: false}}\n  ) {\n    id\n    title\n    is_published\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Table Schema in SQL\nDESCRIPTION: SQL definition for the 'note' table with an auto-incrementing id and a text field for storing the note content. The id field serves as the primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/go/mutation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nTable name: note\n\nColumns:\n\nid     Integer auto-increment\nnote   Text\n\nPrimary key: id\n```\n\n----------------------------------------\n\nTITLE: Object Relationship Sorting in GraphQL\nDESCRIPTION: Demonstrates sorting articles based on their author's ID using nested object relationship fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/sorting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles (\n    order_by: {author: {id: desc}}\n  ) {\n    id\n    rating\n    published_on\n    author {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Schema Response in JSON for Hasura GraphQL Engine\nDESCRIPTION: This JSON structure shows the response to a filtered schema request, returning only basic information about specified tables and functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": [\"Artist\"],\n      \"type\": \"table\"\n    },\n    {\n      \"name\": [\"Album\"],\n      \"type\": \"table\"\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": [\"SearchAlbums\"],\n      \"type\": \"read\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Netlify Project\nDESCRIPTION: Command to create a new Netlify instance or link an existing project\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nntl init # or `ntl link` if you already have one and want to link the project\n```\n\n----------------------------------------\n\nTITLE: Update by Primary Key Mutation with GraphQL\nDESCRIPTION: GraphQL mutation for updating an author record by primary key, which triggers validation on the primary key values and the update data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nmutation update_author {\n  update_author_by_pk(pk_columns: {id: 3}, _set: { name: \"Jane\" }) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_overlaps Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values that overlap with a specified polygon using the _st_overlaps operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_overlaps: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling with Address Sanitizer and mimalloc\nDESCRIPTION: Example of compiling a program with clang using the Address Sanitizer while linking to the ASAN-enabled mimalloc library. This allows for memory error detection in both the program and mimalloc.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nclang -g -o test-wrong -Iinclude test/test-wrong.c out/debug/libmimalloc-asan-debug.a -lpthread -fsanitize=address -fsanitize-recover=address\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Constraint Error Handling in run_sql API\nDESCRIPTION: Example showing the error when attempting to drop a foreign key constraint that has metadata dependencies. The operation fails because a relationship depends on the constraint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/run-sql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"run_sql\",\n    \"args\": {\n        \"sql\": \"ALTER TABLE article DROP CONSTRAINT article_author_id_fkey\"\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 BAD REQUEST\nContent-Type: application/json\n\n{\n    \"path\": \"$.args\",\n    \"error\": \"cannot drop due to the following dependent objects: constraint article.article_author_id_fkey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React\nDESCRIPTION: This snippet demonstrates how to import React components used for headers and links in a Hasura Cloud documentation webpage. It imports custom components for icons and versioned links and SVG files for REST-related assets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/restified/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport HeadingIcon from '@site/src/components/HeadingIcon';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport REST from '@site/static/icons/features/restified.svg';\n```\n\n----------------------------------------\n\nTITLE: Checking Hasura Container Status\nDESCRIPTION: Command to verify if the Hasura GraphQL Engine and Postgres containers are running correctly.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\nCONTAINER ID IMAGE                 ... CREATED STATUS PORTS          ...\n097f58433a2b hasura/graphql-engine ... 1m ago  Up 1m  8080->8080/tcp ...\nb0b1aac0508d postgres              ... 1m ago  Up 1m  5432/tcp       ...\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Commands for executing Cypress E2E tests in watch mode or regular execution. Requires .env file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnx e2e console-ce-e2e --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx e2e console-ce-e2e\n```\n\nLANGUAGE: bash\nCODE:\n```\nnx affected:e2e\n```\n\n----------------------------------------\n\nTITLE: Defining String Concat Aggregate Predicate Args Input Type in GraphQL\nDESCRIPTION: GraphQL input type for setting arguments to the string concatenation aggregate function and applying comparisons to the result. Allows specifying concatenation options and comparison predicates.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_58\n\nLANGUAGE: graphql\nCODE:\n```\ninput String_concat_aggregate_predicate_args {\n  args: String_concat_aggregate_args\n  comparison: String_bool_exp\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Schema Permissions in GraphQL\nDESCRIPTION: This GraphQL snippet illustrates how to define a restricted schema for the 'user' role, exposing only certain fields and applying argument presets using the @preset directive. The intention is to demonstrate how to limit access to sensitive fields and prepopulate input values based on session variables.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schema-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  user_id: Int\n  name: String\n  userMessages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n}\n\ninterface Communication {\n  id: Int!\n  msg: String!\n}\n\ntype Message implements Communication {\n  id: Int!\n  name: String!\n  msg: String!\n  errorMsg: String\n}\n\ninput MessageWhereInpObj {\n  name: StringCompareObj\n}\n\ninput IntCompareObj {\n  eq: Int\n  gt: Int\n  lt: Int\n}\n\ninput StringCompareObj {\n  eq: String\n}\n\ninput IncludeInpObj {\n  id: [Int]\n  name: [String]\n}\n\ntype Query {\n  hello: String\n  messages(where: MessageWhereInpObj, includes: IncludeInpObj): [Message]\n  user(user_id: Int! @preset(value: \"x-hasura-user-id\")): User\n}\n\nschema {\n  query: Query\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Name Customization in Haskell\nDESCRIPTION: This Haskell code snippet defines new types and functions for implementing type name customization. It introduces Typename, MkTypename, and withTypenameCustomization to allow passing customization functions through the schema building code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/source-customization.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nnewtype Typename = Typename {unTypename :: Name} deriving (Eq, Ord, Show, HasName, J.ToJSON)\n\ntype MkTypename = Name -> Typename\n\nwithTypenameCustomization :: forall m r a. (MonadReader r m, Has MkTypename r) => MkTypename -> m a -> m a\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Source Positions in Rust\nDESCRIPTION: This code snippet shows the end of a GraphQL query parsing structure that tracks source positions with line and column information. The structure appears to be part of a larger parsing system for GraphQL queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0020_operation_type_definition.txt#2025-04-17_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n                end: SourcePosition {\n                    line: 9,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook URL for Hasura Event Trigger\nDESCRIPTION: This snippet shows the format for the webhook URL that will be called when a new product is inserted. The URL should point to the endpoint where the AI-powered SEO optimization logic will be implemented.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/recipes/product-description-chatgpt-seo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your-webhook-url>/product-description-ai-seo\n```\n\n----------------------------------------\n\nTITLE: Displaying GraphQL Parsing Error in Rust\nDESCRIPTION: This code shows the error structure returned when the GraphQL parser encounters an unterminated string. The error contains expected valid tokens and details about the lexer error including position information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/9008_unterminated_string_value.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    Unterminated,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 3,\n            col: 22,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Metadata Configuration in YAML\nDESCRIPTION: Metadata block defining the document's authors and discussion references for the optimization feature.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/limit-over-join-optimization.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors: Gil Mizrahi <gil@hasura.io>\ndiscussion:\n   https://github.com/hasura/graphql-engine-mono/pull/2239\nstate: draft\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar for Security and Observability Documentation in YAML\nDESCRIPTION: This YAML snippet defines the configuration for a documentation sidebar entry. It specifies the position, label, and class name for a section on Security and Observability in Hasura GraphQL Engine.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_perf_and_monitoring.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar_position: 60\nsidebar_label: 'Security & Observability'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query in YAML Configuration\nDESCRIPTION: Example of how GraphQL queries are formatted in metadata YAML files. Shows the change from tab indentation to 2-space indentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: allowed-queries\n  definition:\n    queries:\n    - name: getAlbums\n      query: |\n      \tquery getAlbums {\n      \t\talbums {\n      \t\t\tid\n      \t\t\ttitle\n      \t\t}\n      \t}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n- name: allowed-queries\n  definition:\n    queries:\n    - name: getAlbums\n      query: |\n        query getAlbums {\n          albums {\n            id\n            title\n          }\n        }\n```\n\n----------------------------------------\n\nTITLE: Displaying Migration Notice in Markdown\nDESCRIPTION: Markdown heading and link showing the new location of the repository at hasura/graphiql-online.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/tools/graphiql-online/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## This project has been moved to [hasura/graphiql-online](https://github.com/hasura/graphiql-online)\n```\n\n----------------------------------------\n\nTITLE: Redaction in Ordering using JSON\nDESCRIPTION: This JSON snippet demonstrates data redaction within the `order_by` clause of a GraphQL query. Similar to the filtering example, a `redaction_expressions` array defines the conditions for redaction. The `order_by` clause specifies sorting based on the redacted value of `ColumnA`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_52\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Test\"]\n  },\n  \"relationships\": [],\n  // Redaction expressions are defined per table/function\n  \"redaction_expressions\": [\n    {\n      \"target\": {\n        \"type\": \"table\",\n        \"table\": [\"Test\"] // These expressions are defined for the Test table\n      },\n      \"expressions\": {\n        // Redaction expressions are named (names are only unique within a table/function)\n        \"RedactionExp0\": {\n          \"type\": \"binary_arr_op\",\n          \"operator\": \"in\",\n          \"column\": { \"name\": \"Id\", \"column_type\": \"number\" },\n          \"values\": [1,2],\n          \"value_type\": \"number\"\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Id\": {\n        \"type\": \"column\",\n        \"column\": \"Id\",\n        \"column_type\": \"number\"\n      }\n    },\n    \"order_by\": {\n      \"relations\": {},\n      \"elements\": [\n        {\n          \"target_path\": [],\n          // Both \"column\" and \"single_column_aggregate\"-typed ordering targets can have\n          // redaction expressions applied to them\n          \"target\": {\n            \"type\": \"column\",\n            \"column\": \"ColumnA\",\n            \"redaction_expression\": \"RedactionExp0\"\n          },\n          \"order_direction\": \"asc\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Functions to Production\nDESCRIPTION: Command to deploy Netlify functions to production environment\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nntl deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connections for Hasura and API (Windows)\nDESCRIPTION: Markdown table describing network configurations for various connection scenarios between Hasura and APIs on Windows, including Docker and non-Docker setups.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/docker.mdx#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Connection                                                | Config                            | Comment                                    |\n| --------------------------------------------------------- | --------------------------------- | ------------------------------------------ |\n| **Hasura to API (outside Docker)**                        | `host.docker.internal:3000`       | Assuming the API is running on port `3000` |\n| **API (outside Docker) to Hasura**                        | `localhost:8080`                  | Hasura runs on port `8080` by default      |\n| **Hasura to API (both in docker-compose)**                | service name, e.g.: `api:3000`    | Assuming the API is running on port `3000` |\n| **API to Hasura (both in docker-compose)**                | service name, e.g.: `hasura:8080` | Hasura runs on port `8080` by default      |\n| **Hasura to API (both running with separate docker run)** | Docker internal IP address        | Can be obtained with `docker inspect`      |\n| **API to Hasura (both running with separate docker run)** | Docker internal IP address        | Can be obtained with `docker inspect`      |\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types from OpenAPI Spec\nDESCRIPTION: Command to generate TypeScript types from the OpenAPI specification file\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> make generate-types\n```\n\n----------------------------------------\n\nTITLE: Git Staging Command\nDESCRIPTION: Command to stage all local changes for commit.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Deploying Function with Zeit Now CLI\nDESCRIPTION: Command to deploy the function to Zeit Now with the required Hasura GraphQL endpoint environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/nodejs/mutation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnow -e HGE_ENDPOINT=https://my-app.herokuapp.com/v1/graphql\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors with 5-Star Articles\nDESCRIPTION: Example demonstrating how to fetch authors and include only their articles with a 5-star rating using nested filtering.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  authors {\n    id\n    name\n    articles(where: {rating: {_eq: 5}}) {\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited options for hasura migrate squash in SASS format\nDESCRIPTION: This snippet shows the options inherited from parent commands for the 'hasura migrate squash' command. These options include settings for authentication, endpoint configuration, and various execution parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_squash.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Query Structure in Rust\nDESCRIPTION: This code snippet demonstrates the structure of a parsed GraphQL query in Rust. It includes operation definition, variable definitions, directives, and field selections. The query is represented as an ExecutableDocument with nested structures for each component.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0022_operation_type_definition_with_arguments_and_directives.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: Some(\n                            Spanning {\n                                item: Name(\n                                    \"myQuery\",\n                                ),\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 7,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 13,\n                                },\n                            },\n                        ),\n                        variable_definitions: Some(\n                            Spanning {\n                                item: [\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"var\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 16,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 18,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"input\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 21,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 25,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 15,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 25,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: VariableDefinition {\n                                            name: Spanning {\n                                                item: Name(\n                                                    \"varOther\",\n                                                ),\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 28,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 35,\n                                                },\n                                            },\n                                            var_type: Spanning {\n                                                item: TypeContainer {\n                                                    base: Named(\n                                                        TypeName(\n                                                            Name(\n                                                                \"otherInput\",\n                                                            ),\n                                                        ),\n                                                    ),\n                                                    nullable: true,\n                                                },\n                                                start: SourcePosition {\n                                                    line: 1,\n                                                    col: 38,\n                                                },\n                                                end: SourcePosition {\n                                                    line: 1,\n                                                    col: 47,\n                                                },\n                                            },\n                                            default_value: None,\n                                        },\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 27,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 47,\n                                        },\n                                    },\n                                ],\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 14,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 48,\n                                },\n                            },\n                        ),\n                        directives: [\n                            Spanning {\n                                item: Directive {\n                                    name: Spanning {\n                                        item: Name(\n                                            \"deprecated\",\n                                        ),\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 51,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 60,\n                                        },\n                                    },\n                                    arguments: None,\n                                },\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 50,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 60,\n                                },\n                            },\n                            Spanning {\n                                item: Directive {\n                                    name: Spanning {\n                                        item: Name(\n                                            \"unused\",\n                                        ),\n                                        start: SourcePosition {\n                                            line: 1,\n                                            col: 63,\n                                        },\n                                        end: SourcePosition {\n                                            line: 1,\n                                            col: 68,\n                                        },\n                                    },\n                                    arguments: None,\n                                },\n                                start: SourcePosition {\n                                    line: 1,\n                                    col: 62,\n                                },\n                                end: SourcePosition {\n                                    line: 1,\n                                    col: 68,\n                                },\n                            },\n                        ],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"animal\",\n                                                    ),\n                                                    start: SourcePosition {\n```\n\n----------------------------------------\n\nTITLE: Negated Pattern Matching Authors with _nsimilar in GraphQL\nDESCRIPTION: This query fetches authors whose names do not begin with 'A' or 'C' using the _nsimilar operator for negated pattern matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/text-search-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_nsimilar: \"(A|C)%\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Mutation Error Response Schema\nDESCRIPTION: GraphQL response structure for failed delete operations, showing error details and messages.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-delete-mutations.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{ errors {\n    extensions\n    message\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Parsed GraphQL Query with Fragment in Rust\nDESCRIPTION: A Rust representation of a parsed GraphQL query structure containing a main query operation that references a fragment, and the fragment definition itself. The data structure tracks source positions for each element and maintains the hierarchical structure of the GraphQL document.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0034_query_shorthand_followed_by_fragment_definition.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Query,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: FragmentSpread(\n                                            FragmentSpread {\n                                                fragment_name: Spanning {\n                                                    item: Name(\n                                                        \"friendFields\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 6,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 17,\n                                                    },\n                                                },\n                                                directives: [],\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 17,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 1,\n                            },\n                            end: SourcePosition {\n                                line: 3,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 3,\n                    col: 1,\n                },\n            },\n            Spanning {\n                item: Fragment(\n                    FragmentDefinition {\n                        name: Spanning {\n                            item: Name(\n                                \"friendFields\",\n                            ),\n                            start: SourcePosition {\n                                line: 5,\n                                col: 10,\n                            },\n                            end: SourcePosition {\n                                line: 5,\n                                col: 21,\n                            },\n                        },\n                        type_condition: Spanning {\n                            item: TypeCondition {\n                                on: Spanning {\n                                    item: TypeName(\n                                        Name(\n                                            \"User\",\n                                        ),\n                                    ),\n                                    start: SourcePosition {\n                                        line: 5,\n                                        col: 26,\n                                    },\n                                    end: SourcePosition {\n                                        line: 5,\n                                        col: 29,\n                                    },\n                                },\n                            },\n                            start: SourcePosition {\n                                line: 5,\n                                col: 23,\n                            },\n                            end: SourcePosition {\n                                line: 5,\n                                col: 29,\n                            },\n                        },\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"id\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 6,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 6,\n                                                        col: 4,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 6,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 6,\n                                            col: 4,\n                                        },\n                                    },\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"name\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 7,\n                                                        col: 3,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 7,\n                                                        col: 6,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 7,\n                                            col: 3,\n                                        },\n                                        end: SourcePosition {\n                                            line: 7,\n                                            col: 6,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 5,\n                                col: 31,\n                            },\n                            end: SourcePosition {\n                                line: 8,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 5,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 8,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Action via Metadata API\nDESCRIPTION: HTTP request to create the action using Hasura's metadata API\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/create.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\":\"create_action\",\n    \"args\": {\n      \"name\":\"addNumbers\",\n      \"definition\": {\n        \"kind\":\"synchronous\",\n        \"type\": \"query\",\n        \"arguments\":[\n          {\n            \"name\":\"numbers\",\n            \"type\":\"[Int]!\"\n          }\n        ],\n        \"output_type\":\"AddResult\",\n        \"handler\":\"https://hasura-actions-demo.glitch.me/addNumbers\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date Aggregate Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering based on date aggregate functions like max, min, count, and count distinct.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\ninput Date_aggregate_order_by @oneOf {\n  _max: order_by\n  _min: order_by\n  _count: order_by\n  _count_distinct: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Agent API Request for Interpolated Queries\nDESCRIPTION: JSON representation of an agent API request for interpolated queries, showing complex query structure and relationships\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"interpolated\",\n    \"query_id\": \"native_baz_1\", \n    \"arguments\": null\n  },\n  \"interpolated_queries\": {\n    \"native_baz_1\": [{\"type\": \"text\", \"value\": \"select 'db0d9bd6-ca4e-4eb4-8798-944b9536eb3d' as a\"}],\n    \"native_baz_2\": [{\"type\": \"text\", \"value\": \"select 'db0d9bd6-ca4e-4eb4-8798-944b9536eb3d' as x /* \"}, {\"type\": \"scalar\", \"value_type\": \"bool\", \"value\": true}, {\"type\": \"text\", \"value\": \" */\"}]\n  },\n  \"relationships\": [\n    {\n      \"type\": \"interpolated\",\n      \"source_interpolated_query\": \"native_baz_1\",\n      \"relationships\": {\n        \"quux\": {\n          \"target\": {\n            \"type\": \"interpolated\",\n            \"query_id\": \"native_baz_2\",\n            \"arguments\": null\n          },\n          \"relationship_type\": \"object\",\n          \"column_mapping\": {\n            \"a\": \"x\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"quux\": {\n        \"type\": \"relationship\",\n        \"relationship\": \"quux\",\n        \"query\": {\n          \"fields\": {\n            \"x\": {\n              \"type\": \"column\",\n              \"column\": \"x\",\n              \"column_type\": \"String\"\n            }\n          }\n        }\n      },\n      \"a\": {\n        \"type\": \"column\",\n        \"column\": \"a\",\n        \"column_type\": \"String\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing GraphQL Query Parameters with Field Selection and Pagination\nDESCRIPTION: URL query parameters that specify field selection for multiple entities (institution, location, staff_member) along with pagination limit. Uses bracket notation to organize nested field requests.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/jsonapi/tests/failing/nested_fields/institutions.txt#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfields[institution]=name,location,staff&fields[location]=city,country&fields[staff_member]=first_name,last_name,specialities&page[limit]=5\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Server Logical Model Permissions\nDESCRIPTION: API endpoint for adding select permissions to an existing Logical Model in SQL Server, with column and filter specifications.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_create_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\",\n    \"permission\": {\n      \"columns\": \"*\",\n      \"filter\": \"<boolean expression>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Event Trigger Cleanups - HTTP\nDESCRIPTION: This HTTP POST request is used to resume the log cleaning process for specified event triggers that have been previously paused.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/event-triggers.mdx#2025-04-17_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"resume_event_trigger_cleanups\",\n  \"args\": {\n    \"event_triggers\": [\n      {\n        \"source_name\": \"default\",\n        \"event_triggers\": [\"sample_trigger\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Filtering Examples\nDESCRIPTION: Examples of filtering resources using query parameters and complex JSON filters\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/rest_json_api.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /<modelname>?filter[field1]=val1&filter[field2]=val2,val3&filter[field3.reltarget_field1]=val4\n\nGET /comments?filter[post]=1,2&filter[author.id]=12\n\nGET /movies?filter={\"$or\":[{\"name\":{\"$eq\":\"Braveheart\"}},{\"name\":{\"$eq\":\"Gladiator\"}}]}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Insert User Mutation\nDESCRIPTION: Sample GraphQL mutation for inserting a user with email and name fields, demonstrating a use case for input validation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insertUser($email:String, $name: String) {\n  insert_users(objects: [{email: $email, name: $name}]) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Validation Request JSON\nDESCRIPTION: Example request for the validate_go-basic_template endpoint, showing how to test a specific template with sample JSON data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/transforms.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\" : \"test_webhook_transform\",\n    \"args\" : {\n        \"webhook_url\": \"https://localhost:1234\",\n        \"body\": { \"hello\": \"world\" },\n        \"request_transform\": {\n          \"body\": \"{{ $.hello }}\",\n          \"template_engine\": \"Kriti\"\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Kind-based Enum Implementation\nDESCRIPTION: Example of an enum implementation using the kind approach. The JSON object uses a 'kind' key as a tag, and the tag value is matched with the exact variant name. The rest of the object's content is deserialized as the variant value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(opendds_derive::OpenDd)]\n#[opendd(as_kind)]\nenum KindEnum {\n    KindOne(KindOneStruct),\n    KindTwo(KindTwoStruct),\n}\n\n#[derive(opendds_derive::OpenDd)]\n#[opendd(use_serde_json)] // All field values are deserialized using serde_path_to_error::deserialize()\nstruct KindOneStruct{\n    field_one: i32,\n    field_two: bool,\n    field_three: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Author Model Validation Webhook Payload\nDESCRIPTION: Sample JSON payload sent to the validation webhook for the author model. This includes author data and the nested article relationship data.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/input-validations.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"role\": \"user\",\n    \"session_variables\": {\n        \"x-hasura-role\": \"user\"\n    },\n    \"data\": {\n        \"input\": [\n            {\n                \"name\": \"Jane\",\n                \"email\":\"jane@b.com\",\n                \"articles\": {\n                  \"data\":{\n                    \"id\":123\n                  }\n                }\n            },\n            {\n                \"name\": \"Doe\",\n                \"email\":\"doe@b.com\",\n                \"articles\": {\n                  \"data\":{\n                    \"id\":123\n                  }\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Parsing Error Structure in Rust\nDESCRIPTION: Represents a structured error response for token parsing failures in Hasura's GraphQL engine. Contains positional information and expected token details, specifically handling a case where a left brace was expected but end of file was found.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0041_operation_definition_with_missing_selection_set.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: EndOfFile,\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 17,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad Naming Convention in Haskell\nDESCRIPTION: An example showing poor naming practices using Hungarian notation for Maybe values. This approach is discouraged as it doesn't convey the meaning of the Maybe wrapper.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\nparseArgumentM :: Maybe UserRole -> Value -> Maybe Argument\nparseArgumentM userRoleM value = case userRoleM of\n  Just userRole -> ...\n  Nothing -> ...\n```\n\n----------------------------------------\n\nTITLE: Importing Player Component in MDX Files for Hasura Docs\nDESCRIPTION: This code snippet shows how to import the Player component in an MDX file. The Player component is used to embed video content in the Hasura documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/images.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Player from '@site/src/components/Player';\n```\n\n----------------------------------------\n\nTITLE: Dropping Update Permission API Request Example\nDESCRIPTION: This snippet demonstrates how to use the Hasura GraphQL Engine API to drop an update permission for a specific role on a table. It requires specifying the table name and the role. The API call is made via HTTP POST request, and headers must include 'Content-Type' and 'X-Hasura-Role'.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/permission.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_update_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Author with Explicit Null Age Field using GraphQL\nDESCRIPTION: This mutation inserts an author with an explicitly set null age field. It demonstrates an alternative way to handle nullable fields in GraphQL mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/mutations/postgres/insert.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation insert_author_with_null_age {\n  insert_author(\n    objects: [\n      {\n        name: \"Jeff\",\n        age: null\n      }\n    ]\n  ) {\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Body with GET Method (CLI)\nDESCRIPTION: YAML configuration for disabling request body and changing method to GET for an event trigger using Hasura CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/rest-connectors.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntable:\n  name: users\n  schema: public\nevent_triggers:\n  - name: insert_trigger_on_users\n    definition:\n      insert:\n        columns: \"*\"\n    webhook: https://api.somedomain.com\n  headers:\n    - name: Authorization\n      value: bearer-xxxx\n  request_transform:\n    template_engine: Kriti\n    version: 2\n    method: GET\n    url: \"{{$base_url}}/api/v3/endpoint\"\n    query_params:\n      query_param: xxxxx\n    body:\n      action: 'remove'\n    request_headers:\n      remove_headers: ['content-type]\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenError Structure in Rust for GraphQL Parsing\nDESCRIPTION: A Rust error structure that represents a parsing error in a GraphQL query. It shows an unterminated string error with the list of tokens that would have been valid at that position, and pinpoints the exact line and column of the error.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/1000_multibyte_chars_bad.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    Unterminated,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 2,\n            col: 21,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Relationship Predicates in YAML\nDESCRIPTION: Example of configuring permissions with remote relationship predicates, allowing users to view only their own API request traces.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/changelog.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: traces\n  permissions:\n    - role: user\n      select:\n        filter:\n          relationship:\n            name: User\n            predicate:\n              fieldComparison:\n                field: user_id\n                operator: _eq\n                value:\n                  sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Client with Subscription Support\nDESCRIPTION: Client implementation showing both GraphQL WebSocket subscription and direct PubSub subscription approaches, along with mutation examples.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/docs/subscriptions.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\nimport pubsub from './pubsub'\n\nconst GRAPHQL_HTTP_PORT = 3000\nconst REST_HTTP_PORT = 4000\n\nconst device = {\n  userName: 'Carlos',\n  name: 'Bot'\n}\n\nconst startClient = () => {\n  // Generate subscription via GraphQL WS API...\n  const client = new SubscriptionClient(\n    `ws://localhost:${GRAPHQL_HTTP_PORT}/subscriptions`\n  )\n\n  client.request({\n    query: `subscription watchDevice($topicInput: TopicInput!) {\n      devicesEventListener(topicInput: $topicInput) {\n        name\n        userName\n        status\n      }\n    }`,\n    operationName: 'watchDevice',\n    variables: {\n      topicInput: {\n        method: 'POST',\n        userName: `${device.userName}`\n      }\n    }\n  })\n  .subscribe({\n    next: {data} => {\n      console.log('Device created', data)\n    },\n  })\n\n  // ...or directly via PubSub instance like OpenAPI-to-GraphQL would do\n  pubsub.subscribe(`/api/${device.userName}/devices/POST/*`, (...args) => {\n    console.log('Device created', args)\n  })\n\n\n  // Trigger device creation via GraphQL HTTP API...\n  axios({\n    url: `http://localhost:${GRAPHQL_HTTP_PORT}/graphql`,\n    method: 'POST',\n    json: true,\n    data: {\n      query: `mutation($deviceInput: DeviceInput!) {\n        createDevice(deviceInput: $deviceInput) {\n          name\n          userName\n        }\n      }`,\n      variables: device,\n    },\n  })\n\n  // ...or via REST API like OpenAPI-to-GraphQL would do\n  axios({\n    url: `http://localhost:${REST_HTTP_PORT}/api/devices`,\n    method: 'POST',\n    json: true,\n    data: device,\n  })\n}\n\nstartClient()\n```\n\n----------------------------------------\n\nTITLE: Example of Poor Comment Usage in Haskell\nDESCRIPTION: Demonstrates an anti-pattern of using comments that merely state the obvious or reiterate what's clear from the code. These comments add noise rather than value.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_19\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad\nrunSelectQuery tables constraints cache shouldPrepare = do\n  -- part 1: construct the query\n  select <- buildSelect tables\n  conditions <- traverse buildCondition constraints\n  query <- buildQuery select conditions\n\n  -- part 2: execute the query\n  plan <- cacheLookup query (generateQueryPlan query) cache\n  -- prepare if necessary\n  prepared <- if shouldPrepare then prepareQueryPlan plan else pure plan\n  runQueryPlan prepared\n```\n\n----------------------------------------\n\nTITLE: Drop MSSQL Logical Model Select Permission\nDESCRIPTION: API endpoint to remove select permissions from a logical model in MSSQL source. Requires admin role and accepts source, function name and role as parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_drop_logical_model_select_permission\",\n    \"args\": {\n       \"source\": \"default\",\n       \"function\": \"get_articles\",\n       \"role\": \"user\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Timestamptz Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom timestamptz scalar type for timestamp with timezone in ISO8601 format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    timestamptz_col: \"2016-07-20T17:30:15+05:30\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Markdown\nDESCRIPTION: Shows the syntax for creating external links to third-party websites using Markdown.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Google](https://www.google.com/)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Naming Convention in Haskell\nDESCRIPTION: An example showing preferred naming practices for Maybe values. This approach conveys the optional nature of the argument without using type-based prefixes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\n-- Good\nparseOptionalArgument :: Maybe UserRole -> Value -> Maybe Argument\nparseOptionalArgument userRole value = case userRole of\n  Just knownUserRole -> ...\n  Nothing -> ...\n```\n\n----------------------------------------\n\nTITLE: Serving Swagger UI using CDN in HTML\nDESCRIPTION: Example HTML code for serving Swagger UI using CDN links. This demonstrates how to embed Swagger UI in a web page and load the OpenAPI JSON from a specific endpoint.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/rest-openapi-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n <html lang='en'>\n <head> \n     <meta charset='UTF-8'> \n     <meta name='viewport' content='width=device-width, initial-scale=1.0'> \n     <meta http-equiv='X-UA-Compatible' content='ie=edge'> \n     <script src='https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-standalone-preset.js'></script> \n     <script src='https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-bundle.js'></script> \n     <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui.css' /> \n     <title>Swagger</title> \n </head> \n <body> \n     <div id='swagger-ui'></div> \n     <script> \n         window.onload = function() { \n           SwaggerUIBundle({ \n             url: '/api/swagger/json', \n             dom_id: '#swagger-ui', \n             presets: [ \n               SwaggerUIBundle.presets.apis, \n               SwaggerUIStandalonePreset \n             ], \n             layout: 'StandaloneLayout' \n           }) \n         } \n     </script> \n </body> \n </html>\n```\n\n----------------------------------------\n\nTITLE: Example Redis-RESP Opts Monoid Reference\nDESCRIPTION: Reference to the OPTS monoid pattern from the redis-resp package that provides a solution for handling optional command arguments. This pattern allows combining multiple optional arguments, though it could potentially allow conflicting options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/forks/hedis/TODO.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`OPTS a` monoid in redis-resp http://hackage.haskell.org/package/redis-resp-0.3.2/docs/Data-Redis-Command.html#t:Opts\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options in SASS\nDESCRIPTION: Additional options inherited from parent commands that affect logging, environment configuration, and project settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts_update-project-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Track Logical Models with References via API\nDESCRIPTION: This snippet provides the HTTP request needed to track logical models with references to other logical models, specifically 'article' and 'author'. The `bulk_atomic` operation is used to ensure that the models are tracked together, allowing for mutual references and nested data types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/logical-models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"bulk_atomic\",\n  \"args\":\n  [\n    {\n      \"type\": \"mssql_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"article\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"title\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"contents\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"author_id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"author\",\n            \"type\":\n              {\n                \"logical_model\": \"author\",\n              },\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"mssql_track_logical_model\",\n      \"args\": {\n        \"source\": \"default\",\n        \"name\": \"author\",\n        \"fields\": [\n          {\n            \"name\": \"id\",\n            \"type\":\n              {\n                \"scalar\": \"integer\"\n              }\n          },\n          {\n            \"name\": \"name\",\n            \"type\":\n              {\n                \"scalar\": \"text\"\n              }\n          },\n          {\n            \"name\": \"articles\",\n            \"type\":\n              {\n                \"array\":\n                  {\n                    \"logical_model\": \"article\"\n                  }\n              }\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Installation Command Options\nDESCRIPTION: Available flags specific to the install command, including help and version specification options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_install.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for install\n    --version string   version to be installed\n```\n\n----------------------------------------\n\nTITLE: Configuring Dex for LDAP SSO\nDESCRIPTION: YAML configuration for Dex, including issuer URL, static clients setup, and LDAP connector configuration with user and group search parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: http://dex-domain:5556/dex\n\nstaticClients:\n  - id: dex-login\n    redirectURIs:\n      - 'http://localhost:8080/console/oauth2/callback'\n    name: 'Dex Login'\n    public: true\n\nconnectors:\n  - type: ldap\n    name: OpenLDAP\n    id: ldap\n    config:\n      host: ldap:389\n      insecureNoSSL: true\n      bindDN: cn=admin,dc=example,dc=org\n      bindPW: admin\n      usernamePrompt: Email Address\n      userSearch:\n        baseDN: ou=People,dc=example,dc=org\n        filter: '(objectClass=person)'\n        username: mail\n        idAttr: DN\n        emailAttr: mail\n        nameAttr: cn\n      groupSearch:\n        baseDN: ou=Groups,dc=example,dc=org\n        filter: '(objectClass=groupOfNames)'\n        userMatchers:\n          - userAttr: DN\n            groupAttr: member\n        nameAttr: cn\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Scalar Fields Enum in GraphQL\nDESCRIPTION: This enum defines all scalar fields available on the Invoice model that can be used for grouping operations. It includes fields like InvoiceId, InvoiceDate, CustomerId, and Total.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_75\n\nLANGUAGE: graphql\nCODE:\n```\nenum Invoice_scalar_fields {\n  InvoiceId\n  InvoiceDate\n  CustomerId\n  Total\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud SQL Postgres Instance\nDESCRIPTION: Creates a Cloud SQL Postgres instance named 'hasura-postgres' in the asia-south1 region. It specifies the database version, CPU, memory, and project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances create hasura-postgres --database-version POSTGRES_9_6 \\\n       --cpu 1 --memory 3840MiB --region asia-south1 --project hasura\n```\n\n----------------------------------------\n\nTITLE: Creating a Native Query using API\nDESCRIPTION: HTTP request to the Hasura metadata API for creating a native query. The request specifies source database, root field name, query type, arguments, relationships, SQL code, and the logical model it returns.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mssql_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<SQL Server field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": [\n      {\n        \"name\": \"<relationship name>\",\n        \"using\": {\n          \"column_mapping\": {\n            \"<local column>\": \"<remote column>\"\n          },\n          \"remote_native_query: \"<remote native query name>\"\n        }\n      }\n    ],\n    \"object_relationships\": <same as array_relationships>,\n    \"description\": \"<text>\",\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Schema for Message and Channel Tables\nDESCRIPTION: This SQL snippet creates tables for messages and channels, establishing relationships between them. It sets up the basic structure for the discussion on permissions and actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/reuse-insert-permission-in-action.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate table message (\n  id serial primary key,\n  content text not null,\n  channel_id integer not null references channel(id)\n)\ncreate table channel (..)\ncreate table channel_members (..)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud SQL Instance Connection Name\nDESCRIPTION: Retrieves the connection name for the Cloud SQL instance, which is needed for the deployment configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud sql instances describe hasura-postgres \\\n       --format=\"value(connectionName)\" --project hasura\n```\n\n----------------------------------------\n\nTITLE: Rename Relationship via CLI - YAML\nDESCRIPTION: This snippet shows how to rename a relationship in the `tables.yaml` file within the `metadata` directory using the Hasura CLI.  The 'name' field under the specific relationship is modified to reflect the new name. You need to modify the 'name' field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/rename.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\n```yaml {5}\n- table:\n    schema: public\n    name: articles\n  object_relationships:\n    - name: author\n      using:\n        foreign_key_constraint_on: author_id\n- table:\n    schema: public\n    name: authors\n```\n\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Hasura Scripts Command in SASS\nDESCRIPTION: This code block displays the options inherited from parent commands for the 'hasura scripts' command, including environment file, log level, color output, project directory, and update check settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_scripts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Expression Type for Objects in YAML\nDESCRIPTION: This snippet defines a BooleanExpressionType for an Invoice object, including comparable fields, relationships, and aggregate expressions for nested array fields and array relationships.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_105\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v2\ndefinition:\n  name: Album_bool_exp\n  operand:\n    object:\n      type: Invoice\n      comparableFields:\n        - fieldName: InvoiceId\n          booleanExpressionType: pg_Int_Comparison_exp\n        - fieldName: CustomerId\n          booleanExpressionType: pg_Int_Comparison_exp_with_is_null\n        - fieldName: BillingAddress\n          booleanExpressionType: Address_bool_exp\n        # Nested array field\n        - fieldName: Discount\n          booleanExpressionType: Discount_bool_exp # Exists() bool exp\n          # New! Only for nested array fields. Enables aggregation predicates\n          aggregateExpression: Discount_aggregate_exp\n      comparableRelationships:\n        - relationshipName: Customer\n          booleanExpressionType: Customer_bool_exp\n        # Array relationship\n        - relationshipName: InvoiceLines\n          booleanExpressionType: InvoiceLine_bool_exp # Exists() bool exp\n          # New! Only for array relationships. Enables aggregation predicates\n          aggregateExpression: InvoiceLine_aggregate_exp\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: App_Album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Defining Address Aggregate Fields Selection Type\nDESCRIPTION: Defines a GraphQL type for selecting aggregate fields on Address objects. Includes count functions and field-specific aggregations for address properties.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_68\n\nLANGUAGE: graphql\nCODE:\n```\ntype Address_aggregate_fields {\n  _count: Int! # WARN: Potential name clash here\n  # Scalar fields\n  StreetAddress: String_aggregate_fields!\n  City: String_aggregate_fields!\n  State: String_aggregate_fields!\n  PostalCode: String_aggregate_fields!\n  Country: String_aggregate_fields!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting VPC Connector on Google Cloud\nDESCRIPTION: This bash command deletes the VPC connector resource created for the Hasura GraphQL Engine deployment. It should be executed if the optional Step 8 was performed during the setup.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute networks vpc-access connectors delete hasura-connector --region=us-central1\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Deployment\nDESCRIPTION: Applies the Hasura deployment configuration to the Kubernetes cluster, creating the necessary resources.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/install-manifests/google-cloud-k8s-sql/README.rst#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging Scheduled Trigger Process in Hasura GraphQL Engine (JSON)\nDESCRIPTION: This snippet demonstrates the JSON structure of a scheduled trigger process log in Hasura GraphQL Engine. It includes the count of cron and scheduled events fetched, and the number of fetches within a 10-minute timeframe.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/logging.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": {\n    \"num_cron_events_fetched\": 0,\n    \"num_fetches\": 60,\n    \"num_one_off_scheduled_events_fetched\": 0\n  },\n  \"level\": \"info\",\n  \"timestamp\": \"2023-01-24T20:10:44.330+0530\",\n  \"type\": \"scheduled-trigger-process\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Suite Information in Markdown Tables\nDESCRIPTION: Two markdown tables are used to present information about different test suites. The first table shows tests against real-world APIs, while the second table describes tests against custom APIs, including their file names, associated APIs, and testing purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/test/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                                                 | Test file                         |\n| ----------------------------------------------------------------------------------- | --------------------------------- |\n| N/A                                                                                 | `cloudfunction.test.ts`           |\n| [DocuSign](https://www.docusign.com/)                                               | `docusign.test.ts`                |\n| N/A                                                                                 | `government_social_work.test.ts`  |\n| [IBM Language Translator](https://www.ibm.com/watson/services/language-translator/) | `ibm_language_translator.test.ts` |\n| [Instagram](https://www.instagram.com/)                                             | `instagram.test.ts`               |\n| [Stripe](https://stripe.com/)                                                       | `stripe.test.ts`                  |\n| [Weather Underground](https://www.wunderground.com/)                                | `weather_underground_test.ts`     |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Test file                | API(s)                                                                                                                                                                 | Testing purpose                                                                                                                                                                                                             |\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `example_api.test.ts`    | `Example API`                                                                                                                                                          | An assortment of basic functionality and options on a company-themed API                                                                                                                                                    |\n| `authentication.test.ts` | `Example API`                                                                                                                                                          | Basic authentication tests including using the [viewer functionality](../README.md#authentication)                                                                                                                          |\n| `example_api2.test.ts`   | `Example API 2`                                                                                                                                                        | The [`operationIdFieldNames` option](../README.md#options)                                                                                                                                                                  |\n| `example_api3.test.ts`   | `Example API` and `Example API 3`                                                                                                                                      | Creating GraphQL wrappers from multiple APIs and [interOAS links](../README.md#nested-objects)                                                                                                                              |\n| `example_api4.test.ts`   | `Example API 4`                                                                                                                                                        | JSON schema [combining schema](https://json-schema.org/understanding-json-schema/reference/combining.html) keywords                                                                                                         |\n| `example_api5.test.ts`   | `Example API 5`                                                                                                                                                        | The [`simpleNames` option](../README.md#options)                                                                                                                                                                            |\n| `example_api6.test.ts`   | `Example API 6`                                                                                                                                                        | An assortment of other functionality and options                                                                                                                                                                            |\n| `example_api7.test.ts`   | `Example API 7`                                                                                                                                                        | [Subscription support](../docs/subscriptions.md)                                                                                                                                                                            |\n| `file_upload.test.ts`    | `File Upload API`                                                                                                                                                      | [File uploads](../README.md#file-uploads) and [file upload options](../README.md#options)                                                                                                                                   |\n| `extensions.test.ts`     | `Extensions`, `Extensions Error 1`, `Extensions Error 2`, `Extensions Error 3`, `Extensions Error 4`, `Extensions Error 5`, `Extensions Error 6`, `Extensions Error 7` | The [`x-graphql-field-name`, `x-graphql-type-name`, and `x-graphql-enum-mapping` extensions](https://github.com/IBM/openapi-to-graphql/tree/master/packages/openapi-to-graphql#custom-type-and-field-names-and-enum-values) |\n```\n\n----------------------------------------\n\nTITLE: Cube aggregation strategy for multi-dimensional analysis in GraphQL\nDESCRIPTION: This query uses cube aggregation to perform grouping and aggregation across all possible combinations of the specified fields, creating a comprehensive multi-dimensional analysis of invoice data by country and state.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  Invoice_groups(\n    # Group by BillingAddress.Country, then BillingAddress.State\n    grouping_keys: [\n      { BillingAddress: { _scalar_field: Country } }\n      { BillingAddress: { _scalar_field: State } }\n    ]\n    # Perform grouping using the rollup strategy\n    grouping_type: Cube\n    # Sort groups first by BillingAddress.Country asc, then by BillingAddress.State descending\n    order_by: [\n      { group_key: { BillingAddress: { Country: Asc } } }\n      { group_key: { BillingAddress: { State: Desc } } }\n    ]\n  ) {\n    group_key {\n      # The value of the (billing country, billing state) tuple per group.\n      BillingAddress {\n        Country\n        State\n      }\n    }\n    group_aggregate {\n      _count # The number of invoices in a group\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs the necessary npm packages for the JavaScript webhook: Express for creating the server and Nodemailer for sending emails.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/recipes/check-expiration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install express nodemailer\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Hasura Integration\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from both itself and a Hasura GraphQL Engine instance. This configuration defines the scraping intervals and targets.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# my global config\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\n# scrape_timeout is set to the global default (10s).\n\n# Alertmanager configuration\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n            # - alertmanager:9093\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval '.\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label 'job=<job_name>' to any timeseries scraped from this config.\n  - job_name: 'prometheus'\n    # metrics_path defaults to '/metrics '\n    # scheme defaults to 'http '.\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'graphQL'\n    metrics_path: 'v1/metrics'\n    # metrics_path defaults to '/metrics '\n    # scheme defaults to 'http '.\n    static_configs:\n      - targets: ['hasura_deployment_url:8080']\n```\n\n----------------------------------------\n\nTITLE: OpenDd Trait Definition in Rust\nDESCRIPTION: Definition of the OpenDd trait that provides methods for deserializing types from JSON values and generating JSON schemas. The trait includes methods for deserialization, schema generation, schema naming, and schema referenceability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/utils/opendds-derive/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait OpenDd: Sized {\n    fn deserialize(json: serde_json::Value) -> Result<Self, OpenDdDeserializeError>;\n\n    fn json_schema(generator: &mut schemars::r#gen::SchemaGenerator) -> schemars::schema::Schema;\n\n    fn _schema_name() -> String;\n\n    fn _schema_is_referenceable() -> bool {\n        false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking PostgreSQL Logical Model\nDESCRIPTION: API endpoint for removing a Logical Model from the GraphQL schema in PostgreSQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"pg_untrack_logical_model\",\n    \"args\": {\n      \"source\": \"default\",\n      \"name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing a Python Function as an API in Jupyter Notebook\nDESCRIPTION: Example of how to expose a Python function as an API endpoint in a Jupyter Notebook using a special comment format.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/integrations/jupyter-notebooks.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# GET /hello_world\n\nimport json\nprint(json.dumps({\n  'hello': 'world'\n}))\n```\n\n----------------------------------------\n\nTITLE: Community Repository Clone\nDESCRIPTION: Command to clone a forked version of the public GraphQL Engine repository for community contributors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-github-username>/graphql-engine.git\n```\n\n----------------------------------------\n\nTITLE: Defining a Check Constraint in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to define a check constraint on the `rating` column of the `authors` table. The constraint ensures that the `rating` value must be between 1 and 10 (inclusive).\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/constraints.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE authors(\n  id SERIAL PRIMARY KEY,\n  name           TEXT    NOT NULL,\n  rating         INT     NOT NULL CHECK(rating > 0 AND rating <= 10)\n);\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Pre-release Version of Hasura GraphQL Engine\nDESCRIPTION: This code snippet uses a custom React component to display the latest pre-release version of the Hasura GraphQL Engine Docker image.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/updating-graphql-engine.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code>\n  hasura/graphql-engine:\n  <LatestRelease prerelease />\n</code>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Good Pattern Matching in Haskell\nDESCRIPTION: An example showing a preferred way of handling sum types using pattern matching. This approach is more robust and explicit about the handled cases.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_8\n\nLANGUAGE: haskell\nCODE:\n```\n-- good\ncase queryState of\n  LQActive -> handleActiveQuery query\n  LQPaused -> pure ()\n```\n\n----------------------------------------\n\nTITLE: Creating Object Relationship Using Manual Configuration in Hasura\nDESCRIPTION: Creates an object relationship named 'article_detail' on the 'article' table using manual configuration to map columns between tables. This approach is primarily used for defining relationships with views where foreign keys are not valid.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/relationship.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"create_object_relationship\",\n    \"args\": {\n        \"table\": \"article\",\n        \"name\": \"article_detail\",\n        \"using\": {\n            \"manual_configuration\" : {\n                \"remote_table\" : \"article_detail\",\n                \"column_mapping\" : {\n                    \"id\" : \"article_id\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Preview App for Hasura Cloud using GraphQL\nDESCRIPTION: This mutation schedules the creation of a Hasura Cloud Project with Migrations and Metadata from a GitHub repository branch. It requires GitHub access token, repository details, and project options.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation createGitHubPreviewApp {\n  createGitHubPreviewApp(\n    payload: {\n      githubPersonalAccessToken: \"<github_access_token>\"\n      githubRepoDetails: { branch: \"main\", owner: \"my-org\", repo: \"my-repo\", directory: \"backend/hasura\" }\n      projectOptions: {\n        cloud: \"aws\"\n        region: \"us-east-2\"\n        plan: \"cloud_free\"\n        name: \"my-app_name\"\n        envVars: [\n          { key: \"HASURA_GRAPHQL_AUTH_HOOK\", value: \"https://my-webhook.com\" }\n          { key: \"MY_ENV_VAR_1\", value: \"my value 1\" }\n        ]\n      }\n    }\n  ) {\n    githubPreviewAppJobID\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Tables in CockroachDB\nDESCRIPTION: SQL commands to create and populate sample 'author' and 'article' tables in CockroachDB for testing purposes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/cockroachdb/getting-started/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE author(\n    id serial PRIMARY KEY,\n    name text UNIQUE,\n    \"createdAt\" timestamp\n);\n\nCREATE TABLE article (\n    id SERIAL PRIMARY KEY,\n    title TEXT,\n    content TEXT,\n    author_id INTEGER REFERENCES author(id),\n    is_published BOOLEAN\n);\n\n-- Inserting sequential ids for demo purposes\n-- See https://www.cockroachlabs.com/docs/v22.2/serial.html\nINSERT INTO\n    author (id, name, \"createdAt\")\nVALUES\n    (1, 'Author 3', '2017-09-21T09:39:44'),\n    (2, 'Author 4', '2017-09-21T09:50:44');\n\nINSERT INTO\n    article (title, content, author_id, is_published)\nVALUES\n    (\n        'Article 1',\n        'Sample article content 1',\n        1,\n        false\n    ),\n    (\n        'Article 2',\n        'Sample article content 2',\n        1,\n        TRUE\n    ),\n    (\n        'Article 3',\n        'Sample article content 3',\n        2,\n        TRUE\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura SSO Environment Variable\nDESCRIPTION: JSON configuration for the HASURA_GRAPHQL_SSO_PROVIDERS environment variable, specifying LDAP SSO settings including client ID, admin roles, authorization URLs, and JWT claims mapping.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_id\": \"dex-login\",\n    \"admin_roles\": [\"admin\", \"admins\"],\n    \"name\": \"Dex Login\",\n    \"authorization_url\": \"http://localhost:5556/dex/auth\",\n    \"request_token_url\": \"http://localhost:5556/dex/token\",\n    \"scope\": \"openid offline_access groups\",\n    \"jwt_secret\": {\n      \"type\": \"RS256\",\n      \"jwk_url\": \"http://dex:5556/dex/keys\",\n      \"issuer\": \"http://localhost:5556:5556/dex\",\n      \"claims_map\": {\n        \"x-hasura-allowed-roles\": {\n          \"path\": \"$.groups\"\n        },\n        \"x-hasura-default-role\": {\n          \"path\": \"$.groups[0]\"\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceLine Scalar Fields Enum in GraphQL\nDESCRIPTION: This enum defines all scalar fields available on the InvoiceLine model that can be used for grouping operations. It includes fields like InvoiceLineId, InvoiceId, TrackId, and Quantity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_90\n\nLANGUAGE: graphql\nCODE:\n```\nenum InvoiceLine_scalar_fields {\n  InvoiceLineId\n  InvoiceId\n  TrackId\n  Quantity\n}\n```\n\n----------------------------------------\n\nTITLE: Untracking SQL Server Logical Model\nDESCRIPTION: API endpoint for removing a Logical Model from the GraphQL schema in SQL Server database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/logical-models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_untrack_logical_model\",\n    \"args\": {\n      \"source\": \"default\",\n      \"name\": \"<name>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Greater Than Operator in GraphQL\nDESCRIPTION: Query to fetch articles with rating greater than or equal to 4 using the _gte operator\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/comparison-operators.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {rating: {_gte: 4}}\n  ) {\n    id\n    title\n    rating\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Detailed Token Error in Rust for GraphQL Engine\nDESCRIPTION: This code constructs a complex error structure for a token parsing error in the GraphQL Engine. It specifies expected tokens, the actual error found (an unterminated string), and the position of the error in the source code.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/9007_unterminated_string_value_in_object_value_argument.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Number,\n                String,\n                Keyword(\n                    True,\n                ),\n                Keyword(\n                    False,\n                ),\n                Keyword(\n                    Null,\n                ),\n                Punctuation(\n                    Dollar,\n                ),\n                Punctuation(\n                    BracketL,\n                ),\n                Punctuation(\n                    BraceL,\n                ),\n            ],\n            found: LexerError(\n                InvalidString(\n                    Unterminated,\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 3,\n            col: 47,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Available VPC Networks\nDESCRIPTION: Command to list all available VPC networks in the Google Cloud project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute networks list\n```\n\n----------------------------------------\n\nTITLE: Querying Ancestors of an ltree in GraphQL\nDESCRIPTION: Example GraphQL query to select ancestors of an ltree argument using the _ancestor comparison operator. This demonstrates the new support for ltree comparison operators in Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  tree (\n    where: {path: {_ancestor: \"Tree.Collections.Pictures.Astronomy.Astronauts\"}}\n  ) {\n    path\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query for Articles with Excerpts\nDESCRIPTION: This GraphQL query fetches articles with truncated excerpts by calling the 'article_with_excerpt' root field with a 'max_length' argument to limit the excerpt size. The query filters articles by publication date, and the expected output is a list of articles with selected fields extracted from the SQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  article_with_excerpt(args: { max_length: 20 }, where: { date: { _gte: \"2023-03-01\" } }) {\n    id\n    title\n    date\n    excerpt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura SSO Demo with Docker Compose\nDESCRIPTION: Commands to clone the SSO demo repository, set up environment variables, and start the Docker Compose services for testing LDAP SSO with Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/sso/ldap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ee-sso-demo.git\ncd ee-sso-demo\ncp dotenv .env\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Type Permissions in YAML\nDESCRIPTION: This snippet defines TypePermissions for an Invoice type, specifying allowed fields for the admin role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_103\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Invoice\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - InvoiceId\n          - CustomerId\n          - InvoiceDate\n          - BillingAddress\n          - Total\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Null Values in GraphQL\nDESCRIPTION: Query to fetch articles with non-null published_on dates using the _is_null operator.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/filters/comparison-operators.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bigquery_articles(\n    where: {published_on: {_is_null: false}}\n  ) {\n    id\n    title\n    published_on\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with Haskell\nDESCRIPTION: A Haskell script that generates SQL insert statements for author and article tables. Takes optional parameters for number of rows and division factor for unique authors.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\n-- data-gen.hs\n\nimport System.Environment\nimport Data.Maybe\n\nmain = do\n  args <- getArgs\n  let\n    numOfRows = maybe 500 read $ listToMaybe args\n    divEveryRows = maybe 80 read $ listToMaybe $ drop 1 args\n\n  putStrLn $ \"Number of rows: \" <> show numOfRows\n  putStrLn $ \"Number of unique authors used: \" <> show divEveryRows\n\n  let\n    sql i = \"insert into author(name) values ('Title \" <> show i <> \"');\"\n  writeFile \"insert_author.sql\" $ unlines $ map sql [1..numOfRows]\n\n  let\n    sql i = \"insert into article(title, author_id) values ('Title \" <> show i <> \"', \" <> show (i `mod` divEveryRows) <> \");\"\n  writeFile \"insert_article.sql\" $ unlines $ map sql [1..numOfRows]\n```\n\n----------------------------------------\n\nTITLE: Creating Relationship via Metadata API\nDESCRIPTION: HTTP request to the Metadata API for setting up a custom type with relationships\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"set_custom_types\",\n  \"args\": {\n    \"scalars\": [],\n    \"enums\": [],\n    \"input_objects\": [],\n    \"objects\": [\n      {\n        \"name\": \"UpdateAuthorOutput\",\n        \"fields\": [\n          {\n            \"name\": \"author_id\",\n            \"type\": \"Int!\"\n          }\n        ],\n        \"relationships\": [\n          {\n            \"name\": \"updatedAuthor\",\n            \"type\": \"object\",\n            \"remote_table\": \"author\",\n            \"field_mapping\": {\n              \"author_id\": \"id\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Mutation Header Configuration in GraphiQL - HTTP - Hasura GraphQL\nDESCRIPTION: This insert mutation example provides guidance on the headers needed to execute an insert operation in the GraphiQL interface of the Hasura GraphQL Engine, specifically focusing on setting the user_id field based on X-Hasura-User-Id and the user role.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-column-presets.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n- `X-Hasura-Role` --> `user`\n- `X-Hasura-User-Id` --> `1`\n```\n\n----------------------------------------\n\nTITLE: Dropping BigQuery Computed Field via HTTP POST\nDESCRIPTION: Example HTTP request demonstrating how to drop a computed field named 'fetch_articles' from the 'author' table in BigQuery. The request includes source specification, table details, and cascade option for handling dependencies.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/computed-field.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\":\"bigquery_drop_computed_field\",\n    \"args\":{\n        \"table\":{\n            \"name\":\"author\",\n            \"dataset\":\"hasura\"\n        },\n        \"source\": \"bigquery\",\n        \"name\":\"fetch_articles\",\n        \"cascade\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload for Input Validation - Update Mutations\nDESCRIPTION: Describes the format of the `data.input` field within the request payload for update mutations.  It includes the structure of the `<model_name>_updates!` GraphQL type and optionally the `<model_name>_pk_columns_input!` type if the update is performed by primary key.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n    \\\"version\\\": \\\"<version-integer>\\\",\\n    \\\"role\\\": \\\"<role-name>\\\",\\n    \\\"session_variables\\\": {<session-variables>},\\n    \\\"data\\\": {\\n      \\\"input\\\": [\\n        {\\n          JSON-fied <model_name>_updates!,\\n          \\\"pk_columns\\\": JSON-fied <model_name>_pk_columns_input! (only included for update_<mode_name>_by_pk)\\n        }\\n      ]\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Configuration in YAML\nDESCRIPTION: Example configuration for opentelemetry.yaml that configures an OpenTelemetry receiver with traces enabled, custom headers, resource attributes, and batch processing settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstatus: enabled\ndata_types:\n  - traces\nexporter_otlp:\n  headers:\n    - name: x-test-header\n      value: testing\n    - name: x-header-from-env\n      value_from_env: TEST_ENV_VAR\n  resource_attributes:\n    - name: stage\n      value: production\n    - name: region\n      value: us-east\n  otlp_traces_endpoint: http://host.docker.internal:4318/v1/traces\n  protocol: http/protobuf\nbatch_span_processor:\n  max_export_batch_size: 512\n```\n\n----------------------------------------\n\nTITLE: Handling Token Parsing Error in Rust for GraphQL Engine\nDESCRIPTION: This code snippet represents an error structure returned when an unexpected token is encountered during GraphQL query parsing. It includes the expected valid tokens (Query, Mutation, Subscription), the actual token found, and its position in the source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/err/0024_document_with_incorrect_definition.txt#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nErr(\n    Positioned {\n        item: TokenError {\n            expected_tokens: [\n                Keyword(\n                    Query,\n                ),\n                Keyword(\n                    Mutation,\n                ),\n                Keyword(\n                    Subscription,\n                ),\n            ],\n            found: Token(\n                Name(\n                    Name(\n                        \"awsas8d2934213hkj0987\",\n                    ),\n                ),\n            ),\n        },\n        position: SourcePosition {\n            line: 1,\n            col: 1,\n        },\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Tracking PostgreSQL Native Query with Hasura Metadata API\nDESCRIPTION: This snippet demonstrates how to track a PostgreSQL Native Query using the Hasura Metadata API. It includes the HTTP request format and JSON payload structure for the 'pg_track_native_query' operation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"pg_track_native_query\",\n  \"args\": {\n    \"source\": \"default\",\n    \"root_field_name\": \"<name>\",\n    \"type\": \"query\",\n    \"arguments\": {\n      \"<name>\": {\n        \"type\": \"<postgres field type>\",\n        \"nullable\": false | true,\n        \"description\": \"<optional field description>\"\n      }\n    },\n    \"array_relationships\": <Native Query relationship>,\n    \"object_relationshps\": <Native Query relationship>,\n    \"code\": \"<SQL query>\",\n    \"returns\": \"<logical model name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pgbench Performance Tests\nDESCRIPTION: Command for running pgbench performance tests with specific parameters like client count and time duration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/tips.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npgbench -c 1 -T 20 -n -U <username> -d <database> -p 5432 -h 127.0.0.1 -f <queryfile.sql> 2> /dev/null\n```\n\n----------------------------------------\n\nTITLE: Setting Permission Comment for MSSQL Table\nDESCRIPTION: Sets or updates a comment on an existing permission. The comment can be removed by setting it to null.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer <auth-token>\nX-Hasura-Role: admin\n\n{\n    \"type\": \"mssql_set_permission_comment\",\n    \"args\": {\n        \"table\": \"article\",\n        \"source\": \"default\",\n        \"role\": \"user\",\n        \"type\" : \"update\",\n        \"comment\" : \"can only modify their own rows\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Event Trigger Cleanups for Specific Triggers via Hasura API\nDESCRIPTION: This JSON payload shows how to resume event trigger cleanups for specific triggers on a given source using the Hasura Metadata API. It activates cleaners on the specified triggers defined on the default source.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/event-triggers/clean-up/auto-cleanup.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resume_event_trigger_cleanups\",\n  \"args\": {\n    \"event_triggers\": [\n      {\n        \"source_name\": \"default\",\n        \"event_triggers\": [\"sample_trigger_1\", \"sample_trigger_2\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding GraphQL SDL to Types\nDESCRIPTION: API command to scaffold GraphQL SDL to types. This converts a JSON structure containing types information (including input objects and regular objects) into a GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscaffolder sdl to '{ \"types\": { \"enums\": [], \"scalars\": [], \"input_objects\": [ { \"name\": \"UserInput\", \"fields\": [ { \"name\": \"username\", \"type\": \"String\", \"description\": \"lalz\" }, { \"name\": \"password\", \"type\": \"String!\", \"description\": \"pass\" } ] } ], \"objects\": [ { \"name\": \"UserInfo\", \"fields\": [ { \"name\": \"accessToken\", \"type\": \"String\", \"description\": \"lolz\" } ] } ] } }'\n```\n\n----------------------------------------\n\nTITLE: Sample Network Interface Description JSON Output with Public IP\nDESCRIPTION: Example JSON output from the describe-network-interfaces command showing the Association section that contains the public IP address. The highlighted line shows the PublicIp that can be used to access the Hasura console.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NetworkInterfaces\": [\n        {\n            \"Association\": {\n                \"IpOwnerId\": \"amazon\",\n                \"PublicDnsName\": \"ec2-34-229-42-222.compute-1.amazonaws.com\",\n                \"PublicIp\": \"198.51.100.2\"\n            },\n…\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Action Workflow for Hasura Cloud Preview Apps\nDESCRIPTION: This YAML configuration sets up a GitHub Action workflow to create Preview Apps for Hasura Cloud projects. It runs on pull requests and pushes to the main branch, creating a new Preview App for each event.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/preview-apps.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'preview-apps'\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  hasura-cloud-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: hasura/hasura-cloud-preview-apps@v0.1.7\n        with:\n          name: 'preview-repo-name-${{github.env.GITHUB_HEAD_REF}}${{github.event.number}}'\n          postgresDBConfig: |\n            POSTGRES_SERVER_CONNECTION_URI=${{secrets.POSTGRES_SERVER_CONNECTION_URI}}\n            PG_ENV_VARS_FOR_HASURA=PG_DB_URL_1,PG_DB_URL_2,PG_DB_URL3\n          hasuraProjectDirectoryPath: hasura\n          region: us-west-1\n          tier: cloud_free\n          hasuraEnv: |\n            ENV_VAR_1=value_1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          HASURA_CLOUD_ACCESS_TOKEN: ${{secrets.HASURA_CLOUD_ACCESS_TOKEN}}\n      - uses: hasura/comment-progress@v2.1.0\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          id: preview_app_comment\n          number: ${{github.event.number}}\n          repository: ${{env.GITHUB_REPOSITORY}}\n          message: |\n            Console URL available at ${{steps.hasura_cloud_preview.outputs.consoleURL}}\n            GraphQL Endpoint available at ${{steps.hasura_cloud_preview.outputs.graphQLEndpoint}}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Relationship in GraphQL Schema\nDESCRIPTION: Example of adding a description to a Relationship metadata object. The description appears in the generated GraphQL schema as the description for the relationship field in the source type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3-descriptions.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Relationship\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"source\": \"author\",\n    \"name\": \"Articles\",\n    \"description\": \"Fetches the corresponding articles of the author.\",\n    \"target\": {\n        \"model\": {\n          \"name\": \"Articles\",\n          \"relationshipType\": \"Array\"\n        }\n      },\n    \"mapping\": [\n      {\n        \"source\": {\n          \"fieldPath\": [\n            {\n              \"fieldName\": \"article_id\"\n            }\n          ]\n        },\n        \"target\": {\n          \"modelField\": [\n            {\n              \"fieldName\": \"article_id\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n  type author {\n    author_id: Int!,\n    article_id: Int!,\n    \"\"\"\n    Fetches the corresponding articles of the author.\n    \"\"\"\n    Articles: [Articles!]\n  }\n```\n\n----------------------------------------\n\nTITLE: Type Configuration for IP Geolocation Action\nDESCRIPTION: This GraphQL type defines the structure of the City object returned by the GetCityName action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/getting-started/use-case/gql-backend.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype City {\n  city: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Inherited Options\nDESCRIPTION: Command-line options inherited from parent commands that can be used with migrate apply.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--admin-secret string            admin secret for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ADMIN_SECRET\")\n--certificate-authority string   path to a cert file for the certificate authority (env \"HASURA_GRAPHQL_CERTIFICATE_AUTHORITY\")\n--database-name string           database on which operation should be applied\n--disable-interactive            disables interactive prompts (default: false) (env \"HASURA_GRAPHQL_DISABLE_INTERACTIVE\")\n--endpoint string                http(s) endpoint for Hasura GraphQL Engine (env \"HASURA_GRAPHQL_ENDPOINT\")\n--envfile string                 .env filename to load ENV vars from (default \".env\")\n--insecure-skip-tls-verify       skip TLS verification and disable cert checking (default: false) (env \"HASURA_GRAPHQL_INSECURE_SKIP_TLS_VERIFY\")\n--log-level string               log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color                       do not colorize output (default: false)\n--project string                 directory where commands are executed (default: current dir)\n--skip-update-check              skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names with CLI in YAML\nDESCRIPTION: Configure custom column names in tables.yaml for MS SQL Server tables using Hasura CLI metadata configuration\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/custom-field-names.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    schema: dbo\n    name: author\n  configuration:\n    column_config:\n      addr:\n        custom_name: address\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata via Hasura CLI - YAML\nDESCRIPTION: This snippet shows the command to apply the defined metadata changes for the Scheduled Trigger using the Hasura CLI. This step is essential to make sure the defined triggers take effect in the Hasura environment.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-cron-trigger.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components with JavaScript\nDESCRIPTION: This snippet demonstrates how to import custom React components such as Thumbnail and VersionedLink, as well as an SVG icon, into a JavaScript file within a Hasura project. It depends on the respective paths inside the '@site' directory structure.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\nimport VersionedLink from '@site/src/components/VersionedLink';\nimport Auth from '@site/static/icons/features/auth.svg';\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data in Hasura GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch authors with their related articles, including short and long excerpts. It showcases the usage of the relationships defined in the Native Queries.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/native-queries.mdx#2025-04-17_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  get_authors {\n    name\n\n    short_excerpt: articles(args: { length: 10 }) {\n      title\n      contents\n    }\n\n    long_excerpt: articles(args: { length: 100 }) {\n      title\n      contents\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Check Constraint for Channel Membership\nDESCRIPTION: This JSON snippet represents a check constraint that ensures a user can only post a message to a channel if they are a member of that channel. It demonstrates the type of permission that might need to be replicated in an action.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/reuse-insert-permission-in-action.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"channel\": {\"members\": {\"user_id\": \"x-hasura-user-id\"}}}\n```\n\n----------------------------------------\n\nTITLE: Heroku Manifest Configuration for Hasura GraphQL Engine Deployment\nDESCRIPTION: This YAML snippet defines a Heroku manifest (heroku.yml) for deploying Hasura GraphQL Engine. It sets up a PostgreSQL addon, configures the database URL environment variable, and specifies the Dockerfile for the web process.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/cli-migrations/v2/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsetup:\n  addons:\n    - plan: heroku-postgresql\n      as: DATABASE\n  config:\n    HASURA_GRAPHQL_MIGRATIONS_DATABASE_ENV_VAR: DATABASE_URL\nbuild:\n  docker:\n    web: Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Confirm Metadata Initialization\nDESCRIPTION: This text snippet represents the prompt that appears during the initialization of a Hasura project.  It asks the user to confirm if they want to initialize the project with Metadata and Migrations from the specified endpoint. Answering \"Yes\" will configure the project to use migrations and metadata tracking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/migrations-metadata-setup.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"? Initialize project with Metadata & Migrations from https://docs-demo.hasura.app ? Yes\"\n```\n\n----------------------------------------\n\nTITLE: Adding Host to TLS Allowlist using HTTP POST\nDESCRIPTION: API request to add a host to the TLS allowlist with optional suffix and permissions. Allows self-signed certificates for specified hosts in development/staging environments.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/network.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"add_host_to_tls_allowlist\",\n    \"args\": {\n        \"host\": \"graphql.hasura.io\",\n        \"suffix\": \"4183\",\n        \"permissions\": [\"self-signed\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Auth Webhook on Heroku with Bash Commands\nDESCRIPTION: Step-by-step instructions for deploying the auth webhook to Heroku, including creating an app, setting up PostgreSQL, and applying migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/auth-webhooks/passport-js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n # Create heroku app\n heroku create <app-name>\n\n # Create PostgreSQL addon\n heroku addons:create heroku-postgresql:hobby-dev -a <app-name>\n\n # Add git remote\n git remote add heroku https://git.heroku.com/<app-name>.git\n\n # Push changes to heroku\n # Note: You need to run this command from the toplevel of the working tree (graphql-engine)\n git subtree push --prefix community/boilerplates/auth-webhooks/passport-js heroku master\n\n # Apply migrations\n# (Note) this step creates a \"users\" table in the database\n heroku run knex migrate:latest\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload for Input Validation - Insert Mutations\nDESCRIPTION: Details the format of the `data.input` field within the request payload specifically for insert mutations.  The `input` field contains a list of rows to be inserted, mirroring the structure of the `<model_name>_insert_input!` GraphQL type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n    \\\"version\\\": \\\"<version-integer>\\\",\\n    \\\"role\\\": \\\"<role-name>\\\",\\n    \\\"session_variables\\\": {<session-variables>},\\n    \\\"data\\\": {\\n        \\\"input\\\": [{JSON-fied <model_name>_insert_input!}]\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Expected Response from GraphQL Mutation (JSON)\nDESCRIPTION: This JSON structure represents the expected output after the GraphQL mutation is executed, showing the automatic transformation of the input value to uppercase in the output field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insert_sql_function_table\": {\n      \"returning\": [\n        {\n          \"input\": \"yabba dabba doo!\",\n          \"output\": \"YABBA DABBA DOO!\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hasura CLI Main Help Output\nDESCRIPTION: Output displayed when running the main Hasura CLI help command, showing available commands and global flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    __\n   / /_   ____ _ _____ __  __ _____ ____ _\n  / __ \\ / __ `// ___// / / // ___// __ `/\n / / / // /_/ /(__  )/ /_/ // /   / /_/ /\n/_/ /_/ \\__,_//____/ \\__,_//_/    \\__,_/\n\nUsage:\n  hasura [flags]\n  hasura [command]\n\nAvailable Commands:\n  actions     Manage Hasura actions\n  completion  Generate auto completion code\n  console     Open the console to manage the database and try out APIs\n  deploy      (PREVIEW) Utility command to apply metadata & database migrations to graphql-engine\n  help        Help about any command\n  init        Initialize a directory for Hasura GraphQL Engine migrations\n  metadata    Manage Hasura GraphQL Engine metadata saved in the database\n  migrate     Manage migrations on the database\n  plugins     Manage plugins for the CLI\n  scripts     Execute helper scripts to manage Hasura Projects\n  seed        Manage seed data\n  update-cli  Update the CLI to latest or a specific version\n  version     Print the CLI version\n\nFlags:\n      --envfile string      .env filename to load ENV vars from (default \".env\")\n  -h, --help                help for hasura\n      --log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n      --no-color            do not colorize output (default: false)\n      --project string      directory where commands are executed (default: current dir)\n      --skip-update-check   skip automatic update check on command execution\n\nUse \"hasura [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: YAML Join Tree Structure for Ambiguous Schemas\nDESCRIPTION: Example YAML structure showing how the join tree is organized to handle ambiguous schema relationships by including type information in the path.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/remote-joins-execution.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n(Nothing, node):\n  (Article, foo):\n    (Nothing, bar): <join info>\n  (Author, foo):\n    (Nothing, bar): <join info>\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence for Auto-Incrementing Default Value in MS SQL Server\nDESCRIPTION: Illustrates how to create a SQL sequence and set a field default value to an auto-incrementing integer using the sequence. The sequence 'roll_number_seq' is created and applied to the 'roll_number' field. Prerequisite: Access to execute SQL commands on the database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/default-values/mssql-defaults.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SEQUENCE roll_number_seq AS INT START WITH 0 INCREMENT BY 1;\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Name using Equality Operator in GraphQL\nDESCRIPTION: This example shows how to fetch a list of authors with a specific name (a text field) using the _eq operator in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/postgres/filters/comparison-operators.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(\n    where: {name: {_eq: \"Sidney\"}}\n  ) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload for Input Validation - General\nDESCRIPTION: Shows the general format of the request payload sent to the validation HTTP webhook.  The payload includes the version, role, session variables, and data specific to the mutation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/input-validations.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n    \\\"version\\\": \\\"<version-integer>\\\",\\n    \\\"role\\\": \\\"<role-name>\\\",\\n    \\\"session_variables\\\": {\\n        \\\"x-hasura-user-id\\\": \\\"<session-user-id>\\\",\\n        \\\"x-hasura-user-name\\\": \\\"<session-user-name>\\\"\\n    },\\n    \\\"data\\\": {\\n        \\\"input\\\": <mutation specific schema>\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Thumbnail Component for Codespace Configuration (JSX)\nDESCRIPTION: This code snippet demonstrates the use of the Thumbnail component to display a GIF image showing how to configure a Codespace for Hasura documentation development. It includes properties for source, alt text, and width.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Thumbnail\n  src=\"/img/wiki/codespaces-2.gif\"\n  alt=\"Create Codespace\"\n  width=\"1000px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with GraphQL Mutation in Hasura\nDESCRIPTION: Shows how to perform an upsert operation using a GraphQL mutation. The example inserts or updates an author record based on a conflict constraint, and returns the number of affected rows.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/mutation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation upsert_author {\n  insert_author(\n    objects: [{ name: \"John\", id: 12 }]\n    on_conflict: { constraint: author_name_key, update_columns: [name, id] }\n  ) {\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Scheduled Events in Hasura GraphQL Engine\nDESCRIPTION: API endpoint for deleting an existing scheduled event (one-off or cron). Requires admin role and takes event type and ID as parameters.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/scheduled-triggers.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"delete_scheduled_event\",\n    \"args\" : {\n        \"type\": \"one_off\",\n        \"event_id\": \"b918cd10-8853-4e66-91b8-81b5cd16e44b\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Schema in Hasura GraphQL\nDESCRIPTION: HTTP POST request to add a remote GraphQL server as a remote schema. Requires schema name, URL, and optional headers configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/schema-metadata-api/remote-schemas.mdx#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/query HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\": \"add_remote_schema\",\n    \"args\": {\n        \"name\": \"my remote schema\",\n        \"definition\": {\n            \"url\": \"https://remote-server.com/graphql\",\n            \"headers\": [{\"name\": \"X-Server-Request-From\", \"value\": \"Hasura\"}],\n            \"forward_client_headers\": false,\n            \"timeout_seconds\": 60\n        },\n        \"comment\": \"some optional comment\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding GraphQL Types from SDL\nDESCRIPTION: API command to scaffold GraphQL types from SDL. This converts a GraphQL SDL definition into a structured JSON representation of the types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/cli-ext/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nscaffolder sdl from '{ \"sdl\": { \"action\": \"type Mutation { actionName (arg1: SampleInput!): SampleOutput }\", \"types\": \"type SampleOutput { accessToken: String! } input SampleInput { username: String! password: String! }\" }, \"types\": { \"scalars\": [], \"enums\": [], \"input_objects\": [], \"objects\": [] } }'\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Status in Hasura\nDESCRIPTION: This snippet shows how to use the set_opentelemetry_status API to enable or disable OpenTelemetry export in Hasura. It allows toggling the status without modifying other configuration settings.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/observability.mdx#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n{\n    \"type\": \"set_opentelemetry_status\",\n    \"args\": \"enabled\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using VersionedLink for Navigation\nDESCRIPTION: This code snippet showcases the use of the VersionedLink component to create navigable links within the documentation, allowing users to quickly access detailed subtopics related to caching functionality.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/caching/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VersionedLink to=\"/enterprise/try-hasura-enterprise-edition/\">\n  30-day trial of Hasura Enterprise Edition\n</VersionedLink>\n```\n\n----------------------------------------\n\nTITLE: Moving Local Migration Files with Bash\nDESCRIPTION: This snippet demonstrates the use of the bash 'mv' command to back up local migrations by moving them to a 'migrations_backup' folder. This is a preparatory step for resetting migrations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# move the contents of the migrations folder into the migrations_backup folder\n\nmv migrations migrations_backup\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Using DateTime Update Operator\nDESCRIPTION: Example GraphQL mutation showing how to use the custom set_year update operator on a DateTime field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation MyMutation {\n  update_Employee(_set_year: {BirthDate: 1980}) {\n    returning {\n      BirthDate\n    }\n    affected_rows\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Data in NodeJS\nDESCRIPTION: Defines an asynchronous function to fetch all data from a specified table in PostgreSQL database.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/ai/vectorize-postgesql-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getData(table) {\n  const { rows } = await db.query(`SELECT * FROM ${table}`);\n  return rows;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Metadata for Heroku Integration Configuration\nDESCRIPTION: YAML front matter defining metadata and configuration details for the Heroku database integration documentation page\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cloud/heroku-url-sync.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Automatically sync database URL of a Heroku Postgres into a Hasura Cloud project\ntitle: 'Cloud: Heroku database integration'\nkeywords:\n  - hasura\n  - docs\n  - project\n  - team\n  - heroku\n  - database url\n  - sync\nsidebar_position: 35\nsidebar_label: Heroku URL sync\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Full Table of Contents in JSX\nDESCRIPTION: Shows how to use the TOCInline component to generate a full table of contents for the current document. It also demonstrates adding a custom heading using the CustomTOCListHead component.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/table-of-contents.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport TOCInline from '@theme/TOCInline';\n\n<TOCInline toc={toc} />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CustomTOCListHead } from \"@site/src/components/CustomTOCList\";\n\n<CustomTOCListHead>Table of Contents</CustomTOCListHead>\n<TOCInline toc={toc} />\n```\n\n----------------------------------------\n\nTITLE: Downloading Hasura Docker Compose File\nDESCRIPTION: Commands to download the Hasura docker-compose file using wget or curl. This file is essential for setting up the Hasura GraphQL Engine with Docker.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/citus-hyperscale-postgres/getting-started/docker.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# in a new directory run\nwget https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml\n# or run\ncurl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles Using _like Operator in GraphQL\nDESCRIPTION: Demonstrates how to use the _like operator to fetch articles containing a specific word in their title. The example searches for articles with 'amet' in the title using pattern matching.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/text-search-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  articles(\n    where: {title: {_like: \"%amet%\"}}\n  ) {\n    id\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Metadata via CLI - Bash\nDESCRIPTION: This snippet demonstrates how to apply the modified metadata after renaming the relationship in the `tables.yaml` file using the Hasura CLI. The `hasura metadata apply` command is used to update the Hasura instance with the changes.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/table-relationships/rename.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\n```bash\nhasura metadata apply\n```\n\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema for JSON Constants Approach\nDESCRIPTION: Definition of GraphQL types and inputs for the simple JSON_MODIFY implementation that only supports constant values\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype <table>_update {\n  ...\n  _json_modify: <table>_json_modify_columns\n}\n  \ninput <table>_json_modify_columns {\n  <text columns of table>: <table>_json_modify_inputs\n}\n\ninput <table>_json_modify_inputs {\n  path: mssql_json_path!\n  value: mssql_json\n}\n  \nscalar mssql_json_path\nscalar mssql_json\n\nenum <table>_select_column {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Scalar in GraphQL SDL\nDESCRIPTION: Demonstrates how to define a custom scalar type in GraphQL. The example shows the declaration of a 'Date' scalar, which can then be used in object types, input types, or as arguments in queries and mutations.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/types.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Date\n```\n\n----------------------------------------\n\nTITLE: Tracking Tables in BigQuery with YAML\nDESCRIPTION: YAML configuration for tracking the `authors` and `articles` tables in BigQuery. This configuration is placed in the `tables.yaml` file within the `metadata` directory. By tracking the tables, they are exposed over the GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- table:\n    dataset: bigquery\n    name: authors\n- table:\n    dataset: bigquery\n    name: articles\n\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in GraphQL Queries\nDESCRIPTION: Demonstrates how to create and use fragments to reduce query complexity and reuse field selections. Creates a fragment for article fields and uses it in multiple query selections.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/bigquery/variables-aliases-fragments-directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nfragment articleFields on bigquery_articles {\n  id\n  title\n}\nquery getArticles {\n  bigquery_articles {\n    ...articleFields\n  }\n  topTwoArticles: bigquery_articles(\n    order_by: {rating: desc},\n    limit: 2\n  ) {\n    ...articleFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Remote Relationship in HTTP API (PostgreSQL)\nDESCRIPTION: Example HTTP request for deleting an existing remote relationship in Hasura. This removes a named relationship from a PostgreSQL table.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/remote-relationships.mdx#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_delete_remote_relationship\",\n    \"args\" : {\n       \"source\": \"name_of_the_source\",\n       \"table\": {\n          \"name\":\"users\",\n          \"schema\":\"public\"\n       },\n       \"name\":\"name_of_the_remote_relationship\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL query for articles table\nDESCRIPTION: A GraphQL query example to fetch data from the `articles` table, specifically retrieving the `author_id`, `id`, and `title` fields.  The expected response shows the structure of the data returned from the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/tables.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    bigquery_articles {\n      author_id\n      id\n      title\n    }\n  }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bigquery_articles\": [\n      {\n        \"author_id\": \"1\",\n        \"id\": \"2\",\n        \"title\": \"veniam\"\n      },\n      {\n        \"author_id\": \"2\",\n        \"id\": \"3\",\n        \"title\": \"nostrud\"\n      },\n      {\n        \"author_id\": \"3\",\n        \"id\": \"4\",\n        \"title\": \"cillum nostrud\"\n      },\n      {\n        \"author_id\": \"3\",\n        \"id\": \"1\",\n        \"title\": \"dolore\"\n      },\n      {\n        \"author_id\": \"4\",\n        \"id\": \"5\",\n        \"title\": \"culpa qui officia\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata\nDESCRIPTION: This bash command applies the metadata defined in the `tables.yaml` file to the Hasura GraphQL Engine. It uses the `hasura` CLI tool to update the schema and permissions based on the metadata configurations. This command is essential after making changes to the metadata files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/column-presets.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Defining TrueExp Schema in Hasura\nDESCRIPTION: Specifies the schema for TRUE expressions in boolean conditions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Datetime\nDESCRIPTION: This GraphQL snippet shows how to query a datetime field. The `Datetime` scalar type represents a calendar date including the time of day in the format `yyyy-mm-dd hh:mm:ss.ms`.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    datetime: \"1996-03-15 17:30:15.001\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Avoiding Excessive Point-free Style in Haskell\nDESCRIPTION: Shows an example of overly complex point-free style that should be avoided. Point-free can make code more concise but less readable when overused.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_23\n\nLANGUAGE: haskell\nCODE:\n```\n-- Bad:\nf = (g .) . h\n```\n\n----------------------------------------\n\nTITLE: PG Dump Command Execution\nDESCRIPTION: Illustrates the underlying bash command that gets executed when the PG Dump API is called, showing how options are passed to pg_dump.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/pgdump.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npg_dump $DATABASE_URL $OPTS -f $FILENAME\n```\n\n----------------------------------------\n\nTITLE: Define Logical Model in YAML for Hasura\nDESCRIPTION: This YAML snippet defines a logical model named `tables` for Hasura, specifying the structure of the data returned by the stored procedure.  It includes fields like TABLE_QUALIFIER, TABLE_OWNER, TABLE_NAME, TABLE_TYPE, and REMARKS, along with their respective data types and nullability.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/ms-sql-server/stored-procedures.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nlogical_models:\n  - name: tables\n    fields:\n      TABLE_QUALIFIER:\n        type: sysname\n        nullable: true\n      TABLE_OWNER:\n        type: sysname\n        nullable: true\n      TABLE_NAME:\n        type: sysname\n        nullable: true\n      TABLE_TYPE:\n        type: 'varchar(32)'\n        nullable: true\n      REMARKS:\n        type: 'varchar(254)'\n        nullable: true\n```\n```\n\n----------------------------------------\n\nTITLE: Dropping a Delete Permission using Hasura Metadata API\nDESCRIPTION: This code snippet demonstrates how to drop an existing delete permission for a specific role on a table using the Hasura Metadata API. The API endpoint is `/v1/metadata` and the `pg_drop_delete_permission` type is used.  The required parameters are `table` name, `role` name, and optional `source` database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/permission.mdx#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"pg_drop_delete_permission\",\n    \"args\" : {\n        \"table\" : \"article\",\n        \"role\" : \"user\",\n        \"source\": \"default\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Description to ScalarType in GraphQL Schema\nDESCRIPTION: Example of how to add a description to a ScalarType metadata object. The description field is added directly to the definition object and appears in the generated GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3-descriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ScalarType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"NonNegativeInt\",\n    \"description\": \"Type to represent integers that are greater than or equal to 0\",\n    \"graphql\": {\n      \"typeName\": \"NonNegativeInt\"\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nType to represent integers that are greater than or equal to 0\n\"\"\"\nscalar NonNegativeInt\n```\n\n----------------------------------------\n\nTITLE: Dropping Model Permissions via API\nDESCRIPTION: Shows how to remove select permissions from a logical model using the HTTP API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/mongodb/logical-models.mdx#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n  \"type\": \"mongo_drop_logical_model_select_permission\",\n  \"args\": {\n    \"source\": \"default\",\n    \"name\": \"<logical model name>\",\n    \"role\": \"<role name>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Model via CLI in Hasura\nDESCRIPTION: YAML configuration for creating a logical model in the metadata/databases/databases.yaml file. It defines the model name, fields, types, and optional descriptions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/native-queries.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        \"<field name>\":\n          type: \"<PostgreSQL field type>\"\n          nullable: false | true\n          description: \"<optional field description>\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Programmatic Type Generation in TypeScript\nDESCRIPTION: Example showing how to use the type generator programmatically in a TypeScript application\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/contrib/metadata-types/RFC.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateTypes()\n  .then((outputs) => {\n    console.log('Finished generateTypes(), outputs are', outputs)\n    for (let output of outputs) {\n      console.log('File:', output.file)\n      console.log('Results:', output.results)\n    }\n  })\n  .catch((err) => {\n    console.log('Got error', err)\n  })\n  .finally(async () => {\n    const generatedFolder = path.join(pathFromRoot, 'generated', '/')\n    const jsonSchemas = await glob(generatedFolder + '**.json')\n    jsonSchemas.forEach(jsonSchemaToYAML)\n  })\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Structure in Hasura (SQL)\nDESCRIPTION: This SQL snippet modifies the 'sql_function_table' to allow the 'output' column to be nullable, enabling the functionality for setting field values via SQL functions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/default-values/sql-functions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"public\".\"sql_function_table\" ALTER COLUMN \"output\" DROP NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Running Hasura GraphQL Engine with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and its required Postgres database using Docker Compose. This sets up the necessary containers for Hasura to function.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/postgres/citus-hyperscale-postgres/getting-started/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Commands in PostgreSQL Connector\nDESCRIPTION: This conceptual snippet represents how commands are processed in the PostgreSQL connector, converting them to SQL statements and executing them.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/v3/command-mutations.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- unique_username command in ndc_postgres\nSELECT COUNT(*) FROM users WHERE username = :username;\n\n-- add_user command in ndc_postgres\nINSERT INTO users (username, email) VALUES (:username, :email) RETURNING user_id;\n```\n\n----------------------------------------\n\nTITLE: Example Query Operators in Hasura GraphQL\nDESCRIPTION: Code references showing common query operators used in Hasura including where for filtering, order_by and limit for sorting, and aggregation functions like count, sum, avg, and max.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nwhere\norder_by\nlimit\ncount\nsum\navg\nmax\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shell Command Formatting with Comments\nDESCRIPTION: Illustrates the proper way to format shell commands, including the use of the 'bash' code type and how to include comments before commands.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/code-blocks.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# This is a comment explaining the command\necho \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Inherited Role via Metadata API\nDESCRIPTION: Deletes an existing inherited role from the system. Requires the role name to be deleted and admin authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/inherited-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n    \"type\" : \"drop_inherited_role\",\n    \"args\" : {\n       \"role_name\": \"sample_inherited_role\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database with psql\nDESCRIPTION: bash command to connect to a Postgres database using psql with connection parameters like username, password, host, port and database name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgres-guides/import-data-from-csv.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql postgres://<username>:<password>@<host>:<port>/<database>\n\n# for example\npsql postgres://postgres:postgres@localhost:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Server\nDESCRIPTION: Commands to add the Grafana repository, install Grafana, and configure it to start automatically on system boot.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\nsudo add-apt-repository \"deb https://packages.grafana.com/oss/deb stable main\" sudo apt update\nsudo apt install grafana\nsudo systemctl start grafana-server\nsudo systemctl enable grafana-server\n```\n\n----------------------------------------\n\nTITLE: CMake Integration for mimalloc\nDESCRIPTION: CMake commands to find and link against mimalloc in a project\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/preload-mimalloc/mimalloc/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(mimalloc 1.4 REQUIRED)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(myapp PUBLIC mimalloc)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(myapp PUBLIC mimalloc-static)\n```\n\n----------------------------------------\n\nTITLE: Deleting Migration Records from Server and Local Files\nDESCRIPTION: Command to delete migration records from both the Hasura server and local project files. This completely removes the migration history while keeping the current database schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-migrations.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate delete --all --database-name <database-name>\n```\n\n----------------------------------------\n\nTITLE: Adding Sources for Testing\nDESCRIPTION: Curl commands to add Postgres and SQL Server sources to a running GraphQL instance for testing.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$METADATA_URL\" \\\n--data-raw '{\"type\":\"pg_add_source\",\"args\":{\"name\":\"default\",\"configuration\":{\"connection_info\":{\"database_url\":\"'\"$POSTGRES_DB_URL\"'\",\"pool_settings\":{}}}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$METADATA_URL\" \\\n--data-raw '{\"type\":\"mssql_add_source\",\"args\":{\"name\":\"mssql\",\"configuration\":{\"connection_info\":{\"connection_string\":\"'\"$MSSQL_DB_URL\"'\",\"pool_settings\":{}}}}}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$METADATA_URL\" --data-raw '{\"type\":\"export_metadata\",\"args\":{}}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Authors by Name in GraphQL Query\nDESCRIPTION: This snippet demonstrates how to use the 'where' argument to filter authors based on their name in a GraphQL query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { name: { _eq: \"Sidney\" } }) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverless VPC Access Connector\nDESCRIPTION: Command to create a VPC Access connector that allows serverless Cloud Run services to access resources in the VPC network.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/deployment-guides/google-cloud-run-cloud-sql.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute networks vpc-access connectors create hasura-connector \\\n    --region=us-central1 \\\n    --network=default \\\n    --range=10.8.0.0/28\n```\n\n----------------------------------------\n\nTITLE: Hasura Plugin Uninstall Inherited Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the uninstall command.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_plugins_uninstall.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--envfile string      .env filename to load ENV vars from (default \".env\")\n--log-level string    log level (DEBUG, INFO, WARN, ERROR, FATAL) (default \"INFO\")\n--no-color            do not colorize output (default: false)\n--project string      directory where commands are executed (default: current dir)\n--skip-update-check   skip automatic update check on command execution\n```\n\n----------------------------------------\n\nTITLE: Fetching Hasura Cloud Tenant Details using GraphQL\nDESCRIPTION: This query retrieves details of a Hasura Cloud tenant, including its ID, slug, and associated project information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/cloud-api-reference.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery getTenantDetails {\n  tenant_by_pk(id: \"7a79cf94-0e53-4520-a560-1b02bf522f08\") {\n    id\n    slug\n    project {\n      id\n      endpoint\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL JDBC Connection URL Format\nDESCRIPTION: Examples of JDBC connection URL syntax for connecting Hasura to a MySQL database, including format with hostname, port, database name, username and password.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njdbc:mysql://<hostname>:<port>/<database name>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Schema with Direct URL in YAML\nDESCRIPTION: Example configuration for remote_schemas.yaml that defines a remote GraphQL schema named 'my-remote-schema' with a direct URL and a timeout of 40 seconds.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/metadata-format.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n- name: my-remote-schema\n  definition:\n    url: <remote-schema-url>\n    timeout_seconds: 40\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata for Remote Relationship Creation\nDESCRIPTION: This snippet provides a command to apply the previously defined metadata in Hasura, which activates the specified remote database relationship configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Rendering GraphQL Query with Syntax Highlighting in UI\nDESCRIPTION: Shows how the GraphQL query appears when rendered in the UI with syntax highlighting and line emphasis.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RFC Metadata in YAML\nDESCRIPTION: YAML metadata for the RFC, including authors, discussion links, and current state of the proposal.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/identity-columns.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthors: Philip Lykke Carlsen <philip@hasura.io>\ndiscussion:\n  https://github.com/hasura/graphql-engine-mono/issues/2407\n  https://github.com/hasura/graphql-engine-mono/pull/2507\nstate: pending answers to unresolved questions\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Files\nDESCRIPTION: Commands to copy the Prometheus configuration files to the appropriate system directories.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp -rpf prometheus.yml /etc/prometheus/prometheus.yml sudo mv consoles/ console_libraries/ /etc/prometheus/\n```\n\n----------------------------------------\n\nTITLE: Logging into Zeit Now CLI\nDESCRIPTION: Command to authenticate and login to Zeit Now platform using the CLI\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnow login\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Sidebar with Markdown Frontmatter\nDESCRIPTION: Markdown frontmatter configuration for documentation page sidebar settings, including position, label and custom class name.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_ai.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 45\nsidebar_label: 'AI & Machine Learning'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Running Hasura Console Offline\nDESCRIPTION: This snippet shows how to configure Hasura GraphQL Engine to load console assets from the server instead of CDN for offline use.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/deployment/graphql-engine-flags/config-examples.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# env var\nHASURA_GRAPHQL_CONSOLE_ASSETS_DIR=/srv/console-assets\n\n# flag\n--console-assets-dir=/srv/console-assets\n```\n\n----------------------------------------\n\nTITLE: Running a GraphQL Query to Test Remote Database Relationship\nDESCRIPTION: This snippet contains a GraphQL query that is used within the GraphiQL IDE to fetch articles related to authors from the connected databases, validating the remote relationship created.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/remote-relationships/remote-source-relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  source_author {\n    articles {\n      id\n      author_id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BoolExp Schema in Hasura\nDESCRIPTION: Describes the schema for boolean expressions, including various logical operators and column comparisons.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_28\n\nLANGUAGE: haskell\nCODE:\n```\nAndExp | OrExp | NotExp | ExistsExp | TrueExp | ColumnExp\n```\n\n----------------------------------------\n\nTITLE: Parsed GraphQL Subscription Query AST Structure in Rust\nDESCRIPTION: This code snippet shows the result of a GraphQL query parser, representing a simple subscription query in an AST (Abstract Syntax Tree) format. The structure contains detailed information about the query including operation type, field names, and source positions of each element.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/1115_parses_anonymous_subscription.txt#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nOk(\n    ExecutableDocument {\n        items: [\n            Spanning {\n                item: Operation(\n                    OperationDefinition {\n                        ty: Subscription,\n                        name: None,\n                        variable_definitions: None,\n                        directives: [],\n                        selection_set: Spanning {\n                            item: SelectionSet {\n                                items: [\n                                    Spanning {\n                                        item: Field(\n                                            Field {\n                                                alias: None,\n                                                name: Spanning {\n                                                    item: Name(\n                                                        \"subscriptionField\",\n                                                    ),\n                                                    start: SourcePosition {\n                                                        line: 2,\n                                                        col: 9,\n                                                    },\n                                                    end: SourcePosition {\n                                                        line: 2,\n                                                        col: 25,\n                                                    },\n                                                },\n                                                arguments: None,\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 2,\n                                            col: 9,\n                                        },\n                                        end: SourcePosition {\n                                            line: 2,\n                                            col: 25,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 20,\n                            },\n                            end: SourcePosition {\n                                line: 3,\n                                col: 7,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 7,\n                },\n                end: SourcePosition {\n                    line: 3,\n                    col: 7,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Hasura Metadata\nDESCRIPTION: This command exports the Hasura Metadata and saves it into the '/metadata' directory. It facilitates having local copies of Metadata for version control.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/resetting-migrations-metadata.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n## to also export the Hasura Metadata and save it in the ``/metadata`` directory\n\nhasura metadata export\n```\n\n----------------------------------------\n\nTITLE: Structuring Hasura Project Directory\nDESCRIPTION: Shows the file structure of a Hasura project directory containing Metadata, Migrations, and Seeds.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/cloud-ci-cd/one-click-deploy/create-one-click-to-deploy-apps.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n📂 hasura\n├─ 📄 config.yaml\n├─ 📂 metadata\n├─ 📂 migrations\n└─ 📂 seeds\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Float\nDESCRIPTION: This GraphQL snippet illustrates querying a float field. The `Float` scalar type represents a double-precision floating-point number.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/bigquery-types.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    float_col: 0.8\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Multicurrency Order By Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for ordering Multicurrency query results by currency and value fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\ninput Multicurrency_order_by @oneOf {\n  # Scalar fields\n  Currency: order_by\n  Value: order_by\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Action Output Type with Relationship\nDESCRIPTION: GraphQL schema showing the UpdateAuthorOutput type after adding a relationship to the author table\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/actions/action-relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype UpdateAuthorOutput {\n  author_id: Int!\n  updatedAuthor: author\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access for Hasura GraphQL Engine\nDESCRIPTION: This snippet defines the robot exclusion rules for web crawlers. It allows all user agents ('*') to access all parts of the website, as there are no specific disallow rules specified.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Adding Logical Model Permissions using YAML\nDESCRIPTION: This YAML snippet demonstrates how to add select permissions to a Logical Model for a specific role. It allows specifying accessible columns and applying a filter to limit row access.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/snowflake/logical-models.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n  logical_models:\n    - name: \"<name>\"\n      fields:\n        ...\n      select_permissions:\n        - role: \"<role name>\"\n          permission:\n            columns: \"*\" | [\n              \"column 1\",\n              \"column 2\",\n              ...\n            ]\n            filter: \"<boolean expression>\"\n        - ...\n```\n\n----------------------------------------\n\nTITLE: Building Nx Internal Plugin Library\nDESCRIPTION: Command to build the nx-internal-plugin library using Nx build tools.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/nx/internal-plugin/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRun `nx build nx-internal-plugin` to build the library.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Enterprise License Key and Admin Secret\nDESCRIPTION: YAML configuration excerpt showing how to set the Enterprise Edition license key and admin secret in the docker-compose.yaml file.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/mysql/docker.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngraphql-engine:\n  image: hasura/graphql-engine:v2.24.0\n  environment:\n    HASURA_GRAPHQL_EE_LICENSE_KEY: <license key>\n    HASURA_GRAPHQL_ADMIN_SECRET: <your secretkey>\n```\n\n----------------------------------------\n\nTITLE: Column Configuration Values\nDESCRIPTION: This snippet outlines the configuration properties for individual columns, such as customizing the name of the field and its description in the GraphQL schema.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n| Key         | Required | Schema   | Description                                                                                                                                   |\n| ----------- | -------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| custom_name | false    | `String` | Customize the name of the field in the GraphQL schema                                                                                         |\n| comment     | false    | `String` | Customize the description shown for the field in GraphQL introspection. If null or omitted then an autogenerated description is used instead. |\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PG Dump API Access\nDESCRIPTION: Example of how to configure API access through environment variables or command flags to enable/disable the PG Dump API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/pgdump.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# enable only graphql & Metadata apis, disable pgdump\n--enabled-apis=\"graphql,metadata\"\nHASURA_GRAPHQL_ENABLED_APIS=\"graphql,metadata\"\n```\n\n----------------------------------------\n\nTITLE: Simplifying AND Expression in GraphQL\nDESCRIPTION: Example showing how to simplify multiple conditions with AND operator into a single object.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/graphql-api/query.mdx#2025-04-17_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  rating: { _gte: 4 },\n  published_on: { _gte: \"2018-01-01\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Information in Markdown\nDESCRIPTION: Example of adding description and keywords meta information at the beginning of a documentation page using YAML frontmatter.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Data validations in Hasura\nkeywords:\n  - hasura\n  - docs\n  - schema\n  - data validation\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'escapeUri' Function in Kriti Template Engine\nDESCRIPTION: Example of using the 'escapeUri' function in Kriti template engine to escape a URI string.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_53\n\nLANGUAGE: kriti\nCODE:\n```\n{{ escapeUri(\"?foo=bar/baz\") }}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Structure in YAML\nDESCRIPTION: YAML definition for creating a 'notes' table with id and note fields.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/aws-lambda/java/echo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotes:\n  id: int\n  note: text\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata Changes with Hasura CLI\nDESCRIPTION: This command applies the metadata changes defined in the configuration files to the Hasura instance. It ensures the new field names are propagated and active in the GraphQL API. Requires Hasura CLI to be installed and configured.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/custom-field-names.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Function Scripts in package.json\nDESCRIPTION: NPM scripts configuration for building and serving Netlify lambda functions locally\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/netlify-functions/nodejs/echo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"lambda-serve\": \"netlify-lambda serve functions\",\n  \"lambda-build\": \"netlify-lambda build functions\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hasura with Docker Compose\nDESCRIPTION: Command to start Hasura GraphQL Engine and related services using Docker Compose in detached mode.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/oracle/docker.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running Haskell test suite with Make\nDESCRIPTION: Commands to run different categories of Haskell tests using Make, which handles database setup automatically.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make test-unit\n$ make test-integration-postgres\n$ make test-integration-mssql\n```\n\n----------------------------------------\n\nTITLE: Starting Reference Agent for Hasura V3 using Docker Compose\nDESCRIPTION: Command to start the reference agent for local development using Docker Compose. This is part of the NDC spec and is used when a specific database connector is not needed.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up reference_agent\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Schema Generator in Hasura GraphQL Engine\nDESCRIPTION: Command to execute the metadata-schema-generator utility which regenerates the metadata schema goldenfile needed for tests. This command runs the binary directly from cargo within the project.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/metadata-schema-generator/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --bin metadata-schema-generator\n```\n\n----------------------------------------\n\nTITLE: Importing Thumbnail Component in React/MDX\nDESCRIPTION: Import statement for the Thumbnail component used in the documentation for displaying support-related images.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/get-support.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Hasura Migration Command Example\nDESCRIPTION: Shows a real-world example of using the Hasura CLI to apply database migrations with an admin secret.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura migrate apply --admin-secret \"<admin-secret>\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Function to Zeit with Environment Variable\nDESCRIPTION: Command to deploy the function to Zeit with the required Hasura GraphQL endpoint environment variable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/zeit-now/go/mutation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnow -e HGE_ENDPOINT=https://my-app.herokuapp.com/v1/graphql\n```\n\n----------------------------------------\n\nTITLE: Relationship Aggregate Query\nDESCRIPTION: Shows how to query aggregates through relationships\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist(limit: 2, offset: 1) {\n    Name\n    Albums_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Documentation\nDESCRIPTION: Example of importing React components using the @site absolute import path provided by Docusaurus.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata using CLI\nDESCRIPTION: This command applies the Hasura metadata using the Hasura CLI. It completely replaces the existing metadata on the Hasura instance.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/migrations-metadata-seeds/manage-metadata.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"# in project directory\nhasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Example SQL Translation for Simple Update\nDESCRIPTION: SQL equivalent of the basic JSON constant update mutation\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/mssql-update-mutations.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE ... SET data = JSON_MODIFY(data, 'lax $.name', 'John Doe')\n```\n\n----------------------------------------\n\nTITLE: Applying Hasura Metadata with CLI\nDESCRIPTION: CLI command to apply Hasura metadata changes after updating metadata files.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/table-relationships/create.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: Basic Metadata Apply Command\nDESCRIPTION: The basic syntax for the hasura metadata apply command with optional flags.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_metadata_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Names Schema in JSON\nDESCRIPTION: JSON schema for mapping Postgres column names to GraphQL names. Note: This schema is deprecated in favor of using custom_name property in ColumnConfig.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"column1\" : String,\n  \"column2\" : String,\n  ..\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DDN Integration with GraphQL Query\nDESCRIPTION: Example GraphQL query demonstrating how to fetch data from both Hasura v2 and DDN connector sources using remote relationships. The query retrieves artist information and related todos with a DDN namespace prefix.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/databases/data-connectors/ddn-connectors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ArtistAndTodos{\n  Artists {\n    ArtistId\n    DDN_ToDoByArtistId {\n      id\n      status\n      description\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"data\": {\n    \"Artists\": [\n      {\n        \"ArtistId\": 1,\n        \"toByArtistId\": {\n          \"id\": 1,\n          \"status\": \"pending\",\n          \"description\": \"Plan work\"\n        }\n      },\n      {\n        \"ArtistId\": 3,\n        \"toByArtistId\": {\n          \"id\": 3,\n          \"status\": \"pending\",\n          \"description\": \"Checkout TS connector\"\n        }\n      },\n      {\n        \"ArtistId\": 4,\n        \"toByArtistId\": {\n          \"id\": 4,\n          \"status\": \"pending\",\n          \"description\": \"\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AST Structure in Rust\nDESCRIPTION: This code snippet defines a portion of a GraphQL Abstract Syntax Tree (AST) structure in Rust. It includes nested objects representing fields, selection sets, and source positions for a GraphQL query. The structure tracks line and column numbers for various elements of the query.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0036_parses_variable_definition_with_list_type.txt#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n                                                                    line: 3,\n                                                                    col: 25,\n                                                                },\n                                                            },\n                                                        ],\n                                                        start: SourcePosition {\n                                                            line: 3,\n                                                            col: 10,\n                                                        },\n                                                        end: SourcePosition {\n                                                            line: 3,\n                                                            col: 26,\n                                                        },\n                                                    },\n                                                ),\n                                                directives: [],\n                                                selection_set: None,\n                                            },\n                                        ),\n                                        start: SourcePosition {\n                                            line: 3,\n                                            col: 5,\n                                        },\n                                        end: SourcePosition {\n                                            line: 3,\n                                            col: 9,\n                                        },\n                                    },\n                                ],\n                            },\n                            start: SourcePosition {\n                                line: 1,\n                                col: 24,\n                            },\n                            end: SourcePosition {\n                                line: 4,\n                                col: 1,\n                            },\n                        },\n                    },\n                ),\n                start: SourcePosition {\n                    line: 1,\n                    col: 1,\n                },\n                end: SourcePosition {\n                    line: 4,\n                    col: 1,\n                },\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Player in JSX\nDESCRIPTION: A JSX code snippet that implements a video player component with a source URL to a Hasura documentation presentation video. The component includes fallback text for browsers that don't support video playback.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<video controls width=\"100%\">\n  <source\n    src={\n      'https://graphql-engine-cdn.hasura.io/assets/videos/docs/documentation-presentation.mp4'\n    }\n    type=\"video/mp4\"\n  />\n  Sorry, your browser doesn't support embedded videos.\n</video>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Hasura Pro CLI Plugin using Bash\nDESCRIPTION: This command uninstalls the Hasura Pro CLI plugin from the Hasura CLI. It removes the plugin completely from the system.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/pro-cli/installing-uninstalling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhasura plugins uninstall pro\n```\n\n----------------------------------------\n\nTITLE: Listing ECS Task Definitions\nDESCRIPTION: Lists all ECS task definitions in the AWS account using the AWS CLI.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naws ecs list-task-definitions\n```\n\n----------------------------------------\n\nTITLE: React Component Import\nDESCRIPTION: Import statement for a FAQ SVG icon component used in the documentation header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/faq.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport FAQ from '@site/static/icons/features/faq.svg';\n```\n\n----------------------------------------\n\nTITLE: Installing Zeit Now CLI\nDESCRIPTION: Command to install the Zeit Now command-line interface globally.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/zeit-now/nodejs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g now\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run for SQLite Data Connector Agent\nDESCRIPTION: Commands to build a Docker image for the SQLite data connector agent and run it, exposing port 8100.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/sqlite/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n> docker build . -t dc-sqlite-agent:latest\n> docker run -it --rm -p 8100:8100 dc-sqlite-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Deprecated Format for Creating Object Relationship with Remote Table\nDESCRIPTION: This is a deprecated format for creating an object relationship using a foreign key constraint on a remote table. It uses the 'column' field instead of the more general 'columns' field.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/metadata-api/relationship.mdx#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foreign_key_constraint_on\": {\n    \"table\": \"author_details\",\n    \"column\": \"author_id\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing General Computed Columns Across Database Systems\nDESCRIPTION: Defines how general computed columns work across MSSQL, PostgreSQL 14, and MySQL, making them neither updatable nor insertable.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/column-mutability.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ngenerated => not updatable, not insertable\n```\n\n----------------------------------------\n\nTITLE: Setting Static Preset Values in GraphQL Schema\nDESCRIPTION: Example of using @preset directive with static values\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/remote-schemas/auth/remote-schema-permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  get_user(id: ID! @preset(value: \"x-hasura-user-id\")): User\n  get_user_activities(user_id: ID!, limit: Int! @preset(value: 10)): [Activity]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Value Type in Haskell\nDESCRIPTION: Defines the InputValue type to handle both GraphQL and JSON input values, allowing for variable expansion and type checking.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\ndata InputValue v\n  = GraphQLValue (G.Value v)\n  | JSONValue J.Value\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cloud Function Directory\nDESCRIPTION: Command to change directory to the cloud function implementation folder.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/event-triggers/google-cloud-functions/nodejs6/mutation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd cloudfunction\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository - Bash\nDESCRIPTION: This series of commands initializes a new Git repository in the project directory, allowing for version control of the project files and configuration.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/quickstart.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Flowchart: Current JSON to Metadata Conversion\nDESCRIPTION: Mermaid flowchart showing the current direct conversion between JSON and Metadata types.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/rfcs/separate-metadata-api-types.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    JSON <--> Metadata\n```\n\n----------------------------------------\n\nTITLE: Development Server Start Command\nDESCRIPTION: Command to start the local documentation development server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Sample ECS Task Description JSON Output with Network Interface ID\nDESCRIPTION: Example JSON output from the describe-tasks command showing the attachments section where the Elastic Network Interface ID can be found. The highlighted line shows the networkInterfaceId that will be used in the next step.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tasks\": [\n        {\n            \"attachments\": [\n                {\n                    \"id\": \"d9e7735a-16aa-4128-bc7a-b2d5115029e9\",\n                    \"type\": \"ElasticNetworkInterface\",\n                    \"status\": \"ATTACHED\",\n                    \"details\": [\n                        {\n                            \"name\": \"subnetId\",\n                            \"value\": \"subnetabcd1234\"\n                        },\n                        {\n                            \"name\": \"networkInterfaceId\",\n                            \"value\": \"eni-0fa40520aeEXAMPLE\"\n                        },\n                    ]\n                }\n…\n}\n```\n\n----------------------------------------\n\nTITLE: Using Out-of-line Notes in Haskell Modules\nDESCRIPTION: Shows how to create GHC-style Notes for detailed explanations that may be referenced from multiple places in the code. These notes help document complex logic or design decisions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/STYLE.md#2025-04-17_snippet_21\n\nLANGUAGE: haskell\nCODE:\n```\n{- Note [Checking metadata consistency in run_sql]\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSQL queries executed by run_sql may change the Postgres schema in arbitrary\nways. We attempt to automatically update the metadata to reflect those changes\nas much as possible---for example, if a table is renamed, we want to update the\nmetadata to track the table under its new name instead of its old one.\n\n... -}\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Commands for cloning the repository and navigating to the project directory.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:hasura/graphql-engine\n$ cd graphql-engine/community/boilerplates/remote-schemas/azure-functions/nodejs\n```\n\n----------------------------------------\n\nTITLE: JSON Mutation Request for Updating Track Data in Hasura\nDESCRIPTION: This JSON structure represents the mutation request sent to update a Track row. It includes the table name, where clause, update operations, and returning fields. The update includes both set and custom operator (increment) actions.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"relationships\": [],\n  \"operations\": [\n    {\n      \"type\": \"update\",\n      \"table\": [\"Track\"],\n      \"where\": {\n        \"type\": \"binary_op\",\n        \"operator\": \"equal\",\n        \"column\": {\n          \"name\": \"TrackId\",\n          \"column_type\": \"number\"\n        },\n        \"value\": {\n          \"type\": \"scalar\",\n          \"value\": 1,\n          \"value_type\": \"number\"\n        }\n      },\n      \"updates\": [,\n        {\n          \"type\": \"set\",\n          \"column\": \"UnitPrice\",\n          \"value\": 2.50,\n          \"value_type\": \"number\"\n        }\n        {\n          \"type\": \"custom_operator\",\n          \"operator_name\": \"inc\",\n          \"column\": \"Milliseconds\",\n          \"value\": 100,\n          \"value_type\": \"number\"\n        }\n      ],\n      \"post_update_check\": {\n        \"type\": \"and\",\n        \"expressions\": []\n      },\n      \"returning_fields\": {\n        \"TrackId\": {\n          \"type\": \"column\",\n          \"column\": \"TrackId\",\n          \"column_type\": \"number\"\n        },\n        \"Name\": {\n          \"type\": \"column\",\n          \"column\": \"Milliseconds\",\n          \"column_type\": \"number\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata with Hasura CLI\nDESCRIPTION: Execute a command using the Hasura CLI to apply metadata changes, particularly after defining or modifying inherited roles in a YAML file. The command is 'hasura metadata apply', which processes the defined roles to be recognized by Hasura.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/auth/authorization/inherited-roles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhasura metadata apply\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for GraphQL Boolean Expression\nDESCRIPTION: Example of a JSON structure representing a GraphQL boolean expression with a nested JSON value that cannot be directly translated into GraphQL syntax.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/documentation/deep-dives/schema.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"w\": {\n    # graphql boolean expression\n    \"foo_json_field\": {\n      \"_eq\": {\n        # json value that cannot be translated\n        \"1\": \"2\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Password Generation Script\nDESCRIPTION: Command to execute the Python script for generating a hashed password for Prometheus authentication.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/observability/enterprise-edition/prometheus/integrate-prometheus-grafana.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython3 gen-pass.py\n```\n\n----------------------------------------\n\nTITLE: Querying Artists and Their Albums in GraphQL\nDESCRIPTION: This GraphQL query retrieves artist names and their associated album titles, demonstrating a one-to-many relationship between artists and albums.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Artist {\n    Name\n    Albums {\n      Title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options for hasura migrate delete command in SASS\nDESCRIPTION: This snippet lists the available options for the 'hasura migrate delete' command, including flags for deleting all migrations, forcing execution without confirmation, and specifying a version to delete.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/hasura-cli/commands/hasura_migrate_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --all            clears all migrations for selected database\n    --force          when set executes operation without any confirmation\n-h, --help           help for delete\n    --server         to reset migrations only on server\n    --version uint   deletes the specified version in migrations\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Apollo Federation Key\nDESCRIPTION: Example of generated GraphQL schema showing the @key directive added to a user type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype user @key(fields: \"id\") {\n  id: Int!\n  name: String\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running APIs.guru Evaluation - JavaScript\nDESCRIPTION: Script to evaluate Swagger files with a configurable limit parameter that determines the maximum number of files to process\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/frontend/libs/open-api-to-graphql/test/evaluation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnode eval_apis.guru.js <limit>\n```\n\n----------------------------------------\n\nTITLE: Defining Model and ObjectType with Aggregation Support in OpenDD\nDESCRIPTION: YAML configuration for Model and ObjectType definitions with aggregation capabilities. This configuration specifies how aggregation works at both the model level and for nested array fields within an object type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/rfcs/aggregations.md#2025-04-17_snippet_99\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v1\ndefinition:\n  name: Invoice\n  objectType: Invoice\n  source:\n    dataConnectorName: app_connector\n    collection: Invoice\n  filterExpressionType: InvoiceBoolExp\n  orderByExpression: InvoiceOrderByExp\n  # New! Specify the aggregation expression used to configure the shape of aggregation for the root field\n  aggregateExpression: Invoice_aggregate_exp\n  # New! Specify the groups expression used to configure the shape of grouping for the root field\n  groupsExpression: Invoice_groups_exp\n  graphql:\n    # New! The type name to use for the `filter_input` type\n    filterInputTypeName: Invoice_filter_input\n    # New! The root field name to use for the aggregate root field\n    aggregate:\n      queryRootField: Invoice_aggregate\n    # New! The root field name to use for the groups root field\n    groups:\n      queryRootField: Invoice_groups\n    selectMany:\n      queryRootField: Invoice\n    selectUniques:\n      - queryRootField: InvoiceByInvoiceId\n        uniqueIdentifier:\n          - InvoiceId\n\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Invoice\n  fields:\n    - name: InvoiceId\n      type: Int!\n    - name: InvoiceDate\n      type: Date!\n    - name: CustomerId\n      type: Int!\n    - name: Discounts\n      type: [Discount!]!\n      # New: Aggregations over nested arrays\n      aggregate:\n        aggregateExpression: Discount_aggregate_exp\n        description: Aggregate over this invoice's discounts\n      graphql:\n        aggregateFieldName: Discounts_aggregate # This is effectively computed field added to the object type\n    - name: BillingAddress\n      type: Address\n    - name: Total\n      type: Decimal!\n  graphql:\n    typeName: App_Invoice\n    inputTypeName: App_InvoiceInput\n  dataConnectorTypeMapping:\n    - dataConnectorName: app_connector\n      dataConnectorObjectType: Invoice\n      fieldMapping:\n        InvoiceId:\n          column:\n            name: InvoiceId\n        InvoiceDate:\n          column:\n            name: InvoiceDate\n        CustomerId:\n          column:\n            name: CustomerId\n        Discounts:\n          column:\n            name: Discounts\n        BillingAddress:\n          column:\n            name: BillingAddress\n        Total:\n          column:\n            name: Total\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: A requirements.txt file specifying exact versions of Python packages required for the Hasura GraphQL Engine test suite. Includes packages for GraphQL, testing, database connectivity, and various utilities.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/tests-py/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naniso8601==7.0.0\nasync-timeout==4.0.2\nattrs==22.2.0\ncertifi==2022.12.7\ncffi==1.15.1\ncharset-normalizer==3.1.0\ncroniter==1.3.8\ncryptography==3.4.8\nexecnet==1.9.0\ngraphene==2.1.9\ngraphql-core==2.3.2\ngraphql-relay==2.0.1\nidna==3.4\niniconfig==2.0.0\njsondiff==2.0.0\npackaging==23.0\npluggY==1.0.0\npromise==2.3\npsycopg2-binary==2.9.5\npy==1.11.0\npycparser==2.21\nPyJWT==2.3.0\npytest==6.2.5\npytest-durations==1.2.0\npytest-fixture-order==0.1.4\npytest-xdist==3.2.0\npython-dateutil==2.8.2\nPyYAML==6.0\nredis==4.5.1\nrequests==2.28.2\nruamel.yaml==0.17.21\nruamel.yaml.clib==0.2.7\nRx==1.6.3\nsix==1.16.0\nSQLAlchemy==1.4.46\ntoml==0.10.2\nurllib3==1.26.14\nwebsocket-client==0.56.0\n```\n\n----------------------------------------\n\nTITLE: Ordering by Aggregate on Related Tables with Filters\nDESCRIPTION: Query that retrieves artists ordered by the count of their albums with a filter applied. Demonstrates filtering related tables in order_by operations using the where property and aggregating with star_count_aggregate.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Artist\"]\n  },\n  \"relationships\": [\n    {\n      \"type\": \"table\",\n      \"source_table\": [\"Artist\"],\n      \"relationships\": {\n        \"Albums\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Album\"]\n          },\n          \"relationship_type\": \"array\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"fields\": {\n      \"Name\": { \"type\": \"column\", \"column\": \"Name\", \"column_type\": \"string\" }\n    },\n    \"order_by\": {\n      \"relations\": {\n        \"Albums\": {\n          \"where\": {\n            \"type\": \"binary_op\",\n            \"operator\": \"greater_than\",\n            \"column\": {\n              \"name\": \"Title\",\n              \"column_type\": \"string\"\n            },\n            \"value\": {\n              \"type\": \"scalar\",\n              \"value\": \"T\",\n              \"value_type\": \"string\"\n            }\n          },\n          \"subrelations\": {}\n        }\n      },\n      \"elements\": [\n        {\n          \"target_path\": [\"Albums\"],\n          \"target\": {\n            \"type\": \"star_count_aggregate\"\n          },\n          \"order_direction\": \"desc\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Count Aggregates Query Request\nDESCRIPTION: Demonstrates the query request structure for distinct and regular count aggregates\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Album\"]\n  },\n  \"relationships\": [],\n  \"query\": {\n    \"aggregates\": {\n      \"aggregate_distinct_count\": {\n        \"type\": \"column_count\",\n        \"columns\": [\"Title\"],\n        \"distinct\": true\n      },\n      \"aggregate_count\": {\n        \"type\": \"star_count\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InputArguments Definition in JSON\nDESCRIPTION: The `InputArguments` structure allows referencing of table columns, prefixed with `$`, or direct scalar values within remote field arguments. This setup facilitates dynamic data mappings between local and remote schemas.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/api-reference/syntax-defs.mdx#2025-04-17_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  InputField : $PGColumn | Scalar\n}\n```\n\n----------------------------------------\n\nTITLE: MS SQL Server spatial data equality query example in GraphQL\nDESCRIPTION: An example query that selects values equal to a given geography instance using the STEquals spatial operator in MS SQL Server.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  spatial_types_geog(\n    where: {\n      point: { _st_equals: \"POINT(3 4)\" }\n      }\n    ) {\n    point\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Task Definition Registration Output with ARN\nDESCRIPTION: Example JSON output from the register-task-definition command showing the new task definition ARN with its revision number. This ARN is needed to update the ECS service.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/enterprise/getting-started/quickstart-aws-ecs.mdx#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n    {\n        \"taskDefinition\": {\n            \"taskDefinitionArn\": \"arn:aws:ecs:region:aws_account_id:task-definition/hasura:7\",\n```\n\n----------------------------------------\n\nTITLE: Converting and Compressing Video to WebM Format using FFmpeg\nDESCRIPTION: This command uses FFmpeg to convert an MP4 video to WebM format with VP9 codec, setting a specific quality level for compression. It's used to prepare animated images for inclusion in the documentation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/style/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n ffmpeg -i <ORIGINAL>.mp4 -c vp9 -b:v 0 -crf 55 <DESIRED_FINAL_FILENAME>.webm\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Artist Table and Fibonacci Function in Hasura\nDESCRIPTION: This JSON schema defines the Artist table and a user-defined function 'fibonacci'. It includes table structure, primary key, column definitions, and function details such as arguments and return type.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": [\n        \"Artist\"\n      ],\n      \"type\": \"table\",\n      \"primary_key\": [\n        \"ArtistId\"\n      ],\n      \"description\": \"Collection of artists of music\",\n      \"columns\": [\n        {\n          \"name\": \"ArtistId\",\n          \"type\": \"number\",\n          \"nullable\": false,\n          \"description\": \"Artist primary key identifier\",\n          \"insertable\": false,\n          \"updatable\": false\n        },\n        {\n          \"name\": \"Name\",\n          \"type\": \"string\",\n          \"nullable\": true,\n          \"description\": \"The name of the artist\",\n          \"insertable\": false,\n          \"updatable\": false\n        }\n      ],\n      \"insertable\": false,\n      \"updatable\": false,\n      \"deletable\": false\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": [\"fibonacci\"],\n      \"type\": \"read\",\n      \"returns\": {\n        \"type\": \"table\",\n        \"table\": [\"Artist\"]\n      },\n      \"arity\": \"many\",\n      \"args\": [\n        { \"name\": \"take\", \"type\": \"Integer\" },\n        { \"name\": \"__hasura_session\", \"type\": \"JSON\" }\n      ],\n      \"description\": \"Fibonacci function - Take N Fibonacci numbers!\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Trigger via Metadata API - HTTP\nDESCRIPTION: This HTTP request demonstrates how to create a Scheduled Trigger using Hasura's Metadata API, specifying necessary parameters such as name, webhook, schedule, and any optional configurations. The content type is set to JSON and includes an admin role header.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/scheduled-triggers/create-cron-trigger.mdx#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1/metadata HTTP/1.1\nContent-Type: application/json\nX-Hasura-Role: admin\n\n{\n   \"type\": \"create_cron_trigger\",\n   \"args\": {\n      \"name\": \"eod_reports\",\n      \"webhook\": \"https://mywebhook.com/eod\",\n      \"schedule\": \"0 22 * * 1-5\",\n      \"payload\": {},\n      \"include_in_metadata\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Properties in Markdown Frontmatter\nDESCRIPTION: This code snippet defines frontmatter metadata for a markdown file, likely used in a documentation system. It sets the sidebar position, label, and class name for the document.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_data_api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 30\nsidebar_label: 'The Data API'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Base Image Naming Convention\nDESCRIPTION: Specifies the naming format for the base Docker image used to build the Hasura GraphQL Engine, including SHA256 hash, OS type, and architecture information.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/packaging/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhasura/graphql-engine-base:<SHA256>.<OS>.<ARCH>\n```\n\n----------------------------------------\n\nTITLE: Representing GraphQL AST Structure in Rust\nDESCRIPTION: This code snippet shows part of a GraphQL AST representation in Rust. It includes structures for tracking spanning elements with source positions, field definitions with arguments, and directive declarations. The code maintains detailed position information for each element to support error reporting and validation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/v3/crates/graphql/lang-graphql/tests/query_testdata/ok/0006_selection_with_fragment_spread.txt#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nkey: Spanning {\n    item: Name(\n        \"duration\",\n    ),\n    start: SourcePosition {\n        line: 9,\n        col: 24,\n    },\n    end: SourcePosition {\n        line: 9,\n        col: 31,\n    },\n},\nvalue: Spanning {\n    item: SimpleValue(\n        String(\n            \"2 hours\",\n        ),\n    ),\n    start: SourcePosition {\n        line: 9,\n        col: 34,\n    },\n    end: SourcePosition {\n        line: 9,\n        col: 42,\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: GraphQL Resolver Implementation\nDESCRIPTION: Example of a GraphQL resolver that wraps a REST endpoint for fetching user data\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/rest-wrapper/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetUser: async (_, { id }) => {\n    return await getData(restAPIEndpoint + '/users/' + id);\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of GraphQL Query with Relationships\nDESCRIPTION: This JSON structure represents the GraphQL query for artists and albums, including relationship information and query details for both the main entity and the related entity.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/dc-agents/DOCUMENTATION.md#2025-04-17_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"type\": \"table\",\n    \"name\": [\"Artist\"]\n  },\n  \"relationships\": [\n    {\n      \"type\": \"table\",\n      \"source_table\": [\"Artist\"],\n      \"relationships\": {\n        \"ArtistAlbums\": {\n          \"target\": {\n            \"type\": \"table\",\n            \"name\": [\"Album\"]\n          },\n          \"relationship_type\": \"array\",\n          \"column_mapping\": {\n            \"ArtistId\": \"ArtistId\"\n          }\n        }\n      }\n    }\n  ],\n  \"query\": {\n    \"where\": {\n      \"expressions\": [],\n      \"type\": \"and\"\n    },\n    \"offset\": null,\n    \"order_by\": null,\n    \"limit\": null,\n    \"fields\": {\n      \"Albums\": {\n        \"type\": \"relationship\",\n        \"relationship\": \"ArtistAlbums\",\n        \"query\": {\n          \"where\": {\n            \"expressions\": [],\n            \"type\": \"and\"\n          },\n          \"offset\": null,\n          \"order_by\": null,\n          \"limit\": null,\n          \"fields\": {\n            \"Title\": {\n              \"type\": \"column\",\n              \"column\": \"Title\",\n              \"column_type\": \"string\"\n            }\n          }\n        }\n      },\n      \"Name\": {\n        \"type\": \"column\",\n        \"column\": \"Name\",\n        \"column_type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Function in Haskell\nDESCRIPTION: A placeholder main function for the tutorial. This is not part of the actual tutorial content.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/server/lib/ekg-prometheus/Tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nmain :: IO ()\nmain = pure ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Documentation Page\nDESCRIPTION: YAML frontmatter configuration for a documentation page that sets up sidebar positioning, labeling and styling for the deployment section.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/_heading_deployment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 70\nsidebar_label: 'Deployment'\nsidebar_class_name: sidebar_heading\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Function URL\nDESCRIPTION: Command to get the HTTP URL of the deployed function and its JSON response showing the hostname.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/community/boilerplates/remote-schemas/azure-functions/nodejs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ az functionapp show  -g \"my-functions-group\" -n \"hello-graphql\"\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"hostNames\": [\n    \"hello-graphql.azurewebsites.net\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Documentation Build Command\nDESCRIPTION: Command to build the documentation site.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/wiki/contributions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Using JSON Scalar in GraphQL Query\nDESCRIPTION: Example of using the custom json scalar type for stringified JSON values.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/postgres/postgresql-types.mdx#2025-04-17_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nobjects: [\n  {\n    json_col: \"{ \\\"name\\\": \\\"raven\\\" }\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Metadata using Hasura CLI\nDESCRIPTION: This bash command applies the metadata changes defined in the YAML files to the Hasura instance. This command ensures that the defined computed fields are added and available in the Hasura GraphQL API.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/schema/bigquery/computed-fields.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"hasura metadata apply\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Geometries Using _st_contains Operator in GraphQL\nDESCRIPTION: Query to fetch geometry values contained within a specified polygon using the _st_contains operator. Uses GeoJSON format for geometry representation.\nSOURCE: https://github.com/hasura/graphql-engine/blob/master/docs/docs/queries/ms-sql-server/filters/geospatial-operators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery geom_table($polygon: geometry){\n  geom_table(\n    where: {geom_col: {_st_contains: $polygon}}\n  ){\n    id\n    geom_col\n  }\n}\n```"
  }
]