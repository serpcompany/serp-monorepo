[
  {
    "owner": "bluenviron",
    "repo": "mediamtx",
    "content": "TITLE: WebRTC additional host configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set `webrtcAdditionalHosts` to specify public IPs, LAN addresses, and DNS names. This is necessary when the server is behind a NAT or within a container, enabling clients to establish a connection. It allows for multiple values to support various network scenarios.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_138\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcAdditionalHosts: [192.168.x.x, 1.2.3.4, my-dns.example.org, ...]\n```\n\n----------------------------------------\n\nTITLE: Configuring TURN server with secret-based authentication in YAML\nDESCRIPTION: This YAML configuration shows how to configure a TURN server for WebRTC, using secret-based authentication.  The username is set to `AUTH_SECRET` and the password is the secret of the TURN server, allowing MediaMTX to generate and send credentials before the WebRTC/ICE connection.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_143\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcICEServers2:\n- url: turn:host:port\n  username: AUTH_SECRET\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with FFmpeg\nDESCRIPTION: This command uses FFmpeg to publish a video/audio file as an RTSP stream to the MediaMTX server running locally. The stream is made available at rtsp://localhost:8554/mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Configuring Stream Recording (YAML)\nDESCRIPTION: This snippet demonstrates how to configure stream recording in MediaMTX. It sets the `record` and `recordPath` parameters. The `recordPath` allows for using variables like `%path`, `%Y`, `%m`, `%d`, `%H`, `%M`, `%S`, `%f`, and `%s` in the file name.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_95\n\nLANGUAGE: YAML\nCODE:\n```\npathDefaults:\n  # Record streams to disk.\n  record: yes\n  # Path of recording segments.\n  # Extension is added automatically.\n  # Available variables are %path (path name), %Y %m %d (year, month, day),\n  # %H %M %S (hours, minutes, seconds), %f (milliseconds), %s (unix epoch).\n  recordPath: ./recordings/%path/%Y-%m-%d_%H-%M-%S-%f\n```\n\n----------------------------------------\n\nTITLE: FFmpeg command to re-encode stream for WebRTC compatibility\nDESCRIPTION: This FFmpeg command re-encodes a stream using H264 and Opus codecs for broad browser compatibility with WebRTC. It converts the input stream to H264 video and Opus audio, then publishes it to a MediaMTX server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_145\n\nLANGUAGE: sh\nCODE:\n```\nffmpeg -i rtsp://original-source \\\n-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \\\n-c:a libopus -b:a 64K -async 50 \\\n-f rtsp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Running MediaMTX with Docker\nDESCRIPTION: This command downloads and runs the MediaMTX Docker image. The `--network=host` flag is necessary for RTSP to function correctly, preventing Docker from altering UDP packet source ports.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_1\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run --rm -it --network=host bluenviron/mediamtx:latest\n```\n\n----------------------------------------\n\nTITLE: FFmpeg RTSP Stream with Credentials\nDESCRIPTION: This FFmpeg command demonstrates how to publish an RTSP stream to a MediaMTX server, including the username and password in the RTSP URL for authentication.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_77\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://myuser:mypass@localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Ingest Multiple RTSP Streams\nDESCRIPTION: This example shows how to configure MediaMTX to connect to multiple existing RTSP servers by adding multiple entries in the `paths` section.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_38\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied1:\n    source: rtsp://url1\n\n  proxied2:\n    source: rtsp://url1\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Demand (FFmpeg)\nDESCRIPTION: This snippet configures `runOnDemand` to execute a command when a path is requested by a reader, but no one is publishing to it. It uses FFmpeg to publish a stream on demand.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_123\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when this path is requested by a reader\n  # and no one is publishing to this path yet.\n  # This is terminated with SIGINT when there are no readers anymore.\n  # The following environment variables are available:\n  # * MTX_PATH: path name\n  # * MTX_QUERY: query parameters (passed by first reader)\n  # * RTSP_PORT: RTSP server port\n  # * G1, G2, ...: regular expression groups, if path name is\n  #   a regular expression.\n  runOnDemand: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath\n  # Restart the command if it exits.\n  runOnDemandRestart: no\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with OpenCV and GStreamer\nDESCRIPTION: This Python script uses OpenCV's `cv2.VideoWriter` to publish a stream to the MediaMTX server via GStreamer. It generates a simple colored rectangle video stream and publishes it to rtsp://localhost:8554/mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import datetime\nfrom time import sleep, time\n\nimport cv2\nimport numpy as np\n\nfps = 15\nwidth = 800\nheight = 600\ncolors = [\n    (0, 0, 255),\n    (255, 0, 0),\n    (0, 255, 0),\n]\n\nout = cv2.VideoWriter('appsrc ! videoconvert' + \\\n    ' ! video/x-raw,format=I420' + \\\n    ' ! x264enc speed-preset=ultrafast bitrate=600 key-int-max=' + str(fps * 2) + \\\n    ' ! video/x-h264,profile=baseline' + \\\n    ' ! rtspclientsink location=rtsp://localhost:8554/mystream',\n    cv2.CAP_GSTREAMER, 0, fps, (width, height), True)\nif not out.isOpened():\n    raise Exception(\"can't open video writer\")\n\ncurcolor = 0\nstart = time()\n\nwhile True:\n    frame = np.zeros((height, width, 3), np.uint8)\n\n    # create a rectangle\n    color = colors[curcolor]\n    curcolor += 1\n    curcolor %= len(colors)\n    for y in range(0, int(frame.shape[0] / 2)):\n        for x in range(0, int(frame.shape[1] / 2)):\n            frame[y][x] = color\n\n    out.write(frame)\n    print(\"%s frame written to the server\" % datetime.now())\n\n    now = time()\n    diff = (1 / fps) - now - start\n    if diff > 0:\n        sleep(diff)\n    start = now\n```\n\n----------------------------------------\n\nTITLE: Ingest RTMP Stream via Path Source\nDESCRIPTION: This example shows how to configure a MediaMTX path to ingest an RTMP stream from an existing server by defining the URL in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_41\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied:\n    # url of the source stream, in the format rtmp://user:pass@host:port/path\n    source: rtmp://original-url\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with FFmpeg (RTSP Client)\nDESCRIPTION: This command uses FFmpeg to publish a video/audio file to the MediaMTX server as an RTSP client. The stream is available at /mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Client Read\nDESCRIPTION: This snippet configures `runOnRead` to execute a command when a client starts reading a stream.  It triggers a curl command with path, reader type, and reader ID parameters.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_127\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when a client starts reading.\n  # This is terminated with SIGINT when a client stops reading.\n  # The following environment variables are available:\n  # * MTX_PATH: path name\n  # * MTX_QUERY: query parameters (passed by reader)\n  # * MTX_READER_TYPE: reader type\n  # * MTX_READER_ID: reader ID\n  # * RTSP_PORT: RTSP server port\n  # * G1, G2, ...: regular expression groups, if path name is\n  #   a regular expression.\n  runOnRead: curl http://my-custom-server/webhook?path=$MTX_PATH&reader_type=$MTX_READER_TYPE&reader_id=$MTX_READER_ID\n  # Restart the command if it exits.\n  runOnReadRestart: no\n```\n\n----------------------------------------\n\nTITLE: Configuring RTSP encryption in mediamtx.yml\nDESCRIPTION: This YAML configuration enables RTSP encryption with TLS. It sets the allowed RTSP transports to TCP, configures encryption as optional, and specifies the paths to the server key and certificate files.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_148\n\nLANGUAGE: yml\nCODE:\n```\nrtspTransports: [tcp]\nrtspEncryption: optional\nrtspServerKey: server.key\nrtspServerCert: server.crt\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with GStreamer\nDESCRIPTION: This command uses GStreamer to publish a video/audio file as an RTSP stream to the MediaMTX server running locally. The stream is made available at rtsp://localhost:8554/mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream filesrc location=file.mp4 \\\n! qtdemux name=d d.video_0 ! queue ! s.sink_0 d.audio_0 ! queue ! s.sink_1\n```\n\n----------------------------------------\n\nTITLE: Internal Authentication Configuration\nDESCRIPTION: This YAML snippet shows how to configure internal user authentication in MediaMTX. It defines a user with permissions to publish, read, and playback streams. `any` user allows access without authentication.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_76\n\nLANGUAGE: YAML\nCODE:\n```\nauthInternalUsers:\n  # Username. 'any' means any user, including anonymous ones.\n- user: any\n  # Password. Not used in case of 'any' user.\n  pass:\n  # IPs or networks allowed to use this user. An empty list means any IP.\n  ips: []\n  # List of permissions.\n  permissions:\n    # Available actions are: publish, read, playback, api, metrics, pprof.\n  - action: publish\n    # Paths can be set to further restrict access to a specific path.\n    # An empty path means any path.\n    # Regular expressions can be used by using a tilde as prefix.\n    path:\n  - action: read\n    path:\n  - action: playback\n    path:\n```\n\n----------------------------------------\n\nTITLE: Configuring RTSP transport in mediamtx.yml\nDESCRIPTION: This YAML configuration sets the RTSP transport protocol to TCP globally or for a specific path.  Switching to TCP can resolve issues with corrupted frames when the stream throughput is too high for UDP.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_150\n\nLANGUAGE: yml\nCODE:\n```\nrtspTransports: [tcp]\n```\n\nLANGUAGE: yml\nCODE:\n```\npaths:\n  test:\n    source: rtsp://..\n    rtspTransport: tcp\n```\n\n----------------------------------------\n\nTITLE: Setting RTSP Transport Protocol with FFmpeg\nDESCRIPTION: This command uses FFmpeg to publish a video/audio file to the MediaMTX server as an RTSP client, specifying TCP as the transport protocol. The stream is available at /mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp -rtsp_transport tcp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Passing JWT via Authorization Header (HTTP)\nDESCRIPTION: This snippet demonstrates how to pass the JWT in the Authorization header for web-based protocols like HLS.  The `Authorization` header is set to `Bearer MY_JWT`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_88\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /mypath/index.m3u8 HTTP/1.1\nHost: example.com\nAuthorization: Bearer MY_JWT\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with Volume Mount\nDESCRIPTION: This command demonstrates how to run a MediaMTX Docker container and mount a local `mediamtx.yml` configuration file into the container as a read-only volume. This allows overriding the default configuration.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_71\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -it --network=host -v \"$PWD/mediamtx.yml:/mediamtx.yml:ro\" bluenviron/mediamtx\n```\n\n----------------------------------------\n\nTITLE: HTTP-Based Authentication Configuration\nDESCRIPTION: This YAML snippet shows how to configure HTTP-based authentication in MediaMTX, pointing to an external HTTP server that will handle authentication requests.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_82\n\nLANGUAGE: YAML\nCODE:\n```\nauthMethod: http\nauthHTTPAddress: http://myauthserver/auth\n```\n\n----------------------------------------\n\nTITLE: Publishing with a Generic Webcam on Linux (FFmpeg)\nDESCRIPTION: This YAML configuration snippet configures a MediaMTX path to publish a stream from a generic webcam on Linux using FFmpeg. It uses `ffmpeg` to capture video from `/dev/video0`, encode it with libx264, and stream it to MediaMTX via RTSP. The stream is continuously published due to `runOnInitRestart: yes`. Requires FFmpeg to be installed.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  cam:\n    runOnInit: ffmpeg -f v4l2 -i /dev/video0 -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH\n    runOnInitRestart: yes\n```\n\n----------------------------------------\n\nTITLE: WebRTC stream reader in Unity\nDESCRIPTION: This C# script allows a Unity application to read a WebRTC stream from a MediaMTX server. It uses the `Unity.WebRTC` package, which needs to be installed via the Package Manager. It sets up a peer connection, handles audio and video tracks, and posts a WebRTC offer to the specified URL. The script requires a RawImage component for video and an AudioSource component for audio.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_58\n\nLANGUAGE: cs\nCODE:\n```\nusing System.Collections;\nusing UnityEngine;\nusing Unity.WebRTC;\n\npublic class WebRTCReader : MonoBehaviour\n{\n    public string url = \"http://localhost:8889/stream/whep\";\n\n    private RTCPeerConnection pc;\n    private MediaStream receiveStream;\n\n    void Start()\n    {\n        UnityEngine.UI.RawImage rawImage = gameObject.GetComponentInChildren<UnityEngine.UI.RawImage>();\n        AudioSource audioSource = gameObject.GetComponentInChildren<AudioSource>();\n        pc = new RTCPeerConnection();\n        receiveStream = new MediaStream();\n\n        pc.OnTrack = e =>\n        {\n            receiveStream.AddTrack(e.Track);\n        };\n\n        receiveStream.OnAddTrack = e =>\n        {\n            if (e.Track is VideoStreamTrack videoTrack)\n            {\n                videoTrack.OnVideoReceived += (tex) =>\n                {\n                    rawImage.texture = tex;\n                };\n            }\n            else if (e.Track is AudioStreamTrack audioTrack)\n            {\n                audioSource.SetTrack(audioTrack);\n                audioSource.loop = true;\n                audioSource.Play();\n            }\n        };\n\n        RTCRtpTransceiverInit init = new RTCRtpTransceiverInit();\n        init.direction = RTCRtpTransceiverDirection.RecvOnly;\n        pc.AddTransceiver(TrackKind.Audio, init);\n        pc.AddTransceiver(TrackKind.Video, init);\n\n        StartCoroutine(WebRTC.Update());\n        StartCoroutine(createOffer());\n    }\n\n    private IEnumerator createOffer()\n    {\n        var op = pc.CreateOffer();\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"CreateOffer() failed\");\n            yield break;\n        }\n\n        yield return setLocalDescription(op.Desc);\n    }\n\n    private IEnumerator setLocalDescription(RTCSessionDescription offer)\n    {\n        var op = pc.SetLocalDescription(ref offer);\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"SetLocalDescription() failed\");\n            yield break;\n        }\n\n        yield return postOffer(offer);\n    }\n\n    private IEnumerator postOffer(RTCSessionDescription offer)\n    {\n        var content = new System.Net.Http.StringContent(offer.sdp);\n        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/sdp\");\n        var client = new System.Net.Http.HttpClient();\n\n        var task = System.Threading.Tasks.Task.Run(async () => {\n            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);\n            res.EnsureSuccessStatusCode();\n            return await res.Content.ReadAsStringAsync();\n        });\n        yield return new WaitUntil(() => task.IsCompleted);\n        if (task.Exception != null) {\n            Debug.LogError(task.Exception);\n            yield break;\n        }\n\n        yield return setRemoteDescription(task.Result);\n    }\n\n    private IEnumerator setRemoteDescription(string answer)\n    {\n        RTCSessionDescription desc = new RTCSessionDescription();\n        desc.type = RTCSdpType.Answer;\n        desc.sdp = answer;\n        var op = pc.SetRemoteDescription(ref desc);\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"SetRemoteDescription() failed\");\n            yield break;\n        }\n\n        yield break;\n    }\n\n    void OnDestroy()\n    {\n        pc?.Close();\n        pc?.Dispose();\n        receiveStream?.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TLS certificate with OpenSSL\nDESCRIPTION: These OpenSSL commands generate a private key (server.key) and a self-signed certificate (server.crt) for TLS encryption. The certificate is valid for 3650 days and uses SHA256.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_147\n\nLANGUAGE: sh\nCODE:\n```\nopenssl genrsa -out server.key 2048\nopenssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650\n```\n\n----------------------------------------\n\nTITLE: Setting RTSP Transport Protocol with GStreamer\nDESCRIPTION: This command uses GStreamer to publish a video stream to the MediaMTX server using RTSP, specifying TCP as the transport protocol. The stream is available at /mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \\\nd.video_0 ! rtspclientsink protocols=tcp name=s location=rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Opening a stream with VLC\nDESCRIPTION: This command opens an RTSP stream from the MediaMTX server running locally using VLC media player. The `--network-caching=50` option sets network caching to 50ms.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nvlc --network-caching=50 rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand Publishing via YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure on-demand publishing. The FFmpeg command within `runOnDemand` will only start when a client requests the specified path (`ondemand`).\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_106\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  ondemand:\n    runOnDemand: ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH\n    runOnDemandRestart: yes\n```\n\n----------------------------------------\n\nTITLE: Create systemd Service (Linux)\nDESCRIPTION: This shell command creates a systemd service file for MediaMTX, enabling it to be managed as a service. The `tee` command writes the service configuration to `/etc/systemd/system/mediamtx.service`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_111\n\nLANGUAGE: Shell\nCODE:\n```\nsudo tee /etc/systemd/system/mediamtx.service >/dev/null << EOF\n[Unit]\nWants=network.target\n[Service]\nExecStart=/usr/local/bin/mediamtx /usr/local/etc/mediamtx.yml\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Ingest RTSP Stream via Path Source\nDESCRIPTION: This example shows how to configure a MediaMTX path to ingest an RTSP stream from an existing server or camera by defining the URL in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_37\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied:\n    # url of the source stream, in the format rtsp://user:pass@host:port/path\n    source: rtsp://original-url\n```\n\n----------------------------------------\n\nTITLE: Opening a stream with GStreamer\nDESCRIPTION: This command opens an RTSP stream from the MediaMTX server running locally using GStreamer's `gst-play-1.0` utility.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngst-play-1.0 rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in MediaMTX (YAML)\nDESCRIPTION: This snippet shows how to configure MediaMTX to use JWT-based authentication.  It requires setting `authMethod` to `jwt` and providing the URL of the JWKS endpoint via `authJWTJWKS`. The `authJWTClaimKey` specifies the claim in the JWT that contains the permissions.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_85\n\nLANGUAGE: YAML\nCODE:\n```\nauthMethod: jwt\nauthJWTJWKS: http://my_identity_server/jwks_endpoint\nauthJWTClaimKey: mediamtx_permissions\n```\n\n----------------------------------------\n\nTITLE: Ingest SRT Stream via Path Source\nDESCRIPTION: This example shows how to configure a MediaMTX path to ingest an SRT stream from an existing server or camera by defining the URL in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied:\n    # url of the source stream, in the format srt://host:port?streamid=streamid&other_parameters\n    source: srt://original-url\n```\n\n----------------------------------------\n\nTITLE: Opening a stream with FFmpeg\nDESCRIPTION: This command uses FFmpeg to open an RTSP stream from the MediaMTX server running locally and copies it to a local file named output.mp4.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4\n```\n\n----------------------------------------\n\nTITLE: Downloading Recordings via HTTP\nDESCRIPTION: This HTTP request demonstrates how to download recordings using the playback server's `/get` endpoint. It includes parameters for the path, start date, duration, and format of the stream (all URL encoded).\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_100\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://localhost:9996/get?path=[mypath]&start=[start]&duration=[duration]&format=[format]\n```\n\n----------------------------------------\n\nTITLE: Configuring RTMP encryption in mediamtx.yml\nDESCRIPTION: This YAML configuration enables RTMP encryption with TLS (RTMPS). It configures encryption as optional, and specifies the paths to the server key and certificate files.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_152\n\nLANGUAGE: yml\nCODE:\n```\nrtmpEncryption: optional\nrtmpServerKey: server.key\nrtmpServerCert: server.crt\n```\n\n----------------------------------------\n\nTITLE: Publish RTSP Stream\nDESCRIPTION: This example demonstrates how to publish a stream to the MediaMTX server using the RTSP protocol.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_36\n\nLANGUAGE: None\nCODE:\n```\nrtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Read Stream with FFmpeg via RTSP\nDESCRIPTION: This example demonstrates how to read a stream from the MediaMTX server using FFmpeg and the RTSP protocol.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_46\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -i rtsp://localhost:8554/mystream -c copy output.mp4\n```\n\n----------------------------------------\n\nTITLE: Configuring TURN server for WebRTC in YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure a TURN server for WebRTC, using `webrtcICEServers2`, including the URL, username, and password. This forces all WebRTC/ICE connections to pass through the TURN server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_142\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcICEServers2:\n- url: turn:host:port\n  username: user\n  password: password\n```\n\n----------------------------------------\n\nTITLE: Publish WebRTC Stream\nDESCRIPTION: This example shows how to publish a WebRTC stream using a web browser, by visiting the specified URL.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_33\n\nLANGUAGE: None\nCODE:\n```\nhttp://localhost:8889/mystream/publish\n```\n\n----------------------------------------\n\nTITLE: Embedding WebRTC stream in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed a WebRTC stream from a MediaMTX server into a web page using an iframe. Replace `http://mediamtx-ip:8889/mystream` with the actual URL of your stream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_59\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"http://mediamtx-ip:8889/mystream\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Read Stream with GStreamer via RTSP\nDESCRIPTION: This example shows how to read a stream from the MediaMTX server using GStreamer and the RTSP protocol.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_48\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 rtspsrc location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: WebRTC Publisher Script in Unity\nDESCRIPTION: This C# script, designed for Unity Engine, publishes a video stream to a MediaMTX server using the WebRTC protocol.  It utilizes the `Unity.WebRTC` package, capturing the camera feed and sending it to the specified URL. The script includes error handling and manages the RTCPeerConnection lifecycle. The server should be configured to accept WHIP requests at the specified URL.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections;\nusing UnityEngine;\nusing Unity.WebRTC;\nusing UnityEngine.Networking;\n\npublic class WebRTCPublisher : MonoBehaviour\n{\n    public string url = \"http://localhost:8889/unity/whip\";\n    public int videoWidth = 1280;\n    public int videoHeight = 720;\n\n    private RTCPeerConnection pc;\n    private MediaStream videoStream;\n\n    void Start()\n    {\n        pc = new RTCPeerConnection();\n        Camera sourceCamera = gameObject.GetComponent<Camera>();\n        videoStream = sourceCamera.CaptureStream(videoWidth, videoHeight);\n        foreach (var track in videoStream.GetTracks())\n        {\n            pc.AddTrack(track);\n        }\n\n        StartCoroutine(WebRTC.Update());\n        StartCoroutine(createOffer());\n    }\n\n    private IEnumerator createOffer()\n    {\n        var op = pc.CreateOffer();\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"CreateOffer() failed\");\n            yield break;\n        }\n\n        yield return setLocalDescription(op.Desc);\n    }\n\n    private IEnumerator setLocalDescription(RTCSessionDescription offer)\n    {\n        var op = pc.SetLocalDescription(ref offer);\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"SetLocalDescription() failed\");\n            yield break;\n        }\n\n        yield return postOffer(offer);\n    }\n\n    private IEnumerator postOffer(RTCSessionDescription offer)\n    {\n        var content = new System.Net.Http.StringContent(offer.sdp);\n        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/sdp\");\n        var client = new System.Net.Http.HttpClient();\n\n        var task = System.Threading.Tasks.Task.Run(async () => {\n            var res = await client.PostAsync(new System.UriBuilder(url).Uri, content);\n            res.EnsureSuccessStatusCode();\n            return await res.Content.ReadAsStringAsync();\n        });\n        yield return new WaitUntil(() => task.IsCompleted);\n        if (task.Exception != null) {\n            Debug.LogError(task.Exception);\n            yield break;\n        }\n\n        yield return setRemoteDescription(task.Result);\n    }\n\n    private IEnumerator setRemoteDescription(string answer)\n    {\n        RTCSessionDescription desc = new RTCSessionDescription();\n        desc.type = RTCSdpType.Answer;\n        desc.sdp = answer;\n        var op = pc.SetRemoteDescription(ref desc);\n        yield return op;\n        if (op.IsError) {\n            Debug.LogError(\"SetRemoteDescription() failed\");\n            yield break;\n        }\n\n        yield break;\n    }\n\n    void OnDestroy()\n    {\n        pc?.Close();\n        pc?.Dispose();\n        videoStream?.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish WebRTC Stream with WHIP\nDESCRIPTION: This example shows how to publish a WebRTC stream using WHIP (WebRTC HTTP Ingest Protocol). This allows publishing without a web page.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_34\n\nLANGUAGE: None\nCODE:\n```\nhttp://localhost:8889/mystream/whip\n```\n\n----------------------------------------\n\nTITLE: HLS Stream URL Example\nDESCRIPTION: Demonstrates how to access an HLS stream generated by MediaMTX, both through a standard web URL and the specific index.m3u8 playlist URL used by HLS clients.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_65\n\nLANGUAGE: Text\nCODE:\n```\nhttp://localhost:8888/mystream\n```\n\nLANGUAGE: Text\nCODE:\n```\nhttp://localhost:8888/mystream/index.m3u8\n```\n\n----------------------------------------\n\nTITLE: Proxying Requests to Other Servers via YAML\nDESCRIPTION: This YAML configuration allows proxying incoming requests to other servers or cameras. It uses a regular expression to map incoming paths to corresponding sources on the other server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_105\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  \"~^proxy_(.+)$\":\n    # If path name is a regular expression, $G1, G2, etc will be replaced\n    # with regular expression groups.\n    source: rtsp://other-server:8554/$G1\n    sourceOnDemand: yes\n```\n\n----------------------------------------\n\nTITLE: Ingest WebRTC Stream via Path Source\nDESCRIPTION: This example shows how to configure a MediaMTX path to ingest a WebRTC stream from an existing server by defining the WHEP URL in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied:\n    # url of the source stream, in the format whep://host:port/path (HTTP) or wheps:// (HTTPS)\n    source: wheps://host:port/path\n```\n\n----------------------------------------\n\nTITLE: RTMP Stream URL Example\nDESCRIPTION: Shows the basic RTMP URL format to access a stream hosted on the MediaMTX server. It includes how to pass username and password as query parameters for authentication.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_64\n\nLANGUAGE: Text\nCODE:\n```\nrtmp://localhost/mystream\n```\n\nLANGUAGE: Text\nCODE:\n```\nrtmp://localhost/mystream?user=myuser&pass=mypass\n```\n\n----------------------------------------\n\nTITLE: Running MediaMTX with Docker (Alternative)\nDESCRIPTION: This command runs the MediaMTX Docker image with RTSP UDP transport disabled. It also adds the server IP to MTX_WEBRTCADDITIONALHOSTS and exposes ports manually. This approach is useful when `--network=host` cannot be used.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_2\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run --rm -it \\\n-e MTX_RTSPTRANSPORTS=tcp \\\n-e MTX_WEBRTCADDITIONALHOSTS=192.168.x.x \\\n-p 8554:8554 \\\n-p 1935:1935 \\\n-p 8888:8888 \\\n-p 8889:8889 \\\n-p 8890:8890/udp \\\n-p 8189:8189/udp \\\nbluenviron/mediamtx\n```\n\n----------------------------------------\n\nTITLE: Configuring STUN server for WebRTC in YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure a STUN server for WebRTC using `webrtcICEServers2`. This is used to obtain the server's public IP and establish connections using the \"UDP hole punching\" technique.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_141\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcICEServers2:\n  - url: stun:stun.l.google.com:19302\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with GStreamer (WebRTC)\nDESCRIPTION: This command uses GStreamer to publish a test video stream to the MediaMTX server using the WebRTC / WHIP protocol. It requires GStreamer 1.22 or later and an H264 baseline profile.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 videotestsrc \\\n! video/x-raw,width=1920,height=1080,format=I420 \\\n! x264enc speed-preset=ultrafast bitrate=2000 \\\n! video/x-h264,profile=baseline \\\n! whipclientsink signaller::whip-endpoint=http://localhost:8889/mystream/whip\n```\n\n----------------------------------------\n\nTITLE: Ingest HLS Stream via Path Source\nDESCRIPTION: This example shows how to configure a MediaMTX path to ingest an HLS stream from an existing server by defining the URL of the playlist in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_42\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  proxied:\n    # url of the playlist of the stream, in the format http://user:pass@host:port/path\n    source: http://original-url/stream/index.m3u8\n```\n\n----------------------------------------\n\nTITLE: Enabling Playback HTTP Server in YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable a dedicated HTTP server for playback of recorded streams. It configures the `playback` option to `yes` and sets the `playbackAddress` to listen on port 9996.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_97\n\nLANGUAGE: YAML\nCODE:\n```\nplayback: yes\nplaybackAddress: :9996\n```\n\n----------------------------------------\n\nTITLE: Read Stream with GStreamer via RTSP with TCP transport\nDESCRIPTION: This example shows how to specify the TCP transport protocol while reading an RTSP stream from the MediaMTX server using GStreamer.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_49\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 rtspsrc protocols=tcp location=rtsp://127.0.0.1:8554/mystream latency=0 ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Read H264 and Opus Stream with GStreamer via WHEP\nDESCRIPTION: This example shows how to read a H264 and Opus stream from the MediaMTX server using GStreamer and WHEP, with specific codec settings.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_53\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \\\nvideo-caps=\"application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000\" \\\naudio-caps=\"application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2\" \\\n! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Publishing with a Raspberry Pi Camera (Native)\nDESCRIPTION: This YAML configuration configures a MediaMTX path to publish a stream from a Raspberry Pi Camera using the native `rpiCamera` source. The server must be running on a Raspberry Pi with a compatible operating system (Raspberry Pi OS Bookworm or Bullseye) and the legacy camera stack disabled on Bullseye.  This configuration is simpler than using FFmpeg and allows for more direct access to camera features.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  cam:\n    source: rpiCamera\n```\n\n----------------------------------------\n\nTITLE: Read Video-Only H264 Stream with GStreamer via WHEP\nDESCRIPTION: This example shows how to read a video-only H264 stream from the MediaMTX server using GStreamer and WHEP, with specific codec settings.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_51\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 whepsrc whep-endpoint=http://127.0.0.1:8889/stream/whep use-link-headers=true \\\nvideo-caps=\"application/x-rtp,media=video,encoding-name=H264,payload=127,clock-rate=90000\" \\\naudio-caps=\"application/x-rtp,media=audio,encoding-name=PCMU,payload=0,clock-rate=8000\" \\\n! rtph264depay ! decodebin ! autovideosink\n```\n\n----------------------------------------\n\nTITLE: Publish RTMP Stream with Credentials\nDESCRIPTION: This example shows how to pass credentials to the MediaMTX server while publishing an RTMP stream using query parameters.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_40\n\nLANGUAGE: None\nCODE:\n```\nrtmp://localhost/mystream?user=myuser&pass=mypass\n```\n\n----------------------------------------\n\nTITLE: Publish RTMP Stream\nDESCRIPTION: This example demonstrates how to publish a stream to the MediaMTX server using the RTMP protocol.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_39\n\nLANGUAGE: None\nCODE:\n```\nrtmp://localhost/mystream\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi Camera Settings (Native)\nDESCRIPTION: This YAML configuration adjusts settings like width and height for a Raspberry Pi Camera stream within MediaMTX. Parameters like `rpiCameraWidth` and `rpiCameraHeight` are set to define the resolution of the video stream. These parameters directly affect the video output.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  cam:\n    source: rpiCamera\n    rpiCameraWidth: 1920\n    rpiCameraHeight: 1080\n```\n\n----------------------------------------\n\nTITLE: Reading RTSP stream with VLC over TCP\nDESCRIPTION: This command configures VLC to read an RTSP stream over TCP. The `--network-caching` option sets the network caching value, and `--rtsp-tcp` forces VLC to use the TCP transport protocol for RTSP.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\nvlc --network-caching=50 --rtsp-tcp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Record Segment Create\nDESCRIPTION: This snippet configures `runOnRecordSegmentCreate` to execute a command when a recording segment is created. It uses `curl` to send a webhook notification with the path and segment file path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_129\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when a recording segment is created.\n  # The following environment variables are available:\n  # * MTX_PATH: path name\n  # * MTX_SEGMENT_PATH: segment file path\n  # * RTSP_PORT: RTSP server port\n  # * G1, G2, ...: regular expression groups, if path name is\n  #   a regular expression.\n  runOnRecordSegmentCreate: curl http://my-custom-server/webhook?path=$MTX_PATH&segment_path=$MTX_SEGMENT_PATH\n```\n\n----------------------------------------\n\nTITLE: Running MediaMTX with Raspberry Pi Camera in Docker\nDESCRIPTION: This shell command runs the MediaMTX server inside a Docker container, configured to use the Raspberry Pi Camera.  It requires specific flags to access the camera hardware, including `--network=host`, `--privileged`, `--tmpfs /dev/shm:exec`, and `-v /run/udev:/run/udev:ro`.  The `MTX_PATHS_CAM_SOURCE` environment variable sets the camera source to `rpiCamera`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -it \\\n--network=host \\\n--privileged \\\n--tmpfs /dev/shm:exec \\\n-v /run/udev:/run/udev:ro \\\n-e MTX_PATHS_CAM_SOURCE=rpiCamera \\\nbluenviron/mediamtx:latest-rpi\n```\n\n----------------------------------------\n\nTITLE: Generate Multicast UDP/MPEG-TS Stream with FFmpeg\nDESCRIPTION: This example demonstrates how to generate a multicast UDP/MPEG-TS stream using FFmpeg.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_44\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -re -f lavfi -i testsrc=size=1280x720:rate=30 \\\n-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \\\n-f mpegts udp://238.0.0.1:1234?pkt_size=1316\n```\n\n----------------------------------------\n\nTITLE: Using Rclone to Upload Recordings (YAML)\nDESCRIPTION: This snippet demonstrates how to use rclone to upload recorded segments to a remote location.  It configures `runOnInit` and `runOnRecordSegmentComplete` hooks to sync the recordings with a remote storage. Replace `myconfig` with the name of the rclone configuration.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_96\n\nLANGUAGE: YAML\nCODE:\n```\npathDefaults:\n  # this is needed to sync segments after a crash.\n  # replace myconfig with the name of the rclone config.\n  runOnInit: rclone sync -v ./recordings myconfig:/my-path/recordings\n\n  # this is called when a segment has been finalized.\n  # replace myconfig with the name of the rclone config.\n  runOnRecordSegmentComplete: rclone sync -v --min-age=1ms ./recordings myconfig:/my-path/recordings\n```\n\n----------------------------------------\n\nTITLE: Docker command to expose UDP port for WebRTC\nDESCRIPTION: This Docker command exposes UDP port 8189 for WebRTC. This allows routing incoming UDP packets on port 8189 to the server inside the container, which is crucial for WebRTC connections when the server is containerized.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_139\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -it \\\n-p 8189:8189/udp\n....\nbluenviron/mediamtx\n```\n\n----------------------------------------\n\nTITLE: Generate Multicast UDP/MPEG-TS Stream with GStreamer\nDESCRIPTION: This example demonstrates how to generate a multicast UDP/MPEG-TS stream using GStreamer.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_43\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 -v mpegtsmux name=mux alignment=1 ! udpsink host=238.0.0.1 port=1234 \\\nvideotestsrc ! video/x-raw,width=1280,height=720,format=I420 ! x264enc speed-preset=ultrafast bitrate=3000 key-int-max=60 ! video/x-h264,profile=high ! mux. \\\naudiotestsrc ! audioconvert ! avenc_aac ! mux.\n```\n\n----------------------------------------\n\nTITLE: Setting write queue size in mediamtx.yml\nDESCRIPTION: This YAML configuration increases the write queue size of the server to 1024. This is a potential solution to corrupted frames when the server's write queue is too small to keep up with the stream throughput.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_149\n\nLANGUAGE: yml\nCODE:\n```\nwriteQueueSize: 1024\n```\n\n----------------------------------------\n\nTITLE: Listing Active Paths via API\nDESCRIPTION: This snippet shows how to use `curl` to query the MediaMTX Control API and obtain a list of active paths.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_132\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9997/v3/paths/list\n```\n\n----------------------------------------\n\nTITLE: Re-encoding stream with FFmpeg\nDESCRIPTION: This command re-encodes an RTSP stream using FFmpeg, setting the video codec to H264 with yuv420p pixel format and a bitrate of 600k, and the audio codec to AAC with a bitrate of 160k.  The output is then streamed to rtsp://localhost:8554/mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_146\n\nLANGUAGE: sh\nCODE:\n```\nffmpeg -i rtsp://original-source \\\n-c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k \\\n-c:a aac -b:a 160k \\\n-f rtsp rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Exposing Server via Apache HTTP Reverse Proxy\nDESCRIPTION: This Apache HTTP Server configuration exposes the MediaMTX server behind a subfolder. It utilizes ProxyPass and ProxyPassReverse directives, along with Header edit, to correctly handle requests and responses with the subfolder path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_108\n\nLANGUAGE: ApacheConf\nCODE:\n```\n<Location /subpath>\n    ProxyPass http://mediamtx-ip:8889\n    ProxyPassReverse http://mediamtx-ip:8889\n    Header edit Location ^(.*)$ \"/subpath$1\"\n</Location>\n```\n\n----------------------------------------\n\nTITLE: HLS TLS Configuration\nDESCRIPTION: This YAML code shows the configuration parameters in `mediamtx.yml` to enable TLS encryption for HLS streams, referencing the generated server key and certificate.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_68\n\nLANGUAGE: YAML\nCODE:\n```\nhlsEncryption: yes\nhlsServerKey: server.key\nhlsServerCert: server.crt\n```\n\n----------------------------------------\n\nTITLE: Obtaining a JWT from Keycloak (Bash)\nDESCRIPTION: This snippet demonstrates how to obtain a JWT from Keycloak using `curl`. It requires the client ID, client secret, username, and password.  Replace `$CLIENT_SECRET`, `$USER`, and `$PASS` with the appropriate values.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_91\n\nLANGUAGE: Bash\nCODE:\n```\ncurl \\\n    -d \"client_id=mediamtx\" \\\n    -d \"client_secret=$CLIENT_SECRET\" \\\n    -d \"username=$USER\" \\\n    -d \"password=$PASS\" \\\n    -d \"grant_type=password\" \\\n    http://localhost:8080/realms/mediamtx/protocol/openid-connect/token\n```\n\n----------------------------------------\n\nTITLE: SHA256 Authentication Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure authentication with SHA256 hashed passwords. The `sha256:` prefix indicates that the password is a SHA256 hash.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_81\n\nLANGUAGE: YAML\nCODE:\n```\nauthInternalUsers:\n- user: sha256:j1tsRqDEw9xvq/D7/9tMx6Jh/jMhk3UfjwIB2f1zgMo=\n  pass: sha256:BdSWkrdV+ZxFBLUQQY7+7uv9RmiSVA8nrPmjGjJtZQQ=\n  permissions:\n  - action: publish\n```\n\n----------------------------------------\n\nTITLE: Forwarding Streams with FFmpeg in YAML\nDESCRIPTION: This YAML snippet demonstrates how to forward incoming streams to another server using FFmpeg within the `runOnReady` parameter. It copies the input stream and forwards it to another RTSP server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_104\n\nLANGUAGE: YAML\nCODE:\n```\npathDefaults:\n  runOnReady: >\n    ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH\n    -c copy\n    -f rtsp rtsp://other-server:8554/another-path\n  runOnReadyRestart: yes\n```\n\n----------------------------------------\n\nTITLE: Exposing Server via Caddy Reverse Proxy\nDESCRIPTION: This Caddy configuration exposes the MediaMTX server behind a subfolder using the `handle_path` and `reverse_proxy` directives. It rewrites the request path and response headers to correctly serve content from the subfolder.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_109\n\nLANGUAGE: Caddyfile\nCODE:\n```\n:80 {\n    handle_path /subpath/* {\n        reverse_proxy {\n            to mediamtx-ip:8889\n            header_down Location ^/ /subpath/\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FFmpeg IDR Frame Interval Tuning\nDESCRIPTION: This command shows how to re-encode a stream with FFmpeg, adjusting the IDR frame interval using the `-g` option. This can help reduce latency in HLS streams.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_70\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -i rtsp://original-stream -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -max_muxing_queue_size 1024 -g 30 -f rtsp rtsp://localhost:$RTSP_PORT/compressed\n```\n\n----------------------------------------\n\nTITLE: Exposing Server via Nginx Reverse Proxy\nDESCRIPTION: This is an Nginx configuration snippet showing how to expose the server behind a subfolder using a reverse proxy. It rewrites the request path and redirects responses, stripping the subfolder prefix.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_107\n\nLANGUAGE: Nginx\nCODE:\n```\nlocation /subpath/ {\n    proxy_pass http://mediamtx-ip:8889/;\n    proxy_redirect / /subpath/;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificate with OpenSSL\nDESCRIPTION: This shell script demonstrates how to generate a TLS certificate and private key using OpenSSL. These are required for correctly displaying Low-Latency HLS streams on Apple devices.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_67\n\nLANGUAGE: Shell\nCODE:\n```\nopenssl genrsa -out server.key 2048\nopenssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650\n```\n\n----------------------------------------\n\nTITLE: Enabling MediaMTX Control API\nDESCRIPTION: This snippet demonstrates how to enable the MediaMTX Control API by setting the `api` parameter to `yes` in the configuration file. The Control API allows querying and controlling the server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_131\n\nLANGUAGE: yml\nCODE:\n```\napi: yes\n```\n\n----------------------------------------\n\nTITLE: Running Keycloak with Docker (Bash)\nDESCRIPTION: This snippet shows how to start a Keycloak instance using Docker. It sets the admin username and password, and maps port 8080.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_89\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --name=keycloak -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:23.0.7 start-dev\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Path Initialization (FFmpeg)\nDESCRIPTION: This snippet shows how to use `runOnInit` to execute a command when a path is initialized. It uses FFmpeg to publish a stream to the specified path when the server starts.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_122\n\nLANGUAGE: yml\nCODE:\n```\npaths:\n  mypath:\n    # Command to run when this path is initialized.\n    # This can be used to publish a stream when the server is launched.\n    # The following environment variables are available:\n    # * MTX_PATH: path name\n    # * RTSP_PORT: RTSP server port\n    # * G1, G2, ...: regular expression groups, if path name is\n    #   a regular expression.\n    runOnInit: ffmpeg -i my_file.mp4 -c copy -f rtsp rtsp://localhost:8554/mypath\n    # Restart the command if it exits.\n    runOnInitRestart: no\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Override\nDESCRIPTION: Demonstrates how to override the `rtspAddress` configuration parameter using an environment variable `MTX_RTSPADDRESS` when running the MediaMTX executable.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_72\n\nLANGUAGE: Shell\nCODE:\n```\nMTX_RTSPADDRESS=\"127.0.0.1:8554\" ./mediamtx\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Disconnect\nDESCRIPTION: This snippet demonstrates how to execute a command when a client disconnects from the MediaMTX server. It uses `curl` to send a webhook notification with connection details.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_121\n\nLANGUAGE: shell\nCODE:\n```\nrunOnDisconnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&conn_id=$MTX_CONN_ID\n```\n\n----------------------------------------\n\nTITLE: Running Command on Client Connect (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to run a command when a client connects to the server using the `runOnConnect` parameter. It also specifies whether to restart the command if it exits.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_120\n\nLANGUAGE: YAML\nCODE:\n```\n# Command to run when a client connects to the server.\n# This is terminated with SIGINT when a client disconnects from the server.\n# The following environment variables are available:\n# * MTX_CONN_TYPE: connection type\n# * MTX_CONN_ID: connection ID\n# * RTSP_PORT: RTSP server port\nrunOnConnect: curl http://my-custom-server/webhook?conn_type=$MTX_CONN_TYPE&conn_id=$MTX_CONN_ID\n# Restart the command if it exits.\nrunOnConnectRestart: no\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Map Override\nDESCRIPTION: Illustrates how to override parameters within a map (like `paths`) using underscores in the environment variable name to represent the map structure.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_74\n\nLANGUAGE: Shell\nCODE:\n```\nMTX_PATHS_TEST_SOURCE=rtsp://myurl ./mediamtx\n```\n\n----------------------------------------\n\nTITLE: Executing Commands when Stream is Not Ready\nDESCRIPTION: This snippet demonstrates how to execute a command when a stream is no longer available, using `runOnNotReady`.  It triggers a curl command similar to `runOnReady`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_126\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when the stream is not available anymore.\n  # Environment variables are the same of runOnReady.\n  runOnNotReady: curl http://my-custom-server/webhook?path=$MTX_PATH&source_type=$MTX_SOURCE_TYPE&source_id=$MTX_SOURCE_ID\n```\n\n----------------------------------------\n\nTITLE: Executing Commands when Stream is Ready\nDESCRIPTION: This snippet configures `runOnReady` to execute a command when a stream is ready to be read.  It triggers a curl command with path, source type, and source ID parameters.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_125\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when the stream is ready to be read, whenever it is\n  # published by a client or pulled from a server / camera.\n  # This is terminated with SIGINT when the stream is not ready anymore.\n  # The following environment variables are available:\n  # * MTX_PATH: path name\n  # * MTX_QUERY: query parameters (passed by publisher)\n  # * MTX_SOURCE_TYPE: source type\n  # * MTX_SOURCE_ID: source ID\n  # * RTSP_PORT: RTSP server port\n  # * G1, G2, ...: regular expression groups, if path name is\n  #   a regular expression.\n  runOnReady: curl http://my-custom-server/webhook?path=$MTX_PATH&source_type=$MTX_SOURCE_TYPE&source_id=$MTX_SOURCE_ID\n  # Restart the command if it exits.\n  runOnReadyRestart: no\n```\n\n----------------------------------------\n\nTITLE: Publish SRT Stream\nDESCRIPTION: This example shows how to publish an SRT stream to the MediaMTX server. It defines the URL with stream ID and packet size.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_30\n\nLANGUAGE: None\nCODE:\n```\nsrt://localhost:8890?streamid=publish:mystream&pkt_size=1316\n```\n\n----------------------------------------\n\nTITLE: Listing Available Webcams on Windows (FFmpeg)\nDESCRIPTION: This shell command uses FFmpeg to list the available webcams on a Windows system. The output provides the names of the webcams, which can then be used in the `mediamtx.yml` configuration file to specify the desired webcam. FFmpeg must be installed and accessible in the system's PATH.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -list_devices true -f dshow -i dummy\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Un-demand\nDESCRIPTION: This snippet demonstrates how to execute a command when there are no readers for a path anymore. It uses `runOnUnDemand` which inherits environment variables from `runOnDemand`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_124\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when there are no readers anymore.\n  # Environment variables are the same of runOnDemand.\n  runOnUnDemand:\n```\n\n----------------------------------------\n\nTITLE: Enable and Start systemd Service (Linux)\nDESCRIPTION: These shell commands enable and start the MediaMTX systemd service, ensuring it starts on boot and begins running immediately.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_113\n\nLANGUAGE: Shell\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable mediamtx\nsudo systemctl start mediamtx\n```\n\n----------------------------------------\n\nTITLE: Configure MediaMTX for UDP/MPEG-TS\nDESCRIPTION: This example demonstrates how to configure MediaMTX to ingest a UDP/MPEG-TS stream by defining the URL in the source parameter of the path.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_45\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  mypath:\n    source: udp://238.0.0.1:1234\n```\n\n----------------------------------------\n\nTITLE: Listing Recorded Timespans using HTTP\nDESCRIPTION: This HTTP request demonstrates how to list recorded timespans using the playback server's `/list` endpoint. It includes parameters for the path, start date, and end date (all URL encoded).\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_98\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://localhost:9996/list?path=[mypath]&start=[start]&end=[end]\n```\n\n----------------------------------------\n\nTITLE: Passing JWT via Query Parameter (Bash)\nDESCRIPTION: This snippet demonstrates how to pass the JWT in a query parameter for RTSP streams.  This is used when the client cannot set the Authorization header.  The `jwt` parameter is appended to the RTSP URL.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_87\n\nLANGUAGE: Bash\nCODE:\n```\nffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://localhost:8554/mystream?jwt=MY_JWT\n```\n\n----------------------------------------\n\nTITLE: Docker Run with Environment Variable\nDESCRIPTION: Demonstrates passing an environment variable (`MTX_PATHS_TEST_SOURCE`) to a MediaMTX Docker container using the `-e` flag to override a configuration parameter.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_75\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -it --network=host -e MTX_PATHS_TEST_SOURCE=rtsp://myurl bluenviron/mediamtx\n```\n\n----------------------------------------\n\nTITLE: Example of URL Encoded Request for Downloading\nDESCRIPTION: This HTTP request demonstrates a correctly URL-encoded request for downloading a recording using the `/get` endpoint.  It includes the path, start time and duration parameters.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_101\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://localhost:9996/get?path=mypath&start=2024-01-14T16%3A33%3A17%2B00%3A00&duration=200.5\n```\n\n----------------------------------------\n\nTITLE: Publish SRT Stream with Credentials\nDESCRIPTION: This example shows how to publish an SRT stream with username and password to the MediaMTX server.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_31\n\nLANGUAGE: None\nCODE:\n```\nsrt://localhost:8890?streamid=publish:mystream:user:pass&pkt_size=1316\n```\n\n----------------------------------------\n\nTITLE: Enabling MediaMTX Metrics Exporter\nDESCRIPTION: This snippet shows how to enable the MediaMTX metrics exporter for Prometheus by setting the `metrics` parameter to `yes`. This allows collecting server metrics.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_133\n\nLANGUAGE: yml\nCODE:\n```\napi: yes\n```\n\n----------------------------------------\n\nTITLE: MediaMTX JWKS URL example (YAML)\nDESCRIPTION: This snippet demonstrates the MediaMTX configuration required for JWT authentication with Keycloak. It assumes Keycloak is running locally on port 8080 and uses the `mediamtx` realm.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_90\n\nLANGUAGE: YAML\nCODE:\n```\nauthJWTJWKS: http://localhost:8080/realms/mediamtx/protocol/openid-connect/certs\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Recorded Timespans\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `/list` endpoint. It contains an array of objects, each representing a timespan with its start time, duration, and a URL to download the recording.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_99\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"start\": \"2006-01-02T15:04:05Z07:00\",\n    \"duration\": 60.0,\n    \"url\": \"http://localhost:9996/get?path=[mypath]&start=2006-01-02T15%3A04%3A05Z07%3A00&duration=60.0\"\n  },\n  {\n    \"start\": \"2006-01-02T15:07:05Z07:00\",\n    \"duration\": 32.33,\n    \"url\": \"http://localhost:9996/get?path=[mypath]&start=2006-01-02T15%3A07%3A05Z07%3A00&duration=32.33\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Reading SRT stream with credentials\nDESCRIPTION: This URL reads a stream with SRT, including username and password. Replace `mystream`, `user`, and `pass` with the appropriate values.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\nsrt://localhost:8890?streamid=read:mystream:user:pass\n```\n\n----------------------------------------\n\nTITLE: Querying MediaMTX Metrics\nDESCRIPTION: This snippet demonstrates how to query the MediaMTX metrics exporter using `curl`. This retrieves metrics in a format compatible with Prometheus.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_134\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:9998/metrics\n```\n\n----------------------------------------\n\nTITLE: Configuring client-only TURN server for WebRTC in YAML\nDESCRIPTION: This YAML configuration sets up a TURN server to be used only by the client, while MediaMTX will not use TURN. Setting `clientOnly: true` allows the browser to connect via TURN, even if MediaMTX doesn't need it.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_144\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcICEServers2:\n- url: turn:host:port\n  username: user\n  password: password\n  clientOnly: true\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Request Payload\nDESCRIPTION: This JSON snippet shows the payload that MediaMTX sends to the configured `authHTTPAddress` when using HTTP-based authentication.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_83\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"user\": \"user\",\n  \"password\": \"password\",\n  \"ip\": \"ip\",\n  \"action\": \"publish|read|playback|api|metrics|pprof\",\n  \"path\": \"path\",\n  \"protocol\": \"rtsp|rtmp|hls|webrtc|srt\",\n  \"id\": \"id\",\n  \"query\": \"query\"\n}\n```\n\n----------------------------------------\n\nTITLE: SRT standard stream ID syntax example\nDESCRIPTION: This example demonstrates the standard SRT stream ID syntax used to specify publishing or reading actions, paths, usernames, and passwords.  It uses key-value pairs within the `streamid` query parameter to define these attributes, which can be essential for access control and routing.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_137\n\nLANGUAGE: text\nCODE:\n```\nsrt://localhost:8890?streamid=#!::m=publish,r=mypath,u=myuser,s=mypass&pkt_size=1316\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Record Segment Complete\nDESCRIPTION: This snippet configures `runOnRecordSegmentComplete` to execute a command when a recording segment is complete. It sends a `curl` request with the path, segment file path, and segment duration.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_130\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when a recording segment is complete.\n  # The following environment variables are available:\n  # * MTX_PATH: path name\n  # * MTX_SEGMENT_PATH: segment file path\n  # * MTX_SEGMENT_DURATION: segment duration\n  # * RTSP_PORT: RTSP server port\n  # * G1, G2, ...: regular expression groups, if path name is\n  #   a regular expression.\n  runOnRecordSegmentComplete: curl http://my-custom-server/webhook?path=$MTX_PATH&segment_path=$MTX_SEGMENT_PATH\n```\n\n----------------------------------------\n\nTITLE: Example JWT Response (JSON)\nDESCRIPTION: This snippet shows the structure of the JSON response from Keycloak when requesting a JWT. The actual JWT is located in the `access_token` field.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_92\n\nLANGUAGE: JSON\nCODE:\n```\n{\"access_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyNzVjX3ptOVlOdHQ0TkhwWVk4Und6ZndUclVGSzRBRmQwY3lsM2wtY3pzIn0.eyJleHAiOjE3MDk1NTUwOTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMzE3ZTQ1NGUtNzczMi00OTM1LWExNzAtOTNhYzQ2ODhhYWIxIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJtZWRpYW10eCIsInNlc3Npb25fc3RhdGUiOiJjYzJkNDhjYy1kMmU5LTQ0YjAtODkzZS0wYTdhNjJiZDI1YmQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIi8qIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwiZGVmYXVsdC1yb2xlcy1tZWRpYW10eCJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoibWVkaWFtdHggcHJvZmlsZSBlbWFpbCIsInNpZCI6ImNjMmQ0OGNjLWQyZTktNDRiMC04OTNlLTBhN2E2MmJkMjViZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibWVkaWFtdHhfcGVybWlzc2lvbnMiOlt7ImFjdGlvbiI6InB1Ymxpc2giLCJwYXRocyI6ImFsbCJ9XSwicHJlZmVycmVkX3VzZXJuYW1lIjoidGVzdHVzZXIifQ.Gevz7rf1qHqFg7cqtSfSP31v_NS0VH7MYfwAdra1t6Yt5rTr9vJzqUeGfjYLQWR3fr4XC58DrPOhNnILCpo7jWRdimCnbPmuuCJ0AYM-Aoi3PAsWZNxgmtopq24_JokbFArY9Y1wSGFvF8puU64lt1jyOOyxf2M4cBHCs_EarCKOwuQmEZxSf8Z-QV9nlfkoTUszDCQTiKyeIkLRHL2Iy7Fw7_T3UI7sxJjVIt0c6HCNJhBBazGsYzmcSQ_GrmhbUteMTg00o6FicqkMBe99uZFnx9wIBm_QbO9hbAkkzF923I-DTAQrFLxT08ESMepDwmzFrmnwWYBLE3u8zuUlCA\",\"expires_in\":300,\"refresh_expires_in\":1800,\"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3OTI3Zjg4Zi05YWM4LTRlNmEtYWE1OC1kZmY0MDQzZDRhNGUifQ.eyJleHAiOjE3MDk1NTY1OTIsImlhdCI6MTcwOTU1NDc5MiwianRpIjoiMGVhZWFhMWItYzNhMC00M2YxLWJkZjAtZjI2NTRiODlkOTE3IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9tZWRpYW10eCIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWFsbXMvbWVkaWFtdHgiLCJzdWIiOiI2NTBhZDA5Zi03MDgxLTQyNGItODI4Ni0xM2I3YTA3ZDI0MWEiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoibWVkaWFtdHgiLCJzZXNzaW9uX3N0YXRlIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIiwic2NvcGUiOiJtZWRpYW10eCBwcm9maWxlIGVtYWlsIiwic2lkIjoiY2MyZDQ4Y2MtZDJlOS00NGIwLTg5M2UtMGE3YTYyYmQyNWJkIn0.yuXV8_JU0TQLuosNdp5xlYMjn7eO5Xq-PusdHzE7bsQ\",\"token_type\":\"Bearer\",\"not-before-policy\":0,\"session_state\":\"cc2d48cc-d2e9-44b0-893e-0a7a62bd25bd\",\"scope\":\"mediamtx profile email\"}\n```\n\n----------------------------------------\n\nTITLE: Remuxing and Re-encoding Streams with FFmpeg (YAML)\nDESCRIPTION: This snippet shows how to remux and re-encode a stream using FFmpeg within MediaMTX. It configures a path to run FFmpeg on ready and publish the result to another path.  It relies on environment variables `$RTSP_PORT` and `$MTX_PATH` being set.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_94\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  compressed:\n  original:\n    runOnReady: >\n      ffmpeg -i rtsp://localhost:$RTSP_PORT/$MTX_PATH\n        -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k\n        -max_muxing_queue_size 1024 -f rtsp rtsp://localhost:$RTSP_PORT/compressed\n    runOnReadyRestart: yes\n```\n\n----------------------------------------\n\nTITLE: Embedding Stream with HTML Video Tag\nDESCRIPTION: This HTML snippet shows how to embed a stream within a webpage using the `<video>` tag. The `src` attribute points to the `/get` endpoint on the playback server, allowing the video to be played within the browser.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_102\n\nLANGUAGE: HTML\nCODE:\n```\n<video controls>\n  <source src=\"http://localhost:9996/get?path=[mypath]&start=[start_date]&duration=[duration]\" type=\"video/mp4\" />\n</video>\n```\n\n----------------------------------------\n\nTITLE: HTTP Authentication Exclusion Configuration\nDESCRIPTION: This YAML snippet demonstrates how to exclude specific actions (like `api`, `metrics`, and `pprof`) from HTTP-based authentication, allowing them to be accessed without authentication.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_84\n\nLANGUAGE: YAML\nCODE:\n```\n# Actions to exclude from HTTP-based authentication.\n# Format is the same as the one of user permissions.\nauthHTTPExclude:\n- action: api\n- action: metrics\n- action: pprof\n```\n\n----------------------------------------\n\nTITLE: Read Stream with FFmpeg via RTSP with TCP transport\nDESCRIPTION: This example shows how to specify the TCP transport protocol while reading an RTSP stream from the MediaMTX server using FFmpeg.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_47\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -rtsp_transport tcp -i rtsp://localhost:8554/mystream -c copy output.mp4\n```\n\n----------------------------------------\n\nTITLE: Generating TLS certificate for RTMP with OpenSSL\nDESCRIPTION: These OpenSSL commands generate a private key (server.key) and a self-signed certificate (server.crt) for TLS encryption of RTMP connections. The certificate is valid for 3650 days and uses SHA256.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_151\n\nLANGUAGE: yml\nCODE:\n```\nopenssl genrsa -out server.key 2048\nopenssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650\n```\n\n----------------------------------------\n\nTITLE: Reading RTSP stream with VLC\nDESCRIPTION: This command configures VLC to read an RTSP stream from the specified URL.  The `--network-caching` option sets the network caching value to 50ms. This is the recommended method for reading streams with VLC.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\nvlc --network-caching=50 rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Running MediaMTX with Configuration Encryption (Bash)\nDESCRIPTION: This snippet demonstrates how to run MediaMTX with an encrypted configuration file, using the `MTX_CONFKEY` environment variable to provide the decryption key.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_93\n\nLANGUAGE: Bash\nCODE:\n```\nMTX_CONFKEY=mykey ./mediamtx\n```\n\n----------------------------------------\n\nTITLE: Reading RTSP stream with VLC using UDP-multicast\nDESCRIPTION: This command configures VLC to read an RTSP stream using UDP-multicast.  The `--network-caching` option sets the network caching value, and `?vlcmulticast` is appended to the URL to enable UDP-multicast.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_56\n\nLANGUAGE: sh\nCODE:\n```\nvlc --network-caching=50 rtsp://localhost:8554/mystream?vlcmulticast\n```\n\n----------------------------------------\n\nTITLE: Decreasing RTSP latency with VLC\nDESCRIPTION: This command sets the network caching parameter of VLC to 50ms, reducing latency.  Replace `rtsp://...` with the actual URL of your stream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nvlc --network-caching=50 rtsp://...\n```\n\n----------------------------------------\n\nTITLE: JWT Claim Format Example (JSON)\nDESCRIPTION: This snippet shows the expected format of the JWT claim that contains the permissions. The claim should be a list of permissions, each with an `action` and a `path`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_86\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"mediamtx_permissions\": [\n    {\n      \"action\": \"publish\",\n      \"path\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SRT stream with stream ID\nDESCRIPTION: This is the URL to read a stream from the server using the SRT protocol with a stream ID. Replace `mystream` with the actual path name.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_61\n\nLANGUAGE: sh\nCODE:\n```\nsrt://localhost:8890?streamid=read:mystream\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP protocol for WebRTC in YAML\nDESCRIPTION: This YAML configuration demonstrates how to enable the TCP protocol for WebRTC by setting `webrtcLocalTCPAddress`. It specifies the address to listen on for incoming TCP connections, which is useful when UDP is blocked by a firewall.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_140\n\nLANGUAGE: yml\nCODE:\n```\nwebrtcLocalTCPAddress: :8189\n```\n\n----------------------------------------\n\nTITLE: Embedding HLS stream in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed an HLS stream from a MediaMTX server into a web page using an iframe. Replace `http://mediamtx-ip:8888/mystream` with the actual URL of your stream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"http://mediamtx-ip:8888/mystream\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: HLS Variant Configuration\nDESCRIPTION: This YAML snippet shows how to disable low-latency HLS and revert to the legacy MPEGTS variant of HLS using the `hlsVariant` configuration option.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_69\n\nLANGUAGE: YAML\nCODE:\n```\nhlsVariant: mpegts\n```\n\n----------------------------------------\n\nTITLE: Installing OpenCV with GStreamer Support\nDESCRIPTION: These commands install the necessary dependencies and build OpenCV with GStreamer support. This allows OpenCV to use GStreamer for video I/O.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-ugly gstreamer1.0-rtsp python3-dev python3-numpy\ngit clone --depth=1 -b 4.5.4 https://github.com/opencv/opencv\ncd opencv\nmkdir build && cd build\ncmake -D CMAKE_INSTALL_PREFIX=/usr -D WITH_GSTREAMER=ON ..\nmake -j$(nproc)\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Requesting Standard MP4 Format via HTTP\nDESCRIPTION: This HTTP request demonstrates downloading a recording using the `/get` endpoint in the standard MP4 format by explicitly setting the `format` parameter to `mp4`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_103\n\nLANGUAGE: HTTP\nCODE:\n```\nhttp://localhost:9996/get?path=[mypath]&start=[start_date]&duration=[duration]&format=mp4\n```\n\n----------------------------------------\n\nTITLE: Argon2 Authentication Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure authentication with Argon2 hashed passwords. The `argon2:` prefix indicates that the password is an Argon2 hash.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_79\n\nLANGUAGE: YAML\nCODE:\n```\nauthInternalUsers:\n- user: argon2:$argon2id$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$OGGO0eCMN0ievb4YGSzvS/H+Vajx1pcbUmtLp2tRqRU\n  pass: argon2:$argon2i$v=19$m=4096,t=3,p=1$MTIzNDU2Nzg$oct3kOiFywTdDdt19kT07hdvmsPTvt9zxAUho2DLqZw\n  permissions:\n  - action: publish\n```\n\n----------------------------------------\n\nTITLE: Move Server Executable and Configuration (Linux)\nDESCRIPTION: These shell commands move the MediaMTX executable and configuration file to global locations on a Linux system, typically in preparation for creating a systemd service.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_110\n\nLANGUAGE: Shell\nCODE:\n```\nsudo mv mediamtx /usr/local/bin/\nsudo mv mediamtx.yml /usr/local/etc/\n```\n\n----------------------------------------\n\nTITLE: Read Audio-Only Opus Stream with GStreamer via WHEP\nDESCRIPTION: This example shows how to read an audio-only Opus stream from the MediaMTX server using GStreamer and WHEP, with specific codec settings.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_52\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 whepsrc whep-endpoint=\"http://127.0.0.1:8889/stream/whep\" use-link-headers=true \\\naudio-caps=\"application/x-rtp,media=audio,encoding-name=OPUS,payload=111,clock-rate=48000,encoding-params=(string)2\" \\\n! rtpopusdepay ! decodebin ! autoaudiosink\n```\n\n----------------------------------------\n\nTITLE: Enabling a Secondary Raspberry Pi Camera Stream\nDESCRIPTION: This YAML configuration demonstrates enabling a secondary video stream from the same Raspberry Pi Camera source, with distinct settings (resolution, FPS, codec) compared to the primary stream. `rpiCameraSecondary: true` indicates the stream is secondary. The codec defaults to M-JPEG if not specified.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  # primary stream\n  rpi:\n    source: rpiCamera\n    # Width of frames.\n    rpiCameraWidth: 1920\n    # Height of frames.\n    rpiCameraHeight: 1080\n    # FPS.\n    rpiCameraFPS: 30\n\n  # secondary stream\n  secondary:\n    source: rpiCamera\n    # This is a secondary stream.\n    rpiCameraSecondary: true\n    # Width of frames.\n    rpiCameraWidth: 640\n    # Height of frames.\n    rpiCameraHeight: 480\n    # FPS.\n    rpiCameraFPS: 10\n    # Codec. in case of secondary streams, it defaults to M-JPEG.\n    rpiCameraCodec: auto\n    # JPEG quality.\n    rpiCameraJPEGQuality: 60\n```\n\n----------------------------------------\n\nTITLE: Move Server Executable and Configuration (OpenWrt)\nDESCRIPTION: These shell commands move the MediaMTX executable and configuration file to global locations on an OpenWrt system, preparing it to be managed as a procd service.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_114\n\nLANGUAGE: Shell\nCODE:\n```\nmv mediamtx /usr/bin/\nmkdir -p /usr/etc && mv mediamtx.yml /usr/etc/\n```\n\n----------------------------------------\n\nTITLE: Streaming Camera and Microphone with GStreamer\nDESCRIPTION: This YAML configuration uses GStreamer to combine video from the Raspberry Pi camera and audio from a USB microphone into a single RTSP stream within MediaMTX. The configuration creates a new path `cam_with_audio` which uses `gst-launch-1.0` to capture video and audio, encode the audio with opusenc, and stream both via RTSP. `alsasrc device=default:CARD=U0x46d0x809` selects the audio device. GStreamer and alsa-utils must be installed.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_28\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  cam:\n    source: rpiCamera\n\n  cam_with_audio:\n    runOnInit: >\n      gst-launch-1.0\n      rtspclientsink name=s location=rtsp://localhost:$RTSP_PORT/cam_with_audio\n      rtspsrc location=rtsp://127.0.0.1:$RTSP_PORT/cam latency=0 ! rtph264depay ! s.\n      alsasrc device=default:CARD=U0x46d0x809 ! opusenc bitrate=16000 ! s.\n    runOnInitRestart: yes\n```\n\n----------------------------------------\n\nTITLE: Fixing RTSP playback issue on Ubuntu 21.10\nDESCRIPTION: This set of commands removes the default VLC instance and installs the snap version. This is a workaround for an issue where VLC on Ubuntu 21.10 fails to play RTSP streams due to licensing problems.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt purge -y vlc\nsnap install vlc\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux Context (Linux)\nDESCRIPTION: These shell commands set the correct SELinux security context for the MediaMTX executable, ensuring that it has the necessary permissions to run as a service, if SELinux is enabled.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_112\n\nLANGUAGE: Shell\nCODE:\n```\nsemanage fcontext -a -t bin_t /usr/local/bin/mediamtx\nrestorecon -Fv /usr/local/bin/mediamtx\n```\n\n----------------------------------------\n\nTITLE: Publishing a stream with GStreamer (RTSP Client)\nDESCRIPTION: This command uses GStreamer to publish a video and audio stream to the MediaMTX server as an RTSP client. The stream is made available at rtsp://localhost:8554/mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 rtspclientsink name=s location=rtsp://localhost:8554/mystream \\\nfilesrc location=file.mp4 ! qtdemux name=d \\\nd.video_0 ! queue ! s.sink_0 \\\nd.audio_0 ! queue ! s.sink_1\n```\n\n----------------------------------------\n\nTITLE: Starting MediaMTX server via standalone binary\nDESCRIPTION: This command starts the MediaMTX server after downloading and extracting the standalone binary.  The binary should correspond to the operating system and architecture. The user must have execute permissions on the mediamtx binary.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./mediamtx\n```\n\n----------------------------------------\n\nTITLE: Enable and Start procd Service (OpenWrt)\nDESCRIPTION: These shell commands enable and start the MediaMTX procd service, making it start on boot and run immediately. It also makes the script executable using `chmod +x`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_116\n\nLANGUAGE: Shell\nCODE:\n```\nchmod +x /etc/init.d/mediamtx\n/etc/init.d/mediamtx enable\n/etc/init.d/mediamtx start\n```\n\n----------------------------------------\n\nTITLE: Publishing a video-only stream with GStreamer (RTSP Client)\nDESCRIPTION: This command uses GStreamer to publish a video-only stream to the MediaMTX server as an RTSP client. The stream is available at /mystream.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 filesrc location=file.mp4 ! qtdemux name=d \\\nd.video_0 ! rtspclientsink location=rtsp://localhost:8554/mystream\n```\n\n----------------------------------------\n\nTITLE: Installing Audio Tools on Raspberry Pi\nDESCRIPTION: This shell command installs GStreamer and alsa-utils on a Raspberry Pi.  These tools are required to capture audio from a USB microphone and stream it alongside video. `gstreamer1.0-tools`, `gstreamer1.0-rtsp`, `gstreamer1.0-alsa`, and `alsa-utils` packages are installed using `apt` package manager.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt install -y gstreamer1.0-tools gstreamer1.0-rtsp gstreamer1.0-alsa alsa-utils\n```\n\n----------------------------------------\n\nTITLE: Executing Commands on Client Unread\nDESCRIPTION: This snippet demonstrates how to execute a command when a client stops reading a stream using `runOnUnread`. It mirrors the environment variables available in `runOnRead`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_128\n\nLANGUAGE: yml\nCODE:\n```\npathDefaults:\n  # Command to run when a client stops reading.\n  # Environment variables are the same of runOnRead.\n  runOnUnread: curl http://my-custom-server/webhook?path=$MTX_PATH&reader_type=$MTX_READER_TYPE&reader_id=$MTX_READER_ID\n```\n\n----------------------------------------\n\nTITLE: Environment Variable List Override\nDESCRIPTION: Shows how to override array-valued configuration parameters like `rtspTransports` by setting a comma-separated list as the value of the environment variable.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_73\n\nLANGUAGE: Shell\nCODE:\n```\nMTX_RTSPTRANSPORTS=\"tcp,udp\"\n```\n\n----------------------------------------\n\nTITLE: Create procd Service (OpenWrt)\nDESCRIPTION: This shell command creates a procd service file for MediaMTX, which configures it to run as a service. The `tee` command writes the service configuration to `/etc/init.d/mediamtx`.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_115\n\nLANGUAGE: Shell\nCODE:\n```\ntee /etc/init.d/mediamtx >/dev/null << EOF\n#!/bin/sh /etc/rc.common\nUSE_PROCD=1\nSTART=95\nSTOP=01\nstart_service() {\n    procd_open_instance\n    procd_set_param command /usr/bin/mediamtx\n    procd_set_param stdout 1\n    procd_set_param stderr 1\n    procd_close_instance\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Publish WebRTC Stream via HTML Iframe\nDESCRIPTION: This HTML snippet embeds a WebRTC publish page from a MediaMTX server into an iframe. This allows publishing a stream to the MediaMTX server directly from a web browser without creating a custom page. The `src` attribute specifies the URL of the publish page on the MediaMTX server, and scrolling is disabled to prevent unnecessary scrollbars.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe src=\"http://mediamtx-ip:8889/mystream/publish\" scrolling=\"no\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: WinSW Service Configuration (Windows)\nDESCRIPTION: This XML configuration file is used by WinSW to install MediaMTX as a Windows service. It specifies the service ID, name, description, and the executable to run.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_118\n\nLANGUAGE: XML\nCODE:\n```\n<service>\n  <id>mediamtx</id>\n  <name>mediamtx</name>\n  <description></description>\n  <executable>%BASE%/mediamtx.exe</executable>\n</service>\n```\n\n----------------------------------------\n\nTITLE: MediaMTX Metrics Output Format\nDESCRIPTION: This snippet provides an example of the metrics output format from the MediaMTX metrics exporter. The output is in the INI format, showing various metrics for paths, HLS muxers, RTSP connections, RTSP sessions, RTMP connections, and RTMPS connections.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_135\n\nLANGUAGE: ini\nCODE:\n```\n# metrics of every path\npaths{name=\"[path_name]\",state=\"[state]\"} 1\npaths_bytes_received{name=\"[path_name]\",state=\"[state]\"} 1234\npaths_bytes_sent{name=\"[path_name]\",state=\"[state]\"} 1234\n\n# metrics of every HLS muxer\nhls_muxers{name=\"[name]\"} 1\nhls_muxers_bytes_sent{name=\"[name]\"} 187\n\n# metrics of every RTSP connection\nrtsp_conns{id=\"[id]\"} 1\nrtsp_conns_bytes_received{id=\"[id]\"} 1234\nrtsp_conns_bytes_sent{id=\"[id]\"} 187\n\n# metrics of every RTSP session\nrtsp_sessions{id=\"[id]\",state=\"idle\"} 1\nrtsp_sessions_bytes_received{id=\"[id]\",state=\"[state]\"} 1234\nrtsp_sessions_bytes_sent{id=\"[id]\",state=\"[state]\"} 187\nrtsp_sessions_rtp_packets_received{id=\"[id]\"} 123\nrtsp_sessions_rtp_packets_sent{id=\"[id]\"} 123\nrtsp_sessions_rtp_packets_lost{id=\"[id]\"} 123\nrtsp_sessions_rtp_packets_in_error{id=\"[id]\"} 123\nrtsp_sessions_rtp_packets_jitter{id=\"[id]\"} 123\nrtsp_sessions_rtcp_packets_received{id=\"[id]\"} 123\nrtsp_sessions_rtcp_packets_sent{id=\"[id]\"} 123\nrtsp_sessions_rtcp_packets_in_error{id=\"[id]\"} 123\n\n# metrics of every RTSPS connection\nrtsps_conns{id=\"[id]\"} 1\nrtsps_conns_bytes_received{id=\"[id]\"} 1234\nrtsps_conns_bytes_sent{id=\"[id]\"} 187\n\n# metrics of every RTSPS session\nrtsps_sessions{id=\"[id]\",state=\"[state]\"} 1\nrtsps_sessions_bytes_received{id=\"[id]\",state=\"[state]\"} 1234\nrtsps_sessions_bytes_sent{id=\"[id]\",state=\"[state]\"} 187\nrtsps_sessions_rtp_packets_received{id=\"[id]\"} 123\nrtsps_sessions_rtp_packets_sent{id=\"[id]\"} 123\nrtsps_sessions_rtp_packets_lost{id=\"[id]\"} 123\nrtsps_sessions_rtp_packets_in_error{id=\"[id]\"} 123\nrtsps_sessions_rtp_packets_jitter{id=\"[id]\"} 123\nrtsps_sessions_rtcp_packets_received{id=\"[id]\"} 123\nrtsps_sessions_rtcp_packets_sent{id=\"[id]\"} 123\nrtsps_sessions_rtcp_packets_in_error{id=\"[id]\"} 123\n\n# metrics of every RTMP connection\nrtmp_conns{id=\"[id]\",state=\"[state]\"} 1\nrtmp_conns_bytes_received{id=\"[id]\",state=\"[state]\"} 1234\nrtmp_conns_bytes_sent{id=\"[id]\",state=\"[state]\"} 187\n\n# metrics of every RTMPS connection\nrtmps_conns{id=\"[id]\",state=\"[state]\"} 1\nrtmps_conns_bytes_received{id=\"[id]\",state=\"[state]\"} 1234\nrtmps_conns_bytes_sent{id=\"[id]\",state=\"[state]\"} 187\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling MediaMTX\nDESCRIPTION: These commands clone the MediaMTX repository, navigate into it, generate necessary files, and build the MediaMTX binary for a target operating system and architecture. `GOOS` and `GOARCH` must be specified to define the target environment. `CGO_ENABLED=0` disables CGO.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_155\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/bluenviron/mediamtx\ncd mediamtx\ngo generate ./...\nCGO_ENABLED=0 GOOS=my_os GOARCH=my_arch go build .\n```\n\n----------------------------------------\n\nTITLE: Install WinSW Service (Windows)\nDESCRIPTION: This shell command is used to install the WinSW service, making MediaMTX run as a Windows service that starts at boot time.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_119\n\nLANGUAGE: Shell\nCODE:\n```\nWinSW-x64 install\n```\n\n----------------------------------------\n\nTITLE: Listing Audio Cards on Raspberry Pi\nDESCRIPTION: This shell command lists available audio cards on a Raspberry Pi using `arecord`.  The `-L` flag provides detailed information about each audio card, including its name, which is needed to configure audio input. This is useful for identifying the correct microphone to use.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\narecord -L\n```\n\n----------------------------------------\n\nTITLE: Specifying ARM version during cross-compilation\nDESCRIPTION: This command builds MediaMTX for the ARM architecture, specifying the ARM version as 7 using the `GOARM` flag.  This is relevant when cross-compiling for ARM devices.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_157\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=0 GOOS=linux GOARCH=arm64 GOARM=7 go build .\n```\n\n----------------------------------------\n\nTITLE: Building and Installing MediaMTX on Arch Linux\nDESCRIPTION: These commands clone the MediaMTX repository from the Arch User Repository (AUR), navigate into the directory, and then use `makepkg` to build and install the package with dependency resolution.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://aur.archlinux.org/mediamtx.git\ncd mediamtx\nmakepkg -si\n```\n\n----------------------------------------\n\nTITLE: Read Server Logs (OpenWrt)\nDESCRIPTION: This shell command is used to read the server logs on an OpenWrt system.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_117\n\nLANGUAGE: Shell\nCODE:\n```\nlogread\n```\n\n----------------------------------------\n\nTITLE: SHA256 Hashing Example\nDESCRIPTION: This shell command shows how to hash a password using SHA256 and base64 encoding for use in the internal authentication configuration. The output will be a string prefixed with `sha256:` to copy into the configuration.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_80\n\nLANGUAGE: Shell\nCODE:\n```\necho -n \"mypass\" | openssl dgst -binary -sha256 | openssl base64\n```\n\n----------------------------------------\n\nTITLE: Compiling MediaMTX from source\nDESCRIPTION: These commands clone the MediaMTX repository, navigate into it, generate necessary files, and build the MediaMTX binary.  `CGO_ENABLED=0` disables CGO, simplifying the build process. Go version 1.23 or greater is required.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_153\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/bluenviron/mediamtx\ncd mediamtx\ngo generate ./...\nCGO_ENABLED=0 go build .\n```\n\n----------------------------------------\n\nTITLE: Specifying MIPS parameters during cross-compilation\nDESCRIPTION: This command builds MediaMTX for the MIPS architecture, specifying additional parameters such as softfloat using the `GOMIPS` flag. This flag is relevant when cross-compiling for MIPS devices.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_158\n\nLANGUAGE: sh\nCODE:\n```\nCGO_ENABLED=0 GOOS=linux GOARCH=mips GOMIPS=softfloat go build .\n```\n\n----------------------------------------\n\nTITLE: Argon2 Hashing Example\nDESCRIPTION: This shell command shows how to hash a password using Argon2id for use in the internal authentication configuration. The output will be a string prefixed with `argon2:$argon2id$` to copy into the configuration.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_78\n\nLANGUAGE: Shell\nCODE:\n```\necho -n \"mypass\" | argon2 saltItWithSalt -id -l 32 -e\n```\n\n----------------------------------------\n\nTITLE: Installing Go and Git on OpenWRT\nDESCRIPTION: These commands update the package list and install Git and Go on an OpenWrt device. These packages are required for compiling MediaMTX directly on the device.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_154\n\nLANGUAGE: sh\nCODE:\n```\nopkg update\nopkg install golang git git-http\n```\n\n----------------------------------------\n\nTITLE: LL-HLS hlsPartDuration Configuration\nDESCRIPTION: This YAML snippet shows how to configure the `hlsPartDuration` parameter to tune the low-latency HLS (LL-HLS) behavior. Adjusting this parameter can help with compatibility issues.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_66\n\nLANGUAGE: YAML\nCODE:\n```\nhlsPartDuration: 500ms\n```\n\n----------------------------------------\n\nTITLE: Publishing with a Generic Webcam on Windows (FFmpeg)\nDESCRIPTION: This YAML configuration configures a MediaMTX path to publish a stream from a generic webcam on Windows using FFmpeg. It uses `ffmpeg` to capture video from the specified webcam (identified by its name, e.g., `USB2.0 HD UVC WebCam`), encode it with libx264, and stream it to MediaMTX via RTSP. The stream will restart upon failure.  Requires FFmpeg to be installed and the webcam name to be accurate.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\npaths:\n  cam:\n    runOnInit: ffmpeg -f dshow -i video=\"USB2.0 HD UVC WebCam\" -c:v libx264 -pix_fmt yuv420p -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$MTX_PATH\n    runOnInitRestart: yes\n```\n\n----------------------------------------\n\nTITLE: Read encrypted Stream with GStreamer via RTSP\nDESCRIPTION: This example shows how to disable TLS validation while reading an encrypted RTSP stream from the MediaMTX server using GStreamer.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_50\n\nLANGUAGE: Shell\nCODE:\n```\ngst-launch-1.0 rtspsrc tls-validation-flags=0 location=rtsps://ip:8322/...\n```\n\n----------------------------------------\n\nTITLE: Building binaries for all supported platforms\nDESCRIPTION: This `make` command will trigger a build process within a Docker container to produce tarballs for all supported platforms and place them in the `binaries/` directory. Docker must be installed to use this command.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_159\n\nLANGUAGE: sh\nCODE:\n```\nmake binaries\n```\n\n----------------------------------------\n\nTITLE: Listing Go supported OS and Architectures\nDESCRIPTION: This command will list the Operating System and Architecture combinations supported by the Go compiler.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_156\n\nLANGUAGE: sh\nCODE:\n```\ngo tool dist list\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenCV GStreamer Support\nDESCRIPTION: This command checks that OpenCV was built with GStreamer support by printing the build information and verifying that `GStreamer: YES` is present in the output.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -c 'import cv2; print(cv2.getBuildInformation())'\n```\n\n----------------------------------------\n\nTITLE: Querying pprof metrics with go tool\nDESCRIPTION: These commands query the MediaMTX server for performance metrics using the `go tool pprof` utility. They retrieve goroutine, heap, and profiling data from the server's debug endpoints. The profiling data is collected over a 30-second period.\nSOURCE: https://github.com/bluenviron/mediamtx/blob/main/README.md#_snippet_136\n\nLANGUAGE: sh\nCODE:\n```\ngo tool pprof -text http://localhost:9999/debug/pprof/goroutine\ngo tool pprof -text http://localhost:9999/debug/pprof/heap\ngo tool pprof -text http://localhost:9999/debug/pprof/profile?seconds=30\n```"
  }
]