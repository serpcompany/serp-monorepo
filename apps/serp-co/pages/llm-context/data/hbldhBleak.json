[
  {
    "owner": "hbldh",
    "repo": "bleak",
    "content": "TITLE: Connecting and Managing BLE Devices via BleakClient (Python)\nDESCRIPTION: This snippet demonstrates the recommended asynchronous context manager pattern to connect to a BLE device using BleakClient in Python. It highlights the necessity of using 'async with' to ensure the device disconnects properly, even on exceptions, and utilizes asyncio.run() for safe event loop management. Dependencies: bleak, asyncio. Key parameter: BLE device address as a string. Inputs: BLE device address. Outputs: Connected client object within the block and automatic disconnection on exit. Limitations: Must be run in an asynchronous Python environment.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/api/client.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakClient\n\nasync def main():\n    async with BleakClient(\"XX:XX:XX:XX:XX:XX\") as client:\n        # Read a characteristic, etc.\n        ...\n\n    # Device will disconnect when block exits.\n    ...\n\n# Using asyncio.run() is important to ensure that device disconnects on\n# KeyboardInterrupt or other unhandled exception.\nasyncio.run(main())\n\n```\n\n----------------------------------------\n\nTITLE: Using BleakScanner as a Context Manager in Python\nDESCRIPTION: This snippet demonstrates how to use BleakScanner as a context manager in an asynchronous Python program. It sets up a callback function for handling discovered devices and uses an event to control when scanning should stop.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/api/scanner.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakScanner\n\nasync def main():\n    stop_event = asyncio.Event()\n\n    # TODO: add something that calls stop_event.set()\n\n    def callback(device, advertising_data):\n        # TODO: do something with incoming data\n        pass\n\n    async with BleakScanner(callback) as scanner:\n        ...\n        # Important! Wait for an event to trigger stop, otherwise scanner\n        # will stop immediately.\n        await stop_event.wait()\n\n    # scanner stops when block exits\n    ...\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Reading GATT Characteristics with BleakClient\nDESCRIPTION: Example of connecting to a specific BLE device using its address and reading the Model Number characteristic. Shows proper connection handling using async context manager.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakClient\n\naddress = \"24:71:89:cc:09:05\"\nMODEL_NBR_UUID = \"2A24\"\n\nasync def main(address):\n    async with BleakClient(address) as client:\n        model_number = await client.read_gatt_char(MODEL_NBR_UUID)\n        print(\"Model Number: {0}\".format(\"\".join(map(chr, model_number))))\n\nasyncio.run(main(address))\n```\n\n----------------------------------------\n\nTITLE: Connecting to BLE Device Using Asynchronous Context Manager in Python\nDESCRIPTION: This example demonstrates how to use the BleakClient with an asynchronous context manager to connect to a Bluetooth device, read its model number characteristic, and automatically handle disconnection. The context manager pattern (async with) ensures proper cleanup.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/usage.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakClient\n\naddress = \"24:71:89:cc:09:05\"\nMODEL_NBR_UUID = \"2A24\"\n\nasync def main(address):\n    async with BleakClient(address) as client:\n        model_number = await client.read_gatt_char(MODEL_NBR_UUID)\n        print(\"Model Number: {0}\".format(\"\".join(map(chr, model_number))))\n\nasyncio.run(main(address))\n```\n\n----------------------------------------\n\nTITLE: Discovering BLE Devices with BleakScanner\nDESCRIPTION: Asynchronous Python code that uses BleakScanner to discover available Bluetooth Low Energy devices in range. The discovered devices are printed to the console.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakScanner\n\nasync def main():\n    devices = await BleakScanner.discover()\n    for d in devices:\n        print(d)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Connecting to BLE Device with Explicit Connection Management in Python\nDESCRIPTION: This example shows how to connect to a Bluetooth device without using a context manager, manually handling connection and disconnection with try-except-finally pattern. This approach provides more explicit control over the connection lifecycle and error handling.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/usage.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom bleak import BleakClient\n\naddress = \"24:71:89:cc:09:05\"\nMODEL_NBR_UUID = \"2A24\"\n\nasync def main(address):\n    client = BleakClient(address)\n    try:\n        await client.connect()\n        model_number = await client.read_gatt_char(MODEL_NBR_UUID)\n        print(\"Model Number: {0}\".format(\"\".join(map(chr, model_number))))\n    except Exception as e:\n        print(e)\n    finally:\n        await client.disconnect()\n\nasyncio.run(main(address))\n```\n\n----------------------------------------\n\nTITLE: Handling Device Identification in macOS vs Other Platforms\nDESCRIPTION: Demonstrates how to handle device identification differently between macOS and other platforms. On macOS, a UUID is used instead of a MAC address due to CoreBluetooth's implementation.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/backends/macos.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmac_addr = (\n    \"24:71:89:cc:09:05\"\n    if platform.system() != \"Darwin\"\n    else \"243E23AE-4A99-406C-B317-18F1BD7B4CBE\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Address Type for Windows BleakClient Constructor\nDESCRIPTION: This code snippet demonstrates the usage of the 'address_type' keyword argument in the Windows BleakClient constructor. It can be set to either 'public' or 'random' to ensure the connection is made in a manner suitable for the peripheral device.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/backends/windows.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"address_type\"\n```\n\n----------------------------------------\n\nTITLE: Using async_timeout Instead of asyncio.wait_for\nDESCRIPTION: Demonstrates the switch from asyncio.wait_for to async_timeout for improved performance.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CHANGELOG.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom async_timeout import timeout\n\nasync with timeout(5):\n    await some_async_function()\n```\n\n----------------------------------------\n\nTITLE: Installing Bleak from Stable Release using pip\nDESCRIPTION: Command to install the latest stable release of Bleak using pip package manager. This is the recommended installation method for most users.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/installation.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install bleak\n```\n\n----------------------------------------\n\nTITLE: Installing Bleak via pip\nDESCRIPTION: Command to install the Bleak library using pip package manager.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/README.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install bleak\n```\n\n----------------------------------------\n\nTITLE: Installing Bleak Development Branch\nDESCRIPTION: Command to install the development branch of Bleak directly from GitHub. This method is useful for testing the latest changes before they are included in a stable release.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/installation.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install https://github.com/hbldh/bleak/archive/refs/heads/develop.zip\n```\n\n----------------------------------------\n\nTITLE: Checking Bleak Version Using importlib.metadata\nDESCRIPTION: Shows how to check the Bleak version using importlib.metadata after removal of bleak.__version__.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CHANGELOG.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom importlib.metadata import version\n\nif version('bleak') >= '0.15.0':\n    # Use new features\nelse:\n    # Use old features\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment Using Poetry - Shell\nDESCRIPTION: Sequences for entering the cloned Bleak directory and installing Python dependencies with Poetry. Poetry must be already installed. These commands initialize a virtual environment and install all project dependencies specified in the pyproject.toml file so you can start developing or testing Bleak.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd bleak/\n$ poetry install\n```\n\n----------------------------------------\n\nTITLE: Running Lint and Test Commands with Poetry - Shell\nDESCRIPTION: Shows how to use Poetry to run code formatters and test suites: isort, black, flake8, and pytest. These tools check for code style, formatting, lint errors, and run the software's test suite, respectively. All must be described in your pyproject.toml or installed in the Poetry environment beforehand.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ poetry run isort .\n$ poetry run black .\n$ poetry run flake8\n$ poetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch from Develop - Shell\nDESCRIPTION: Illustrates creating a new Git branch for a bugfix or feature, branching off from develop. Requires Git and that you're inside the bleak repository folder. This isolates your changes, following team branch policies, and avoids affecting other unrelated branches.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b name-of-your-bugfix-or-feature develop\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub - Shell\nDESCRIPTION: Commands to stage, commit, and push your local changes to a remote branch on GitHub. Requires Git. The commit command should use a descriptive message. After pushing, your branch will appear on GitHub for pull request creation.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository Using Git - Shell\nDESCRIPTION: Demonstrates how to clone your fork of the Bleak repository from GitHub using a Git command. This operation requires Git to be installed and you must have forked the repository. The expected input is the GitHub URL of your fork and the output is a local clone of the repo in a new directory. No special configuration beyond Git installation is required.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com:your_name_here/bleak.git\n```\n\n----------------------------------------\n\nTITLE: Building and Running Kivy App with Buildozer - Shell\nDESCRIPTION: This snippet shows the required shell commands to install dependencies and build, deploy, and run a Kivy application for Android using Buildozer. 'pip3 install buildozer cython' installs Buildozer and Cython, and the following commands handle incremental building, device deployment via USB, and real-time debug logging. To run these commands, Python 3, pip, a connected Android device with USB debugging enabled, and proper Android build tools are prerequisites.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/examples/kivy/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install buildozer cython\nbuildozer android debug\n# connect phone with USB and enable USB debugging\nbuildozer android deploy run logcat\n```\n\n----------------------------------------\n\nTITLE: Setting Local Bleak Source for Buildozer - Shell\nDESCRIPTION: This snippet demonstrates how to specify a local version of the Bleak source for the Buildozer Android build process by setting the 'P4A_bleak_DIR' environment variable. The value should be the absolute path to the Bleak source directory. Requires Buildozer and an appropriately configured Android build environment.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/examples/kivy/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nP4A_bleak_DIR=\"path to bleak source\" buildozer android debug\n```\n\n----------------------------------------\n\nTITLE: Cleaning Bleak Recipe Build with Buildozer - Shell\nDESCRIPTION: This command snippet is used to force a clean rebuild of the Bleak recipe in the build process by issuing Buildozer's clean_recipe_build command and specifying the path to local recipes. It ensures that changes to the 'bleak/**' sources are included in the next build. Prerequisites include Buildozer, correct path to recipes, and a compatible Android build setup.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/examples/kivy/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuildozer android p4a -- clean_recipe_build --local-recipes $(pwd)/../../bleak/backends/p4android/recipes bleak\n```\n\n----------------------------------------\n\nTITLE: Declaring Sphinx and Related Requirements - Plaintext\nDESCRIPTION: This code snippet specifies exact versions of essential dependencies for building documentation in Python projects using Sphinx. It is intended to be used in a requirements.txt file or with pip to install the required packages. No parameters are required, but it presupposes a Python environment and access to the Python package index. These declarations are crucial for reproducibility and compatibility of documentation builds; the listed dependencies include Sphinx for documentation generation, the sphinx-rtd-theme for styling, and tomli for parsing TOML files.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSphinx==5.1.1\\nsphinx-rtd-theme==1.0.0\\ntomli==2.0.1\n```\n\n----------------------------------------\n\nTITLE: Importing PyWinRT for Windows Runtime Bindings in Python\nDESCRIPTION: This snippet shows the import statement for PyWinRT, which is used to provide bindings for the Windows Runtime (WinRT) in the Bleak Windows backend.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/backends/windows.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n``PyWinRT <https://github.com/pywinrt/pywinrt>``_\n```\n\n----------------------------------------\n\nTITLE: Lazy Logging in BleakClientWinRT\nDESCRIPTION: Example of using lazy logging and f-strings for improved performance in the BleakClientWinRT class.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CHANGELOG.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlogger.debug(f\"Some debug message with {variable}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Bleak Version Using importlib.metadata\nDESCRIPTION: Shows how to import the Bleak version using importlib.metadata after removal of bleak.__version__.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/CHANGELOG.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom importlib.metadata import version\n\nbleak_version = version('bleak')\n```\n\n----------------------------------------\n\nTITLE: Including External Documentation Resources with reStructuredText Directives - reStructuredText\nDESCRIPTION: This snippet demonstrates the use of the reStructuredText include directive to insert the contents of another file (in this case, ../CHANGELOG.rst) into the current documentation. No external dependencies are required beyond a reStructuredText-compatible processing tool (such as Sphinx). The parameter to the include directive is the relative path to the file to include. The output of this directive is the inlined content of the referenced file at the processing stage. This method streamlines documentation organization and avoids duplication.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/history.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Including External Documentation with reStructuredText - reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText (RST) include directive to embed the contents of the AUTHORS.rst file located one directory above the current file. The include directive is processed by Sphinx or compatible RST tools and inserts the referenced file's content during documentation build. The path must be valid relative to the including file, and the AUTHORS.rst file must exist for the directive to succeed. No parameters are required; the only prerequisite is that the documentation build system supports the include directive.\nSOURCE: https://github.com/hbldh/bleak/blob/develop/docs/authors.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../AUTHORS.rst\n```"
  }
]