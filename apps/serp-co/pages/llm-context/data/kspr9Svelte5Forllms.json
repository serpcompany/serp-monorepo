[
  {
    "owner": "kspr9",
    "repo": "svelte5forllms",
    "content": "TITLE: Creating a Basic Svelte Component\nDESCRIPTION: Demonstrates the structure of a Svelte component with script, markup, and style sections. The component includes a button that triggers an alert when clicked.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<!file: App.svelte>\n<script>\n\tfunction greet() {\n\t\talert('Welcome to Svelte!');\n\t}\n</script>\n\n<button onclick={greet}>click me</button>\n\n<style>\n\tbutton {\n\t\tfont-size: 2em;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using $state Rune for Reactive State\nDESCRIPTION: Shows how to create reactive state using the $state rune in Svelte 5. The example includes a button that increments a counter and updates the UI accordingly.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Data Binding in Svelte 5\nDESCRIPTION: Data binding in Svelte allows data to flow upward from child to parent components. Supports various input types, group bindings, file inputs, and select elements with different binding patterns.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<input bind:value={value} />\n<input bind:value /> <!-- shorthand when names match -->\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<input bind:value={\n\t() => value,\n\t(v) => value = v.toLowerCase()}\n/>\n\n<!-- For readonly bindings -->\n<div\n\tbind:clientWidth={null, redraw}\n\tbind:clientHeight={null, redraw}\n>...</div>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Text input -->\n<script>\n\tlet message = $state('hello');\n</script>\n<input bind:value={message} />\n\n<!-- Numeric input coerces to number -->\n<script>\n\tlet a = $state(1);\n\tlet b = $state(2);\n</script>\n<input type=\"number\" bind:value={a} min=\"0\" max=\"10\" />\n<input type=\"range\" bind:value={b} min=\"0\" max=\"10\" />\n\n<!-- Checkbox -->\n<input type=\"checkbox\" bind:checked={accepted} />\n\n<!-- Form reset with defaultValue (v5.6.0+) -->\n<form>\n\t<input bind:value defaultValue=\"not the empty string\">\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n\n<!-- Checkbox with defaultChecked (v5.6.0+) -->\n<form>\n\t<input type=\"checkbox\" bind:checked defaultChecked={true}>\n\t<input type=\"reset\" value=\"Reset\">\n</form>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet tortilla = $state('Plain');\n\t/** @type {Array<string>} */\n\tlet fillings = $state([]);\n</script>\n\n<!-- Radio buttons -->\n<input type=\"radio\" bind:group={tortilla} value=\"Plain\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" />\n\n<!-- Checkboxes -->\n<input type=\"checkbox\" bind:group={fillings} value=\"Rice\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Beans\" />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet files = $state();\n\n\tfunction clear() {\n\t\tfiles = new DataTransfer().files; // null/undefined won't work\n\t}\n</script>\n\n<input bind:files type=\"file\" />\n<button onclick={clear}>clear</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Single select -->\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n</select>\n\n<!-- Multiple select -->\n<select multiple bind:value={fillings}>\n\t<option>Rice</option> <!-- value attribute can be omitted -->\n\t<option>Beans</option>\n</select>\n\n<!-- Default selection -->\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b} selected>b</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Svelte Project\nDESCRIPTION: Shows how to create a new Svelte project using the command line. It includes steps for project initialization, dependency installation, and starting the development server.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create myapp\ncd myapp\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Structure\nDESCRIPTION: Illustrates the different sections of a Svelte component file, including the script, module script, and style sections. Each section serves a specific purpose in component definition.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  // instance-level logic\n  // use runes for reactivity\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  let total = 0;\n  // Can export bindings (except default)\n</script>\n\n<script>\n  total += 1;\n  console.log(`instantiated ${total} times`);\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n  p {\n    /* only affects <p> in this component */\n    color: burlywood;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Class with $state\nDESCRIPTION: Demonstrates how to use $state in class fields to create reactive properties. The example shows a Todo class with reactive done and text properties.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass Todo {\n\tdone = $state(false);\n\ttext = $state();\n\n\tconstructor(text) {\n\t\tthis.text = text;\n\t}\n\n\treset() {\n\t\tthis.text = '';\n\t\tthis.done = false;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Runes in Svelte 5\nDESCRIPTION: Demonstrates how to type runes in Svelte 5, including $props, generic $props, and $state.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_63\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\trequiredProperty: number;\n\t\toptionalProperty?: boolean;\n\t\tsnippetWithStringArgument: Snippet<[string]>;\n\t\teventHandler: (arg: string) => void;\n\t\t[key: string]: unknown;\n\t}\n\n\tlet {\n\t\trequiredProperty,\n\t\toptionalProperty,\n\t\tsnippetWithStringArgument,\n\t\teventHandler,\n\t\t...everythingElse\n\t}: Props = $props();\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"Item extends { text: string }\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect(item: Item): void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// With initial value\nlet count: number = $state(0);\n\n// Without initial value (use casting if needed)\nlet count = $state() as number;\n\n// In classes\nclass Counter {\n\tcount = $state() as number;\n\tconstructor(initial: number) {\n\t\tthis.count = initial;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Writable Stores in Svelte\nDESCRIPTION: Demonstrates how to create a writable store, subscribe to it, and update its value using the set and update methods.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_48\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using $effect Rune for Side Effects\nDESCRIPTION: Demonstrates how to use the $effect rune to perform side effects in response to state changes. The example updates a canvas based on size and color state changes.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// this will re-run whenever `color` or `size` change\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\"></canvas>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Svelte 5\nDESCRIPTION: Demonstrates the usage of onMount and onDestroy lifecycle hooks in Svelte 5 components.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_52\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { onMount } from 'svelte';\n\n  onMount(() => {\n    console.log('the component has mounted');\n  });\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { onDestroy } from 'svelte';\n\n  onDestroy(() => {\n    console.log('the component is being destroyed');\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using $derived Rune for Computed Values\nDESCRIPTION: Illustrates how to create derived values that update reactively based on their dependencies. The example shows a doubled value derived from a count state.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2);\n</script>\n\n<button onclick={() => count++}>\n\t{doubled}\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n----------------------------------------\n\nTITLE: Using State in Svelte 5 with Runes\nDESCRIPTION: Shows how to create and use state with Svelte 5's runes feature, which is preferred for most use cases over stores.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\n/// file: state.svelte.js\nexport const userState = $state({\n\tname: 'name',\n\t/* ... */\n});\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { userState } from './state.svelte.js';\n</script>\n\n<p>User name: {userState.name}</p>\n<button onclick={() => {\n\tuserState.name = 'new name';\n}}>\n\tchange name\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Await Blocks in Svelte\nDESCRIPTION: Await blocks handle the three states of a Promise: pending, fulfilled, or rejected, with various simplified usage patterns for different scenarios.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise}\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<p>The value is {value}</p>\n{:catch error}\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise}\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#await import('./Component.svelte') then { default: Component }}\n\t<Component />\n{/await}\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive State in Svelte.js Files\nDESCRIPTION: Demonstrates how to use runes for reactive state in .svelte.js files. This example creates a counter with an increment function that can be shared across the app.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// store.svelte.js\nexport let $state count = 0;\nexport const increment = () => count += 1;\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Snippets in Svelte 5\nDESCRIPTION: Snippets create reusable markup chunks within components that can accept parameters and access the outer scope. They can be passed to other components explicitly or implicitly.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet name()}...{/snippet}\n{#snippet name(param1, param2, paramN)}...{/snippet}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} width={image.width} height={image.height} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { message = `it's great to see you!` } = $props();\n</script>\n\n{#snippet hello(name)}\n\t<p>hello {name}! {message}!</p>\n{/snippet}\n\n{@render hello('alice')}\n{@render hello('bob')}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{#snippet blastoff()}\n\t<span>🚀</span>\n{/snippet}\n\n{@render countdown(10)}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport Table from './Table.svelte';\n\n\tconst fruits = [\n\t\t{ name: 'apples', qty: 5, price: 2 },\n\t\t{ name: 'bananas', qty: 10, price: 1 },\n\t\t{ name: 'cherries', qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>fruit</th>\n\t<th>qty</th>\n\t<th>price</th>\n\t<th>total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Table data={fruits}>\n\t{#snippet header()}\n\t\t<th>fruit</th>\n\t\t<th>qty</th>\n\t\t<th>price</th>\n\t\t<th>total</th>\n\t{/snippet}\n\n\t{#snippet row(d)}\n\t\t<td>{d.name}</td>\n\t\t<td>{d.qty}</td>\n\t\t<td>{d.price}</td>\n\t\t<td>{d.qty * d.price}</td>\n\t{/snippet}\n</Table>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<Button>click me</Button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script>\n\tlet { children } = $props();\n</script>\n\n<button>{@render children()}</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n    let { children } = $props();\n</script>\n\n{#if children}\n    {@render children()}\n{:else}\n    fallback content\n{/if}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Snippet } from 'svelte';\n\n\tinterface Props {\n\t\tdata: any[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[any]>;\n\t}\n\n\tlet { data, children, row }: Props = $props();\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"T\">\n\timport type { Snippet } from 'svelte';\n\n\tlet {\n\t\tdata,\n\t\tchildren,\n\t\trow\n\t}: {\n\t\tdata: T[];\n\t\tchildren: Snippet;\n\t\trow: Snippet<[T]>;\n\t} = $props();\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n```\n\n----------------------------------------\n\nTITLE: Creating Readable Stores in Svelte\nDESCRIPTION: Demonstrates how to create a readable store with a start function that updates the store value periodically.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapper Components in Svelte 5\nDESCRIPTION: Shows how to create wrapper components in Svelte 5 with TypeScript, including handling of HTML attributes and custom elements.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_65\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>\n\t{@render children?.()}\n</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { SvelteHTMLElements } from 'svelte/elements';\n\n\tlet { children, ...rest }: SvelteHTMLElements['div'] = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Usage in Svelte 5\nDESCRIPTION: Demonstrates basic TypeScript usage in Svelte 5 components, including type annotations and event handling.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_61\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={(e: Event) => greet(e.target.innerText)}>\n\t{name as string}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Component Types in Svelte 5\nDESCRIPTION: Explains how to use component types in Svelte 5, including the Component type, ComponentProps, and component instances.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_64\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { Component } from 'svelte';\n\n\tinterface Props {\n\t\tDynamicComponent: Component<{ prop: string }>;\n\t}\n\n\tlet { DynamicComponent }: Props = $props();\n</script>\n\n<DynamicComponent prop=\"foo\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component, ComponentProps } from 'svelte';\nimport MyComponent from './MyComponent.svelte';\n\nfunction withProps<TComponent extends Component<any>>(\n\tcomponent: TComponent,\n\tprops: ComponentProps<TComponent>\n) {}\n\nwithProps(MyComponent, { foo: 'bar' });\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyComponent from './MyComponent.svelte';\n\n\tlet componentConstructor: typeof MyComponent = MyComponent;\n\tlet componentInstance: MyComponent;\n</script>\n\n<MyComponent bind:this={componentInstance} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CSS-based Transitions in Svelte\nDESCRIPTION: Demonstrates how to create a custom transition function that uses CSS for animation. The example preserves existing transforms while adding a scale effect.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\texport let visible;\n\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Svelte Components\nDESCRIPTION: Shows how to set and get context in Svelte components, allowing parent components to pass data to child components without prop drilling.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_51\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Parent.svelte -->\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('my-context', 'hello from Parent.svelte');\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Child.svelte -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst message = getContext('my-context');\n</script>\n\n<h1>{message}, inside Child.svelte</h1>\n```\n\n----------------------------------------\n\nTITLE: Component Property Bindings in Svelte\nDESCRIPTION: Examples of creating bindable properties in components and using them in parent components. Shows how to create bindable props with optional default values.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Parent -->\n<Keypad bind:value={pin} />\n\n<!-- Child (Keypad.svelte) -->\n<script>\n\tlet { value = $bindable() } = $props();\n</script>\n\n<!-- With fallback -->\n<script>\n\tlet { bindableProperty = $bindable('fallback value') } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using bind:this with Elements and Components in Svelte\nDESCRIPTION: Demonstrates how to bind directly to DOM elements or component instances using bind:this. This allows direct access to elements for canvas manipulation or component method calls.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {HTMLCanvasElement} */\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst ctx = canvas.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvas}></canvas>\n\n<!-- Component instances -->\n<ShoppingCart bind:this={cart} />\n<button onclick={() => cart.empty()}>Empty cart</button>\n```\n\n----------------------------------------\n\nTITLE: Scoped Styles in Svelte\nDESCRIPTION: Demonstrates Svelte's automatic style scoping within components using generated classes.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_46\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using the Imperative Component API in Svelte\nDESCRIPTION: Shows how to use the mount, unmount, and hydrate functions from Svelte's imperative component API for dynamic component handling.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, {\n  target: document.querySelector('#app'),\n  props: { some: 'property' }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount, unmount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { target: document.body });\n\n// later\nunmount(app, { outro: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hydrate } from 'svelte';\nimport App from './App.svelte';\n\nconst app = hydrate(App, {\n  target: document.querySelector('#app'),\n  props: { some: 'property' }\n});\n```\n\n----------------------------------------\n\nTITLE: Using @const Tag in Svelte\nDESCRIPTION: The @const tag defines a local constant within a block, allowing for derived calculations that are only executed once per iteration or condition.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Styles with style: directive in Svelte\nDESCRIPTION: Shows how to bind dynamic values to CSS properties using the style: directive. This allows reactive styling based on component state.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_35\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color={myColor}>...</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Setup in Svelte 5 with SvelteKit/Vite\nDESCRIPTION: Shows how to set up TypeScript in a Svelte 5 project using SvelteKit/Vite, including configuration for non-type-only features.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess({ script: true })\n};\n\nexport default config;\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\", // or \"ES2015\" with \"useDefineForClassFields\": true\n    \"verbatimModuleSyntax\": true,\n    \"isolatedModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with use: Directive in Svelte\nDESCRIPTION: Demonstrates how to create and use actions with the use: directive. Actions allow running code when an element is mounted and handling cleanup when unmounted.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node) {\n\t\t$effect(() => {\n\t\t\t// setup code\n\t\t\treturn () => {\n\t\t\t\t// cleanup code\n\t\t\t};\n\t\t});\n\t}\n</script>\n\n<div use:myaction>...</div>\n```\n\n----------------------------------------\n\nTITLE: Typed Actions with Custom Events in Svelte\nDESCRIPTION: Example of creating a typed action with custom events in Svelte. Shows how to dispatch custom events from an action and properly type them with TypeScript.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<\n\t * \tHTMLDivElement,\n\t * \tundefined,\n\t * \t{\n\t * \t\tonswiperight: (e: CustomEvent) => void;\n\t * \t\tonswipeleft: (e: CustomEvent) => void;\n\t * \t}\n\t * >}\n\t */\n\tfunction gestures(node) {\n\t\t$effect(() => {\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swipeleft'));\n\t\t\t// ...\n\t\t\tnode.dispatchEvent(new CustomEvent('swiperight'));\n\t\t});\n\t}\n</script>\n\n<div\n\tuse:gestures\n\tonswipeleft={next}\n\tonswiperight={prev}\n>...</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Transitions in Svelte\nDESCRIPTION: Demonstrates using transitions with the transition: directive in Svelte. Shows how elements can animate when entering or leaving the DOM based on state changes.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { fade } from 'svelte/transition';\n\tlet visible = $state(false);\n</script>\n\n<button onclick={() => visible = !visible}>toggle</button>\n\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Extending DOM Types in Svelte 5\nDESCRIPTION: Demonstrates how to extend DOM types in Svelte 5 for custom elements and attributes, providing two alternative approaches.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\n// additional-svelte-typings.d.ts\ndeclare namespace svelteHTML {\n\tinterface IntrinsicElements {\n\t\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\n\t}\n\tinterface HTMLAttributes<T> {\n\t\tonbeforeinstallprompt?: (event: any) => any;\n\t\tmycustomattribute?: any;\n\t}\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\ndeclare module 'svelte/elements' {\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Basic Component Testing in Svelte 5\nDESCRIPTION: Demonstrates a basic component test in Svelte 5 using Vitest and the mount/unmount functions.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// component.test.js\nimport { flushSync, mount, unmount } from 'svelte';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', () => {\n  const component = mount(Component, {\n    target: document.body,\n    props: { initial: 0 }\n  });\n  \n  expect(document.body.innerHTML).toBe('<button>0</button>');\n  \n  document.body.querySelector('button').click();\n  flushSync();\n  \n  expect(document.body.innerHTML).toBe('<button>1</button>');\n  \n  unmount(component);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vitest for Svelte Testing\nDESCRIPTION: Demonstrates how to configure Vitest for unit and integration testing of Svelte components.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from'vitest/config';\n\nexport default defineConfig({\n  // Tell Vitest to use browser entry points\n  resolve: process.env.VITEST\n    ? { conditions: ['browser'] }\n    : undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Using Key Blocks in Svelte\nDESCRIPTION: Key blocks destroy and recreate their contents when an expression value changes, useful for reinstantiating components or triggering transitions when values change.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n{#key expression}...{/key}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#key value}\n\t<Component />\n{/key}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n```\n\n----------------------------------------\n\nTITLE: Component Testing with Testing Library in Svelte 5\nDESCRIPTION: Shows how to use Testing Library for component testing in Svelte 5, providing a more user-centric approach to testing.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// component.test.js\nimport { render, screen } from '@testing-library/svelte';\nimport userEvent from '@testing-library/user-event';\nimport { expect, test } from 'vitest';\nimport Component from './Component.svelte';\n\ntest('Component', async () => {\n  const user = userEvent.setup();\n  render(Component);\n  \n  const button = screen.getByRole('button');\n  expect(button).toHaveTextContent(0);\n  \n  await user.click(button);\n  expect(button).toHaveTextContent(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Actions in Svelte\nDESCRIPTION: Shows how to pass parameters to actions through the use: directive. This allows configuring the behavior of actions when they're applied to elements.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\t/** @type {import('svelte/action').Action} */\n\tfunction myaction(node, data) {\n\t\t// ...\n\t}\n</script>\n\n<div use:myaction={data}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Class Binding in Svelte\nDESCRIPTION: Shows how to conditionally apply CSS classes to elements based on component state.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_40\n\nLANGUAGE: svelte\nCODE:\n```\n<div class={large ? 'large' : 'small'}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Effects in Svelte 5\nDESCRIPTION: Shows how to test effects in Svelte 5 using Vitest. It demonstrates wrapping the test in $effect.root and using flushSync() for synchronous updates.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// logger.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { logger } from './logger.svelte.js';\n\ntest('Effect', () => {\n  const cleanup = $effect.root(() => {\n    let count = $state(0);\n    let log = logger(() => count);\n    \n    flushSync();\n    expect(log.value).toEqual([0]);\n    \n    count = 1;\n    flushSync();\n    expect(log.value).toEqual([0, 1]);\n  });\n  \n  cleanup();\n});\n```\n\n----------------------------------------\n\nTITLE: Object-based Class Handling in Svelte 5\nDESCRIPTION: Demonstrates using object syntax for conditional class assignments where truthy keys are added to the class list.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_41\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { cool } = $props();\n</script>\n\n<div class={{ cool, lame: !cool }}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Animation Parameters in Svelte\nDESCRIPTION: Shows how to customize animations by passing parameters. This example adds a delay to the flip animation.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Array-based Class Handling in Svelte 5\nDESCRIPTION: Shows how to combine conditional classes using array syntax where truthy values are included in the final class list.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_42\n\nLANGUAGE: svelte\nCODE:\n```\n<div class={[faded && 'saturate-0 opacity-50', large && 'scale-200']}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Component Testing in Svelte 5\nDESCRIPTION: Explains how to set up component testing in Svelte 5 using jsdom and Vite configuration.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D jsdom\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    environment: 'jsdom'\n  },\n  resolve: process.env.VITEST\n    ? { conditions: ['browser'] }\n    : undefined\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up E2E Testing with Playwright in Svelte 5\nDESCRIPTION: Explains how to set up end-to-end testing using Playwright in a Svelte 5 project, including installation and configuration.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nnpm init playwright\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// playwright.config.js\nconst config = {\n  webServer: {\n    command: 'npm run build && npm run preview',\n    port: 4173\n  },\n  testDir: 'tests',\n  testMatch: /(.+\\.)?(test|spec)\\.[jt]s/\n};\n\nexport default config;\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// tests/hello-world.spec.js\nimport { expect, test } from '@playwright/test';\n\ntest('home page has expected h1', async ({ page }) => {\n  await page.goto('/');\n  await expect(page.locator('h1')).toBeVisible();\n});\n```\n\n----------------------------------------\n\nTITLE: Important Style Modifier in Svelte\nDESCRIPTION: Shows how to add the !important flag to CSS properties using the style: directive's important modifier.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_38\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color|important=\"red\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Testing JavaScript Functions in Svelte 5\nDESCRIPTION: Demonstrates how to test JavaScript functions in Svelte 5 using Vitest. It shows testing a multiplier function with and without runes.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n  let double = multiplier(0, 2);\n  expect(double.value).toEqual(0);\n  \n  double.set(5);\n  expect(double.value).toEqual(10);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// multiplier.svelte.test.js\nimport { flushSync } from 'svelte';\nimport { expect, test } from 'vitest';\nimport { multiplier } from './multiplier.svelte.js';\n\ntest('Multiplier', () => {\n  let count = $state(0);\n  let double = multiplier(() => count, 2);\n  \n  expect(double.value).toEqual(0);\n  count = 5;\n  expect(double.value).toEqual(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Style Directive Precedence in Svelte\nDESCRIPTION: Demonstrates how style directives take precedence over the style attribute when both are present on an element.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_39\n\nLANGUAGE: svelte\nCODE:\n```\n<div style=\"color: blue;\" style:color=\"red\">This will be red</div>\n```\n\n----------------------------------------\n\nTITLE: Local vs Global Transitions in Svelte\nDESCRIPTION: Demonstrates the difference between local and global transitions in Svelte. Local transitions only play when their immediate block changes, while global transitions play on any parent block change.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n{#if x}\n\t{#if y}\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Transition Parameters in Svelte\nDESCRIPTION: Shows how to pass parameters to transitions to customize their behavior. In this example, changing the duration of a fade transition.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Using @render Tag in Svelte\nDESCRIPTION: The @render tag is used to render snippets in Svelte components. It can render snippet functions by name or through expressions, with special handling for optional snippets.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet sum(a, b)}\n\t<p>{a} + {b} = {a + b}</p>\n{/snippet}\n\n{@render sum(1, 2)}\n{@render sum(3, 4)}\n{@render sum(5, 6)}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{@render (cool ? coolSnippet : lameSnippet)()}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{@render children?.()}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>fallback content</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Basic Animation with animate: in Svelte\nDESCRIPTION: Demonstrates using the animate: directive with the built-in flip animation to smoothly transition elements when their order changes in a keyed each block.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Using style: directive in Svelte\nDESCRIPTION: Demonstrates the style: directive for setting CSS properties on elements. This provides a more concise syntax than using the style attribute.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_34\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color=\"red\">...</div>\n<!-- Equivalent to -->\n<div style=\"color: red;\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Style Shorthand in Svelte\nDESCRIPTION: Demonstrates the shorthand syntax for style: directive when the property name and variable name are the same.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_36\n\nLANGUAGE: svelte\nCODE:\n```\n<div style:color>...</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Style Directives in Svelte\nDESCRIPTION: Shows how to apply multiple style directives to a single element, combining static, dynamic, and shorthand styles.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_37\n\nLANGUAGE: svelte\nCODE:\n```\n<div \n  style:color \n  style:width=\"12rem\" \n  style:background-color={darkMode ? 'black' : 'white'}>\n  ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Binding Media Elements in Svelte\nDESCRIPTION: Examples of binding to audio, video, and image elements in Svelte. These bindings allow reactive access to properties like duration, currentTime, paused state, and dimensions.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Audio bindings -->\n<audio \n  src={clip} \n  bind:duration \n  bind:currentTime \n  bind:paused\n></audio>\n\n<!-- Video has same bindings as audio plus: -->\n<video bind:videoWidth bind:videoHeight></video>\n\n<!-- Image bindings -->\n<img bind:naturalWidth bind:naturalHeight />\n```\n\n----------------------------------------\n\nTITLE: Binding Other HTML Elements in Svelte\nDESCRIPTION: Examples of binding to various HTML elements including details, contenteditable divs, and element dimensions for responsive components.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Details -->\n<details bind:open={isOpen}>\n\t<summary>Title</summary>\n\t<p>Content</p>\n</details>\n\n<!-- Contenteditable -->\n<div contenteditable=\"true\" bind:innerHTML={html}></div>\n\n<!-- Dimensions (readonly) -->\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Unidirectional Transitions with in: and out: in Svelte\nDESCRIPTION: Demonstrates using separate in: and out: directives for asymmetric transitions. This allows elements to enter and leave with different animations.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { fade, fly } from 'svelte/transition';\n  \n  let visible = $state(false);\n</script>\n\n<label>\n  <input type=\"checkbox\" bind:checked={visible}>\n  visible\n</label>\n\n{#if visible}\n\t<div in:fly={{ y: 200 }} out:fade>flies in, fades out</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Transition Events in Svelte\nDESCRIPTION: Shows how to listen for transition events (introstart, introend, outrostart, outroend) to track the state of animations and perform actions at specific points.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\tonintrostart={() => (status = 'intro started')}\n\t\tonoutrostart={() => (status = 'outro started')}\n\t\tonintroend={() => (status = 'intro ended')}\n\t\tonoutroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Global Styles in Svelte\nDESCRIPTION: Shows how to apply global styles using :global selector and blocks in Svelte components.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_47\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\t:global(body) {\n\t\t/* applies to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* applies to all <strong> elements, in any component,\n\t\t   that are inside <div> elements belonging\n\t\t   to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.big.red) {\n\t\t/* applies to all <p> elements belonging to this component\n\t\t   with `class=\"big red\"`, even if it is applied\n\t\t   programmatically (for example by a library) */\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using @html Tag in Svelte\nDESCRIPTION: The @html tag injects raw HTML into a component. Care must be taken to prevent XSS attacks by only using safe, escaped content. Styles must use the :global modifier to affect injected HTML.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<article>\n\t{@html content}\n</article>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<style>\n\tarticle:global{\n\t\ta { color: hotpink }\n\t\timg { width: 100% }\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using @debug Tag in Svelte\nDESCRIPTION: The @debug tag provides debugging capabilities in Svelte components, logging values when they change and pausing execution if developer tools are open.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{@debug user}\n{@debug user1, user2, user3}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n{@debug}\n```\n\n----------------------------------------\n\nTITLE: Component Class Prop Forwarding\nDESCRIPTION: Example of forwarding and combining class props in a Button component while preserving other props.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_43\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props} class={['cool-button', props.class]}>\n\t{@render props.children?.()}\n</button>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Class Values\nDESCRIPTION: Demonstrates TypeScript integration with class handling using the ClassValue type from svelte/elements.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_44\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { ClassValue } from 'svelte/elements';\n\n\tconst props: { class: ClassValue } = $props();\n</script>\n\n<div class={['original', props.class]}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Legacy Class Directive Usage\nDESCRIPTION: Shows the legacy class: directive syntax for conditional class assignment in Svelte.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_45\n\nLANGUAGE: svelte\nCODE:\n```\n<div class:cool={cool} class:lame={!cool}>...</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Tick-based Custom Transitions in Svelte\nDESCRIPTION: Example of creating a custom transition using the tick function for complex animations. This typewriter effect gradually reveals text by manipulating the DOM directly.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\texport let visible = false;\n\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS-based Custom Animations in Svelte\nDESCRIPTION: Example of creating a custom animation function using CSS transforms. This animation rotates elements as they move to their new positions.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_32\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Creating Tick-based Custom Animations in Svelte\nDESCRIPTION: Example of creating a custom animation using the tick function to change element styles during animation. This animation changes the text color midway through the transition.\nSOURCE: https://github.com/kspr9/svelte5forllms/blob/main/svelte-distilled.txt#2025-04-22_snippet_33\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n```"
  }
]