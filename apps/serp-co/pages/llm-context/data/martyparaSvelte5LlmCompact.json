[
  {
    "owner": "martypara",
    "repo": "svelte5-llm-compact",
    "content": "TITLE: General Event Handling Guidelines in Svelte 5\nDESCRIPTION: Provides general guidelines and examples for event handling in Svelte 5, including attaching handlers, mutating $state, using shorthand syntax, event delegation, and the order of event firing. It also demonstrates various event handling scenarios with code examples.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let count = $state(0);         // Reactive state\n  let text = $state('');         // Input value\n  const logClick = () => console.log('Clicked!'); // Named handler\n  \n  // $effect to react to state changes\n  $effect(() => console.log(`Count is now ${count}`));\n</script>\n\n<!-- Inline handler with $state -->\n<button onclick={() => count++}>\n  Increment: {count}\n</button>\n\n<!-- Shorthand with named handler -->\n<button {logClick}>\n  Log Click\n</button>\n\n<!-- Input event with binding -->\n<input\n  oninput={(e) => text = e.target.value}\n  bind:value={text}\n  placeholder=\"Type here\"\n/>\n<p>You typed: {text}</p>\n\n<!-- Keydown event with condition -->\n<input\n  onkeydown={(e) => e.key === 'Enter' && count++}\n  placeholder=\"Press Enter to increment\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Receiving Props with $props in Svelte 5\nDESCRIPTION: Demonstrates how to receive and use props in a Svelte component using the $props rune. This example shows basic prop usage, including passing props from a parent component and accessing them in a child component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport MyComponent from './MyComponent.svelte';\n</script>\n\n<MyComponent adjective=\"cool\" />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet props = $props();\n</script>\n\n<p>This component is {props.adjective}</p>\n```\n\n----------------------------------------\n\nTITLE: Deep Reactivity with Arrays using $state in Svelte 5\nDESCRIPTION: Shows how $state makes arrays deeply reactive in Svelte 5. The todos array is reactive, and changes to individual items or adding new items trigger UI updates.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet todos = $state([\n\t\t{ done: false, text: 'Learn Svelte' },\n\t\t{ done: false, text: 'Build an app' }\n\t]);\n\n\tfunction toggle(index) {\n\t\ttodos[index].done = !todos[index].done; // Reactivity applies to individual items\n\t}\n</script>\n\n<ul>\n\t{#each todos as todo, index}\n\t\t<li>\n\t\t\t<input type=\"checkbox\" bind:checked={todo.done} onclick={() => toggle(index)} />\n\t\t\t{todo.text}\n\t\t</li>\n\t{/each}\n</ul>\n\n<button onclick={() => todos.push({ done: false, text: 'New task' })}>\n\tAdd Todo\n</button>\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Svelte 5\nDESCRIPTION: Shows the new approach to event handling in Svelte 5. Instead of using on: directives, events are now handled using regular properties like onclick. The example demonstrates both inline and shorthand event handling.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_42\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n  clicks: {count}\n</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let count = $state(0);\n\n  function onclick() {\n    count++;\n  }\n</script>\n\n<button {onclick}>\n  clicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Svelte 5 with onclick Property\nDESCRIPTION: Demonstrates the new event handling approach in Svelte 5, replacing on: directives with standard HTML event properties like onclick. This example shows incrementing a reactive state variable on button click.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let count = $state(0);\n</script>\n\n<button onclick={() => count++}>\n  clicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Deep Reactivity with Arrays in Svelte 5\nDESCRIPTION: Demonstrates how $state makes arrays deeply reactive. Changes to nested properties of array items trigger UI updates, and new items added to the array automatically become reactive.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet todos = $state([\n\t\t{ done: false, text: 'Learn Svelte' },\n\t\t{ done: false, text: 'Build an app' }\n\t]);\n\n\tfunction toggle(index) {\n\t\ttodos[index].done = !todos[index].done; // Reactivity applies to individual items\n\t}\n</script>\n\n<ul>\n\t{#each todos as todo, index}\n\t\t<li>\n\t\t\t<input type=\"checkbox\" bind:checked={todo.done} onclick={() => toggle(index)} />\n\t\t\t{todo.text}\n\t\t</li>\n\t{/each}\n</ul>\n\n<button onclick={() => todos.push({ done: false, text: 'New task' })}>\n\tAdd Todo\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management with Svelte 5 Runes\nDESCRIPTION: Demonstrates the usage of Svelte 5's new Runes API for state management. It shows how to create reactive variables, derived values, and side effects using $state, $derived, and $effect.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = $state(0);\nconst double = $derived(count * 2);\n$effect(() => {\n  if (count > 5) alert('Count is too high!');\n});\n```\n\n----------------------------------------\n\nTITLE: Event Modifiers as Functions in Svelte 5\nDESCRIPTION: Demonstrates how to implement event modifiers like 'once' and 'preventDefault' as functions in Svelte 5, replacing the previous modifier syntax. This approach provides more flexibility and control over event handling.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction once(fn) {\n\t\treturn function (event) {\n\t\t\tif (fn) fn.call(this, event);\n\t\t\tfn = null; // Ensures it only runs once\n\t\t};\n\t}\n\n\tfunction preventDefault(fn) {\n\t\treturn function (event) {\n\t\t\tevent.preventDefault();\n\t\t\tfn.call(this, event);\n\t\t};\n\t}\n\n\tfunction handler(event) {\n\t\tconsole.log('Button clicked');\n\t}\n</script>\n\n<button onclick={once(preventDefault(handler))}>\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Receiving Props in Svelte 5 Components\nDESCRIPTION: Demonstrates how to receive and use props in a Svelte 5 component using the $props rune. It shows basic usage, destructuring, default values, and prop renaming.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet props = $props();\n</script>\n\n<p>This component is {props.adjective}</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { adjective } = $props();\n</script>\n\n<p>This component is {adjective}</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { adjective = 'happy' } = $props();\n</script>\n\n<p>This component is {adjective}</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { super: trouper = 'lights are gonna find me' } = $props();\n</script>\n\n<p>Song lyric: {trouper}</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $state in Svelte 5\nDESCRIPTION: Demonstrates how to create and update a reactive state variable using $state. The count variable becomes reactive and UI updates automatically when it changes.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0); // count is reactive\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count} <!-- UI updates automatically when count changes -->\n</button>\n```\n\n----------------------------------------\n\nTITLE: Forwarding Event Handlers in Svelte 5\nDESCRIPTION: Demonstrates how to accept and forward event handlers as props in Svelte 5, replacing the event forwarding syntax from Svelte 4. This example shows a simple button that accepts an onclick callback.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { onclick } = $props();\n</script>\n\n<button {onclick}>\n  click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Component Communication in Svelte 5\nDESCRIPTION: Demonstrates how component communication has changed in Svelte 5. Instead of using createEventDispatcher for emitting events, components now use callback props for communication between parent and child components.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_43\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Pump from './Pump.svelte';\n\n  let size = $state(15);\n  let burst = $state(false);\n\n  function reset() {\n    size = 15;\n    burst = false;\n  }\n</script>\n\n<Pump\n  inflate={(power) => {\n    size += power;\n    if (size > 75) burst = true;\n  }}\n  deflate={(power) => {\n    if (size > 0) size -= power;\n  }}\n/>\n\n{#if burst}\n  <button onclick={reset}>new balloon</button>\n  <span class=\"boom\">ðŸ’¥</span>\n{:else}\n  <span class=\"balloon\" style=\"scale: {0.01 * size}\">\n    ðŸŽˆ\n  </span>\n{/if}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  let { inflate, deflate } = $props();\n  let power = $state(5);\n</script>\n\n<button onclick={() => inflate(power)}>inflate</button>\n<button onclick={() => deflate(power)}>deflate</button>\n\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\n----------------------------------------\n\nTITLE: Declaring Props in Svelte 5 with $props Rune\nDESCRIPTION: Demonstrates the new way to declare component props in Svelte 5 using the $props rune. This replaces the export let syntax from Svelte 4 and allows for setting default values for optional props.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { optional = 'unset', required } = $props();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Modifiers in Svelte 5\nDESCRIPTION: Shows how to implement custom event modifiers in Svelte 5, which replaces the built-in event modifiers from Svelte 4. This example demonstrates creating once and preventDefault modifier functions.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  function once(fn) {\n    return function (event) {\n      if (fn) fn.call(this, event);\n      fn = null;\n    };\n  }\n\n  function preventDefault(fn) {\n    return function (event) {\n      event.preventDefault();\n      fn.call(this, event);\n    };\n  }\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\n----------------------------------------\n\nTITLE: Event Modifier Replacement in Svelte 5\nDESCRIPTION: Shows how to replace Svelte 4's event modifiers in Svelte 5. Since built-in modifiers are no longer available, the example demonstrates how to create wrapper functions to achieve similar functionality for 'once' and 'preventDefault' modifiers.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_44\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  function once(fn) {\n    return function (event) {\n      if (fn) fn.call(this, event);\n      fn = null;\n    };\n  }\n\n  function preventDefault(fn) {\n    return function (event) {\n      event.preventDefault();\n      fn.call(this, event);\n    };\n  }\n</script>\n\n<button onclick={once(preventDefault(handler))}>...</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $effect in Svelte 5\nDESCRIPTION: Demonstrates how to use $effect to reactively update a canvas when state changes. The effect automatically tracks dependencies (size and color) and runs whenever they change.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// This effect runs whenever `color` or `size` changes\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\" />\n\n<input type=\"color\" bind:value={color} />\n<input type=\"range\" bind:value={size} min=\"10\" max=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Usage in Svelte Component\nDESCRIPTION: Demonstrates the basic setup for using TypeScript in a Svelte component. It shows how to enable TypeScript with the lang attribute and use type annotations for variables and functions.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={() => greet(name)}>Greet</button>\n```\n\n----------------------------------------\n\nTITLE: Preventing Local Handlers from Being Overwritten in Svelte 5\nDESCRIPTION: Shows how to ensure that local event handlers are not overwritten when spreading props in Svelte 5. This technique allows both local and passed-in event handlers to execute, maintaining component flexibility.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet props = $props();\n\n\tfunction doStuff(event) {\n\t\tconsole.log('Handled locally', event);\n\t}\n</script>\n\n<button\n\t{...props}\n\tonclick={(e) => {\n\t\tdoStuff(e);\n\t\tprops.onclick?.(e);\n\t}}\n>\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Derived State in Svelte 5\nDESCRIPTION: Demonstrates how $derived updates a value based on changes to $state variables. The derived value automatically updates when its dependencies change.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2); // `doubled` automatically updates when `count` changes\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Derived State in Svelte 5\nDESCRIPTION: Demonstrates how $derived updates a value based on $state. The doubled value automatically updates when count changes, showing the basic usage of derived state.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2); // `doubled` automatically updates when `count` changes\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>{count} doubled is {doubled}</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Handlers in Svelte 5\nDESCRIPTION: Demonstrates how to handle multiple event handlers for the same event in Svelte 5, since you can only have one property with the same name. This example shows combining two handler functions into one.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n  onclick={(e) => {\n    one(e);\n    two(e);\n  }}\n>\n  ...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Combining Local and Spread Event Handlers in Svelte 5\nDESCRIPTION: Shows how to combine local event handling with event handlers from spread props. This technique ensures both the local handler and any handler passed via props are executed.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<button\n  {...props}\n  onclick={(e) => {\n    doStuff(e);\n    props.onclick?.(e);\n  }}\n>\n  ...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using $derived Instead of $effect for Computed Values\nDESCRIPTION: Demonstrates the correct way to derive state using $derived instead of modifying it within $effect, which would cause infinite loops. This pattern is essential for computing values based on other state.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet doubled = $derived(count * 2); // Correct approach\n\n\t// Incorrect approach (causes infinite loops):\n\t// $effect(() => {\n\t//   doubled = count * 2;\n\t// });\n</script>\n\n<h1>{count} doubled is {doubled}</h1>\n\n<button onclick={() => count += 1}>Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handling in Svelte 5\nDESCRIPTION: Demonstrates how to handle a click event on a button in Svelte 5, incrementing a counter state variable. It shows the use of direct property binding for event handlers instead of 'on:' directives.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\tfunction onclick() {\n\t\tcount++;\n\t}\n</script>\n\n<button {onclick}>\n\tclicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Spreading Props Including Event Handlers in Svelte 5\nDESCRIPTION: Shows how to spread all props including event handlers to a component or element. This approach allows forwarding all provided props without explicitly naming each one.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let props = $props();\n</script>\n\n<button {...props}>\n  click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using $derived.by for Complex Computation in Svelte 5\nDESCRIPTION: Demonstrates how $derived.by allows more complex calculations with multiple steps. The derived value is recalculated automatically when any of its dependencies change.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet numbers = $state([1, 2, 3]);\n\n\t// `total` is automatically recalculated when `numbers` change\n\tlet total = $derived.by(() => {\n\t\tlet sum = 0;\n\t\tfor (const n of numbers) {\n\t\t\tsum += n;\n\t\t}\n\t\treturn sum;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\tAdd Number\n</button>\n\n<p>{numbers.join(' + ')} = {total}</p>\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Props in Svelte 5\nDESCRIPTION: Illustrates the new way of declaring and using props in Svelte 5. It shows how to use $props() for all prop declarations, including optional props with default values and prop renaming.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_41\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { optional = 'unset', required } = $props();\n</script>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { class: klass, ...rest } = $props();\n</script>\n<button class={klass} {...rest}>click me</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Two-Way Binding with $bindable\nDESCRIPTION: Demonstrates how to use $bindable to create a prop that supports two-way data binding. The child component's input is bound to a parent component's state variable, enabling automatic updates.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { value = $bindable(), ...props } = $props(); // `value` is bindable, allowing two-way data flow\n</script>\n\n<input bind:value={value} {...props} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('hello'); // Using `$state` to create a reactive state variable\n</script>\n\n<FancyInput bind:value={message} />\n<p>{message}</p> <!-- This will update as the user types in the input -->\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $state in Svelte 5\nDESCRIPTION: Demonstrates how to create and update a reactive state variable using $state. The count variable is made reactive and automatically updates the UI when changed.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0); // count is reactive\n</script>\n\n<button onclick={() => count++}>\n\tclicks: {count} <!-- UI updates automatically when count changes -->\n</button>\n```\n\n----------------------------------------\n\nTITLE: Bubbling Events with Callback Props in Svelte 5\nDESCRIPTION: Shows how to forward an event from an element to a component using callback props instead of 'on:' directives in Svelte 5. This example demonstrates a simple clickable button component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet { onclick } = $props(); // Accepts an `onclick` function from parent\n</script>\n\n<button {onclick}>\n\tclick me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Two-Way Binding with $bindable\nDESCRIPTION: Demonstrates creating a reusable input component with two-way binding using $bindable. The component allows parent components to bind to its value while maintaining proper TypeScript support.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { value = $bindable(), ...props } = $props();\n</script>\n\n<input bind:value={value} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Using $effect Rune for Side Effects in Svelte 5\nDESCRIPTION: Shows how to implement side effects using the new $effect rune in Svelte 5, which replaces the reactive statements from Svelte 4. This example demonstrates monitoring a count variable and triggering an alert when it exceeds a threshold.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n$effect(() => {\n  if (count > 5) alert('Count is too high!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Basic Snippets in Svelte 5\nDESCRIPTION: Demonstrates how to create and use a snippet to avoid repetitive markup. The example shows a reusable figure snippet that conditionally wraps images in anchor tags based on available href properties.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet images = [\n\t\t{ src: \"image1.jpg\", caption: \"Image 1\", href: \"https://example.com\" },\n\t\t{ src: \"image2.jpg\", caption: \"Image 2\" }\n\t];\n</script>\n\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Component Events with Callback Props in Svelte 5 (Pump.svelte)\nDESCRIPTION: Shows the child component implementation that accepts callback props instead of dispatching events. This component provides UI controls for inflating and deflating a balloon in the parent component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  let { inflate, deflate } = $props();\n  let power = $state(5);\n</script>\n\n<button onclick={() => inflate(power)}>inflate</button>\n<button onclick={() => deflate(power)}>deflate</button>\n\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Canvas Reactivity with $effect\nDESCRIPTION: Demonstrates reactive canvas drawing using $effect to respond to state changes in color and size. The effect automatically tracks dependencies and updates the canvas accordingly.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// This effect runs whenever `color` or `size` changes\n\t\tcontext.fillStyle = color;\n\t\tcontext.fillRect(0, 0, size, size);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\" />\n\n<input type=\"color\" bind:value={color} />\n<input type=\"range\" bind:value={size} min=\"10\" max=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Passing Snippets as Component Props\nDESCRIPTION: Demonstrates how to pass snippets as props to create a reusable table component with customizable header and row rendering.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Table.svelte -->\n<script>\n\tlet { data, header, row } = $props();\n</script>\n\n<table>\n\t<thead>\n\t\t<tr>{@render header()}</tr>\n\t</thead>\n\t<tbody>\n\t\t{#each data as item}\n\t\t\t<tr>{@render row(item)}</tr>\n\t\t{/each}\n\t</tbody>\n</table>\n\n<!-- App.svelte -->\n<script>\n\timport Table from \"./Table.svelte\";\n\n\tconst fruits = [\n\t\t{ name: \"Apples\", qty: 5, price: 2 },\n\t\t{ name: \"Bananas\", qty: 10, price: 1 },\n\t\t{ name: \"Cherries\", qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>Fruit</th>\n\t<th>Qty</th>\n\t<th>Price</th>\n\t<th>Total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\n----------------------------------------\n\nTITLE: Passing Snippets as Props to Components in Svelte 5\nDESCRIPTION: Demonstrates how to pass snippets as props to a component. The example shows a Table component that accepts header and row snippets, allowing customization of table rendering while maintaining consistent structure.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Table.svelte -->\n<script>\n\tlet { data, header, row } = $props();\n</script>\n\n<table>\n\t<thead>\n\t\t<tr>{@render header()}</tr>\n\t</thead>\n\t<tbody>\n\t\t{#each data as item}\n\t\t\t<tr>{@render row(item)}</tr>\n\t\t{/each}\n\t</tbody>\n</table>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script>\n\timport Table from \"./Table.svelte\";\n\n\tconst fruits = [\n\t\t{ name: \"Apples\", qty: 5, price: 2 },\n\t\t{ name: \"Bananas\", qty: 10, price: 1 },\n\t\t{ name: \"Cherries\", qty: 20, price: 0.5 }\n\t];\n</script>\n\n{#snippet header()}\n\t<th>Fruit</th>\n\t<th>Qty</th>\n\t<th>Price</th>\n\t<th>Total</th>\n{/snippet}\n\n{#snippet row(d)}\n\t<td>{d.name}</td>\n\t<td>{d.qty}</td>\n\t<td>{d.price}</td>\n\t<td>{d.qty * d.price}</td>\n{/snippet}\n\n<Table data={fruits} {header} {row} />\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Component IDs with $props.id() in Svelte 5\nDESCRIPTION: Demonstrates how to generate unique component-scoped IDs using $props.id(). This is useful for creating accessible form inputs and ensuring consistency between server and client during hydration.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tconst uid = $props.id();\n</script>\n\n<form>\n\t<label for=\"{uid}-firstname\">First Name: </label>\n\t<input id=\"{uid}-firstname\" type=\"text\" />\n\n\t<label for=\"{uid}-lastname\">Last Name: </label>\n\t<input id=\"{uid}-lastname\" type=\"text\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props in Svelte\nDESCRIPTION: Shows how to type component props in Svelte using TypeScript. It defines an interface for props and uses the $props() function to extract typed props.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tinterface Props {\n\t\tname: string;\n\t}\n\n\tlet { name }: Props = $props();\n</script>\n\n<p>Hello, {name}!</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Greeting from './Greeting.svelte';\n</script>\n\n<Greeting name=\"Alice\" />\n```\n\n----------------------------------------\n\nTITLE: Using Snippets as Default Slots in Svelte 5\nDESCRIPTION: Shows how snippets replace the slot system in Svelte 5. Content passed to a component becomes available as the `children` snippet prop, which can be rendered with the @render directive.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script>\n\tlet { children } = $props();\n</script>\n\n<button>{@render children()}</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<Button>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Default Children Snippet Usage\nDESCRIPTION: Shows how to use the default children snippet as a replacement for the default slot system in Svelte 5.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script>\n\tlet { children } = $props();\n</script>\n\n<button>{@render children()}</button>\n\n<!-- App.svelte -->\n<Button>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Reactivity in Classes with Svelte 5 Runes\nDESCRIPTION: Demonstrates using $state inside a class to create reactive properties. Class methods can modify these properties, and the UI updates automatically in response.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tclass Todo {\n\t\tdone = $state(false);\n\t\ttext = $state('');\n\n\t\tconstructor(text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\treset = () => {\n\t\t\tthis.text = '';\n\t\t\tthis.done = false;\n\t\t}\n\t}\n\n\tlet todo = new Todo('Buy groceries');\n</script>\n\n<p>{todo.text} - {todo.done ? 'Done' : 'Not done'}</p>\n<button onclick={() => todo.done = !todo.done}>Toggle</button>\n<button onclick={() => todo.reset()}>Reset</button>\n```\n\n----------------------------------------\n\nTITLE: Understanding Dependencies with $derived in Svelte 5\nDESCRIPTION: Shows how derived state tracks dependencies and updates automatically when those dependencies change. This example tracks if a count is even or odd.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet isEven = $derived(count % 2 === 0);\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>{count} is {isEven ? 'Even' : 'Odd'}</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Bindable Props Component\nDESCRIPTION: Shows how to implement multiple bindable props in a single component, allowing parent components to bind to multiple values. Includes default values and TypeScript support.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { value = $bindable('default text'), disabled = $bindable(false), ...props } = $props();\n</script>\n\n<input bind:value={value} bind:disabled={disabled} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Default Fallback for Bindable Props\nDESCRIPTION: Shows how to provide a default value when the parent does not pass a bindable prop. This ensures the component always has a meaningful initial state even when used without binding.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { value = $bindable('fallback'), ...props } = $props(); // Default value set to 'fallback'\n</script>\n\n<input bind:value={value} {...props} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport FancyInput from './FancyInput.svelte';\n</script>\n\n<FancyInput /> <!-- No `bind:value`, so it defaults to 'fallback' -->\n```\n\n----------------------------------------\n\nTITLE: Using $effect.pre for Pre-DOM Updates\nDESCRIPTION: Shows how $effect.pre can be used to run logic before the DOM updates. This is useful for timing-sensitive operations like auto-scrolling in a message list.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { tick } from 'svelte';\n\n\tlet div = $state();\n\tlet messages = $state([]);\n\n\t$effect.pre(() => {\n\t\tif (!div) return;\n\n\t\t// Tracks `messages.length` so the effect re-runs when messages change\n\t\tmessages.length;\n\n\t\t// Auto-scroll logic before the DOM updates\n\t\tif (div.offsetHeight + div.scrollTop > div.scrollHeight - 20) {\n\t\t\ttick().then(() => {\n\t\t\t\tdiv.scrollTo(0, div.scrollHeight);\n\t\t\t});\n\t\t}\n\t});\n</script>\n\n<div bind:this={div}>\n\t{#each messages as message}\n\t\t<p>{message}</p>\n\t{/each}\n</div>\n\n<button onclick={() => messages = [...messages, 'New message']}>Add Message</button>\n```\n\n----------------------------------------\n\nTITLE: Effect Cleanup with Interval Timer\nDESCRIPTION: Shows how to implement cleanup functions in $effect for managing intervals. The effect includes a teardown function that cleans up the interval when dependencies change or component is destroyed.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\t// Cleanup function runs before effect re-runs or on component destroy\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>Slower</button>\n<button onclick={() => (milliseconds /= 2)}>Faster</button>\n```\n\n----------------------------------------\n\nTITLE: Passing Data from Child to Parent Using Snippets\nDESCRIPTION: Shows how snippets allow passing data from child to parent components. The List component passes item data to snippet functions, which the parent can then use within snippet definitions.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_32\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- List.svelte -->\n<script>\n\tlet { items, item, empty } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t{@render item(entry)}\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t{@render empty?.()}\n{/if}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script>\n\timport List from \"./List.svelte\";\n\t\n\tconst fruits = ['Apple', 'Banana', 'Cherry'];\n</script>\n\n<List items={fruits}>\n\t{#snippet item(fruit)}\n\t\t<span>{fruit}</span>\n\t{/snippet}\n\t\n\t{#snippet empty()}\n\t\t<span>No fruits available</span>\n\t{/snippet}\n</List>\n```\n\n----------------------------------------\n\nTITLE: Data Flow from Child to Parent using Snippets\nDESCRIPTION: Shows how to pass data from child to parent components using snippet parameters, creating a flexible list component with customizable item rendering.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- List.svelte -->\n<script>\n\tlet { items, item, empty } = $props();\n</script>\n\n{#if items.length}\n\t<ul>\n\t\t{#each items as entry}\n\t\t\t<li>\n\t\t\t\t{@render item(entry)}\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{:else}\n\t{@render empty?.()}\n{/if}\n\n<!-- App.svelte -->\n<script>\n\timport List from \"./List.svelte\";\n\t\n\tconst fruits = ['Apple', 'Banana', 'Cherry'];\n</script>\n\n<List items={fruits}>\n\t{#snippet item(fruit)}\n\t\t<span>{fruit}</span>\n\t{/snippet}\n\t\n\t{#snippet empty()}\n\t\t<span>No fruits available</span>\n\t{/snippet}\n</List>\n```\n\n----------------------------------------\n\nTITLE: Tracing Changes with console.trace in Svelte 5\nDESCRIPTION: Illustrates how to trace reactive state changes using $inspect(...).with(console.trace). This is particularly useful for debugging complex reactive flows and understanding where state changes originate.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet message = $state('Hello');\n\n\t$inspect(message).with(console.trace);\n</script>\n\n<input bind:value={message} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Component Props in Svelte 5\nDESCRIPTION: Demonstrates how to use generic types for flexible component props in Svelte 5. The generics attribute on the script tag allows for type parameters that ensure type consistency across props.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_35\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- List.svelte -->\n<script lang=\"ts\" generics=\"Item\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect: (item: Item) => void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>{item}</button>\n{/each}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script lang=\"ts\">\n\timport List from './List.svelte';\n\n\tconst names = ['Alice', 'Bob', 'Charlie'];\n\n\tfunction handleSelect(name: string) {\n\t\tconsole.log('Selected:', name);\n\t}\n</script>\n\n<List items={names} select={handleSelect} />\n```\n\n----------------------------------------\n\nTITLE: Component Events with Callback Props in Svelte 5 (App.svelte)\nDESCRIPTION: Illustrates how to use callback props instead of event dispatchers in Svelte 5. This parent component passes functions to a child component that will be called when specific events occur, managing a balloon inflation simulation.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Pump from './Pump.svelte';\n\n  let size = $state(15);\n  let burst = $state(false);\n\n  function reset() {\n    size = 15;\n    burst = false;\n  }\n</script>\n\n<Pump\n  inflate={(power) => {\n    size += power;\n    if (size > 75) burst = true;\n  }}\n  deflate={(power) => {\n    if (size > 0) size -= power;\n  }}\n/>\n\n{#if burst}\n  <button onclick={reset}>new balloon</button>\n  <span class=\"boom\">ðŸ’¥</span>\n{:else}\n  <span class=\"balloon\" style=\"scale: {0.01 * size}\">\n    ðŸŽˆ\n  </span>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Usage in Svelte 5\nDESCRIPTION: Shows how dynamic components are handled in Svelte 5. The <svelte:component> tag is no longer needed as components update dynamically when reassigned. The example demonstrates both the new and old syntax for comparison.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_47\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import A from './A.svelte';\n  import B from './B.svelte';\n  let Thing = $state();\n</script>\n\n<select bind:value={Thing}>\n  <option value={A}>A</option>\n  <option value={B}>B</option>\n</select>\n\n<!-- Both are now equivalent -->\n<Thing />\n<svelte:component this={Thing} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Elements with $host in Svelte 5\nDESCRIPTION: Shows how to use $host inside a custom element to dispatch events in Svelte 5. This approach allows dispatching custom events from a shadow DOM encapsulated component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options customElement=\"my-stepper\" />\n\n<script lang=\"ts\">\n\tfunction dispatch(type) {\n\t\t$host().dispatchEvent(new CustomEvent(type)); \n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport './Stepper.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1} \n\tonincrement={() => count += 1} \n></my-stepper>\n\n<p>count: {count}</p>\n```\n\n----------------------------------------\n\nTITLE: Typing $state in Svelte 5 with TypeScript\nDESCRIPTION: Shows how to properly type state variables in Svelte 5 using TypeScript. The example demonstrates initializing a typed reactive variable with $state() and incrementing it in a function.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_36\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count: number = $state(0);\n\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n</script>\n\n<button onclick={increment}>Count: {count}</button>\n```\n\n----------------------------------------\n\nTITLE: Component Instantiation and Lifecycle in Svelte 5\nDESCRIPTION: Illustrates the changes in component instantiation and lifecycle management in Svelte 5. It shows how to use mount or hydrate instead of new Component(), and how to handle events and unmounting.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { \n  target: document.getElementById(\"app\"),\n  events: { event: callback } // Replacement for $on\n});\n\nconst props = $state({ foo: 'bar' }); // Replacement for $set\nprops.foo = 'baz';\n\nimport { unmount } from 'svelte';\nunmount(app); // Replacement for $destroy\n```\n\n----------------------------------------\n\nTITLE: Snippet Scope and Visibility Rules\nDESCRIPTION: Illustrates snippet scoping rules where nested snippets are only accessible within their lexical scope. Shows proper and improper snippet usage patterns.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}\n\t\t\t<p>Inside y</p>\n\t\t{/snippet}\n\n\t\t<!-- Rendering `y` inside `x` is allowed -->\n\t\t{@render y()}\n\t{/snippet}\n\n\t<!-- This will cause an error because `y` is out of scope -->\n\t{@render y()}\n</div>\n\n<!-- This will also cause an error because `x` is out of scope -->\n{@render x()}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Type in Svelte 5\nDESCRIPTION: Shows how to use the new Component type from Svelte 5 for TypeScript typing, replacing the deprecated SvelteComponent type from Svelte 4.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Component } from 'svelte';\nexport declare const MyComponent: Component<{ foo: string }>;\n```\n\n----------------------------------------\n\nTITLE: Using $state in Classes with Svelte 5\nDESCRIPTION: Demonstrates using $state inside a class to create reactive properties. The Todo class has reactive done and text properties, which automatically update the UI when changed.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tclass Todo {\n\t\tdone = $state(false);\n\t\ttext = $state('');\n\n\t\tconstructor(text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\treset = () => {\n\t\t\tthis.text = '';\n\t\t\tthis.done = false;\n\t\t}\n\t}\n\n\tlet todo = new Todo('Buy groceries');\n</script>\n\n<p>{todo.text} - {todo.done ? 'Done' : 'Not done'}</p>\n<button onclick={() => todo.done = !todo.done}>Toggle</button>\n<button onclick={() => todo.reset()}>Reset</button>\n```\n\n----------------------------------------\n\nTITLE: Snippet Scoping and Visibility Rules in Svelte 5\nDESCRIPTION: Demonstrates snippet scoping rules where snippets are only accessible within their lexical scope. Snippets defined inside other snippets are only accessible within the parent snippet.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<div>\n\t{#snippet x()}\n\t\t{#snippet y()}\n\t\t\t<p>Inside y</p>\n\t\t{/snippet}\n\n\t\t<!-- Rendering `y` inside `x` is allowed -->\n\t\t{@render y()}\n\t{/snippet}\n\n\t<!-- This will cause an error because `y` is out of scope -->\n\t{@render y()}\n</div>\n\n<!-- This will also cause an error because `x` is out of scope -->\n{@render x()}\n```\n\n----------------------------------------\n\nTITLE: Optional Snippet Props Handling\nDESCRIPTION: Demonstrates how to handle optional snippet props with fallback content using conditional rendering.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- OptionalSnippet.svelte -->\n<script>\n\tlet { children } = $props();\n</script>\n\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>Fallback content</p>\n{/if}\n\n<!-- App.svelte -->\n<OptionalSnippet />\n<OptionalSnippet>\n\t{#snippet children()}\n\t\t<p>Custom content</p>\n\t{/snippet}\n</OptionalSnippet>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definitions for 'on' Function in Svelte 5\nDESCRIPTION: Provides TypeScript definitions for the 'on' function from 'svelte/events' in Svelte 5. This function attaches event handlers to various types of elements and returns a cleanup function, ensuring correct handler order.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { on } from 'svelte/events';\n\n// Attach an event to `window`\nfunction on<Type extends keyof WindowEventMap>(\n    window: Window,\n    type: Type,\n    handler: (this: Window, event: WindowEventMap[Type]) => any,\n    options?: AddEventListenerOptions\n): () => void;\n\n// Attach an event to `document`\nfunction on<Type extends keyof DocumentEventMap>(\n    document: Document,\n    type: Type,\n    handler: (this: Document, event: DocumentEventMap[Type]) => any,\n    options?: AddEventListenerOptions\n): () => void;\n\n// Attach an event to an `HTMLElement`\nfunction on<Element extends HTMLElement, Type extends keyof HTMLElementEventMap>(\n    element: Element,\n    type: Type,\n    handler: (this: Element, event: HTMLElementEventMap[Type]) => any,\n    options?: AddEventListenerOptions\n): () => void;\n\n// Attach an event to a `MediaQueryList`\nfunction on<Element extends MediaQueryList, Type extends keyof MediaQueryListEventMap>(\n    element: Element,\n    type: Type,\n    handler: (this: Element, event: MediaQueryListEventMap[Type]) => any,\n    options?: AddEventListenerOptions\n): () => void;\n\n// Generic event attachment\nfunction on(\n    element: EventTarget,\n    type: string,\n    handler: EventListener,\n    options?: AddEventListenerOptions\n): () => void;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering in Svelte 5\nDESCRIPTION: Demonstrates the new approach to server-side rendering in Svelte 5. Instead of using a render() method in components, it uses the render() function from svelte/server. The example also shows how to include CSS in the rendered output.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst { html, head } = render(App, { props: { message: 'hello' }});\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Snippets\nDESCRIPTION: Shows how to export snippets from one component and import them in another, enabling snippet reuse across components.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- math.svelte -->\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n\n<!-- App.svelte -->\n<script>\n\timport { add } from \"./math.svelte\";\n</script>\n\n{@render add(2, 3)}\n```\n\n----------------------------------------\n\nTITLE: Exporting Snippets in Svelte 5 Modules\nDESCRIPTION: Shows how to export snippets for use in other components. Using script module and export syntax, snippets can be imported and used throughout an application.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- math.svelte -->\n<script module>\n\texport { add };\n</script>\n\n{#snippet add(a, b)}\n\t{a} + {b} = {a + b}\n{/snippet}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script>\n\timport { add } from \"./math.svelte\";\n</script>\n\n{@render add(2, 3)}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Element Types in TypeScript for Svelte\nDESCRIPTION: Demonstrates how to extend built-in DOM types for custom attributes and events in Svelte. This allows TypeScript to recognize custom elements and their props, avoiding errors when using experimental or third-party web components.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace svelteHTML {\n\tinterface IntrinsicElements {\n\t\t'custom-element': { customProp: string; 'on:customEvent': (e: CustomEvent<any>) => void };\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Spreading Props Including Event Handlers in Svelte 5\nDESCRIPTION: Demonstrates how to spread props in Svelte 5, which automatically applies all attributes including event handlers. This technique is useful for creating reusable components that can accept various props and events.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet props = $props();\n</script>\n\n<button {...props}>\n\tclick me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Setup in Svelte 5 Components\nDESCRIPTION: Demonstrates the basic TypeScript setup in a Svelte component by adding the lang=\"ts\" attribute to the script tag. Shows how to add type annotations to variables and functions.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_33\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n\n<button onclick={() => greet(name)}>Greet</button>\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props in Svelte 5 with TypeScript\nDESCRIPTION: Shows how to type component props in Svelte 5 using TypeScript interfaces. The example demonstrates creating a Props interface and using it to type the props received from $props().\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_34\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Greeting.svelte -->\n<script lang=\"ts\">\n\tinterface Props {\n\t\tname: string;\n\t}\n\n\tlet { name }: Props = $props();\n</script>\n\n<p>Hello, {name}!</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script lang=\"ts\">\n\timport Greeting from './Greeting.svelte';\n</script>\n\n<Greeting name=\"Alice\" />\n```\n\n----------------------------------------\n\nTITLE: Optional Getter/Setter Binding in Svelte 5\nDESCRIPTION: Demonstrates how to bind an input to a reactive value with a custom getter/setter. This example uses the new bind: syntax to apply automatic trimming to the input value.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet name = $state('Alice');\n</script>\n\n<input bind:value={\n\t() => name,\n\t(v) => name = v.trimStart()\n} />\n\n<p>Hello, {name}!</p>\n```\n\n----------------------------------------\n\nTITLE: Generic Component Props in Svelte\nDESCRIPTION: Demonstrates the use of generic props for flexible typing in Svelte components. It shows how to define a generic type for items and use it in the component's interface.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"Item\">\n\tinterface Props {\n\t\titems: Item[];\n\t\tselect: (item: Item) => void;\n\t}\n\n\tlet { items, select }: Props = $props();\n</script>\n\n{#each items as item}\n\t<button onclick={() => select(item)}>{item}</button>\n{/each}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport List from './List.svelte';\n\n\tconst names = ['Alice', 'Bob', 'Charlie'];\n\n\tfunction handleSelect(name: string) {\n\t\tconsole.log('Selected:', name);\n\t}\n</script>\n\n<List items={names} select={handleSelect} />\n```\n\n----------------------------------------\n\nTITLE: Typing Wrapper Components in Svelte\nDESCRIPTION: Demonstrates how to type wrapper components that extend native HTML elements in Svelte. It uses the HTMLButtonAttributes type to ensure support for all standard button attributes.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>{@render children?.()}</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Button from './Button.svelte';\n</script>\n\n<Button onclick={() => alert('Clicked!')}>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Props in Svelte 5\nDESCRIPTION: Illustrates how to provide fallback values for props when they are not passed from the parent component. This ensures that the component always has a valid value to work with.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { adjective = 'happy' } = $props();\n</script>\n\n<p>This component is {adjective}</p>\n```\n\n----------------------------------------\n\nTITLE: Typing Wrapper Components in Svelte 5\nDESCRIPTION: Demonstrates how to type wrapper components that extend native HTML elements. Uses the HTMLButtonAttributes type from svelte/elements to ensure proper typing of all button attributes.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_37\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Button.svelte -->\n<script lang=\"ts\">\n\timport type { HTMLButtonAttributes } from 'svelte/elements';\n\n\tlet { children, ...rest }: HTMLButtonAttributes = $props();\n</script>\n\n<button {...rest}>{@render children?.()}</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script lang=\"ts\">\n\timport Button from './Button.svelte';\n</script>\n\n<Button onclick={() => alert('Clicked!')}>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Elements with TypeScript in Svelte\nDESCRIPTION: Shows how to use a custom element with TypeScript in a Svelte component. The example includes handling a custom event and passing a custom prop to the element.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_39\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tfunction handleEvent(e: CustomEvent) {\n\t\tconsole.log('Custom event:', e.detail);\n\t}\n</script>\n\n<custom-element customProp=\"Hello\" on:customEvent={handleEvent}></custom-element>\n```\n\n----------------------------------------\n\nTITLE: Using $bindable with Multiple Props\nDESCRIPTION: Demonstrates how to use multiple $bindable props in a single component. Both the value and disabled states can be bound to parent component variables, enabling complex dynamic behavior.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { value = $bindable('default text'), disabled = $bindable(false), ...props } = $props();\n</script>\n\n<input bind:value={value} bind:disabled={disabled} {...props} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport FancyInput from './FancyInput.svelte';\n\n\tlet message = $state('Editable text');\n\tlet isDisabled = $state(false);\n</script>\n\n<FancyInput bind:value={message} bind:disabled={isDisabled} />\n<button onclick={() => isDisabled = !isDisabled}>\n\tToggle Disabled\n</button>\n```\n\n----------------------------------------\n\nTITLE: Renaming Props in Svelte 5\nDESCRIPTION: Demonstrates how to rename props when destructuring, which is useful for avoiding conflicts with reserved keywords or for improving code clarity. This example also includes a default fallback value.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { super: trouper = 'lights are gonna find me' } = $props();\n</script>\n\n<p>Song lyric: {trouper}</p>\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props in Svelte 5\nDESCRIPTION: Shows how to destructure props for cleaner and more concise code in Svelte 5 components. This technique allows direct access to prop values without using the props object.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { adjective } = $props();\n</script>\n\n<p>This component is {adjective}</p>\n```\n\n----------------------------------------\n\nTITLE: Using Rest Props in Svelte 5\nDESCRIPTION: Shows how to collect all remaining props using the rest syntax. This is useful for passing arbitrary props to child components or when working with components that accept a variety of props.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { a, b, c, ...others } = $props();\n</script>\n\n<p>a: {a}, b: {b}, c: {c}</p>\n<p>Other props: {JSON.stringify(others)}</p>\n```\n\n----------------------------------------\n\nTITLE: Debugging with $inspect in Svelte 5\nDESCRIPTION: Demonstrates various ways to use $inspect for debugging in Svelte 5, including basic logging, custom logging functions, and tracing reactive state changes and effects.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message);\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tconsole.log(`Count updated to: ${count}`);\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet message = $state('Hello');\n\n\t$inspect(message).with(console.trace);\n</script>\n\n<input bind:value={message} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { doSomeWork } from './utils';\n\n\t$effect(() => {\n\t\t$inspect.trace();\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $inspect for Debugging in Svelte 5\nDESCRIPTION: Demonstrates how $inspect logs changes to reactive state in development mode. This is useful for debugging and understanding how your component's state changes over time.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet message = $state('hello');\n\n\t$inspect(count, message); // Logs `count` and `message` whenever they change\n</script>\n\n<button onclick={() => count++}>Increment</button>\n<input bind:value={message} />\n```\n\n----------------------------------------\n\nTITLE: Updating Props (Ephemeral State) in Svelte 5\nDESCRIPTION: Demonstrates how prop values update when the parent changes, but can be overridden temporarily in the child component. This is useful for creating ephemeral state that doesn't persist between re-renders.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Child from './Child.svelte';\n\n\tlet count = $state(0);\n</script>\n\n<button onclick={() => count += 1}>\n\tclicks (parent): {count}\n</button>\n\n<Child {count} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => count += 1}>\n\tclicks (child): {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Custom Logging with $inspect.with in Svelte 5\nDESCRIPTION: Shows how $inspect(...).with replaces default logging with a custom function. This allows for more fine-grained control over how state changes are logged or processed during development.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\n\t$inspect(count).with((type, count) => {\n\t\tif (type === 'update') {\n\t\t\tconsole.log(`Count updated to: ${count}`);\n\t\t}\n\t});\n</script>\n\n<button onclick={() => count++}>Increment</button>\n```\n\n----------------------------------------\n\nTITLE: Understanding Dependencies in Derived State with Svelte 5\nDESCRIPTION: Demonstrates how derived state tracks dependencies and updates accordingly. The isEven value automatically updates when count changes, showing how $derived tracks synchronously accessed state.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet isEven = $derived(count % 2 === 0);\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>{count} is {isEven ? 'Even' : 'Odd'}</p>\n```\n\n----------------------------------------\n\nTITLE: Advanced Prop Handling in Svelte 5\nDESCRIPTION: Shows advanced techniques for handling props in Svelte 5, including using rest props, updating props (ephemeral state), and dealing with object props.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { a, b, c, ...others } = $props();\n</script>\n\n<p>a: {a}, b: {b}, c: {c}</p>\n<p>Other props: {JSON.stringify(others)}</p>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { count } = $props();\n</script>\n\n<button onclick={() => count += 1}>\n\tclicks (child): {count}\n</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => object.count += 1}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Complex Derived State with $derived.by in Svelte 5\nDESCRIPTION: Shows how $derived.by allows more complex calculations for derived state. The total is automatically recalculated when the numbers array changes, demonstrating derived state with multiple steps.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet numbers = $state([1, 2, 3]);\n\n\t// `total` is automatically recalculated when `numbers` change\n\tlet total = $derived.by(() => {\n\t\tlet sum = 0;\n\t\tfor (const n of numbers) {\n\t\t\tsum += n;\n\t\t}\n\t\treturn sum;\n\t});\n</script>\n\n<button onclick={() => numbers.push(numbers.length + 1)}>\n\tAdd Number\n</button>\n\n<p>{numbers.join(' + ')} = {total}</p>\n```\n\n----------------------------------------\n\nTITLE: Dependency Tracking in $effect\nDESCRIPTION: Demonstrates how $effect only tracks dependencies accessed synchronously. In this example, size is accessed asynchronously inside setTimeout, so it's not tracked as a dependency.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet size = $state(50);\n\tlet color = $state('#ff3e00');\n\tlet canvas;\n\n\t$effect(() => {\n\t\tconst context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\n\t\t// This effect re-runs when `color` changes but not when `size` changes\n\t\tcontext.fillStyle = color;\n\n\t\tsetTimeout(() => {\n\t\t\tcontext.fillRect(0, 0, size, size);\n\t\t}, 0);\n\t});\n</script>\n\n<canvas bind:this={canvas} width=\"100\" height=\"100\" />\n\n<input type=\"color\" bind:value={color} />\n<input type=\"range\" bind:value={size} min=\"10\" max=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events from Custom Elements with $host in Svelte 5\nDESCRIPTION: Shows how to use $host inside a custom element to dispatch events. This technique is useful for creating reusable components that can communicate with their parent elements through custom events.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:options customElement=\"my-stepper\" />\n\n<script lang=\"ts\">\n\tfunction dispatch(type) {\n\t\t$host().dispatchEvent(new CustomEvent(type)); \n\t\t// $host() gives access to the custom element itself.\n\t\t// Dispatches 'increment' or 'decrement' events.\n\t}\n</script>\n\n<button onclick={() => dispatch('decrement')}>decrement</button>\n<button onclick={() => dispatch('increment')}>increment</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport './Stepper.svelte';\n\n\tlet count = $state(0); // State variable to track count\n</script>\n\n<my-stepper\n\tondecrement={() => count -= 1} \n\tonincrement={() => count += 1} \n></my-stepper>\n\n<p>count: {count}</p> <!-- Displays updated count -->\n```\n\n----------------------------------------\n\nTITLE: Using $state.raw in Svelte 5\nDESCRIPTION: Demonstrates when to use $state.raw to avoid deep reactivity. With raw state, you must replace the entire object to trigger updates rather than modifying properties directly.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet person = $state.raw({\n\t\tname: 'Alice',\n\t\tage: 30\n\t});\n\n\tfunction updatePerson() {\n\t\t// This won't work because `person` is raw (not reactive)\n\t\tperson.age += 1; \n\n\t\t// Instead, we must reassign the whole object\n\t\tperson = { ...person, age: person.age + 1 };\n\t}\n</script>\n\n<p>{person.name} is {person.age} years old.</p>\n<button onclick={updatePerson}>Increase Age</button>\n```\n\n----------------------------------------\n\nTITLE: Using $state.raw in Svelte 5\nDESCRIPTION: Shows when to use $state.raw to avoid deep reactivity. The person object is created with $state.raw, requiring full object reassignment for updates to trigger reactivity.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet person = $state.raw({\n\t\tname: 'Alice',\n\t\tage: 30\n\t});\n\n\tfunction updatePerson() {\n\t\t// This won't work because `person` is raw (not reactive)\n\t\tperson.age += 1; \n\n\t\t// Instead, we must reassign the whole object\n\t\tperson = { ...person, age: person.age + 1 };\n\t}\n</script>\n\n<p>{person.name} is {person.age} years old.</p>\n<button onclick={updatePerson}>Increase Age</button>\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Handlers on the Same Element in Svelte 5\nDESCRIPTION: Illustrates how to handle multiple event handlers on the same element in Svelte 5 by manually combining the handlers. This approach replaces the multiple 'on:' directives used in previous versions of Svelte.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction one(event) {\n\t\tconsole.log('First handler', event);\n\t}\n\n\tfunction two(event) {\n\t\tconsole.log('Second handler', event);\n\t}\n</script>\n\n<button\n\tonclick={(e) => {\n\t\tone(e);\n\t\ttwo(e);\n\t}}\n>\n\t...\n</button>\n```\n\n----------------------------------------\n\nTITLE: Passing Reactive State to Functions in Svelte 5\nDESCRIPTION: Demonstrates passing reactive state into a function using getter functions to maintain reactivity. This ensures the function always retrieves the latest values when called.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction add(getA, getB) {\n\t\treturn () => getA() + getB();\n\t}\n\n\tlet a = $state(1);\n\tlet b = $state(2);\n\tlet total = add(() => a, () => b); // Pass getters to maintain reactivity\n</script>\n\n<p>{a} + {b} = {total()}</p>\n<button onclick={() => a++}>Increment A</button>\n<button onclick={() => b++}>Increment B</button>\n```\n\n----------------------------------------\n\nTITLE: Taking Snapshots of Reactive State in Svelte 5\nDESCRIPTION: Demonstrates how to extract a non-proxied snapshot of a reactive object using $state.snapshot. This creates a plain object that can be safely passed to external libraries.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction logSnapshot() {\n\t\tconsole.log($state.snapshot(counter)); // Logs a plain object, not a Proxy\n\t}\n</script>\n\n<p>Count: {counter.count}</p>\n<button onclick={() => counter.count++}>Increment</button>\n<button onclick={logSnapshot}>Log Snapshot</button>\n```\n\n----------------------------------------\n\nTITLE: Event Handling Shorthand in Svelte 5\nDESCRIPTION: Shows how to use the shorthand syntax for event handling in Svelte 5, where a function with the same name as the event property can be passed using the shorthand syntax.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let count = $state(0);\n\n  function onclick() {\n    count++;\n  }\n</script>\n\n<button {onclick}>\n  clicks: {count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Taking Snapshots of Reactive State in Svelte 5\nDESCRIPTION: Demonstrates how to extract a non-proxied snapshot of a reactive object using $state.snapshot. This is useful for logging or passing data to external libraries that don't support proxies.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet counter = $state({ count: 0 });\n\n\tfunction logSnapshot() {\n\t\tconsole.log($state.snapshot(counter)); // Logs a plain object, not a Proxy\n\t}\n</script>\n\n<p>Count: {counter.count}</p>\n<button onclick={() => counter.count++}>Increment</button>\n<button onclick={logSnapshot}>Log Snapshot</button>\n```\n\n----------------------------------------\n\nTITLE: Passing Reactive State to Functions in Svelte 5\nDESCRIPTION: Shows how to pass reactive state into a function while maintaining reactivity. The add function uses getter functions to ensure it always retrieves the latest values of a and b.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tfunction add(getA, getB) {\n\t\treturn () => getA() + getB();\n\t}\n\n\tlet a = $state(1);\n\tlet b = $state(2);\n\tlet total = add(() => a, () => b); // Pass getters to maintain reactivity\n</script>\n\n<p>{a} + {b} = {total()}</p>\n<button onclick={() => a++}>Increment A</button>\n<button onclick={() => b++}>Increment B</button>\n```\n\n----------------------------------------\n\nTITLE: Typing Custom Events and Attributes in Svelte\nDESCRIPTION: Demonstrates how to extend built-in DOM types for custom attributes and events in Svelte. It shows how to declare custom element types and use them in a component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace svelteHTML {\n\tinterface IntrinsicElements {\n\t\t'custom-element': { customProp: string; 'on:customEvent': (e: CustomEvent<any>) => void };\n\t}\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tfunction handleEvent(e: CustomEvent) {\n\t\tconsole.log('Custom event:', e.detail);\n\t}\n</script>\n\n<custom-element customProp=\"Hello\" on:customEvent={handleEvent}></custom-element>\n```\n\n----------------------------------------\n\nTITLE: Optional Getter/Setter Binding in Svelte 5\nDESCRIPTION: Shows how to bind an input to a reactive value with a custom getter/setter. This allows for automatic validation or transformation when the input value changes.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet name = $state('Alice');\n</script>\n\n<input bind:value={\n\t() => name,\n\t(v) => name = v.trimStart()\n} />\n\n<p>Hello, {name}!</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Content Placeholders with Snippets\nDESCRIPTION: Demonstrates using multiple named snippets as a replacement for named slots, creating a layout component with header, main, and footer sections.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Layout.svelte -->\n<script>\n\tlet { header, main, footer } = $props();\n</script>\n\n<header>\n\t{@render header?.()}\n</header>\n\n<main>\n\t{@render main?.()}\n</main>\n\n<footer>\n\t{@render footer?.()}\n</footer>\n\n<!-- App.svelte -->\n<script>\n\timport Layout from \"./Layout.svelte\";\n</script>\n\n<Layout>\n\t{#snippet header()}\n\t\t<h1>My Website</h1>\n\t{/snippet}\n\t\n\t{#snippet main()}\n\t\t<p>Welcome to my website!</p>\n\t{/snippet}\n\t\n\t{#snippet footer()}\n\t\t<p>Â© 2023 My Website</p>\n\t{/snippet}\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Updates with $derived in Svelte 5\nDESCRIPTION: Demonstrates how Svelte skips updates when derived values remain the same, even if their dependencies change. Updates only occur when the derived value actually changes.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>Is count large? {large}</p>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Unnecessary Updates in Derived State with Svelte 5\nDESCRIPTION: Shows how Svelte skips updates when derived values remain the same. The large value only updates when count crosses the threshold of 10, demonstrating Svelte's optimization for derived state updates.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count = $state(0);\n\tlet large = $derived(count > 10);\n</script>\n\n<button onclick={() => count++}>\n\tIncrement\n</button>\n\n<p>Is count large? {large}</p>\n```\n\n----------------------------------------\n\nTITLE: Using Teardown Functions in $effect\nDESCRIPTION: Shows how to return a cleanup function inside $effect to clear intervals. The cleanup function runs before the effect re-runs or when the component is destroyed.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet count = $state(0);\n\tlet milliseconds = $state(1000);\n\n\t$effect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, milliseconds);\n\n\t\t// Cleanup function runs before effect re-runs or on component destroy\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t});\n</script>\n\n<h1>{count}</h1>\n\n<button onclick={() => (milliseconds *= 2)}>Slower</button>\n<button onclick={() => (milliseconds /= 2)}>Faster</button>\n```\n\n----------------------------------------\n\nTITLE: Component Mounting and Events in Svelte 5\nDESCRIPTION: Demonstrates how to mount a Svelte 5 component programmatically and set up event handlers. This replaces the class-based component instantiation from Svelte 4.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'svelte';\nimport App from './App.svelte';\n\nconst app = mount(App, { \n  target: document.getElementById(\"app\"),\n  events: { event: callback } // Replacement for $on\n});\n\nconst props = $state({ foo: 'bar' }); // Replacement for $set\nprops.foo = 'baz';\n\nimport { unmount } from 'svelte';\nunmount(app); // Replacement for $destroy\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Component API Compatibility in Svelte 5\nDESCRIPTION: Shows how to enable automatic backwards compatibility for Svelte 4 component API in Svelte 5 using the compatibility option in svelte.config.js.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  compilerOptions: {\n    compatibility: {\n      componentApi: 4\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering in Svelte 5\nDESCRIPTION: Demonstrates how to perform server-side rendering in Svelte 5 using the render function from svelte/server. This replaces the render method used in Svelte 4.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'svelte/server';\nimport App from './App.svelte';\n\nconst { html, head } = render(App, { props: { message: 'hello' }});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Components in Svelte 5\nDESCRIPTION: Demonstrates how to use dynamic components in Svelte 5, which no longer require the svelte:component syntax. Components can now be directly reassigned and will update dynamically.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import A from './A.svelte';\n  import B from './B.svelte';\n  let Thing = $state();\n</script>\n\n<select bind:value={Thing}>\n  <option value={A}>A</option>\n  <option value={B}>B</option>\n</select>\n\n<!-- Both are now equivalent -->\n<Thing />\n<svelte:component this={Thing} />\n```\n\n----------------------------------------\n\nTITLE: Generating Unique IDs in Svelte 5 Components\nDESCRIPTION: Demonstrates how to generate unique component-scoped IDs using $props.id() in Svelte 5. This is useful for accessibility and ensuring consistency between server and client during hydration.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tconst uid = $props.id();\n</script>\n\n<form>\n\t<label for=\"{uid}-firstname\">First Name: </label>\n\t<input id=\"{uid}-firstname\" type=\"text\" />\n\n\t<label for=\"{uid}-lastname\">Last Name: </label>\n\t<input id=\"{uid}-lastname\" type=\"text\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Object Prop Mutation in Svelte 5\nDESCRIPTION: Illustrates how object mutations do not work if props are plain objects. This is important for understanding the limitations of prop reactivity and avoiding unintended side effects.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Child from './Child.svelte';\n</script>\n\n<Child object={{ count: 0 }} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => object.count += 1}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Mutating a Reactive Prop (Warning) in Svelte 5\nDESCRIPTION: Shows the warning that occurs when mutating a reactive state prop. This example highlights the importance of understanding prop ownership and the potential issues with mutating state that belongs to the parent component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Child from './Child.svelte';\n\n\tlet object = $state({ count: 0 });\n</script>\n\n<Child {object} />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { object } = $props();\n</script>\n\n<button onclick={() => object.count += 1}>\n\tclicks: {object.count}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Snippets in Svelte 5\nDESCRIPTION: Shows how a snippet can reference itself to create recursive structures. This example implements a countdown that recursively calls itself with decremented values until reaching zero, then renders a rocket.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet blastoff()}\n\t<span>ðŸš€</span>\n{/snippet}\n\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{@render countdown(5)}\n```\n\n----------------------------------------\n\nTITLE: Tracing Effects with $inspect.trace in Svelte 5\nDESCRIPTION: Demonstrates how $inspect.trace() tracks function re-execution due to reactive state changes. This feature is useful for understanding which state changes trigger specific effects in your component.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_runes.txt#2025-04-21_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { doSomeWork } from './utils';\n\n\t$effect(() => {\n\t\t$inspect.trace(); // Logs which state changes caused this effect to run\n\t\tdoSomeWork();\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Snippet Props in Svelte 5\nDESCRIPTION: Demonstrates how to handle optional snippet props using conditional rendering. This pattern allows components to provide fallback content when a snippet is not provided.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- OptionalSnippet.svelte -->\n<script>\n\tlet { children } = $props();\n</script>\n\n{#if children}\n\t{@render children()}\n{:else}\n\t<p>Fallback content</p>\n{/if}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<OptionalSnippet />\n<OptionalSnippet>\n\t{#snippet children()}\n\t\t<p>Custom content</p>\n\t{/snippet}\n</OptionalSnippet>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Snippets Instead of Named Slots\nDESCRIPTION: Demonstrates how to replace named slots with multiple snippet props. The Layout component accepts header, main, and footer snippets that can be conditionally rendered using optional chaining.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_full_context.txt#2025-04-21_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Layout.svelte -->\n<script>\n\tlet { header, main, footer } = $props();\n</script>\n\n<header>\n\t{@render header?.()}\n</header>\n\n<main>\n\t{@render main?.()}\n</main>\n\n<footer>\n\t{@render footer?.()}\n</footer>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- App.svelte -->\n<script>\n\timport Layout from \"./Layout.svelte\";\n</script>\n\n<Layout>\n\t{#snippet header()}\n\t\t<h1>My Website</h1>\n\t{/snippet}\n\t\n\t{#snippet main()}\n\t\t<p>Welcome to my website!</p>\n\t{/snippet}\n\t\n\t{#snippet footer()}\n\t\t<p>Â© 2023 My Website</p>\n\t{/snippet}\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Renaming and Forwarding Props in Svelte 5\nDESCRIPTION: Shows how to rename props and forward the rest using object destructuring with the $props rune. This example renames the class prop to klass to avoid JavaScript reserved keyword conflicts and spreads the remaining props to a button element.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte_4-5_migration_guide.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { class: klass, ...rest } = $props();\n</script>\n<button class={klass} {...rest}>click me</button>\n```\n\n----------------------------------------\n\nTITLE: Recursive Snippets for Countdown\nDESCRIPTION: Shows how to implement recursive snippets for creating countdown functionality, demonstrating self-referential snippet usage.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet blastoff()}\n\t<span>ðŸš€</span>\n{/snippet}\n\n{#snippet countdown(n)}\n\t{#if n > 0}\n\t\t<span>{n}...</span>\n\t\t{@render countdown(n - 1)}\n\t{:else}\n\t\t{@render blastoff()}\n\t{/if}\n{/snippet}\n\n{@render countdown(5)}\n```\n\n----------------------------------------\n\nTITLE: Basic Image List with Snippets in Svelte\nDESCRIPTION: Demonstrates creating a reusable figure snippet for rendering images with optional links. Shows how to avoid markup duplication using snippets.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_snippets.txt#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tlet images = [\n\t\t{ src: \"image1.jpg\", caption: \"Image 1\", href: \"https://example.com\" },\n\t\t{ src: \"image2.jpg\", caption: \"Image 2\" }\n\t];\n</script>\n\n{#snippet figure(image)}\n\t<figure>\n\t\t<img src={image.src} alt={image.caption} />\n\t\t<figcaption>{image.caption}</figcaption>\n\t</figure>\n{/snippet}\n\n{#each images as image}\n\t{#if image.href}\n\t\t<a href={image.href}>\n\t\t\t{@render figure(image)}\n\t\t</a>\n\t{:else}\n\t\t{@render figure(image)}\n\t{/if}\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Typing $state in Svelte\nDESCRIPTION: Shows how to type state variables in Svelte using TypeScript. It demonstrates the use of $state to create a typed reactive variable.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_typescript.txt#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet count: number = $state(0);\n\n\tfunction increment() {\n\t\tcount += 1;\n\t}\n</script>\n\n<button onclick={increment}>Count: {count}</button>\n```\n\n----------------------------------------\n\nTITLE: Component Event Callbacks in Svelte 5\nDESCRIPTION: Illustrates how to handle component events in Svelte 5 using callback props instead of createEventDispatcher(). It includes both the child component (Pump.svelte) and the parent component (App.svelte) to show the complete interaction.\nSOURCE: https://github.com/martypara/svelte5-llm-compact/blob/main/svelte5_events.txt#2025-04-21_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet { inflate, deflate } = $props(); // Props passed from parent\n\tlet power = $state(5);\n</script>\n\n<button onclick={() => inflate(power)}>inflate</button>\n<button onclick={() => deflate(power)}>deflate</button>\n<button onclick={() => power--}>-</button>\nPump power: {power}\n<button onclick={() => power++}>+</button>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Pump from './Pump.svelte';\n\n\tlet size = $state(15);\n\tlet burst = $state(false);\n\n\tfunction inflateHandler(power) {\n\t\tsize += power;\n\t\tif (size > 75) burst = true;\n\t}\n\n\tfunction deflateHandler(power) {\n\t\tif (size > 0) size -= power;\n\t}\n\n\tfunction reset() {\n\t\tsize = 15;\n\t\tburst = false;\n\t}\n</script>\n\n<Pump inflate={inflateHandler} deflate={deflateHandler} />\n\n{#if burst}\n\t<button onclick={reset}>new balloon</button>\n\t<span class=\"boom\">ðŸ’¥</span>\n{:else}\n\t<span class=\"balloon\" style=\"scale: {0.01 * size}\">\n\t\tðŸŽˆ\n\t</span>\n{/if}\n```"
  }
]