[
  {
    "owner": "sidebase",
    "repo": "nuxt-auth",
    "content": "TITLE: Combining Global and Route-Specific Auth Cache Rules in Nuxt\nDESCRIPTION: This snippet demonstrates how to combine global and route-specific authentication cache rules. It shows how to disable server-side authentication globally but selectively enable it for specific routes like profile pages that need authentication data.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/caching.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    disableServerSideAuth: true,\n  },\n  routeRules: {\n    // Server side auth is disabled on this page because of global setting\n    '/': {\n      swr: 86400000,\n    },\n    // Server side auth is enabled on this page - route rules takes priority.\n    '/profile': {\n      auth: {\n        disableServerSideAuth: false,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Callbacks in NuxtAuthHandler\nDESCRIPTION: Demonstrates how to use callbacks to modify the authentication flow. Includes signIn, redirect, session, and jwt callbacks that can be used to customize the authentication behavior.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/nuxt-auth-handler.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n  callbacks: {\n    /* on before signin */\n    async signIn({ user, account, profile, email, credentials }) {\n      return true\n    },\n    /* on redirect to another url */\n    async redirect({ url, baseUrl }) {\n      return baseUrl\n    },\n    /* on session retrival */\n    async session({ session, user, token }) {\n      return session\n    },\n    /* on JWT token creation or mutation */\n    async jwt({ token, user, account, profile, isNewUser }) {\n      return token\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Server Middleware in Nuxt-Auth\nDESCRIPTION: Shows how to implement server middleware that protects multiple routes at once by checking session status and throwing an error for unauthenticated requests.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/session-access.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/server/middleware/auth.ts\nimport { getServerSession } from '#auth'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    throw createError({\n      statusMessage: 'Unauthenticated',\n      statusCode: 403\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complete NuxtAuthHandler Implementation with GitHub Provider\nDESCRIPTION: Full implementation example of a NuxtAuthHandler with GitHub OAuth provider. Demonstrates proper setup of the auth secret using runtime configuration and provider configuration with client credentials.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// file: ~/server/api/auth/[...].ts\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  secret: useRuntimeConfig().authSecret,\n  providers: [\n    // @ts-expect-error Use .default here for it to work during SSR.\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Protecting an API Endpoint in Nuxt-Auth\nDESCRIPTION: Demonstrates how to protect an API endpoint by checking the session status and returning different responses based on authentication state.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/session-access.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/server/api/protected.get.ts\nimport { getServerSession } from '#auth'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n  if (!session) {\n    return { status: 'unauthenticated!' }\n  }\n  return { status: 'authenticated!' }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtAuthHandler Secret with Runtime Config\nDESCRIPTION: This example demonstrates how to properly configure the secret for NuxtAuthHandler using Nuxt's runtime configuration. It shows the handler setup in the API route, the runtime config in nuxt.config.ts, and environment variable setup.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/nuxt-auth-handler.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  secret: useRuntimeConfig().authSecret,\n  // your authentication configuration here!\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    authSecret: '123',\n  }\n})\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNUXT_AUTH_SECRET=\"YOUR-SUPER-SECURE-SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt-Auth with AuthJS Provider\nDESCRIPTION: Configuration code for nuxt.config.ts to set up @sidebase/nuxt-auth with the AuthJS provider. Includes options for trustHost, defaultProvider, and callback URL handling.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    provider: {\n      type: 'authjs',\n      trustHost: false,\n      defaultProvider: 'github',\n      addDefaultCallbackUrl: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtAuthHandler with Directus JWT Authentication in TypeScript\nDESCRIPTION: This code snippet sets up NuxtAuthHandler to use Directus for authentication. It includes a token refresh function, CredentialsProvider configuration, and custom callbacks for JWT and session management. The code handles user login, token refresh, and role-based access control.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/directus.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { NuxtAuthHandler } from '#auth'\n\n/**\n * Takes a token, and returns a new token with updated\n * `accessToken` and `accessTokenExpires`. If an error occurs,\n * returns the old token and an error property\n */\nasync function refreshAccessToken(refreshToken: {\n  accessToken: string\n  accessTokenExpires: string\n  refreshToken: string\n}) {\n  try {\n    console.warn('trying to post to refresh token')\n\n    const refreshedTokens = await $fetch<{\n      data: {\n        access_token: string\n        expires: number\n        refresh_token: string\n      }\n    } | null>('https://domain.directus.app/auth/refresh', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: {\n        refresh_token: refreshToken.refreshToken,\n        mode: 'json',\n      },\n    })\n\n    if (!refreshedTokens || !refreshedTokens.data) {\n      console.warn('No refreshed tokens')\n      throw refreshedTokens\n    }\n\n    console.warn('Refreshed tokens successfully')\n    return {\n      ...refreshToken,\n      accessToken: refreshedTokens.data.access_token,\n      accessTokenExpires: Date.now() + refreshedTokens.data.expires,\n      refreshToken: refreshedTokens.data.refresh_token,\n    }\n  }\n  catch (error) {\n    console.warn('Error refreshing token', error)\n    return {\n      ...refreshToken,\n      error: 'RefreshAccessTokenError',\n    }\n  }\n}\n\nexport default NuxtAuthHandler({\n  // secret needed to run nuxt-auth in production mode (used to encrypt data)\n  secret: process.env.NUXT_SECRET,\n\n  providers: [\n    // @ts-expect-error You need to use .default here for it to work during SSR. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      // You can pass any HTML attribute to the <input> tag through the object.\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials: any) {\n        // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // NOTE: THE BELOW LOGIC IS NOT SAFE OR PROPER FOR AUTHENTICATION!\n\n        try {\n          const payload = {\n            email: credentials.email,\n            password: credentials.password,\n          }\n\n          const userTokens = await $fetch<{\n            data: { access_token: string, expires: number, refresh_token: string }\n          } | null>('https://domain.directus.app/auth/login', {\n            method: 'POST',\n            body: payload,\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept-Language': 'en-US',\n            },\n          })\n\n          const userDetails = await $fetch<{\n            data: {\n              id: string\n              email: string\n              first_name: string\n              last_name: string\n              role: string\n              phone?: string\n              cvr?: string\n              company_name?: string\n            }\n          } | null>('https://domain.directus.app/users/me', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept-Language': 'en-US',\n              'Authorization': `Bearer ${userTokens?.data?.access_token}`,\n            },\n          })\n\n          if (!userTokens || !userTokens.data || !userDetails || !userDetails.data) {\n            throw createError({\n              statusCode: 500,\n              statusMessage: 'Next auth failed',\n            })\n          }\n\n          const user = {\n            id: userDetails.data.id,\n            email: userDetails.data.email,\n            firstName: userDetails.data.first_name,\n            lastName: userDetails.data.last_name,\n            role: userDetails.data.role,\n            phone: userDetails.data.phone,\n            cvr: userDetails.data.cvr,\n            companyName: userDetails.data.company_name,\n            accessToken: userTokens.data.access_token,\n            accessTokenExpires: Date.now() + userTokens.data.expires,\n            refreshToken: userTokens.data.refresh_token,\n          }\n\n          const allowedRoles = [\n            '53ed3a6a-b236-49aa-be72-f26e6e4857a0',\n            'd9b59a92-e85d-43e2-8062-7a1242a8fce6',\n          ]\n\n          // Only allow admins and sales\n          if (!allowedRoles.includes(user.role)) {\n            throw createError({\n              statusCode: 403,\n              statusMessage: 'Not allowed',\n            })\n          }\n\n          return user\n        }\n        catch (error) {\n          console.warn('Error logging in', error)\n\n          return null\n        }\n      },\n    }),\n  ],\n\n  session: {\n    strategy: 'jwt',\n  },\n\n  callbacks: {\n    async jwt({ token, user, account }) {\n      if (account && user) {\n        console.warn('JWT callback', { token, user, account })\n        return {\n          ...token,\n          ...user,\n        }\n      }\n\n      // Handle token refresh before it expires of 15 minutes\n      if (token.accessTokenExpires && Date.now() > token.accessTokenExpires) {\n        console.warn('Token is expired. Getting a new')\n        return refreshAccessToken(token)\n      }\n\n      return token\n    },\n    async session({ session, token }) {\n      session.user = {\n        ...session.user,\n        ...token,\n      }\n\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Auth Middleware with callWithNuxt Pattern\nDESCRIPTION: Implementation of a custom global authentication middleware using the callWithNuxt utility to avoid context issues when calling async composables in Nuxt.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// file: ~/middleware/authentication.global.ts\nimport { useNuxtApp } from '#imports'\nimport { callWithNuxt } from '#app/nuxt'\n\nexport default defineNuxtRouteMiddleware((to) => {\n  // It's important to do this as early as possible\n  const nuxtApp = useNuxtApp()\n\n  const { status, signIn } = useAuth()\n\n  // Return immediately if user is already authenticated\n  if (status.value === 'authenticated') {\n    return\n  }\n\n  /**\n   * We cannot directly call and/or return `signIn` here as `signIn` uses async composables under the hood, leading to \"nuxt instance undefined errors\", see https://github.com/nuxt/framework/issues/5740#issuecomment-1229197529\n   *\n   * So to avoid calling it, we call it via `callWithNuxt`.\n   */\n  await callWithNuxt(nuxtApp, signIn, [undefined, { callbackUrl: to.path }])\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-In Page with GitHub OAuth and Credentials in Vue\nDESCRIPTION: This snippet demonstrates how to create a custom sign-in page using NuxtAuth. It includes options for GitHub OAuth authentication and a credentials-based login with hardcoded demo credentials.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/custom-pages.md#2025-04-18_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Remember to disable the middleware protection from your page!\ndefinePageMeta({\n  auth: { unauthenticatedOnly: true, navigateAuthenticatedTo: '/' }\n})\n\nconst { signIn } = useAuth()\n\n/*\n * NOTE: Here we hard-coded username and password\n * On your own page this should probably be connected to two inputs\n */\nconst demoCredentials = { username: 'test', password: 'hunter2' }\n</script>\n\n<template>\n  <div>\n    <p>Sign-In Options:</p>\n    <button @click=\"signIn('github')\">\n      Github\n    </button>\n    <button @click=\"signIn('credentials', demoCredentials)\">\n      Username and Password\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Injecting Data into Session Callback\nDESCRIPTION: Shows how to access JWT token data and inject additional user information into the session. This callback is executed on every session request and can fetch additional data from an API.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/session-data.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n  callbacks: {\n    async session({ session, token }) {\n      // Token we injected into the JWT callback above.\n      const token = token.sessionToken\n\n      // Fetch data OR add previous data from the JWT callback.\n      const additionalUserData = await $fetch(`/api/session/${token}`)\n\n      // Return the modified session\n      return {\n        ...session,\n        user: {\n          name: additionalUserData.name,\n          avatar: additionalUserData.avatar,\n          role: additionalUserData.role\n        }\n      }\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying JWT Token in Nuxt Auth Handler\nDESCRIPTION: Demonstrates how to inject custom data into the JWT token during the authentication flow using the jwt callback. This example shows adding a sessionToken from the account data.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/session-data.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n  callbacks: {\n    jwt({ token, account, profile }) {\n      if (account) {\n        token.sessionToken = account.session_token\n      }\n      return token\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing NuxtAuthHandler with Strapi Credentials Provider\nDESCRIPTION: This snippet shows the implementation of the NuxtAuthHandler with a custom Strapi credentials provider. It includes the configuration for the CredentialsProvider and the authorize function that interacts with the Strapi API.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/strapi.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/server/api/auth/[...].ts\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { NuxtAuthHandler } from '#auth'\nconst config = useRuntimeConfig()\n\nexport default NuxtAuthHandler({\n  secret: config.NUXT_SECRET,\n  providers: [\n    // @ts-expect-error You need to use .default here for it to work during SSR. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      name: 'Credentials',\n      credentials: {}, // Object is required but can be left empty.\n      async authorize(credentials: any) {\n        const response = await $fetch(\n          `${config.STRAPI_BASE_URL}/auth/local/`,\n          {\n            method: 'POST',\n            body: JSON.stringify({\n              identifier: credentials.username,\n              password: credentials.password,\n            }),\n          }\n        )\n\n        if (response.user) {\n          const u = {\n            id: response.id,\n            name: response.user.username,\n            email: response.user.email,\n          }\n          return u\n        }\n        else {\n          return null\n        }\n      },\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Session in Nuxt-Auth\nDESCRIPTION: Demonstrates how to access the current user session on the server side using getServerSession, which avoids making an external HTTP request to the sessions endpoint.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/session-access.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerSession } from '#auth'\n\nexport default eventHandler(async (event) => {\n  const session = await getServerSession(event)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring dynamic baseURL for Vercel deployments with Nuxt-Auth\nDESCRIPTION: This snippet shows how to configure the Nuxt-Auth module to use Vercel's system environment variables for determining the baseURL dynamically. It checks if the VERCEL_URL environment variable is set and constructs the appropriate API endpoint URL accordingly.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/deployment/vercel.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    baseURL: process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}/api/auth` : undefined\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Events in NuxtAuthHandler\nDESCRIPTION: Shows how to implement event handlers for various authentication actions such as signIn, signOut, createUser, updateUser, linkAccount, and session. These can be used for logging or debugging the authentication flow.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/nuxt-auth-handler.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n  events: {\n    async signIn(message) { /* on successful sign in */ },\n    async signOut(message) { /* on signout */ },\n    async createUser(message) { /* user created */ },\n    async updateUser(message) { /* user updated - e.g. their email was verified */ },\n    async linkAccount(message) { /* account (e.g. GitHub) linked to a user */ },\n    async session(message) { /* session is active */ },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic baseURL for Netlify in Nuxt-Auth\nDESCRIPTION: This snippet demonstrates how to configure the Nuxt-Auth module to use Netlify's deployment URL. It checks if the application is running in a Netlify environment by looking for the DEPLOY_URL environment variable and sets the baseURL accordingly.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/deployment/netlify.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    baseURL: process.env.DEPLOY_URL ? `${DEPLOY_URL}/api/auth` : undefined\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Config for NuxtAuthHandler Secret\nDESCRIPTION: Example of using Nuxt's runtime configuration to set the auth secret dynamically, avoiding hardcoded secrets in the codebase.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption - NUXT_AUTH_SECRET required in production\n  secret: useRuntimeConfig().authSecret\n\n  // rest of your authentication configuration here!\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtAuth Module in nuxt.config.ts\nDESCRIPTION: Example of a fully configured NuxtAuth setup in the Nuxt configuration file. Shows how to enable the module, set the origin, configure the base URL, specify a provider, and set up session refresh options.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/configuration.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    isEnabled: true,\n    disableServerSideAuth: false,\n    originEnvKey: 'AUTH_ORIGIN',\n    baseURL: 'http://localhost:3000/api/auth',\n    provider: { /* your provider config */ },\n    sessionRefresh: {\n      enablePeriodically: true,\n      enableOnWindowFocus: true,\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Pages in NuxtAuthHandler\nDESCRIPTION: Demonstrates how to configure custom routes for authentication-related pages. This overrides the default authentication pages included with the module, allowing for customized sign-in, sign-out, error, verification, and new user pages.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/nuxt-auth-handler.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n  pages: {\n    signIn: '/auth/signIn',\n    signOut: '/auth/signOut',\n    error: '/auth/error',\n    verifyRequest: '/auth/verify-request',\n    newUser: '/auth/new-user'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider for NuxtAuthHandler\nDESCRIPTION: Example showing how to add a GitHub OAuth provider to NuxtAuthHandler. Note that next-auth@4 providers require an additional .default to work with Vite's SSR, which will be fixed in next-auth@5.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/nuxt-auth-handler.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport GithubProvider from 'next-auth/providers/github'\n\nexport default NuxtAuthHandler({\n  providers: [\n    // @ts-expect-error You need to use .default here for it to work during SSR. May be fixed via Vite at some point\n    GithubProvider.default({\n      // GitHub provider configuration\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Recommended NuxtAuth baseURL Configuration Setup\nDESCRIPTION: Demonstrates the recommended approach for configuring baseURL by using environment variables. This setup shows how to use the originEnvKey in nuxt.config.ts and set the AUTH_ORIGIN in an .env file.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/url-resolutions.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ... other configuration\n  auth: {\n    baseUrl: 'https://my-backend.com/api/auth', // [!code --]\n    // This is technically not needed as it is the default, but it's here for illustrative purposes\n    originEnvKey: 'AUTH_ORIGIN', // [!code ++]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Page-Specific Cache Rules in Nuxt with Auth Module\nDESCRIPTION: This snippet demonstrates how to configure route-specific caching rules while using the Nuxt-Auth module. It disables server-side authentication for specific cached routes while maintaining the baseURL configuration for server-side provider methods.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/caching.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    // Optional - Needed for getProviders() method to work server-side\n    baseURL: 'http://localhost:3000',\n  },\n  routeRules: {\n    '/': {\n      swr: 86400000,\n      auth: {\n        disableServerSideAuth: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub OAuth Provider to NuxtAuthHandler\nDESCRIPTION: Configuring the NuxtAuthHandler with a GitHub OAuth provider. Includes setting a secret for JWT encryption and configuring the GitHub provider with client credentials.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption\n  secret: 'your-secret-here',\n  providers: [\n    // @ts-expect-error Use .default here for it to work during SSR.\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for RuntimeConfig in NuxtAuth\nDESCRIPTION: Example showing how to properly configure NuxtAuth to use NUXT_ prefixed environment variables with runtimeConfig. This ensures Nuxt will acknowledge your environment variables for authentication origin settings.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/configuration.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    originEnvKey: 'NUXT_YOUR_ORIGIN'\n  },\n  runtimeConfig: {\n    yourOrigin: ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fully Specified URLs in NuxtAuth Endpoints\nDESCRIPTION: Demonstrates how fully specified URLs in endpoint configurations override the baseURL. The getSession endpoint uses an absolute URL that ignores baseURL, while the signIn endpoint still uses the baseURL prefix.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/url-resolutions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    baseURL: 'https://your.website/api',\n\n    provider: {\n      type: 'local',\n      endpoints: {\n        // This will call `https://example.com/user`\n        getSession: { path: 'https://example.com/user' },\n\n        // This will call `https://your.website/api/login`\n        signIn: { path: '/login', method: 'post' },\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: NuxtAuthHandler Implementation with Laravel Passport Provider\nDESCRIPTION: Implementation of the auth handler with custom Laravel Passport OAuth2 provider configuration including authorization, token, and user profile mapping\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/laravel-passport.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ~/server/api/auth/[...].ts\nimport { NuxtAuthHandler } from '#auth'\nconst { passport } = useRuntimeConfig() // get the values from the runtimeConfig\n\nexport default NuxtAuthHandler({\n  // ...\n  providers: [\n    {\n      id: 'laravelpassport', // ID is only used for the callback URL\n      name: 'Passport', // name is used for the login button\n      type: 'oauth', // connexion type\n      version: '2.0', // oauth version\n      authorization: {\n        url: `${passport.baseUrl}/oauth/authorize`, // this is the route created by passport by default to get the autorization code\n        params: {\n          scope: '*', // this is the wildcard for all scopes in laravel passport, you can specify scopes separated by a space\n        }\n      },\n      token: {\n        url: `${passport.baseUrl}/oauth/token`, // this is the default route created by passport to get and renew the tokens\n      },\n      clientId: passport.clientId, // the client Id\n      clientSecret: passport.clientSecret, // the client secret\n      userinfo: {\n        url: `${passport.baseUrl}/api/v1/me`, // this is a custom route that must return the current user that must be created in laravel\n      },\n      profile: (profile) => {\n        // map the session fields with you laravel fields\n        // profile is the user coming from the laravel app\n        // update the return with your own fields names\n        return {\n          id: profile.id,\n          name: profile.username,\n          email: profile.email,\n          image: profile.image,\n        }\n      },\n      idToken: false,\n    }\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring baseURL as a Prefix in NuxtAuth\nDESCRIPTION: Example of how baseURL acts as a prefix that gets prepended to endpoint paths when making API calls. In this case, a call to '/login' will actually be made to 'https://example.com/api/auth/login'.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/url-resolutions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    baseURL: 'https://example.com/api/auth',\n\n    provider: {\n      type: 'local',\n      endpoints: {\n        // The call would be made to `https://example.com/api/auth/login`\n        signIn: { path: '/login', method: 'post' },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for JWT Token Access\nDESCRIPTION: Implements a simplified API endpoint that returns the JWT token using the getToken helper function. This endpoint can be called from the client-side to retrieve the current user's token.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/jwt-access.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '#auth'\n\nexport default eventHandler(event => getToken({ event }))\n```\n\n----------------------------------------\n\nTITLE: Using useFetch with getServerSession in Nuxt-Auth\nDESCRIPTION: Shows how to properly pass cookies when using Nuxt's useFetch with endpoints that use getServerSession. This ensures authentication works correctly during server-side rendering.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/session-access.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst headers = useRequestHeaders(['cookie']) as HeadersInit\nconst { data: token } = await useFetch('/api/token', { headers })\n```\n\n----------------------------------------\n\nTITLE: Vue Component for JWT Token Display\nDESCRIPTION: Vue component that fetches and displays the JWT token using the useFetch composable. Includes proper header handling for both client and server-side rendering scenarios.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/jwt-access.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst headers = useRequestHeaders(['cookie']) as HeadersInit\nconst { data: token } = await useFetch('/api/token', { headers })\n</script>\n\n<template>\n  <div>{{ token || 'no token present, are you logged in?' }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtAuthHandler with Secret for AUTH_NO_SECRET Resolution\nDESCRIPTION: This code snippet demonstrates how to correctly configure the NuxtAuthHandler with a secret parameter to resolve the AUTH_NO_SECRET warning/error that occurs when no secret is specified.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/resources/error-reference.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/server/api/auth/[...].ts\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  secret: 'my-superb-secret' // <--- !!!! THIS IS WHAT'S MISSING\n\n  // ... rest of your config\n})\n```\n\n----------------------------------------\n\nTITLE: External Backend Authentication Configuration\nDESCRIPTION: Configuration for connecting to an external authentication backend with custom API endpoints.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    baseURL: 'https://example.com/api'\n  },\n  auth: {\n    originEnvKey: 'NUXT_BASE_URL',\n    provider: {\n      type: 'local',\n      endpoints: {\n        signIn: { path: '/auth/login', method: 'post' },\n        signOut: { path: '/auth/logout', method: 'post' },\n        signUp: { path: '/auth/register', method: 'post' },\n        getSession: { path: '/user/session', method: 'get' },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Guest Mode with Auth Middleware\nDESCRIPTION: Example of configuring a page to be accessible only by unauthenticated users (guest mode). Authenticated users will be redirected to the specified path.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  auth: {\n    unauthenticatedOnly: true,\n    navigateAuthenticatedTo: '/profile'\n  }\n})\n</script>\n\n<template>\n  I can only be viewed as a guest!\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Middleware Options for a Page\nDESCRIPTION: Example of customizing auth middleware behavior for a specific page, including custom redirect paths. This demonstrates the object-based configuration option.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  auth: {\n    unauthenticatedOnly: false,\n    navigateUnauthenticatedTo: '/auth/signin'\n  }\n})\n</script>\n\n<template>\n  I am protected with a custom redirect!\n</template>\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Configuration\nDESCRIPTION: Configuration for refresh token functionality including endpoints and token handling settings.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    provider: {\n      type: 'local',\n      refresh: {\n        isEnabled: true,\n        endpoint: { path: '/refresh', method: 'post' },\n        refreshOnlyToken: true,\n        token: {\n          signInResponseRefreshTokenPointer: '/refresh-token',\n          refreshResponseTokenPointer: '',\n          refreshRequestTokenPointer: '/refresh-token',\n          cookieName: 'auth.token',\n          maxAgeInSeconds: 1800,\n          sameSiteAttribute: 'lax',\n          secureCookieAttribute: false,\n          cookieDomain: 'sidebase.io',\n          httpOnlyCookieAttribute: false,\n        }\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Auth Middleware in Nuxt Config\nDESCRIPTION: Configuration for enabling global auth middleware in the Nuxt application. This protects all pages by default without needing to add middleware to individual pages.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    globalAppMiddleware: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Session Data in Vue Component\nDESCRIPTION: Example of how to access the custom session data within a Vue component using the useAuth composable.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/session-data.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = useAuth()\n</script>\n\n<template>\n  <div v-if=\"data\">\n    <!-- You can access the session data you injected above! -->\n    Hello, {{ data.user.name }}. You have the role: {{ data.user.role }}!\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Configuration for Local Auth\nDESCRIPTION: Configuration of authentication endpoints including signIn, signOut, signUp, and getSession with custom paths and methods.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    baseURL: '/api/auth'\n  },\n  auth: {\n    originEnvKey: 'NUXT_BASE_URL',\n    provider: {\n      type: 'local',\n      endpoints: {\n        signIn: { path: '/login', method: 'post' },\n        signOut: { path: '/logout', method: 'post' },\n        signUp: { path: '/register', method: 'post' },\n        getSession: { path: '/session', method: 'get' },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Cache Rules with Nuxt-Auth Module\nDESCRIPTION: This snippet shows how to configure global cache settings by disabling server-side authentication across all pages. This approach is useful when most or all pages on the site are cached to improve performance.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/caching.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    disableServerSideAuth: true,\n    // Optional - Needed for getProviders() method to work server-side\n    baseURL: 'http://localhost:3000',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthJS Provider Methods\nDESCRIPTION: Shows the available methods when using the AuthJS provider with the useAuth composable.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  status,\n  data,\n  lastRefreshedAt,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut\n} = useAuth()\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Sign-In Page with Multiple Providers in Vue\nDESCRIPTION: This code snippet shows how to create a dynamic sign-in page that offers sign-in options based on configured providers. It uses the getProviders() function to retrieve available authentication providers.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/custom-pages.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Remember to disable the middleware protection from your page!\ndefinePageMeta({\n  auth: { unauthenticatedOnly: true, navigateAuthenticatedTo: '/' }\n})\n\nconst { signIn, getProviders } = useAuth()\nconst providers = await getProviders()\n</script>\n\n<template>\n  <button v-for=\"provider in providers\" :key=\"provider.id\" @click=\"signIn(provider.id)\">\n    Sign in with {{ provider.name }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Token Configuration Settings\nDESCRIPTION: Detailed token configuration including cookie settings, header configuration, and security attributes.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    provider: {\n      type: 'local',\n      token: {\n        signInResponseTokenPointer: '/token',\n        type: 'Bearer',\n        cookieName: 'auth.token',\n        headerName: 'Authorization',\n        maxAgeInSeconds: 1800,\n        sameSiteAttribute: 'lax',\n        cookieDomain: 'sidebase.io',\n        secureCookieAttribute: false,\n        httpOnlyCookieAttribute: false,\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Strapi and Nuxt-Auth\nDESCRIPTION: This snippet shows the required environment variables to be set in the .env file for Strapi and Nuxt-Auth configuration.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/strapi.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// Strapi v4 url, out of the box\nAUTH_ORIGIN=http://localhost:3000\nNUXT_SECRET=a-not-so-good-secret\nSTRAPI_BASE_URL=http://localhost:1337/api\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Session Data Types in NuxtAuth\nDESCRIPTION: An advanced configuration example showing how to define complex session data types including arrays and nested objects. This configuration extends the basic example with a subscriptions array of objects.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/session-data.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    provider: {\n      type: 'local',\n      session: {\n        dataType: {\n          id: 'string | number',\n          firstName: 'string',\n          lastName: 'string',\n          subscriptions: '{ id: number, active: boolean }[]'\n        },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config in Nuxt for Strapi Integration\nDESCRIPTION: This snippet demonstrates how to set up the runtime configuration in nuxt.config.ts to include the necessary environment variables for Strapi integration.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/strapi.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    // The private keys which are only available server-side\n    NUXT_SECRET: process.env.NUXT_SECRET,\n    // Default http://localhost:1337/api\n    STRAPI_BASE_URL: process.env.STRAPI_BASE_URL,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Session Interface Extension\nDESCRIPTION: Demonstrates how to extend the DefaultSession interface to add type definitions for custom session data using module augmentation.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/session-data.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/next-auth.d.ts\nimport type { DefaultSession } from 'next-auth'\n\ndeclare module 'next-auth' {\n  /* Returned by `useAuth`, `getSession` and `getServerSession` */\n  interface Session extends DefaultSession {\n    user: {\n      name: string\n      avatar: string\n      role: 'admin' | 'manager' | 'user'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Auth Middleware with Direct Return\nDESCRIPTION: Implementation of a custom global authentication middleware that redirects unauthenticated users to sign in. Uses direct return pattern to avoid Nuxt context issues.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// file: ~/middleware/authentication.global.ts\nexport default defineNuxtRouteMiddleware((to) => {\n  const { status, signIn } = useAuth()\n\n  // Return immediately if user is already authenticated\n  if (status.value === 'authenticated') {\n    return\n  }\n\n  /**\n   * We cannot directly call and/or return `signIn` here as `signIn` uses async composables under the hood, leading to \"nuxt instance undefined errors\", see https://github.com/nuxt/framework/issues/5740#issuecomment-1229197529\n   *\n   * So to avoid calling it, we return it immediately.\n   */\n  return signIn(undefined, { callbackUrl: to.path }) as ReturnType<typeof navigateTo>\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Mocked Auth Functions in TypeScript\nDESCRIPTION: Defines mocked versions of NuxtAuth composables including useAuth for client-side and server-side handlers. Creates a mock user object and implements basic auth functionality for testing.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/official/mocking-with-vitest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler } from 'h3'\n\nexport const MOCKED_USER = {\n  user: {\n    role: 'admin',\n    email: 'hi@sidebase.io',\n    name: 'sidebase'\n  }\n}\n\n// App-side mocks\nexport function useAuth() {\n  return {\n    data: ref(MOCKED_USER),\n    status: ref('authenticated'),\n    getSession: () => MOCKED_USER,\n    signOut: () => {},\n  }\n}\n\n// Server-side mocks\nexport const getServerSession = () => MOCKED_USER\nexport const NuxtAuthHandler = () => eventHandler(() => MOCKED_USER)\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Reference Table\nDESCRIPTION: Table showing all available REST API endpoints with their HTTP methods and descriptions. The baseURL defaults to '/api/auth' and can be configured in nuxt.config.ts.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/rest-api.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${baseURL}/signin         GET     Displays the built-in/unbranded sign-in\n${baseURL}/signin/:provider POST    Starts a provider-specific sign-in\n${baseURL}/callback/:provider GET POST Handles returning requests from OAuth services during sign-in\n${baseURL}/signout        GET POST Displays the built-in/unbranded sign out\n${baseURL}/session        GET     Returns client-safe session object\n${baseURL}/csrf           GET     Returns object containing CSRF\n${baseURL}/providers      GET     Returns a list of configured OAuth providers\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Mock Authentication\nDESCRIPTION: Updates Nuxt configuration to conditionally use either the real or mocked auth module based on the environment. Uses VITEST environment variable to determine which module to load.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/official/mocking-with-vitest.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// If vitest is running the application, overwrite using the mocked module\nconst mockAuthModule = process.env.VITEST ? ['./test/mocks/setup.ts'] : []\n\nexport default defineNuxtConfig({\n  modules: [\n    '@sidebase/nuxt-auth',\n    ...mockAuthModule,\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Page Redirection in Nuxt Auth\nDESCRIPTION: This code snippet demonstrates how to configure the login page path in nuxt-auth. When a user attempts to access a protected page without authentication, they will be redirected to this specified login page, which is excluded from global middleware protection.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // previous configuration\n  auth: {\n    provider: {\n      type: 'local',\n      pages: {\n        login: '/login'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling SignUp Endpoint Configuration\nDESCRIPTION: Example of how to disable specific endpoints in the local provider configuration.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n    auth: {\n        provider: {\n            type: 'local',\n            endpoints: {\n                signUp: false\n            }\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Local Auth Middleware to a Vue Page\nDESCRIPTION: Example of adding the auth middleware locally to a specific page when global middleware is disabled. This allows protecting individual pages rather than the entire application.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\ndefinePageMeta({\n  middleware: 'sidebase-auth'\n})\n</script>\n\n<template>\n  Only I am protected!\n</template>\n```\n\n----------------------------------------\n\nTITLE: API Token Usage Example\nDESCRIPTION: Example of using the authentication token for API requests.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useAPI() {\n  const { token } = useAuth()\n\n  return $fetch.create({\n    baseURL: '/api',\n    headers: {\n      Authorization: `Bearer ${token.value}`\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auth Protection for a Specific Page\nDESCRIPTION: Example of disabling auth protection for a specific page when global middleware is enabled. This allows creating public pages in an otherwise protected application.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/protecting-pages.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  auth: false\n})\n</script>\n\n<template>\n  I am not protected anymore!\n</template>\n```\n\n----------------------------------------\n\nTITLE: Local Provider SignUp Examples\nDESCRIPTION: Examples of using the signUp method with various configurations in the local provider.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// `credentials` are the credentials your sign-up endpoint expects,\nconst credentials = { username: 'jsmith', password: 'hunter2' }\n\n// Trigger a sign-up\nawait signUp(credentials)\n\n// Trigger a sign-up with auto sign-in and redirect to the profile page within the application\nawait signUp(credentials, { callbackUrl: '/profile', redirect: true })\n\n// Trigger a sign-up with auto sign-in and redirect to an external website (https://external.example.com)\nawait signUp(credentials, { callbackUrl: 'https://external.example.com', redirect: true, external: true })\n\n// Trigger a sign-up without auto sign-in and redirect to the home page within the application\nawait signUp(credentials, { callbackUrl: '/', redirect: true }, { preventLoginFlow: true })\n\n// Trigger a sign-up without auto sign-in and doesn't redirect anywhere\nawait signUp(credentials, undefined, { preventLoginFlow: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Session Data Types in NuxtAuth\nDESCRIPTION: A basic configuration example showing how to define session data types with simple primitives in the nuxt.config.ts file. This configuration defines types for user id, firstName, and lastName properties.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/session-data.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    provider: {\n      type: 'local',\n      session: {\n        dataType: {\n          id: 'string | number',\n          firstName: 'string',\n          lastName: 'string',\n        },\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Authentication Data Display\nDESCRIPTION: Example of displaying user data in a Vue template using the useAuth composable's data property.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = useAuth()\n</script>\n\n<template>\n  <div v-if=\"data\">\n    Hello {{ data.user.name }}!\n  </div>\n  <div v-else>\n    You are not logged in.\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Refresh Handler for NuxtAuth\nDESCRIPTION: Configuration example showing how to specify a custom session refresh handler in the Nuxt configuration file. This allows for more granular control over session refreshing behavior.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/configuration.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    sessionRefresh: {\n      // You can place it anywhere and name as you wish\n      handler: './config/AuthRefreshHandler'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating BaseURL Configuration\nDESCRIPTION: Code diff showing how to adjust the baseURL configuration to include the full API path rather than just the domain.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_4\n\nLANGUAGE: ts diff\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    baseURL: 'https://example.com', // [!code --]\n    baseURL: 'https://example.com/api/auth', // [!code ++]\n\n    provider: {\n      type: 'local',\n      endpoints: {\n        signIn: { path: '/login', method: 'post' },\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Page for Authentication Errors in Vue\nDESCRIPTION: This snippet demonstrates how to create a custom error page that handles authentication-related errors. It retrieves the error code from the URL query parameters and displays it to the user.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/custom-pages.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Remember to disable the middleware protection from your page!\ndefinePageMeta({\n  auth: { unauthenticatedOnly: true, navigateAuthenticatedTo: '/' }\n})\n\nconst route = useRoute()\nconst errorCode = computed(() => route.query.error)\n</script>\n\n<template>\n  <h1> Authentication error {{ errorCode }}. Please try again! </h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtAuth in Nuxt Config\nDESCRIPTION: Configuration setup to add NuxtAuth module to the Nuxt application's configuration file.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/getting-started/installation.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@sidebase/nuxt-auth'\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NuxtAuthHandler\nDESCRIPTION: Basic setup for a NuxtAuthHandler in a server API route file. This creates the necessary endpoints for authentication handling in the application.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // your authentication configuration here!\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Nuxt-Auth Module to Nuxt Configuration\nDESCRIPTION: TypeScript code snippet showing how to add the @sidebase/nuxt-auth module to the Nuxt configuration file.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth']\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Provider Methods\nDESCRIPTION: Shows the available methods when using the local provider with the useAuth composable.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  status,\n  data,\n  lastRefreshedAt,\n  token,\n  refreshToken,\n  getSession,\n  signUp,\n  signIn,\n  signOut,\n  refresh\n} = useAuth()\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Config for Provider Unification\nDESCRIPTION: Configuration changes required in nuxt.config.ts to migrate from the refresh provider to the unified local provider. Shows the removal of old refresh configuration and addition of new unified structure.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.9.0.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    provider: {\n      type: 'local',\n      endpoints: {\n        getSession: { path: '/session', method: 'get' }\n      },\n      refresh: {\n        isEnabled: true,\n        endpoint: { path: '/refresh', method: 'post' },\n        refreshOnlyToken: true,\n        token: {\n          signInResponseRefreshTokenPointer: '/refresh-token',\n          refreshRequestTokenPointer: 'Bearer',\n          cookieName: 'auth.token',\n          maxAgeInSeconds: 1800,\n          sameSiteAttribute: 'lax',\n          secureCookieAttribute: false,\n          cookieDomain: 'sidebase.io',\n          httpOnlyCookieAttribute: false\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Local Provider Configuration in Nuxt\nDESCRIPTION: Initial setup of the local provider in nuxt.config.ts, configuring the basic authentication provider type.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/quick-start.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    provider: {\n      type: 'local'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Authentication Status Display\nDESCRIPTION: Example of displaying authentication status in a Vue template using the useAuth composable.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/session-access.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { status } = useAuth()\n</script>\n\n<template>\n  You are currently {{ status }}.\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nuxt Configuration for Laravel Passport Integration\nDESCRIPTION: Nuxt configuration setup including module registration and runtime config for Passport credentials\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/laravel-passport.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ~/nuxt.config.ts\nexport default defineNuxtConfig({\n  // ...\n  modules: [\n    // ...\n    '@sidebase/nuxt-auth',\n  ],\n  runtimeConfig: {\n    // ...\n    passport: {\n      baseUrl: process.env.PASSPORT_BASE_URL,\n      clientId: process.env.PASSPORT_CLIENT_ID,\n      clientSecret: process.env.PASSPORT_CLIENT_SECRET,\n    }\n\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom RefreshHandler for NuxtAuth\nDESCRIPTION: Example implementation of a custom session refresh handler for NuxtAuth. Shows how to create a class that implements the RefreshHandler interface with init and destroy lifecycle methods.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/application-side/configuration.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RefreshHandler } from '@sidebase/nuxt-auth'\n\n// You may also use a plain object with `satisfies RefreshHandler`\nclass CustomRefreshHandler implements RefreshHandler {\n  init(): void {\n    console.info('Use the full power of the refreshHandler!')\n  }\n\n  destroy(): void {\n    console.info(\n      'Hover above class properties or go to their definition '\n      + 'to learn more about how to craft a refreshHandler'\n    )\n  }\n}\n\nexport default new CustomRefreshHandler()\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom RefreshHandler for Nuxt-Auth\nDESCRIPTION: Example of creating a custom RefreshHandler class to control session refresh behavior. The handler must implement init() and destroy() methods to properly manage session refresh lifecycle and resource cleanup.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.8.0.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RefreshHandler } from '@sidebase/nuxt-auth'\n\n// You may also use a plain object with `satisfies RefreshHandler`, of course!\nclass CustomRefreshHandler implements RefreshHandler {\n  init(): void {\n    console.info('Use the full power of classes to customize refreshHandler!')\n  }\n\n  destroy(): void {\n    console.info(\n      'Hover above class properties or go to their definition '\n      + 'to learn more about how to craft a refreshHandler'\n    )\n  }\n}\n\nexport default new CustomRefreshHandler()\n```\n\n----------------------------------------\n\nTITLE: Server-side JWT Token Access in Nuxt\nDESCRIPTION: Creates a server-side API endpoint to retrieve the JWT token from the current request. Uses the getToken helper from auth module to extract the token from the event context.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/server-side/jwt-access.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from '#auth'\n\nexport default eventHandler(async (event) => {\n  const token = await getToken({ event })\n\n  return token || 'no token present'\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Laravel Passport\nDESCRIPTION: Configuration of environment variables for Laravel Passport integration including base URL, client ID and secret\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/laravel-passport.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nPASSPORT_BASE_URL=http://www.my_passport_app.test\nPASSPORT_CLIENT_ID=123456789\nPASSPORT_CLIENT_SECRET=123456789\n```\n\n----------------------------------------\n\nTITLE: Recommended AUTH_ORIGIN Setup in Nuxt Config\nDESCRIPTION: Code diff showing the recommended way to set up AUTH_ORIGIN in the Nuxt configuration file after version 0.10.0.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_6\n\nLANGUAGE: ts diff\nCODE:\n```\nexport default defineNuxtConfig({\n  // ... other configuration\n  auth: {\n    baseUrl: 'https://my-backend.com/api/auth', // [!code --]\n    // This is technically not needed as it is the default, but it's here for illustrative purposes\n    originEnvKey: 'AUTH_ORIGIN', // [!code ++]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting baseURL in Nuxt Config for AUTH_NO_ORIGIN Resolution\nDESCRIPTION: This code snippet shows how to set the baseURL in the Nuxt configuration to provide an origin for authentication, which helps resolve the AUTH_NO_ORIGIN warning/error.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/resources/error-reference.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    baseURL: `http://localhost:${process.env.PORT || 3000}`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Local Provider Endpoint Paths\nDESCRIPTION: Code diff showing how to prefix endpoint paths with a forward slash in the local provider configuration for external backends.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_5\n\nLANGUAGE: ts diff\nCODE:\n```\nexport default defineNuxtConfig({\n  auth: {\n    provider: {\n      type: 'local',\n      endpoints: {\n        signIn: { path: 'login', method: 'post' }, // [!code --]\n        signIn: { path: '/login', method: 'post' }, // [!code ++]\n        getSession: { path: 'session', method: 'get' }, // [!code --]\n        getSession: { path: '/session', method: 'get' }, // [!code ++]\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Resulting SessionConfig Interface for Complex Types\nDESCRIPTION: The TypeScript interface that NuxtAuth will automatically generate based on the complex configuration. This shows how string-based complex type definitions are converted to actual TypeScript types including arrays and nested objects.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/session-data.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SessionConfig {\n  id: string | number\n  firstName: string\n  lastName: string\n  subscriptions: { id: number, status: boolean }[]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing NuxtAuth baseURL at Runtime\nDESCRIPTION: Shows how to access the baseURL configuration value at runtime using the useRuntimeConfig() composable. The baseURL is always available at runtimeConfig.public.auth.baseURL.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/advanced/url-resolutions.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst runtimeConfig = useRuntimeConfig()\nconst baseURL = runtimeConfig.public.auth.baseURL\n```\n\n----------------------------------------\n\nTITLE: Resulting SessionData Interface for Basic Types\nDESCRIPTION: The TypeScript interface that NuxtAuth will automatically generate based on the basic configuration. This shows how the string-based type definitions are converted to actual TypeScript types.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/local/session-data.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SessionData {\n  id: string | number\n  firstName: string\n  lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AUTH_ORIGIN in Environment File\nDESCRIPTION: Code diff showing how to set the AUTH_ORIGIN environment variable in a .env file for use with Nuxt-Auth 0.10.0.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_7\n\nLANGUAGE: env diff\nCODE:\n```\nAUTH_ORIGIN=\"https://my-backend.com/api/auth\" // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Updating Middleware Name in Vue Component\nDESCRIPTION: Code diff showing how to update the middleware name from 'auth' to 'sidebase-auth' in a Vue component's page meta definition.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_3\n\nLANGUAGE: vue diff\nCODE:\n```\n<script lang=\"ts\" setup>\ndefinePageMeta({\n  middleware: 'auth', // [!code --]\n  middleware: 'sidebase-auth', // [!code ++]\n})\n</script>\n\n<template>\n  Only I am protected!\n</template>\n```\n\n----------------------------------------\n\nTITLE: TypeScript JWT Interface Extension\nDESCRIPTION: Shows how to extend the JWT interface to add type definitions for custom JWT token data using module augmentation.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/session-data.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// file: ~/next-auth.d.ts\ndeclare module 'next-auth/jwt' {\n  /** Returned by the `jwt` callback and `getToken` */\n  interface JWT {\n    sessionToken?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mocked Auth Module in TypeScript\nDESCRIPTION: Creates a local Nuxt module that implements the mocked authentication functions. Configures imports and nitro aliases to use the mocked version during testing.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/official/mocking-with-vitest.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup: (_options, nuxt) => {\n    const { resolve } = createResolver(import.meta.url)\n    const pathToMocks = resolve('./auth.ts')\n\n    nuxt.hook('imports:extend', (_imports) => {\n      _imports.push({ name: 'useAuth', from: pathToMocks })\n    })\n\n    nuxt.hook('nitro:config', (nitroConfig) => {\n      if (!nitroConfig.alias) {\n        throw new Error('Alias must exist at this point, otherwise server-side cannot be mocked')\n      }\n      nitroConfig.alias['#auth'] = pathToMocks\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of NuxtAuth Package\nDESCRIPTION: Commands to manually install the @sidebase/nuxt-auth package as a dev dependency using different package managers.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/getting-started/installation.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sidebase/nuxt-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @sidebase/nuxt-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @sidebase/nuxt-auth\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt configuration for breaking changes in auth.session\nDESCRIPTION: Example of migrating from the deprecated 'auth.session' configuration to the new 'auth.sessionRefresh' format. The properties for controlling refresh behavior have been renamed for better clarity.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.8.0.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// nuxt.config.ts\n\nexport default defineNuxtConfig({\n  modules: ['@sidebase/nuxt-auth'],\n  auth: {\n    session: { // [!code --]\n      enableRefreshOnWindowFocus: true, // [!code --]\n      enableRefreshPeriodically: 10000, // [!code --]\n    }, // [!code --]\n    sessionRefresh: { // [!code ++]\n      enableOnWindowFocus: true, // [!code ++]\n      enablePeriodically: 10000, // [!code ++]\n    }, // [!code ++]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of Nuxt-Auth Package\nDESCRIPTION: Commands for manually installing the @sidebase/nuxt-auth package using npm, pnpm, or yarn.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @sidebase/nuxt-auth\n\npnpm i -D @sidebase/nuxt-auth\n\nyarn add --dev @sidebase/nuxt-auth\n```\n\n----------------------------------------\n\nTITLE: Creating Laravel Passport Client - CLI Command\nDESCRIPTION: Command to create a new Laravel Passport client which generates client ID and secret\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/community/laravel-passport.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan passport:client\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt-Auth v0.9.0 Package Manager Commands\nDESCRIPTION: Installation commands for @sidebase/nuxt-auth v0.9.0 using different package managers (npm, pnpm, and yarn).\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.9.0.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sidebase/nuxt-auth@^0.9.0\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @sidebase/nuxt-auth^0.9.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @sidebase/nuxt-auth^0.9.0\n```\n\n----------------------------------------\n\nTITLE: Installing NuxtAuth with nuxi\nDESCRIPTION: Commands to install NuxtAuth using the nuxi module add command across different package managers (npm, pnpm, yarn).\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/getting-started/installation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add sidebase-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec nuxi module add sidebase-auth\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx nuxi module add sidebase-auth\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt-Auth 0.10.0 with NPM\nDESCRIPTION: Command to install @sidebase/nuxt-auth version 0.10.0 or higher using NPM package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sidebase/nuxt-auth@^0.10.0\n```\n\n----------------------------------------\n\nTITLE: Installing next-auth with pnpm\nDESCRIPTION: Command to install next-auth version 4.21.1 using pnpm package manager. This specific version is recommended due to compatibility issues with newer versions.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i next-auth@4.21.1\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt-Auth 0.10.0 with PNPM\nDESCRIPTION: Command to install @sidebase/nuxt-auth version 0.10.0 or higher using PNPM package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @sidebase/nuxt-auth@^0.10.0\n```\n\n----------------------------------------\n\nTITLE: Installing @sidebase/nuxt-auth 0.8.0 with yarn\nDESCRIPTION: Command to install version 0.8.0 or higher of @sidebase/nuxt-auth as a development dependency using yarn package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.8.0.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @sidebase/nuxt-auth^0.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt-Auth 0.10.0 with Yarn\nDESCRIPTION: Command to install @sidebase/nuxt-auth version 0.10.0 or higher using Yarn package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.10.0.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @sidebase/nuxt-auth@^0.10.0\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt-Auth Module via CLI\nDESCRIPTION: Command to quickly add the sidebase-auth module to a Nuxt 3 project using the Nuxi CLI.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx nuxi@latest module add sidebase-auth\n```\n\n----------------------------------------\n\nTITLE: Installing @sidebase/nuxt-auth 0.8.0 with npm\nDESCRIPTION: Command to install version 0.8.0 or higher of @sidebase/nuxt-auth as a development dependency using npm package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.8.0.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sidebase/nuxt-auth@^0.8.0\n```\n\n----------------------------------------\n\nTITLE: Submitting Auth Recipe Location Path\nDESCRIPTION: Directory path specification for submitting new authentication recipes to the nuxt-auth documentation\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/recipes/introduction/adding-your-recipe.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n~/docs/recipes/community\n```\n\n----------------------------------------\n\nTITLE: Installing @sidebase/nuxt-auth 0.8.0 with pnpm\nDESCRIPTION: Command to install version 0.8.0 or higher of @sidebase/nuxt-auth as a development dependency using pnpm package manager.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/version-0.8.0.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @sidebase/nuxt-auth^0.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing next-auth with yarn\nDESCRIPTION: Command to install next-auth version 4.21.1 using yarn package manager. This specific version is pinned due to a breaking change in newer versions of NextAuth.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/guide/authjs/quick-start.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next-auth@4.21.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Refresh Redirect in HTML\nDESCRIPTION: Uses HTML meta refresh tag to automatically redirect users to the upgrade documentation page for version 0.10.0. The redirect occurs immediately with a 0 second delay.\nSOURCE: https://github.com/sidebase/nuxt-auth/blob/main/docs/upgrade/index.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0;URL='/upgrade/version-0.10.0'\" />\n```"
  }
]