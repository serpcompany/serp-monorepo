[
  {
    "owner": "shopify",
    "repo": "draggable",
    "content": "TITLE: Implementing Basic Sortable Functionality in TypeScript with Shopify Draggable\nDESCRIPTION: Demonstrates the basic setup of a Sortable instance using Shopify Draggable. Shows how to initialize the sortable component and handle sorting and container drag events with proper TypeScript typing.\nSOURCE: https://github.com/shopify/draggable/blob/main/doc/typescript.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n\n// The type of the first argument is SortableEventNames\nsortable.on('sortable:sort', (evt) => {\n  // The type of evt is SortableSortEvent\n});\n\n// The type of the first argument is SortableEventNames\nsortable.on('drag:out:container', (evt) => {\n  // The type of evt is DragOutContainerEvent\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Draggable with NPM in JavaScript\nDESCRIPTION: Shows how to import the Draggable library using NPM and initialize it with a list of draggable items. This snippet demonstrates the basic setup of making list items draggable.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n// Or\nimport Draggable from '@shopify/draggable/build/esm/Draggable/Draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n```\n\n----------------------------------------\n\nTITLE: Full Example of Sortable Implementation with Event Handlers in JavaScript\nDESCRIPTION: A complete example showing how to import the Sortable module, initialize it for list items, and set up event handlers for all the sortable events. This demonstrates the full workflow for implementing sortable functionality.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Sortable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n\nsortable.on('sortable:start', () => console.log('sortable:start'));\nsortable.on('sortable:sort', () => console.log('sortable:sort'));\nsortable.on('sortable:sorted', () => console.log('sortable:sorted'));\nsortable.on('sortable:stop', () => console.log('sortable:stop'));\n```\n\n----------------------------------------\n\nTITLE: Using Draggable as an ES Module in HTML\nDESCRIPTION: Demonstrates importing and initializing Draggable as an ES module directly in the browser. This approach uses the ESM build of the library from a CDN.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Draggable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Draggable/Draggable.mjs';\n\n  const draggable = new Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Draggable Elements with Event Listeners in JavaScript\nDESCRIPTION: This example demonstrates how to make list items draggable using the Shopify Draggable library. It selects all list items within ul elements and attaches event listeners for drag start, move, and stop events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n\ndraggable.on('drag:start', () => console.log('drag:start'));\ndraggable.on('drag:move', () => console.log('drag:move'));\ndraggable.on('drag:stop', () => console.log('drag:stop'));\n```\n\n----------------------------------------\n\nTITLE: Complete Droppable Implementation Example\nDESCRIPTION: Comprehensive example showing HTML structure with styling and JavaScript implementation for creating draggable and droppable elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <div class=\"dropzone draggable-dropzone--occupied\">\n    <div class=\"item\">A</div>\n  </div>\n  <div class=\"dropzone draggable-dropzone--occupied\">\n    <div class=\"item\">B</div>\n  </div>\n  <div class=\"dropzone draggable-dropzone--occupied\">\n    <div class=\"item\">C</div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"dropzone\"></div>\n</div>\n\n<style>\n  .item {\n    height: 100%;\n  }\n  .dropzone {\n    outline: solid 1px;\n    height: 50px;\n  }\n  .draggable-dropzone--occupied {\n    background: lightgreen;\n  }\n</style>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Droppable} from '@shopify/draggable';\n\nconst droppable = new Droppable(document.querySelectorAll('.container'), {\n  draggable: '.item',\n  dropzone: '.dropzone',\n});\n\ndroppable.on('droppable:dropped', () => console.log('droppable:dropped'));\ndroppable.on('droppable:returned', () => console.log('droppable:returned'));\n```\n\n----------------------------------------\n\nTITLE: Installing Draggable with npm\nDESCRIPTION: Command to install the Draggable library using npm package manager.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @shopify/draggable --save\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Classes with Shopify Draggable\nDESCRIPTION: This example demonstrates how to customize the CSS classes applied to elements during drag operations. It configures multiple classes to be applied to elements when they are dragged over.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  classes: {\n    'draggable:over': ['draggable--over', 'bg-red-200', 'bg-opacity-25'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Draggable Locally with NPM\nDESCRIPTION: Steps to set up and run the Draggable project locally using NPM package manager, including installation and testing commands.\nSOURCE: https://github.com/shopify/draggable/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd draggable\n$ npm install\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring SortAnimation Plugin with Sortable in JavaScript\nDESCRIPTION: Demonstrates how to import and configure the Sortable component with the SortAnimation plugin, specifying custom duration and easing function for the animation.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SortAnimation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  sortAnimation: {\n    duration: 200,\n    easingFunction: 'ease-in-out',\n  },\n  plugins: [Plugins.SortAnimation],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Sortable via NPM in JavaScript\nDESCRIPTION: Shows how to import the Sortable module from the @shopify/draggable package using NPM and initialize it with basic configuration. The example sets up sortable functionality for list items within unordered lists.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Sortable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n// Or\nimport Sortable from '@shopify/draggable/build/esm/Sortable/Sortable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Draggable as a Standalone Script in HTML\nDESCRIPTION: Shows how to use Draggable as a standalone script in the browser by including it from a CDN. This approach uses the UMD build of the library and accesses it through the global Draggable object.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const draggable = new Draggable.Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SortAnimation Plugin with NPM in JavaScript\nDESCRIPTION: Demonstrates how to import the Sortable component and SortAnimation plugin from the @shopify/draggable package using NPM, and how to initialize a Sortable instance with the SortAnimation plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SortAnimation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n// Or\nimport Sortable from '@shopify/draggable/build/esm/Sortable/Sortable';\nimport SortAnimation from '@shopify/draggable/build/esm/Plugins/SortAnimation';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  sortAnimation: {\n    duration: 200,\n    easingFunction: 'ease-in-out',\n  },\n  plugins: [Plugins.SortAnimation], // Or [SortAnimation]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Swappable with NPM Import\nDESCRIPTION: Shows how to import and initialize the Swappable component using NPM package imports. Creates a swappable instance for list items within ul elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Swappable} from '@shopify/draggable';\n// Or\nimport Swappable from '@shopify/draggable/build/esm/Swappable/Swappable';\n\nconst swappable = new Swappable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Sortable as a Browser Module in HTML\nDESCRIPTION: Demonstrates how to import the Sortable module as an ES module in the browser using a CDN link and initialize it with basic configuration for list items.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Sortable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Sortable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Sortable/Sortable.mjs';\n\n  const sortable = new Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sortable with Dynamic Announcements in JavaScript\nDESCRIPTION: This example shows how to set up a Sortable instance with dynamic announcement messages. It uses functions to generate custom messages based on the event details, accessing attributes of the dragged elements to create more informative announcements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Announcement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst announcements = {\n  'drag:start': (dragEvent) => {\n    return `Picked up ${dragEvent.source.getAttribute('data-name')}`;\n  },\n\n  'drag:stop': (dragEvent) => {\n    return `Dropped ${dragEvent.source.getAttribute('data-name')}`\n  },\n\n  'sortable:sorted': (sortableEvent) => {\n    return `Sorted ${sortableEvent.dragEvent.source.getAttribute('data-name')} with ${sortableEvent.dragEvent.over.getAttribute('data-name')}`;\n  },\n}\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  announcements,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Droppable as Browser Module\nDESCRIPTION: Demonstrates how to use Droppable as a module in browser environments using ES modules.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Droppable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Droppable/Droppable.mjs';\n\n  const droppable = new Droppable(document.querySelectorAll('.container'), {\n    draggable: '.item',\n    dropzone: '.dropzone',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Collidable with NPM in JavaScript\nDESCRIPTION: Shows how to import the Collidable plugin using NPM and initialize a Draggable instance with the plugin enabled. The collidables option specifies which elements cannot be dragged over.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable, Plugins} from '@shopify/draggable';\n// Or\nimport Draggable from '@shopify/draggable/build/esm/Draggable/Draggable';\nimport Collidable from '@shopify/draggable/build/esm/Plugins/Collidable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  collidables: '.other-list',\n  plugins: [Plugins.Collidable], // Or [Collidable]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag Delay Options Object in JavaScript\nDESCRIPTION: An example of the delay configuration object used to control drag start timing for different sensors. This allows setting different delay values for mouse, drag, and touch events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  mouse: 0,\n  drag: 0,\n  touch: 100,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ResizeMirror Plugin with NPM in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Draggable library and ResizeMirror plugin using NPM, and then initialize a draggable instance with the ResizeMirror plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/ResizeMirror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable, Plugins} from '@shopify/draggable';\n// Or\nimport Draggable from '@shopify/draggable/build/esm/Draggable/Draggable';\nimport ResizeMirror from '@shopify/draggable/build/esm/Plugins/ResizeMirror';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  plugins: [Plugins.ResizeMirror], // Or [ResizeMirror]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Draggable with Custom Scrollable Configuration in JavaScript\nDESCRIPTION: Example of initializing the Draggable library with customized Scrollable plugin options. This snippet demonstrates how to adjust scroll speed, sensitivity, and provide custom scrollable elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Scrollable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst customScrollableElements = document.querySelectorAll('.my-custom-scroll-elements')\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  scrollable: {\n    speed: 6,\n    sensitivity: 12,\n    scrollableElements: [\n      ...customScrollableElements,\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Plugin with Y-Axis Only in Draggable\nDESCRIPTION: This snippet demonstrates how to initialize a Draggable instance with customized Mirror plugin settings. It constrains mirror dimensions, sets cursor offsets, and disables movement on the x-axis.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  mirror: {\n    constrainDimensions: true,\n    cursorOffsetX: 10,\n    cursorOffsetY: 10,\n    xAxis: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sortable with Static Announcements in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Sortable instance with static announcement messages for different drag events. It uses the @shopify/draggable library and defines messages for drag:start, drag:stop, and sortable:stopped events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Announcement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst announcements = {\n  'drag:start': 'Draggable element picked up',\n  'drag:stop': 'Draggable element dropped',\n  'sortable:stopped': 'Draggable elements swapped',\n}\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  announcements,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Sortable with ResizeMirror Plugin in JavaScript\nDESCRIPTION: This example shows how to create a Sortable instance with the ResizeMirror plugin. It imports the necessary components from the Draggable library and sets up a sortable list with the plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/ResizeMirror/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  plugins: [Plugins.ResizeMirror],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Plugin with X-Axis Only in Sortable\nDESCRIPTION: This snippet shows how to configure the Mirror plugin for a Sortable instance. It constrains mirror dimensions, sets cursor offsets, and disables movement on the y-axis.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  mirror: {\n    constrainDimensions: true,\n    cursorOffsetX: 10,\n    cursorOffsetY: 10,\n    yAxis: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Snappable Plugin with ES Modules in HTML\nDESCRIPTION: This snippet shows how to use the Snappable plugin with Draggable when working with ES modules in the browser. It imports the modules from a CDN and initializes a draggable instance with the Snappable plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Snappable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Draggable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Draggable/Draggable.mjs';\n  import Snappable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/Snappable.mjs';\n\n  const draggable = new Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    plugins: [Snappable],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Snappable Plugin in JavaScript\nDESCRIPTION: This example shows how to listen for Snappable plugin events. It demonstrates setting up a Sortable instance with the Snappable plugin and attaching event listeners for the 'snap:in' and 'snap:out' events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Snappable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  plugins: [Plugins.Snappable],\n});\n\nsortable.on('snap:in', () => console.log('snap:in'));\nsortable.on('snap:out', () => console.log('snap:out'));\n```\n\n----------------------------------------\n\nTITLE: Importing Draggable Modules via ES Modules (CDN)\nDESCRIPTION: Example showing how to import all Draggable modules using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import {\n    Draggable,\n    Sortable,\n    Droppable,\n    Swappable,\n  } from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/index.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sortable as a Standalone Browser Script in HTML\nDESCRIPTION: Shows how to use the Sortable module from the Draggable library using a standalone UMD script in the browser. This approach loads the entire Draggable library and accesses Sortable as a property.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Sortable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const sortable = new Draggable.Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collidable Event Listeners with Sortable in JavaScript\nDESCRIPTION: Example of how to set up a Sortable instance with the Collidable plugin and listen for collision events. Shows event handling for both collidable:in and collidable:out events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  collidables: '.other-list',\n  plugins: [Plugins.Collidable],\n});\n\nsortable.on('collidable:in', () => console.log('collidable:in'));\nsortable.on('collidable:out', () => console.log('collidable:out'));\n```\n\n----------------------------------------\n\nTITLE: Importing Sortable Module via ES Modules (CDN)\nDESCRIPTION: Example showing how to import only the Sortable module using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Sortable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Sortable/Sortable.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Swappable with Browser Standalone Script\nDESCRIPTION: Shows how to use Swappable with a standalone browser script, accessing it through the Draggable namespace. Initializes swappable functionality for list items.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const swappable = new Draggable.Swappable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Complete Swappable Implementation Example\nDESCRIPTION: Demonstrates a complete implementation of Swappable including event listeners for start, swapped, and stop events. Shows how to handle swappable element interactions.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Swappable} from '@shopify/draggable';\n\nconst swappable = new Swappable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n\nswappable.on('swappable:start', () => console.log('swappable:start'));\nswappable.on('swappable:swapped', () => console.log('swappable:swapped'));\nswappable.on('swappable:stop', () => console.log('swappable:stop'));\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Elements with Custom Classes\nDESCRIPTION: This snippet creates a draggable instance with custom CSS classes applied during various drag states. It's similar to the previous example but appears to be intended for the ESC key cancellation feature mentioned in the comment (though the actual ESC handling is not shown in the code).\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  classes: {\n    'draggable:over': ['draggable--over', 'bg-red-200', 'bg-opacity-25'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using SortAnimation Plugin as a Standalone Script in HTML\nDESCRIPTION: Illustrates how to use the Sortable component and SortAnimation plugin as a standalone script in a browser environment, using a CDN-hosted UMD bundle.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SortAnimation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const sortable = new Draggable.Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    sortAnimation: {\n      duration: 200,\n      easingFunction: 'ease-in-out',\n    },\n    plugins: [Draggable.Plugins.SortAnimation],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring SwapAnimation Example Implementation\nDESCRIPTION: Complete example showing configuration of the SwapAnimation plugin with all available options including duration, easing function, and horizontal movement.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SwapAnimation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  swapAnimation: {\n    duration: 200,\n    easingFunction: 'ease-in-out',\n    horizontal: true,\n  },\n  plugins: [Plugins.SwapAnimation],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Sensor with Shopify Draggable in JavaScript\nDESCRIPTION: Example showing how to use the DragSensor with Shopify Draggable. The code imports the necessary components, initializes a Draggable instance with the DragSensor, and removes the default MouseSensor.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/DragSensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable, Sensors} from '@shopify/draggable';\n\nconst draggable = new Draggable(containers, {\n  sensors: [Sensors.DragSensor],\n});\n\n// Remove default mouse sensor\ndraggable.removeSensor(Sensors.MouseSensor);\n```\n\n----------------------------------------\n\nTITLE: Using Collidable with Standalone Browser Script in HTML\nDESCRIPTION: Shows how to use the Collidable plugin with the standalone UMD build of Draggable in a browser environment. This approach doesn't require a module bundler.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const draggable = new Draggable.Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    collidables: '.other-list',\n    plugins: [Draggable.Plugins.Collidable],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Excluding Default Plugins and Sensors in Shopify Draggable\nDESCRIPTION: This snippet shows how to create a draggable instance while excluding specific default plugins and sensors. It demonstrates exclusion of the Focusable plugin and TouchSensor from the Draggable configuration.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  exclude: {\n    plugins: [Draggable.Plugins.Focusable],\n    sensors: [Draggable.Sensors.TouchSensor],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Droppable with Plugins in TypeScript using Shopify Draggable\nDESCRIPTION: Shows how to create a Droppable instance with the Collidable plugin. Demonstrates proper event type handling when using multiple plugin event types, including manual specification of event names and type declarations.\nSOURCE: https://github.com/shopify/draggable/blob/main/doc/typescript.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Droppable, Plugins} from '@shopify/draggable';\n\n// 1. import the event names you need\nimport type {\n  DroppableEventNames,\n  CollidableEventNames,\n} from \"@shopify/draggable\";\n\n// 2. Specify the event names when create the instance\nconst droppable = new Droppable<DroppableEventNames | CollidableEventNames>(document.querySelectorAll('.container'), {\n  draggable: '.item',\n  dropzone: '.dropzone',\n  collidables: '.other-list',\n  plugins: [Plugins.Collidable],\n});\n\n// The type of the first argument can be DroppableEventNames or CollidableEventNames\ndroppable.on('droppable:dropped', (evt) => {\n  // The type of evt is DroppableDroppedEvent\n});\n\n// The type of the first argument can be DroppableEventNames or CollidableEventNames\ndroppable.on('collidable:in', (evt) => {\n  // The type of evt is CollidableInEvent\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mirror Append Target in Sortable\nDESCRIPTION: This example demonstrates how to customize where the mirror element should be appended in the DOM. It sets the appendTo option to a CSS selector targeting a different container element.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable} from '@shopify/draggable';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  mirror: {\n    appendTo: '.some-other-element',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SwapAnimation with NPM in JavaScript\nDESCRIPTION: Example showing how to import and initialize the SwapAnimation plugin using NPM packages. Demonstrates configuration of animation duration, easing function, and horizontal movement.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SwapAnimation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sortable, Plugins} from '@shopify/draggable';\n// Or\nimport Sortable from '@shopify/draggable/build/esm/Sortable/Sortable';\nimport SwapAnimation from '@shopify/draggable/build/esm/Plugins/SwapAnimation';\n\nconst sortable = new Sortable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  swapAnimation: {\n    duration: 200,\n    easingFunction: 'ease-in-out',\n    horizontal: true,\n  },\n  plugins: [Plugins.SwapAnimation], // Or [SwapAnimation]\n});\n```\n\n----------------------------------------\n\nTITLE: Using ResizeMirror Plugin as a Browser Module in HTML\nDESCRIPTION: This snippet shows how to import and use the Draggable library and ResizeMirror plugin as a module in a browser environment using ES6 import syntax.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/ResizeMirror/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Draggable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Draggable/Draggable.mjs';\n  import ResizeMirror from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/ResizeMirror.mjs';\n\n  const draggable = new Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    plugins: [ResizeMirror],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Snappable Plugin with NPM in JavaScript\nDESCRIPTION: This snippet demonstrates how to integrate the Snappable plugin when using Draggable via NPM. It shows two import methods: either importing from the main package or importing individual components.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Snappable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable, Plugins} from '@shopify/draggable';\n// Or\nimport Draggable from '@shopify/draggable/build/esm/Draggable/Draggable';\nimport Snappable from '@shopify/draggable/build/esm/Plugins/Snappable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n  plugins: [Plugins.Snappable], // Or [Snappable]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Plugins via ES Modules (CDN)\nDESCRIPTION: Example showing how to import all Draggable plugins using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import * as Plugins from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/index.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Collidable as Browser Module in HTML\nDESCRIPTION: Demonstrates how to import the Collidable plugin as an ES module in the browser using a CDN. This approach uses the module import syntax within script tags with type=\"module\".\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Draggable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Draggable/Draggable.mjs';\n  import Collidable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/Collidable.mjs';\n\n  const draggable = new Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    collidables: '.other-list',\n    plugins: [Collidable],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Focusable Plugin with Draggable\nDESCRIPTION: Constructor signature for creating a new Focusable plugin instance that works with Draggable elements. The plugin adds tabindex attributes to make elements focusable without overriding existing tabindex values.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Focusable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Focusable(draggable: Draggable): Focusable\n```\n\n----------------------------------------\n\nTITLE: Importing Droppable Module via ES Modules (CDN)\nDESCRIPTION: Example showing how to import only the Droppable module using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Droppable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Droppable/Droppable.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing SwapAnimation as Browser Module\nDESCRIPTION: Example of implementing the SwapAnimation plugin as a browser module using CDN imports. Shows setup with animation configuration for web-based applications.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SwapAnimation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Sortable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Sortable/Sortable.mjs';\n  import SwapAnimation from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/SwapAnimation.mjs';\n\n  const sortable = new Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    swapAnimation: {\n      duration: 200,\n      easingFunction: 'ease-in-out',\n      horizontal: true,\n    },\n    plugins: [SwapAnimation],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Draggable via UMD Bundle (CDN)\nDESCRIPTION: Example showing how to load the Draggable library using UMD format from a CDN and access it through the global window object.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  console.log(window.Draggable);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Swappable Module via ES Modules (CDN)\nDESCRIPTION: Example showing how to import only the Swappable module using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Swappable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Swappable/Swappable.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Swappable as Browser Module\nDESCRIPTION: Demonstrates how to implement Swappable as a browser module using ESM imports. Sets up swappable functionality for list items.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Swappable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Swappable/Swappable.mjs';\n\n  const swappable = new Swappable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Draggable Core Module via ES Modules (CDN)\nDESCRIPTION: Example showing how to import only the core Draggable module using ES module imports from a CDN source.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Draggable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Draggable/Draggable.mjs';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using SortAnimation Plugin as a Browser Module in HTML\nDESCRIPTION: Shows how to use the Sortable component and SortAnimation plugin as a module in a browser environment, importing from a CDN and initializing a Sortable instance.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SortAnimation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Sortable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Sortable/Sortable.mjs';\n  import Snappable from 'https://cdn.jsdelivr.net/npm/@shopify/draggable/build/esm/Plugins/Snappable.mjs';\n\n  const sortable = new Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    sortAnimation: {\n      duration: 200,\n      easingFunction: 'ease-in-out',\n    },\n    plugins: [Snappable],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing TouchSensor Constructor\nDESCRIPTION: Constructor signature for creating a new TouchSensor instance. Takes container elements and configuration options as parameters.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/TouchSensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew TouchSensor(containers: HTMLElement[]|NodeList|HTMLElement, options: Object): TouchSensor\n```\n\n----------------------------------------\n\nTITLE: Accessing SensorEvent Properties in JavaScript\nDESCRIPTION: Reference for the SensorEvent API properties available in the Draggable library. These properties provide access to the original event, coordinates, target elements, and pressure information for drag operations.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/SensorEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsensorEvent.originalEvent: Event\nsensorEvent.clientX: Number\nsensorEvent.clientY: Number\nsensorEvent.target: HTMLElement\nsensorEvent.container: Number\nsensorEvent.originalSource: String\nsensorEvent.pressure: Number\n```\n\n----------------------------------------\n\nTITLE: Setting up SwapAnimation with Standalone Browser Script\nDESCRIPTION: Implementation example using the standalone UMD bundle via CDN, showing how to configure the SwapAnimation plugin without module imports.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/SwapAnimation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const sortable = new Draggable.Sortable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    swapAnimation: {\n      duration: 200,\n      easingFunction: 'ease-in-out',\n      horizontal: true,\n    },\n    plugins: [Draggable.Plugins.SwapAnimation],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Final Dropzone in DroppableStopEvent\nDESCRIPTION: Shows how to access the final dropzone element of the draggable element in DroppableStopEvent.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/DroppableEvent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**`droppableEvent.dropzone: HTMLElement`**  \nRead-only property for the final dropzone element of the draggable element\n```\n\n----------------------------------------\n\nTITLE: Using ResizeMirror Plugin with Standalone Draggable in HTML\nDESCRIPTION: This snippet demonstrates how to use the Draggable library and ResizeMirror plugin in a browser environment using the standalone UMD build, without module imports.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/ResizeMirror/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const draggable = new Draggable.Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    plugins: [Draggable.Plugins.ResizeMirror],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sensor Class Constructor - JavaScript\nDESCRIPTION: Constructor signature for creating a new Sensor instance. Takes an array of container elements or NodeList and configuration options as parameters.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/Sensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Sensor(containers: HTMLElement[]|NodeList|HTMLElement, options: Object): Sensor\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Dropzone in DroppableReturnedEvent\nDESCRIPTION: Demonstrates how to access the original dropzone element from which the draggable element was moved in DroppableReturnedEvent.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/DroppableEvent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n**`droppableEvent.dropzone: HTMLElement`**  \nRead-only property for the dropzone element you dragged away from\n```\n\n----------------------------------------\n\nTITLE: Implementing Snappable Plugin with Standalone Browser Script\nDESCRIPTION: This snippet demonstrates how to use the Snappable plugin with Draggable as a standalone script in the browser. It loads the UMD bundle from a CDN and initializes a draggable instance with the Snappable plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Snappable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const draggable = new Draggable.Draggable(document.querySelectorAll('ul'), {\n    draggable: 'li',\n    plugins: [Draggable.Plugins.Snappable],\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dropzone in DroppableDroppedEvent\nDESCRIPTION: Shows how to access the dropzone element where the draggable element was dropped in DroppableDroppedEvent.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/DroppableEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**`droppableEvent.dropzone: HTMLElement`**  \nRead-only property for the dropzone element you dropped the draggable element into\n```\n\n----------------------------------------\n\nTITLE: Using Droppable as Standalone Browser Script\nDESCRIPTION: Shows how to implement Droppable using the standalone UMD build in a browser environment.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@shopify/draggable/build/umd/index.min.js\"></script>\n<script>\n  const droppable = new Draggable.Droppable(\n    document.querySelectorAll('.container'),\n    {\n      draggable: '.item',\n      dropzone: '.dropzone',\n    },\n  );\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sensor Event Trigger Method - JavaScript\nDESCRIPTION: Method to trigger sensor events on specified container elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/Sensor/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsensor.trigger(element: HTMLElement, sensorEvent: SensorEvent): void\n```\n\n----------------------------------------\n\nTITLE: Finding Scrollable Parent Element in Draggable Library\nDESCRIPTION: A utility function that identifies the first scrollable parent element of a given element. It checks for overflow properties and returns the document if no scrollable parent is found.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function closest(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n  \n  // Fallback for browsers without Element.closest\n  const matches = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector;\n  \n  let current = element;\n  \n  while (current) {\n    if (matches.call(current, selector)) {\n      return current;\n    }\n    \n    current = current.parentElement;\n  }\n  \n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using AbstractPlugin Class in Draggable Library\nDESCRIPTION: Demonstrates how to import and use the AbstractPlugin class which provides a foundation for plugins in the Draggable library. It shows the basic structure of a plugin with optional lifecycle methods like attach() and detach().\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport AbstractPlugin from 'shared/plugins/abstract-plugin';\n\nexport default class CustomPlugin extends AbstractPlugin {\n  constructor(draggable) {\n    super(draggable);\n    // plugin initialization\n  }\n  \n  attach() {\n    // Called when plugin is attached\n  }\n  \n  detach() {\n    // Called when plugin is detached \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting CSS Transform Property Based on Browser Support in Draggable Library\nDESCRIPTION: A utility function that determines the appropriate CSS transform property based on browser support. It checks various vendor prefixes to ensure compatibility across different browsers.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getTransformProperty() {\n  const testElement = document.createElement('div');\n  const transformProperties = [\n    'transform',\n    'webkitTransform',\n    'mozTransform',\n    'msTransform',\n    'oTransform',\n  ];\n  \n  for (const property of transformProperties) {\n    if (testElement.style[property] !== undefined) {\n      return property;\n    }\n  }\n  \n  return 'transform';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mouse Sensor in JavaScript\nDESCRIPTION: Demonstrates how to create a new MouseSensor instance. It specifies the containers the sensor should monitor and accepts configuration options.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/MouseSensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew MouseSensor(containers: HTMLElement[]|NodeList|HTMLElement, options: Object): MouseSensor\n```\n\n----------------------------------------\n\nTITLE: Getting Focusable Elements\nDESCRIPTION: Method to retrieve all container and draggable elements that have been made focusable by the plugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Focusable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfocusable.getElements(): HTMLElement[]\n```\n\n----------------------------------------\n\nTITLE: Creating a DOM Element with Specified Attributes in Draggable Library\nDESCRIPTION: A utility function for creating DOM elements with specified attributes. This is used throughout the Draggable library to create elements with consistent properties.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createElement(tagName, options = {}) {\n  const element = document.createElement(tagName);\n  \n  Object.keys(options).forEach((key) => {\n    element[key] = options[key];\n  });\n  \n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Force Touch Sensor with Draggable in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new Draggable instance with the Force Touch Sensor. It imports the necessary components from the @shopify/draggable package and initializes a draggable object with containers and the Force Touch Sensor.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/ForceTouchSensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable, Sensors} from '@shopify/draggable';\n\nconst draggable = new Draggable(containers, {\n  sensors: [Sensors.ForceTouchSensor],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Element is Document in Draggable Library\nDESCRIPTION: A utility function that determines if the provided element is of type Document. This is used throughout the Draggable library for proper event handling and DOM operations.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function isDocument(element) {\n  return Boolean(element && element.nodeType === NODE_TYPE.DOCUMENT);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Element.closest() Helper Function in JavaScript\nDESCRIPTION: A helper function that finds the closest ancestor element matching a specific selector. It traverses up the DOM tree until it finds a match or reaches the document root. Supports both element and selector string parameters.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/utils/closest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns closest parent element matching selector\n * @param {HTMLElement} element\n * @param {String} selector\n * @return {HTMLElement}\n */\nexport default function closest(element, value) {\n  if (element && typeof element.closest === 'function') {\n    return element.closest(value);\n  }\n\n  const matches = (Element.prototype.matches ||\n    Element.prototype.webkitMatchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector).bind(element);\n\n  let current = element;\n\n  do {\n    if (matches(value)) {\n      return current;\n    }\n\n    current = current.parentElement;\n  } while (current && current !== document.documentElement);\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching listeners for a Draggable plugin\nDESCRIPTION: Method to detach event listeners for the plugin. This should be implemented by plugin classes that extend AbstractPlugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractPlugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.detach(): void\n```\n\n----------------------------------------\n\nTITLE: Defining DragStopEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragStopEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                                                    |\n| ----------------- | -------------------------------------------------- |\n| **Specification** | `DragEvent`                                        |\n| **Interface**     | `DragStopEvent`                                    |\n| **Cancelable**    | true                                               |\n| **Cancel action** | Prevent item from being added where it was dropped |\n| **type**          | `drag:stop`                                        |\n```\n\n----------------------------------------\n\nTITLE: Requesting Next Animation Frame in JavaScript\nDESCRIPTION: This utility method requests the next animation frame by double wrapping animation frames. This technique can potentially improve performance and smoothness of animations.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/utils/requestNextAnimationFrame/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequestNextAnimationFrame\n```\n\n----------------------------------------\n\nTITLE: Defining DragOutEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragOutEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                |\n| ----------------- | -------------- |\n| **Specification** | `DragEvent`    |\n| **Interface**     | `DragOutEvent` |\n| **Cancelable**    | false          |\n| **Cancel action** | -              |\n| **type**          | `drag:out`     |\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Draggable Examples Project\nDESCRIPTION: Commands for cloning the repository and starting the local development server. This will set up the project and make it accessible at localhost:3000.\nSOURCE: https://github.com/shopify/draggable/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Shopify/draggable.git\nyarn && yarn start\n```\n\n----------------------------------------\n\nTITLE: Defining DraggableEvent Properties in Markdown\nDESCRIPTION: Describes the base DraggableEvent with its interface, cancelability, and type. It also includes an API section detailing a read-only property for the current draggable instance.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DraggableEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## DraggableEvent\n\nThe base draggable event for all Draggable events that `Draggable` emits.\n\n| | |\n| --------------------- | ---------------------------------------------------------- |\n| **Interface**         | `DraggableEvent`                                           |\n| **Cancelable**        | false                                                      |\n| **Cancel action**     | -                                                          |\n| **type**              | `draggable`                                                |\n\n### API\n\n**`draggableEvent.draggable: Draggable`**  \nRead-only property for the current draggable instance\n```\n\n----------------------------------------\n\nTITLE: Defining DragMoveEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragMoveEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                 |\n| ----------------- | --------------- |\n| **Specification** | `DragEvent`     |\n| **Interface**     | `DragMoveEvent` |\n| **Cancelable**    | false           |\n| **Cancel action** | -               |\n| **type**          | `drag:move`     |\n```\n\n----------------------------------------\n\nTITLE: Creating an AbstractPlugin instance in JavaScript\nDESCRIPTION: Instantiates a new AbstractPlugin with a Draggable instance. This is the base constructor for all draggable plugins.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractPlugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew AbstractPlugin(draggable: Draggable): AbstractPlugin\n```\n\n----------------------------------------\n\nTITLE: Defining DragStartEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragStartEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                     |\n| ----------------- | ------------------- |\n| **Specification** | `DragEvent`         |\n| **Interface**     | `DragStartEvent`    |\n| **Cancelable**    | true                |\n| **Cancel action** | Prevents drag start |\n| **type**          | `drag:start`        |\n```\n\n----------------------------------------\n\nTITLE: Listing Default Draggable Plugins in Markdown\nDESCRIPTION: A markdown list documenting the default plugins included in the Draggable library, with links to their respective documentation sections.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Announcement](Announcement)\n- [Focusable](Focusable)\n- [Mirror](Mirror)\n- [Scrollable](Scrollable)\n```\n\n----------------------------------------\n\nTITLE: Defining DragEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the base DragEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |             |\n| ----------------- | ----------- |\n| **Specification** | `DragEvent` |\n| **Interface**     | `DragEvent` |\n| **Cancelable**    | false       |\n| **Cancel action** | -           |\n| **type**          | `drag`      |\n```\n\n----------------------------------------\n\nTITLE: Cloning an AbstractEvent in JavaScript\nDESCRIPTION: Method to create a new AbstractEvent instance with existing event data, allowing for data overrides. Takes a data object parameter and returns an AbstractEvent instance.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.clone(data: Object): AbstractEvent\n```\n\n----------------------------------------\n\nTITLE: Defining DraggableInitializedEvent Properties in Markdown\nDESCRIPTION: Describes the DraggableInitializedEvent, which is triggered when Draggable is initialized. It includes the event's specification, interface, cancelability, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DraggableEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## DraggableInitializedEvent\n\n`DraggableInitializedEvent` gets triggered by `Draggable` when initialized.\n\n| | |\n| --------------------- | ---------------------------------------------------------- |\n| **Specification**     | `DraggableEvent`                                           |\n| **Interface**         | `DraggableInitializedEvent`                                |\n| **Cancelable**        | false                                                      |\n| **Cancel action**     | -                                                          |\n| **type**              | `draggable:initialized`                                    |\n```\n\n----------------------------------------\n\nTITLE: Checking if an AbstractEvent is Canceled in JavaScript\nDESCRIPTION: Method to check if an event has been canceled. Returns a Boolean value indicating the canceled state.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.canceled(): Boolean\n```\n\n----------------------------------------\n\nTITLE: Defining DragStoppedEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragStoppedEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                    |\n| ----------------- | ------------------ |\n| **Specification** | `DragEvent`        |\n| **Interface**     | `DragStoppedEvent` |\n| **Cancelable**    | false              |\n| **Cancel action** | -                  |\n| **type**          | `drag:stopped`     |\n```\n\n----------------------------------------\n\nTITLE: Defining DragOverEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragOverEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                                                       |\n| ----------------- | ----------------------------------------------------- |\n| **Specification** | `DragEvent`                                           |\n| **Interface**     | `DragOverEvent`                                       |\n| **Cancelable**    | true                                                  |\n| **Cancel action** | Cancels default actions in `Sortable` and `Swappable` |\n| **type**          | `drag:over`                                           |\n```\n\n----------------------------------------\n\nTITLE: Canceling an AbstractEvent in JavaScript\nDESCRIPTION: Method to cancel a drag start event. This void method doesn't return any value.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.cancel(): void\n```\n\n----------------------------------------\n\nTITLE: Defining DragPressureEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragPressureEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                     |\n| ----------------- | ------------------- |\n| **Specification** | `DragEvent`         |\n| **Interface**     | `DragPressureEvent` |\n| **Cancelable**    | false               |\n| **Cancel action** | -                   |\n| **type**          | `drag:pressure`     |\n```\n\n----------------------------------------\n\nTITLE: Creating an AbstractEvent Instance in JavaScript\nDESCRIPTION: Constructor for creating a new AbstractEvent instance. Takes a data object as its parameter and returns an AbstractEvent instance.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew AbstractEvent(data: Object): AbstractEvent\n```\n\n----------------------------------------\n\nTITLE: Defining SwappableSwappedEvent Interface\nDESCRIPTION: Interface for swapped events that extends SwappableEvent with a property referencing the element that was swapped with.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/SwappableEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SwappableSwappedEvent extends SwappableEvent {\n  readonly swappedElement: HTMLElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DragOverContainerEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragOverContainerEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                          |\n| ----------------- | ------------------------ |\n| **Specification** | `DragEvent`              |\n| **Interface**     | `DragOverContainerEvent` |\n| **Cancelable**    | false                    |\n| **Cancel action** | -                        |\n| **type**          | `drag:over:container`    |\n```\n\n----------------------------------------\n\nTITLE: Collidable Out Event Interface\nDESCRIPTION: Event interface for detecting when a draggable element leaves a collision area. Extends the base CollidableEvent and includes the previously colliding element.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/CollidableEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollidableOutEvent extends CollidableEvent {\n  readonly collidingElement: HTMLElement;\n  type: 'collidable:out';\n}\n```\n\n----------------------------------------\n\nTITLE: Collidable In Event Interface\nDESCRIPTION: Event interface for detecting when a draggable element collides with specified collidable elements. Extends the base CollidableEvent and adds a collidingElement property.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/CollidableEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollidableInEvent extends CollidableEvent {\n  readonly collidingElement: HTMLElement;\n  type: 'collidable:in';\n}\n```\n\n----------------------------------------\n\nTITLE: Base Collidable Event Interface\nDESCRIPTION: Base event interface for collision detection that includes a read-only dragEvent property. Used as the foundation for other collidable events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/Collidable/CollidableEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollidableEvent {\n  readonly dragEvent: DragEvent;\n  type: 'collidable';\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dropzone in DroppableStartEvent\nDESCRIPTION: Demonstrates how to access the initial dropzone element of the currently dragging draggable element in DroppableStartEvent.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/DroppableEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**`droppableEvent.dropzone: HTMLElement`**  \nRead-only property for the initial dropzone element of the currently dragging draggable element\n```\n\n----------------------------------------\n\nTITLE: Defining DragOutContainerEvent Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DragOutContainerEvent in a markdown table format. It includes specification, interface, cancelability, cancel action, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DragEvent/README.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n|                   |                         |\n| ----------------- | ----------------------- |\n| **Specification** | `DragEvent`             |\n| **Interface**     | `DragOutContainerEvent` |\n| **Cancelable**    | false                   |\n| **Cancel action** | -                       |\n| **type**          | `drag:out:container`    |\n```\n\n----------------------------------------\n\nTITLE: Defining SwappableSwapEvent Interface\nDESCRIPTION: Interface for swap events that extends SwappableEvent with properties for the element and container being swapped over.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/SwappableEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SwappableSwapEvent extends SwappableEvent {\n  readonly over: HTMLElement;\n  readonly overContainer: HTMLElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Drag Event in DroppableEvent\nDESCRIPTION: Shows how to access the original drag event that triggered the droppable event using the dragEvent property of DroppableEvent.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/DroppableEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**`droppableEvent.dragEvent: DragEvent`**  \nRead-only property for the original drag event that triggered the droppable event.\n```\n\n----------------------------------------\n\nTITLE: Defining SwappableEvent Interface\nDESCRIPTION: Base interface for Swappable events with a read-only dragEvent property that references the original drag event.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Swappable/SwappableEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SwappableEvent {\n  readonly dragEvent: DragEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if an AbstractEvent is Cancelable in JavaScript\nDESCRIPTION: Read-only property to check if the event can be canceled. Returns a Boolean value.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.cancelable: Boolean\n```\n\n----------------------------------------\n\nTITLE: Defining MirrorMoveEvent API in Markdown\nDESCRIPTION: Describes the API for MirrorMoveEvent, including properties for the mirror element and threshold checks.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/MirrorEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**`mirrorEvent.mirror: HTMLElement`**  \nRead-only property for the mirror element, which is also a copy of the `originalSource` element.\nThe mirror follows your mouse/touch movements.\n\n**`mirrorEvent.passedThreshX: Booolean`**  \nRead-only property for whether or not the mirror's threshold has been exceeded in the x axis.\n\n**`mirrorEvent.passedThreshY: Booolean`**  \nRead-only property for whether or not the mirror's threshold has been exceeded in the y axis.\n```\n\n----------------------------------------\n\nTITLE: Defining MirrorCreatedEvent API in Markdown\nDESCRIPTION: Describes the API for MirrorCreatedEvent, which includes a read-only property for the mirror element.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/MirrorEvent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**`mirrorEvent.mirror: HTMLElement`**  \nRead-only property for the mirror element, which is also a copy of the `originalSource` element.\nThe mirror follows your mouse/touch movements.\n```\n\n----------------------------------------\n\nTITLE: Accessing an AbstractEvent's Type in JavaScript\nDESCRIPTION: Read-only property to determine the event type. Returns a String value.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractEvent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.type: String\n```\n\n----------------------------------------\n\nTITLE: Defining MirrorEvent Interface in Markdown\nDESCRIPTION: Describes the base MirrorEvent interface with its properties and read-only attributes for source elements, containers, and sensor events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Mirror/MirrorEvent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**`mirrorEvent.source: HTMLElement`**  \nRead-only property for the source element. This is a straight copy of the `originalSource`\nelement, which can be moved around in the DOM.\n\n**`mirrorEvent.originalSource: HTMLElement`**  \nRead-only property for the original source element that was picked up. This element never\nmoves in the DOM and gets hidden on `drag:start`.\n\n**`mirrorEvent.sourceContainer: HTMLElement`**  \nRead-only property for the source elements container. This would be one of the containers that\nwas passed into Draggable.\n\n**`mirrorEvent.sensorEvent: SensorEvent`**  \nRead-only property for the original sensor event that triggered this event.\n\n**`mirrorEvent.originalEvent: SensorEvent`**  \nRead-only property for the original event that triggered the sensor event.\n```\n\n----------------------------------------\n\nTITLE: Checking if Element is Element Node in Draggable Library\nDESCRIPTION: A utility function that determines if the provided node is an Element node. Used for type checking in DOM operations throughout the Draggable library.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function isElement(element) {\n  return Boolean(element && element.nodeType === NODE_TYPE.ELEMENT);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Draggable Development Server\nDESCRIPTION: Commands to install dependencies and start the development server for running the examples project locally. This watches for file changes and reloads the browser automatically.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn && yarn start\n```\n\n----------------------------------------\n\nTITLE: Defining DraggableDestroyEvent Properties in Markdown\nDESCRIPTION: Describes the DraggableDestroyEvent, which is triggered when Draggable is destroyed. It includes the event's specification, interface, cancelability, and type.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/DraggableEvent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## DraggableDestroyEvent\n\n`DraggableDestroyEvent` gets triggered by `Draggable` when destroyed.\n\n| | |\n| --------------------- | ---------------------------------------------------------- |\n| **Specification**     | `DraggableEvent`                                           |\n| **Interface**         | `DraggableDestroyEvent`                                    |\n| **Cancelable**        | false                                                      |\n| **Cancel action**     | -                                                          |\n| **type**              | `draggable:destroy`                                        |\n```\n\n----------------------------------------\n\nTITLE: Sensor Detachment Method - JavaScript\nDESCRIPTION: Method to remove sensor listeners from DOM elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/Sensor/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsensor.detach(): void\n```\n\n----------------------------------------\n\nTITLE: Installing Droppable via NPM\nDESCRIPTION: Shows how to import and initialize the Droppable component using NPM package manager.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Droppable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Droppable} from '@shopify/draggable';\n// Or\nimport Droppable from '@shopify/draggable/build/esm/Droppable/Droppable';\n\nconst droppable = new Droppable(document.querySelectorAll('.container'), {\n  draggable: '.item',\n  dropzone: '.dropzone',\n});\n```\n\n----------------------------------------\n\nTITLE: Sensor Attachment Method - JavaScript\nDESCRIPTION: Method to attach sensor listeners to DOM elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/Sensor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsensor.attach(): void\n```\n\n----------------------------------------\n\nTITLE: Running Draggable Locally with Yarn\nDESCRIPTION: Steps to set up and run the Draggable project locally using Yarn package manager, including installation and testing commands.\nSOURCE: https://github.com/shopify/draggable/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd draggable\n$ yarn install\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Component Example\nDESCRIPTION: Example of using Nunjucks template syntax to render a Block component with specific parameters. Shows how to set a heading and additional properties.\nSOURCE: https://github.com/shopify/draggable/blob/main/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{{ Block.render('one', {index: 1, draggable: true}) }}\n```\n\n----------------------------------------\n\nTITLE: Attaching listeners for a Draggable plugin\nDESCRIPTION: Method to attach event listeners for the plugin. This should be implemented by plugin classes that extend AbstractPlugin.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/shared/AbstractPlugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nabstractEvent.attach(): void\n```\n\n----------------------------------------\n\nTITLE: Using JS Docblocks for Documentation in Draggable\nDESCRIPTION: Examples of proper JavaScript docblock formatting for different code elements including methods, properties, constants, classes, and constructors following the library's convention.\nSOURCE: https://github.com/shopify/draggable/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Some method description\n * @param {ParameterType} parameterName\n * @return {ReturnType}\n * @private\n * @static\n * @readonly\n */\n\n/**\n * Some instance property description\n * @property {PropertyType} propertyName\n * @private\n * @static\n * @readonly\n */\n\n/**\n * Some constant description\n * @const {ConstType} constName\n */\n\n/**\n * Some class description\n * @class ClassName\n * @module ClassName\n * @extends BaseClassName\n */\n\n/**\n * Constructor description\n * @constructs ClassName\n */\n```\n\n----------------------------------------\n\nTITLE: Detaching Mouse Sensor in JavaScript\nDESCRIPTION: Illustrates the method to detach the mouse sensor from the DOM, stopping it from monitoring mouse events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/MouseSensor/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmouseSensor.detach(): void\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Plugin Section Header\nDESCRIPTION: A markdown header indicating the plugins section of the documentation.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Plugins\n```\n\n----------------------------------------\n\nTITLE: Attaching Mouse Sensor in JavaScript\nDESCRIPTION: Shows the method to attach the mouse sensor to the DOM, enabling it to start monitoring for mouse events.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/MouseSensor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmouseSensor.attach(): void\n```\n\n----------------------------------------\n\nTITLE: Installing Draggable with yarn\nDESCRIPTION: Command to install the Draggable library using yarn package manager.\nSOURCE: https://github.com/shopify/draggable/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @shopify/draggable\n```\n\n----------------------------------------\n\nTITLE: TouchSensor Detach Method\nDESCRIPTION: Method signature for removing touch sensor listeners from DOM elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/TouchSensor/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntouchSensor.detach(): void\n```\n\n----------------------------------------\n\nTITLE: Removing and Replacing the Scrollable Plugin in JavaScript\nDESCRIPTION: Example showing how to remove the default Scrollable plugin from a Draggable instance and replace it with a custom scroll plugin implementation.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Plugins/Scrollable/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Draggable} from '@shopify/draggable';\n\nconst draggable = new Draggable(document.querySelectorAll('ul'), {\n  draggable: 'li',\n});\n\n// Removes Scrollable plugin\ndraggable.removePlugin(Draggable.Plugin.Scrollable);\n\n// Adds custom scroll plugin\ndraggable.addPlugin(CustomScrollPlugin);\n```\n\n----------------------------------------\n\nTITLE: TouchSensor Attach Method\nDESCRIPTION: Method signature for attaching touch sensor listeners to DOM elements.\nSOURCE: https://github.com/shopify/draggable/blob/main/src/Draggable/Sensors/TouchSensor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntouchSensor.attach(): void\n```"
  }
]