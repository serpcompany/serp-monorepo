[
  {
    "owner": "signalr",
    "repo": "signalr",
    "content": "TITLE: Mapping SignalR Hubs Connection in C#\nDESCRIPTION: Sets up the basic hub routing for SignalR by creating a Startup class with a Configuration method that calls app.MapSignalR(). This is a required step for SignalR Hubs to work properly.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/SelfhostReadme.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNet.SignalR;\nusing Owin;\n \nnamespace MyWebApplication\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.MapSignalR();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SignalR with OWIN in ASP.NET Application\nDESCRIPTION: Sets up the SignalR hub connection in an ASP.NET application using OWIN middleware. This is done by creating a Startup class that implements the Configuration method to map SignalR routes.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/Readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Owin;\nusing Owin;\nusing MyWebApplication;\n\nnamespace MyWebApplication\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.MapSignalR();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS for SignalR in C#\nDESCRIPTION: Configures Cross-Origin Resource Sharing (CORS) for SignalR to allow cross-domain requests. This example demonstrates mapping to a specific path, configuring CORS middleware to run before SignalR, and setting up hub configuration options including an optional JSONP setting.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/SelfhostReadme.txt#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.AspNet.SignalR;\nusing Microsoft.Owin.Cors;\nusing Owin;\n \nnamespace MyWebApplication\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.Map(\"/signalr\", map =>\n            {\n                // Setup the cors middleware to run before SignalR.\n                // By default this will allow all origins. You can \n                // configure the set of origins and/or http verbs by\n                // providing a cors options with a different policy.\n                map.UseCors(CorsOptions.AllowAll);\n                \n                var hubConfiguration = new HubConfiguration \n                {\n                    // You can enable JSONP by uncommenting line below.\n                    // JSONP requests are insecure but some older browsers (and some\n                    // versions of IE) require JSONP to work cross domain\n                    // EnableJSONP = true\n                };\n                \n                // Run the SignalR pipeline. We're not using MapSignalR\n                // since this branch is already runs under the \"/signalr\"\n                // path.\n                map.RunSignalR(hubConfiguration);\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an OWIN Web Server with SignalR in C#\nDESCRIPTION: Demonstrates how to start a self-hosted web server using OWIN's WebApp.Start method and the Startup configuration class. The example binds to localhost on port 8080 and includes console output to indicate the server is running.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/SelfhostReadme.txt#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing Microsoft.Owin.Hosting;\n \nnamespace MyWebApplication\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            // This will *ONLY* bind to localhost, if you want to bind to all addresses\n            // use http://*:8080 or http://+:8080 to bind to all addresses. \n            // See http://msdn.microsoft.com/en-us/library/system.net.httplistener.aspx \n            // for more information.\n            \n            using (WebApp.Start<Startup>(\"http://localhost:8080/\"))\n            {\n                Console.WriteLine(\"Server running at http://localhost:8080/\");\n                Console.ReadLine();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hub JavaScript in ASP.NET MVC 4\nDESCRIPTION: Adds a script reference to the auto-generated SignalR Hub JavaScript proxy in an ASP.NET MVC 4 application. This is necessary for client-side code to communicate with SignalR hubs.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/Readme.txt#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"~/signalr/hubs\"></script>\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hub JavaScript in Regular ASP.NET Applications\nDESCRIPTION: Adds a script reference to the auto-generated SignalR Hub JavaScript proxy in a regular ASP.NET application using ResolveClientUrl. This ensures proper path resolution in traditional ASP.NET applications.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/Readme.txt#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src='<%: ResolveClientUrl(\"~/signalr/hubs\") %>'></script>\n```\n\n----------------------------------------\n\nTITLE: Installing SignalR Package via NuGet\nDESCRIPTION: Command to install the main Microsoft.AspNet.SignalR package using NuGet package manager.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.AspNet.SignalR\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hub JavaScript in ASP.NET MVC 3\nDESCRIPTION: Adds a script reference to the auto-generated SignalR Hub JavaScript proxy in an ASP.NET MVC 3 application using Url.Content helper. This ensures proper path resolution in MVC 3 applications.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/readmes/Readme.txt#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"@Url.Content(\"~/signalr/hubs\")\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing SignalR Sample Package via NuGet\nDESCRIPTION: Command to install the Microsoft.AspNet.SignalR.Sample package that includes example implementations.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.AspNet.SignalR.Sample\n```\n\n----------------------------------------\n\nTITLE: Running SignalR Server Output Example\nDESCRIPTION: Example of the server output when running SignalR tests locally, showing the listening URL and shutdown instructions.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/test/Microsoft.AspNet.SignalR.Client.JS.Tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNow listening on http://localhost:8989/\nServer started, press Ctrl-C to shut down.\n```\n\n----------------------------------------\n\nTITLE: Building with Azure SignalR Tests\nDESCRIPTION: Command to build the project with Azure SignalR tests enabled.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/test/Microsoft.AspNet.SignalR.Client.JS.Tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -p:AzureSignalRTests=true\n```\n\n----------------------------------------\n\nTITLE: Running Azure SignalR Tests\nDESCRIPTION: Command to run the project with Azure SignalR connection string.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/test/Microsoft.AspNet.SignalR.Client.JS.Tests/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --no-build -- --azure-signalr \"Endpoint=https://myendpoint.service.signalr.net;AccessKey=accesskey\"\n```\n\n----------------------------------------\n\nTITLE: Cloning SignalR Repository\nDESCRIPTION: Git command to clone the SignalR repository from GitHub using SSH or HTTPS.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:SignalR/SignalR.git\n```\n\n----------------------------------------\n\nTITLE: Enabling XML Build Properties for Azure SignalR\nDESCRIPTION: XML configuration to be uncommented in Directory.Build.props for Azure SignalR testing.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/test/Microsoft.AspNet.SignalR.Client.JS.Tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <DelaySign>true</DelaySign>\n    <SignAssembly>true</SignAssembly>\n```\n\n----------------------------------------\n\nTITLE: Configuring XML Build Properties for Azure SignalR Testing\nDESCRIPTION: XML configuration to be commented out in Directory.Build.props for Azure SignalR testing setup.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/test/Microsoft.AspNet.SignalR.Client.JS.Tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <DelaySign Condition=\"'$(CI)' == 'true' And '$(DelaySign)' == ''\">true</DelaySign>\n    <SignAssembly Condition=\"'$(CI)' == 'true' And '$(SignAssembly)' == ''\">true</SignAssembly>\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages in SignalR\nDESCRIPTION: Standard format for commit messages and pull requests in the SignalR project. Includes a summary line under 80 characters followed by detailed bullet points and a bug reference number.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSummary of the changes (Less than 80 chars)\n - Detail 1\n - Detail 2\n\n#bugnumber (in this specific format)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gitignore for SignalR Project\nDESCRIPTION: This gitignore configuration excludes JavaScript files, specific NuGet packages, and various build artifacts from version control. It targets SignalR-specific files and common build output directories.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/build/signcheck.exclusions.txt#2025-04-16_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n*.js\nMicrosoft.AspNet.SignalR.JS.*.nupkg\n\nMicrosoft.DiaSymReader.Pdb2Pdb.nupkg\n\nroslyntools.signtool.*.nupkg\n*\\artifacts\\hubs.js|\n*\\artifacts\\obj\\*|\n*\\artifacts\\Debug\\bin\\*|\n*\\artifacts\\Debug\\symbols\\*|\n*\\artifacts\\Release\\bin\\*|\n*\\artifacts\\Release\\symbols\\*|\n*\\artifacts\\tools\\*|\n```\n\n----------------------------------------\n\nTITLE: Security Policy Documentation in Markdown\nDESCRIPTION: HTML comment blocks and markdown formatting for Microsoft's security policy document, including sections for reporting procedures, communication preferences, and vulnerability disclosure principles.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/SECURITY.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nMicrosoft serves as the primary maintainer of this repository. If you believe you have found a security vulnerability that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Displaying SignalR Version and Commit Hash in Plaintext\nDESCRIPTION: This snippet shows the version number (2.1.7-build-20211124.1) and commit hash (30c0c6bc906a375bd85927ae575ee992965397a8) for a specific build of the SignalR project. This information is typically used for tracking builds and identifying specific versions of the software.\nSOURCE: https://github.com/SignalR/SignalR/blob/main/korebuild-lock.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nversion:2.1.7-build-20211124.1\ncommithash:30c0c6bc906a375bd85927ae575ee992965397a8\n```"
  }
]