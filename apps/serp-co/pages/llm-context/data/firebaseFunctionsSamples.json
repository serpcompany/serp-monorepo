[
  {
    "owner": "firebase",
    "repo": "functions-samples",
    "content": "TITLE: Implementing Authentication Blocking Functions for Firebase\nDESCRIPTION: Implementation of two Authentication Blocking Functions: one for validating phone numbers and another for validating email domains during user sign-up. These functions run before a user is created to enforce registration requirements.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/auth-blocking-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\n\n// Allow JAPAC phone numbers only.\nexports.beforeCreate = functions.auth.user().beforeCreate((user) => {\n  // Check if the user is signing in with a phone number.\n  if (user.phoneNumber) {\n    // Only allow JAPAC phone numbers: +81 (Japan), +60 (Malaysia).\n    if (!user.phoneNumber.startsWith('+81') && !user.phoneNumber.startsWith('+60')) {\n      throw new functions.auth.HttpsError('invalid-argument', 'Phone number does not belong to a supported JAPAC country!');\n    }\n  }\n  // Return if no phone number is provided. This function only validates phone auth.\n  return;\n});\n\n// Allow selected email domains only.\nexports.beforeSignIn = functions.auth.user().beforeSignIn((user) => {\n  // Check if the user is signing in with an email provider.\n  if (user.email) {\n    const domain = user.email.split('@')[1];\n    const allowedDomains = ['gmail.com', 'google.com'];\n    if (!allowedDomains.includes(domain)) {\n      throw new functions.auth.HttpsError('invalid-argument', `Email domain ${domain} is not allowed to register.`);\n    }\n  }\n  // Return if no email is provided. This function only validates email auth.\n  return;\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Firebase Cloud Functions with Image Processing\nDESCRIPTION: This is a requirements.txt or dependencies list for a Firebase project using Cloud Functions. It includes Firebase Functions SDK, Firebase Admin SDK for server-side operations, and Pillow for image processing capabilities.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/thumbnails/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase-functions\nfirebase-admin\npillow\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure Example for Blog Posts and Search\nDESCRIPTION: Example JSON structure showing how blog posts and search functionality are organized in the Firebase Realtime Database. Includes blog posts with timestamps and search queries with results.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/fulltext-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /blog-posts\n        /key-123456\n            text: \"This is my first blog entry...\"\n            last_index_timestamp: 1234567890\n        /key-123457\n            text: \"This is my second blog entry...\"\n            last_index_timestamp: 1234567891\n    /search\n        /queries\n            /key-546789\n                query: \"first entry\"\n            /key-078234\n                query: \"second entry\"\n        /results\n            /key-546789\n                hits: [...\n            /key-078234\n                hits: [...\n        /last_query_timestamp: 1234567892\n```\n\n----------------------------------------\n\nTITLE: Cloud Function for Transforming RTDB Data to Uppercase\nDESCRIPTION: This function listens for writes to the 'messages/{pushId}/original' path in Firebase Realtime Database, retrieves the text value, transforms it to uppercase, and then saves the uppercase version back to the 'messages/{pushId}/uppercase' path.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/uppercase-rtdb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst functions = require('firebase-functions');\n\n// [START uppercaseTrigger]\n// Listens for new messages added to /messages/:pushId/original and creates an\n// uppercase version of the message to /messages/:pushId/uppercase\nexports.makeUppercase = functions.database.ref('/messages/{pushId}/original')\n    .onWrite((change) => {\n      // Grab the current value of what was written to the Realtime Database.\n      const original = change.after.val();\n      console.log('Uppercasing', original);\n      const uppercase = original.toUpperCase();\n      // You must return a Promise when performing asynchronous tasks inside a Functions such as\n      // writing to the Firebase Realtime Database.\n      // Setting an \"uppercase\" sibling in the Realtime Database returns a Promise.\n      return change.after.ref.parent.child('uppercase').set(uppercase);\n    });\n// [END uppercaseTrigger]\n```\n\n----------------------------------------\n\nTITLE: Sending Discord Alert on New Firebase User Creation\nDESCRIPTION: This Firebase Cloud Function listens for new user creation events and sends an alert to a Discord channel when a new user is created. It includes error handling and logs the result of the Discord message send operation.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/alerts-to-discord/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.createUserAlert = functions.auth.user().onCreate((user) => {\n  sendMessage(`New User Created with UID: ${user.uid}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Database Structure for User Profile and Notification Tokens\nDESCRIPTION: JSON structure showing how user profiles and notification tokens are stored in Firebase Realtime Database. Each user has a unique ID with their display name, notification tokens, and photo URL.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/fcm-notifications/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /users\n        /Uid-12345\n            displayName: \"Bob Dole\"\n            /notificationTokens\n                1234567890: true\n            photoURL: \"https://lh3.googleusercontent.com/...\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Task Queues for Image Backup\nDESCRIPTION: Sets up three task queues for handling different image size backups using Cloud Tasks API. Defines queue configurations for original, thumbnail and small image sizes.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/taskqueues-backup-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst queues = {\n  original: new Queue('backup-images-original'),\n  thumbs: new Queue('backup-images-thumbs'),\n  small: new Queue('backup-images-small')\n};\n```\n\n----------------------------------------\n\nTITLE: Database Structure for Followers\nDESCRIPTION: JSON structure demonstrating how follower relationships are stored alongside user profiles in the Firebase Realtime Database. Shows the connection between followed and follower users.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/fcm-notifications/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /followers\n        /followedUid-12345\n            followerUid-67890: true\n    /users\n        /Uid-12345\n            displayName: \"Bob Dole\"\n            /notificationTokens\n                1234567890: true\n            photoURL: \"https://lh3.googleusercontent.com/...\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Cloud Function for Firestore Document Updates\nDESCRIPTION: Cloud function that triggers on Firestore document writes and transforms text fields to uppercase. The function checks if the data contains a text field and updates it with an uppercase version.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/firestore-sync-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\n\nexports.makeUppercase = functions.firestore.document('/messages/{documentId}')\n    .onCreate((snap, context) => {\n      const original = snap.data().original;\n      console.log('Uppercasing', context.params.documentId, original);\n      const uppercase = original.toUpperCase();\n      return snap.ref.set({uppercase}, {merge: true});\n    });\n```\n\n----------------------------------------\n\nTITLE: Sample Database Structure for User Status\nDESCRIPTION: This snippet illustrates the structure of the Realtime Database for storing user status. It shows how the online/offline state is stored for different user IDs.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/presence-firestore/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/status\n    /UID_A\n        state: \"online\"\n    /UID_B\n        state: \"offline\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Firebase Dependencies for Cloud Functions\nDESCRIPTION: Lists the core Firebase packages required for developing Cloud Functions. These include firebase-functions for defining and configuring cloud functions, and firebase-admin for accessing Firebase services with admin privileges.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/auth-blocking-functions/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase-functions\nfirebase-admin\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Analytics Events with Firebase Cloud Functions\nDESCRIPTION: This code snippet demonstrates how to use Firebase Cloud Functions to log custom analytics events. It triggers when data is written to a specific path in the Realtime Database and logs an event with the corresponding value. The function uses the Firebase Admin SDK to access the Analytics service.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/custom-events/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nadmin.initializeApp();\n\n// Keeps track of the length of the 'likes' child list in a separate analytics property.\nexports.countlikes = functions.database.ref('/posts/{postid}/likes').onWrite(\n    async (change) => {\n      const collectionRef = change.after.ref.parent;\n      const countRef = collectionRef.child('likes_count');\n\n      let increment;\n      if (change.after.exists() && !change.before.exists()) {\n        increment = 1;\n      } else if (!change.after.exists() && change.before.exists()) {\n        increment = -1;\n      } else if (change.after.exists() && change.before.exists()) {\n        increment = change.after.numChildren() - change.before.numChildren();\n      } else {\n        return null;\n      }\n\n      // Return the promise from countRef.transaction() so our function\n      // waits for this async event to complete before it exits.\n      await countRef.transaction((current) => {\n        return (current || 0) + increment;\n      });\n      // Rest of your code here...\n      return null;\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPS Time Server with Firebase Cloud Functions (JavaScript)\nDESCRIPTION: This code snippet defines a Firebase Cloud Function that handles HTTP requests and returns the current server time. It supports different time formats based on query parameters.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/https-time-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\n\n/**\n * Returns the server's time as an HTTPS Cloud Function.\n *\n * @param {Object} req Cloud Function request context.\n * @param {Object} res Cloud Function response context.\n */\nexports.date = functions.https.onRequest((req, res) => {\n  // Forbidding PUT requests.\n  if (req.method === 'PUT') {\n    res.status(403).send('Forbidden!');\n    return;\n  }\n\n  // Reading date format from query parameter.\n  const format = req.query.format;\n\n  const formattedDate = getFormattedDate(format);\n\n  console.log('Sending Formatted date:', formattedDate);\n  res.status(200).send(formattedDate);\n});\n\n/**\n * Format the date according to the specified format string.\n * @param {string} format The format string to use.\n * @returns {string} The formatted date.\n */\nfunction getFormattedDate(format) {\n  const date = new Date();\n\n  switch (format.toLowerCase()) {\n    case 'timestamp':\n      return date.getTime().toString();\n    case 'iso':\n      return date.toISOString();\n    case 'swag':\n      return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\n    default:\n      return date.toUTCString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Coupon via FCM in Firebase Functions (JavaScript)\nDESCRIPTION: This code snippet shows the structure of a Firebase Cloud Function that triggers on 'in_app_purchase' Firebase Analytics events. It retrieves the user's FCM tokens from the Realtime Database and sends a coupon notification via FCM. The function assumes that the Firebase Analytics User ID is set to the Firebase Auth uid and that FCM Device Tokens are stored in the Realtime Database.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/coupon-on-purchase/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// See file [functions/index.js](functions/index.js) for the trigger and the FCM code.\n```\n\n----------------------------------------\n\nTITLE: Database Structure for Followers with Notification Tokens\nDESCRIPTION: JSON representation of the complete database structure showing both the followers relationship data and user information including notification tokens, which are used to send targeted FCM notifications.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/fcm-notifications/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/followers\": {\n            \"/followedUid-12345\": {\n                \"followerUid-67890\": true\n            }\n        },\n        \"/users\": {\n            \"/Uid-12345\": {\n                \"displayName\": \"Bob Dole\",\n                \"/notificationTokens\": {\n                    \"1234567890\": true\n                },\n                \"photoURL\": \"https://lh3.googleusercontent.com/...\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Function to Listen for User Signups\nDESCRIPTION: This function triggers on new user creation in Firebase Authentication. It retrieves the user's display name and email, then formats and sends a message to Slack using the webhook URL.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/post-signup-event/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.sendWelcomeMessageOnSlack = functions.auth.user().onCreate((user) => {\n  const slackClient = new WebClient(slackWebhookUrl);\n\n  const { displayName, email } = user;\n  const text = `New user signed up:\\nName: ${displayName || 'Not provided'}\\nEmail: ${email}`;\n\n  return slackClient.chat.postMessage({\n    channel: '#general',\n    text: text,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Callable Functions in Node.js\nDESCRIPTION: Server-side implementation of Firebase callable functions in Node.js. This allows secure communication between client applications and Firebase Cloud Functions. The code shows a basic implementation structure for callable functions.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/callable-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Node.js\nCODE:\n```\n# callable-functions\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Database Structure for Messages\nDESCRIPTION: This snippet shows the initial database structure for storing messages before translation. Each message is stored under its language code with a unique key, containing the original text and a translation status flag.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/message-translation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/messages\": {\n            \"/en\": {\n                \"/key-123456\": {\n                    \"translated\": false,\n                    \"text\": \"Hey Bob! How Are you?\"\n                },\n                \"/key-123457\": {\n                    \"translated\": false,\n                    \"text\": \"Hey Mat! How Are you?\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Functions for Discord Alerts\nDESCRIPTION: This code snippet demonstrates how to set up a Firebase Cloud Function that sends alerts to a Discord channel. It imports necessary modules, initializes the Discord client, and defines a function to send messages to a specific channel.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/alerts-to-discord/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\nconst Discord = require('discord.js');\n\n// Create a new webhook client\nconst webhookClient = new Discord.WebhookClient(\n    functions.config().discord.webhook_id,\n    functions.config().discord.webhook_token);\n\n// This will allow us to send a message to a specific channel in Discord\nconst sendMessage = (message) => {\n  webhookClient.send(message);\n};\n```\n\n----------------------------------------\n\nTITLE: Database Structure for User Information and Notification Tokens\nDESCRIPTION: JSON representation of the database structure showing how user information including display name, photo URL, and notification tokens are stored under the /users/$uid path.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/fcm-notifications/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/users\": {\n            \"/Uid-12345\": {\n                \"displayName\": \"Bob Dole\",\n                \"/notificationTokens\": {\n                    \"1234567890\": true\n                },\n                \"photoURL\": \"https://lh3.googleusercontent.com/...\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Database Structure for Chat Messages\nDESCRIPTION: This JSON snippet illustrates the sample database structure for a simple chat application. It shows how individual chat messages are stored with unique keys, including user and text fields.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/limit-children/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/chat\": {\n            \"/key-123456\": {\n                \"user\": \"Mat\",\n                \"text\": \"Hey Bob!\"\n            },\n            \"/key-123457\": {\n                \"user\": \"Bob\",\n                \"text\": \"Hey Mat! What's Up?\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Lab to Slack Integration in Node.js\nDESCRIPTION: Cloud Function setup that listens for Test Lab results and sends formatted messages to Slack via webhook. Handles test completion events and formats results for notification.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/testlab-to-slack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\n\n/**\n * Integration Tests handler.\n */\nexports.slackIntegrationTest = functions.testLab.testMatrix().onComplete((testMatrix) => {\n  const { testMatrixId, createTime, state, outcomeSummary } = testMatrix;\n  \n  // Send to Slack\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Publishable Key in JavaScript\nDESCRIPTION: This snippet shows how to set the Stripe publishable key in the client-side JavaScript file. The key is used to initialize Stripe Elements for secure payment collection.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/stripe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst STRIPE_PUBLISHABLE_KEY = '<YOUR STRIPE PUBLISHABLE KEY>';\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Structure for User Following Relationships\nDESCRIPTION: This JSON structure shows how follower relationships are stored in the database. When a user follows another user, an entry is created under /followers/$followedUid/$followerUid with a value of true to indicate the relationship.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/fcm-notifications/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/followers\": {\n            \"/followedUid-12345\": {\n                \"followerUid-67890\": true\n            }\n        },\n        \"/users\": {\n            \"/Uid-12345\": {\n                \"displayName\": \"Bob Dole\",\n                \"/notificationTokens\": {\n                    \"1234567890\": true\n                },\n                \"photoURL\": \"https://lh3.googleusercontent.com/...\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Realtime Database Structure for User Notification Tokens\nDESCRIPTION: This JSON structure shows how user data is stored in Firebase Realtime Database, including display name, notification tokens, and profile photo URL. Device tokens are saved under the user's ID when they enable browser notifications.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/fcm-notifications/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/users\": {\n            \"/Uid-12345\": {\n                \"displayName\": \"Bob Dole\",\n                \"/notificationTokens\": {\n                    \"1234567890\": true\n                },\n                \"photoURL\": \"https://lh3.googleusercontent.com/...\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Image Moderation Function (JavaScript/Node.js)\nDESCRIPTION: This snippet shows the package.json file for the Cloud Function, listing the required dependencies for the image moderation project. It includes packages for Firebase functions, Google Cloud Vision, and file system operations.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/moderate-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"functions\",\n  \"description\": \"Cloud Functions for Firebase\",\n  \"dependencies\": {\n    \"@google-cloud/vision\": \"^0.12.0\",\n    \"child-process-promise\": \"^2.2.1\",\n    \"firebase-admin\": \"^11.5.0\",\n    \"firebase-functions\": \"^4.2.0\",\n    \"mkdirp\": \"^1.0.4\",\n    \"mkdirp-promise\": \"^5.0.1\"\n  },\n  \"private\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gmail Credentials for Firebase Cloud Functions\nDESCRIPTION: This bash command sets the Gmail email and password as environment variables for Firebase Cloud Functions. These credentials are used to authenticate the SMTP connection for sending emails.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/email-confirmation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set gmail.email=\"myusername@gmail.com\" gmail.password=\"secretpassword\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Web Application with Firebase Functions\nDESCRIPTION: This code demonstrates how to integrate a Flask web application with Firebase Cloud Functions. It requires the Flask Python framework and handles HTTP requests directed to the Firebase Function endpoint.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/http-flask/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require('firebase-functions');\n\nexports.app = functions.https.onRequest((req, res) => {\n  // Run the Flask app on Firebase\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Gmail Environment Variables for Firebase Functions\nDESCRIPTION: This Bash command sets the Gmail email and password as Google Cloud environment variables for use in Firebase Functions. These credentials are used to send emails through SMTP.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/email-users/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nfirebase functions:config:set gmail.email=\"myusername@gmail.com\" gmail.password=\"secretpassword\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Jira Integration\nDESCRIPTION: Configuration template showing required environment variables for connecting Firebase Functions to Jira. Includes Jira URI, project key, issue type, labeling, and API token owner settings.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/app-distribution-feedback-to-jira/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nJIRA_URI=\"<your JIRA instance's URI, e.g. 'https://mysite.atlassian.net'>\"\nPROJECT_KEY=\"<your project's key, e.g. 'DEV'>\"\nISSUE_TYPE_ID=\"<issue type ID; defaults to '10001' (Improvement)>\"\nISSUE_LABEL=\"<label applied to the Jira issues created; defaults to 'in-app'>\"\nAPI_TOKEN_OWNER=\"<creator of the token; default reporter of issues>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Firebase Function and Slack Integration\nDESCRIPTION: This snippet imports the required modules for Firebase Functions and the Slack API client. It also initializes the Firebase app and sets up the Slack webhook URL.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/post-signup-event/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst functions = require('firebase-functions');\nconst admin = require('firebase-admin');\nconst { WebClient } = require('@slack/web-api');\n\nadmin.initializeApp();\n\n// Slack webhook URL\nconst slackWebhookUrl = functions.config().slack.webhook_url;\n```\n\n----------------------------------------\n\nTITLE: Firebase Security Rules for Last Modified Attribute\nDESCRIPTION: Security rules that prevent direct writes to the lastmodified attribute while allowing read access. This ensures only Firebase Functions with admin privileges can update the timestamp.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/lastmodified-tracking/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"lastmodified\": {\n        \".write\": \"false\",\n        \".read\": \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure for Messages After Moderation\nDESCRIPTION: Sample Firebase database structure showing how messages appear after being processed by the moderation function. The function adds sanitized and moderated flags to each message.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/text-moderation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/functions-project-12345\": {\n    \"/messages\": {\n      \"/key-123456\": {\n        \"text\": \"This is my first message!\",\n        \"sanitized\": true,\n        \"moderated\": false\n      },\n      \"/key-123457\": {\n        \"text\": \"In this message I am shouting.\",\n        \"sanitized\": true,\n        \"moderated\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure for Messages Before Moderation\nDESCRIPTION: Sample Firebase database structure showing how user messages are stored before moderation. Each message is an object with a text attribute added to a messages list.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/text-moderation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/functions-project-12345\": {\n    \"/messages\": {\n      \"/key-123456\": {\n        \"text\": \"This is my first message!\"\n      },\n      \"/key-123457\": {\n        \"text\": \"IN THIS MESSAGE I AM SHOUTING!!!\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Webhook URL in Environment File\nDESCRIPTION: Creates an environment variable in a .env file to store the Discord webhook URL that the function will use to send alerts to a Discord channel.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/alerts-to-discord/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_WEBHOOK_URL=\"<your webhook url>\"\n```\n\n----------------------------------------\n\nTITLE: Setting BigQuery Configuration in Firebase Functions\nDESCRIPTION: Command to set the BigQuery dataset and table name environment variables in Firebase Functions, which specify where the log data will be written to in BigQuery.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/bigquery-import/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set bigquery.datasetName=\"bar\" bigquery.tableName=\"baz\"\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe Secret Key using Firebase CLI\nDESCRIPTION: This command sets the Stripe secret key in Firebase Functions configuration. The secret key is used server-side to interact with the Stripe API securely.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/stripe/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nfirebase functions:config:set stripe.secret=<YOUR STRIPE SECRET KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Spans with OpenTelemetry in Firebase Functions\nDESCRIPTION: Example of manual instrumentation using OpenTelemetry API to create custom spans for performance tracking. The code shows how to start an active span for a price calculation operation.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/instrument-with-opentelemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\n\nconst tracer = opentelemetry.trace.getTracer();\nawait tracer.startActiveSpan(\"calculatePrice\", async (span) => {\n    totalUsd = await calculatePrice(productIds);\n    span.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Database Structure Schema\nDESCRIPTION: The initial database structure for storing links before they are processed by the function. Each link is stored as a string value under a unique ID in the 'links' collection.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/url-shortener/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/links\": {\n            \"link-123456\": \"https://my.super.long-link.com/api/user/profile/-jEHitne10395-k3593085\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LinkedIn Credentials in Firebase Config\nDESCRIPTION: Command to set LinkedIn app credentials as Firebase environment variables. This sets the client ID and client secret needed for OAuth authentication.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/linkedin-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set linkedin.client_id=\"yourClientID\" linkedin.client_secret=\"yourClientSecret\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Web Configuration\nDESCRIPTION: Web initialization snippet that needs to be added to the HTML file. This configuration connects the web app to your Firebase project.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/username-password-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- TODO(DEVELOPER): Copy and paste the initialization snippet from: Firebase Console > Overview > Add Firebase to your web app -->\n```\n\n----------------------------------------\n\nTITLE: Setting Spotify API Credentials in Firebase Functions Config\nDESCRIPTION: Command to securely store Spotify client ID and client secret as environment variables in Firebase Functions configuration. These credentials are required for the OAuth 2.0 authentication process.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/spotify-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set spotify.client_id=\"yourClientID\" spotify.client_secret=\"yourClientSecret\"\n```\n\n----------------------------------------\n\nTITLE: Defining Firestore Structure for Secure Notes in JSON\nDESCRIPTION: This snippet illustrates the sample Firestore structure for secure notes. Each note has a unique ID, text content, an owner field, and optional tags.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/fulltext-search-firestore/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/notes\": {\n        \"/note-123456\": {\n            \"text\": \"This is my first note...\",\n            \"owner\": \"FIREBASE_USER_ID\"\n        },\n        \"/note-123457\": {\n            \"text\": \"This is my second note entry...\",\n            \"owner\": \"FIREBASE_USER_ID\",\n            \"tags\": [\"some_category\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Webhook Configuration for Firebase Functions\nDESCRIPTION: Bash command to set the environment configuration for Firebase Functions, specifically setting the Slack webhook URL needed for the function to post messages to Slack.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/testlab-to-slack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set slack.webhook_url=\"YOUR_SLACK_WEBHOOK_URL\"\n```\n\n----------------------------------------\n\nTITLE: Setting Gmail Configuration in Firebase Functions\nDESCRIPTION: Command to set Gmail email and password as environment variables in Firebase Functions for sending survey emails. These credentials will be used by the nodemailer library to authenticate with Gmail's SMTP server.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/survey-app-update/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set gmail.email=\"myusername@gmail.com\" gmail.password=\"secretpassword\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Credentials in Firebase Functions\nDESCRIPTION: Firebase CLI command to set up Algolia application ID and API key as environment variables in Firebase Functions configuration.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/fulltext-search/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set algolia.app_id=\"myAlgoliaAppId\" algolia.api_key=\"myAlgoliaApiKey\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Firebase Instance Token in Android\nDESCRIPTION: Code snippet that logs the Firebase Instance ID token from an Android app. This token is needed to receive FCM notifications on a developer's device for testing purposes.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/developer-motivator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLog.d(\"Firebase\", \"token \"+ FirebaseInstanceId.getInstance().getToken());\n```\n\n----------------------------------------\n\nTITLE: Sample Firebase Database Structure for Webhook Triggers\nDESCRIPTION: This JSON snippet illustrates the database structure used in the example. Adding or updating elements under the `/hooks` node will trigger the webhook function, sending the data to an external endpoint.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/minimal-webhook/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/hooks\": {\n            \"/key-123456\": {\n                \"stuff\": \"Whatever\",\n                \"more_stuff\": \"Cool\"\n            },\n            \"/key-123457\": {\n                \"things\": \"A car\",\n                \"more_things\": \"A truck\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Firebase Functions Library Version in Python\nDESCRIPTION: This snippet defines the version requirement for the firebase_functions library. It uses the '~=' operator to specify that the version should be at least 0.1.2 but less than 0.2.0, allowing for compatible updates within the 0.1.x range.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/monitor-cloud-logging/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase_functions~=0.1.2\n```\n\n----------------------------------------\n\nTITLE: Setting YouTube API Key as Environment Variable\nDESCRIPTION: Command to set the YouTube API key as an environment variable for the Firebase project.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/youtube/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set youtube.key=\"THE API KEY\"\n```\n\n----------------------------------------\n\nTITLE: Setting NASA API Key Secret for Firebase Functions\nDESCRIPTION: Command to set up the NASA API Key as a secret in Firebase Functions. This key is required to access the NASA Open APIs for retrieving Astronomy Picture of the Day images.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/taskqueues-backup-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase functions:secrets:set NASA_API_KEY\n? Enter a value for NASA_API_KEY [input is hidden]\n✔  Created a new secret version projects/XXX/secrets/NASA_API_KEY/versions/1\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure After Translation\nDESCRIPTION: This snippet demonstrates the database structure after a message has been translated. The original message is marked as translated, and new entries are created for each target language containing the translated text.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/message-translation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/messages\": {\n            \"/en\": {\n                \"/key-123456\": {\n                    \"translated\": true,\n                    \"text\": \"Hey Bob! How Are you?\"\n                },\n                \"/key-123457\": {\n                    \"translated\": false,\n                    \"text\": \"Hey Mat! How Are you?\"\n                }\n            },\n            \"/fr\": {\n                \"/key-123456\": {\n                    \"translated\": true,\n                    \"text\": \"Salut Bob! Comment ca va?\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Bit.ly Access Token in Firebase\nDESCRIPTION: Command to set the Bit.ly access token in Firebase Functions configuration. This is required to authenticate with the Bit.ly API when shortening URLs.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/url-shortener/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set bitly.access_token=XXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Auth Blocking Functions\nDESCRIPTION: This command deploys only the functions to Firebase. It should be executed after installing dependencies and before testing the Auth Blocking functionality.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/auth-blocking-functions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Specifying Firebase Functions Package Version Requirement\nDESCRIPTION: This line specifies the firebase_functions Python package dependency with a compatible release requirement (~=0.1.0), which allows patch version updates but not minor or major version changes.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/fcm-notifications/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase_functions~=0.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Binding for Cloud Tasks Enqueuer Role\nDESCRIPTION: Command to grant the App Engine default service account the necessary permissions to create tasks in Cloud Tasks. This is required for the enqueueBackupTasks function to work properly.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/taskqueues-backup-images/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n  --member=serviceAccount:${PROJECT_ID}@appspot.gserviceaccount.com \\\n  --role=roles/cloudtasks.enqueuer\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure for Item Cleanup\nDESCRIPTION: Example JSON structure for storing items with timestamps in Firebase Realtime Database. Each item has a timestamp property representing when it was created, which is used by the cleanup function to determine which items to delete.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/delete-old-child-nodes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/path\": {\n            \"/to\": {\n                \"/items\": {\n                    \"item1\": {\n                        \"timestamp\": 1497911193083\n                    },\n                    \"item2\": {\n                        \"timestamp\": 1597911193083                    \n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Firebase Dependencies\nDESCRIPTION: This snippet lists the required Firebase packages for a project using Firebase Functions and Admin SDK. It includes 'firebase-functions' for writing Cloud Functions and 'firebase-admin' for accessing Firebase services with admin privileges.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/delete-unused-accounts-cron/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase-functions\nfirebase-admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Multi-Codebase Structure\nDESCRIPTION: Firebase configuration in firebase.json that defines multiple function sources with separate codebases for JavaScript and TypeScript implementations.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/multicodebase-hellos/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"source\": \"js\",\n      \"codebase\": \"javascript\"\n    },\n    {\n      \"source\": \"ts\",\n      \"codebase\": \"typescript\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Webhook URL as Secret Environment Variable\nDESCRIPTION: Firebase CLI command to securely store the Slack webhook URL as an environment variable using Secret Manager.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/testlab-to-slack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:secrets:set SLACK_WEBHOOK_URL\n```\n\n----------------------------------------\n\nTITLE: Importing Firebase Functions and Admin SDK in JavaScript\nDESCRIPTION: These import statements bring in the Firebase Functions and Firebase Admin SDK packages, which are essential for creating and managing Firebase Cloud Functions. These packages provide access to the Firebase ecosystem's serverless functions capabilities and administrative features.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/uppercase-rtdb/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfirebase-functions\nfirebase-admin\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Binding for Function Invocation\nDESCRIPTION: Command to grant the App Engine default service account permission to invoke the task queue function. This allows Cloud Tasks to trigger the backupApod function.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/taskqueues-backup-images/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions add-iam-policy-binding $FUNCTION_NAME \\\n  --region=us-central1 \\\n  --member=serviceAccount:${PROJECT_ID}@appspot.gserviceaccount.com \\\n  --role=roles/cloudfunctions.invoker\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Functions Configuration for Device Token\nDESCRIPTION: Command to set the Google Cloud environment variable for the developer's device token. This token is used by the Firebase Function to send notifications to the developer's device.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/developer-motivator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set dev_motivator.device_token=\"your_developer_device_token\"\n```\n\n----------------------------------------\n\nTITLE: Listing Firebase Dependencies for Cloud Functions\nDESCRIPTION: This snippet specifies the required Firebase packages for a project using Cloud Functions and the Admin SDK. It includes 'firebase-functions' for defining and deploying cloud functions, and 'firebase-admin' for accessing Firebase services server-side.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/quickstarts/custom-events/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfirebase-functions\nfirebase-admin\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Functions Invoker IAM Policy\nDESCRIPTION: Command to grant cloudfunctions.functions.invoke permission to the Compute Engine default service account for the backupapod function.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/taskqueues-backup-images/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud functions add-iam-policy-binding backupapod \\\n  --region=us-central1 \\\n  --member=serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com \\\n  --role=roles/cloudfunctions.invoker\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure for Like Counter\nDESCRIPTION: Sample database structure showing how likes are stored for a post, including both the counter and individual like entries. The structure demonstrates a posts collection with nested likes and a counter field.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/child-count/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /posts\n        /key-123456\n            likes_count: 32\n            /likes \n                user123456: true\n                user456789: true\n                user786245: true\n                ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Functions Discord Alerts\nDESCRIPTION: This code snippet shows the npm command to install the required dependencies for the Firebase Functions Discord alert sample. It installs the 'discord.js' package which is used to interact with the Discord API.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/alerts-to-discord/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install discord.js@11.1.0 --save\n```\n\n----------------------------------------\n\nTITLE: Setting NASA API Key Secret in Firebase\nDESCRIPTION: Command to set up the NASA API key as a secret in Firebase Functions using the Firebase CLI. The API key is required for accessing the NASA APOD API.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/taskqueues-backup-images/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase functions:secrets:set NASA_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting Instagram OAuth Credentials in Firebase Config\nDESCRIPTION: Command to configure Instagram client credentials as environment variables in Firebase Functions. Sets both the client ID and client secret required for Instagram OAuth authentication.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/instagram-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set instagram.client_id=\"yourClientID\" instagram.client_secret=\"yourClientSecret\"\n```\n\n----------------------------------------\n\nTITLE: Service Account Configuration\nDESCRIPTION: Service account credential file path specification for Firebase server SDK setup. This is required for generating custom authentication tokens.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/username-password-auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n./functions/service-account.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Functions\nDESCRIPTION: This snippet shows how to install the necessary dependencies for the Firebase Functions code. It navigates to the functions directory and runs npm install.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/presence-firestore/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd functions\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Processed Database Structure Schema\nDESCRIPTION: The database structure after URL shortening. Each link object contains both the original URL and its shortened version, allowing applications to display the cleaner shortened URL.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/url-shortener/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/links\": {\n            \"/link-123456\": {\n                \"original\": \"https://my.super.long-link.com/api/user/profile/-jEHitne10395-k3593085\",\n                \"short\": \"https://goo.gl/EKDdza\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Function with cURL POST Request\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the date function with a custom format parameter in the request body\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/https-time-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' \\\n     -d '{\"format\": \"MMMM Do YYYY, h:mm:ss a\"}' \\\n     https://us-central1-<project-id>.cloudfunctions.net/date\n```\n\n----------------------------------------\n\nTITLE: Sample Firebase Realtime Database Structure for Logs\nDESCRIPTION: Example database structure showing how logs are organized in the Firebase Realtime Database, with unique keys for each log entry containing text messages.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/bigquery-import/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/functions-project-12345\": {\n    \"/logs\": {\n      \"/key-123456\": {\n        \"text\": \"User signed in.\"\n      },\n      \"/key-123457\": {\n        \"text\": \"Error: Could not connect to Database\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: This command deploys only the Firebase Functions. It's useful when making changes to the server-side code without affecting the client-side application.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/stripe/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Listing NPM Dependencies for Firebase Functions Project\nDESCRIPTION: This snippet lists the required npm packages for a Firebase Cloud Functions project. It includes firebase-functions and firebase-admin for core Firebase server functionality, deepdiff for detecting differences between objects, and requests for making HTTP requests.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/remote-config-diff/functions/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfirebase-functions\nfirebase-admin\ndeepdiff\nrequests\n```\n\n----------------------------------------\n\nTITLE: Sample Firebase Database Structure for Chat Application\nDESCRIPTION: A simple chat database structure example showing messages between users with usernames and text content.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/lastmodified-tracking/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /chat\n        /key-123456\n            username: \"Mat\"\n            text: \"Hey Bob!\"\n        /key-123457\n            username: \"Bob\"\n            text: \"Hey Mat\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy the date function to Firebase Cloud Functions\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/https-time-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in package.json\nDESCRIPTION: Lists the required npm dependencies for the audio conversion function, including ffmpeg and the Google Cloud SDK.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/ffmpeg-convert-audio/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Firebase Database Structure with Last Modified Timestamp\nDESCRIPTION: Firebase database structure showing how the lastmodified timestamp is added at the root level alongside the chat data.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/lastmodified-tracking/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n/functions-project-12345\n    /lastmodified: 1234567890\n    /chat\n        /key-123456\n            username: \"Mat\"\n            text: \"Hey Bob!\"\n        /key-123457\n            username: \"Bob\"\n            text: \"Hey Mat\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Function\nDESCRIPTION: Command to deploy the Firebase function and related resources to production.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/big-ben/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Publishing message to PubSub topic using gcloud CLI\nDESCRIPTION: Command to publish a message to the 'topic-name' PubSub topic using the gcloud CLI. This triggers the deployed Cloud Function.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha pubsub topics publish topic-name --message='YourName'\n```\n\n----------------------------------------\n\nTITLE: Structuring User Data in Firebase Realtime Database\nDESCRIPTION: This snippet shows the database structure for storing user subscription status and email. The 'subscribedToMailingList' boolean indicates the user's subscription status, and the 'email' field stores the user's email address.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/email-confirmation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"/functions-project-12345\": {\n        \"/users\": {\n            \"/$uid\": {\n                \"subscribedToMailingList\": true,\n                \"email\": \"user@domain.com\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy the Firebase Functions to your project using the Firebase CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/taskqueues-backup-images/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Publishing Simple Message to PubSub Topic\nDESCRIPTION: Command to publish a plain text message to the 'topic-name' PubSub topic using the gcloud CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics publish topic-name --message='YourName'\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase Configuration for Slack and GitHub Integration\nDESCRIPTION: Command to configure Firebase environment variables for Slack webhook URL and GitHub secret. These settings are required for the Cloud Function to authenticate with both services.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/github-to-slack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase functions:config:set slack.webhook_url=\"https://hooks.slack.com/services/...\" github.secret=\"A_SECRET_YOU_DEFINED_WHEN_SETTING_UP_THE_GITHUB_WEBHOOK\"\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulator for Functions\nDESCRIPTION: Command to start the Firebase emulator for testing the Cloud Function locally.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/youtube/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --only functions\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Functions Emulator\nDESCRIPTION: Command to start the Firebase Functions emulator, which will output the function URL for testing.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/genkit-helloworld/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:start --only functions\n```\n\n----------------------------------------\n\nTITLE: Calling Firebase Function with curl\nDESCRIPTION: Example curl command to call the 'tellJoke' function with a POST request, including headers and JSON payload.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/genkit-helloworld/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    --url https://127.0.0.1:5001/{$PROJECT}/us-central1/tellJoke \\\n    --header \"Content-Type: application/json\" \\\n    --header \"Accept: text/event-stream\" \\\n    --data '{\"data\": \"Observational comedy\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Emulator Configuration\nDESCRIPTION: Commands to set up the Firebase emulators with the project configuration for local testing.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/youtube/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd functions\n\nfirebase functions:config:get > .runtimeconfig.json\n```\n\n----------------------------------------\n\nTITLE: Sending PUT request to Firebase Function with cURL\nDESCRIPTION: This cURL command demonstrates sending a PUT request to the Firebase Function, which is expected to return a 403 error as per the function's implementation.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/https-time-server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -d '{\"format\": \"MMMM Do YYYY, h:mm:ss a\"}' <function-url>/date\n```\n\n----------------------------------------\n\nTITLE: Testing Firebase Function with cURL\nDESCRIPTION: Command line example for testing the deployed Firebase function using cURL to send a POST request.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/instrument-with-opentelemetry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"content-type: application/json\" https:// -d '{ \"data\": ... }'\n```\n\n----------------------------------------\n\nTITLE: Serving Firebase Hosting Locally\nDESCRIPTION: This command serves the Firebase Hosting content locally. It's useful for previewing changes to the client-side application without deploying.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/stripe/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nfirebase serve --only hosting\n```\n\n----------------------------------------\n\nTITLE: Sending GET request to Firebase Function with cURL\nDESCRIPTION: This cURL command sends a GET request to the deployed Firebase Function. It includes a JSON payload in the request body specifying the desired date format.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/https-time-server/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' /\n     -d '{\"format\": \"MMMM Do YYYY, h:mm:ss a\"}' /\n     <function url>/date\n```\n\n----------------------------------------\n\nTITLE: Publishing message with attributes to PubSub topic using gcloud CLI\nDESCRIPTION: Command to publish a message with attributes to the 'yet-another-topic-name' PubSub topic using the gcloud CLI. This triggers the deployed Cloud Function with message attributes.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha pubsub topics publish yet-another-topic-name --attribute name=YourName\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Shell\nDESCRIPTION: Command to navigate to the testlab-to-slack directory using the cd command in a terminal shell.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/testlab-to-slack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd testlab-to-slack\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON Message to PubSub Topic\nDESCRIPTION: Command to publish a JSON message to the 'another-topic-name' PubSub topic using the gcloud CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics publish another-topic-name --message='{\"name\":\"YourName\"}'\n```\n\n----------------------------------------\n\nTITLE: Publishing JSON message to PubSub topic using gcloud CLI\nDESCRIPTION: Command to publish a JSON message to the 'another-topic-name' PubSub topic using the gcloud CLI. This triggers the deployed Cloud Function with JSON data.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud alpha pubsub topics publish another-topic-name --message='{\"name\":\"YourName\"}'\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy the PubSub Hello World Functions to Firebase. This deploys and activates the functions in the project.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Publishing Message with Attributes to PubSub Topic\nDESCRIPTION: Command to publish a message with attributes to the 'yet-another-topic-name' PubSub topic using the gcloud CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngcloud pubsub topics publish yet-another-topic-name --attribute name=YourName\n```\n\n----------------------------------------\n\nTITLE: Testing Function with cURL PUT Request\nDESCRIPTION: Example cURL command showing a PUT request that will receive a 403 error response\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/https-time-server/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -d '{\"format\": \"MMMM Do YYYY, h:mm:ss a\"}' https://us-central1-<project-id>.cloudfunctions.net/date\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy and activate the PubSub Hello World Function to your Firebase project.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Cloud Functions\nDESCRIPTION: Commands to navigate to the functions directory, install required npm dependencies, and return to the previous directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/testlab-to-slack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Adding Cloud Tasks IAM Policy Binding\nDESCRIPTION: Command to grant cloudtasks.tasks.create permission to the Compute Engine default service account.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/taskqueues-backup-images/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding $PROJECT_ID \\\n  --member=serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com \\\n  --role=roles/cloudtasks.enqueuer\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Functions Dependencies\nDESCRIPTION: Commands to navigate to the functions directory, install dependencies, and return to the previous directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: Command to globally install the Firebase command-line tools using npm package manager.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/big-ben/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for Firebase Functions\nDESCRIPTION: This command navigates to the 'functions' directory, installs the necessary npm dependencies including the Firebase SDK, Firebase Functions SDK, and the 'moment' package for time formatting, then returns to the parent directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/https-time-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions && npm install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Installing Function Dependencies\nDESCRIPTION: Commands to navigate to the functions directory and install required npm dependencies including Firebase SDK, moment.js, and cors package\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/https-time-server/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions && npm install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Installing Function Dependencies\nDESCRIPTION: Commands to navigate to the functions directory and install required npm dependencies.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/big-ben/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions && npm install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Firebase Emulator Deployment Command\nDESCRIPTION: Command to deploy both Firebase Functions and Hosting to the local emulator for testing purposes.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/call-vertex-remote-config-server/client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfirebase serve --only functions,hosting\n```\n\n----------------------------------------\n\nTITLE: Deploying the Function to Production\nDESCRIPTION: Command to deploy the Cloud Function to the Firebase production environment.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/youtube/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for Firebase Functions\nDESCRIPTION: Commands to navigate to the functions directory, install npm dependencies including the Firebase Admin SDK and Firebase SDK for Cloud Functions, and return to the parent directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions && npm install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy only the functions to Firebase.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Application\nDESCRIPTION: This snippet demonstrates how to deploy the Firebase application. It includes steps to use a specific Firebase project and deploy both Functions and Hosting.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/presence-firestore/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nfirebase use --add firebase-example-123\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI and Logging In\nDESCRIPTION: Commands to install the Firebase CLI globally and log in to your Firebase account.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/youtube/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global firebase-tools\n\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: Command to install the Firebase CLI globally using npm.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy the Firebase Cloud Functions to your Firebase project using the Firebase CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/alerts-to-discord/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI globally using npm\nDESCRIPTION: Command to install the Firebase CLI globally using npm. This is a prerequisite for deploying Firebase Cloud Functions.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Firebase Project Configuration Commands\nDESCRIPTION: Series of commands to log in to Firebase CLI and set the project context\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd functions-samples/okta-auth\nokta-auth$ firebase login\nokta-auth$ firebase use <YOUR_FIREBASE_PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Selecting Firebase Project\nDESCRIPTION: Command to select and configure the Firebase project for the current directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase use --add\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying Firebase Functions\nDESCRIPTION: Commands for installing dependencies and deploying Firebase functions to the cloud\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/callable-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Firebase Deployment Command\nDESCRIPTION: Command to deploy the application to Firebase\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nokta-auth$ firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase CLI\nDESCRIPTION: Command to log in and configure the Firebase CLI locally.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Starting Firebase Emulators\nDESCRIPTION: Command to start the Firebase emulator suite for local testing\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nokta-auth$ firebase emulators:start\n```\n\n----------------------------------------\n\nTITLE: Firebase Deploy Command for Jira Integration\nDESCRIPTION: Command to deploy the Firebase function that handles the Jira integration setup.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/app-distribution-feedback-to-jira/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Deletion of Unused Firebase Accounts Title\nDESCRIPTION: Markdown header defining the project name for deleting unused Firebase accounts via cron jobs\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/delete-unused-accounts-cron/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# delete-unused-accounts-cron\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Functions\nDESCRIPTION: Commands to navigate to the functions directory, install dependencies including the Firebase Admin SDK and Firebase SDK for Cloud Functions, and return to the root directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd functions && npm install; cd ..\n```\n\n----------------------------------------\n\nTITLE: Specifying yapf Package Version for Python in Firebase Functions\nDESCRIPTION: This snippet defines the version requirement for the yapf package, which is used for code formatting in Python. It specifies that any version of yapf compatible with 0.40.2 should be used.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Python/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nyapf~=0.40.2\n```\n\n----------------------------------------\n\nTITLE: Adding Community Sample Template in Markdown\nDESCRIPTION: This snippet demonstrates the recommended format for adding a new community sample to the list. It includes a title with a link, a brief description, and author information.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/community.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [Emoji replacer](https://link-to-sample-source-code.com)\n\nUse Cloud Functions to replace common words with emojis!\n\n**Author:** @jhuleatt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Functions\nDESCRIPTION: Commands to navigate to the functions directory, install npm dependencies, and return to the previous directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/testlab-to-slack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm\nDESCRIPTION: Command to execute unit tests using npm test script.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/test-functions-jest-ts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Functions Dependencies\nDESCRIPTION: Command to navigate to the functions directory, install dependencies, and return to the previous directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/test-functions-jest-ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: Command to deploy the Firebase Functions using the Firebase CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/taskqueues-backup-images/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ firebase deploy\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the unit test suite using npm\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/test-functions-mocha/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Functions\nDESCRIPTION: This command deploys the Firebase Functions to the cloud. It uploads and activates the 'date' function, making it accessible via an HTTPS endpoint.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/https-time-server/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI Tools\nDESCRIPTION: Command to install the Firebase CLI tools globally using npm, which is required to deploy Cloud Functions.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/pubsub-helloworld/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI Tools\nDESCRIPTION: Command to globally install the Firebase command line tools needed for deploying Cloud Functions\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/https-time-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI globally using npm\nDESCRIPTION: This command installs the Firebase Command Line Interface (CLI) globally on your system. The Firebase CLI is required to deploy and manage Firebase projects.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/https-time-server/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI\nDESCRIPTION: Command to install the Firebase CLI globally using npm.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase CLI\nDESCRIPTION: Command to log in and configure the Firebase CLI locally.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Selecting Firebase Project\nDESCRIPTION: Command to select and configure the Firebase project for the current directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase use --add\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Functions Dependencies\nDESCRIPTION: Commands to navigate to the functions directory, install dependencies, and return to the previous directory.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Functions\nDESCRIPTION: Command to deploy only the Cloud Functions to Firebase.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/testlab-matrix-completed/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory in Shell\nDESCRIPTION: Command to navigate to the project directory containing the Test Lab to Slack integration code.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/testlab-to-slack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd 2nd-gen/testlab-to-slack\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase CLI Tools\nDESCRIPTION: Command to install the Firebase CLI tools globally using npm\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --global firebase-tools\n```\n\n----------------------------------------\n\nTITLE: Running Local Setup Script\nDESCRIPTION: Command to execute the setup script for local configuration\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nokta-auth$ node setup.js\n```\n\n----------------------------------------\n\nTITLE: Cleanup and Deployment Setup Commands\nDESCRIPTION: Commands to remove local configuration files and run deployment setup\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/okta-auth/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nokta-auth$ rm public/okta-config.js ; rm functions/.env ; rm .runtimeconfig.json\nokta-auth$ node setup.js -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Action URL in JSON\nDESCRIPTION: The code snippet references updating the action.json file to include your Firebase project ID in the URL for the cloud function.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/assistant-say-number/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"<YOUR_PROJECT_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Firebase CLI\nDESCRIPTION: Command to install the latest version of Firebase CLI, which is required for multi-codebase support (v10.7.0 and up).\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/multicodebase-hellos/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g firebase-tools@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Auth Blocking Functions\nDESCRIPTION: This command installs the necessary dependencies for the Firebase Auth Blocking Functions project. It should be run in the project directory before deploying the functions.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/quickstarts/auth-blocking-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Firebase Function Codebases\nDESCRIPTION: Commands to deploy individual function codebases (JavaScript or TypeScript) separately using the Firebase CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/multicodebase-hellos/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions:javascript\nfirebase deploy --only functions:typescript\n```\n\n----------------------------------------\n\nTITLE: Deploying Firebase Auth Blocking Functions\nDESCRIPTION: Command to deploy the Auth Blocking functions to Firebase using the Firebase CLI. This specifically deploys only the functions component of the project.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/auth-blocking-functions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Functions Dependencies\nDESCRIPTION: Command sequence to navigate to the functions directory, install dependencies, and return to previous directory\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/test-functions-mocha/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd functions; npm install; cd -\n```\n\n----------------------------------------\n\nTITLE: Deploying the Firebase Function\nDESCRIPTION: Command to deploy only the functions component of the Firebase project to make the integration active.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node/testlab-to-slack/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Deploying All Firebase Functions\nDESCRIPTION: Command to deploy all function codebases simultaneously using the Firebase CLI.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/multicodebase-hellos/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfirebase deploy --only functions\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Firebase Auth Blocking Functions\nDESCRIPTION: Command to install the necessary dependencies for the Firebase Auth Blocking Functions project using npm.\nSOURCE: https://github.com/firebase/functions-samples/blob/main/Node-1st-gen/quickstarts/auth-blocking-functions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```"
  }
]