[
  {
    "owner": "roninoss",
    "repo": "rn-primitives",
    "content": "TITLE: Dialog Usage Example\nDESCRIPTION: Complete example demonstrating how to implement and use the Dialog primitive component with all its parts.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dialog.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as DialogPrimitive from '@rn-primitives/dialog';\nimport { Text } from 'react-native';\n\nfunction Example() {\n  return (\n    <DialogPrimitive.Root>\n      <DialogPrimitive.Trigger>\n        <Text>Show Dialog</Text>\n      </DialogPrimitive.Trigger>\n\n      <DialogPrimitive.Portal>\n        <DialogPrimitive.Overlay>\n          <DialogPrimitive.Content>\n              <DialogPrimitive.Title>Dialog Title</DialogPrimitive.Title>\n              <DialogPrimitive.Description>\n                Dialog description.\n              </DialogPrimitive.Description>\n              <DialogPrimitive.Close><Text>Close</Text></DialogPrimitive.Close>\n          </DialogPrimitive.Content>\n        </DialogPrimitive.Overlay>\n      </DialogPrimitive.Portal>\n    </DialogPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tabs Primitive in React Native\nDESCRIPTION: Example of how to use the Tabs Primitive component in a React Native application. It demonstrates creating a simple tabs interface with 'Account' and 'Password' tabs.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/tabs.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as TabsPrimitive from '@rn-primitives/tabs';\nimport { Text } from 'react-native';\n\nfunction Example() {\n  const [value, setValue] = React.useState('account');\n  return (\n    <TabsPrimitive.Root\n      value={value}\n      onValueChange={setValue}\n    >\n      <TabsPrimitive.Primitive.List>\n        <TabsPrimitive.Trigger value='account'>\n          <Text>Account</Text>\n        </TabsPrimitive.Trigger>\n        <TabsPrimitive.Trigger value='password'>\n          <Text>Password</Text>\n        </TabsPrimitive.Trigger>\n      </TabsPrimitive.Primitive.List>\n      <TabsPrimitive.Content value='account'>\n        <Text>Account content</Text>\n      </TabsPrimitive.Content>\n      <TabsPrimitive.Content value='password'>\n        <Text>Password content</Text>\n      </TabsPrimitive.Content>\n    </TabsPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slider Primitive in React Native\nDESCRIPTION: Example of how to use the Slider primitive in a React Native component. Demonstrates setting up the Slider with value state and handling value changes.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slider.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { View, Text, Platform } from 'react-native';\nimport * as SelectPrimitive from '@rn-primitives/select';\n\nfunction Example() {\n  const [value, setValue] = React.useState(50);\n\n  return (\n    <View >\n      <Text>{Math.round(value)}</Text>\n      <Slider.Root\n        value={value}\n        onValueChange={(vals) => {\n          const nextValue = vals[0];\n          if (typeof nextValue !== 'number') return;\n          setValue(nextValue);\n        }}\n      >\n        <Slider.Track>\n          <Slider.Range\n            style={{ width: `${value}%` }}\n          />\n          <Slider.Thumb\n            style={{ left: `${value}%` }}\n          />\n        </Slider.Track>\n      </Slider.Root>\n\n      {Platform.OS !== 'web' && (\n        <Text>\n          You will have to implement the gesture handling\n        </Text>\n      )}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Primitive in React Native\nDESCRIPTION: Example usage of the Toast Primitive component in a React Native application. Demonstrates how to create a toast with a title, description, action, and close button, along with a countdown timer.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * React from 'react';\nimport { Pressable, Text, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Portal } from '@rn-primitives/portal';\nimport * as ToastPrimitive from '@rn-primitives/toast';\n\nfunction Example() {\n  const [open, setOpen] = React.useState(false);\n  const [seconds, setSeconds] = React.useState(3);\n  const insets = useSafeAreaInsets();\n\n  React.useEffect(() => {\n    let interval: ReturnType<typeof setInterval> | null = null;\n\n    if (open) {\n      interval = setInterval(() => {\n        setSeconds((prevSeconds) => {\n          if (prevSeconds <= 1) {\n            setOpen(false);\n            if (interval) {\n              clearInterval(interval);\n            }\n            return 3;\n          }\n          return prevSeconds - 1;\n        });\n      }, 1000);\n    } else {\n      if (interval) {\n        clearInterval(interval);\n      }\n      setSeconds(3);\n    }\n\n    if (interval && !open) {\n      clearInterval(interval);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [open, seconds]);\n\n  return (\n    <>\n      {open && (\n        <Portal name='toast-example'>\n          <View style={{ top: insets.top + 4 }} className='px-4 absolute w-full'>\n            <ToastPrimitive.Root\n              type='foreground'\n              open={open}\n              onOpenChange={setOpen}\n              className='opacity-95 bg-secondary border-border flex-row justify-between items-center p-4 rounded-xl'\n            >\n              <View className='gap-1.5'>\n                <ToastPrimitive.Title className='text-foreground text-3xl'>Here is a toast</ToastPrimitive.Title>\n                <ToastPrimitive.Description className='text-foreground text-lg'>\n                  It will disappear in {seconds} seconds\n                </ToastPrimitive.Description>\n              </View>\n              <View className='gap-2'>\n                <ToastPrimitive.Action className='border border-primary px-4 py-2'>\n                  <Text className='text-foreground'>Action</Text>\n                </ToastPrimitive.Action>\n                <ToastPrimitive.Close className='border border-primary px-4 py-2'>\n                  <Text className='text-foreground'>Close</Text>\n                </ToastPrimitive.Close>\n              </View>\n            </ToastPrimitive.Root>\n          </View>\n        </Portal>\n      )}\n      <View className='flex-1 justify-center items-center p-6 gap-12'>\n        <Pressable onPress={() => setOpen((prev) => !prev)}>\n          <Text className='text-foreground text-xl'>Show Toast</Text>\n        </Pressable>\n      </View>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Popover Primitive in React Native\nDESCRIPTION: Example of how to use the Popover Primitive component in a React Native application. Demonstrates the basic structure with Root, Trigger, Portal, and Content components.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/popover.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as PopoverPrimitive from '@rn-primitives/popover';\nimport { Text } from 'react-native';\n\nfunction Example() {\n  return (\n  <PopoverPrimitive.Root>\n    <PopoverPrimitive.Trigger>\n       <Text>Open Popover</Text>\n    </PopoverPrimitive.Trigger>\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content>\n         <Text>Popover Content</Text>\n       </PopoverPrimitive.Content>\n    </PopoverPrimitive.Portal>\n  </PopoverPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Dialog Implementation\nDESCRIPTION: Complete example showing how to implement an alert dialog with trigger, content, title, description, and action buttons.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/alert-dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as AlertDialogPrimitive from '@rn-primitives/alert-dialog';\nimport { Text } from 'react-native';\n\nfunction Example() {\n  return (\n    <AlertDialogPrimitive.Root>\n      <AlertDialogPrimitive.Trigger>\n        <Text>Show Alert Dialog</Text>\n      </AlertDialogPrimitive.Trigger>\n\n      <AlertDialogPrimitive.Portal>\n        <AlertDialogPrimitive.Overlay>\n          <AlertDialogPrimitive.Content>\n              <AlertDialogPrimitive.Title>Are you absolutely sure?</AlertDialogPrimitive.Title>\n              <AlertDialogPrimitive.Description>\n                This action cannot be undone. This will permanently delete your account and remove your data from our servers.\n              </AlertDialogPrimitive.Description>\n\n              <AlertDialogPrimitive.Cancel><Text>Cancel</Text></AlertDialogPrimitive.Cancel>\n              <AlertDialogPrimitive.Action><Text>Continue</Text></AlertDialogPrimitive.Action>\n          </AlertDialogPrimitive.Content>\n        </AlertDialogPrimitive.Overlay>\n      </AlertDialogPrimitive.Portal>\n    </AlertDialogPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Usage Example\nDESCRIPTION: Complete example demonstrating how to implement the navigation menu with multiple items and content.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Platform, StyleSheet, Pressable, Text } from 'react-native';\nimport * as NavigationMenuPrimitive from '@rn-primitives/navigation-menu';\n\nfunction Example() {\n  const [value, setValue] = React.useState<string>();\n\n  function closeAll() {\n    setValue('');\n  }\n\n  return (\n    <>\n      {Platform.OS !== 'web' && !!value && (\n        <Pressable\n          onPress={closeAll}\n          style={StyleSheet.absoluteFillObject}\n        />\n      )}\n      <NavigationMenuPrimitive.Root value={value} onValueChange={setValue}>\n        <NavigationMenuPrimitive.List>\n          <NavigationMenuPrimitive.Item value='getting-started'>\n            <NavigationMenuPrimitive.Trigger>\n              <Text>Getting started</Text>\n            </NavigationMenuPrimitive.Trigger>\n            <NavigationMenuPrimitive.Portal>\n              <NavigationMenuPrimitive.Content>\n                <NavigationMenuPrimitive.Link >\n                  <Text>\n                    react-native-reusables\n                  </Text>\n                </NavigationMenuPrimitive.Link>\n              </NavigationMenuPrimitive.Content>\n            </ NavigationMenuPrimitive.Portal>\n          </NavigationMenuPrimitive.Item>\n          <NavigationMenuPrimitive.Item value='components'>\n            <NavigationMenuPrimitive.Trigger>\n              <Text>Components</Text>\n            </NavigationMenuPrimitive.Trigger>\n            <NavigationMenuPrimitive.Content>\n                  <NavigationMenuPrimitive.Link>\n                    Navigation Menu\n                  </NavigationMenuPrimitive.Link>\n              </View>\n            </NavigationMenuPrimitive.Content>\n          </NavigationMenuPrimitive.Item>\n          <NavigationMenuPrimitive.Item value='documentation'>\n            <NavigationMenuPrimitive.Link onPress={closeAll}>\n              <Text>Documentation</Text>\n            </NavigationMenuPrimitive.Link>\n          </NavigationMenuPrimitive.Item>\n        </NavigationMenuPrimitive.List>\n      </NavigationMenuPrimitive.Root>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Menu Implementation Example\nDESCRIPTION: Complete example showing implementation of a dropdown menu with checkboxes, radio buttons, and sub-menus.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dropdown-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as DropdownMenuPrimitive from \"@rn-primitives/dropdown-menu\";\nimport * as React from \"react\";\nimport { StyleSheet, Text, ViewStyle } from \"react-native\";\n\nconst INDICATOR_STYLE: ViewStyle = {\n  height: 5,\n  width: 5,\n  backgroundColor: \"red\",\n  borderRadius: 50,\n  position: \"absolute\",\n  left: -10,\n  top: 6,\n};\n\nfunction Example() {\n  const [checkboxValue, setCheckboxValue] = React.useState(false);\n  const [subCheckboxValue, setSubCheckboxValue] = React.useState(false);\n  const [radioValue, setRadioValue] = React.useState('pedro');\n\n  return (\n      <DropdownMenuPrimitive.Root>\n        <DropdownMenuPrimitive.Trigger>\n          <Text>Open Dropdown Menu</Text>\n        </DropdownMenuPrimitive.Trigger>\n\n        <DropdownMenuPrimitive.Portal>\n          <DropdownMenuPrimitive.Overlay style={StyleSheet.absoluteFill}>\n            <DropdownMenuPrimitive.Content>\n              <DropdownMenuPrimitive.Item>\n                <Text>Back</Text>\n              </DropdownMenuPrimitive.Item>\n              <DropdownMenuPrimitive.Item>\n                <Text>Forward</Text>\n              </DropdownMenuPrimitive.Item>\n              <DropdownMenuPrimitive.Item>\n                <Text>Reload</Text>\n              </DropdownMenuPrimitive.Item>\n\n              <DropdownMenuPrimitive.Sub>\n                <DropdownMenuPrimitive.SubTrigger>\n                  <Text>More Tools</Text>\n                </DropdownMenuPrimitive.SubTrigger>\n                <DropdownMenuPrimitive.SubContent>\n                  <DropdownMenuPrimitive.Item>\n                    <Text>Save Page As...</Text>\n                  </DropdownMenuPrimitive.Item>\n                  <DropdownMenuPrimitive.Item>\n                    <Text>Create Shortcut...</Text>\n                  </DropdownMenuPrimitive.Item>\n\n                  <DropdownMenuPrimitive.Separator />\n                  <DropdownMenuPrimitive.Item>\n                    <Text>Developer Tools</Text>\n                  </DropdownMenuPrimitive.Item>\n                </DropdownMenuPrimitive.SubContent>\n              </DropdownMenuPrimitive.Sub>\n\n              <DropdownMenuPrimitive.Separator />\n              <DropdownMenuPrimitive.CheckboxItem\n                checked={checkboxValue}\n                onCheckedChange={setCheckboxValue}\n                closeOnPress={false}\n              >\n                <Text>Show Bookmarks Bar</Text>\n                <DropdownMenuPrimitive.ItemIndicator style={INDICATOR_STYLE} />\n              </DropdownMenuPrimitive.CheckboxItem>\n              <DropdownMenuPrimitive.CheckboxItem\n                checked={subCheckboxValue}\n                onCheckedChange={setSubCheckboxValue}\n                closeOnPress={false}\n              >\n                <Text>Show Full URLs</Text>\n                <DropdownMenuPrimitive.ItemIndicator style={INDICATOR_STYLE} />\n              </DropdownMenuPrimitive.CheckboxItem>\n              <DropdownMenuPrimitive.Separator />\n              <DropdownMenuPrimitive.RadioGroup\n                value={radioValue}\n                onValueChange={setRadioValue}\n              >\n                <DropdownMenuPrimitive.Label>\n                  People\n                </DropdownMenuPrimitive.Label>\n                <DropdownMenuPrimitive.Separator />\n                <DropdownMenuPrimitive.RadioItem\n                  value=\"pedro\"\n                  closeOnPress={false}\n                >\n                  <Text>Elmer Fudd</Text>\n                  <DropdownMenuPrimitive.ItemIndicator\n                    style={INDICATOR_STYLE}\n                  />\n                </DropdownMenuPrimitive.RadioItem>\n                <DropdownMenuPrimitive.RadioItem\n                  value=\"colm\"\n                  closeOnPress={false}\n                >\n                  <Text>Foghorn Leghorn</Text>\n                  <DropdownMenuPrimitive.ItemIndicator\n                    style={INDICATOR_STYLE}\n                  />\n                </DropdownMenuPrimitive.RadioItem>\n              </DropdownMenuPrimitive.RadioGroup>\n            </DropdownMenuPrimitive.Content>\n          </DropdownMenuPrimitive.Overlay>\n        </DropdownMenuPrimitive.Portal>\n      </DropdownMenuPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Component\nDESCRIPTION: Example implementation of a radio group component using the primitive, showing state management and proper labeling with ARIA attributes\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/radio-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as RadioGroupPrimitive from '@rn-primitives/radio-group';\nimport { Text, View } from 'react-native';\n\nfunction Example() {\n  const [value, setValue] = React.useState('Comfortable');\n\n  function onLabelPress(label: string) {\n    return () => {\n      setValue(label);\n    };\n  }\n  return (\n      <RadioGroupPrimitive.Root value={value} onValueChange={setValue}>\n        <View>\n          <RadioGroupPrimitive.Item value='Default' aria-labelledby='default-label'>\n            <RadioGroupPrimitive.Indicator />\n          </RadioGroupPrimitive.Item>\n          <Text nativeID='default-label' onPress={onLabelPress('Default')}>Default</Text>\n        </View>\n        <View>\n          <RadioGroupPrimitive.Item value='Comfortable' aria-labelledby='comfortable-label'>\n            <RadioGroupPrimitive.Indicator />\n          </RadioGroupPrimitive.Item>\n          <Text nativeID='comfortable-label' onPress={onLabelPress('Comfortable')}>Comfortable</Text>\n        </View>\n        <View>\n          <RadioGroupPrimitive.Item value='Compact' aria-labelledby='compact-label'>\n            <RadioGroupPrimitive.Indicator />\n          </RadioGroupPrimitive.Item>\n          <Text nativeID='compact-label' onPress={onLabelPress('Compact')}>Compact</Text>\n        </View>\n      </RadioGroupPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Select Primitive Basic Usage Example\nDESCRIPTION: Complete example showing how to implement and use the Select Primitive component with various options.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as SelectPrimitive from '@rn-primitives/select';\nimport { View } from 'react-native';\n\nfunction Example() {\n  return (\n      <SelectPrimitive.Root defaultValue={{ value: 'apple', label: 'Apple' }}>\n        <SelectPrimitive.Trigger >\n          <SelectPrimitive.Value\n            placeholder='Select a fruit'\n          />\n        </SelectPrimitive.Trigger>\n        <SelectPrimitive.Portal>\n          <SelectPrimitive.Overlay style={StyleSheet.absoluteFill}>\n            <SelectPrimitive.Content>\n            <SelectPrimitive.ScrollUpButton />\n            <SelectPrimitive.Viewport>\n              <SelectPrimitive.Group>\n                <SelectPrimitive.Label>Fruits</SelectPrimitive.Label>\n                <SelectPrimitive.Item label='Apple' value='apple'>\n                    Apple\n                  <SelectPrimitive.ItemIndicator  />  \n                </SelectPrimitive.Item>\n                <SelectPrimitive.Item label='Banana' value='banana'>\n                    Banana\n                    <SelectPrimitive.ItemIndicator  />  \n                </SelectPrimitive.Item>\n                <SelectPrimitive.Item label='Blueberry' value='blueberry'>\n                    Blueberry\n                    <SelectPrimitive.ItemIndicator  />  \n                </SelectPrimitive.Item>\n                <SelectPrimitive.Item label='Grapes' value='grapes'>\n                    Grapes\n                    <SelectPrimitive.ItemIndicator  />  \n                </SelectPrimitive.Item>\n                <SelectPrimitive.Item label='Pineapple' value='pineapple'>\n                    Pineapple\n                    <SelectPrimitive.ItemIndicator  />  \n                </SelectPrimitive.Item>\n              </SelectPrimitive.Group>\n            </SelectPrimitive.Viewport>\n            <SelectPrimitive.ScrollDownButton />\n            </SelectPrimitive.Content>\n          </SelectPrimitive.Overlay>\n        </SelectPrimitive.Portal>\n      </SelectPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Applying useRelativePosition Hook in React Native\nDESCRIPTION: Demonstration of the useRelativePosition hook in a React Native component. It calculates and applies positioning styles for a content element relative to a trigger element.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/hooks.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRelativePosition } from '@rn-primitives/hooks';\nimport type { PositionedContentProps, SlottablePressableProps, ViewRef } from '@rn-primitives/types';\n\nconst Content = React.forwardRef<ViewRef, SlottableViewProps & PositionedContentProps>(\n  (\n    {\n      align = 'center',\n      side = 'top',\n      sideOffset = 0,\n      alignOffset = 0,\n      avoidCollisions = true,\n      onLayout: onLayoutProp,\n      insets,\n      style,\n      disablePositioningStyle,\n      ...props\n    },\n    ref\n  ) => {\n    const {\n      contentLayout,\n      setContentLayout,\n      triggerPosition,\n    } = useRootContext();\n\n    const positionStyle = useRelativePosition({\n      align,\n      avoidCollisions,\n      triggerPosition,\n      contentLayout,\n      alignOffset,\n      insets,\n      sideOffset,\n      side,\n      disablePositioningStyle,\n    });\n\n    function onLayout(event: LayoutChangeEvent) {\n      setContentLayout(event.nativeEvent.layout);\n      onLayoutProp?.(event);\n    }\n\n    return (\n      <View\n        ref={ref}\n        style={[positionStyle, style]}\n        onLayout={onLayout}\n        {...props}\n      />\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Avatar Primitive Component\nDESCRIPTION: Example of how to use the Avatar Primitive component to display a user avatar with fallback text. This demonstrates proper implementation of the Root, Image and Fallback components.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/avatar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as AvatarPrimitive from '@rn-primitives/avatar';\n\nconst GITHUB_AVATAR_URI = 'https://github.com/mrzachnugent.png';\n\nfunction Example() {\n  return (\n      <AvatarPrimitive.Root alt=\"Zach Nugent's Avatar\">\n        <AvatarPrimitive.Image source={{ uri: GITHUB_AVATAR_URI }} />\n        <AvatarPrimitive.Fallback>\n          <Text>ZN</Text>\n        </AvatarPrimitive.Fallback>\n      </AvatarPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Accordion Primitive Component\nDESCRIPTION: Example demonstrating how to use the Accordion primitive component with multiple items and default values. Shows implementation of Root, Item, Trigger, and Content components.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/accordion.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as AccordionPrimitive from '@rn-primitives/accordion';\n\nfunction Example() {\n  return (\n    <AccordionPrimitive.Root\n        type='multiple'\n        collapsible\n        defaultValue={['item-1']}\n      >\n        <AccordionPrimitive.Item value='item-1'>\n          <AccordionPrimitive.Trigger>\n            <Text>Is it accessible?</Text>\n          </AccordionPrimitive.Trigger>\n          <AccordionPrimitive.Content>\n            <Text>Yes. It adheres to the WAI-ARIA design pattern.</Text>\n          </AccordionPrimitive.Content>\n        </AccordionPrimitive.Item>\n        <AccordionPrimitive.Item value='item-2'>\n          <AccordionPrimitive.Trigger>\n            <Text>What are universal components?</Text>\n          </AccordionPrimitive.Trigger>\n          <AccordionPrimitive.Content>\n            <Text>\n              In the world of React Native, universal components are components that work on both\n              web and native platforms.\n            </Text>\n          </AccordionPrimitive.Content>\n        </AccordionPrimitive.Item>\n      </AccordionPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Menubar Component Usage Example\nDESCRIPTION: Complete example showing how to implement a menubar with multiple menus, submenus, checkboxes, and radio items using React Native\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/menubar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport Animated, { FadeIn } from 'react-native-reanimated';\nimport * as MenubarPrimitive from '@rn-primitives/menubar';\n\nfunction Example() {\n  const [value, setValue] = React.useState<string | undefined>();\n  const [isSubOpen, setIsSubOpen] = React.useState(false);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [radio, setRadio] = React.useState('michael');\n\n  function closeSubs() {\n    setIsSubOpen(false);\n  }\n\n  function onValueChange(val: string | undefined) {\n    if (typeof val === 'string') {\n      setValue(val);\n      return;\n    }\n    closeSubs();\n    setValue(undefined);\n  }\n\n  return (\n    <>\n      {!!value && (\n        <MenubarPrimitive.Overlay\n          style={StyleSheet.absoluteFillObject}\n        />\n      )}\n      <MenubarPrimitive.Root value={value} onValueChange={onValueChange}>\n        <MenubarPrimitive.Menu value='file'>\n          <MenubarPrimitive.Trigger onPress={closeSubs}>\n            <Text>File</Text>\n          </MenubarPrimitive.Trigger>\n          <MenubarPrimitive.Portal>\n            <MenubarPrimitive.Content>\n              <MenubarPrimitive.Item>\n                <Text>New Tab</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Item>\n                <Text>New Window</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Item disabled>\n                <Text>New Incognito Window</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Sub open={isSubOpen} onOpenChange={setIsSubOpen}>\n                <MenubarPrimitive.SubTrigger>\n                  <Text>Share</Text>\n                </MenubarPrimitive.SubTrigger>\n                <MenubarPrimitive.SubContent>\n                  <Animated.View entering={FadeIn.duration(200)}>\n                    <MenubarPrimitive.Item>\n                      <Text>Email link</Text>\n                    </MenubarPrimitive.Item>\n                    <MenubarPrimitive.Item>\n                      <Text>Messages</Text>\n                    </MenubarPrimitive.Item>\n                    <MenubarPrimitive.Item>\n                      <Text>Notes</Text>\n                    </MenubarPrimitive.Item>\n                  </Animated.View>\n                </MenubarPrimitive.SubContent>\n              </MenubarPrimitive.Sub>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Item>\n                <Text>Print...</Text>\n              </MenubarPrimitive.Item>\n            </MenubarPrimitive.Content>\n          </MenubarPrimitive.Portal>\n        </MenubarPrimitive.Menu>\n        <MenubarPrimitive.Menu value='edit'>\n          <MenubarPrimitive.Trigger onPress={closeSubs}>\n            <Text>Edit</Text>\n          </MenubarPrimitive.Trigger>\n          <MenubarPrimitive.Content className='native:w-48'>\n            <MenubarPrimitive.Item>\n              <Text>Undo</Text>\n            </MenubarPrimitive.Item>\n            <MenubarPrimitive.Item>\n              <Text>Redo</Text>\n            </MenubarPrimitive.Item>\n            <MenubarPrimitive.Separator />\n            <MenubarPrimitive.Item>\n              <Text>Cut</Text>\n            </MenubarPrimitive.Item>\n            <MenubarPrimitive.Item>\n              <Text>Copy</Text>\n            </MenubarPrimitive.Item>\n            <MenubarPrimitive.Item>\n              <Text>Paste</Text>\n            </MenubarPrimitive.Item>\n          </MenubarPrimitive.Content>\n        </MenubarPrimitive.Menu>\n        <MenubarPrimitive.Menu value='view'>\n          <MenubarPrimitive.Trigger onPress={closeSubs}>\n            <Text>View</Text>\n          </MenubarPrimitive.Trigger>\n          <MenubarPrimitive.Portal>\n            <MenubarPrimitive.Content>\n              <MenubarPrimitive.CheckboxItem\n                checked={isChecked}\n                onCheckedChange={setIsChecked}\n                closeOnPress={false}\n              >\n                <Text>Always Show Bookmarks Bar</Text>\n              </MenubarPrimitive.CheckboxItem>\n              <MenubarPrimitive.Item>\n                <Text>Reload</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Item disabled>\n                <Text>Force Reload</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Item>\n                <Text>Toggle Fullscreen</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Item>\n                <Text>Hide Sidebar</Text>\n              </MenubarPrimitive.Item>\n            </MenubarPrimitive.Content>\n          </MenubarPrimitive.Portal>\n        </MenubarPrimitive.Menu>\n        <MenubarPrimitive.Menu value='profile'>\n          <MenubarPrimitive.Trigger onPress={closeSubs}>\n            <Text>Profiles</Text>\n          </MenubarPrimitive.Trigger>\n           <MenubarPrimitive.Portal>\n            <MenubarPrimitive.Content>\n              <MenubarPrimitive.RadioGroup value={radio} onValueChange={setRadio}>\n                <MenubarPrimitive.RadioItem closeOnPress={false} value='andy'>\n                  <Text>Andy</Text>\n                </MenubarPrimitive.RadioItem>\n                <MenubarPrimitive.RadioItem closeOnPress={false} value='michael'>\n                  <Text>Michael</Text>\n                </MenubarPrimitive.RadioItem>\n                <MenubarPrimitive.RadioItem closeOnPress={false} value='creed'>\n                  <Text>Creed</Text>\n                </MenubarPrimitive.RadioItem>\n              </MenubarRadioGroup>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Item>\n                <Text>Edit...</Text>\n              </MenubarPrimitive.Item>\n              <MenubarPrimitive.Separator />\n              <MenubarPrimitive.Item>\n                <Text>Add Profile...</Text>\n              </MenubarPrimitive.Item>\n            </MenubarPrimitive.Content>\n           </MenubarPrimitive.Portal>\n        </MenubarPrimitive.Menu>\n      </MenubarPrimitive.Root>\n    </>\n  );\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Component Usage\nDESCRIPTION: Example showing how to implement the Progress primitive with Root and Indicator components\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/progress.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as ProgressPrimitive from '@rn-primitives/progress';\n\nfunction Example() {\n  return (\n  <ProgressPrimitive.Root>\n    <ProgressPrimitive.Indicator />\n  </ProgressPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Component Basic Usage\nDESCRIPTION: Example implementation of the Switch component showing how to use it with state management.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/switch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport * as SwitchPrimitive from '@rn-primitives/switch';\n\nexport default function SwitchScreen() {\n  const [checked, setChecked] = React.useState(false);\n\n  return (\n    <SwitchPrimitive.Root checked={checked} onCheckedChange={setChecked}>\n      <SwitchPrimitive.Thumb />\n    </SwitchPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Component in React Native\nDESCRIPTION: Example implementation of a table component showing an invoice layout with header, body, and footer sections. Demonstrates proper usage of TablePrimitive components with accessibility features.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/table.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as TablePrimitive from '@rn-primitives/table';\nimport { Text } from 'react-native';\n\nfunction Example() {\n  return (\n    <TablePrimitive.Root aria-labelledby='invoice-table'>\n      <TablePrimitive.Header>\n        <TablePrimitive.Row>\n          <TablePrimitive.Head>\n            <Text>Invoice</Text>\n          </TablePrimitive.Head>\n          <TablePrimitive.Head>\n            <Text>Status</Text>\n          </TablePrimitive.Head>\n          <TablePrimitive.Head>\n            <Text>Method</Text>\n          </TablePrimitive.Head>\n          <TablePrimitive.Head>\n            <Text>Amount</Text>\n          </TablePrimitive.Head>\n        </TablePrimitive.Row>\n      </TablePrimitive.Header>\n      <TablePrimitive.Body>\n        <TablePrimitive.Row>\n          <TablePrimitive.Cell>\n            <Text>INV001</Text>\n          </TablePrimitive.Cell>\n          <TablePrimitive.Cell>\n            <Text>Paid</Text>\n          </TablePrimitive.Cell>\n          <TablePrimitive.Cell>\n            <Text>$250.00</Text>\n          </TablePrimitive.Cell>\n          <TablePrimitive.Cell>\n            <Text>Credit Card</Text>\n          </TablePrimitive.Cell>\n        </TablePrimitive.Row>\n        <TablePrimitive.Footer>\n          <TablePrimitive.Row>\n            <TablePrimitive.Cell>\n              <Text>Total</Text>\n            </TablePrimitive.Cell>\n            <TablePrimitive.Cell>\n                <Text>$250.00</Text>\n            </TablePrimitive.Cell>\n          </TablePrimitive.Row>\n        </TablePrimitive.Footer>\n        <Text nativeID='invoice-table'>\n          A list of your recent invoices.\n        </Text>\n      </TablePrimitive.Body>\n    </TablePrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Component Usage Example\nDESCRIPTION: Example implementation of the Toggle primitive component showing basic usage with state management\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text } from 'react-native';\nimport * as TogglePrimitive from '@rn-primitives/toggle';\n\nfunction Example() {\n  const [isActive, setIsActive] = React.useState(false);\n  return (\n      <TogglePrimitive.Root pressed={isActive} onPressedChange={setIsActive}>\n         <Text>Bold</Text>\n      </TogglePrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collapsible Primitive in React Native\nDESCRIPTION: Example of how to use the Collapsible Primitive component in a React Native application. It demonstrates the basic structure with Root, Trigger, and Content components.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/collapsible.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as CollapsiblePrimitive from '@rn-primitives/collapsible';\n\nfunction Example() {\n  return (\n      <CollapsiblePrimitive.Root>\n            <CollapsiblePrimitive.Trigger >\n               <Text>Toggle</Text>\n            </CollapsiblePrimitive.Trigger>\n            <CollapsiblePrimitive.Content >\n              <Text>@radix-ui/react</Text>\n            </CollapsiblePrimitive.Content>\n      </CollapsiblePrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toolbar Component with Toggle Groups\nDESCRIPTION: Example implementation of a toolbar component with multiple toggle groups and a button. Demonstrates usage of single and multiple selection toggle groups with state management.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toolbar.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport * as ToolbarPrimitive from '@rn-primitives/toolbar';\n\nfunction Example() {\n  const [singleValue, setSingleValue] = React.useState<string>();\n  const [multipleValue, setMultipleValue] = React.useState<string[]>([]);\n  return (\n    <ToolbarPrimitive.Root>\n      <ToolbarPrimitive.ToggleGroup type='multiple' value={multipleValue} onValueChange={setMultipleValue}>\n        <ToolbarPrimitive.ToggleItem value='bold'>\n          <Text>Bold</Text>\n        </ToolbarPrimitive.ToggleItem>\n        <ToolbarPrimitive.ToggleItem value='italic'>\n          <Text>Italic</Text>\n        </ToolbarPrimitive.ToggleItem>\n      </ToolbarPrimitive.ToggleGroup>\n      <ToolbarPrimitive.Separator />\n      <ToolbarPrimitive.ToggleGroup type='single' value={singleValue} onValueChange={setSingleValue}>\n        <ToolbarPrimitive.ToggleItem value='left'>\n          <Text>AlignLeft</Text>\n        </ToolbarPrimitive.ToggleItem>\n        <ToolbarPrimitive.ToggleItem value='center'>\n          <Text>AlignCenter</Text>\n        </ToolbarPrimitive.ToggleItem>\n      </ToolbarPrimitive.ToggleGroup>\n      <ToolbarPrimitive.Separator />\n      <View>\n        <ToolbarPrimitive.Button>\n          <Text>Button</Text>\n        </ToolbarPrimitive.Button>\n      </View>\n    </ToolbarPrimitive.Root>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressable Slot in React Native\nDESCRIPTION: Example of using Slot.Pressable to pass down onPress prop to a child Pressable component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slot.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Slot from '@rn-primitives/slot';\n\nfunction CustomPressable() {\n  return (\n    <Slot.Pressable onPress={() => { console.log(\"Pressed\")}}>\n      {/* The `onPress` prop is passed down to the `Pressable` */}\n      <Pressable />\n    </Slot.Pressable>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Checkbox Component\nDESCRIPTION: Demonstrates how to implement and style a basic checkbox component with state management\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/checkbox.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as CheckboxPrimitive from '@rn-primitives/checkbox';\n\nfunction Example() {\n  const [checked, setChecked] = React.useState(false);\n  return (\n      <CheckboxPrimitive.Root\n        checked={checked}\n        onCheckedChange={setChecked}\n        style={{\n          height: 16,\n          width: 16,\n          borderWidth: 1,\n          borderColor: 'black',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <CheckboxPrimitive.Indicator>\n          <View style={{ height: 12, width: 12, backgroundColor: 'red' }} />\n        </CheckboxPrimitive.Indicator>\n      </CheckboxPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Label Component Usage Example\nDESCRIPTION: Example code showing how to implement and use the Label primitive component with React state\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/label.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as LabelPrimitive from '@rn-primitives/label';\n\nfunction Example() {\n  const [checked, setChecked] = React.useState(false);\n  return (\n     <Label.Root>\n        <Label.Text\n          nativeID='to-be-use-by-aria-labelledby-from-form-field'\n        >\n          Label\n        </Label.Text>\n      </Label.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Slot in React Native\nDESCRIPTION: Example of using Slot.Text to pass down className prop to a child Text component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slot.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Slot from '@rn-primitives/slot';\n\nfunction CustomText() {\n  return (\n    <Slot.Text className=\"text-blue-500\">\n      {/* The `className` is passed down to the `View` */}\n      <Text />\n    </Slot.Text>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Root with Portal Host\nDESCRIPTION: Example showing how to set up the root component with required PortalHost for the alert dialog to function.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/alert-dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Group Component Implementation\nDESCRIPTION: Example implementation of the Toggle Group component showing a multiple selection toggle group with bold and italic options\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle-group.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { Text, View } from 'react-native';\nimport * as ToggleGroupPrimitive from '@rn-primitives/toggle-group';\n\nfunction Example() {\n  const [multipleValue, setMultipleValue] = React.useState<string[]>([]);\n  return (\n      <ToggleGroupPrimitive.Root type='multiple' value={multipleValue} onValueChange={setMultipleValue}>\n          <ToggleGroupPrimitive.ToggleItem value='bold'>\n            <Text>Bold</Text>\n          </ToggleGroupPrimitive.ToggleItem>\n          <ToggleGroupPrimitive.ToggleItem value='italic'>\n            <Text>Italic</Text>\n          </ToggleGroupPrimitive.ToggleItem>\n      </ToggleGroupPrimitive.Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Slot in React Native\nDESCRIPTION: Example of using Slot.View to pass down className prop to a child View component conditionally.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slot.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Slot from '@rn-primitives/slot';\n\nfunction CustomView({ isChild = true }) {\n  const Component = isChild ? Slot.View : View;\n  return (\n    <Component className=\"bg-red-500\">\n      {/* The `className` is passed down to the `View` with `key=\"x\"` when `isChild` is `true` */}\n      <View key=\"x\" />\n    </Component>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useControllableState Hook in React Native\nDESCRIPTION: Example of using the useControllableState hook in a React Native component. It shows how to manage controlled and uncontrolled state for an openable component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/hooks.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useControllableState } from '@rn-primitives/hooks';\nimport type { PressableRef, SlottablePressableProps } from '@rn-primitives/types';\n\nconst Thing = React.forwardRef<PressableRef, SlottablePressableProps & { defaultOpen?: boolean, open?: boolean, onOpenChange?: (open: boolean) => void }>(\n  ({ defaultOpen, open: openProp, onOpenChange: onOpenChangeProp, onPress: onPressProp, ...props}, ref) => {\n      const [open = false, onOpenChange] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChangeProp,\n    });\n\n    function onPress() {\n      onOpenChange(!open);\n      onPressProp?.();\n    }\n    \n    return (\n        <Pressable\n          ref={augmentedRef}\n          onPress={onPress}\n          {...props}\n        />\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using useAugmentedRef Hook in React Native\nDESCRIPTION: Example of how to use the useAugmentedRef hook in a React Native component. It demonstrates forwarding and augmenting a ref for a Pressable component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/hooks.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAugmentedRef } from '@rn-primitives/hooks';\nimport type { PressableRef, SlottablePressableProps } from '@rn-primitives/types';\n\nconst Thing = React.forwardRef<PressableRef, SlottablePressableProps>(\n  (props, ref) => {\n    const augmentedRef = useAugmentedRef({ ref });\n\n    React.useEffect(() => {\n      if (augmentedRef.current) {\n        // Do something with the augmented ref\n      }\n    }, []);\n    \n    return (\n        <Pressable\n          ref={augmentedRef}\n          {...props}\n        />\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Portal Component in Card\nDESCRIPTION: Example of using the Portal component within a Card component to render content outside its natural position.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/portal.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Portal } from '@rn-primitives/portal';\n\nfunction Card() {\n  return (\n    <Wrapper>\n      <Content />\n      {/* Children of `Portal` will be rendered as a child of `PortalHost` */}\n      {/* It will not render in the `Card` component */}\n      <Portal name='card-portal'>\n        <View\n          style={[\n            StyleSheet.absoluteFill,\n            {\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: 'black',\n            },\n          ]}\n        >\n          <View>\n            <Text style={{ color: 'white' }}>\n              I am centered and overlay the entier screen\n            </Text>\n          </View>\n        </View>\n      </Portal>\n    </Wrapper>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToggleGroupUtils in a React Native Component\nDESCRIPTION: Demonstrates how to use ToggleGroupUtils functions in a custom Item component for handling toggle group behavior. It includes logic for single and multiple selection types.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/utils.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ToggleGroupUtils } from '@rn-primitives/hooks';\nimport type { PressableRef, SlottablePressableProps } from '@rn-primitives/types';\n\nconst Item = React.forwardRef<PressableRef, SlottablePressableProps>(\n  (\n    { value: itemValue, onPress: onPressProp, ...props },\n    ref\n  ) => {\n    const { type, value, onValueChange } = useRootContext();\n\n    function onPress(ev: GestureResponderEvent) {\n      if (type === 'single') {\n        onValueChange(ToggleGroupUtils.getNewSingleValue(value, itemValue));\n      }\n      if (type === 'multiple') {\n        onValueChange(ToggleGroupUtils.getNewMultipleValue(value, itemValue));\n      }\n      onPressProp?.(ev);\n    }\n\n    const isChecked =\n      type === 'single' ? ToggleGroupUtils.getIsSelected(value, itemValue) : undefined;\n    const isSelected =\n      type === 'multiple' ? ToggleGroupUtils.getIsSelected(value, itemValue) : undefined;\n\n    return (\n        <Pressable\n          ref={ref}\n          role={type === 'single' ? 'radio' : 'checkbox'}\n          onPress={onPress}\n          aria-checked={isChecked}\n          aria-selected={isSelected}\n          accessibilityState={{\n            checked: isChecked,\n            selected: isSelected,\n          }}\n          {...props}\n        />\n      </ItemContext.Provider>\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Portal in Root Component\nDESCRIPTION: Example of adding PortalHost to the Root component for default portal usage.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/portal.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Children of <Portal /> will render here */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PortalHost in Root Component\nDESCRIPTION: Code example showing how to add the required PortalHost component to the Root component of the application.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Portal Host Implementation\nDESCRIPTION: Example showing how to set up the required PortalHost component in the root layout.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dialog.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Portal Host Implementation\nDESCRIPTION: Example showing how to implement the required PortalHost component in the root layout.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Aspect-Ratio Primitive in React Native\nDESCRIPTION: Example of how to import and use the Aspect-Ratio Primitive component in a React Native application. It demonstrates setting a 16:9 aspect ratio.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/aspect-ratio.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as AspectRatio from '@rn-primitives/aspect-ratio';\n\nfunction Example() {\n  return (\n     <AspectRatio.Root ratio={16 / 9} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalHost in Root Component\nDESCRIPTION: Example of how to implement the PortalHost component as the last child of the Root component in a React Native application.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/popover.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Portal Host\nDESCRIPTION: Example of using a custom PortalHost with a unique name and rendering Portal content to it.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/portal.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Portal, PortalHost } from '@rn-primitives/portal';\n\nfunction Example() {\n  return (\n    <Wrapper>\n      <PortalHost name='example-host' />\n      <Content />\n      <Portal name='example-portal' hostName='example-host'>\n        <View>\n          <Text>I will be rendered above the Content component</Text>\n        </View>\n      </Portal>\n    </Wrapper>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using EmptyGestureResponderEvent in a React Native Component\nDESCRIPTION: Shows how to use EmptyGestureResponderEvent in a custom Item component to handle keyboard events and provide accessibility support for press actions.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/utils.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmptyGestureResponderEvent } from '@rn-primitives/hooks';\nimport type { PressableRef, SlottablePressableProps } from '@rn-primitives/types';\n\nconst Item = React.forwardRef<PressableRef, SlottablePressableProps>(\n  ({  onPress: onPressProp, onKeyDown: onKeyDownProp, ...props }, ref) => {\n\n    function onKeyDown(ev: React.KeyboardEvent) {\n      if (ev.key === 'Enter' || ev.key === ' ') {\n        onKeyDownProp?.(ev);\n        onPressProp?.(EmptyGestureResponderEvent);\n        console.log(\"onKeyDown Enter or Space\");\n      }\n    }\n\n    function onPress(ev: GestureResponderEvent) {\n      onPressProp?.(ev);\n      console.log(\"onPress\");\n    }\n\n    const Component = asChild ? Slot.Pressable : Pressable;\n    return (\n        <Pressable ref={ref} onPress={onPress} onKeyDown={onKeyDown} {...props} />\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Slot in React Native\nDESCRIPTION: Example of using Slot.Image to pass down source prop to a child Image component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slot.mdx#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as Slot from '@rn-primitives/slot';\n\nfunction CustomImage() {\n  return (\n    <Slot.Image source={{ uri: \"https://avatars.githubusercontent.com/u/63797719?v=4\" }}>\n        {/* The `source` is passed down to the `View` */}\n      <Image />\n    </Slot.Image>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Styles with StyleSheet in Expo React Native\nDESCRIPTION: This snippet demonstrates how to create and apply styles using StyleSheet in an Expo React Native project. It defines a simple style object with a container style and applies it to a View component.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/expo-stylesheet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StyleSheet, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      {/* Your content here */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Portal Host Setup\nDESCRIPTION: Example of setting up the required PortalHost component in the root layout.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dropdown-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalHost } from '@rn-primitives/portal';\n\nfunction Root() {\n  return (\n    <>\n      <Stack />\n      {/* Default Portal Host (one per app) */}\n      <PortalHost />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useItemContext Hook in Navigation Menu\nDESCRIPTION: Hook that provides access to navigation menu values when used within an Item component. Returns the value property from the navigation menu context.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### useItemContext\n\nMust be used within a `Item` component. It provides the following values from the navigation menu: `value`.\n```\n\n----------------------------------------\n\nTITLE: Core UI Components Navigation Layout in JSX\nDESCRIPTION: A responsive grid layout of navigation buttons linking to various core UI component documentation pages. Uses custom LinkButton component with flexbox styling for responsive arrangement.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex gap-2 items-center flex-wrap justify-center\">\n    <LinkButton href=\"/accordion\">Accordion</LinkButton>\n    <LinkButton href=\"/alert-dialog\">Alert-dialog</LinkButton>\n    <LinkButton href=\"/aspect-ratio\">Aspect-ratio</LinkButton>\n    <LinkButton href=\"/avatar\">Avatar</LinkButton>\n    <LinkButton href=\"/checkbox\">Checkbox</LinkButton>\n    <LinkButton href=\"/collapsible\">Collapsible</LinkButton>\n    <LinkButton href=\"/context-menu\">Context-menu</LinkButton>\n    <LinkButton href=\"/dialog\">Dialog</LinkButton>\n    <LinkButton href=\"/dropdown-menu\">Dropdown-menu</LinkButton>\n    <LinkButton href=\"/hover-card\">Hover-card</LinkButton>\n    <LinkButton href=\"/label\">Label</LinkButton>\n    <LinkButton href=\"/menubar\">Menubar</LinkButton>\n    <LinkButton href=\"/navigation-menu\">Navigation-menu</LinkButton>\n    <LinkButton href=\"/popover\">Popover</LinkButton>\n    <LinkButton href=\"/portal\">Portal</LinkButton>\n    <LinkButton href=\"/progress\">Progress</LinkButton>\n    <LinkButton href=\"/radio-group\">Radio-group</LinkButton>\n    <LinkButton href=\"/select\">Select</LinkButton>\n    <LinkButton href=\"/separator\">Separator</LinkButton>\n    <LinkButton href=\"/slider\">Slider</LinkButton>\n    <LinkButton href=\"/switch\">Switch</LinkButton>\n    <LinkButton href=\"/table\">Table</LinkButton>\n    <LinkButton href=\"/tabs\">Tabs</LinkButton>\n    <LinkButton href=\"/toast\">Toast</LinkButton>\n    <LinkButton href=\"/toggle\">Toggle</LinkButton>\n    <LinkButton href=\"/toggle-group\">Toggle-group</LinkButton>\n    <LinkButton href=\"/toolbar\">Toolbar</LinkButton>\n    <LinkButton href=\"/tooltip\">Tooltip</LinkButton>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Shared Utilities Navigation Layout in JSX\nDESCRIPTION: A flex container with navigation buttons linking to shared utility documentation pages. Uses the same LinkButton component with consistent styling for development tools and utilities.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"flex gap-2 items-center flex-wrap justify-center\">\n    <LinkButton href=\"/hooks\">Hooks</LinkButton>\n    <LinkButton href=\"/portal\">Portal</LinkButton>\n    <LinkButton href=\"/slot\">Slot</LinkButton>\n    <LinkButton href=\"/types\">Types</LinkButton>\n    <LinkButton href=\"/utils\">Utils</LinkButton>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Using Separator Primitive in React Native\nDESCRIPTION: Example showing how to import and implement the separator primitive component in a React Native application.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/separator.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as SeparatorPrimitive from '@rn-primitives/separator';\n\nfunction Example() {\n  return <SeparatorPrimitive.Root />\n}\n```\n\n----------------------------------------\n\nTITLE: Separator Component Props Interface\nDESCRIPTION: React Native View component extension with custom props for separator functionality including value, label, closeOnPress, and asChild options.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SeparatorProps extends ViewProps {\n  value: string;\n  label: string;\n  closeOnPress?: boolean;\n  asChild?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Different App Versions of RN Primitives\nDESCRIPTION: These commands start different versions of the RN Primitives app, including Expo NativeWind, Nextjs NativeWind, and the documentation app.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the Expo NativeWind app\npnpm dev:expo-nativewind\n# Or start the Nextjs NativeWind app\npnpm dev:nextjs-nativewind\n# Or the Documentation app\npnpm dev:docs\n```\n\n----------------------------------------\n\nTITLE: Viewport Web Component\nDESCRIPTION: Web-only component that extends Radix UI's select Viewport props. Renders only children content when used in native environments.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ViewportProps extends RadixSelect.ViewportProps {\n  children: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Types Installation\nDESCRIPTION: TypeScript type definitions to be copied into a local project file at ~/components/primitives/types.ts\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/types.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n${importedCode}\n```\n\n----------------------------------------\n\nTITLE: ScrollDownButton Web Component\nDESCRIPTION: Web-only component that extends Radix UI's select ScrollDownButton props. Renders only children content when used in native environments.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollDownButtonProps extends RadixSelect.ScrollDownButtonProps {\n  children: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Directory Structure for Starlight Tailwind\nDESCRIPTION: Displays the file and directory structure of a typical Starlight Tailwind project, showing key directories like public, src/content/docs, and configuration files.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n├── tailwind.config.mjs\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: ScrollUpButton Web Component\nDESCRIPTION: Web-only component that extends Radix UI's select ScrollUpButton props. Renders only children content when used in native environments.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ScrollUpButtonProps extends RadixSelect.ScrollUpButtonProps {\n  children: React.ReactNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Slider for Web\nDESCRIPTION: Command to install the Radix UI Slider component, which is used for the web version of the Slider primitive.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slider.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-slider\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Accordion Dependency\nDESCRIPTION: Command to install the required Radix UI Accordion dependency for the web version.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/accordion.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-accordion\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Primitive Packages for RN Primitives\nDESCRIPTION: This command builds all primitive packages and watches them for changes, eliminating the need to rebuild after each modification.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:primitives\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Checkbox Dependency\nDESCRIPTION: Command to install the Radix UI checkbox dependency for web support\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/checkbox.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Toolbar Dependency\nDESCRIPTION: Command to install the required Radix UI toolbar dependency\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toolbar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-toolbar\n```\n\n----------------------------------------\n\nTITLE: Installing Zustand Dependency\nDESCRIPTION: Command to install Zustand, a required dependency for the Portal Primitive.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/portal.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install zustand\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Primitive Peer Dependency\nDESCRIPTION: Command to install the required portal primitive dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for RN Primitives\nDESCRIPTION: This command installs the necessary dependencies for the RN Primitives project using PNPM package manager.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Peer Dependency\nDESCRIPTION: Command for installing the required portal primitive peer dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Dependency\nDESCRIPTION: Command to install the required portal primitive dependency\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/label.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Dependency\nDESCRIPTION: Command line instructions for installing the required portal primitive dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/nextjs-nativewind/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Tabs for Web\nDESCRIPTION: Command to install the Radix UI Tabs component for web applications using NPM in an Expo project.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/tabs.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-tabs\n```\n\n----------------------------------------\n\nTITLE: Installing Dropdown Menu Package\nDESCRIPTION: NPM command to install the dropdown menu primitive component and its peer dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dropdown-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/dropdown-menu\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Menubar Component via NPM\nDESCRIPTION: Commands for installing the menubar primitive and its peer dependency portal primitive using NPM/Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/menubar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/menubar\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Package via NPM\nDESCRIPTION: Command to install the radio group primitive package using NPM with Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/radio-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/radio-group\n```\n\n----------------------------------------\n\nTITLE: Installing Hooks Primitive via NPM\nDESCRIPTION: Command to install the @rn-primitives/hooks package using npx and expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/hooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/hooks\n```\n\n----------------------------------------\n\nTITLE: Installing Separator Primitive via NPM\nDESCRIPTION: Command to install the separator primitive package using NPM and Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/separator.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/separator\n```\n\n----------------------------------------\n\nTITLE: Installing Dialog Component via NPM\nDESCRIPTION: Command line instructions for installing the dialog primitive component using NPM/Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Label Primitive via NPM\nDESCRIPTION: Command to install the label primitive package using npm with expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/label.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/label\n```\n\n----------------------------------------\n\nTITLE: Installing Alert Dialog Package\nDESCRIPTION: Commands to install the alert dialog primitive and its peer dependency portal primitive using NPM/Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/alert-dialog.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/alert-dialog\n\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Switch Component via NPM\nDESCRIPTION: Command to install the switch primitive component using NPM and Expo CLI.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/switch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/switch\n```\n\n----------------------------------------\n\nTITLE: Installing Popover Primitive via NPM\nDESCRIPTION: Command to install the Popover Primitive component using NPM. Also mentions the potential need to install the portal primitive as a peer dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/popover.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/popover\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Portal Primitive via NPM\nDESCRIPTION: Command to install the Portal Primitive component using NPM and Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/portal.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Toast Primitive via NPM\nDESCRIPTION: Command to install the Toast Primitive component using NPM. Also includes instructions for installing the required peer dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/toast\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Aspect-Ratio Primitive via NPM\nDESCRIPTION: Command to install the Aspect-Ratio Primitive component using NPM and Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/aspect-ratio.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/aspect-ratio\n```\n\n----------------------------------------\n\nTITLE: Installing Avatar Primitive with NPM\nDESCRIPTION: Command to install the Avatar Primitive package using NPM via the command line with Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/avatar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/avatar\n```\n\n----------------------------------------\n\nTITLE: Installing Navigation Menu Package\nDESCRIPTION: Command line instructions for installing the navigation menu primitive package using NPX and Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Primitive via NPM\nDESCRIPTION: Command to install the Progress primitive component using NPM and Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/progress.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/progress\n```\n\n----------------------------------------\n\nTITLE: Installing Tabs Primitive via NPM\nDESCRIPTION: Command to install the Tabs Primitive component using NPM in an Expo project.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/tabs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/tabs\n```\n\n----------------------------------------\n\nTITLE: Installing Utils Primitive via NPM for React Native\nDESCRIPTION: Command to install the @rn-primitives/utils package using npx and expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/utils.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/utils\n```\n\n----------------------------------------\n\nTITLE: Installing Slider Primitive via NPM\nDESCRIPTION: Command to install the Slider primitive component using NPM. Also mentions the potential need to install a peer dependency.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slider.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/slider\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/portal\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Group Package\nDESCRIPTION: NPM command to install the Toggle Group primitive package using expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle-group.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Table Primitive with NPM\nDESCRIPTION: Command to install the table primitive package using NPM and Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/table\n```\n\n----------------------------------------\n\nTITLE: Installing Accordion Primitive via NPM\nDESCRIPTION: Command to install the Accordion primitive component using NPM with Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/accordion.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/accordion\n```\n\n----------------------------------------\n\nTITLE: Installing Toolbar Component via NPM\nDESCRIPTION: Command to install the toolbar primitive component using NPM and Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toolbar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/toolbar\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight Tailwind Starter Kit with NPM\nDESCRIPTION: Command for creating a new Astro project using the Starlight Tailwind template. This sets up a documentation site with Tailwind CSS integration.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight/tailwind\n```\n\n----------------------------------------\n\nTITLE: Installing Checkbox Component via NPM\nDESCRIPTION: Command to install the checkbox primitive package using NPM and Expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/checkbox.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/checkbox\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Primitive via NPM\nDESCRIPTION: Command to install the toggle primitive package using npm and expo\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/toggle\n```\n\n----------------------------------------\n\nTITLE: Installing Slot Primitive via NPM in React Native\nDESCRIPTION: Command to install the @rn-primitives/slot package using npx and expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/slot.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/slot\n```\n\n----------------------------------------\n\nTITLE: Installing Collapsible Primitive via NPM\nDESCRIPTION: Command to install the Collapsible Primitive component using NPM and Expo.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/collapsible.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/collapsible\n```\n\n----------------------------------------\n\nTITLE: Installing Types Primitive Package with NPM\nDESCRIPTION: Command to install the @rn-primitives/types package using NPX and Expo CLI\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/types\n```\n\n----------------------------------------\n\nTITLE: Installing Select Primitive via NPM\nDESCRIPTION: Command to install the Select Primitive component using npm or expo CLI.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @rn-primitives/select\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Progress Dependency\nDESCRIPTION: Command to install the required Radix UI Progress dependency for web implementation\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/progress.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-progress\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Dialog\nDESCRIPTION: Installation command for the Radix UI dialog dependency required for web implementation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dialog.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Navigation Menu\nDESCRIPTION: Command for installing the Radix UI navigation menu package for web implementation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/navigation-menu.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-navigation-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Label\nDESCRIPTION: Command to install Radix UI label dependency for web support\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/label.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-label\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Alert Dialog\nDESCRIPTION: Command to install the Radix UI alert dialog package as a prerequisite for manual installation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/alert-dialog.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Dropdown Menu\nDESCRIPTION: Installation command for the Radix UI dropdown menu dependency used in web implementation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/dropdown-menu.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-dropdown-menu\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Toggle Group\nDESCRIPTION: NPM command to install Radix UI Toggle Group dependency\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-toggle-group\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Switch Dependency\nDESCRIPTION: Command to install the required Radix UI switch dependency for web implementation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/switch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-switch\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Toggle Dependency\nDESCRIPTION: Command to install the required Radix UI toggle dependency for web implementation\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/toggle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-toggle\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Radio Group Package\nDESCRIPTION: Command to install the Radix UI radio group package dependency\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/radio-group.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-radio-group\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Collapsible for Web\nDESCRIPTION: Command to install the Radix UI Collapsible component for web implementation.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/collapsible.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-collapsible\n```\n\n----------------------------------------\n\nTITLE: Installing Radix UI Select for Manual Setup\nDESCRIPTION: Command to install the Radix UI Select package as a dependency for manual setup.\nSOURCE: https://github.com/roninoss/rn-primitives/blob/main/apps/docs/src/content/docs/select.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @radix-ui/react-select\n```"
  }
]