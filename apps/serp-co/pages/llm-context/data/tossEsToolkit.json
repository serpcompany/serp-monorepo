[
  {
    "owner": "toss",
    "repo": "es-toolkit",
    "content": "TITLE: Using es-toolkit via jsdelivr CDN in browser\nDESCRIPTION: Example of including es-toolkit via jsdelivr CDN and using the 'chunk' function in a browser environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/es-toolkit@%5E1\"></script>\n<script>\n  var arr = _.chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit via esm.sh in modern browsers\nDESCRIPTION: Example of importing es-toolkit from esm.sh using an import map and using the 'chunk' function in a modern browser environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"es-toolkit\": \"https://esm.sh/es-toolkit@%5E1\"\n    }\n  }\n</script>\n<script type=\"module\">\n  import { chunk } from 'es-toolkit';\n\n  chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit with yarn for Node.js\nDESCRIPTION: Command to install es-toolkit using yarn package manager for Node.js environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn add es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Semaphore Usage Example in TypeScript\nDESCRIPTION: Demonstrates practical usage of the Semaphore class to limit concurrent execution of async tasks. Shows how to properly acquire and release permits within a try-finally block.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/Semaphore.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sema = new Semaphore(2);\n\nasync function task() {\n  await sema.acquire();\n  try {\n    // This code can only be executed by two tasks at the same time\n  } finally {\n    sema.release();\n  }\n}\n\ntask();\ntask();\ntask(); // This task will wait until one of the previous tasks releases the semaphore.\n```\n\n----------------------------------------\n\nTITLE: Uniq function example in TypeScript\nDESCRIPTION: This is an example of how to use the `uniq` function. The input array `[1, 2, 2, 3, 4, 4, 5]` is passed to the `uniq` function, and the resulting array `[1, 2, 3, 4, 5]` contains only the unique values from the original array, preserving their original order.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/uniq.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 2, 3, 4, 4, 5];\nconst result = uniq(array);\n// result will be [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cache Implementation for Memoize in TypeScript\nDESCRIPTION: This example demonstrates how to create and use a custom cache implementation with the memoize function. It defines a CustomCache class that implements the MemoizeCache interface and uses it with the memoize function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/memoize.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example using a custom cache implementation\nclass CustomCache<K, T> implements MemoizeCache<K, T> {\n  private cache = new Map<K, T>();\n  set(key: K, value: T): void {\n    this.cache.set(key, value);\n  }\n  get(key: K): T | undefined {\n    return this.cache.get(key);\n  }\n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n  clear(): void {\n    this.cache.clear();\n  }\n  get size(): number {\n    return this.cache.size;\n  }\n}\nconst customCache = new CustomCache<string, number>();\nconst memoizedSumWithCustomCache = memoize(sum, { cache: customCache });\nconsole.log(memoizedSumWithCustomCache([1, 2])); // 3\nconsole.log(memoizedSumWithCustomCache([1, 2])); // 3 (cached result)\nconsole.log(memoizedAddWithCustomCache.cache.size); // 1\n```\n\n----------------------------------------\n\nTITLE: Throttle Function with Lodash Compatibility Options in TypeScript\nDESCRIPTION: This snippet demonstrates the usage of throttle function with Lodash compatibility options. It shows examples of using leading and trailing options to control the behavior of the throttled function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/throttle.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example with the leading option\nconst leadingFn = throttle(\n  () => {\n    console.log('Leading function executed');\n  },\n  1000,\n  { leading: true }\n);\n\n// Logs 'Leading function executed' immediately.\n// Even if called repeatedly, it logs 'Leading function executed' every 1 second.\nleadingFn();\n\n// Example with the trailing option\nconst trailingFn = throttle(\n  () => {\n    console.log('Trailing function executed');\n  },\n  1000,\n  { trailing: true }\n);\n\n// Logs 'Trailing function executed' immediately.\n// Even if called repeatedly, it logs 'Trailing function executed' every 1 second.\ntrailingFn();\n\n// Example with the leading: false, trailing: true option\nconst trailingOnlyFn = throttle(\n  () => {\n    console.log('Trailing-only function executed');\n  },\n  1000,\n  { leading: false, trailing: true }\n);\n\n// 'Trailing-only function executed' does not log initially.\n// Even if called repeatedly, it logs 'Trailing-only function executed' every 1 second.\ntrailingOnlyFn();\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit with npm for Node.js\nDESCRIPTION: Command to install es-toolkit using npm package manager for Node.js environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatible Throttle Options Example\nDESCRIPTION: Examples showing how to use throttle with Lodash-compatible options for leading and trailing execution. Demonstrates the behavior with different combinations of the leading and trailing options.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/throttle.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// leading 选项示例\nconst leadingFn = throttle(\n  () => {\n    console.log('Leading function executed');\n  },\n  1000,\n  { leading: true }\n);\n\n// 立即记录 'Leading function executed'。\n// 即使连续调用，每1秒记录一次 'Leading function executed'。\nleadingFn();\n\n// leading: false, trailing: true 选项示例\nconst trailingOnlyFn = throttle(\n  () => {\n    console.log('Trailing-only function executed');\n  },\n  1000,\n  { leading: false, trailing: true }\n);\n\n// 最初不会记录 'Trailing-only function executed'。\n// 即使连续调用，每1秒记录一次 'Trailing-only function executed'。\ntrailingOnlyFn();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using es-toolkit/compat as Lodash Replacement\nDESCRIPTION: Shows how to import the chunk function from es-toolkit/compat and demonstrates its compatibility with lodash's behavior. This example illustrates that the function handles edge cases (like chunking with a size of 0) identically to lodash.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/compatibility.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// es-toolkit/compat aims to provide 100% feature parity with lodash\nimport { chunk } from 'es-toolkit/compat';\n\nchunk([1, 2, 3, 4], 0);\n// Returns [], which is identical to lodash\n```\n\n----------------------------------------\n\nTITLE: Basic Primitive and Complex Type Deep Cloning Examples\nDESCRIPTION: Demonstrates deep cloning of numbers, arrays, and objects with nested structures, showing the creation of independent copies\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/cloneDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst num = 29;\nconst clonedNum = cloneDeep(num);\n\nconst arr = [1, 2, 3];\nconst clonedArr = cloneDeep(arr);\n\nconst obj = { a: 1, b: 'es-toolkit', c: [1, 2, 3] };\nconst clonedObj = cloneDeep(obj);\n\nconst nestedObj = { a: { b: { c: 'deep' } }, d: [1, 2, { e: 'nested' }] };\nconst clonedNestedObj = cloneDeep(nestedObj);\n```\n\n----------------------------------------\n\nTITLE: Defining Update Function Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the 'update' function, including its parameters and return type. The function takes an object, a path, and an updater function as arguments, and returns the modified object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/update.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Intersection By with Property Key in TypeScript\nDESCRIPTION: Shows how to use `intersectionBy` with a property key as the iteratee. This example uses the `x` property to determine the intersection between two arrays of objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ x: 1 }, { x: 2 }, { x: 3 }];\nconst array2 = [{ x: 2 }, { x: 3 }, { x: 4 }];\nconst result = intersectionBy(array1, array2, 'x');\n// result will be [{ x: 2 }, { x: 3 }] since these elements have the same `x` property.\n```\n\n----------------------------------------\n\nTITLE: Window Resize Event Throttling Example\nDESCRIPTION: Demonstrates how to use throttle to limit the frequency of window resize event handler execution. The example includes attaching the throttled function to an event listener and proper cleanup.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/throttle.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 要节流的示例函数\nconst logResize = () => {\n  console.log('窗口在', new Date().toISOString(), '时被调整大小');\n};\n\n// 创建 logResize 函数的节流版本\nconst throttledResizeHandler = throttle(logResize, 1000);\n\n// 将节流函数附加到窗口调整大小事件\nwindow.addEventListener('resize', throttledResizeHandler);\n\n// 可选：在不再需要时清理事件监听器\nconst cleanup = () => {\n  window.removeEventListener('resize', throttledResizeHandler);\n};\n\n// 示例：在10秒后清理\nsetTimeout(cleanup, 10000);\n```\n\n----------------------------------------\n\nTITLE: Using withTimeout for API Fetch Operations\nDESCRIPTION: Practical example showing how to use withTimeout to add a 1-second timeout to an API fetch operation, including error handling for timeout scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/withTimeout.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchData() {\n  const response = await fetch('https://example.com/data');\n  return response.json();\n}\n\ntry {\n  const data = await withTimeout(fetchData, 1000);\n  console.log(data); // Logs the fetched data if `fetchData` is resolved within 1 second.\n} catch (error) {\n  console.error(error); // Will log 'TimeoutError' if `fetchData` is not resolved within 1 second.\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating cloneDeep in a Sandpack Environment\nDESCRIPTION: This code snippet shows how to use the cloneDeep function from the es-toolkit library in a sandpack environment. It demonstrates deep cloning of a nested object and verifies that the cloned object is not the same reference as the original.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeep.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cloneDeep } from 'es-toolkit/object';\n\nconst original = { a: { b: { c: 'deep' } }, d: [1, 2, { e: 'nested' }] };\nconst cloned = cloneDeep(original);\n\nconsole.log(cloned);\nconsole.log(original !== cloned);\n```\n\n----------------------------------------\n\nTITLE: Using Attempt Function with Generic Types in TypeScript\nDESCRIPTION: This example demonstrates how to use generic types with the 'attempt' function to specify the types of the error and return value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attempt.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Using generic types lets you specify the type of the error and return value.\nconst [error, names] = attempt<string[], Error>(() => ['Alice', 'Bob']);\n// `error` is inferred as `Error` type, `names` is inferred as `string[]` type.\n```\n\n----------------------------------------\n\nTITLE: Using debounce and chunk functions from es-toolkit\nDESCRIPTION: Example demonstrating how to use the debounce and chunk utility functions from the es-toolkit library. The debounce function delays execution of a callback, while chunk splits an array into smaller arrays of a specified size.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// import from '@es-toolkit/es-toolkit' in jsr.\nimport { chunk, debounce } from 'es-toolkit';\n\nconst debouncedLog = debounce(message => {\n  console.log(message);\n}, 300);\n\n// This call will be debounced\ndebouncedLog('Hello, world!');\n\nconst array = [1, 2, 3, 4, 5, 6];\nconst chunkedArray = chunk(array, 2);\n\nconsole.log(chunkedArray);\n// Output: [[1, 2], [3, 4], [5, 6]]\n```\n\n----------------------------------------\n\nTITLE: Mutex Usage Example in Asynchronous Context\nDESCRIPTION: Demonstrates how to use the Mutex to prevent simultaneous execution of critical code sections, with proper acquisition and release of the lock.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/promise/Mutex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutex = new Mutex();\n\nasync function criticalSection() {\n  await mutex.acquire();\n  try {\n    // This code section cannot be executed simultaneously\n  } finally {\n    mutex.release();\n  }\n}\n\ncriticalSection();\ncriticalSection(); // This call will wait until the first call releases the mutex.\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Arrays in TypeScript\nDESCRIPTION: The `flattenDeep` function flattens a nested array to an arbitrary depth. It takes an array `arr` of type `T[]` as input and returns a new array with all elements at the same level. It avoids the performance overhead of the native JavaScript `flat(Infinity)` method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flattenDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"function flattenDeep<T>(arr: T[]): Array<ExtractNestedArrayType<T>>;\"\n```\n\n----------------------------------------\n\nTITLE: Debounce with AbortSignal - Typescript\nDESCRIPTION: Illustrates how to use `AbortSignal` to cancel a debounced function. An `AbortController` is created, and its signal is passed to the `debounce` function. Calling `controller.abort()` will prevent the debounced function from executing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = new AbortController();\nconst signal = controller.signal;\nconst debouncedWithSignalFunction = debounce(\n  () => {\n    console.log('Function executed');\n  },\n  1000,\n  { signal }\n);\n\n// 1초 안에 다시 호출되지 않으면, '실행됨'을 로깅해요\ndebouncedWithSignalFunction();\n\n// debounce 함수 호출을 취소해요\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatible Debounce Examples\nDESCRIPTION: Examples showing lodash-compatible debounce implementation with leading, trailing, and maxWait options.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/debounce.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example with leading option\nconst leadingFn = debounce(\n  () => {\n    console.log('Leading function executed');\n  },\n  1000,\n  { leading: true }\n);\n\n// Will log 'Leading function executed' immediately\nleadingFn();\n\n// Example with trailing option\nconst trailingFn = debounce(\n  () => {\n    console.log('Trailing function executed');\n  },\n  1000,\n  { trailing: true }\n);\n\n// Will log 'Trailing function executed' after 1 second if not called again in that time\ntrailingFn();\n\n// Example with maxWait option\nconst maxWaitFn = debounce(\n  () => {\n    console.log('MaxWait function executed');\n  },\n  1000,\n  { maxWait: 2000 }\n);\n\n// Will log 'MaxWait function executed' after 2 seconds if called repeatedly within 1 second intervals\nmaxWaitFn();\nsetTimeout(maxWaitFn, 500);\nsetTimeout(maxWaitFn, 1000);\nsetTimeout(maxWaitFn, 1500);\nsetTimeout(maxWaitFn, 2000);\nsetTimeout(maxWaitFn, 2500);\nsetTimeout(maxWaitFn, 3000);\n```\n\n----------------------------------------\n\nTITLE: StartCase Usage Examples\nDESCRIPTION: Comprehensive examples showing various input patterns and their corresponding start case transformations, including handling of different delimiter styles and case patterns.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/startCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startCase } from 'es-toolkit/string';\n\nstartCase('--foo-bar--'); // returns 'Foo Bar'\nstartCase('fooBar'); // returns 'Foo Bar'\nstartCase('__FOO_BAR__'); // returns 'Foo Bar'\nstartCase('XMLHttpRequest'); // returns 'Xml Http Request'\nstartCase('_abc_123_def'); // returns 'Abc 123 Def'\nstartCase('__abc__123__def__'); // returns 'Abc 123 Def'\nstartCase('_-_-_-_'); // returns ''\nstartCase('12abc 12ABC'); // returns '12 Abc 12 ABC'\n```\n\n----------------------------------------\n\nTITLE: Defining Retry Function Signatures in TypeScript\nDESCRIPTION: TypeScript function signatures showing different overloads for the retry function. Includes basic usage, retry count parameter, and options object parameter with retries, delay, and abort signal.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/retry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction retry<T>(func: () => Promise<T>): Promise<T>;\nfunction retry<T>(func: () => Promise<T>, retries: number): Promise<T>;\nfunction retry<T>(func: () => Promise<T>, { retries, delay, signal }: RetryOptions): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating cloneDeep Usage with Various Data Types in TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of cloneDeep function with different data types including numbers, arrays, and nested objects. It shows how the function creates deep copies and maintains reference inequality.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst num = 29;\nconst clonedNum = cloneDeep(num);\nconsole.log(clonedNum); // 29\nconsole.log(clonedNum === num); // true\n\nconst arr = [1, 2, 3];\nconst clonedArr = cloneDeep(arr);\nconsole.log(clonedArr); // [1, 2, 3]\nconsole.log(clonedArr === arr); // false\n\nconst obj = { a: 1, b: 'es-toolkit', c: [1, 2, 3] };\nconst clonedObj = cloneDeep(obj);\nconsole.log(clonedObj); // { a: 1, b: 'es-toolkit', c: [1, 2, 3] }\nconsole.log(clonedObj === obj); // false\n\n// Nested objects and arrays\nconst nestedObj = { a: { b: { c: 'deep' } }, d: [1, 2, { e: 'nested' }] };\nconst clonedNestedObj = cloneDeep(nestedObj);\nconsole.log(clonedNestedObj); // { a: { b: { c: 'deep' } }, d: [1, 2, { e: 'nested' }] }\nconsole.log(clonedNestedObj === nestedObj); // false\nconsole.log(clonedNestedObj.a === nestedObj.a); // false\nconsole.log(clonedNestedObj.d === nestedObj.d); // false\nconsole.log(clonedNestedObj.d[2] === nestedObj.d[2]); // false\n```\n\n----------------------------------------\n\nTITLE: Defining the max Function Signature in TypeScript\nDESCRIPTION: TypeScript function signatures for the 'max' function showing three overloads: one for non-empty arrays, one for empty arrays returning undefined, and a generic version that handles both cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/max.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction max<T>(items: [T, ...T[]]): T;\nfunction max(): undefined;\nfunction max<T>(items?: T[]): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Picking Function Type Definition\nDESCRIPTION: Defines the type signature for the pick function, which takes an object and an array of keys to create a new object with selected properties\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/pick.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pick<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Pick<T, K>;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of intersectionBy with Object Arrays\nDESCRIPTION: Examples demonstrating how to use intersectionBy with arrays of objects and custom mapper functions to find common elements based on specific properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/array/intersectionBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst mapper = item => item.id;\nconst result = intersectionBy(array1, array2, mapper);\n\nconst array1 = [\n  { id: 1, name: 'jane' },\n  { id: 2, name: 'amy' },\n  { id: 3, name: 'michael' },\n];\nconst array2 = [2, 4];\nconst mapper = item => (typeof item === 'object' ? item.id : item);\nconst result = intersectionBy(array1, array2, mapper);\n```\n\n----------------------------------------\n\nTITLE: Using toString Function with Various Input Types\nDESCRIPTION: Examples demonstrating toString function usage with different input types including null, undefined, negative zero, arrays, and symbols.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toString.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(null); // returns ''\ntoString(undefined); // returns ''\ntoString(-0); // returns '-0'\ntoString([1, 2, -0]); // returns '1,2,-0'\ntoString([Symbol('a'), Symbol('b')]); // returns 'Symbol(a),Symbol(b)'\n```\n\n----------------------------------------\n\nTITLE: Using Memoize Function with Default Cache in TypeScript\nDESCRIPTION: This example demonstrates how to use the memoize function with its default caching mechanism. It memoizes a simple addition function and shows how repeated calls with the same argument return cached results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/memoize.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { memoize, MemoizeCache } from 'es-toolkit/function';\n\n// Example using the default cache\nconst add = (x: number) => x + 10;\nconst memoizedAdd = memoize(add);\n\nconsole.log(memoizedAdd(5)); // 15\nconsole.log(memoizedAdd(5)); // 15 (cached result)\nconsole.log(memoizedAdd.cache.size); // 1\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Throttle Function in TypeScript\nDESCRIPTION: This example demonstrates the basic usage of the throttle function. It creates a throttled function that logs a message, and shows how subsequent calls within the throttle period are handled.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/throttle.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttledFunction = throttle(() => {\n  console.log('Function executed');\n}, 1000);\n\n// Will log 'Function executed' immediately\nthrottledFunction(); // First call triggers execution immediately\n\n// Will log 'Function executed' after 1 second\nthrottledFunction(); // Second call is within the throttle period but triggers after 1 second due to trailing edge behavior\n\n// After 2 seconds\nsetTimeout(() => {\n  throttledFunction(); // Will log 'Function executed' again\n}, 2000); // This will log because the throttle period has passed\n```\n\n----------------------------------------\n\nTITLE: Partitioning Arrays with Predicate Function - TypeScript\nDESCRIPTION: The function 'partition' splits an array into two separate arrays based on the result of a predicate function. It accepts an array and a predicate function as inputs, returning a tuple of two arrays. Elements for which the predicate returns true are placed in the first array, while the rest are placed in the second. This method is useful for filtering collections or splitting data into two categories and requires TypeScript as a dependence.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/partition.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partition<T>(arr: T[], isInTruthy: (value: T) => boolean): [truthy: T[], falsy: T[]];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst isEven = x => x % 2 === 0;\nconst [even, odd] = partition(array, isEven);\n// even will be [2, 4], and odd will be [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Map Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating the various ways to use the map function, including transformation with functions, property keys, object iteratees, and working with objects as collections.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/map.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a transformation function\nconst array = [1, 2, 3];\nmap(array, value => value * 2); // => [2, 4, 6]\n\n// Using a property key as the iteratee\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, 'a'); // => [1, 2, 3]\n\n// Using an object as the iteratee\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, { a: 1 }); // => [true, false, false]\n\n// No iteratee\nconst numbers = [1, 2, 3];\nmap(numbers); // => [1, 2, 3]\n\n// Using an object as the collection\nconst obj = { a: 1, b: 2, c: 3 };\nmap(obj, (value, key) => `${key}: ${value}`); // => ['a: 1', 'b: 2', 'c: 3']\n```\n\n----------------------------------------\n\nTITLE: Defining Uniqueness Function with TypeScript\nDESCRIPTION: The `uniqBy` function is designed to filter an array, retaining only unique elements as determined by the `mapper` function. It requires `T[]` as input and applies `mapper` to extract properties for comparison. The output is a `T[]` containing unique items. Input includes any array and a transformation function; it outputs an array with no duplicate results of the mapping.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/uniqBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uniqBy<T, U>(arr: T[], mapper: (item: T) => U): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuniqBy([1.2, 1.5, 2.1, 3.2, 5.7, 5.3, 7.19], Math.floor);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [\n  { category: 'fruit', name: 'apple' },\n  { category: 'fruit', name: 'banana' },\n  { category: 'vegetable', name: 'carrot' },\n];\nuniqBy(array, item => item.category).length;\n```\n\n----------------------------------------\n\nTITLE: Implementing Shuffle Function in TypeScript\nDESCRIPTION: This function uses the Fisher-Yates algorithm to shuffle elements in an array. It requires a generic array as input and returns a new array with the elements in random order. The function is type-safe, utilizing TypeScript's generics.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/shuffle.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shuffle<T>(arr: T[]): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst shuffledArray = shuffle(array);\n// shuffledArray will be a new array with elements of array in random order, e.g., [3, 1, 4, 5, 2]\n```\n\n----------------------------------------\n\nTITLE: Defining Sum Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'sum' function. It takes an array of numbers as input and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/sum.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(nums: number[]): number;\n```\n\n----------------------------------------\n\nTITLE: Using pickBy Function Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the pickBy function. It creates an object with mixed types, defines a condition function to select only string properties, and applies the pickBy function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/object/pickBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 'pick', c: 3 };\nconst shouldPick = (value, key) => typeof value === 'string';\nconst result = pickBy(obj, shouldPick);\n// 結果は次のようになります { b: 'pick' }\n```\n\n----------------------------------------\n\nTITLE: Examples of Custom Array Difference in TypeScript\nDESCRIPTION: These examples demonstrate the use of `differenceWith` with different conditions and inputs, such as objects or primitive values. The examples show how to import the function, establish equality conditions, and execute the differences to get the desired outputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/differenceWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\nimport { differenceWith } from 'es-toolkit/array';\n\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst areItemsEqual = (a, b) => a.id === b.id;\nconst result = differenceWith(array1, array2, areItemsEqual);\n// result will be [{ id: 1 }, { id: 3 }] since the elements with id 2 are considered equal and are excluded from the result.\n\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [2, 4];\nconst areItemsEqual = (a, b) => a.id === b;\nconst result = differenceWith(array1, array2, areItemsEqual);\n// result will be [{ id: 1 }, { id: 3 }] since the element with id 2 is considered equal to the second array's element and is excluded from the result.\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Partial Function Application in TypeScript\nDESCRIPTION: Example usage of the 'partial' function to create partially applied functions. It shows how to create a greeting function with a fixed greeting and how to use placeholders for flexible argument positioning.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/partial.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partial } from 'es-toolkit/function';\n\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nconst sayHelloTo = partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nconst greetFred = partial(greet, partial.placeholder, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n```\n\n----------------------------------------\n\nTITLE: Sorting Objects by Criteria in TypeScript\nDESCRIPTION: The 'sortBy' function sorts an array of objects based on provided keys or sorting functions. It takes an array of objects and an array of criteria, which can be either keys of the objects or functions that retrieve values for sorting. The function returns a new array sorted in ascending order according to the specified criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/sortBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortBy<T extends object>(arr: T[], criteria: Array<((item: T) => unknown) | keyof T>): T[] {\n  // Function implementation goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = [\n  { user: 'foo', age: 24 },\n  { user: 'bar', age: 7 },\n  { user: 'foo ', age: 8 },\n  { user: 'bar ', age: 29 },\n];\n\nsortBy(users, ['user', 'age']);\nsortBy(users, [obj => obj.user, obj => obj.age]);\n```\n\n----------------------------------------\n\nTITLE: Examples of flatMap Function Usage\nDESCRIPTION: Practical examples showing how to use the flatMap function with arrays and objects, demonstrating duplication, property shorthand, object iteration, and working with nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/flatMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flatMap } from 'es-toolkit/compat';\n\n// Basic example with a function that returns arrays\nfunction duplicate(n) {\n  return [n, n];\n}\n\nflatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\n// Using with property shorthand\nconst objects = [{ a: [1, 2] }, { a: [3, 4] }];\nflatMap(objects, 'a');\n// => [1, 2, 3, 4]\n\n// With objects\nflatMap({ a: 1, b: 2 }, n => [n, n]);\n// => [1, 1, 2, 2]\n\n// Working with arrays of arrays\nflatMap([[1], [2, [3]], 4]);\n// => [1, 2, [3], 4]\n```\n\n----------------------------------------\n\nTITLE: Using extendWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the extendWith function to merge properties from multiple source objects into a target object. It showcases the usage of a custom getValueToAssign function to control the merging behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/extendWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignInWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Memoize with Custom Cache Key in TypeScript\nDESCRIPTION: This snippet shows how to use the memoize function with a custom cache key generator. It memoizes a sum function for arrays and uses a custom getCacheKey function to handle non-primitive arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/memoize.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example using a custom resolver\nconst sum = (arr: number[]) => arr.reduce((x, y) => x + y, 0);\nconst memoizedSum = memoize(sum, { getCacheKey: (arr: number[]) => arr.join(',') });\nconsole.log(memoizedSum([1, 2])); // 3\nconsole.log(memoizedSum([1, 2])); // 3 (cached result)\nconsole.log(memoizedSum.cache.size); // 1\n```\n\n----------------------------------------\n\nTITLE: Basic Debounce Function Usage Example\nDESCRIPTION: Demonstrates basic usage of the debounce function with a simple console log and cancellation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/debounce.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst debouncedFunction = debounce(() => {\n  console.log('Function executed');\n}, 1000);\n\n// Will log 'Function executed' after 1 second if not called again in that time\ndebouncedFunction();\n\n// Will not log anything as the previous call is canceled\ndebouncedFunction.cancel();\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Element by Custom Criteria in TypeScript\nDESCRIPTION: The `minBy` function is designed to iterate over an array and return the element with the minimum value, as determined by a provided function `getValue`. This function requires an array of elements and a callback to extract the numerical value for comparison. It outputs the element itself or `undefined` if the input array is empty.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/minBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction minBy<T>(items: [T, ...T[]], getValue: (element: T) => number): T;\\nfunction minBy<T>(items: T[], getValue: (element: T) => number): T | undefined;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nminBy([{ a: 1 }, { a: 2 }, { a: 3 }], x => x.a); // Returns: { a: 1 }\\nminBy([], x => x.a); // Returns: undefined\\nminBy(\\n  [\\n    { name: 'john', age: 30 },\\n    { name: 'jane', age: 28 },\\n    { name: 'joe', age: 26 },\\n  ],\\n  x => x.age\\n); // Returns: { name: 'joe', age: 26 }\n```\n\n----------------------------------------\n\nTITLE: Using Attempt Function for Successful Execution in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'attempt' function when the executed function succeeds. It returns a tuple with null as the first element and the result as the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attempt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { attempt } from 'es-toolkit/function';\n\n// If the function succeeds, it returns [null, function return value] tuple.\nconst [error, result] = attempt(() => 42);\n// [null, 42]\n```\n\n----------------------------------------\n\nTITLE: Defining Memoize Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript signature for the memoize function and the MemoizeCache interface. It specifies the function parameters, options, and return type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/memoize.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memoize<F extends (...args: any) => any>(\n  fn: F,\n  options: {\n    cache?: MemoizeCache<any, ReturnType<F>>;\n    getCacheKey?: (args: Parameters<F>[0]) => unknown;\n  } = {}\n): F & { cache: MemoizeCache<any, ReturnType<F>> };\n\ninterface MemoizeCache<K, V> {\n  set(key: K, value: V): void;\n  get(key: K): V | undefined;\n  has(key: K): boolean;\n  delete(key: K): boolean | void;\n  clear(): void;\n  size: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Array Difference in TypeScript\nDESCRIPTION: By importing `differenceWith` from `es-toolkit/compat`, this code provides examples that extend functionality similar to lodash, allowing for multiple arrays, handling array-like objects, and using default algorithms. It's useful for developers looking to replace or complement lodash in their TypeScript projects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/differenceWith.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\nimport { differenceWith } from 'es-toolkit/compat';\n\n// Example 1: Accepting multiple arrays to be compared against the first array with a comparator\nconst array = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst values1 = [{ id: 2 }];\nconst values2 = [{ id: 3 }];\nconst comparator = (a, b) => a.id === b.id;\n\nconst result = differenceWith(array, values1, values2, comparator);\n// result will be [{ id: 1 }]\n\n// Example 2: Accepting array-like objects as arguments with a comparator\nconst array = { 0: { id: 1 }, 1: { id: 2 }, 2: { id: 3 }, length: 3 };\nconst values = { 0: { id: 2 }, 1: { id: 3 }, length: 2 };\nconst comparator = (a, b) => a.id === b.id;\n\nconst result = differenceWith(array, values, comparator);\n// result will be [{ id: 1 }]\n\n// Example 3: Omitting the custom equality function\nconst array = [1, 2, 3];\nconst values1 = [2];\nconst values2 = [3];\n\nconst result = differenceWith(array, values1, values2);\n// result will be [1]\n\n```\n\n----------------------------------------\n\nTITLE: Defining the flatMap Function: TypeScript\nDESCRIPTION: This TypeScript function 'flatMap' takes an array and a mapping function, applying the function to each element and then flattening the output based on the specified depth. The function supports generics for type safety and defaults the depth to 1. It enables efficient transformation and flattening of nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatMap<T, U, D extends number = 1>(arr: T[], iteratee: (item: T) => U, depth?: D): Array<FlatArray<U[], D>> {\n    // implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'take' Function in TypeScript\nDESCRIPTION: The 'take' function takes an array and a count, returning a new array with the first 'count' elements. It gracefully handles cases where 'count' exceeds the array's length by returning the entire array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/take.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction take<T>(arr: T[], count: number): T[] {\n    return arr.slice(0, count);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Throttle Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the throttle function. It defines the function parameters, return type, and additional methods (cancel and flush) attached to the returned throttled function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/throttle.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction throttle<F extends (...args: any[]) => void>(\n  func: F,\n  throttleMs: number,\n  options?: ThrottleOptions\n): ((...args: Parameters<F>) => void) & {\n  cancel: () => void;\n  flush: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Subtract Function Signature in TypeScript\nDESCRIPTION: Function signature for the subtract operation that takes two number parameters and returns their difference as a number. It specifies the base number and the number to subtract from it.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/subtract.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction subtract(value: number, other: number): number;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Range Function in TypeScript\nDESCRIPTION: These examples demonstrate how to use the `range` function with different input values to generate number arrays. The code illustrates the flexibility of the `range` function in creating ascending or descending sequences with varying step sizes, providing diverse usage scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/range.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [0, 1, 2, 3]\nrange(4);\n\n// Returns [0, 5, 10, 15]\nrange(0, 20, 5);\n\n// Returns [0, -1, -2, -3]\nrange(0, -4, -1);\n\n// Throws an error: The step value must be a non-zero integer.\nrange(1, 4, 0);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Range Function Usage in TypeScript\nDESCRIPTION: This snippet provides examples of how to use the range function with different parameter combinations. It also includes an example that would throw an error due to an invalid step value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/math/range.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// [0, 1, 2, 3] を返します\nrange(4);\n\n// [0, 5, 10, 15] を返します\nrange(0, 20, 5);\n\n// [0, -1, -2, -3] を返します\nrange(0, -4, -1);\n\n// エラーを投げます: ステップ値は0以外の整数でなければなりません。\nrange(1, 4, 0);\n```\n\n----------------------------------------\n\nTITLE: Using findLastIndex with Different Search Criteria\nDESCRIPTION: Examples demonstrating how to use findLastIndex with various search criteria: predicate function to find numbers greater than 3, partial object to match by property, property-value pair to find specific values, and property name to find truthy values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findLastIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findLastIndex } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = findLastIndex(items, item => item > 3);\nconsole.log(result); // 4\n\n// Using a partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findLastIndex(items, { name: 'Bob' });\nconsole.log(result); // 1\n\n// Using a property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findLastIndex(items, ['name', 'Alice']);\nconsole.log(result); // 0\n\n// Using a property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findLastIndex(items, 'name');\nconsole.log(result); // 1\n```\n\n----------------------------------------\n\nTITLE: Semaphore Class Definition in TypeScript\nDESCRIPTION: Defines the structure and type signatures of a Semaphore class for managing concurrent operations. Includes capacity and available properties along with acquire and release method signatures.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/Semaphore.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Semaphore {\n  public capacity: number;\n  public available: number;\n\n  constructor(capacity: number);\n\n  acquire(): Promise<void>;\n  release(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using flatMap Function with Different Depths in TypeScript\nDESCRIPTION: Demonstrates the usage of the flatMap function with various depths of flattening. It shows how the function behaves with different iteratee functions and depth parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/array/flatMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3];\n\nconst result1 = flatMap(array, item => [item, item], 1);\n// [1, 1, 2, 2, 3, 3]를 반환해요.\n\nconst result2 = flatMap(array, item => [[item, item]], 2);\n// [1, 1, 2, 2, 3, 3]를 반환해요.\n\nconst result3 = flatMap(array, item => [[[item, item]]], 3);\n// [1, 1, 2, 2, 3, 3]를 반환해요.\n```\n\n----------------------------------------\n\nTITLE: Using omitBy Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the omitBy function. It creates an object with mixed types, defines a predicate function to omit string values, and applies the omitBy function to create a new object without string properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/omitBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 'omit', c: 3 };\nconst shouldOmit = (value, key) => typeof value === 'string';\nconst result = omitBy(obj, shouldOmit);\n// result will be { a: 1, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Basic Debounce Usage - Typescript\nDESCRIPTION: Demonstrates the basic usage of the `debounce` function. A function is debounced with a delay of 1000ms. Calling `debouncedFunction()` will log '실행됨' only if it's not called again within 1 second. Calling `debouncedFunction.cancel()` cancels any pending execution.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst debouncedFunction = debounce(() => {\n  console.log('실행됨');\n}, 1000);\n\n// 1초 안에 다시 호출되지 않으면, '실행됨'을 로깅해요\ndebouncedFunction();\n\n// 이전 호출이 취소되었으므로, 아무것도 로깅하지 않아요\ndebouncedFunction.cancel();\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with Predicate Function in TypeScript\nDESCRIPTION: This TypeScript function removes elements from an array based on a provided predicate function. It modifies the original array. The parameters include the array to modify and a function to determine if an element should be removed. The function returns the modified array with certain elements removed, and it operates directly on the passed array, changing it in place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/remove.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction remove<T>(arr: T[], shouldRemoveElement: (value: T, index: number, array: T[]) => boolean): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5];\nremove(numbers, value => value % 2 === 0);\nconsole.log(numbers); // [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Array Difference Function\nDESCRIPTION: Provides a lodash-compatible version of the 'difference' function from 'es-toolkit/compat' in TypeScript. It supports comparison of multiple arrays and array-like objects, returning unique elements from the first array after exclusions. Requires loading from 'es-toolkit/compat'.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/difference.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { difference } from 'es-toolkit/compat';\n\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [2, 4];\nconst array3 = [5, 6];\nconst result = difference(array1, array2, array3);\n// result will be [1, 3] since 2, 4, and 5 are in at least one of the arrays and are excluded from the result.\n\nconst arrayLike1 = { 0: 1, 1: 2, 2: 3, length: 3 };\nconst arrayLike2 = { 0: 2, 1: 4, length: 2 };\nconst result2 = difference(arrayLike1, arrayLike2);\n// result2 will be [1, 3] since 2 is in both array-like objects and is excluded from the result.\n```\n\n----------------------------------------\n\nTITLE: Defining flattenDeep Function in TypeScript\nDESCRIPTION: The flattenDeep function accepts an array and an iteratee function to map each element, returning a new flat array of extracted elements. It provides generic type safety and works efficiently by leveraging TypeScript's advanced type extraction for nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatMapDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flattenDeep<T>(arr: T[]): Array<ExtractNestedArrayType<T>> {\n    // Function implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating reverseString Function in TypeScript\nDESCRIPTION: This demo snippet shows a simple usage of the reverseString function. It imports the function from the es-toolkit/string module and logs the result of reversing the string 'hello'.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/reverseString.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reverseString } from 'es-toolkit/string';\n\nconsole.log(reverseString('hello'));\n```\n\n----------------------------------------\n\nTITLE: Implementing AttemptAsync Function Signature in TypeScript\nDESCRIPTION: Type definition showing the function signature for attemptAsync. The function takes an async function as input and returns a Promise resolving to a tuple containing either [null, result] or [error, null].\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attemptAsync.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction attemptAsync<T, E>(func: () => Promise<T>): Promise<[null, T] | [E, null]>;\n```\n\n----------------------------------------\n\nTITLE: Attempt Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating the attempt function in action, including successful execution, catching explicit errors, and handling non-Error exceptions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/attempt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example 1: Successful execution\nconst result = attempt((x, y) => x + y, 2, 3);\nconsole.log(result); // Output: 5\n\n// Example 2: Function throws an error\nconst errorResult = attempt(() => {\n  throw new Error('Something went wrong');\n});\nconsole.log(errorResult); // Output: Error: Something went wrong\n\n// Example 3: Non-Error thrown\nconst nonErrorResult = attempt(() => {\n  throw 'This is a string error';\n});\nconsole.log(nonErrorResult); // Output: Error: This is a string error\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for cloneDeepWith\nDESCRIPTION: Function signature showing the type definition and parameters for the cloneDeepWith function. Takes a generic type T and returns the same type after deep cloning.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeepWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cloneDeepWith<T>(\n  obj: T,\n  cloneValue: (value: any, key: PropertyKey | undefined, obj: T, stack: Map<any, any>) => any\n): T;\n```\n\n----------------------------------------\n\nTITLE: Basic Curry Function Usage Example\nDESCRIPTION: Demonstrates how to use the curry function with a simple sum function that takes three parameters. Shows step-by-step parameter application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(a: number, b: number, c: number) {\n  return a + b + c;\n}\n\nconst curriedSum = curry(sum);\n\n// The parameter `a` should be given the value `10`.\nconst sum10 = curriedSum(10);\n\n// The parameter `b` should be given the value `15`.\nconst sum25 = sum10(15);\n\n// The parameter `c` should be given the value `5`. The function 'sum' has received all its arguments and will now return a value.\nconst result = sum25(5);\n```\n\n----------------------------------------\n\nTITLE: pickBy Function Interface\nDESCRIPTION: This snippet shows the TypeScript interface definition for the `pickBy` function.  It takes an object and a boolean function as parameters and returns a partial object. The boolean function determines which properties of the input object will be included in the returned partial object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/pickBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pickBy<T extends Record<string, any>>(\n  obj: T,\n  shouldPick: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining partialRight Function in TypeScript\nDESCRIPTION: TypeScript signature for the partialRight function. It takes a function and partial arguments, returning a new function that appends the partial arguments to any received arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/partialRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partialRight<F extends Function>(func: F, ...partialArgs: any[]): (...args: any[]) => ReturnType<F>;\n\nnamespace partialRight {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Debounce with Leading Option - Typescript\nDESCRIPTION: Shows how to use the `leading` option to execute the function immediately upon the first call to the debounced function. Setting `{ leading: true }` will cause the function to execute immediately, as well as after the debounce delay if it's not called again.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// leading 옵션 예시\nconst leadingFn = debounce(\n  () => {\n    console.log('Leading function executed');\n  },\n  1000,\n  { leading: true }\n);\n\n// 'Leading function executed'를 바로 로깅해요.\nleadingFn();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Usage Examples of cloneDeepWith\nDESCRIPTION: Practical examples demonstrating different use cases of the cloneDeepWith function, including cloning primitive values, objects with customization, and arrays with value transformation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeepWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Clone a primitive value\nconst num = 29;\nconst clonedNum = cloneDeepWith(num);\nconsole.log(clonedNum); // 29\nconsole.log(clonedNum === num); // true\n\n// Clone an object with a customizer\nconst obj = { a: 1, b: 2 };\nconst clonedObj = cloneDeepWith(obj, value => {\n  if (typeof value === 'number') {\n    return value * 2; // Double the number\n  }\n});\nconsole.log(clonedObj); // { a: 2, b: 4 }\nconsole.log(clonedObj === obj); // false\n\n// Clone an array with a customizer\nconst arr = [1, 2, 3];\nconst clonedArr = cloneDeepWith(arr, value => {\n  return value + 1; // Increment each value\n});\nconsole.log(clonedArr); // [2, 3, 4]\nconsole.log(clonedArr === arr); // false\n```\n\n----------------------------------------\n\nTITLE: zipObject Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the zipObject function with arrays of different lengths. It shows three scenarios: equal length arrays, keys array longer than values array, and values array longer than keys array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zipObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst keys = ['a', 'b', 'c'];\nconst values = [1, 2, 3];\nconst result = zipObject(keys, values);\n// result will be { a: 1, b: 2, c: 3 }\n\nconst keys2 = ['a', 'b', 'c'];\nconst values2 = [1, 2];\nconst result2 = zipObject(keys2, values2);\n// result2 will be { a: 1, b: 2, c: undefined }\n\nconst keys3 = ['a', 'b'];\nconst values3 = [1, 2, 3];\nconst result3 = zipObject(keys3, values3);\n// result3 will be { a: 1, b: 2 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Utility Type for Nested Arrays\nDESCRIPTION: This utility type `ExtractNestedArrayType` recursively unpacks nested array types to extract the type of the innermost element. It uses conditional types and type inference to determine the element type at the deepest level of nesting.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flattenDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"// Utility type for recursively unpacking nested array types to extract the type of the innermost element\ntype ExtractNestedArrayType<T> = T extends ReadonlyArray<infer U> ? ExtractNestedArrayType<U> : T;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing mapValues Function Type Definition in TypeScript\nDESCRIPTION: Type definition for a function that transforms object values using a mapping function. Takes an object and a transformation function as parameters, returning a new object with the same keys but transformed values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mapValues.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mapValues<T extends Record<PropertyKey, unknown>, K extends keyof T, V>(\n  object: T,\n  getNewValue: (value: T[K], key: K, object: T) => V\n): Record<K, V>;\n```\n\n----------------------------------------\n\nTITLE: orderBy Usage Example in Typescript\nDESCRIPTION: Demonstrates how to use the `orderBy` function to sort an array of user objects by 'user' in ascending order and 'age' in descending order. The example defines an array of user objects and then calls `orderBy` with the desired sorting criteria and orders. The resulting sorted array is assigned to the `result` variable.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/orderBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Sort an array of objects by 'user' in ascending order and 'age' in descending order.\nconst users = [\n  { user: 'fred', age: 48 },\n  { user: 'barney', age: 34 },\n  { user: 'fred', age: 40 },\n  { user: 'barney', age: 36 },\n];\n\nconst result = orderBy(users, [obj => obj.user, 'age'], ['asc', 'desc']);\n// result will be:\n// [\n//   { user: 'barney', age: 36 },\n//   { user: 'barney', age: 34 },\n//   { user: 'fred', age: 48 },\n//   { user: 'fred', age: 40 },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements with Key Generation in TypeScript\nDESCRIPTION: The groupBy function groups elements of a given array based on keys generated by a user-defined function. It requires one dependency: an array of elements and a key-generating function. The function's output is an object mapping each key to an array of elements corresponding to that key. Key parameters include 'arr' for the array input and 'getKeyFromItem' for the key-generating function. It expects input elements in an array format and outputs an object. No significant limitations are noted.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/groupBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction groupBy<T, K extends PropertyKey>(arr: T[], getKeyFromItem: (item: T) => K): Record<K, T[]>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [\n  { category: 'fruit', name: 'apple' },\n  { category: 'fruit', name: 'banana' },\n  { category: 'vegetable', name: 'carrot' },\n];\nconst result = groupBy(array, item => item.category);\n// result will be:\n// {\n//   fruit: [\n//     { category: 'fruit', name: 'apple' },\n//     { category: 'fruit', name: 'banana' }\n//   ],\n//   vegetable: [\n//     { category: 'vegetable', name: 'carrot' }\n//   ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Splitting Arrays into Smaller Chunks with TypeScript\nDESCRIPTION: The 'chunk' function divides an input array into multiple smaller arrays, each with a specified maximum length. This function requires two parameters: an array to be split and a positive integer indicating the desired size of each sub-array. The function returns a two-dimensional array where each sub-array is of the specified length, or with remaining elements if the main array cannot be evenly split. The function throws an error if the size parameter is not a positive integer.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/chunk.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction chunk<T>(arr: T[], size: number): T[][] { /* Function code */ }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chunk } from 'es-toolkit/array';\n\n// Splits an array of numbers into sub-arrays of length 2\nchunk([1, 2, 3, 4, 5], 2);\n// Returns: [[1, 2], [3, 4], [5]]\n\n// Splits an array of strings into sub-arrays of length 3\nchunk(['a', 'b', 'c', 'd', 'e', 'f', 'g'], 3);\n// Returns: [['a', 'b', 'c'], ['d', 'e', 'f'], ['g']]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chunk } from 'es-toolkit/compat';\n\nchunk([1, 2, 3], 0); // Returns []\n```\n\n----------------------------------------\n\nTITLE: Using matchesProperty Examples in TypeScript\nDESCRIPTION: Demonstrates various ways to use the matchesProperty function including single property keys, nested property arrays, and deep path strings. Shows how to create and use property matchers for both simple and complex object structures.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matchesProperty.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a single property key\nconst checkName = matchesProperty('name', 'Alice');\nconsole.log(checkName({ name: 'Alice' })); // true\nconsole.log(checkName({ name: 'Bob' })); // false\n\n// Using an array of property keys\nconst checkNested = matchesProperty(['address', 'city'], 'New York');\nconsole.log(checkNested({ address: { city: 'New York' } })); // true\nconsole.log(checkNested({ address: { city: 'Los Angeles' } })); // false\n\n// Using a deep path\nconst checkNested = matchesProperty('address.city', 'New York');\nconsole.log(checkNested({ address: { city: 'New York' } })); // true\nconsole.log(checkNested({ address: { city: 'Los Angeles' } })); // false\n```\n\n----------------------------------------\n\nTITLE: Using Invariant Function in TypeScript\nDESCRIPTION: This snippet demonstrates various examples of using the 'invariant' function in TypeScript. It shows successful and failing cases, as well as practical use cases for condition checking.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/invariant.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This call will succeed without any errors\ninvariant(true, 'This should not throw');\n\n// This call will fail and throw an error with the message 'This should throw'\ninvariant(false, 'This should throw');\n\n// Example of using invariant with a condition\ninvariant(condition, 'Expected condition is false');\n\n// Ensure that the value is neither null nor undefined\ninvariant(value !== null && value !== undefined, 'Value should not be null or undefined');\n\n// Example of using invariant to check if a number is positive\ninvariant(number > 0, 'Number must be positive');\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible Intersection - TypeScript\nDESCRIPTION: This code snippet illustrates how to import and use the lodash-compatible intersection function, allowing for more than two arrays to be compared, returning only unique common elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersection.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { intersection } from 'es-toolkit/compat';\n\nconst array1 = [1, 2, 3, 4, 4, 5];\nconst array2 = [2, 4];\nconst array3 = [4, 6];\nconst result = intersection(array1, array2, array3);\n// The result is [4] because this only element is present in every array.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mergeWith Usage in TypeScript\nDESCRIPTION: This demo snippet shows a practical example of using mergeWith in a TypeScript environment. It merges two objects, combining numeric values by addition.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mergeWith.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeWith } from 'es-toolkit';\n\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nconst result = mergeWith(target, source, (targetValue, sourceValue) => {\n  if (typeof targetValue === 'number' && typeof sourceValue === 'number') {\n    return targetValue + sourceValue;\n  }\n});\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining cloneDeep Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the cloneDeep function. It takes a generic type T as input and returns the same type, ensuring type safety in the deep copy operation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cloneDeep<T>(obj: T): T;\n```\n\n----------------------------------------\n\nTITLE: String Capitalization Usage Examples\nDESCRIPTION: Example usage of the capitalize function showing how it handles both lowercase and uppercase input strings, converting them to have only the first character capitalized.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/capitalize.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { capitalize } from 'es-toolkit/string';\n\ncapitalize('fred'); // returns 'Fred'\ncapitalize('FRED'); // returns 'Fred'\n```\n\n----------------------------------------\n\nTITLE: Defining Retry Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the retry function. It includes three overloads: a basic version, one with a retry count, and one with detailed options.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/retry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction retry<T>(func: () => Promise<T>): Promise<T>;\nfunction retry<T>(func: () => Promise<T>, retries: number): Promise<T>;\nfunction retry<T>(func: () => Promise<T>, { retries, delay, signal }: RetryOptions): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Debounce with Trailing Option - Typescript\nDESCRIPTION: Demonstrates the usage of the `trailing` option to execute the function after the debounce delay. If `trailing` is set to `true`, the function will execute after `debounceMs` milliseconds, unless it's called again in the meantime.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// trailing 옵션 예시\nconst trailingFn = debounce(\n  () => {\n    console.log('Trailing function executed');\n  },\n  1000,\n  { trailing: true }\n);\n\n// 디바운스된 함수가 그 사이에 호출되지 않는다면, 'Trailing function executed'을 1초 뒤에 로깅해요.\ntrailingFn();\n```\n\n----------------------------------------\n\nTITLE: zipWith Usage Examples with Two and Three Arrays\nDESCRIPTION: Practical examples demonstrating how to use the zipWith function with both two and three input arrays. The first example shows adding numbers from two arrays, while the second shows string concatenation with values from three arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zipWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example usage with two arrays:\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst result = zipWith(arr1, arr2, (a, b) => a + b);\n// result will be [5, 7, 9]\n\n// Example usage with three arrays:\nconst arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst arr3 = [5, 6];\nconst result = zipWith(arr1, arr2, arr3, (a, b, c) => `${a}${b}${c}`);\n// result will be ['135', '246']\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript isSubset Function\nDESCRIPTION: Implements a generic type-safe function to check if one array is a subset of another, comparing all elements across different types\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubset.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSubset<T>(superset: T[], subset: T[]): boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Curry Function Signatures\nDESCRIPTION: Type definitions for the curry function supporting up to 5 parameters. Includes overloaded function signatures for different parameter counts and a generic catch-all signature.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curry.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curry<R>(func: () => R): () => R;\nfunction curry<P, R>(func: (p: P) => R): (p: P) => R;\nfunction curry<P1, P2, R>(func: (p1: P1, p2: P2) => R): (p1: P1) => (p2: P2) => R;\nfunction curry<P1, P2, P3, R>(func: (p1: P1, p2: P2, p3: P3) => R): (p1: P1) => (p2: P2) => (p3: P3) => R;\nfunction curry<P1, P2, P3, P4, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4) => R\n): (p1: P1) => (p2: P2) => (p3: P3) => (p4: P4) => R;\nfunction curry<P1, P2, P3, P4, P5, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) => R\n): (p1: P1) => (p2: P2) => (p3: P3) => (p4: P4) => (p5: P5) => R;\nfunction curry(func: (...args: any[]) => any): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining bindKey Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the bindKey function. It specifies the function signature, including its parameters and return type, as well as the placeholder symbol.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/bindKey.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bindKey<T extends Record<PropertyKey, any>, K extends keyof T>(\n  object: T,\n  key: K,\n  ...partialArgs: any[]\n): T[K] extends (...args: any[]) => any ? (...args: any[]) => ReturnType<T[K]> : never;\n\nnamespace bindKey {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Sandbox Demo Implementation\nDESCRIPTION: A complete implementation demonstrating mergeWith usage with numeric value merging\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mergeWith.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeWith } from 'es-toolkit';\n\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nconst result = mergeWith(target, source, (targetValue, sourceValue) => {\n  if (typeof targetValue === 'number' && typeof sourceValue === 'number') {\n    return targetValue + sourceValue;\n  }\n});\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects with Various Criteria in TypeScript\nDESCRIPTION: Examples demonstrating how to use the filter function with objects using different approaches: predicate function, partial object matching, property-value pair, and property name existence checking.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/filter.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { filter } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nfilter(obj, item => item > 2);\n// => [3]\n\n// Using a partial object\nconst obj = {\n  a: { id: 1, name: 'Alice' },\n  b: { id: 2, name: 'Bob' },\n};\nfilter(obj, { name: 'Bob' });\n// => [{ id: 2, name: 'Bob' }]\n\n// Using a property-value pair\nconst obj = {\n  alice: { id: 1, name: 'Alice' },\n  bob: { id: 2, name: 'Bob' },\n};\nfilter(obj, ['name', 'Alice']);\n// => [{ id: 1, name: 'Alice' }]\n\n// Using a property name\nconst obj = {\n  a: { id: 1, name: 'Alice' },\n  b: { id: 2, name: 'Bob' },\n  c: { id: 3, age: 28 },\n};\nfilter(obj, 'name');\n// => [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }]\n```\n\n----------------------------------------\n\nTITLE: Using xorBy Function with Object Arrays in TypeScript\nDESCRIPTION: Example usage of the xorBy function with arrays of objects. It demonstrates how to find elements with unique IDs across two arrays by providing a mapping function that extracts the id property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xorBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [{ id: 1 }, { id: 3 }]\nxorBy([{ id: 1 }, { id: 2 }], [{ id: 2 }, { id: 3 }], x => x.id);\n```\n\n----------------------------------------\n\nTITLE: Array Examples for 'every' Function in TypeScript\nDESCRIPTION: Examples demonstrating how to use the 'every' function with arrays, including various matching strategies like predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/every.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { every } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = every(items, item => item > 0);\nconsole.log(result); // true\n\n// Using a partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, { name: 'Bob' });\nconsole.log(result); // false\n\n// Using a property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, ['name', 'Alice']);\nconsole.log(result); // false\n\n// Using a property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Unzip Example\nDESCRIPTION: This example demonstrates how the `unzip` function transforms an array of tuples into an array of arrays, where each inner array contains elements from the same position in the original tuples.  The input is a zipped array of type `Array<[string, boolean, number]>`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unzip.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nunzip([\n  ['a', true, 1],\n  ['b', false, 2],\n]);\n// return: [['a', 'b'], [true, false], [1, 2]]\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of defaultTo Function\nDESCRIPTION: Practical examples demonstrating various use cases of the defaultTo function, including handling null, undefined, NaN and valid values with different types of default values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/defaultTo.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultTo(null, 'default'); // returns 'default'\ndefaultTo(undefined, 42); // returns 42\ndefaultTo(NaN, 0); // returns 0\ndefaultTo('actual', 'default'); // returns 'actual'\ndefaultTo(123, 0); // returns 123\n```\n\n----------------------------------------\n\nTITLE: XOR Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the xor function with different array types. Shows numeric and string array comparisons.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xor.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [1, 2, 5, 6]\nxor([1, 2, 3, 4], [3, 4, 5, 6]);\n\n// Returns ['a', 'c']\nxor(['a', 'b'], ['b', 'c']);\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Function Application in TypeScript\nDESCRIPTION: TypeScript signature for the 'partial' function and its namespace. It defines the function that creates partially applied functions and includes a placeholder symbol for flexible argument positioning.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/partial.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partial<F extends Function>(func: F, ...partialArgs: any[]): (...args: any[]) => ReturnType<F>;\n\nnamespace partial {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Compact Array Usage Example in TypeScript\nDESCRIPTION: Demonstrates removing various falsey values from a mixed-type array, returning only truthy elements\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/compact.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncompact([0, 0n, 1, false, 2, '', 3, null, undefined, 4, NaN, 5])\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from Array - TypeScript\nDESCRIPTION: The 'dropRight' function takes an array and a count of elements to remove from the end, returning a new array that has those elements removed. It is a generic function that works with arrays of any type. The key parameters are 'arr', which represents the input array, and 'itemsCount', which specifies how many elements to drop. The function is designed to ensure that the returned array contains the remaining elements after the specified drop.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropRight<T>(arr: T[], itemsCount: number): T[] {\n    // Implementation logic goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Last Element from an Array in TypeScript\nDESCRIPTION: This TypeScript function retrieves the last element from an array. It supports generic types for type safety. If the provided array is empty, it returns 'undefined'. Requires TypeScript to properly utilize generic types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/last.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction last<T>(arr: [...T[], T]): T;\nfunction last<T>(arr: T[]): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutError Class in TypeScript\nDESCRIPTION: This code snippet defines the TimeoutError class, which extends the built-in Error class. It sets the 'name' property to 'TimeoutError' to distinguish it from other error types. This class is used when operations like timeout or withTimeout have exceeded their time limit.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/error/TimeoutError.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TimeoutError extends Error {\n  name = 'TimeoutError',\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Map Function Usage in TypeScript\nDESCRIPTION: Provides examples of using the 'map' function with different input types and iteratee functions. It shows how to transform arrays and objects using various iteratee options, including transformation functions, property keys, and object matching.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/map.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 変換関数使用\nconst array = [1, 2, 3];\nmap(array, value => value * 2); // => [2, 4, 6]\n\n// イテレータでプロパティキーを使用\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, 'a'); // => [1, 2, 3]\n\n// イテレータでオブジェクトを使用\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, { a: 1 }); // => [true, false, false]\n\n// イテレータなし\nconst numbers = [1, 2, 3];\nmap(numbers); // => [1, 2, 3]\n\n// オブジェクトでコレクションを使用\nconst obj = { a: 1, b: 2, c: 3 };\nmap(obj, (value, key) => `${key}: ${value}`); // => ['a: 1', 'b: 2', 'c: 3']\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Array Difference Function\nDESCRIPTION: Illustrates how to use the 'difference' function from 'es-toolkit/array' in TypeScript, demonstrating its ability to compute differences between arrays. Assumes importation from 'es-toolkit/array'. Initial arrays are input, and the output is an array with elements unique to the first input array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/difference.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { difference } from 'es-toolkit/array';\n\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [2, 4];\nconst result = difference(array1, array2);\n// result will be [1, 3, 5] since 2 and 4 are in both arrays and are excluded from the result.\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript mergeWith Function Interface\nDESCRIPTION: Defines the TypeScript interface for the mergeWith function, which supports generic object merging with custom merge logic\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mergeWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mergeWith<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(\n  target: T,\n  source: S,\n  merge: (targetValue: any, sourceValue: any, key: string, target: T, source: S) => any\n): T & S;\n```\n\n----------------------------------------\n\nTITLE: Defining Array Reversal Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'reverse' function. It takes an array of type T and returns an array of the same type after reversing its elements in place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/reverse.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reverse<T>(array: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Examples of takeWhile Usage in TypeScript\nDESCRIPTION: These examples demonstrate using the takeWhile function with different predicates. Inputs are arrays and conditions, while outputs are filtered arrays based on elements meeting the criteria. The examples highlight using numeric comparisons, matching object properties, and truthy value checks.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeWhile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [1, 2]\ntakeWhile([1, 2, 3, 4], x => x < 3);\n\n// Returns []\ntakeWhile([1, 2, 3, 4], x => x > 3);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of cond Function in TypeScript\nDESCRIPTION: Demonstrates how to use the cond function to create a conditional function that evaluates different predicates. The example shows matching against an object pattern, a type conformance check, and a default case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/cond.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = cond([\n  [matches({ a: 1 }), constant('matches A')],\n  [conforms({ b: isNumber }), constant('matches B')],\n  [stubTrue, constant('no match')],\n]);\n\nfunc({ a: 1, b: 2 });\n// => 'matches A'\n\nfunc({ a: 0, b: 1 });\n// => 'matches B'\n\nfunc({ a: '1', b: '2' });\n// => 'no match'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of uniqWith - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the uniqWith function by providing an array of numbers and a custom comparator function that checks if the numbers are close enough (within 1 unit of difference) to be considered equal.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/uniqWith.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nuniqWith([1.2, 1.5, 2.1, 3.2, 5.7, 5.3, 7.19], (a, b) => Math.abs(a - b) < 1); // [1.2, 3.2, 5.7, 7.19]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of flowRight\nDESCRIPTION: Demonstrates basic usage of flowRight by composing add and square functions to create a new function that adds two numbers and squares the result.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flowRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst add = (x: number, y: number) => x + y;\nconst square = (n: number) => n * n;\n\nconst combined = flowRight(square, add);\nconsole.log(combined(1, 2)); // => 9\n```\n\n----------------------------------------\n\nTITLE: Demonstrating toPairs Usage with Objects, Sets, and Maps in TypeScript\nDESCRIPTION: This example illustrates how to use the toPairs function with different data structures. It shows the function's behavior when applied to an object, a Set, and a Map, along with their respective outputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toPairs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\ntoPairs(object); // [['a', 1], ['b', 2]]\n\nconst set = new Set([1, 2]);\ntoPairs(set); // [[1, 1], [2, 2]]\n\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\ntoPairs(map); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Intersection Function - TypeScript\nDESCRIPTION: This example demonstrates how to use the intersection function with two specific arrays. It filters and returns items that are present in both input arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersection.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [1, 2, 3, 4, 5];\nconst array2 = [3, 4, 5, 6, 7];\nconst result = intersection(array1, array2);\n// result will be [3, 4, 5] since these elements are in both arrays.\n```\n\n----------------------------------------\n\nTITLE: Using Zip Function with Three Arrays in TypeScript\nDESCRIPTION: Example showing how the zip function handles three arrays of different types and lengths. When arrays have different lengths, undefined values are used for missing elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zip.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = ['a', 'b', 'c'];\nconst arr3 = [true, false];\nconst result2 = zip(arr1, arr2, arr3);\n// result2 will be [[1, 'a', true], [2, 'b', false], [3, 'c', undefined]]\n```\n\n----------------------------------------\n\nTITLE: Using AsyncNoop as Default Function Parameter in React Component\nDESCRIPTION: Example showing how to use asyncNoop as a default value for optional async function props in a React component. Demonstrates safe handling of optional async callbacks.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/asyncNoop.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { asyncNoop } from 'es-toolkit/function';\n\ninterface Props {\n  fetchData?: () => Promise<void>;\n}\n\nfunction MyComponent({ fetchData = asyncNoop }: Props) {\n  const handleFetchData = async () => {\n    // Here fetchData is guaranteed to be a function, so it's safe to call.\n    await fetchData();\n  };\n\n  handleFetchData();\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Intersection with Custom Equality in TypeScript\nDESCRIPTION: The intersectionWith function takes two arrays and a custom equality function, returning a new array containing elements from the first array that match elements in the second array. It's crucial for scenarios where simple equality is insufficient, and custom logic is needed. Dependencies are native TypeScript/JavaScript capabilities. It accepts the first and second arrays as inputs, along with a comparator function. The expected output is an array matching the intersection logic defined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intersectionWith<T, U>(firstArr: T[], secondArr: U[], areItemsEqual: (x: T, y: U) => boolean): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst areItemsEqual = (a, b) => a.id === b.id;\nconst result = intersectionWith(array1, array2, areItemsEqual);\n// result will be [{ id: 2 }] since this element has a matching id in both arrays.\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [\n  { id: 1, name: 'jane' },\n  { id: 2, name: 'amy' },\n  { id: 3, name: 'michael' },\n];\nconst array2 = [2, 4];\nconst areItemsEqual = (a, b) => a.id === b;\nconst result = intersectionWith(array1, array2, areItemsEqual);\n// result will be [{ id: 2, name: 'amy' }] since this element has a matching id that is equal to seconds array's element.\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex Class Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of the Mutex class with its properties and methods. It includes an isLocked property and methods for acquiring and releasing the mutex.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/Mutex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mutex {\n  isLocked: boolean;\n\n  acquire(): Promise<void>;\n  release(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: flatMap Usage Examples: TypeScript\nDESCRIPTION: These examples illustrate the usage of the 'flatMap' function with an array of numbers. Each example demonstrates mapping elements to arrays and flattening them to various depths, showcasing the functionality and versatility of the 'flatMap' function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3];\n\nconst result1 = flatMap(array, item => [item, item], 1);\n// Return [1, 1, 2, 2, 3, 3]\n\nconst result2 = flatMap(array, item => [[item, item]], 2);\n// Return [1, 1, 2, 2, 3, 3]\n\nconst result3 = flatMap(array, item => [[[item, item]]], 3);\n// Return [1, 1, 2, 2, 3, 3]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of Identity Function in TypeScript\nDESCRIPTION: This snippet provides examples of using the identity function with different types of inputs, including a number, a string, and an object. It demonstrates the function's ability to work with various data types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/identity.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns 5\nidentity(5);\n\n// Returns 'hello'\nidentity('hello');\n\n// Returns { key: 'value' }\nidentity({ key: 'value' });\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Curry Function Usage Example\nDESCRIPTION: Shows advanced usage of the lodash-compatible curry function including multiple argument application, placeholders, and custom arity specification.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curry.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { curry } from 'es-toolkit/compat';\n\nconst abc = function (a, b, c) {\n  return Array.from(arguments);\n};\n\nlet curried = curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(curry.placeholder, 3)(2);\n// => [1, 2, 3]\n\n// Curried with arity.\ncurried = curry(abc, 2);\n\ncurried(1)(2);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Using flatMap with Arrays and Objects\nDESCRIPTION: Demonstrates various use cases of the flatMap function, including using a function that returns arrays, property shorthand notation, working with objects, and handling nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/flatMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flatMap } from 'es-toolkit/compat';\n\n// 配列を返す関数を使用した基本例\nfunction duplicate(n) {\n  return [n, n];\n}\n\nflatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\n// プロパティショートハンドの使用\nconst objects = [{ a: [1, 2] }, { a: [3, 4] }];\nflatMap(objects, 'a');\n// => [1, 2, 3, 4]\n\n// オブジェクトでの使用\nflatMap({ a: 1, b: 2 }, n => [n, n]);\n// => [1, 1, 2, 2]\n\n// ネストされた配列の処理\nflatMap([[1], [2, [3]], 4]);\n// => [1, 2, [3], 4]\n```\n\n----------------------------------------\n\nTITLE: Using isNotNil Function as a Filter in TypeScript\nDESCRIPTION: This example demonstrates how to use isNotNil as a filter function to remove null and undefined values from an array. It also showcases the type narrowing capabilities of isNotNil in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNotNil.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Here the type of `arr` is (number | undefined)[]\nconst arr = [1, undefined, 3];\n// Here the type of `result` is number[]\nconst result = arr.filter(isNotNil);\n// result will be [1, 3]\n```\n\n----------------------------------------\n\nTITLE: Using Attempt Function for Error Handling in TypeScript\nDESCRIPTION: This example shows how the 'attempt' function handles errors. When an error occurs, it returns a tuple with the error as the first element and null as the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attempt.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// If an error occurs, it returns [error thrown by the function, null] tuple.\nconst [error, result] = attempt(() => {\n  throw new Error('Something went wrong');\n});\n// [Error, null]\n```\n\n----------------------------------------\n\nTITLE: Computing Array Difference with Custom Comparator in TypeScript\nDESCRIPTION: This function calculates the difference between two arrays by using a user-defined equality function to determine if elements should be considered equal. The function requires three parameters: the arrays to compare and the comparison function. It returns a new array that includes elements from the first array that are not in the second array, as determined by the equality function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/differenceWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\nfunction differenceWith<T, U>(firstArr: T[], secondArr: U[], areItemsEqual: (x: T, y: U) => boolean): T[];\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the debounce utility that creates a debounced version of a function with cancel, flush, and schedule methods.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/debounce.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction debounce<F extends (...args: any[]) => void>(\n  func: F,\n  debounceMs: number,\n  options?: DebounceOptions\n): ((...args: Parameters<F>) => void) & {\n  cancel: () => void;\n  flush: () => void;\n  schedule: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Objects with Arrays in TypeScript\nDESCRIPTION: This example shows how the merge function handles arrays within objects. It demonstrates that arrays are merged, with the source array overwriting the target array's elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/merge.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: [1, 2], b: { x: 1 } };\nconst source = { a: [3], b: { y: 2 } };\nconst result = merge(target, source);\nconsole.log(result);\n// Output: { a: [3, 2], b: { x: 1, y: 2 } }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of medianBy with Object Array\nDESCRIPTION: Demonstrates calculating median by extracting values from an array of objects using a custom selector function. Shows handling of odd and even-length arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/medianBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmedianBy([{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }, { a: 5 }], x => x.a); // 3을 반환해요.\nmedianBy([{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }], x => x.a); // 2.5를 반환해요.\nmedianBy([], x => x.a); // NaN을 반환해요.\n```\n\n----------------------------------------\n\nTITLE: Object Examples for 'every' Function in TypeScript\nDESCRIPTION: Examples demonstrating how to use the 'every' function with objects, showing different matching strategies including predicate functions, partial values, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/every.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { every } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = every(obj, value => value > 0);\nconsole.log(result); // true\n\n// Using a partial value\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = every(obj, { name: 'Bob' });\nconsole.log(result); // false\n\n// Using a property-value pair\nconst obj = { alice: { id: 1, name: 'Alice' }, bob: { id: 2, name: 'Bob' } };\nconst result = every(obj, ['name', 'Alice']);\nconsole.log(result); // false\n\n// Using a property name\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = every(obj, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: Defining takeWhile Function in TypeScript\nDESCRIPTION: This function takes an array and a predicate function, returning a new array of elements taken from the beginning until the predicate returns false. It requires a predicate function that accepts each element and returns truthy or falsey. Inputs include an array and a predicate, while outputs are arrays of matching elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeWhile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeWhile<T>(arr: T[], shouldContinueTaking: (element: T) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Declaring Includes Function Signatures in TypeScript\nDESCRIPTION: TypeScript function signatures showing the three overloaded variants of the includes function for arrays, objects, and strings, with proper typing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/includes.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction includes<T>(arr: T[], item: T, fromIndex?: number): boolean;\nfunction includes<T extends Record<string, any>>(obj: T, value: T[keyof T], fromIndex?: number): boolean;\nfunction includes(str: string, substr: string, fromIndex?: number): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining assignWith Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the assignWith function. It defines multiple overloads to handle different numbers of source objects and includes an optional getValueToAssign callback function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Merging Objects with Nested Properties in TypeScript\nDESCRIPTION: This example demonstrates merging two objects with nested properties. The merge function combines the properties recursively, updating the target object in place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/merge.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1, b: { x: 1, y: 2 } };\nconst source = { b: { y: 3, z: 4 }, c: 5 };\nconst result = merge(target, source);\nconsole.log(result);\n// Output: { a: 1, b: { x: 1, y: 3, z: 4 }, c: 5 }\n```\n\n----------------------------------------\n\nTITLE: Using flattenDepth to Flatten Arrays\nDESCRIPTION: Examples demonstrating how the flattenDepth function works at different depth levels. When depth is 1, it flattens only the first level of nesting, and when depth is 2, it flattens two levels.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/flattenDepth.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = flattenDepth([1, [2, 3], [4, [5, 6]]], 1);\n// Returns: [1, 2, 3, 4, [5, 6]]\n\nconst arr = flattenDepth([1, [2, 3], [4, [5, 6]]], 2);\n// Returns: [1, 2, 3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Using findLast with Arrays in TypeScript\nDESCRIPTION: Examples of using findLast function with arrays, demonstrating different matching methods: predicate function, partial object, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findLast.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findLast } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = findLast(items, item => item > 3);\nconsole.log(result); // 5\n\n// Using a partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, { name: 'Bob' });\nconsole.log(result); // { id: 2, name: 'Bob' }\n\n// Using a property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, ['name', 'Alice']);\nconsole.log(result); // { id: 1, name: 'Alice' }\n\n// Using a property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, 'name');\nconsole.log(result); // { id: 2, name: 'Bob' }\n```\n\n----------------------------------------\n\nTITLE: Defining cloneDeep TypeScript Function Interface\nDESCRIPTION: Defines the type signature for the cloneDeep function, which takes a generic type T and returns a deep copy of the input object\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/cloneDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cloneDeep<T>(obj: T): T;\n```\n\n----------------------------------------\n\nTITLE: Using assignWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the assignWith function to merge properties from multiple source objects into a target object. It uses a custom getValueToAssign function to determine the final values of properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using attempt Function with Generic Types in TypeScript\nDESCRIPTION: This example illustrates how to use generic types with the 'attempt' function to specify the types of the function's return value and potential errors.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/util/attempt.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [error, names] = attempt<string[], Error>(() => ['Alice', 'Bob']);\n// `error`は`Error`型として、`names`は`string[]`型として推論されます。\n```\n\n----------------------------------------\n\nTITLE: Map Function Type Signatures in TypeScript\nDESCRIPTION: Comprehensive type signatures for the map function showing its polymorphic nature. The function can work with arrays or objects as the first parameter and supports various iteratee types for element transformation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/map.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction map<T, U>(arr: T[], iteratee: (value: T, index: number, arr: T[]) => U): U[];\nfunction map<T>(arr: T[], iteratee: Partial<T>): boolean[];\nfunction map<T>(arr: T[], iteratee: [keyof T, unknown]): boolean[];\nfunction map<T, K extends keyof T>(arr: T[], iteratee: K): Array<T[K]>;\nfunction map<T>(arr: T[], iteratee?: null | undefined): T[];\n\nfunction map<T extends object, U>(object: T, iteratee: (value: T[keyof T], key: string, object: T) => U): U[];\nfunction map<T>(object: T, iteratee: Partial<T[keyof T]>): boolean[];\nfunction map<T>(object: T, iteratee: [keyof T[keyof T], unknown]): boolean[];\nfunction map<T, K extends keyof T[keyof T]>(object: T, iteratee: K): Array<T[keyof T][K]>;\nfunction map<T extends object, U>(object: T, iteratee?: null | undefined): U[];\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript keyBy Function Signature\nDESCRIPTION: Generic function that maps an array to an object using a key generator function, with support for multiple types and key generation strategies\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/keyBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keyBy<T, K extends PropertyKey>(arr: T[], getKeyFromItem: (item: T) => K): Record<K, T>;\n```\n\n----------------------------------------\n\nTITLE: Using the Flip Function with Multiple Arguments in TypeScript\nDESCRIPTION: Example demonstrating how to use the flip function to reverse the order of arguments when calling a function. It shows importing from es-toolkit/compat and applying the flip transformation to a function with multiple parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/flip.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flip } from 'es-toolkit/compat';\n\nfunction fn(a: string, b: string, c: string, d: string) {\n  return [a, b, c, d];\n}\n\nconst flipped = flip(fn);\nflipped(1, 2, 3, 4); // => [4, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Basic Property Picking Example\nDESCRIPTION: Example usage of the pick function to select specific properties from a simple object. Demonstrates picking 'a' and 'c' properties from an object with three properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/pick.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = pick(obj, ['a', 'c']);\n// result will be { a: 1, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible takeWhile Method in TypeScript\nDESCRIPTION: This section outlines the takeWhile function's compatibility with Lodash, offering versatile overloads and usage scenarios with arrays, predicates, partial objects, and property flags. The primary dependency involves TypeScript typing for arrays and compatible predicates.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeWhile.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeWhile<T>(array: ArrayLike<T> | null | undefined): T[];\nfunction takeWhile<T>(\n  array: ArrayLike<T> | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => unknown\n): T[];\nfunction takeWhile<T>(array: ArrayLike<T> | null | undefined, matches: Partial<T>): T[];\nfunction takeWhile<T>(array: ArrayLike<T> | null | undefined, matchesProperty: [keyof T, unknown]): T[];\nfunction takeWhile<T>(array: ArrayLike<T> | null | undefined, property: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Using Throttle Function with Window Events in TypeScript\nDESCRIPTION: This example shows how to use the throttle function with window events. It creates a throttled resize handler and attaches it to the window's resize event, demonstrating practical application in event handling scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/throttle.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Example function to throttle\nconst logResize = () => {\n  console.log('Window resized at', new Date().toISOString());\n};\n\n// Create a throttled version of the logResize function\nconst throttledResizeHandler = throttle(logResize, 1000);\n\n// Attach the throttled function to the window resize event\nwindow.addEventListener('resize', throttledResizeHandler);\n\n// Optional: Clean up the event listener when no longer needed\nconst cleanup = () => {\n  window.removeEventListener('resize', throttledResizeHandler);\n};\n\n// Example: Clean up after 10 seconds\nsetTimeout(cleanup, 10000);\n```\n\n----------------------------------------\n\nTITLE: Basic Object Property Picking Example\nDESCRIPTION: Demonstrates how to use the pick function to extract specific properties from an object\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/pick.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = pick(obj, ['a', 'c']);\n// 결과는 다음과 같아요 { a: 1, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using Zip Function with Two Arrays in TypeScript\nDESCRIPTION: Example demonstrating how to use the zip function to combine two arrays of different types (numbers and strings) into a single array of tuples.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zip.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = ['a', 'b', 'c'];\nconst result = zip(arr1, arr2);\n// result will be [[1, 'a'], [2, 'b'], [3, 'c']]\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with isEqual in JavaScript\nDESCRIPTION: This example demonstrates how isEqual performs deep comparison of objects. It shows that objects with the same structure and values are considered equal, while those with different structures or values are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj1 = { a: 1, b: { c: 2 } };\nconst obj2 = { a: 1, b: { c: 2 } };\nisEqual(obj1, obj2); // true\n\nconst obj3 = { a: 1, b: { c: 3 } };\nisEqual(obj1, obj3); // false\n\nconst obj4 = { a: 1, b: 2 };\nconst obj5 = { a: 1, c: 2 };\nisEqual(obj4, obj5); // false\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Signatures for reduce Function\nDESCRIPTION: Function signatures for the reduce method which supports arrays, array-like objects, and object collections with various combinations of iteratee and initial value parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reduce.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reduce<T, U>(\n  collection: T[],\n  iteratee: (accumulator: U, value: T, index: number, collection: T[]) => U,\n  initialValue: U\n): U;\nfunction reduce<T>(collection: T[], iteratee: (accumulator: T, value: T, index: number, collection: T[]) => T): T;\n\nfunction reduce<T, U>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: U, value: T, index: number, collection: ArrayLike<T>) => U,\n  initialValue: U\n): U;\nfunction reduce<T>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: T, value: T, index: number, collection: ArrayLike<T>) => T\n): T;\n\nfunction reduce<T extends object, U>(\n  collection: T,\n  iteratee: (accumulator: U, value: T[keyof T], key: keyof T, collection: T) => U,\n  initialValue: U\n): U;\nfunction reduce<T extends object>(\n  collection: T,\n  iteratee: (accumulator: T[keyof T], value: T[keyof T], key: keyof T, collection: T) => T[keyof T]\n): T[keyof T];\n```\n\n----------------------------------------\n\nTITLE: Defining curryRight Function Signatures in TypeScript\nDESCRIPTION: This code snippet defines multiple function signatures for the curryRight function, supporting various numbers of parameters and return types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curryRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curryRight<R>(func: () => R): () => R;\nfunction curryRight<P, R>(func: (p: P) => R): (p: P) => R;\nfunction curryRight<P1, P2, R>(func: (p1: P1, p2: P2) => R): (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, R>(func: (p1: P1, p2: P2, p3: P3) => R): (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, P4, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4) => R\n): (p4: P4) => (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, P4, P5, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) => R\n): (p5: P5) => (p4: P4) => (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight(func: (...args: any[]) => any): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating partition Function Usage with Various Predicates\nDESCRIPTION: Examples of using the partition function with different types of predicates including function callbacks, property shorthands, object matching, and property-value pair matching. Shows how to split arrays and object collections based on various conditions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/partition.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partition } from 'es-toolkit/compat';\n\n// Using a predicate function\npartition([1, 2, 3, 4], n => n % 2 === 0);\n// => [[2, 4], [1, 3]]\n\n// Using property shorthand\nconst users = [\n  { user: 'barney', age: 36, active: true },\n  { user: 'fred', age: 40, active: false },\n  { user: 'pebbles', age: 1, active: false },\n];\n\n// Using \"property\" iteratee shorthand\npartition(users, 'active');\n// => [[{ 'user': 'barney', 'age': 36, 'active': true }], [{ 'user': 'fred', 'age': 40, 'active': false }, { 'user': 'pebbles', 'age': 1, 'active': false }]]\n\n// Using \"matches\" iteratee shorthand\npartition(users, { age: 1, active: false });\n// => [[{ 'user': 'pebbles', 'age': 1, 'active': false }], [{ 'user': 'barney', 'age': 36, 'active': true }, { 'user': 'fred', 'age': 40, 'active': false }]]\n\n// Using \"matchesProperty\" iteratee shorthand\npartition(users, ['active', false]);\n// => [[{ 'user': 'fred', 'age': 40, 'active': false }, { 'user': 'pebbles', 'age': 1, 'active': false }], [{ 'user': 'barney', 'age': 36, 'active': true }]]\n```\n\n----------------------------------------\n\nTITLE: Over Function Usage Examples\nDESCRIPTION: Examples demonstrating different ways to use the 'over' function with various types of iteratees including Math functions, property names, objects, and property-value pairs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/over.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = over([Math.max, Math.min]);\nconst func2 = over(Math.max, Math.min);\nfunc(1, 2, 3, 4);\n// => [4, 1]\nfunc2(1, 2, 3, 4);\n// => [4, 1]\n\nconst func = over(['a', 'b']);\nfunc({ a: 1, b: 2 });\n// => [1, 2]\n\nconst func = over([{ a: 1 }, { b: 2 }]);\nfunc({ a: 1, b: 2 });\n// => [true, false]\n\nconst func = over([['a', 1], ['b', 2]]);\nfunc({ a: 1, b: 2 });\n// => [true, true]\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Counting Example with Parity Mapping\nDESCRIPTION: Demonstrates counting array items by transforming them into categorical keys, in this case distinguishing between even and odd numbers\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/countBy.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { countBy } from 'es-toolkit/array';\n\nconst array = [1, 2, 3, 4, 5, 6];\nconst result = countBy(array, x => (x % 2 === 0 ? 'even' : 'odd'));\n\nconsole.log(result);\n// Output: { 'odd': 3, 'even': 3 }\n```\n\n----------------------------------------\n\nTITLE: Using Partial Function Application in TypeScript\nDESCRIPTION: Examples demonstrating how to use the 'partial' function to create new functions with partially applied arguments, including the use of placeholders.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/partial.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partial } from 'es-toolkit/function';\n\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nconst sayHelloTo = partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nconst greetFred = partial(greet, partial.placeholder, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n```\n\n----------------------------------------\n\nTITLE: Sampling Array Elements with TypeScript\nDESCRIPTION: This TypeScript function, `sampleSize`, samples a specified number of elements from an input array using Floyd's algorithm. It requires the input array and the desired sample size as parameters and returns a new array containing the sampled elements. The function throws an error if the sample size exceeds the length of the input array, ensuring valid operations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/sampleSize.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sampleSize<T>(array: T[], size: number): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = sampleSize([1, 2, 3], 2);\n// result will be an array containing two of the elements from the array.\n// [1, 2] or [1, 3] or [2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using findKey Function with Object and Predicate in TypeScript\nDESCRIPTION: This example demonstrates how to use the findKey function with an object containing user data and a predicate function to find users based on age criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/findKey.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = {\n  pebbles: { age: 24, active: true },\n  barney: { age: 36, active: true },\n  fred: { age: 40, active: false },\n};\n\nfindKey(users, o => o.age < 40); // 'pebbles'\nfindKey(users, o => o.age > 50); // undefined\n```\n\n----------------------------------------\n\nTITLE: Type Checking Example with Basic Types\nDESCRIPTION: Example demonstrating how to use overSome to create a function that checks for multiple type conditions using typeof operators.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/overSome.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = overSome(\n  (value) => typeof value === 'string',\n  (value) => typeof value === 'number',\n  (value) => typeof value === 'symbol'\n);\n\nfunc(\"hello\"); // true\nfunc(42); // true\nfunc(Symbol()); // true\nfunc([]); // false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of unionWith with Object Arrays\nDESCRIPTION: Demonstrates merging arrays of objects and using a custom equality function based on object properties\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unionWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }];\nconst array2 = [{ id: 2 }, { id: 3 }];\nconst areItemsEqual = (a, b) => a.id === b.id;\nconst result = unionWith(array1, array2, areItemsEqual);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the delay implementation with optional DelayOptions parameter that can include an AbortSignal.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/delay.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction delay(ms: number, options?: DelayOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Using isFunction Utility in TypeScript\nDESCRIPTION: This example demonstrates how to use the isFunction utility from the es-toolkit library. It shows various function types being checked, including regular functions, async functions, generator functions, and built-in functions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isFunction.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isFunction } from 'es-toolkit/predicate';\n\nconsole.log(isFunction(Array.prototype.slice)); // true\nconsole.log(isFunction(async function () {})); // true\nconsole.log(isFunction(function* () {})); // true\nconsole.log(isFunction(Proxy)); // true\nconsole.log(isFunction(Int8Array)); // true\n```\n\n----------------------------------------\n\nTITLE: Using the 'at' function to extract elements from an array in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'at' function to extract elements from an array of numbers. The function retrieves elements at indices 1, 3, and 4 from the 'numbers' array and stores them in the 'result' array. The example showcases the import statement and usage of the 'at' function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/at.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { at } from 'es-toolkit/array';\n\nconst numbers = [10, 20, 30, 40, 50];\nconst result = at(numbers, [1, 3, 4]);\nconsole.log(result); // [20, 40, 50]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Pick Function Signature\nDESCRIPTION: Type declaration for the pick function that creates a new object with selected properties. Takes a source object and array of keys as parameters and returns a new object with only the specified properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/pick.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pick<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Pick<T, K>;\n```\n\n----------------------------------------\n\nTITLE: Basic Flow Function Usage Example\nDESCRIPTION: Example demonstrating how to compose two functions using flow to create a new function that adds two numbers and squares the result.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flow.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst add = (x: number, y: number) => x + y;\nconst square = (n: number) => n * n;\n\nconst combined = flow(add, square);\nconsole.log(combined(1, 2)); // => 9\n```\n\n----------------------------------------\n\nTITLE: Examples of Using Includes Function with Different Data Types\nDESCRIPTION: Practical examples showing how to use the includes function with arrays, objects (including NaN value checking), and strings to check for value inclusion.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/includes.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nincludes([1, 2, 3], 2); // true\nincludes({ a: 1, b: 'a', c: NaN }, 'a'); // true\nincludes('hello world', 'world'); // true\nincludes('hello world', 'test'); // false\n```\n\n----------------------------------------\n\nTITLE: Comparing Special Cases with isEqual in JavaScript\nDESCRIPTION: This example shows how isEqual handles special cases like NaN and positive/negative zero. Both comparisons return true, demonstrating the function's behavior with these edge cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nisEqual(NaN, NaN); // true\nisEqual(+0, -0); // true\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Conditional Function Creation\nDESCRIPTION: Demonstrates practical usage of the cond function with different predicate-function pairs, showing matches, conforms, and fallback conditions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/cond.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = cond([\n  [matches({ a: 1 }), constant('matches A')],\n  [conforms({ b: isNumber }), constant('matches B')],\n  [stubTrue, constant('no match')],\n]);\n\nfunc({ a: 1, b: 2 });\n// => 'matches A'\n\nfunc({ a: 0, b: 1 });\n// => 'matches B'\n\nfunc({ a: '1', b: '2' });\n// => 'no match'\n```\n\n----------------------------------------\n\nTITLE: Using isJSON Function with Various Inputs in TypeScript\nDESCRIPTION: This example demonstrates how to use the isJSON function with different types of inputs, including valid JSON strings, invalid JSON, and non-string values. It shows the expected output for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSON.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isJSON } from 'es-toolkit/predicate';\n\nconst value1 = '{\"name\":\"John\",\"age\":30}';\nconst value2 = '[1,2,3]';\nconst value3 = 'true';\nconst value4 = 'null';\nconst value5 = '42';\nconst value6 = 'invalid json';\nconst value7 = { name: 'John' };\nconst value8 = null;\n\nconsole.log(isJSON(value1)); // true\nconsole.log(isJSON(value2)); // true\nconsole.log(isJSON(value3)); // true (parsed as boolean per JSON spec)\nconsole.log(isJSON(value4)); // true (parsed as null per JSON spec)\nconsole.log(isJSON(value5)); // true (parsed as number per JSON spec)\nconsole.log(isJSON(value6)); // false\nconsole.log(isJSON(value7)); // false (not a string)\nconsole.log(isJSON(value8)); // false (not a string)\n```\n\n----------------------------------------\n\nTITLE: Clone Function Type Definition\nDESCRIPTION: TypeScript function signature that defines a generic clone operation accepting any type T and returning the same type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/clone.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clone<T>(value: T): T;\n```\n\n----------------------------------------\n\nTITLE: Using Set Function with Nested Objects in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'set' function to modify a nested object, set a value in an array, create a new nested path, and use it with TypeScript interfaces.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/set.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { set } from 'es-toolkit/compat';\n\n// ネストされたオブジェクトに値を設定\nconst obj = { a: { b: { c: 3 } } };\nset(obj, 'a.b.c', 4);\nconsole.log(obj.a.b.c); // 4\n\n// 配列に値を設定\nconst arr = [1, 2, 3];\nset(arr, 1, 4);\nconsole.log(arr[1]); // 4\n\n// 存在しないパスを作成して値を設定\nconst obj2 = {};\nset(obj2, 'a.b.c', 4);\nconsole.log(obj2); // { a: { b: { c: 4 } } }\n\n// インターフェースの使用\ninterface O {\n  a: number;\n}\nconst obj3 = {};\nconst result = set<O>(obj3, 'a', 1); // result の型 = { a: number }\nconsole.log(result); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining Flatten Function TypeScript Signature\nDESCRIPTION: Declares a generic TypeScript function for flattening arrays with optional depth parameter. Supports type-safe array flattening with flexible depth specification.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatten.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatten<T, D extends number = 1>(arr: T[], depth?: D): Array<FlatArray<T[], D>>;\n```\n\n----------------------------------------\n\nTITLE: Using sortBy Function with Property Keys and Functions\nDESCRIPTION: Examples demonstrating how to use the sortBy function to sort an array of user objects. Shows two equivalent approaches: one using property names as criteria and another using functions that access those properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/sortBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = [\n  { user: 'foo', age: 24 },\n  { user: 'bar', age: 7 },\n  { user: 'foo ', age: 8 },\n  { user: 'bar ', age: 29 },\n];\n\nsortBy(users, ['user', 'age']);\nsortBy(users, [obj => obj.user, obj => obj.age]);\n// 结果为：\n// [\n//   { user : 'bar', age: 7 },\n//   { user : 'bar', age: 29 },\n//   { user : 'foo', age: 8 },\n//   { user : 'foo', age: 24 },\n// ]\n```\n\n----------------------------------------\n\nTITLE: Filtering Unique Elements Using Custom Comparator - TypeScript\nDESCRIPTION: The function uniqWith takes an array and a comparator function to return a new array that contains only unique elements according to the custom comparison logic supplied. It requires the array to process and a function that checks if two items are considered equal. The function returns a new array without duplicates based on the comparison logic.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/uniqWith.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction uniqWith<T>(arr: T[], areItemsEqual: (item1: T, item2: T) => boolean): T[] {\n    // Implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Trim Function Usage Examples\nDESCRIPTION: Examples demonstrating different use cases of the trim function including whitespace trimming, single character trimming, and multiple character trimming.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trim.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntrim('  hello  '); // \"hello\"\ntrim('--hello--', '-'); // \"hello\"\ntrim('##hello##', ['#', 'o']); // \"hell\"\n```\n\n----------------------------------------\n\nTITLE: Using assignInWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the assignInWith function to merge properties from multiple source objects into a target object, using a custom function to determine assigned values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assignInWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignInWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using Merge Function in TypeScript with es-toolkit\nDESCRIPTION: This snippet demonstrates how to import and use the merge function from the es-toolkit library. It merges two objects with nested properties and logs the result.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/merge.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { merge } from 'es-toolkit';\n\nconst target = { a: 1, b: { x: 1, y: 2 } };\nconst source = { b: { y: 3, z: 4 }, c: 5 };\nconst result = merge(target, source);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Using castArray with Different Value Types in TypeScript\nDESCRIPTION: Examples demonstrating how to use the castArray function with various types of inputs including primitives, arrays, objects, and null/undefined values. Shows how the function creates a new array when the input isn't an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/castArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { castArray } from 'es-toolkit/compat';\n\nconst arr1 = castArray(1);\n// Returns: [1]\n\nconst arr2 = castArray([1]);\n// Returns: [1]\n\nconst arr3 = castArray({ a: 1 });\n// Returns: [{'a': 1}]\n\nconst arr4 = castArray(null);\n// Returns: [null]\n\nconst arr5 = castArray(undefined);\n// Returns: [undefined]\n\nconst arr6 = castArray();\n// Returns: []\n```\n\n----------------------------------------\n\nTITLE: Using mergeWith for Number Addition in TypeScript\nDESCRIPTION: This example demonstrates using mergeWith to combine number properties by addition. It merges a source object into a target object, adding numeric values when both properties are numbers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mergeWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nmergeWith(target, source, (targetValue, sourceValue) => {\n  if (typeof targetValue === 'number' && typeof sourceValue === 'number') {\n    return targetValue + sourceValue;\n  }\n});\n// Returns { a: 1, b: 5, c: 4 }\n```\n\n----------------------------------------\n\nTITLE: Array Concatenation Merging Example\nDESCRIPTION: Shows how to merge arrays by concatenating their values using a custom merge strategy\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mergeWith.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: [1], b: [2] };\nconst source = { a: [3], b: [4] };\n\nconst result = mergeWith(target, source, (objValue, srcValue) => {\n  if (Array.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n});\n// 反環: { a: [1, 3], b: [2, 4] }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Update Function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the update function to update values within an object. The first example shows updating an existing nested value, while the second example illustrates creating a new value when the path does not exist in the object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/update.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { update } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// Use the updater function to update value\nupdate(object, 'a[0].b.c', n => (n as number) * 2);\n// => { a: [{ b: { c: 6 } }] }\n\n// If the path does not exist, create the value\nupdate({}, 'a.b[0]', () => 'c');\n// => { a: { b: ['c'] } }\n```\n\n----------------------------------------\n\nTITLE: Union function example in TypeScript\nDESCRIPTION: Demonstrates how to use the `union` function with two sample arrays (`array1` and `array2`). The `union` function merges these arrays, extracts the unique elements, and assigns the resulting array to the `result` variable. The comment indicates the expected value of the `result` after the function execution.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/union.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [1, 2, 3];\nconst array2 = [3, 4, 5];\nconst result = union(array1, array2);\n// result will be [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiter Object Flattening Example in TypeScript\nDESCRIPTION: Shows how to flatten an object using a custom delimiter (forward slash) instead of the default dot notation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/flattenObject.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst flattened = flattenObject(nestedObject, { delimiter: '/' });\nconsole.log(flattened);\n// Output:\n// {\n//   'a/b/c': 1,\n//   'd/0': 2,\n//   'd/1': 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Using isPlainObject Function with Various Input Types in TypeScript\nDESCRIPTION: This code block demonstrates various use cases of the isPlainObject function with different input types, showing which values are considered plain objects and which are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPlainObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisPlainObject({}); // true\nisPlainObject([]); // false\nisPlainObject(Object.create(null)); // true\n\nclass Foo {}\nisPlainObject(new Foo()); // false\nisPlainObject(new Date()); // false\nisPlainObject(new Set()); // false\nisPlainObject(new Map()); // false\nisPlainObject(Buffer.from('hello, world')); // false\nisPlainObject(Math); // false\nisPlainObject(JSON); // false\nisPlainObject(null); // false\nisPlainObject(1); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Zip Function Signature in TypeScript\nDESCRIPTION: TypeScript function signatures for the zip function with various overloads to support different numbers of input arrays. The function combines multiple arrays into a single array of tuples.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zip.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction zip<T>(arr1: T[]): [T][];\nfunction zip<T, U>(arr1: T[], arr2: U[]): [T, U][];\nfunction zip<T, U, V>(arr1: T[], arr2: U[], arr3: V[]): [T, U, V][];\nfunction zip<T, U, V, W>(arr1: T[], arr2: U[], arr3: V[], arr4: W[]): [T, U, V, W][];\nfunction zip<T>(...arrs: T[][]): T[][];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ary Function Usage in TypeScript\nDESCRIPTION: Provides examples of using the 'ary' function to cap the number of arguments passed to a function. It shows how 'ary' can limit the arguments to 0, 1, 2, or 3 parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/ary.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ary } from 'es-toolkit/function';\n\nfunction fn(a: number, b: number, c: number) {\n  return Array.from(arguments);\n}\n\nary(fn, 0)(1, 2, 3); // []\nary(fn, 1)(1, 2, 3); // [1]\nary(fn, 2)(1, 2, 3); // [1, 2]\nary(fn, 3)(1, 2, 3); // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Example of Flattening a Nested Array\nDESCRIPTION: This code snippet demonstrates how to use the `flattenDeep` function.  It initializes a nested array `array` and then calls `flattenDeep` to flatten it.  The resulting flattened array is stored in the `result` variable, which should be `[1, 2, 3, 4, 5, 6]`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flattenDeep.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"const array = [1, [2, [3]], [4, [5, 6]]];\\n\\nconst result = flattenDeep(array);\\n// Return [1, 2, 3, 4, 5, 6]\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Sampling Function in TypeScript\nDESCRIPTION: Demonstrates how to use the 'sample' function with an example array of numbers. It shows the assignment of the randomly selected element to 'randomElement'. This example highlights the function's practical application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/sample.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst randomElement = sample(array);\n// randomElement will be one of the elements from the array, selected randomly.\n```\n\n----------------------------------------\n\nTITLE: Using Once Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the 'once' function by creating an 'initialize' function that logs a message and returns true. It shows that subsequent calls to the initialized function return the cached result without re-executing the original function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/once.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst initialize = once(() => {\n  console.log('Initialized!');\n  return true;\n});\n\ninitialize(); // Logs: 'Initialized!' and returns true\ninitialize(); // Returns true without logging\n```\n\n----------------------------------------\n\nTITLE: TypeScript Examples of toCamelCaseKeys Usage\nDESCRIPTION: Comprehensive examples showing how to use toCamelCaseKeys with simple objects, arrays of objects, and nested object structures.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toCamelCaseKeys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example with objects\nconst obj = { user_id: 1, first_name: 'John' };\nconst result = toCamelCaseKeys(obj);\n// result will be { userId: 1, firstName: 'John' }\n\n// Example with arrays of objects\nconst arr = [\n  { user_id: 1, first_name: 'John' },\n  { user_id: 2, first_name: 'Jane' },\n];\nconst arrResult = toCamelCaseKeys(arr);\n// arrResult will be [{ userId: 1, firstName: 'John' }, { userId: 2, firstName: 'Jane' }]\n\n// Example with nested objects\nconst nested = {\n  user_data: {\n    user_id: 1,\n    user_address: {\n      street_name: 'Main St',\n      zip_code: '12345',\n    },\n  },\n};\nconst nestedResult = toCamelCaseKeys(nested);\n// nestedResult will be:\n// {\n//   userData: {\n//     userId: 1,\n//     userAddress: {\n//       streetName: 'Main St',\n//       zipCode: '12345'\n//     }\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Defining Once Function Signature in TypeScript\nDESCRIPTION: Declares two function overloads for the 'once' function. It handles functions with no arguments and functions with any number of arguments, both returning the same type as the input function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/once.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction once<F extends () => any>(func: F): F;\nfunction once<F extends (...args: any[]) => void>(func: F): F;\n```\n\n----------------------------------------\n\nTITLE: Using Conforms Function with Custom Predicates in TypeScript\nDESCRIPTION: This example demonstrates how to use the conforms function with custom predicates. It creates predicates for positive and even numbers, then uses conforms to create a function that checks if objects meet these criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/conforms.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isPositive = n => n > 0;\nconst isEven = n => n % 2 === 0;\nconst predicates = { a: isPositive, b: isEven };\nconst conform = conforms(predicates);\n\nconsole.log(conform({ a: 2, b: 4 })); // true\nconsole.log(conform({ a: -1, b: 4 })); // false\nconsole.log(conform({ a: 2, b: 3 })); // false\nconsole.log(conform({ a: 0, b: 2 })); // false\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible findKey Function with Various Conditions in TypeScript\nDESCRIPTION: This example demonstrates how to use the Lodash-compatible findKey function with different types of search conditions: predicate function, partial object, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/findKey.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = { barney: { age: 36 }, fred: { age: 40 } };\n\nfindKey(users, o => o.age < 40);\n// => 'barney'\nfindKey(users, { age: 36 });\n// => 'barney'\nfindKey(users, ['age', 36]);\n// => 'barney'\n\nconst languages = { javascript: { active: false }, typescript: { active: true } };\nfindKey(users, 'active');\n// => 'typescript'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Spread Function Signature\nDESCRIPTION: Type definition for the spread function that transforms a function to accept array arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/spread.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction spread<F extends (...args: any[]) => any>(func: F): (argsArr: Parameters<F>) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Using forEach to Iterate Over Object Properties\nDESCRIPTION: Example of using the forEach function from es-toolkit/compat to iterate over an object's properties. The callback logs each property's value and key to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/forEach.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { forEach } from 'es-toolkit/compat';\n\nconst object = { a: 1, b: 2 };\nforEach(object, (value, key, object) => console.log(value, key));\n// Output:\n// 1 'a'\n// 2 'b'\n```\n\n----------------------------------------\n\nTITLE: Times Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating different ways to use the times function, including with a doubling function, without a getValue function, and with a string-returning function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/times.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntimes(3, doubled); // => [0, 2, 4]\ntimes(4); // => [0, 1, 2, 3]\ntimes(2, () => 'es-toolkit'); // => ['es-toolkit', 'es-toolkit']\n```\n\n----------------------------------------\n\nTITLE: Examples of Using reduceRight Function\nDESCRIPTION: Practical examples demonstrating how to use the reduceRight function with arrays and objects, including cases with and without initial values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reduceRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a reducer function\nconst array = [1, 2, 3];\nreduceRight(array, (acc, value) => acc + value, 0); // => 6\n\n// Using a reducer function with initialValue\nconst array = [1, 2, 3];\nreduceRight(array, (acc, value) => acc + value % 2 === 0, true); // => false\n\n// Using an object as the collection\nconst obj = { a: 1, b: 2, c: 3 };\nreduceRight(obj, (acc, value) => acc + value, 0); // => 6\n```\n\n----------------------------------------\n\nTITLE: Basic Before Function Usage Example\nDESCRIPTION: Demonstrates basic usage of the 'before' function by creating a wrapper that allows only two calls to pass through before blocking subsequent calls.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/before.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { before } from 'es-toolkit/function';\n\nconst beforeFn = before(3, () => {\n  console.log('called');\n});\n\n// Will log 'called'.\nbeforeFn();\n\n// Will log 'called'.\nbeforeFn();\n\n// Will not log anything.\nbeforeFn();\n```\n\n----------------------------------------\n\nTITLE: Using Evaluate Delimiter in Template Function\nDESCRIPTION: Illustrates how to use the 'evaluate' delimiter to execute JavaScript code within the template. The compiled function evaluates the condition and returns the appropriate result.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<% if (value) { %>Yes<% } else { %>No<% } %>');\ncompiled({ value: true }); // returns 'Yes'\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible dropRightWhile Function in TypeScript\nDESCRIPTION: This example demonstrates various ways to use the Lodash-compatible dropRightWhile function, including using a predicate function, partial object, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/dropRightWhile.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用谓词函数的示例\nconst array1 = [5, 4, 3, 2, 1];\nconst result1 = dropRightWhile(array1, x => x < 3);\n// result1 将是 [5, 4, 3]，因为小于 3 的元素被移除了。\n\n// 使用部分对象的示例\nconst array2 = [{ a: 1 }, { a: 2 }, { a: 3 }];\nconst result2 = dropRightWhile(array2, { a: 3 });\n// result2 将是 [{ a: 1 }, { a: 2 }]，因为最后一个对象与提供的对象的属性匹配。\n\n// 使用属性-值对的示例\nconst array3 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst result3 = dropRightWhile(array3, ['id', 3]);\n// result3 将是 [{ id: 1 }, { id: 2 }]，因为最后一个对象的 id 属性与值 3 匹配。\n\n// 使用属性名的示例\nconst array4 = [{ isActive: false }, { isActive: true }, { isActive: true }];\nconst result4 = dropRightWhile(array4, 'isActive');\n// result4 将是 [{ isActive: false }]，因为它会移除元素，直到找到一个 isActive 属性为假值的元素。\n```\n\n----------------------------------------\n\nTITLE: Using Intersection with Array-like Objects - TypeScript\nDESCRIPTION: This snippet showcases how the intersection function can also work with array-like objects, demonstrating its versatility beyond standard arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersection.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrayLike1 = { 0: 1, 1: 2, 2: 3, length: 3 };\nconst arrayLike2 = { 0: 2, 1: 3, length: 2 };\nconst result2 = intersection(arrayLike1, arrayLike2);\n// The result2 is [2, 3] because these elements are present in both array-like objects.\n```\n\n----------------------------------------\n\nTITLE: Computing Array Difference using TypeScript\nDESCRIPTION: This TypeScript function takes two arrays and returns a new array with elements from the first array that are not present in the second array, effectively filtering out common elements. It requires TypeScript and assumes generic-type handling. Inputs are two arrays, and output is a single array with unique elements from the first array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/difference.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction difference<T>(firstArr: T[], secondArr: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Object Property Checking Example\nDESCRIPTION: Example showing how to use overSome with an array of predicates to check object properties against certain conditions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/overSome.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = overSome([\n  (value) => value.a > 0,\n  (value) => value.b > 0\n]);\n\nfunc({ a: 0, b: 2 }); // true\nfunc({ a: 0, b: 0 }); // false\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatibility Example\nDESCRIPTION: Shows how to use flowRight with Lodash compatibility mode, which allows accepting both arrays of functions and individual functions as arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flowRight.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flowRight } from 'es-toolkit/compat';\n\nconst add = (x: number, y: number) => x + y;\nconst square = (n: number) => n * n;\nconst double = (n: number) => n * 2;\n\nconst combined = flowRight(double, [square, add]);\nconsole.log(combined(1, 2)); // => 18\n```\n\n----------------------------------------\n\nTITLE: Creating New Nested Values with Update Function in TypeScript\nDESCRIPTION: This example shows how the update function can be used to create new nested values in an object when the specified path doesn't exist.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/update.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { update } from 'es-toolkit/compat';\n\n// 如果路径不存在则创建值\nupdate({}, 'a.b[0]', () => 'c');\n// => { a: { b: ['c'] } }\n```\n\n----------------------------------------\n\nTITLE: Using isNil Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isNil function from the es-toolkit library. It shows checks for null, undefined, and a non-nil value, illustrating the function's behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNil.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isNil } from 'es-toolkit/predicate';\n\nconst value1 = null;\nconst value2 = undefined;\nconst value3 = 42;\nconst result1 = isNil(value1); // true\nconst result2 = isNil(value2); // true\nconst result3 = isNil(value3); // false\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of findLastIndex Function\nDESCRIPTION: Function signature for findLastIndex with multiple overloads, supporting different ways to specify the search condition including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findLastIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findLastIndex<T>(\n  arr: T[],\n  doesMatch: (item: T, index: number, arr: T[]) => unknown,\n  fromIndex?: number\n): number;\nfunction findLastIndex<T>(arr: T[], doesMatch: Partial<T>, fromIndex?: number): number;\nfunction findLastIndex<T>(arr: T[], doesMatch: [keyof T, unknown], fromIndex?: number): number;\nfunction findLastIndex<T>(arr: T[], doesMatch: PropertyKey, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Unary Function Interface in TypeScript\nDESCRIPTION: TypeScript type definition for a function that limits argument count to one, preserving the original return type\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/unary.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unary<F extends (...args: any[]) => any>(func: F): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Defining Intersection Function - TypeScript\nDESCRIPTION: The intersection function takes two arrays as input and returns a new array with elements found in both arrays. It handles generic types, allowing for flexible data types in arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersection.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intersection<T>(firstArr: T[], secondArr: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating isEmpty Function Usage with Various Data Types\nDESCRIPTION: This code snippet provides examples of using the isEmpty function with different data types. It shows how the function behaves with empty and non-empty values of various types including primitives, arrays, objects, Map, and Set.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isEmpty.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisEmpty(); // true\nisEmpty(null); // true\nisEmpty(''); // true\nisEmpty([]); // true\nisEmpty({}); // true\nisEmpty(new Map()); // true\nisEmpty(new Set()); // true\nisEmpty('hello'); // false\nisEmpty([1, 2, 3]); // false\nisEmpty({ a: 1 }); // false\nisEmpty(new Map([['key', 'value']])); // false\nisEmpty(new Set([1, 2, 3])); // false\n```\n\n----------------------------------------\n\nTITLE: Omit Function Type Definition in TypeScript\nDESCRIPTION: Type signature for the omit function that takes an object and array of keys to remove, returning a new object with those keys omitted.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/omit.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction omit<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Omit<T, K>;\n```\n\n----------------------------------------\n\nTITLE: Using reduce with Arrays and Objects in TypeScript\nDESCRIPTION: Examples showing how to use the reduce function with different collection types and reducer functions, including array summation and object value reduction.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reduce.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a reducer function\nconst array = [1, 2, 3];\nreduce(array, (acc, value) => acc + value, 0); // => 6\n\n// Using a reducer function with initialValue\nconst array = [1, 2, 3];\nreduce(array, (acc, value) => acc + value % 2 === 0, true); // => false\n\n// Using an object as the collection\nconst obj = { a: 1, b: 2, c: 3 };\nreduce(obj, (acc, value) => acc + value, 0); // => 6\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example of conforms function usage\nDESCRIPTION: Demonstrates how to use the `conforms` function in TypeScript to create a predicate function that checks if an object satisfies certain conditions. The example defines predicates `isPositive` and `isEven` and then creates a `conform` function that checks if an object has a positive 'a' property and an even 'b' property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/predicate/conforms.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isPositive = n => n > 0;\nconst isEven = n => n % 2 === 0;\nconst predicates = { a: isPositive, b: isEven };\nconst conform = conforms(predicates);\n\nconsole.log(conform({ a: 2, b: 4 })); // true\nconsole.log(conform({ a: -1, b: 4 })); // false\nconsole.log(conform({ a: 2, b: 3 })); // false\nconsole.log(conform({ a: 0, b: 2 })); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Set Function Usage in TypeScript\nDESCRIPTION: Provides examples of using the 'set' function in various scenarios, including setting values in nested objects, arrays, creating non-existent paths, and using with TypeScript interfaces.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/set.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { set } from 'es-toolkit/compat';\n\n// Set a value in a nested object\nconst obj = { a: { b: { c: 3 } } };\nset(obj, 'a.b.c', 4);\nconsole.log(obj.a.b.c); // 4\n\n// Set a value in an array\nconst arr = [1, 2, 3];\nset(arr, 1, 4);\nconsole.log(arr[1]); // 4\n\n// Create non-existent path and set value\nconst obj2 = {};\nset(obj2, 'a.b.c', 4);\nconsole.log(obj2); // { a: { b: { c: 4 } } }\n\n// Use with interface\ninterface O {\n  a: number;\n}\nconst obj3 = {};\nconst result = set<O>(obj3, 'a', 1); // typeof result = { a: number }\nconsole.log(result); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for Array Fill\nDESCRIPTION: Defines the type signatures for the `fill` function.  It showcases the function's ability to handle different types and optional start and end parameters.  The return type indicates that the original array is modified and returned.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/fill.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fill<T>(array: unknown[], value: T): T[];\nfunction fill<T, U>(array: T[], value: T, start: number): Array<T | U>;\nfunction fill<T, U>(array: T[], value: T, start: number, end: number): Array<T | U>;\n```\n\n----------------------------------------\n\nTITLE: Basic Omit Function Usage Example\nDESCRIPTION: Simple example showing how to use the omit function to remove specific keys from an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/omit.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = omit(obj, ['b', 'c']);\n// result will be { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Using isEqualWith Function with Custom Comparison in TypeScript\nDESCRIPTION: This example demonstrates how to use the isEqualWith function with a custom comparison function. The customizer function performs case-insensitive string comparison and is applied to various data types including strings, objects, and arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isEqualWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customizer = (a, b) => {\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n};\nisEqualWith('Hello', 'hello', customizer); // true\nisEqualWith({ a: 'Hello' }, { a: 'hello' }, customizer); // true\nisEqualWith([1, 2, 3], [1, 2, 3], customizer); // true\n```\n\n----------------------------------------\n\nTITLE: Using Extend Function to Merge Objects in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'extend' function to merge properties from multiple source objects into a target object. It shows the function's behavior of assigning properties from source objects to the target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/extend.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = extend(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining Method Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the method() function that takes a property path and arguments, returning a function that invokes the method at the specified path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/method.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction method(path: PropertyKey | PropertyKey[], ...args: any[]): (object?: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndex with Arrays in TypeScript\nDESCRIPTION: Examples demonstrating how to use the sortedIndex function in different scenarios. Shows basic usage with a numeric array, handling empty/null arrays, and using the default comparison logic.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndex } from 'es-toolkit/compat';\n\n// Basic usage with a number array\nsortedIndex([10, 20, 30, 50], 40);\n// Return value: 3\n// Explanation: 40 returns index 3 to maintain the sort order.\n\n// Handling an empty or null array\nsortedIndex(null, 25);\n// Return value: 0\n// Explanation: Null or undefined arrays are treated as empty, so 0 is returned.\n\n// Using default comparison logic (delegated behavior with sortedIndexBy)\nsortedIndex([10, '20', 30], 25);\n// Return value: 2\n// Explanation: Using default comparison logic, it returns index 2.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Creation and Prototype Inheritance in TypeScript\nDESCRIPTION: This example illustrates how to use the 'create' function to create an object that inherits from a prototype and adds custom properties. It demonstrates method inheritance and property assignment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/create.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create } from 'es-toolkit/compat';\n\nconst person = {\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  },\n};\n\nconst john = create(person, { name: 'John' });\n\njohn.greet(); // Output: Hello, my name is John\n```\n\n----------------------------------------\n\nTITLE: Using 'get' Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'get' function to retrieve values from nested objects. It shows different ways of specifying the path and handling default values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/get.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { get } from 'es-toolkit/compat';\n\nconst obj = {\n  a: {\n    b: 4,\n  },\n};\n\nget(obj, 'a.b'); // 4\nget(obj, ['a', 'b']); // 4\nget(obj, ['a', 'c']); // undefined\nget(obj, ['a', 'c'], null); // null\n```\n\n----------------------------------------\n\nTITLE: Using mapKeys Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the mapKeys function. It creates a new object by transforming the keys of the input object using the provided function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mapKeys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2 };\nconst result = mapKeys(obj, (value, key) => key + value);\nconsole.log(result); // { a1: 1, b2: 2 }\n```\n\n----------------------------------------\n\nTITLE: Matching Arrays with isMatch Function in TypeScript\nDESCRIPTION: These examples show how isMatch function works with arrays. It demonstrates exact matching, partial matching, and a case where matching fails.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isMatch.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch([1, 2, 3], [1, 2, 3]); // true\nisMatch([1, 2, 2, 3], [2, 2]); // true\nisMatch([1, 2, 3], [2, 2]); // false\n```\n\n----------------------------------------\n\nTITLE: Deep Property Picking with Lodash Compatibility\nDESCRIPTION: Example of using the lodash-compatible pick function from es-toolkit/compat to select nested properties using dot notation paths. Shows how to pick deeply nested properties from complex objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/pick.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pick } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 1 } }, d: { e: 2 }, f: { g: 3 }, 'f.g': 4 };\nconst result = pick(obj, ['a.b.c', 'f.g']);\n// result will be { a: { b: { c: 1 } }, 'f.g': 4 }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of UnionBy - TypeScript\nDESCRIPTION: This example demonstrates how to use the 'unionBy' function with two arrays of objects. It shows the expected output when calling the function with two arrays that have overlapping elements, illustrating the uniqueness based on the IDs mapped by the provided function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unionBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nunionBy([{ id: 1 }, { id: 2 }], [{ id: 2 }, { id: 3 }], x => x.id);\n// Returns [{ id: 1 }, { id: 2 }, { id: 3 }]\n```\n\n----------------------------------------\n\nTITLE: Using zipObjectDeep with Array Notation in Paths\nDESCRIPTION: Example demonstrating how to use zipObjectDeep with paths containing array notation to create nested arrays within the object structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/zipObjectDeep.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst paths = ['a.b[0].c', 'a.b[1].d'];\nconst values = [1, 2];\nconst result = zipObjectDeep(paths, values);\n// result will be { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n```\n\n----------------------------------------\n\nTITLE: Using isError Function in TypeScript\nDESCRIPTION: This snippet demonstrates example usage of the 'isError' function. It shows how to use the function with different types of values, including an Error object, a string, and a plain object with Error-like properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isError.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisError(new Error()); // true\nisError('error'); // false\nisError({ name: 'Error', message: '' }); // false\n```\n\n----------------------------------------\n\nTITLE: Retry Function Usage Examples in TypeScript\nDESCRIPTION: Comprehensive examples demonstrating various ways to use the retry function, including infinite retries, limited retries, delayed retries, dynamic delay calculation, and abort signal integration.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/retry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Retry indefinitely until `fetchData` succeeds.\nconst data1 = await retry(() => fetchData());\nconsole.log(data1);\n\n// Retry only 3 times until `fetchData` succeeds.\nconst data2 = await retry(() => fetchData(), 3);\nconsole.log(data2);\n\n// Retry only 3 times until `fetchData` succeeds, with a 100ms interval in between.\nconst data3 = await retry(() => fetchData(), { retries: 3, delay: 100 });\nconsole.log(data3);\n\n// Retry 5 times with a linearly increasing delay\nconst data4 = await retry(() => fetchData(), {\n  retries: 5,\n  delay: attempts => attempts * 50,\n});\nconsole.log(data4);\n\nconst controller = new AbortController();\n\n// The retry operation for `fetchData` can be canceled with the `signal`.\nconst data5 = await retry(() => fetchData(), { signal: controller.signal });\nconsole.log(data5);\n```\n\n----------------------------------------\n\nTITLE: Using Retry Function with Various Configurations in TypeScript\nDESCRIPTION: This example demonstrates different ways to use the retry function, including infinite retries, limited retries, delays between retries, dynamic delay calculation, and cancellation using AbortSignal.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/retry.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 一直重试直到 fetchData 成功\nconst data1 = await retry(() => fetchData());\nconsole.log(data1);\n\n// 最多重试 3 次\nconst data2 = await retry(() => fetchData(), 3);\nconsole.log(data2);\n\n// 每次重试之间间隔 100 毫秒，最多重试 3 次\nconst data3 = await retry(() => fetchData(), { retries: 3, delay: 100 });\nconsole.log(data3);\n\n// 使用函数动态设置重试间隔（例如每次增加 50ms）\nconst data4 = await retry(() => fetchData(), {\n  retries: 5,\n  delay: attempts => attempts * 50,\n});\nconsole.log(data4);\n\n// 可通过 AbortSignal 取消重试\nconst controller = new AbortController();\nconst data5 = await retry(() => fetchData(), { signal: controller.signal });\nconsole.log(data5);\n```\n\n----------------------------------------\n\nTITLE: Using Mutex in a Critical Section with TypeScript\nDESCRIPTION: This example demonstrates how to use the Mutex class to protect a critical section in an async function. It shows the pattern of acquiring the mutex, executing the critical section, and then releasing the mutex in a try-finally block.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/Mutex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutex = new Mutex();\n\nasync function criticalSection() {\n  await mutex.acquire();\n  try {\n    // This code section cannot be executed simultaneously\n  } finally {\n    mutex.release();\n  }\n}\n\ncriticalSection();\ncriticalSection(); // This call will wait until the first call releases the mutex.\n```\n\n----------------------------------------\n\nTITLE: Using Method Function with Object Properties\nDESCRIPTION: Example demonstrating how to use the method() function to create a function that invokes a nested method on an object with predefined arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/method.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = method('a.b', 1, 2);\nconsole.log(add(object)); // => 3\n```\n\n----------------------------------------\n\nTITLE: Initializing Initial Array Utility in TypeScript\nDESCRIPTION: A generic function that takes an array and returns a new array containing all elements except the last one. Works with arrays of any type, handling empty and single-element arrays by returning an empty array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/initial.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction initial<T>(arr: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Count By Function Signature\nDESCRIPTION: Generic function signature for counting array items with a transformation mapper, supporting dynamic key generation and occurrence counting\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/countBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction countBy<T, K extends PropertyKey>(arr: T[], mapper: (item: T) => K): Record<K, number>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Random Number Generation Usage in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'random' function to generate random numbers within different ranges. It also shows error cases when the minimum is greater than or equal to the maximum.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/random.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = random(0, 5); // Returns a random number between 0 and 5.\nconst result2 = random(5, 0); // If the minimum is greater than the maximum, an error is thrown\nconst result3 = random(5, 5); // If the minimum is equal to the maximum, an error is thrown.\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Flow Function Example\nDESCRIPTION: Example showing the Lodash-compatible version of flow that accepts both arrays of functions and individual functions as arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flow.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flow } from 'es-toolkit/compat';\n\nconst add = (x: number, y: number) => x + y;\nconst square = (n: number) => n * n;\nconst double = (n: number) => n * 2;\n\nconst combined = flow([add, square], double);\nconsole.log(combined(1, 2)); // => 18\n```\n\n----------------------------------------\n\nTITLE: Unioning Arrays with a Mapping Function - TypeScript\nDESCRIPTION: The function 'unionBy' takes two arrays and a mapping function as parameters, returning a new array containing unique elements based on the mapping criteria. It expects two array arguments and a callback function that determines how elements are compared. The output is an array that contains only distinct elements from both input arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unionBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unionBy<T, U>(arr1: T[], arr2: T[], mapper: (item: T) => U): T[] {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bind Function with ES Toolkit in TypeScript\nDESCRIPTION: Demonstrates how to use the 'bind' function from ES Toolkit's compatibility module. It shows binding a function with a specific 'this' context and partial arguments, as well as using placeholders for flexible argument binding.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/bind.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bind } from 'es-toolkit/compat';\n\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nconst object = { user: 'fred' };\n\nlet bound = bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// プレースホルダーを使用してバインド\nbound = bind(greet, object, bind.placeholder, '!');\nbound('hi');\n// => 'hi fred!'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'assign' Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'assign' function to merge properties from multiple source objects into a target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assign.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assign(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Once Function Interface Definition\nDESCRIPTION: Defines type signatures for creating a function that can only be called once, with support for functions returning any value or void\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/once.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction once<F extends () => any>(func: F): F;\nfunction once<F extends (...args: any[]) => void>(func: F): F;\n```\n\n----------------------------------------\n\nTITLE: MeanBy Function Usage Examples\nDESCRIPTION: Examples demonstrating how to use the meanBy function with an array of objects and a selector function. Shows both successful calculation and empty array handling.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/meanBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmeanBy([{ a: 1 }, { a: 2 }, { a: 3 }], x => x.a); // Returns: 2\nmeanBy([], x => x.a); // Returns: NaN\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-compatible intersectionBy Function with Property Key in TypeScript\nDESCRIPTION: This example shows how the Lodash-compatible intersectionBy function can accept a property key as an iteratee, comparing objects based on a specific property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ x: 1 }, { x: 2 }, { x: 3 }];\nconst array2 = [{ x: 2 }, { x: 3 }, { x: 4 }];\nconst result = intersectionBy(array1, array2, 'x');\n// 結果は [{ x: 2 }, { x: 3 }] です。これらの要素は同じ`x`プロパティを持っています。\n```\n\n----------------------------------------\n\nTITLE: Using pickBy Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the pickBy function. It creates an object with mixed types and uses a predicate function to pick only the string properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/pickBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 'pick', c: 3 };\nconst shouldPick = (value, key) => typeof value === 'string';\nconst result = pickBy(obj, shouldPick);\n// result will be { b: 'pick' }\n```\n\n----------------------------------------\n\nTITLE: Range Function Usage Examples\nDESCRIPTION: Examples demonstrating various use cases of the range function including basic usage, custom step values, and handling negative steps. Also shows error case when step is zero.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/range.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [0, 1, 2, 3]\nrange(4);\n\n// Returns [0, 5, 10, 15]\nrange(0, 20, 5);\n\n// Returns [0, 5, 10, 15, 20]\nrange(0, 21, 5);\n\n// Returns [0, -1, -2, -3]\nrange(0, -4, -1);\n\n// Throws an error: The step value must be a non-zero integer.\nrange(1, 4, 0);\n```\n\n----------------------------------------\n\nTITLE: Using Words Function with Mixed Language Input in TypeScript\nDESCRIPTION: This example demonstrates the 'words' function's ability to handle input containing words from different languages and numbers. It splits the string into separate words and numbers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/words.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwords('Lunedì 18 Set');\n// => ['Lunedì', '18', 'Set']\n```\n\n----------------------------------------\n\nTITLE: Intersection By Example 1 in TypeScript\nDESCRIPTION: Demonstrates how to use `intersectionBy` with two arrays of objects, extracting a common property using a mapper function. It filters the first array based on whether the mapped `id` exists in the mapped values of the second array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst mapper = item => item.id;\nconst result = intersectionBy(array1, array2, mapper);\n// result will be [{ id: 2 }] since only this element has a matching id in both arrays.\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Objects with toSnakeCaseKeys in TypeScript\nDESCRIPTION: This example illustrates how toSnakeCaseKeys recursively converts keys in nested objects to snake_case, maintaining the original structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toSnakeCaseKeys.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst nested = {\n  userData: {\n    userId: 1,\n    userAddress: {\n      streetName: 'Main St',\n      zipCode: '12345',\n    },\n  },\n};\nconst nestedResult = toSnakeCaseKeys(nested);\n// nestedResult will be:\n// {\n//   user_data: {\n//     user_id: 1,\n//     user_address: {\n//       street_name: 'Main St',\n//       zip_code: '12345'\n//     }\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rest Function Usage in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'rest' function generator. It shows different scenarios including default start index, custom start index, and handling fewer arguments than the start index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/rest.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(a, b, c) {\n  return Array.from(arguments);\n}\n\n// Using default start index (func.length - 1, which is 2 in this case)\nconst func1 = rest(fn);\nconsole.log(func1(1, 2, 3, 4)); // [1, 2, [3, 4]]\n\n// Using start index 1\nconst func2 = rest(fn, 1);\nconsole.log(func2(1, 2, 3, 4)); // [1, [2, 3, 4]]\n\n// With fewer arguments than the start index\nconsole.log(func1(1)); // [1, undefined, []]\n```\n\n----------------------------------------\n\nTITLE: Updating Object Values in TypeScript\nDESCRIPTION: The update function is designed to modify a specified object at a given path using an updater function. If parts of the specified path do not exist, they will be created. This function takes three parameters: the object to modify, the path to the property, and the updater function that generates the new value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/update.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Memoize Function Interface in TypeScript\nDESCRIPTION: Defines the type signature for the memoize function with optional caching and key generation parameters\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/memoize.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memoize<F extends (...args: any) => any>(\n  fn: F,\n  options: {\n    cache?: MemoizeCache<any, ReturnType<F>>;\n    getCacheKey?: (args: Parameters<F>[0]) => unknown;\n  } = {}\n): F & { cache: MemoizeCache<any, ReturnType<F>> };\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for Find in TypeScript\nDESCRIPTION: Defines the TypeScript function signatures for the 'find' function with various overloads to support different search criteria for both arrays and objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/find.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction find<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown, fromIndex?: number): T | undefined;\nfunction find<T>(arr: T[], doesMatch: Partial<T>, fromIndex?: number): T | undefined;\nfunction find<T>(arr: T[], doesMatch: [keyof T, unknown], fromIndex?: number): T | undefined;\nfunction find<T>(arr: T[], doesMatch: PropertyKey, fromIndex?: number): T | undefined;\n\nfunction find<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (item: T[keyof T], index: number, object: T) => unknown,\n  fromIndex?: number\n): T | undefined;\nfunction find<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: Partial<T[keyof T]>,\n  fromIndex?: number\n): T | undefined;\nfunction find<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: [keyof T[keyof T], unknown],\n  fromIndex?: number\n): T | undefined;\nfunction find<T extends Record<string, unknown>>(object: T, doesMatch: PropertyKey, fromIndex?: number): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using dropWhile Function with Predicate in TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the dropWhile function with a predicate function that filters out elements based on a condition. It shows how the result varies depending on the elements that meet the condition.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropWhile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst result = dropWhile(array, x => x < 3);\n// result will be [3, 4, 5] since elements less than 3 are dropped.\n```\n\n----------------------------------------\n\nTITLE: takeRightWhile Signature (Lodash Compatibility)\nDESCRIPTION: Defines the signatures for the `takeRightWhile` function when used with `es-toolkit/compat` for Lodash compatibility. It supports various overloads, including predicate functions, partial objects, property-value pairs, and property names, allowing for flexible matching conditions. The function returns a new array containing the matching elements from the end of the input array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeRightWhile.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeRightWhile<T>(array: ArrayLike<T> | null | undefined): T[];\nfunction takeRightWhile<T>(\n  array: ArrayLike<T> | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => unknown\n): T[];\nfunction takeRightWhile<T>(array: ArrayLike<T> | null | undefined, matches: Partial<T>): T[];\nfunction takeRightWhile<T>(array: ArrayLike<T> | null | undefined, matchesProperty: [keyof T, unknown]): T[];\nfunction takeRightWhile<T>(array: ArrayLike<T> | null | undefined, property: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Basic Object Flattening Example in TypeScript\nDESCRIPTION: Demonstrates flattening a nested object with default dot delimiter, including nested objects and arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/flattenObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedObject = {\n  a: {\n    b: {\n      c: 1,\n    },\n  },\n  d: [2, 3],\n};\n\nconst flattened = flattenObject(nestedObject);\nconsole.log(flattened);\n// Output:\n// {\n//   'a.b.c': 1,\n//   'd.0': 2,\n//   'd.1': 3\n// }\n```\n\n----------------------------------------\n\nTITLE: Using isNull Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isNull function with different types of values. It shows the function returning true for null and false for undefined and number values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isNull.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = null;\nconst value2 = undefined;\nconst value3 = 42;\n\nconsole.log(isNull(value1)); // true\nconsole.log(isNull(value2)); // false\nconsole.log(isNull(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining negate Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature of the 'negate' function. It takes a function of type F that returns a boolean and returns a new function of the same type F.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/negate.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction negate<F extends (...args: never[]) => boolean>(func: F): F;\n```\n\n----------------------------------------\n\nTITLE: Using reverseString Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the reverseString function from the es-toolkit library. It shows three different use cases, including reversing a simple word, a PascalCase string, and a string with an emoji.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/reverseString.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reverseString } from 'es-toolkit/string';\n\nconst reversedStr1 = reverseString('hello'); // returns 'olleh'\nconst reversedStr2 = reverseString('PascalCase'); // returns 'esaClacsaP'\nconst reversedStr3 = reverseString('foo 😄 bar'); // returns 'rab 😄 oof'\n```\n\n----------------------------------------\n\nTITLE: Unary Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type signature for the unary function that takes a function of any arity and returns a new function accepting only one argument while preserving the return type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/unary.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unary<F extends (...args: any[]) => any>(func: F): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Example Usages of flattenDeep Function in TypeScript\nDESCRIPTION: This snippet demonstrates several use cases of the flattenDeep function, showcasing its ability to handle various levels of nested arrays and different mapping functions while returning a consistently flattened structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatMapDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3];\n\nconst result1 = flatMapDeep(array, item => [item, item]);\n// Return [1, 1, 2, 2, 3, 3]\n\nconst result2 = flatMapDeep(array, item => [[item, item]]);\n// Return [1, 1, 2, 2, 3, 3]\n\nconst result3 = flatMapDeep(array, item => [[[item, item]]]);\n// Return [1, 1, 2, 2, 3, 3]\n```\n\n----------------------------------------\n\nTITLE: mapKeys Usage Example in TypeScript\nDESCRIPTION: This code demonstrates how to use the `mapKeys` function in TypeScript. An object with string keys and number values is defined. The `mapKeys` function is then called with this object and a mapping function that concatenates the key with its corresponding value to generate the new key.  The transformed object is then printed to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mapKeys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2 };\nconst result = mapKeys(obj, (value, key) => key + value);\nconsole.log(result); // { a1: 1, b2: 2 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signatures for findIndex Function\nDESCRIPTION: Multiple function signatures showing different matching approaches including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findIndex<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown, fromIndex?: number): number;\nfunction findIndex<T>(arr: T[], doesMatch: Partial<T>, fromIndex?: number): number;\nfunction findIndex<T>(arr: T[], doesMatch: [keyof T, unknown], fromIndex?: number): number;\nfunction findIndex<T>(arr: T[], doesMatch: PropertyKey, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndexOf Function with Various Inputs in TypeScript\nDESCRIPTION: This example demonstrates how to use the sortedIndexOf function with different types of inputs, including sorted arrays, arrays with duplicate values, unsorted arrays, and array-like objects. It also shows how the function handles edge cases like -0 and 0.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndexOf } from 'es-toolkit/compat';\n\nconst numbers = [11, 22, 33, 44, 55];\nsortedIndexOf(numbers, 11); // 戻り値: 0\nsortedIndexOf(numbers, 30); // 戻り値: -1\n\n// 値が重複している場合、最初の値のインデックスを返します。\nconst duplicateNumbers = [1, 2, 2, 3, 3, 3, 4];\nsortedIndexOf(duplicateNumbers, 3); // 戻り値: 3\n\n// 配列がソートされていない場合、間違ったインデックスを返すことがあります。\nconst unSortedArray = [55, 33, 22, 11, 44];\nsortedIndexOf(unSortedArray, 11); // 戻り値: -1\n\n// -0 と 0 は同じように扱われます。\nconst mixedZeroArray = [-0, 0];\nsortedIndexOf(mixedZeroArray, 0); // 戻り値: 0\nsortedIndexOf(mixedZeroArray, -0); // 戻り値: 0\n\n// 配列のようなオブジェクトでも動作します。\nconst arrayLike = { length: 3, 0: 10, 1: 20, 2: 30 };\nsortedIndexOf(arrayLike, 20); // 戻り値: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Arrays with TypeScript\nDESCRIPTION: The `toFilled` function creates a new array that is filled with a specified value starting from a given index up to an end index. If no start or end is specified, the function fills the entire array with the value. It supports negative indices which are treated as offsets from the array's end. Parameters include `arr`, the original array; `value`, the value to fill with; `start`, the index to start filling (defaulting to 0); and `end`, the index to stop filling (defaulting to the array's length). The function returns a new array with the modifications, leaving the original array unchanged.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/toFilled.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toFilled<T, U>(arr: T[], value: U): Array<T | U>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toFilled<T, U>(arr: T[], value: U, start: number): Array<T | U>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toFilled<T, U>(arr: T[], value: U, start: number, end: number): Array<T | U>;\n```\n\n----------------------------------------\n\nTITLE: zipObject Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature defining a utility that combines an array of keys and an array of values into a single object. It uses generics to maintain proper typing of both keys and values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zipObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction zipObject<P extends string | number | symbol, V>(keys: P[], values: V[]): { [K in P]: V };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating eq Function Usage in TypeScript\nDESCRIPTION: This code snippet shows examples of using the 'eq' function with various inputs. It demonstrates comparisons between numbers, special numeric values, and objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/eq.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neq(1, 1); // true\neq(0, -0); // true\neq(NaN, NaN); // true\neq('a', Object('a')); // false\n```\n\n----------------------------------------\n\nTITLE: Using toPlainObject with Constructor Functions\nDESCRIPTION: Example demonstrating how toPlainObject flattens inherited properties from a constructor function's prototype into a plain object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toPlainObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.b = 2;\n}\nFoo.prototype.c = 3;\n\ntoPlainObject(new Foo()); // => { 'b': 2, 'c': 3 }\n```\n\n----------------------------------------\n\nTITLE: Array Flattening Usage Examples\nDESCRIPTION: Demonstrates multiple scenarios of array flattening with different depth levels, showing how the function handles nested arrays of varying complexity.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/flatten.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, [2, 3], [4, [5, 6]]];\n\nconst result1 = flatten(array);\n// Return [1, 2, 3, 4, [5, 6]]\n\nconst result2 = flatten(array, 1);\n// Return [1, 2, 3, 4, [5, 6]]\n\nconst result3 = flatten(array, 2);\n// Return [1, 2, 3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Defining 'get' Function Signatures in TypeScript\nDESCRIPTION: This snippet shows multiple TypeScript function signatures for the 'get' function, demonstrating its flexibility in handling different input types and return values. It includes overloads for various object depths and key types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/get.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction get<T, K extends keyof T>(object: T, path: K | [K]): T[K];\nfunction get<T, K extends keyof T>(object: T | null | undefined, path: K | [K]): T[K] | undefined;\nfunction get<T, K extends keyof T, D>(\n  object: T | null | undefined,\n  path: K | [K],\n  defaultValue: D\n): Exclude<T[K], undefined> | D;\n\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, path: [K1, K2]): T[K1][K2];\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1]>(\n  object: T | null | undefined,\n  path: [K1, K2]\n): T[K1][K2] | undefined;\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], D>(\n  object: T | null | undefined,\n  path: [K1, K2],\n  defaultValue: D\n): Exclude<T[K1][K2], undefined> | D;\n\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n  object: T,\n  path: [K1, K2, K3]\n): T[K1][K2][K3];\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n  object: T | null | undefined,\n  path: [K1, K2, K3]\n): T[K1][K2][K3] | undefined;\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], D>(\n  object: T | null | undefined,\n  path: [K1, K2, K3],\n  defaultValue: D\n): Exclude<T[K1][K2][K3], undefined> | D;\n\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(\n  object: T,\n  path: [K1, K2, K3, K4]\n): T[K1][K2][K3][K4];\nfunction get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(\n  object: T | null | undefined,\n  path: [K1, K2, K3, K4]\n): T[K1][K2][K3][K4] | undefined;\nfunction get<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  D,\n>(object: T | null | undefined, path: [K1, K2, K3, K4], defaultValue: D): Exclude<T[K1][K2][K3][K4], undefined> | D;\n\nfunction get<T>(object: Record<number, T>, path: number): T;\nfunction get<T>(object: Record<number, T> | null | undefined, path: number): T | undefined;\nfunction get<T, D>(object: Record<number, T> | null | undefined, path: number, defaultValue: D): T | D;\n\nfunction get<D>(object: null | undefined, path: PropertyKey, defaultValue: D): D;\nfunction get(object: null | undefined, path: PropertyKey): undefined;\n\nfunction get<T, P extends string>(data: T, path: P): string extends P ? any : Get<T, P>;\nfunction get<T, P extends string, D = Get<T, P>>(\n  data: T,\n  path: P,\n  defaultValue: D\n): Exclude<Get<T, P>, null | undefined> | D;\n\nfunction get(object: unknown, path: PropertyKey, defaultValue?: unknown): any;\nfunction get(object: unknown, path: PropertyKey | readonly PropertyKey[], defaultValue?: unknown): any;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating has Function Usage in TypeScript\nDESCRIPTION: This code snippet shows a simple usage of the 'has' function to check for the existence of a nested path in an object. It imports the function from 'es-toolkit/compat' and logs the result to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/has.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { has } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 3 } } };\n\nconsole.log(has(obj, 'a.b.c'));\n```\n\n----------------------------------------\n\nTITLE: Defining the xorWith Function Signature in TypeScript\nDESCRIPTION: Function signature for xorWith that takes two arrays and a custom equality function to compute symmetric difference between them.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xorWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction xorWith<T>(arr1: T[], arr2: T[], areElementsEqual: (item1: T, item2: T) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Using mapValues Function Example in TypeScript\nDESCRIPTION: Example usage of the mapValues function showing how to multiply all numeric values in an object by 2. Demonstrates the transformation of object values while maintaining the original object structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mapValues.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2 };\nconst result = mapValues(obj, value => value * 2);\nconsole.log(result); // { a: 2, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Using Reject with Arrays in TypeScript\nDESCRIPTION: Examples demonstrating how to use the 'reject' function with arrays using different matching strategies: predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reject } from 'es-toolkit/compat';\n\n// Using a predicate function\nreject([1, 2, 3], n => n % 2 === 0);\n// => [1, 3]\n\n// Using a partial object\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nreject(arr, { name: 'Bob' });\n// => [{ id: 1, name: 'Alice' }]\n\n// Using a property-value pair\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nreject(arr, ['name', 'Alice']);\n// => [{ id: 2, name: 'Bob' }]\n\n// Using a property name\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n  { id: 3, age: 28 },\n];\nreject(arr, 'name');\n// => [{ id: 3, age: 28 }]\n```\n\n----------------------------------------\n\nTITLE: Using 'over' Function with Math Methods in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'over' function with Math.max and Math.min methods. It shows two ways of passing iteratees: as an array and as separate arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/over.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = over([Math.max, Math.min]);\nconst func2 = over(Math.max, Math.min);\nfunc(1, 2, 3, 4);\n// => [4, 1]\nfunc2(1, 2, 3, 4);\n// => [4, 1]\n```\n\n----------------------------------------\n\nTITLE: Intersection By with Lodash Compatibility in TypeScript\nDESCRIPTION: Illustrates the use of `intersectionBy` from `es-toolkit/compat`, leveraging Lodash's extended functionality. It demonstrates using `intersectionBy` with multiple arrays and a mapper function, finding elements that have the same mapped value in all arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { intersectionBy } from 'es-toolkit/compat';\n\nconst array1 = [1.2, 2.4, 3.6];\nconst array2 = [2.5, 3.7];\nconst array3 = [2.6, 3.8];\nconst result = intersectionBy(array1, array2, array3, Math.floor);\n// result will be [2.4, 3.6] since the common elements after applying Math.floor are 2 and 3.\n```\n\n----------------------------------------\n\nTITLE: orderBy Function Signature in Typescript\nDESCRIPTION: Defines the signature of the `orderBy` function. It takes an array of objects `arr`, an array of criteria `criteria` (either keys of the object or functions that extract sortable values from the object), and an array of sort orders `orders` ('asc' or 'desc'). The function returns a new array containing the objects sorted according to the provided criteria and orders.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/orderBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction orderBy<T extends object>(\n  arr: T[],\n  criteria: Array<((item: T) => unknown) | keyof T>,\n  orders: Array<'asc' | 'desc'>\n): T[];\n```\n\n----------------------------------------\n\nTITLE: Union function signature in TypeScript\nDESCRIPTION: Defines the function signature for the `union` function, which accepts two arrays of type `T` as input and returns a new array of type `T` containing only unique elements. This declaration specifies the expected input types and the return type of the function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/union.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction union<T>(arr1: T[], arr2: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Sandpack Demo Implementation\nDESCRIPTION: Complete example showing how to import and use the toMerged function from the es-toolkit library.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toMerged.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toMerged } from 'es-toolkit';\n\nconst target = { a: 1, b: { x: 1, y: 2 } };\nconst source = { b: { y: 3, z: 4 }, c: 5 };\nconst result = toMerged(target, source);\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Defining Overloaded dropRightWhile Function - TypeScript\nDESCRIPTION: This snippet defines multiple overloads for the 'dropRightWhile' function, allowing it to accept various types of second arguments for dropping elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropRightWhile<T>(\n  arr: ArrayLike<T> | null | undefined,\n  canContinueDropping: (item: T, index: number, arr: T[]) => unknown\n): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, objectToDrop: Partial<T>): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: [keyof T, unknown]): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Clone Function Usage Examples\nDESCRIPTION: Examples demonstrating clone function usage with different data types including primitives, arrays, and objects. Shows how identity comparison behaves for different types after cloning.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/clone.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst num = 29;\nconst clonedNum = clone(num);\nconsole.log(clonedNum); // 29\nconsole.log(clonedNum === num); // true\n\nconst arr = [1, 2, 3];\nconst clonedArr = clone(arr);\nconsole.log(clonedArr); // [1, 2, 3]\nconsole.log(clonedArr === arr); // false\n\nconst obj = { a: 1, b: 'es-toolkit', c: [1, 2, 3] };\nconst clonedObj = clone(obj);\nconsole.log(clonedObj); // { a: 1, b: 'es-toolkit', c: [1, 2, 3] }\nconsole.log(clonedObj === obj); // false\n```\n\n----------------------------------------\n\nTITLE: Using Custom Interpolate Delimiter in Template Function\nDESCRIPTION: Illustrates how to use a custom 'interpolate' delimiter by specifying a custom regular expression. The compiled function uses the custom delimiter to insert data properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<$ value $>', { interpolate: /<\\$([\\s\\S]+?)\\$>/g });\ncompiled({ value: 'Hello, World!' }); // returns 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Using randomInt Function Examples in TypeScript\nDESCRIPTION: Example usage of the randomInt function showing different parameter combinations and error cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/randomInt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = randomInt(0, 5); // Returns a random integer between 0 and 5.\nconst result2 = randomInt(5, 0); // If the minimum is greater than the maximum, an error is thrown\nconst result3 = randomInt(5, 5); // If the minimum is equal to the maximum, an error is thrown.\n```\n\n----------------------------------------\n\nTITLE: Using assignIn to Merge Object Properties in TypeScript\nDESCRIPTION: Example demonstrating how to use the assignIn function to merge properties from multiple source objects into a target object. The result contains all properties from the source objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignIn(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using mergeWith for Array Concatenation in TypeScript\nDESCRIPTION: This example shows how to use mergeWith to concatenate arrays when merging objects. It combines arrays from the source object with arrays in the target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mergeWith.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: [1], b: [2] };\nconst source = { a: [3], b: [4] };\n\nmergeWith(target, source, (objValue, srcValue) => {\n  if (Array.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n});\n// Returns { a: [1, 3], b: [2, 4] })\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Function Signatures for assignInWith\nDESCRIPTION: TypeScript function signatures that define the various overloads of the assignInWith function. It supports multiple source objects and an optional customization function to control how values are assigned.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignInWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignInWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignInWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignInWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignInWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignInWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Intersection By Example 2 in TypeScript\nDESCRIPTION: Shows how to use `intersectionBy` with an array of objects and an array of numbers, using a mapper function that handles both types. It returns the objects from the first array whose `id` property matches any element from the second array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [\n  { id: 1, name: 'jane' },\n  { id: 2, name: 'amy' },\n  { id: 3, name: 'michael' },\n];\nconst array2 = [2, 4];\nconst mapper = item => (typeof item === 'object' ? item.id : item);\nconst result = intersectionBy(array1, array2, mapper);\n// result will be [{ id: 2, name: 'amy' }] since only this element has a matching id that is equal to seconds array's element.\n```\n\n----------------------------------------\n\nTITLE: Using the Update Function with ES-Toolkit\nDESCRIPTION: Example showing how to use the update function from es-toolkit/compat to modify nested object properties. The examples demonstrate updating existing values and creating new nested properties automatically when they don't exist.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/update.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { update } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// パスにある値を更新する\nupdate(object, 'a[0].b.c', n => (n as number) + 1);\n// => { a: [{ b: { c: 4 } }] }\n\n// 存在しないパスを更新すると自動的に作成される\nupdate(object, 'x.y.z', () => 'created');\n// => { a: [{ b: { c: 3 } }], x: { y: { z: 'created' } } }\n```\n\n----------------------------------------\n\nTITLE: Using intersectionBy Function with Mixed Type Arrays in TypeScript\nDESCRIPTION: This example shows how intersectionBy can handle arrays of different types (objects and numbers) using a mapper function that checks the type of each item before extracting the comparison value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [\n  { id: 1, name: 'jane' },\n  { id: 2, name: 'amy' },\n  { id: 3, name: 'michael' },\n];\nconst array2 = [2, 4];\nconst mapper = item => (typeof item === 'object' ? item.id : item);\nconst result = intersectionBy(array1, array2, mapper);\n// `mapper`で変換したとき、両方の配列に含まれる要素からなる [{ id: 2, name: 'amy' }] 値が返されます。\n```\n\n----------------------------------------\n\nTITLE: Defining defaultTo Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the defaultTo function. It includes two function overloads to handle different input types and return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/defaultTo.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTo<T>(value: T | null | undefined, defaultValue?: T): T;\nfunction defaultTo(value?: unknown, defaultValue?: unknown): any;\n```\n\n----------------------------------------\n\nTITLE: Using Subtract Function with Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the subtract function with various inputs including positive numbers, negative numbers, and NaN values. The examples show how the function handles normal cases and edge cases with NaN values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/subtract.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsubtract(6, 4); // Returns 2.\nsubtract(-6, 4); // Returns -10.\nsubtract(NaN, 4); // Since value is NaN, it returns NaN.\nsubtract(6, NaN); // Since other is NaN, it returns NaN.\nsubtract(NaN, NaN); // Since both arguments are NaN, it returns NaN.\n```\n\n----------------------------------------\n\nTITLE: Using isSafeInteger Function in TypeScript\nDESCRIPTION: This snippet demonstrates various examples of using the isSafeInteger function with different input types. It shows how the function behaves with regular integers, values outside the safe integer range, BigInts, and strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isSafeInteger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisInteger(3); // Returns: true\nisInteger(Number.MIN_SAFE_INTEGER - 1); // Returns: false\nisInteger(1n); // Returns: false\nisInteger('1'); // Returns: false\n```\n\n----------------------------------------\n\nTITLE: Using lastIndexOf with Regular Values and NaN\nDESCRIPTION: Example showing how to use lastIndexOf to find the last occurrence of both regular values and NaN in an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, NaN, 1];\nlastIndexOf(array, 1); // => 4\nlastIndexOf(array, NaN); // => 3\n```\n\n----------------------------------------\n\nTITLE: Usage Example of conformsTo Function\nDESCRIPTION: Demonstrates how to use the conformsTo function to validate object properties against predicate functions, showing both passing and failing scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/conformsTo.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\nconst source = {\n  a: n => n > 0,\n  b: n => n > 1,\n};\n\nconsole.log(conformsTo(object, source)); // => true\n\nconst source2 = {\n  a: n => n > 1,\n  b: n => n > 1,\n};\n\nconsole.log(conformsTo(object, source2)); // => false\n```\n\n----------------------------------------\n\nTITLE: Using Every Function with Objects in TypeScript\nDESCRIPTION: This example shows how to use the 'every' function with objects in various scenarios, including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/every.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { every } from 'es-toolkit/compat';\n\n// Using predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = every(obj, value => value > 0);\nconsole.log(result); // true\n\n// Using partial object\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = every(obj, { name: 'Bob' });\nconsole.log(result); // false\n\n// Using property-value pair\nconst obj = { alice: { id: 1, name: 'Alice' }, bob: { id: 2, name: 'Bob' } };\nconst result = every(obj, ['name', 'Alice']);\nconsole.log(result); // false\n\n// Using property name\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = every(obj, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Last Element Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the 'last' function with various types of arrays, showcasing its ability to handle both populated and empty arrays, as well as nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/last.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst result = last(arr1);\n// result will be 3\n\nconst arr2: number[] = [];\nconst result = last(arr2);\n// result will be undefined\n\nconst largeArray = Array(1000)\n  .fill(0)\n  .map((_, i) => i);\nconst result = last(largeArray);\n// result will be 999\n\nconst nestedArray = [\n  [3, 1],\n  [3, 2],\n  [3, 3],\n];\nconst result = last(nestedArray);\n// result will be [3,3]\n```\n\n----------------------------------------\n\nTITLE: Using toInteger Function with Various Input Types in TypeScript\nDESCRIPTION: This code block demonstrates examples of using the toInteger function with different input types, including numbers, strings, symbols, and special numeric values. It shows how the function handles various edge cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toInteger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoInteger(3.2); // => 3\ntoInteger(Number.MIN_VALUE); // => 0\ntoInteger(Infinity); // => 1.7976931348623157e+308\ntoInteger('3.2'); // => 3\ntoInteger(Symbol.iterator); // => 0\ntoInteger(NaN); // => 0\n```\n\n----------------------------------------\n\nTITLE: Using flattenDeep Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the flattenDeep function to flatten a nested array. It shows the input array and the expected output after flattening.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/flattenDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, [2, [3]], [4, [5, 6]]];\n\nconst result = flattenDeep(array);\n// 返回 [1, 2, 3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Defining intersectionBy Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the intersectionBy function. It takes two arrays of potentially different types and a mapper function, returning an array of the first type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intersectionBy<T, U>(firstArr: T[], secondArr: U[], mapper: (item: T | U) => unknown): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining pickBy Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the interface for the pickBy function. It takes an object and a condition function as parameters, and returns a new object with properties that satisfy the condition.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/object/pickBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pickBy<T extends Record<string, any>>(\n  obj: T,\n  shouldPick: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Using zipObjectDeep with String Paths\nDESCRIPTION: Example demonstrating how to use zipObjectDeep with dot-separated string paths and corresponding values to create a nested object structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/zipObjectDeep.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zipObjectDeep } from 'es-toolkit/compat';\n\nconst paths = ['a.b.c', 'd.e.f'];\nconst values = [1, 2];\nconst result = zipObjectDeep(paths, values);\n// result will be { a: { b: { c: 1 } }, d: { e: { f: 2 } } }\n```\n\n----------------------------------------\n\nTITLE: Defining updateWith Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the updateWith function. It takes an object, a path, an updater function, and a customizer function as parameters, and returns the modified object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/updateWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateWith<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown,\n  customizer: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Using dropWhile with Various Conditions in TypeScript\nDESCRIPTION: This set of examples demonstrates how to use the dropWhile function with different types of conditions for dropping elements: predicate function, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropWhile.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example using a predicate function\nconst array1 = [1, 2, 3, 4, 5];\nconst result1 = dropWhile(array1, x => x < 3);\n// result1 will be [3, 4, 5] since elements less than 3 are dropped.\n\n// Example using a partial object\nconst array2 = [{ a: 1 }, { a: 2 }, { a: 3 }];\nconst result2 = dropWhile(array2, { a: 1 });\n// result2 will be [{ a: 2 }, { a: 3 }] since the first object matches the properties of the provided object.\n\n// Example using a property-value pair\nconst array3 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst result3 = dropWhile(array3, ['id', 1]);\n// result3 will be [{ id: 2 }, { id: 3 }] since the first object has the id property matching the value 1.\n\n// Example using a property name\nconst array4 = [{ isActive: true }, { isActive: true }, { isActive: false }];\nconst result4 = dropWhile(array4, 'isActive');\n// result4 will be [{ isActive: false }] since it drops elements until it finds one with a falsy isActive property.\n```\n\n----------------------------------------\n\nTITLE: Custom MemoizeCache Implementation\nDESCRIPTION: Demonstrates creating a custom cache class that implements the MemoizeCache interface\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/memoize.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomCache<K, T> implements MemoizeCache<K, T> {\n  private cache = new Map<K, T>();\n  set(key: K, value: T): void {\n    this.cache.set(key, value);\n  }\n  get(key: K): T | undefined {\n    return this.cache.get(key);\n  }\n  has(key: K): boolean {\n    return this.cache.has(key);\n  }\n  delete(key: K): boolean {\n    return this.cache.delete(key);\n  }\n  clear(): void {\n    this.cache.clear();\n  }\n  get size(): number {\n    return this.cache.size;\n  }\n}\n\nconst customCache = new CustomCache<string, number>();\nconst memoizedSumWithCustomCache = memoize(sum, { cache: customCache });\nconsole.log(memoizedSumWithCustomCache([1, 2])); // 3\nconsole.log(memoizedSumWithCustomCache([1, 2])); // 3 (cached result)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of isInteger Function\nDESCRIPTION: Examples demonstrating various use cases of the isInteger function with different input types and their expected return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isInteger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisInteger(3); // Returns: true\nisInteger(Infinity); // Returns: false\nisInteger('3'); // Returns: false\nisInteger([]); // Returns: false\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatible Spread Function Examples\nDESCRIPTION: Shows usage of the Lodash-compatible spread function with various argument index scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/spread.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/compat';\n\nfunction fn(a: unknown, b: unknown, c: unknown) {\n  return Array.from(arguments);\n}\n\nspread(fn, -1)([1, 2]); // Returns [1, 2]\nspread(fn, NaN)([1, 2]); // Returns [1, 2]\nspread(fn, 'a')([1, 2]); // Returns [1, 2]\nspread(fn, 1.6)(1, [2, 3]); // Returns [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using isBrowser Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isBrowser function in a TypeScript application. It checks if the environment is a browser and, if so, logs a message and updates the DOM.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBrowser.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (isBrowser()) {\n  console.log('This is running in a browser');\n  document.getElementById('app').innerHTML = 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating isJSONObject Usage with Examples in TypeScript\nDESCRIPTION: This code snippet provides examples of using the isJSONObject function with various inputs, showcasing both positive and negative cases. It demonstrates how the function behaves with nested objects, empty objects, and non-object values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isJSONObject({ nested: { boolean: true, array: [1, 2, 3], string: 'test', number: 1, null: null } })); // true\nconsole.log(isJSONObject({})); // true\nconsole.log(isJSONObject({ regexp: /test/ })); // false\nconsole.log(isJSONObject(123)); // false\n```\n\n----------------------------------------\n\nTITLE: Using xorWith with Object Arrays in TypeScript\nDESCRIPTION: Example demonstrating how to use xorWith with arrays of objects, using a custom equality function that compares object IDs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xorWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [{ id: 1 }, { id: 3 }]\nxorWith([{ id: 1 }, { id: 2 }], [{ id: 2 }, { id: 3 }], (a, b) => a.id === b.id);\n```\n\n----------------------------------------\n\nTITLE: Pull Function Example Usage\nDESCRIPTION: Demonstrates how to use the pull function to remove specific values from an array. Shows mutation of the original array by removing values 2 and 4.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/pull.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5, 2, 4];\npull(numbers, [2, 4]);\nconsole.log(numbers); // [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Using the 'cond' Function with Multiple Conditions in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'cond' function to create a composite function that checks multiple conditions and executes the corresponding function for the first matching condition.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/cond.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = cond([\n  [matches({ a: 1 }), constant('matches A')],\n  [conforms({ b: isNumber }), constant('matches B')],\n  [stubTrue, constant('no match')],\n]);\n\nfunc({ a: 1, b: 2 });\n// => 'matches A'\n\nfunc({ a: 0, b: 1 });\n// => 'matches B'\n\nfunc({ a: '1', b: '2' });\n// => 'no match'\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-compatible intersectionBy Function with Multiple Arrays in TypeScript\nDESCRIPTION: This example demonstrates the Lodash-compatible version of intersectionBy, which accepts multiple array-like objects and uses Math.floor as the iteratee function to find common elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { intersectionBy } from 'es-toolkit/compat';\n\nconst array1 = [1.2, 2.4, 3.6];\nconst array2 = [2.5, 3.7];\nconst array3 = [2.6, 3.8];\nconst result = intersectionBy(array1, array2, array3, Math.floor);\n// 結果は [2.4, 3.6] です。Math.floorを適用した後、共通要素は2と3です。\n```\n\n----------------------------------------\n\nTITLE: Defining No-Operation Function Signature in TypeScript\nDESCRIPTION: Defines the signature of the 'noop' function, which takes no parameters and returns void.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/noop.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction noop(): void;\n```\n\n----------------------------------------\n\nTITLE: Using constantCase Function with Various Inputs in TypeScript\nDESCRIPTION: Demonstrates usage examples of the constantCase function with different input string formats, showing how it handles camelCase, whitespace, hyphens, and acronyms.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/constantCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst convertedStr1 = constantCase('camelCase'); // returns 'CAMEL_CASE'\nconst convertedStr2 = constantCase('some whitespace'); // returns 'SOME_WHITESPACE'\nconst convertedStr3 = constantCase('hyphen-text'); // returns 'HYPHEN_TEXT'\nconst convertedStr4 = constantCase('HTTPRequest'); // returns 'HTTP_REQUEST'\n```\n\n----------------------------------------\n\nTITLE: Basic Throttle Function Usage Example\nDESCRIPTION: Demonstrates the basic usage of a throttle function that limits execution to once every 1000 milliseconds. Shows how the first call executes immediately while subsequent calls within the throttle period are delayed.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/throttle.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst throttledFunction = throttle(() => {\n  console.log('函数执行了');\n}, 1000);\n\n// 将立即记录 '函数执行了'\nthrottledFunction(); // 第一次调用立即触发执行\n\n// 将在1秒后记录 '函数执行了'\nthrottledFunction(); // 第二次调用在节流周期内，但由于尾部行为在1秒后触发\n\n// 2秒后\nsetTimeout(() => {\n  throttledFunction(); // 将再次记录 '函数执行了'\n}, 2000); // 这将记录，因为节流周期已经过去\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit via unpkg CDN in browser\nDESCRIPTION: Example of including es-toolkit via unpkg CDN and using the 'chunk' function in a browser environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/es-toolkit@%5E1\"></script>\n<script>\n  var arr = _.chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Delay Implementation in TypeScript\nDESCRIPTION: Demonstrates the Lodash-compatible version of delay that accepts a callback function with arguments and returns a timer ID.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/delay.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { delay } from 'es-toolkit/compat';\n\n// Example 1: Delayed function execution\nconst timerId = delay(\n  (greeting, recipient) => {\n    console.log(`${greeting}, ${recipient}!`);\n  },\n  1000,\n  'Hello',\n  'Alice'\n);\n// => 'Hello, Alice!' will be logged after one second.\n\n// Example 2: Clearing the timeout before execution\nclearTimeout(timerId);\n// The function will not be executed because the timeout was cleared.\n```\n\n----------------------------------------\n\nTITLE: isJSONArray Usage Examples\nDESCRIPTION: Demonstrates the usage of the `isJSONArray` function with various examples. The examples showcase different scenarios where the function returns `true` for valid JSON arrays and `false` otherwise, including cases with primitive types, null values, and non-JSON values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isJSONArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isJSONArray([1, 2, 3])); // true\nconsole.log(isJSONArray(['string', null, true])); // true\nconsole.log(isJSONArray([1, 2, () => {}])); // false\nconsole.log(isJSONArray('not an array')); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating isEqualWith Usage with Custom Comparison in TypeScript\nDESCRIPTION: This example shows how to use isEqualWith with a custom comparison function. It demonstrates case-insensitive string comparison and how the function works with different data types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqualWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customizer = (a, b) => {\n  if (typeof a === 'string' && typeof b === 'string') {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n};\nisEqualWith('Hello', 'hello', customizer); // true\nisEqualWith({ a: 'Hello' }, { a: 'hello' }, customizer); // true\nisEqualWith([1, 2, 3], [1, 2, 3], customizer); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Mutex Interface in TypeScript\nDESCRIPTION: Declares the structure of the Mutex class with key properties and methods for controlling concurrent access to critical code sections.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/promise/Mutex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mutex {\n  isLocked: boolean;\n\n  acquire(): Promise<void>;\n  release(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reject with Objects in TypeScript\nDESCRIPTION: Examples showing how to use the 'reject' function with objects as the collection. Demonstrates the four matching strategies: predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reject.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reject } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nreject(obj, item => item > 2);\n// => [1, 2]\n\n// Using a partial object\nconst obj = {\n  a: { id: 1, name: 'Alice' },\n  b: { id: 2, name: 'Bob' },\n};\nreject(obj, { name: 'Bob' });\n// => [{ id: 1, name: 'Alice' }]\n\n// Using a property-value pair\nconst obj = {\n  alice: { id: 1, name: 'Alice' },\n  bob: { id: 2, name: 'Bob' },\n};\nreject(obj, ['name', 'Alice']);\n// => [{ id: 2, name: 'Bob' }]\n\n// Using a property name\nconst obj = {\n  a: { id: 1, name: 'Alice' },\n  b: { id: 2, name: 'Bob' },\n  c: { id: 3, age: 28 },\n};\nreject(obj, 'name');\n// => [{ id: 3, age: 28 }]\n```\n\n----------------------------------------\n\nTITLE: Computing Array Differences with a Mapper Function in TypeScript\nDESCRIPTION: The `differenceBy` function computes the difference between two arrays after mapping their elements using a provided function. It takes two arrays and a mapper function as parameters and returns a new array of elements from the first array that do not have corresponding mapped identities in the second array. Required dependencies include a functional understanding of JavaScript/TypeScript and access to 'es-toolkit/array'. The function requires three parameters: `firstArr`, `secondArr`, and `mapper`. The output is a filtered array. Limitations include that the comparison is solely based on the mapped values and not on the original values themselves.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/differenceBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction differenceBy<T, U>(firstArr: T[], secondArr: U[], mapper: (value: T | U) => unknown): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { differenceBy } from 'es-toolkit/array';\n\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst mapper = item => item.id;\nconst result = differenceBy(array1, array2, mapper);\n// result will be [{ id: 1 }, { id: 3 }, { id: 5 }] since the elements with id 2 are in both arrays and are excluded from the result.\n\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [2, 4];\nconst mapper = item => (typeof item === 'object' ? item.id : item);\nconst result = differenceBy(array1, array2, mapper);\n// result will be [{ id: 1 }, { id: 3 }] since 2 is present in both arrays after mapping, and is excluded from the result.\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: Defines the type signature for the cond function which takes an array of pairs and returns a function that accepts any arguments and returns an unknown type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/cond.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cond(pairs: any[][]): (...args: any[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Comparing Date Objects with isEqual in JavaScript\nDESCRIPTION: This example illustrates how isEqual compares Date objects. It shows that two Date objects with the same value are considered equal, while those with different values are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst date1 = new Date('2020-01-01');\nconst date2 = new Date('2020-01-01');\nisEqual(date1, date2); // true\n\nconst date3 = new Date('2021-01-01');\nisEqual(date1, date3); // false\n```\n\n----------------------------------------\n\nTITLE: Example: Basic Initial Array Usage\nDESCRIPTION: Demonstrates the usage of the initial function with various array types, including numeric arrays, empty arrays, and nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/initial.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst result = initial(arr1);\n// result is [1, 2].\n\nconst arr2: number[] = [];\nconst result = initial(arr2);\n// result is [].\n\nconst arr3: number[] = [1];\nconst result = initial(arr3);\n// result is [].\n\nconst largeArray = Array(1000)\n  .fill(0)\n  .map((_, i) => i);\nconst result = initial(largeArray);\n// result is [0, 1, 2 ..., 998].\n\nconst nestedArray = [\n  [3, 1],\n  [3, 2],\n  [3, 3],\n];\nconst result = initial(nestedArray);\n// result is [[3, 1], [3, 2]].\n```\n\n----------------------------------------\n\nTITLE: Iteratee Function Usage Examples in TypeScript\nDESCRIPTION: Demonstrates various use cases of the iteratee function including identity function, property accessor, property matcher, and object matcher scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/iteratee.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = iteratee();\n[{ a: 1 }, { a: 2 }, { a: 3 }].map(func) // => [{ a: 1 }, { a: 2 }, { a: 3 }]\n\nconst func = iteratee((object) => object.a);\n[{ a: 1 }, { a: 2 }, { a: 3 }].map(func) // => [1, 2, 3]\n\nconst func = iteratee('a');\n[{ a: 1 }, { a: 2 }, { a: 3 }].map(func) // => [1, 2, 3]\n\nconst func = iteratee({ a: 1 });\n[{ a: 1 }, { a: 2 }, { a: 3 }].find(func) // => { a: 1 }\n\nconst func = iteratee(['a', 1]);\n[{ a: 1 }, { a: 2 }, { a: 3 }].find(func) // => { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining Method Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'method' function. It specifies the function signature, including its parameters and return type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/method.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction method(path: PropertyKey | PropertyKey[], ...args: any[]): (object?: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for toMerged\nDESCRIPTION: Type definition showing the function signature for the toMerged utility that merges properties from a source object into a target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toMerged.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toMerged<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(target: T, source: S): T & S;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for toCamelCaseKeys\nDESCRIPTION: Type definition showing the function signature that takes a generic type T and returns a transformed type with camelCase keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toCamelCaseKeys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toCamelCaseKeys<T>(obj: T): ToCamelCaseKeys<T>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for zipWith in TypeScript\nDESCRIPTION: Type signatures for the zipWith function showing its overloaded variants for handling different numbers of input arrays, from one to four arrays, with appropriate typing for the combiner function and return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/zipWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction zipWith<T, R>(arr1: T[], combine: (item: T) => R): R[];\nfunction zipWith<T, U, R>(arr1: T[], arr2: U[], combine: (item1: T, item2: U) => R): R[];\nfunction zipWith<T, U, V, R>(arr1: T[], arr2: U[], arr3: V[], combine: (item1: T, item2: U, item3: V) => R): R[];\nfunction zipWith<T, U, V, W, R>(\n  arr1: T[],\n  arr2: U[],\n  arr3: V[],\n  arr4: W[],\n  combine: (item1: T, item2: U, item3: V, item4: W) => R\n): R[];\n```\n\n----------------------------------------\n\nTITLE: Intersection By with Array-like Objects in TypeScript\nDESCRIPTION: Demonstrates how to use `intersectionBy` with array-like objects. It finds the intersection between two array-like objects, returning an array containing the common elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrayLike1 = { 0: 'apple', 1: 'banana', 2: 'cherry', length: 3 };\nconst arrayLike2 = { 0: 'banana', 1: 'cherry', 2: 'date', length: 3 };\nconst result = intersectionBy(arrayLike1, arrayLike2);\n// result will be ['banana', 'cherry'] since these elements are common between the two array-like objects.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of rangeRight Function\nDESCRIPTION: Demonstrates various use cases of the rangeRight function including basic usage, custom step values, and handling negative numbers. Also shows error case with invalid step value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/rangeRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [3, 2, 1, 0]\nrangeRight(4);\n\n// Returns [15, 10, 5, 0]\nrangeRight(0, 20, 5);\n\n// Returns [20, 15, 10, 5, 0]\nrangeRight(0, 21, 5);\n\n// Returns [-3, -2, -1, 0]\nrangeRight(0, -4, -1);\n\n// Throws an error: The step value must be a non-zero integer.\nrangeRight(1, 4, 0);\n```\n\n----------------------------------------\n\nTITLE: Function Signature for 'without' Array Utility in TypeScript\nDESCRIPTION: TypeScript signature of the 'without' function which takes an array and values to exclude, and returns a new array with those values removed. It correctly handles NaN values using SameValueZero comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/without.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction without<T>(array: T[], ...values: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the floor function from es-toolkit/compat. It shows rounding down numbers with different precisions, including negative precision for rounding to tens, hundreds, etc.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/math/floor.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { floor } from 'es-toolkit/compat';\n\nfloor(4.006); // => 4\nfloor(0.046, 2); // => 0.04\nfloor(4060, -2); // => 4000\n```\n\n----------------------------------------\n\nTITLE: Using medianBy Function with Objects in TypeScript\nDESCRIPTION: These examples demonstrate how to use the medianBy function with an array of objects. It shows cases for odd and even number of elements, as well as an empty array scenario.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/medianBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmedianBy([{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }, { a: 5 }], x => x.a); // Returns: 3\nmedianBy([{ a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }], x => x.a); // Returns: 2.5\nmedianBy([], x => x.a); // Returns: NaN\n```\n\n----------------------------------------\n\nTITLE: Defining isObject Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isObject. It takes an optional unknown parameter and returns a boolean indicating if the value is an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isObject(value?: unknown): value is object;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of Concat Function\nDESCRIPTION: Demonstrates how to use the concat function with various input types including individual values, arrays, and nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/concat.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Concatenate individual values\nconcat(1, 2, 3);\n// returns [1, 2, 3]\n\n// Concatenate arrays of values\nconcat([1, 2], [3, 4]);\n// returns [1, 2, 3, 4]\n\n// Concatenate a mix of individual values and arrays\nconcat(1, [2, 3], 4);\n// returns [1, 2, 3, 4]\n\n// Concatenate nested arrays\nconcat([1, [2, 3]], 4);\n// returns [1, [2, 3], 4]\n```\n\n----------------------------------------\n\nTITLE: Using the Divide Function with Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the divide function with different numeric inputs, including handling of NaN values. Shows the expected return values for various input combinations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/divide.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndivide(6, 3); // => 2\ndivide(2, NaN); // => NaN\ndivide(NaN, 3); // => NaN\ndivide(NaN, NaN); // => NaN\n```\n\n----------------------------------------\n\nTITLE: Defining pickBy Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the pickBy function. It takes a generic object type T and a predicate function, returning a partial object of type T.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/pickBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pickBy<T extends Record<string, any>>(\n  obj: T,\n  shouldPick: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of toUpper Function\nDESCRIPTION: Comprehensive examples demonstrating various use cases of the toUpper function, including string conversion, null handling, array conversion, and number conversion to uppercase strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/toUpper.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { toUpper } from 'es-toolkit';\n\ntoUpper('--foo-bar--'); // returns '--FOO-BAR--'\ntoUpper('Hello World'); // returns 'HELLO WORLD'\ntoUpper(null); // returns ''\ntoUpper([1, 2, 3]); // returns '1,2,3'\ntoUpper(123); // returns '123'\ntoUpper(); // returns ''\n```\n\n----------------------------------------\n\nTITLE: Using trimStart Function with Various Inputs in TypeScript\nDESCRIPTION: These examples demonstrate how to use the trimStart function with different inputs. It shows trimming leading hyphens, zeros, repeated characters, and multiple instances of a single character from the start of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trimStart.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst trimmedStr1 = trimStart('---hello', '-'); // returns 'hello'\nconst trimmedStr2 = trimStart('000123', '0'); // returns '123'\nconst trimmedStr3 = trimStart('abcabcabc', 'a'); // returns 'bcabcabc'\nconst trimmedStr4 = trimStart('xxxtrimmed', 'x'); // returns 'trimmed'\n```\n\n----------------------------------------\n\nTITLE: Using WeakSet Type Check Function in TypeScript\nDESCRIPTION: Example usage demonstrating how to use the isWeakSet function with different data structures to test for WeakSet instances.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isWeakSet.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new WeakSet();\nconst value2 = new Map();\nconst value3 = new Set();\n\nconsole.log(isWeakSet(value1)); // true\nconsole.log(isWeakSet(value2)); // false\nconsole.log(isWeakSet(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Debounce Function Interface Definition - Typescript\nDESCRIPTION: Defines the interface for the `debounce` function, outlining its parameters and return type. The function takes a function `func`, a delay in milliseconds `debounceMs`, and an optional `DebounceOptions` object. It returns a debounced function with additional methods for controlling its behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction debounce<F extends (...args: any[]) => void>(\n  func: F,\n  debounceMs: number,\n  options?: DebounceOptions\n): ((...args: Parameters<F>) => void) & {\n  cancel: () => void;\n  flush: () => void;\n  schedule: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript JSON Value Validation Examples\nDESCRIPTION: Example usage of the isJSONValue function showing various test cases with different types of values and their expected validation results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONValue.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isJSONValue(null)); // true\nconsole.log(isJSONValue({ key: 'value' })); // true\nconsole.log(isJSONValue([1, 2, 3])); // true\nconsole.log(isJSONValue('Hello')); // true\nconsole.log(isJSONValue(42)); // true\nconsole.log(isJSONValue(true)); // true\nconsole.log(isJSONValue(undefined)); // false\nconsole.log(isJSONValue(() => {})); // false\n```\n\n----------------------------------------\n\nTITLE: Defining isNotNil Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isNotNil. It's a generic function that takes a potentially nullable value and returns a boolean, acting as a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNotNil.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNotNil<T>(x: T | null | undefined): x is T;\n```\n\n----------------------------------------\n\nTITLE: Using camelCase Function in TypeScript\nDESCRIPTION: Demonstrates various examples of using the camelCase function from the es-toolkit/string module. It shows how the function handles different input string formats including spaces, hyphens, and Unicode characters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/camelCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { camelCase } from 'es-toolkit/string';\n\ncamelCase('camelCase'); // returns 'camelCase'\ncamelCase('some whitespace'); // returns 'someWhitespace'\ncamelCase('hyphen-text'); // returns 'hyphenText'\ncamelCase('HTTPRequest'); // returns 'httpRequest'\ncamelCase('Keep unicode 😅'); // returns 'keepUnicode😅'\n```\n\n----------------------------------------\n\nTITLE: Using isPromise Function with Different Value Types in TypeScript\nDESCRIPTION: This example demonstrates how to use the isPromise function with various value types. It shows the function returning true for a Promise object and false for non-Promise values like an empty object or a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPromise.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Promise(resolve => resolve());\nconst value2 = {};\nconst value3 = 123;\n\nconsole.log(isPromise(value1)); // true\nconsole.log(isPromise(value2)); // false\nconsole.log(isPromise(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Comparing RegExp Objects with isEqual in JavaScript\nDESCRIPTION: This example shows how isEqual compares RegExp objects. It demonstrates that RegExp objects with the same pattern and flags are considered equal, while those with different flags are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst regex1 = /hello/g;\nconst regex2 = /hello/g;\nisEqual(regex1, regex2); // true\n\nconst regex3 = /hello/i;\nisEqual(regex1, regex3); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Map Function Signatures in TypeScript\nDESCRIPTION: This code snippet defines multiple function signatures for the map function, covering various use cases for both arrays and objects. It specifies different types of iteratees and return types based on the input.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/map.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction map<T, U>(arr: T[], iteratee: (value: T, index: number, arr: T[]) => U): U[];\nfunction map<T>(arr: T[], iteratee: Partial<T>): boolean[];\nfunction map<T>(arr: T[], iteratee: [keyof T, unknown]): boolean[];\nfunction map<T, K extends keyof T>(arr: T[], iteratee: K): Array<T[K]>;\nfunction map<T>(arr: T[], iteratee?: null | undefined): T[];\n\nfunction map<T extends object, U>(object: T, iteratee: (value: T[keyof T], key: string, object: T) => U): U[];\nfunction map<T>(object: T, iteratee: Partial<T[keyof T]>): boolean[];\nfunction map<T>(object: T, iteratee: [keyof T[keyof T], unknown]): boolean[];\nfunction map<T, K extends keyof T[keyof T]>(object: T, iteratee: K): Array<T[keyof T][K]>;\nfunction map<T extends object, U>(object: T, iteratee?: null | undefined): U[];\n```\n\n----------------------------------------\n\nTITLE: Example: Subset Check with Non-Matching Objects\nDESCRIPTION: Demonstrates a scenario where the subset contains an object not present in the superset, resulting in a false return value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubsetWith.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst superset = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst subset = [{ id: 4 }];\nconst areItemsEqual = (a, b) => a.id === b.id;\n\nisSubsetWith(superset, subset, areItemsEqual);\n// Return false\n```\n\n----------------------------------------\n\nTITLE: Defining stubArray Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for stubArray. The function takes no parameters and returns an empty array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubArray(): [];\n```\n\n----------------------------------------\n\nTITLE: Defining Compact Array Type Signature in TypeScript\nDESCRIPTION: Typescript function signature for removing falsey values from an array, using generics and type exclusion to preserve type safety\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/compact.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compact<T>(arr: T[]): Array<Exclude<T, false | null | 0 | 0n | '' | undefined>>\n```\n\n----------------------------------------\n\nTITLE: Using bindKey to Create Bound Methods with Partial Application\nDESCRIPTION: Example showing how to use bindKey to create a function bound to an object's method. It demonstrates how the bound function works with methods that are redefined after binding, and how to use placeholders for partial application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/bindKey.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bindKey } from 'es-toolkit/compat';\n\nconst object = {\n  user: 'fred',\n  greet: function (greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  },\n};\n\nlet bound = bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function (greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nbound = bindKey(object, 'greet', bindKey.placeholder, '!');\nbound('hi');\n// => 'hiya fred!'\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Curry Function Signature\nDESCRIPTION: Type definition for the lodash-compatible curry function that supports partial application, placeholders, and custom arity specification.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curry.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curry(\n  func: (...args: any[]) => any,\n  arity: number = func.length,\n  guard?: unknown\n): ((...args: any[]) => any) & { placeholder: typeof curry.placeholder };\n\nnamespace curry {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Spread Function with Multiple Parameters in TypeScript\nDESCRIPTION: Demonstrates using 'spread' with functions that have default parameters and positioning the spread array at different indices.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/spread.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 展开参数的示例函数\n// 创建一个使用 `spread` 来合并参数的新函数\nconst spreadAdd = spread(add, 1);\n// 使用数组作为第二个参数调用 `spreadAdd`\nconsole.log(spreadAdd(1, [2])); // 输出: 3\n\n// 带有默认参数的函数\nfunction greet(name, greeting = 'Hello') {\n  return `${greeting}, ${name}!`;\n}\n// 创建一个使用 `spread` 将参数数组定位在索引 0 的新函数\nconst spreadGreet = spread(greet, 0);\n// 使用参数数组调用 `spreadGreet`\nconsole.log(spreadGreet(['Alice'])); // 输出: Hello, Alice!\nconsole.log(spreadGreet(['Bob', 'Hi'])); // 输出: Hi, Bob!\n```\n\n----------------------------------------\n\nTITLE: Head Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for `head`, which takes an array `arr` of type `T[]` and returns either the first element of type `T` or `undefined` if the array is empty.  It includes two overload signatures to handle both arrays with at least one element and potentially empty arrays. The function is exported for use in other modules.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/head.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function head<T>(arr: [T, ...T[]]): T;\nexport function head<T>(arr: T[]): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using isTypedArray Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isTypedArray function to check various types of arrays and buffers. It shows true for TypedArrays and false for regular arrays and ArrayBuffers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isTypedArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isTypedArray } from 'es-toolkit/predicate';\n\nconst arr = new Uint8Array([1, 2, 3]);\nisTypedArray(arr); // true\n\nconst regularArray = [1, 2, 3];\nisTypedArray(regularArray); // false\n\nconst buffer = new ArrayBuffer(16);\nisTypedArray(buffer); // false\n```\n\n----------------------------------------\n\nTITLE: startsWith Usage Example\nDESCRIPTION: Demonstrates how to import and use the `startsWith` function from `es-toolkit/compat`. It provides several examples with different input strings, target strings, and starting positions, showing the expected boolean return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/startsWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { startsWith } from 'es-toolkit/compat';\n\nstartsWith('fooBar', 'foo'); // returns true\nstartsWith('fooBar', 'Bar'); // returns false\nstartsWith('fooBar', 'abcdef'); // returns false\nstartsWith('fooBar', 'Bar', 3); // returns true\n```\n```\n\n----------------------------------------\n\nTITLE: Multiply Function Signature in TypeScript\nDESCRIPTION: The function signature for the multiply operation, which takes two number parameters and returns their product as a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/multiply.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction multiply(value: number, other: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using the 'has' Function with Various Path Formats\nDESCRIPTION: Example demonstrating how to use the 'has' function with different path formats: direct property access, array path, deep property path using array notation, and dot notation. It also shows examples of checking array indices.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/has.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { has } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 3 } } };\n\nhas(obj, 'a'); // true\nhas(obj, ['a', 'b']); // true\nhas(obj, ['a', 'b', 'c']); // true\nhas(obj, 'a.b.c'); // true\nhas(obj, 'a.b.d'); // false\nhas(obj, ['a', 'b', 'c', 'd']); // false\nhas([], 0); // false\nhas([1, 2, 3], 2); // true\nhas([1, 2, 3], 5); // false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of indexOf Function with Numbers and NaN\nDESCRIPTION: Demonstrates how to use the indexOf function to find elements in an array, including finding NaN values which native indexOf cannot do.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/indexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, NaN];\nindexOf(array, 3); // => 2\nindexOf(array, NaN); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using 'over' Function with Property-Value Pairs in TypeScript\nDESCRIPTION: This example shows how to use the 'over' function with property-value pairs as iteratees. It checks if specific properties of the provided object match the specified values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/over.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = over([['a', 1], ['b', 2]]);\nfunc({ a: 1, b: 2 });\n// => [true, true]\n```\n\n----------------------------------------\n\nTITLE: Using isSet Function Examples\nDESCRIPTION: Examples demonstrating how to use the isSet function with different collection types including Set, Map, and WeakSet. Shows various use cases and expected return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isSet.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Set();\nconst value2 = new Map();\nconst value3 = new WeakSet();\n\nconsole.log(isSet(value1)); // true\nconsole.log(isSet(value2)); // false\nconsole.log(isSet(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Using toSafeInteger Function with Various Inputs in TypeScript\nDESCRIPTION: This code block demonstrates multiple examples of using the toSafeInteger function with different input types, including numbers, strings, and special values like Infinity and NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toSafeInteger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoSafeInteger(3.2); // => 3\ntoSafeInteger(Number.MAX_VALUE); // => 9007199254740991\ntoSafeInteger(Infinity); // => 9007199254740991\ntoSafeInteger('3.2'); // => 3\ntoSafeInteger(NaN); // => 0\ntoSafeInteger(null); // => 0\ntoSafeInteger(-Infinity); // => -9007199254740991\n```\n\n----------------------------------------\n\nTITLE: TypeScript Date Type Checker Usage Example\nDESCRIPTION: Example demonstrating how to use the isDate function to check both valid Date objects and non-Date values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isDate.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Date();\nconst value2 = '2024-01-01';\n\nconsole.log(isDate(value1)); // true\nconsole.log(isDate(value2)); // false\n```\n\n----------------------------------------\n\nTITLE: Creating Overlapping Windows from an Array in TypeScript\nDESCRIPTION: The `windowed` function generates sub-arrays (windows) from an input array, defined by window size and step size. An option to include partial windows is also available. The function requires the input array, window size, step size, and an options object (with a boolean flag for partial windows). It returns an array of windows that may include smaller arrays if partial windows are enabled.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/windowed.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction windowed<T>(arr: T[], size: number, step: number, { partialWindows = false }: WindowedOptions): T[][] {\n    // Implementation details would go here...\n}\n\ninterface WindowedOptions {\n    partialWindows?: boolean;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwindowed([1, 2, 3, 4], 2);\n// => [[1, 2], [2, 3], [3, 4]]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwindowed([1, 2, 3, 4, 5, 6], 3, 2);\n// => [[1, 2, 3], [3, 4, 5]]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwindowed([1, 2, 3, 4, 5, 6], 3, 2, { partialWindows: true });\n// => [[1, 2, 3], [3, 4, 5], [5, 6]]\n```\n\n----------------------------------------\n\nTITLE: Examples of Using 'without' Array Utility in TypeScript\nDESCRIPTION: Demonstrates various use cases of the 'without' function including removing numbers from an array, removing strings, handling cases where values aren't present, and working with mixed type arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/without.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { without } from 'es-toolkit/array';\n\n// Removes the specified values from the array\nwithout([1, 2, 3, 4, 5], 2, 4);\n// Returns: [1, 3, 5]\n\n// Removes specified string values from the array\nwithout(['a', 'b', 'c', 'a'], 'a');\n// Returns: ['b', 'c']\n\n// Handles cases where none of the specified values are in the array\nwithout([1, 2, 3], 4, 5);\n// Returns: [1, 2, 3]\n\n// Handles cases with different types of values\nwithout([1, '2', 3, '4'], 2, '4');\n// Returns: [1, '2', 3]\n```\n\n----------------------------------------\n\nTITLE: Using endsWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the endsWith function imported from 'es-toolkit/compat'. It shows various use cases with different input strings and optional position parameter.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/string/endsWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { endsWith } from 'es-toolkit/compat';\n\nendsWith('fooBar', 'foo'); // false を返す\nendsWith('fooBar', 'Bar'); // true を返す\nendsWith('fooBar', 'abcdef'); // false を返す\nendsWith('fooBar', 'Bar', 3); // false を返す\n```\n\n----------------------------------------\n\nTITLE: Applying toSnakeCaseKeys to Arrays of Objects in TypeScript\nDESCRIPTION: This example shows how toSnakeCaseKeys can be used with an array of objects, converting keys in each object to snake_case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toSnakeCaseKeys.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = [\n  { userId: 1, firstName: 'John' },\n  { userId: 2, firstName: 'Jane' },\n];\nconst arrResult = toSnakeCaseKeys(arr);\n// arrResult will be [{ user_id: 1, first_name: 'John' }, { user_id: 2, first_name: 'Jane' }]\n```\n\n----------------------------------------\n\nTITLE: Using toSnakeCaseKeys with Simple Objects in TypeScript\nDESCRIPTION: This example demonstrates how to use toSnakeCaseKeys with a simple object. It converts camelCase keys to snake_case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toSnakeCaseKeys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { userId: 1, firstName: 'John' };\nconst result = toSnakeCaseKeys(obj);\n// result will be { user_id: 1, first_name: 'John' }\n```\n\n----------------------------------------\n\nTITLE: Using upperCase Function with Different String Formats\nDESCRIPTION: Example usage of the upperCase function demonstrating conversion of various string formats including camelCase, whitespace-separated text, hyphenated text, and strings with existing uppercase characters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/upperCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { upperCase } from 'es-toolkit/string';\n\nupperCase('camelCase'); // returns 'CAMEL CASE'\nupperCase('some whitespace'); // returns 'SOME WHITESPACE'\nupperCase('hyphen-text'); // returns 'HYPHEN TEXT'\nupperCase('HTTPRequest'); // returns 'HTTP REQUEST'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Flow Function Signatures\nDESCRIPTION: Type definitions for the flow function showing various overloads supporting different numbers of input functions with strong typing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flow.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flow<R>(f: () => R): () => R;\nfunction flow<A extends any[], R>(f1: (...args: A) => R): (...args: A) => R;\nfunction flow<A extends any[], R1, R2>(f1: (...args: A) => R1, f2: (a: R1) => R2): (...args: A) => R2;\nfunction flow<A extends any[], R1, R2, R3>(\n  f1: (...args: A) => R1,\n  f2: (a: R1) => R2,\n  f3: (a: R2) => R3\n): (...args: A) => R3;\nfunction flow<A extends any[], R1, R2, R3, R4>(\n  f1: (...args: A) => R1,\n  f2: (a: R1) => R2,\n  f3: (a: R2) => R3,\n  f4: (a: R3) => R4\n): (...args: A) => R4;\nfunction flow<A extends any[], R1, R2, R3, R4, R5>(\n  f1: (...args: A) => R1,\n  f2: (a: R1) => R2,\n  f3: (a: R2) => R3,\n  f4: (a: R3) => R4,\n  f5: (a: R4) => R5\n): (...args: A) => R5;\nfunction flow(...funcs: Array<(...args: any[]) => any>): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Numeric Property Merging Example\nDESCRIPTION: Demonstrates merging objects with numeric properties using a custom merge function that adds numeric values\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mergeWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nmergeWith(target, source, (targetValue, sourceValue) => {\n  if (typeof targetValue === 'number' && typeof sourceValue === 'number') {\n    return targetValue + sourceValue;\n  }\n});\n// 反環: { a: 1, b: 5, c: 4 }\n```\n\n----------------------------------------\n\nTITLE: Defining extendWith Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the extendWith function. It demonstrates various overloads to handle different numbers of source objects and the optional getValueToAssign callback function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/extendWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction extendWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction extendWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction extendWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction extendWith(object: any, ...sources: any[]): any;\nfunction extendWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of unzipWith in TypeScript\nDESCRIPTION: Demonstrates how to use unzipWith to transform elements from a nested array by summing corresponding elements\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unzipWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedArray = [\n  [1, 2],\n  [3, 4],\n  [5, 6],\n];\nconst result = unzipWith(nestedArray, (item, item2, item3) => item + item2 + item3);\n// [9, 12]\n```\n\n----------------------------------------\n\nTITLE: MeanBy Function Signature in TypeScript\nDESCRIPTION: Type definition for the meanBy function that takes an array of generic type T and a selector function to compute averages. The selector function extracts numeric values from array elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/meanBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function meanBy<T>(items: T[], getValue: (element: T) => number): number;\n```\n\n----------------------------------------\n\nTITLE: Object Merging Example with Nested Objects\nDESCRIPTION: Example demonstrating how toMerged handles merging of nested objects and primitive values while preserving the original target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toMerged.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1, b: { x: 1, y: 2 } };\nconst source = { b: { y: 3, z: 4 }, c: 5 };\nconst result = toMerged(target, source);\nconsole.log(result);\n// Output: { a: 1, b: { x: 1, y: 3, z: 4 }, c: 5 }\n```\n\n----------------------------------------\n\nTITLE: Defining the meanBy function interface in Typescript\nDESCRIPTION: This code defines the interface for the `meanBy` function in TypeScript. It specifies that the function takes an array of type `T` and a `getValue` function that maps each element of type `T` to a number. The function returns a number representing the mean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/meanBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction meanBy<T>(items: T[], getValue: (element: T) => number): number;\n```\n```\n\n----------------------------------------\n\nTITLE: Object Inversion Usage Example\nDESCRIPTION: Demonstrates how to use the invert function with a simple object containing numeric values. Shows how duplicate values are handled by keeping the last key occurrence.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/invert.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 1, c: 2 };\nconst result = invert(obj);\n// result will be { 1: 'b', 2: 'c' }\n```\n\n----------------------------------------\n\nTITLE: Using isNaN Function in TypeScript\nDESCRIPTION: This snippet demonstrates various usage examples of the isNaN function with different input types, showing its behavior for NaN, numbers, strings, and undefined values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isNaN.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisNaN(NaN); // true\nisNaN(0); // false\nisNaN('NaN'); // false\nisNaN(undefined); // false\n```\n\n----------------------------------------\n\nTITLE: Split Function Usage Examples\nDESCRIPTION: Examples demonstrating different ways to use the split function, including splitting by character, with limit, by regex pattern, and into individual characters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/split.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Split a string by a character\nsplit('a-b-c', '-');\n// => ['a', 'b', 'c']\n\n// Split a string with a limit\nsplit('a-b-c', '-', 2);\n// => ['a', 'b']\n\n// Split a string by a regex pattern\nsplit('abcde', /[bd]/);\n// => ['a', 'c', 'e']\n\n// Split a string into individual characters\nsplit('abc', '');\n// => ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Defining forEachRight Function in TypeScript\nDESCRIPTION: Defines a generic forEachRight function which takes an array and a callback function. The callback processes each element of the array from the last to the first. It is a generic function where T is the type of elements in the array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/forEachRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forEachRight<T>(arr: T[], callback: (value: T, index: number, arr: T[]) => void): void {\n    // Implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Find with Objects in TypeScript\nDESCRIPTION: Demonstrates how to use the 'find' function with objects using different matching criteria including predicate functions, partial values, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/find.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { find } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = find(obj, item => item > 2);\nconsole.log(result); // 3\n\n// Using a partial value\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = find(obj, { name: 'Bob' });\nconsole.log(result); // { id: 2, name: 'Bob' }\n\n// Using a property-value pair\nconst items = { alice: { id: 1, name: 'Alice' }, bob: { id: 2, name: 'Bob' } };\nconst result = find(items, ['name', 'Alice']);\nconsole.log(result); // { id: 1, name: 'Alice' }\n\n// Using a property name\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = find(obj, 'name');\nconsole.log(result); // { id: 1, name: 'Alice' }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating toNumber Function Usage in TypeScript\nDESCRIPTION: This code block provides examples of using the toNumber function with various input types, showing how it converts different values to numbers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toNumber.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoNumber(3.2); // => 3.2\ntoNumber(Number.MIN_VALUE); // => 5e-324\ntoNumber(Infinity); // => Infinity\ntoNumber('3.2'); // => 3.2\ntoNumber(Symbol.iterator); // => NaN\ntoNumber(NaN); // => NaN\n```\n\n----------------------------------------\n\nTITLE: Declaring stubFalse Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the stubFalse function that returns a boolean value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubFalse.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubFalse(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using differenceBy with Object Arrays in TypeScript\nDESCRIPTION: This example demonstrates how to use the differenceBy function with arrays of objects. It compares two arrays based on the 'id' property of each object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/differenceBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { differenceBy } from 'es-toolkit/array';\n\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }, { id: 5 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst mapper = item => item.id;\nconst result = differenceBy(array1, array2, mapper);\n// resultは[{ id: 1 }, { id: 3 }, { id: 5 }]になります。idが2の要素は両方の配列に存在するため、結果から除外されます。\n```\n\n----------------------------------------\n\nTITLE: Using invoke with Object Method in ES-Toolkit\nDESCRIPTION: Demonstrates how to use the invoke function to call a method nested within an object structure. Shows two equivalent ways to specify the path: using a dot-notation string or using an array of property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/invoke.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\ninvoke(object, 'a.b', [1, 2]); // => 3\ninvoke(object, ['a', 'b'], [1, 2]); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using isBuffer Function with Buffer and Non-Buffer Values in TypeScript\nDESCRIPTION: This example demonstrates how to use the isBuffer function with both Buffer and non-Buffer values. It shows that the function returns true for Buffer instances and false for other types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBuffer.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst buffer = Buffer.from('test');\nconsole.log(isBuffer(buffer)); // true\n\nconst notBuffer = 'not a buffer';\nconsole.log(isBuffer(notBuffer)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining pullAt Function in TypeScript\nDESCRIPTION: This TypeScript function, `pullAt`, removes elements from an array at specified indices, including support for negative indexing. It takes an array and an array of indices as parameters, returning an array of the removed elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/pullAt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pullAt<T>(arr: T[], indicesToRemove: number[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with isEqual in JavaScript\nDESCRIPTION: This example shows how isEqual compares arrays. It demonstrates that arrays with the same elements in the same order are considered equal, while those with different elements or lengths are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst arr2 = [1, 2, 3];\nisEqual(arr1, arr2); // true\n\nconst arr3 = [1, 2, 4];\nisEqual(arr1, arr3); // false\n\nconst arr4 = [1, 2];\nisEqual(arr1, arr4); // false\n```\n\n----------------------------------------\n\nTITLE: Using isJSONArray Function Examples in TypeScript\nDESCRIPTION: Examples demonstrating various use cases of the isJSONArray function with different types of inputs and their expected outputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isJSONArray([1, 2, 3])); // true\nconsole.log(isJSONArray(['string', null, true])); // true\nconsole.log(isJSONArray([1, 2, () => {}])); // false\nconsole.log(isJSONArray('not an array')); // false\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Element in Array Using getValue - TypeScript\nDESCRIPTION: The `maxBy` function takes an array and a function to extract numeric values, returning the element with the highest value based on that extraction function. It can handle cases where the input array is empty, returning undefined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/maxBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction maxBy<T>(items: [T, ...T[]], getValue: (element: T) => number): T;\nfunction maxBy<T>(items: T[], getValue: (element: T) => number): T | undefined;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmaxBy([{ a: 1 }, { a: 2 }, { a: 3 }], x => x.a); // Returns: { a: 3 }\nmaxBy([], x => x.a); // Returns: undefined\nmaxBy(\n  [\n    { name: 'john', age: 30 },\n    { name: 'jane', age: 28 },\n    { name: 'joe', age: 26 },\n  ],\n  x => x.age\n); // Returns: { name: 'john', age: 30 }\n```\n\n----------------------------------------\n\nTITLE: Using toPairs with Different Data Structures in TypeScript\nDESCRIPTION: Examples demonstrating how to use the toPairs function with different data structures: an object, a Set, and a Map. The function returns an array of key-value pairs for each input type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/toPairs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\ntoPairs(object); // [['a', 1], ['b', 2]]\n\nconst set = new Set([1, 2]);\ntoPairs(set); // [[1, 1], [2, 2]]\n\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\ntoPairs(map); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: Using pascalCase Function in TypeScript\nDESCRIPTION: Examples of using the pascalCase function from the es-toolkit/string module to convert various strings to Pascal case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/pascalCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pascalCase } from 'es-toolkit/string';\n\nconst convertedStr1 = pascalCase('pascalCase'); // returns 'PascalCase'\nconst convertedStr2 = pascalCase('some whitespace'); // returns 'SomeWhitespace'\nconst convertedStr3 = pascalCase('hyphen-text'); // returns 'HyphenText'\nconst convertedStr4 = pascalCase('HTTPRequest'); // returns 'HttpRequest'\n```\n\n----------------------------------------\n\nTITLE: Using the slice Function with Arrays in TypeScript\nDESCRIPTION: Examples showing how to use the slice function with different parameters. The first example slices a specific range, and the second demonstrates how it handles sparse arrays differently from the native slice method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/slice.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nslice([1, 2, 3], 1, 2); // => [2]\nslice(new Array(3)); // => [undefined, undefined, undefined]\n```\n\n----------------------------------------\n\nTITLE: Using forEachRight to Populate Result Array\nDESCRIPTION: Demonstrates how to use the forEachRight function by importing it and iterating through an array. It collects elements in reverse order into a result array and logs it to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/forEachRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { forEachRight } from 'es-toolkit/array';\n\nconst array = [1, 2, 3];\nconst result: number[] = [];\n\n// Use the forEachRight function to iterate through the array and add each element to the result array.\nforEachRight(array, value => {\n  result.push(value);\n});\n\nconsole.log(result); // Output: [3, 2, 1];\n```\n\n----------------------------------------\n\nTITLE: Using snakeCase Function in TypeScript\nDESCRIPTION: Examples of using the snakeCase function to convert various string formats to snake case. Demonstrates handling of camelCase, whitespace, hyphens, and uppercase letters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/snakeCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { snakeCase } from 'es-toolkit/string';\n\nsnakeCase('camelCase'); // returns 'camel_case'\nsnakeCase('some whitespace'); // returns 'some_whitespace'\nsnakeCase('hyphen-text'); // returns 'hyphen_text'\nsnakeCase('HTTPRequest'); // returns 'http_request'\n```\n\n----------------------------------------\n\nTITLE: Defining pullAllBy Function Signatures in TypeScript\nDESCRIPTION: This code snippet defines multiple function signatures for the pullAllBy function, accommodating different types of getValue parameters including functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/pullAllBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: (value: T) => unknown): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: Partial<T>): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: [keyof T, unknown]): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: keyof T): T[];\n```\n\n----------------------------------------\n\nTITLE: Function Signature for findLast in TypeScript\nDESCRIPTION: TypeScript function signatures for findLast, showing the various overloads for arrays and objects with different matching criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findLast.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findLast<T>(\n  arr: T[],\n  doesMatch: (item: T, index: number, arr: T[]) => unknown,\n  fromIndex?: number\n): T | undefined;\nfunction findLast<T>(arr: T[], doesMatch: Partial<T>, fromIndex?: number): T | undefined;\nfunction findLast<T>(arr: T[], doesMatch: [keyof T, unknown], fromIndex?: number): T | undefined;\nfunction findLast<T>(arr: T[], doesMatch: PropertyKey, fromIndex?: number): T | undefined;\n\nfunction findLast<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (item: T[keyof T], index: number, object: T) => unknown,\n  fromIndex?: number\n): T | undefined;\nfunction findLast<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: Partial<T[keyof T]>,\n  fromIndex?: number\n): T | undefined;\nfunction findLast<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: [keyof T[keyof T], unknown],\n  fromIndex?: number\n): T | undefined;\nfunction findLast<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: PropertyKey,\n  fromIndex?: number\n): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using Array Element Removal Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'remove' function to remove even numbers from an array of integers. The original array is modified in-place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/remove.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5];\nremove(numbers, value => value % 2 === 0);\nconsole.log(numbers); // [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Using 'some' Function with Arrays in TypeScript\nDESCRIPTION: Examples showing how to use the 'some' function with arrays in different ways: with a predicate function, partial object, property-value pair, and property name. Each example demonstrates a different approach to find matching elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/some.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { some } from 'es-toolkit/compat';\n\n// Using a predicate function\nlet items = [1, 2, 3, 4, 5];\nlet result = some(items, item => item > 3);\nconsole.log(result); // true\n\n// Using a partial object\nitems = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nresult = some(items, { name: 'Bob' });\nconsole.log(result); // true\n\n// Using a property-value pair\nitems = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nresult = some(items, ['name', 'Bob']);\nconsole.log(result); // true\n\n// Using a property name\nitems = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nresult = some(items, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: Using lowerCase Function with Different String Formats\nDESCRIPTION: Examples demonstrating how to use the lowerCase function with various string formats including camelCase, whitespace, hyphenated text, and uppercase strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/lowerCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lowerCase } from 'es-toolkit/string';\n\nlowerCase('camelCase'); // returns 'camel case'\nlowerCase('some whitespace'); // returns 'some whitespace'\nlowerCase('hyphen-text'); // returns 'hyphen text'\nlowerCase('HTTPRequest'); // returns 'http request'\n```\n\n----------------------------------------\n\nTITLE: Using Sum Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'sum' function. It creates an array of numbers and passes it to the sum function, which returns the total sum of the array elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/sum.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5];\nconst result = sum(numbers);\n// result will be 15\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of kebabCase Function\nDESCRIPTION: Demonstrates various use cases of the kebabCase function including converting camelCase, whitespace-separated strings, hyphenated text, and uppercase acronyms to kebab case format.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/kebabCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { kebabCase } from 'es-toolkit/string';\n\nkebabCase('camelCase'); // returns 'camel-case'\nkebabCase('some whitespace'); // returns 'some-whitespace'\nkebabCase('hyphen-text'); // returns 'hyphen-text'\nkebabCase('HTTPRequest'); // returns 'http-request'\n```\n\n----------------------------------------\n\nTITLE: Using Basic FindKey Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the basic findKey function with an object containing user data. It shows examples of finding a key based on an age condition, both with a successful match and no match.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/object/findKey.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = {\n  pebbles: { age: 24, active: true },\n  barney: { age: 36, active: true },\n  fred: { age: 40, active: false },\n};\n\nfindKey(users, o => o.age < 40); // 'pebbles'\nfindKey(users, o => o.age > 50); // undefined\n```\n\n----------------------------------------\n\nTITLE: mapValues Function Signature\nDESCRIPTION: Defines the signature of the `mapValues` function.  It accepts an object `object` of type `T` and a function `getNewValue` that transforms each value. The function returns a new object of type `Record<K, V>` where `K` are the keys of the original object and `V` is the type of the transformed values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mapValues.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mapValues<T extends Record<PropertyKey, unknown>, K extends keyof T, V>(\n  object: T,\n  getNewValue: (value: T[K], key: K, object: T) => V\n): Record<K, V>;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Timeout Function\nDESCRIPTION: Example demonstrating how to use the timeout function with async/await and error handling. Shows a 1-second timeout implementation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/timeout.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await timeout(1000); // Timeout exception after 1 second\n} catch (error) {\n  console.error(error); // Will log 'The operation was timed out'\n}\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatible Before Function Example\nDESCRIPTION: Shows usage of the Lodash-compatible version of 'before' function which maintains the last return value after reaching the call limit.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/before.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { before } from 'es-toolkit/compat';\n\nlet count = 0;\n\nconst before3 = before(3, () => {\n  console.log('Incrementing count...');\n  return ++count;\n});\n\nconsole.log(before3()); // Incrementing count... => 1\nconsole.log(before3()); // Incrementing count... => 2\nconsole.log(before3()); //                       => 2\n```\n\n----------------------------------------\n\nTITLE: Using the Times Function in TypeScript\nDESCRIPTION: Examples demonstrating different use cases of the times function. The examples show how to transform indices with a callback function, create a sequential array, and generate an array of repeated values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/times.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntimes(3, doubled); // => [0, 2, 4]\ntimes(4); // => [0, 1, 2, 3]\ntimes(2, () => 'es-toolkit'); // => ['es-toolkit', 'es-toolkit']\n```\n\n----------------------------------------\n\nTITLE: Using Ceil Function in TypeScript\nDESCRIPTION: Example usage of the ceil function imported from es-toolkit/compat. Demonstrates rounding with default precision, positive precision for decimal places, and negative precision for place values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/ceil.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ceil } from 'es-toolkit/compat';\n\nceil(4.006); // => 5\nceil(6.004, 2); // => 6.01\nceil(6040, -2); // => 6100\n```\n\n----------------------------------------\n\nTITLE: Demonstration of cloneDeep in Context\nDESCRIPTION: Imports and uses the cloneDeep function from es-toolkit/object package to create a deep copy of a complex object\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/cloneDeep.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cloneDeep } from 'es-toolkit/object';\n\nconst original = { a: { b: { c: 'deep' } }, d: [1, 2, { e: 'nested' }] };\nconst cloned = cloneDeep(original);\n\nconsole.log(cloned);\nconsole.log(original !== cloned);\n```\n\n----------------------------------------\n\nTITLE: Declaring nth Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the nth function. It takes an array-like object and an index, returning the element at that index or undefined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/nth.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction nth<T>(array: ArrayLike<T> | null | undefined, n: number): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using unset Function with String Path in TypeScript\nDESCRIPTION: This example demonstrates how to use the unset function with a string path to remove a nested property from an object. It shows the object structure before and after the unset operation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/unset.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: { b: { c: 42 } } };\nunset(obj, 'a.b.c'); // true\nconsole.log(obj); // { a: { b: {} } }\n```\n\n----------------------------------------\n\nTITLE: takeRightWhile Example (Basic)\nDESCRIPTION: Illustrates the usage of `takeRightWhile` with a simple numeric array and predicate.  The predicate checks if a number is less than 4. Elements from the end of the array are included in the result as long as they are less than 4. An example with an empty return array is also provided.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeRightWhile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [3, 2, 1]\ntakeRightWhile([5, 4, 3, 2, 1], n => n < 4);\n\n// Returns []\ntakeRightWhile([1, 2, 3], n => n > 3);\n```\n\n----------------------------------------\n\nTITLE: Using valuesIn Function with an Object in TypeScript\nDESCRIPTION: This example demonstrates how to use the valuesIn function with a simple object. It shows that the function returns an array of the object's values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/valuesIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvaluesIn(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Head Function Examples in TypeScript\nDESCRIPTION: Illustrates the usage of the `head` function with various array types (number, string, boolean, and mixed types). Each example demonstrates how the function returns the first element of the array or `undefined` if the array is empty.  The examples cover cases with type inference and explicit type annotations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/head.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst firstElement1 = head(arr1);\n// firstElement1 will be 1\n\nconst arr2: string[] = [];\nconst firstElement2 = head(arr2);\n// firstElement2 will be undefined\n\nconst arr3 = ['a', 'b', 'c'];\nconst firstElement3 = head(arr3);\n// firstElement3 will be 'a'\n\nconst arr4 = [true, false, true];\nconst firstElement4 = head(arr4);\n// firstElement4 will be true\n\nconst arr5: [number, string, boolean] = [1, 'a', true];\nconst firstElement5 = head(arr5);\n// firstElement5 will be 1\n```\n\n----------------------------------------\n\nTITLE: Matching Sets with isMatch Function in TypeScript\nDESCRIPTION: This example shows how isMatch function works with Set objects. It creates two Set instances and checks if one matches the other.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isMatch.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetSet = new Set([1, 2, 3]);\nconst sourceSet = new Set([1, 2]);\nisMatch(targetSet, sourceSet); // true\n```\n\n----------------------------------------\n\nTITLE: Using isNull Function Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the isNull function with different value types including null, undefined, and number values. Shows various usage scenarios and their expected boolean returns.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNull.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = null;\nconst value2 = undefined;\nconst value3 = 42;\n\nconsole.log(isNull(value1)); // true\nconsole.log(isNull(value2)); // false\nconsole.log(isNull(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Using sortedLastIndexBy with Object Arrays and Strings in TypeScript\nDESCRIPTION: Demonstrates how to use the sortedLastIndexBy function with different data types. The first example shows finding the insertion index for an object in an array of objects based on a specific property. The second example shows how to use it with string arrays and a custom sorting logic based on string length.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedLastIndexBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedLastIndexBy } from 'es-toolkit/compat';\n\nconst objects = [{ x: 10 }, { x: 20 }, { x: 20 }, { x: 30 }];\n\n// Use an iteratee to extract the `x` property for comparison\nsortedLastIndexBy(objects, { x: 20 }, o => o.x);\n// Return value: 3\n// Explanation: Based on the `x` property, `{ x: 20 }` returns index 3.\n\n// Handle custom sorting logic\nconst strings = ['apple', 'banana', 'cherry'];\nsortedLastIndexBy(strings, 'apricot', str => str.length);\n// Return value: 3\n// Explanation: Based on the string length, 'apricot' returns index 3.\n```\n\n----------------------------------------\n\nTITLE: Using sortedLastIndex with Number Arrays in TypeScript\nDESCRIPTION: Examples demonstrating how to use the sortedLastIndex function from es-toolkit/compat with arrays of numbers, including finding the insertion index for existing values, handling null arrays, and default comparison behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedLastIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedLastIndex } from 'es-toolkit/compat';\n\n// Basic usage with a number array\nsortedLastIndex([10, 20, 20, 30, 50], 20);\n// Return value: 3\n// Explanation: 20 returns index 3, which is the highest index to maintain the sort order.\n\n// Handling an empty or null array\nsortedLastIndex(null, 25);\n// Return value: 0\n// Explanation: Null or undefined arrays are treated as empty, so 0 is returned.\n\n// Using default comparison logic (delegated behavior with sortedIndexBy)\nsortedLastIndex([10, '20', 30], 25);\n// Return value: 2\n// Explanation: Using default comparison logic, it returns index 2.\n```\n\n----------------------------------------\n\nTITLE: Using bind with Direct and Placeholder Arguments in TypeScript\nDESCRIPTION: Example demonstrating how to use the bind function from es-toolkit/compat to create bound functions with direct argument application and with placeholders for later parameter passing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/bind.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bind } from 'es-toolkit/compat';\n\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nconst object = { user: 'fred' };\n\nlet bound = bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nbound = bind(greet, object, bind.placeholder, '!');\nbound('hi');\n// => 'hi fred!'\n```\n\n----------------------------------------\n\nTITLE: Defining Lodash-Compatible findKey Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signatures for the Lodash-compatible findKey function. It includes overloads for different types of search conditions: predicate function, partial object, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/findKey.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function findKey<T extends Record<any, any>>(\n  obj: T,\n  conditionToFind: (value: T[keyof T], key: keyof T, obj: T) => boolean\n): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(obj: T, objectToFind: Partial<T[keyof T]>): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(\n  obj: T,\n  propertyToFind: [keyof T[keyof T], any]\n): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(obj: T, propertyToFind: keyof T[keyof T]): keyof T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - Number Type Checking\nDESCRIPTION: Demonstrates how to use the isNumber function with different value types to check for number type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isNumber.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = 123;\nconst value2 = 'abc';\nconst value3 = true;\n\nconsole.log(isNumber(value1)); // true\nconsole.log(isNumber(value2)); // false\nconsole.log(isNumber(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: pickBy Function Example\nDESCRIPTION: This example demonstrates the usage of the `pickBy` function.  It defines an object and a condition function that checks if the value of a property is a string. The `pickBy` function is then used to create a new object containing only the properties with string values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/pickBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 'pick', c: 3 };\nconst shouldPick = (value, key) => typeof value === 'string';\nconst result = pickBy(obj, shouldPick);\n// 결과는 다음과 같아요 { b: 'pick' }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating toPairs Usage with Different Data Types in TypeScript\nDESCRIPTION: This example illustrates how to use the toPairs function with an object, a Set, and a Map in TypeScript. It shows the expected output for each case, demonstrating the function's versatility across different data structures.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/toPairs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\ntoPairs(object); // [['a', 1], ['b', 2]]\n\nconst set = new Set([1, 2]);\ntoPairs(set); // [[1, 1], [2, 2]]\n\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\ntoPairs(map); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for sortedIndexBy\nDESCRIPTION: Defines the TypeScript interface for the sortedIndexBy function that determines the index at which a value should be inserted in a sorted array based on a custom iteratee function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndexBy<T, R>(\n  array: ArrayLike<T> | null | undefined,\n  value: T,\n  iteratee: (value: T) => R,\n  retHighest?: boolean\n): number;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pad Function Usage in JavaScript\nDESCRIPTION: Shows examples of using the 'pad' function with different inputs. Demonstrates padding with spaces and custom characters, as well as the case where no padding is needed.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/pad.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npad('abc', 8);\n// => '  abc   '\n\npad('abc', 8, '_-');\n// => '_-abc_-_'\n\npad('abc', 3);\n// => 'abc'\n```\n\n----------------------------------------\n\nTITLE: Example of Using dropRightWhile with Predicate Function - TypeScript\nDESCRIPTION: This snippet provides an example of using the 'dropRightWhile' function with a predicate function that drops the elements greater than 3 from the end of an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst result = dropRightWhile(array, x => x > 3);\n```\n\n----------------------------------------\n\nTITLE: Defining unzipWith Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for unzipWith, which takes a nested array and an iteratee function to transform unzipped elements. It specifies the input parameters types and return value type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/unzipWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unzipWith<T, R>(target: T[][], iteratee: (...args: T[]) => R): R[];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating keys Function Usage with Various Data Types\nDESCRIPTION: Example showing how the keys function works with different data types including custom objects, strings, arrays, and plain objects. The function returns the enumerable property names for each type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/keys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\nFoo.prototype.c = 3;\nkeys(new Foo()); // ['a', 'b'] (iteration order is not guaranteed)\n\nkeys('hi'); // ['0', '1']\nkeys([1, 2, 3]); // ['0', '1', '2']\nkeys({ a: 1, b: 2 }); // ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with String Path in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'property' function with a string path to retrieve a nested value from an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/property.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { property } from 'es-toolkit/compat';\n\nconst getObjectValue = property('a.b.c');\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Typescript Unset Function Example with Array Path\nDESCRIPTION: Shows how to remove a nested property using an array of property keys. Illustrates alternative path specification method with the same modification behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/unset.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: { b: { c: 42 } } };\nunset(obj, ['a', 'b', 'c']); // true\nconsole.log(obj); // { a: { b: {} } }\n```\n\n----------------------------------------\n\nTITLE: Delay with AbortSignal Example in TypeScript\nDESCRIPTION: Shows how to use the delay function with an AbortController to cancel the delay operation after 50ms.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/delay.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo() {\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  setTimeout(() => controller.abort(), 50); // Will cancel the delay after 50ms\n  try {\n    await delay(1000, { signal });\n  } catch (error) {\n    console.log(error); // Will log 'The operation was aborted'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PropertyOf Function with String Path\nDESCRIPTION: Example demonstrating how to use propertyOf to create a getter function for an object and query a nested value using a dot-notation string path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/propertyOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getValue = propertyOf({ a: { b: { c: 3 } } });\nconst result = getValue('a.b.c');\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Floor Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the floor function, which takes a number and an optional precision value, returning the number rounded down to the specified precision.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/floor.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction floor(number: number | string, precision: number | string = 0): number;\n```\n\n----------------------------------------\n\nTITLE: Examples of 'take' Function Usage in TypeScript\nDESCRIPTION: This section provides examples demonstrating how the 'take' function works with different inputs, illustrating its behavior with varying count values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/take.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Returns [1, 2, 3]\ntake([1, 2, 3, 4, 5], 3);\n\n// Returns ['a', 'b']\ntake(['a', 'b', 'c'], 2);\n\n// Returns [1, 2, 3]\ntake([1, 2, 3], 5);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Matches Function in TypeScript\nDESCRIPTION: Demonstrates basic usage of the 'matches' function to create a matcher for comparing objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matches.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst matcher = matches({ a: 1, b: 2 });\nmatcher({ a: 1, b: 2, c: 3 }); // true\nmatcher({ a: 1, c: 3 }); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Template Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for the template function, specifying its parameters and return type. The function takes a string and optional TemplateOptions, returning a function that accepts an optional object and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction template(string: string, options?: TemplateOptions): ((data?: object) => string) & { source: string };\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndexOf Function with Various Array Types in TypeScript\nDESCRIPTION: Examples demonstrating how to use the sortedIndexOf function with different types of arrays, including normal arrays, arrays with duplicate values, unsorted arrays, arrays with mixed zeros, and array-like objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndexOf } from 'es-toolkit/compat';\n\nconst numbers = [11, 22, 33, 44, 55];\nsortedIndexOf(numbers, 11); // Return value: 0\nsortedIndexOf(numbers, 30); // Return value: -1\n\n// If the value is duplicated, it returns the first index of the value.\nconst duplicateNumbers = [1, 2, 2, 3, 3, 3, 4];\nsortedIndexOf(duplicateNumbers, 3); // Return value: 3\n\n// If the array is unsorted, it can return the wrong index.\nconst unSortedArray = [55, 33, 22, 11, 44];\nsortedIndexOf(unSortedArray, 11); // Return value: -1\n\n// -0 and 0 are treated the same\nconst mixedZeroArray = [-0, 0];\nsortedIndexOf(mixedZeroArray, 0); // Return value: 0\nsortedIndexOf(mixedZeroArray, -0); // Return value: 0\n\n// It works with array-like objects\nconst arrayLike = { length: 3, 0: 10, 1: 20, 2: 30 };\nsortedIndexOf(arrayLike, 20); // Return value: 1\n```\n\n----------------------------------------\n\nTITLE: Using sortedLastIndex Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the sortedLastIndex function. It finds the highest index at which the value 5 should be inserted in a sorted array to maintain its order.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedLastIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'defaults' Function in TypeScript\nDESCRIPTION: This snippet provides examples of how to use the 'defaults' function with various input scenarios, showing how default values are applied to objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/defaults.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaults({ a: 1 }, { a: 2, b: 2 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: 1, b: 2 }, { b: 3 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: null }, { a: 1 }); // { a: null }\ndefaults({ a: undefined }, { a: 1 }); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Handling Read-only Properties with cloneDeep in TypeScript\nDESCRIPTION: This example illustrates how cloneDeep handles objects with read-only properties defined by getters. The function includes the values produced by getters in the new copied object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/cloneDeep.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = {\n  get value() {\n    return 3;\n  },\n};\n\nconst cloned = cloneDeep(source);\n// cloned is now { value: 3 }\n```\n\n----------------------------------------\n\nTITLE: Timeout Function Signature in TypeScript\nDESCRIPTION: Function signature defining a timeout utility that takes milliseconds as input and returns a Promise that never resolves.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/timeout.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction timeout(ms: number): Promise<never>;\n```\n\n----------------------------------------\n\nTITLE: Defining First Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the 'first' utility that retrieves the first element from an array-like object. It accepts any array-like structure, including undefined or null, and returns either the first element or undefined if the input is empty.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/first.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction first<T>(arr: ArrayLike<T> | undefined | null): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Example of keyBy Usage with Object Array\nDESCRIPTION: Demonstrates transforming an array of objects into a record using category as the key, with the last matching element being used for each unique key\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/keyBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [\n  { category: 'fruit', name: 'apple' },\n  { category: 'fruit', name: 'banana' },\n  { category: 'vegetable', name: 'carrot' },\n];\nconst result = keyBy(array, item => item.category);\n```\n\n----------------------------------------\n\nTITLE: Defining isFunction Utility in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the isFunction utility. It takes an unknown value as input and returns a boolean indicating whether the value is a function. The return type also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isFunction.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isFunction(value: unknown): value is (...args: never[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Defining inRange Function Signatures in TypeScript\nDESCRIPTION: Declares two overloaded function signatures for the inRange function. One signature takes two parameters (value and maximum), while the other takes three parameters (value, minimum, and maximum).\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/inRange.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function inRange(value: number, maximum: number): boolean;\nexport function inRange(value: number, minimum: number, maximum: number): boolean;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of lowerFirst Function\nDESCRIPTION: Demonstrates various use cases of the lowerFirst function with different input strings, showing how it handles already lowercase, mixed case, and uppercase strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/lowerFirst.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lowerFirst } from 'es-toolkit/string';\n\nlowerFirst('fred'); // returns 'fred'\nlowerFirst('Fred'); // returns 'fred'\nlowerFirst('FRED'); // returns 'fRED'\n```\n\n----------------------------------------\n\nTITLE: Example of Using dropRightWhile with Property Name - TypeScript\nDESCRIPTION: This snippet illustrates the use of the 'dropRightWhile' function with a property name to drop elements from an array until a truthy property is encountered.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst array4 = [{ isActive: false }, { isActive: true }, { isActive: true }];\nconst result4 = dropRightWhile(array4, 'isActive');\n```\n\n----------------------------------------\n\nTITLE: Using endsWith Function in TypeScript\nDESCRIPTION: Demonstrates various use cases of the endsWith function, including checking for endings at different positions within the string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/endsWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { endsWith } from 'es-toolkit/compat';\n\nendsWith('fooBar', 'foo'); // 返回 false\nendsWith('fooBar', 'Bar'); // 返回 true\nendsWith('fooBar', 'abcdef'); // 返回 false\nendsWith('fooBar', 'foo', 3); // 返回 true\n```\n\n----------------------------------------\n\nTITLE: Using intersectionBy Function with Object Arrays in TypeScript\nDESCRIPTION: This example demonstrates using intersectionBy with arrays of objects, comparing them based on their 'id' property. It shows how the function returns elements common to both arrays after applying the mapper function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [{ id: 2 }, { id: 4 }];\nconst mapper = item => item.id;\nconst result = intersectionBy(array1, array2, mapper);\n// `mapper`で変換したとき、両方の配列に含まれる要素からなる [{ id: 2 }] 値が返されます。\n```\n\n----------------------------------------\n\nTITLE: Using stubArray Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the stubArray function. When called, it returns an empty array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubArray(); // Returns []\n```\n\n----------------------------------------\n\nTITLE: Practical 'has' Function Demo\nDESCRIPTION: A simple demonstration of using the 'has' function to check if a nested path exists in an object, using dot notation to access a deeply nested property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/has.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { has } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 3 } } };\n\nconsole.log(has(obj, 'a.b.c'));\n```\n\n----------------------------------------\n\nTITLE: Using isArrayLike Function with Various Input Types\nDESCRIPTION: This example demonstrates how to use the isArrayLike function with different types of inputs, including arrays, strings, objects, and null/undefined values. It shows the expected boolean output for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArrayLike.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isArrayLike } from 'es-toolkit/compat';\n\nconsole.log(isArrayLike([1, 2, 3])); // true\nconsole.log(isArrayLike('abc')); // true\nconsole.log(isArrayLike({ 0: 'a', length: 1 })); // true\nconsole.log(isArrayLike({})); // false\nconsole.log(isArrayLike(null)); // false\nconsole.log(isArrayLike(undefined)); // false\n```\n\n----------------------------------------\n\nTITLE: Using the Join Function with Custom Separator\nDESCRIPTION: Demonstration of using the join function to combine array elements with a custom separator. The example joins an array of strings with a tilde character as the separator.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/join.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = [\"a\",\"b\",\"c\"];\nconst result = join(arr, \"~\");\nconsole.log(result); // Output: \"a~b~c\"\n```\n\n----------------------------------------\n\nTITLE: StartCase Demo Implementation\nDESCRIPTION: Simple demonstration of the startCase function usage with a basic example.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/startCase.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startCase } from 'es-toolkit/string';\n\nconsole.log(startCase('startCase'));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Reversal in TypeScript\nDESCRIPTION: This example demonstrates the usage of the 'reverse' function. It shows how the function reverses an array in place, modifying the original array. It also illustrates behavior with empty and null arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/reverse.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst reversedArray = reverse(array);\nconsole.log(reversedArray); // [5, 4, 3, 2, 1]\nconsole.log(array); // [5, 4, 3, 2, 1] （原数组已被修改）\n\nconst emptyArray = reverse([]);\nconsole.log(emptyArray); // []\n\nconst nullArray = reverse(null);\nconsole.log(nullArray); // null\n```\n\n----------------------------------------\n\nTITLE: Using methodOf Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the methodOf function. It creates an object with a nested method, then uses methodOf to create a function that calls this method with predefined arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/methodOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = methodOf(object, 1, 2);\nconsole.log(add('a.b')); // => 3\n```\n\n----------------------------------------\n\nTITLE: Bind Function Signature in TypeScript\nDESCRIPTION: TypeScript signature for the bind function, which creates a new function with a specific 'this' binding and partially applied arguments. It also includes the placeholder symbol definition for use in partial application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/bind.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bind<F extends Function>(func: F, thisObj?: unknown, ...partialArgs: any[]): F;\n\nnamespace bind {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using dropRightWhile with Property-Value Pair - TypeScript\nDESCRIPTION: This snippet shows how to use the 'dropRightWhile' function by specifying a property-value pair, dropping elements based on matching properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst array3 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst result3 = dropRightWhile(array3, ['id', 3]);\n```\n\n----------------------------------------\n\nTITLE: Using padStart Function in JavaScript\nDESCRIPTION: These examples demonstrate how to use the padStart function in JavaScript. They show padding a string with 'a' characters, attempting to pad a string shorter than its length, and padding with an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/padStart.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npadStart('hello', 10, 'a'); // 'aaaaahello'\npadStart('hello', 3, 'a'); // 'hello'\npadStart('hello', 5, ''); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Function Signature for 'every' in TypeScript\nDESCRIPTION: TypeScript function signatures for the 'every' function, showing various overloads for both array and object operations with different matcher types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/every.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction every<T>(arr: T[]): boolean;\nfunction every<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): boolean;\nfunction every<T>(arr: T[], doesMatch: Partial<T>): boolean;\nfunction every<T>(arr: T[], doesMatch: [keyof T, unknown]): boolean;\nfunction every<T>(arr: T[], doesMatch: PropertyKey): boolean;\n\nfunction every<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (value: T[keyof T], key: keyof T, object: T) => unknown\n): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T[keyof T], unknown]): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: PropertyKey): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using assignInWith Function with Custom Value Assignment in TypeScript\nDESCRIPTION: This example demonstrates how to use the assignInWith function to merge properties from multiple source objects into a target object. It uses a custom function to determine the value to assign for each property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignInWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignInWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncNoop Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for asyncNoop that returns a Promise<void>.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/asyncNoop.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction asyncNoop(): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining isMatch Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isMatch. It takes two parameters of type unknown and returns a boolean indicating whether the target matches the source.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isMatch.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMatch(target: unknown, source: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using partialRight Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the partialRight function to create partially applied functions. It shows basic usage and usage with placeholders.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/partialRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partialRight } from 'es-toolkit/function';\n\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nconst greetFred = partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nconst sayHelloTo = partialRight(greet, 'hello', partialRight.placeholder);\nsayHelloTo('fred');\n// => 'hello fred'\n```\n\n----------------------------------------\n\nTITLE: Defining isError Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript function signature for 'isError'. It takes an unknown value as input and returns a boolean indicating if the value is an Error object. The function also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isError.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isError(value: unknown): value is Error;\n```\n\n----------------------------------------\n\nTITLE: Defining the keys Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the keys function that returns enumerable property names of an object. It accepts any value as input and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/keys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keys(object?: any): string[];\n```\n\n----------------------------------------\n\nTITLE: Using size Function with Various Data Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'size' function with different data types such as arrays, strings, objects, and empty collections. It showcases the function's behavior for various inputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/size.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = [1, 2, 3];\nconst arrSize = size(arr);\n// arrSize will be 3\n\nconst str = 'hello';\nconst strSize = size(str);\n// strSize will be 5\n\nconst obj = { a: 1, b: 2, c: 3 };\nconst objSize = size(obj);\n// objSize will be 3\n\nconst emptyArr = [];\nconst emptyArrSize = size(emptyArr);\n// emptyArrSize will be 0\n\nconst emptyStr = '';\nconst emptyStrSize = size(emptyStr);\n// emptyStrSize will be 0\n\nconst emptyObj = {};\nconst emptyObjSize = size(emptyObj);\n// emptyObjSize will be 0\n```\n\n----------------------------------------\n\nTITLE: Using toFinite Function Examples in TypeScript\nDESCRIPTION: Examples demonstrating the usage of toFinite function with various input types including numbers, strings, symbols, and special numeric values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toFinite.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoNumber(3.2); // => 3.2\ntoNumber(Number.MIN_VALUE); // => 5e-324\ntoNumber(Infinity); // => 1.7976931348623157e+308\ntoNumber('3.2'); // => 3.2\ntoNumber(Symbol.iterator); // => 0\ntoNumber(NaN); // => 0\n```\n\n----------------------------------------\n\nTITLE: Using Custom Evaluate Delimiter in Template Function\nDESCRIPTION: Shows how to use a custom 'evaluate' delimiter by providing a custom regular expression. The compiled function uses the custom delimiter to evaluate JavaScript code.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<# if (value) { #>Yes<# } else { #>No<# } #>', { evaluate: /<#([\\s\\S]+?)#>/g });\ncompiled({ value: true }); // returns 'Yes'\n```\n\n----------------------------------------\n\nTITLE: Defining Map Function Interfaces in TypeScript\nDESCRIPTION: Defines multiple function signatures for the 'map' function, supporting various input types and iteratee functions. It handles both array and object inputs, with different iteratee options like transformation functions, property names, property-value pairs, and partial objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/map.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction map<T, U>(arr: T[], iteratee: (value: T, index: number, arr: T[]) => U): U[];\nfunction map<T>(arr: T[], iteratee: Partial<T>): boolean[];\nfunction map<T>(arr: T[], iteratee: [keyof T, unknown]): boolean[];\nfunction map<T, K extends keyof T>(arr: T[], iteratee: K): Array<T[K]>;\nfunction map<T>(arr: T[], iteratee?: null | undefined): T[];\n\nfunction map<T extends object, U>(object: T, iteratee: (value: T[keyof T], key: string, object: T) => U): U[];\nfunction map<T>(object: T, iteratee: Partial<T[keyof T]>): boolean[];\nfunction map<T>(object: T, iteratee: [keyof T[keyof T], unknown]): boolean[];\nfunction map<T, K extends keyof T[keyof T]>(object: T, iteratee: K): Array<T[keyof T][K]>;\nfunction map<T extends object, U>(object: T, iteratee?: null | undefined): U[];\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for extendWith in TypeScript\nDESCRIPTION: Multiple TypeScript function signatures for the extendWith function, supporting different numbers of source objects and providing type safety. The function assigns source object properties to a target object with optional customization through a callback.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/extendWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction extendWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction extendWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction extendWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction extendWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript XOR Function Signature\nDESCRIPTION: Function signature for computing the symmetric difference (XOR) between two arrays, returning elements that exist in either array but not both.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xor.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction xor<T>(arr1: T[], arr2: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: LTE Function Usage Examples in TypeScript\nDESCRIPTION: Example usage scenarios of the lte function demonstrating number comparisons with different values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/lte.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlte(1, 3); // => true\nlte(3, 3); // => true\nlte(3, 1); // => false\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatible intersectionBy Examples\nDESCRIPTION: Examples showing Lodash-compatible usage of intersectionBy including multiple array arguments, property shorthand, and array-like objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/array/intersectionBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { intersectionBy } from 'es-toolkit/compat';\n\nconst array1 = [1.2, 2.4, 3.6];\nconst array2 = [2.5, 3.7];\nconst array3 = [2.6, 3.8];\nconst result = intersectionBy(array1, array2, array3, Math.floor);\n\nconst array1 = [{ x: 1 }, { x: 2 }, { x: 3 }];\nconst array2 = [{ x: 2 }, { x: 3 }, { x: 4 }];\nconst result = intersectionBy(array1, array2, 'x');\n\nconst arrayLike1 = { 0: 'apple', 1: 'banana', 2: 'cherry', length: 3 };\nconst arrayLike2 = { 0: 'banana', 1: 'cherry', 2: 'date', length: 3 };\nconst result = intersectionBy(arrayLike1, arrayLike2);\n```\n\n----------------------------------------\n\nTITLE: Using nth Function with Positive and Negative Indices in TypeScript\nDESCRIPTION: This example demonstrates how to use the nth function to retrieve elements from an array using both positive and negative indices. It shows that negative indices count from the end of the array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/nth.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnth([1, 2, 3], 1); // => 2\nnth([1, 2, 3], -1); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using isBlob Function Examples in TypeScript\nDESCRIPTION: Examples demonstrating the usage of isBlob function with different value types including Blob, plain object, and File objects. Shows both true and false cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBlob.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Blob();\nconst value2 = {};\nconst value3 = new File(['content'], 'example.txt', { type: 'text/plain' });\n\nconsole.log(isBlob(value1)); // true\nconsole.log(isBlob(value2)); // false\nconsole.log(isBlob(value3)); // true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating keyBy Function Usage with TypeScript\nDESCRIPTION: Provides an example of using the keyBy function with an array of objects. The example shows how to generate keys based on a property of the objects, resulting in a new object structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/keyBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [\n  { category: 'fruit', name: 'apple' },\n  { category: 'fruit', name: 'banana' },\n  { category: 'vegetable', name: 'carrot' },\n];\nconst result = keyBy(array, item => item.category);\n// result 将会是:\n// {\n//   fruit: { category: 'fruit', name: 'banana' },\n//   vegetable: { category: 'vegetable', name: 'carrot' }\n// }\n```\n\n----------------------------------------\n\nTITLE: Using sumBy Function with Object Arrays in TypeScript\nDESCRIPTION: These examples demonstrate how to use the sumBy function with an array of objects. The first example sums the 'a' property of each object, while the second shows the function's behavior with an empty array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/sumBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsumBy([{ a: 1 }, { a: 2 }, { a: 3 }], x => x.a); // Returns: 6\nsumBy([], x => x.a); // Returns: 0\n```\n\n----------------------------------------\n\nTITLE: Using findLast with Objects in TypeScript\nDESCRIPTION: Examples of using findLast function with objects, demonstrating different matching methods: predicate function, partial value, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findLast.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { find } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = find(obj, item => item > 2);\nconsole.log(result); // 3\n\n// Using a partial value\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = find(obj, { name: 'Bob' });\nconsole.log(result); // { id: 2, name: 'Bob' }\n\n// Using a property-value pair\nconst items = { alice: { id: 1, name: 'Alice' }, bob: { id: 2, name: 'Bob' } };\nconst result = find(items, ['name', 'Alice']);\nconsole.log(result); // { id: 1, name: 'Alice' }\n\n// Using a property name\nconst obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nconst result = find(obj, 'name');\nconsole.log(result); // { id: 2, name: 'Bob' }\n```\n\n----------------------------------------\n\nTITLE: Using assignInWith with a Custom Assignment Function\nDESCRIPTION: Example usage of the assignInWith function that demonstrates merging properties from multiple source objects into a target object with a custom function to determine the final assigned values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignInWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignInWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Function Signatures for rangeRight\nDESCRIPTION: Type definitions showing the three possible function signatures for rangeRight, supporting different parameter combinations for generating number ranges.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/rangeRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rangeRight(end: number): number[];\nfunction rangeRight(start: number, end: number): number[];\nfunction rangeRight(start: number, end: number, step: number): number[];\n```\n\n----------------------------------------\n\nTITLE: Defining the 'at' function signature in TypeScript\nDESCRIPTION: This code snippet presents the TypeScript signature for the 'at' function. It takes an array `arr` of type `T[]` and an array of numbers `indices` as input. It returns a new array of type `T[]` containing the elements from `arr` at the positions specified by `indices`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/at.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction at<T>(arr: T[], indices: number[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining Property Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the 'property' function. It takes a path parameter and returns a function that accepts an object and returns the value at the specified path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/property.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction property(path: PropertyKey | readonly PropertyKey[]): (object: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: Using padEnd Function in JavaScript\nDESCRIPTION: These examples demonstrate how to use the padEnd function with different inputs. It shows padding a string to a longer length, attempting to pad to a shorter length, and padding with an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/padEnd.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npadEnd('hello', 10, 'a'); // 'helloaaaaa'\npadEnd('hello', 3, 'a'); // 'hello'\npadEnd('hello', 5, ''); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Using uniqueId Function Examples in TypeScript\nDESCRIPTION: Example usage of the uniqueId function demonstrating both prefixed and non-prefixed unique identifier generation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/uniqueId.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuniqueId('contact_'); // => 'contact_104'\nuniqueId(); // => '105'\n```\n\n----------------------------------------\n\nTITLE: Sampling Function in TypeScript\nDESCRIPTION: This function, defined using TypeScript generics, takes an array of any type and returns a single randomly selected element from that array. It is useful for scenarios where a random choice is required from a set of values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/sample.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sample<T>(arr: T[]): T;\n```\n\n----------------------------------------\n\nTITLE: Using isBoolean Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isBoolean function with different types of values. It shows the function returning true for a boolean value and false for non-boolean values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBoolean.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = true;\nconst value2 = 0;\nconst value3 = 'abc';\n\nconsole.log(isBoolean(value1)); // true\nconsole.log(isBoolean(value2)); // false\nconsole.log(isBoolean(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Using isObject Function with Various Value Types in TypeScript\nDESCRIPTION: This example demonstrates how to use the isObject function with different types of values, including an empty object, an array, a function, and null. It shows the expected boolean results for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = {};\nconst value2 = [1, 2, 3];\nconst value3 = () => {};\nconst value4 = null;\n\nconsole.log(isObject(value1)); // true\nconsole.log(isObject(value2)); // true\nconsole.log(isObject(value3)); // true\nconsole.log(isObject(value4)); // false\n```\n\n----------------------------------------\n\nTITLE: Using indexOf Function with Regular Values and NaN\nDESCRIPTION: Example demonstrating how to use the indexOf function to find both regular values and NaN in an array. It shows the function returning the correct index for number 3 and for NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/indexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, NaN];\nindexOf(array, 3); // => 2\nindexOf(array, NaN); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using toPath Function with Various Input Examples in TypeScript\nDESCRIPTION: This code block demonstrates various examples of using the toPath function with different input strings, showing how it handles different path formats and special cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toPath.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoPath('a.b.c'); // Returns ['a', 'b', 'c']\ntoPath('a[b][c]'); // Returns ['a', 'b', 'c']\ntoPath('.a.b.c'); // Returns ['', 'a', 'b', 'c']\ntoPath('a[\"b.c\"].d'); // Returns ['a', 'b.c', 'd']\ntoPath(''); // Returns []\ntoPath('.a[b].c.d[e][\"f.g\"].h'); // Returns ['', 'a', 'b', 'c', 'd', 'e', 'f.g', 'h']\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for Object Inversion\nDESCRIPTION: Type definition for a function that swaps object keys and values. Accepts generic types K and V constrained to string, number, or symbol. Returns a new object with inverted key-value pairs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/invert.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invert<K extends string | number | symbol, V extends string | number | symbol>(\n  obj: Record<K, V>\n): { [key in V]: K };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signatures for assign Method\nDESCRIPTION: Multiple function signature overloads for the assign method, supporting different numbers of source objects with appropriate type inference for object merging.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assign.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assign<O, S>(object: O, source: S): O & S;\nfunction assign<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction assign<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction assign<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): O & S1 & S2 & S3 & S4;\nfunction assign(object: any, ...sources: any[]): any;\nfunction assign(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining MemoizeCache Interface\nDESCRIPTION: Defines the contract for a custom cache implementation with required methods for managing cached values\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/memoize.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MemoizeCache<K, V> {\n  set(key: K, value: V): void;\n  get(key: K): V | undefined;\n  has(key: K): boolean;\n  delete(key: K): boolean | void;\n  clear(): void;\n  size: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Clamp Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the function signatures for the clamp function. It defines two overloads: one that takes a value and a maximum, and another that takes a value, minimum, and maximum.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/clamp.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction clamp(value: number, maximum: number): number;\nfunction clamp(value: number, minimum: number, maximum: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using toFinite Function with Various Inputs in TypeScript\nDESCRIPTION: This example demonstrates how to use the toFinite function with different types of inputs, including numbers, strings, symbols, and special numeric values like Infinity and NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/toFinite.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoNumber(3.2); // => 3.2\ntoNumber(Number.MIN_VALUE); // => 5e-324\ntoNumber(Infinity); // => 1.7976931348623157e+308\ntoNumber('3.2'); // => 3.2\ntoNumber(Symbol.iterator); // => 0\ntoNumber(NaN); // => 0\n```\n\n----------------------------------------\n\nTITLE: Defining isSubsetWith TypeScript Function\nDESCRIPTION: A generic TypeScript function that checks if one array is a subset of another using a custom comparison function. Allows flexible element comparison across different array types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubsetWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSubsetWith<T>(superset: T[], subset: T[], areItemsEqual: (x: T, y: T) => boolean): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Words Function with Unicode Characters in TypeScript\nDESCRIPTION: This example shows how the 'words' function handles a string with camel case, uppercase letters, and Unicode characters. It splits the string into separate words and emojis.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/words.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwords('camelCaseHTTPRequest🚀');\n// => ['camel', 'Case', 'HTTP', 'Request', '🚀']\n```\n\n----------------------------------------\n\nTITLE: mapValues Example Usage\nDESCRIPTION: Demonstrates how to use the `mapValues` function. An object `obj` is defined with number values. The `mapValues` function is called with `obj` and a function that doubles each value.  The result is a new object with the doubled values, which is then printed to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mapValues.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2 };\nconst result = mapValues(obj, value => value * 2);\nconsole.log(result); // { a: 2, b: 4 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic FindKey Function in TypeScript\nDESCRIPTION: Defines a function to find the first key in an object that satisfies a given predicate function. It takes an object and a predicate function as parameters, returning the key of the first matching element or undefined if no match is found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/object/findKey.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findKey<T extends Record<any, any>>(\n  obj: T,\n  predicate: (value: T[keyof T], key: keyof T, obj: T) => boolean\n): keyof T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using endsWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the endsWith function imported from es-toolkit/compat. It shows various use cases with different input strings and position parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/endsWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { endsWith } from 'es-toolkit/compat';\n\nendsWith('fooBar', 'foo'); // returns false\nendsWith('fooBar', 'Bar'); // returns true\nendsWith('fooBar', 'abcdef'); // returns false\nendsWith('fooBar', 'foo', 3); // returns true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of Defaults Function in TypeScript\nDESCRIPTION: This snippet provides examples of how to use the 'defaults' function with various input scenarios, showing how default values are applied to objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/defaults.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaults({ a: 1 }, { a: 2, b: 2 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: 1, b: 2 }, { b: 3 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: null }, { a: 1 }); // { a: null }\ndefaults({ a: undefined }, { a: 1 }); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining flattenDepth Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the flattenDepth function. It specifies the input parameters and return type, including generic types for array elements and depth.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/flattenDepth.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flattenDepth<T, D extends number = 1>(value: T[], depth: D): Array<FlatArray<T[], D>> | [];\n```\n\n----------------------------------------\n\nTITLE: Using keysIn Function with Array in TypeScript\nDESCRIPTION: This example shows how keysIn function works with an array. It returns an array of string indices.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keysIn.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = [1, 2, 3];\nconsole.log(keysIn(arr)); // ['0', '1', '2']\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Using Mean Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'mean' function to calculate the average of an array of numbers. It creates an array of numbers and passes it to the mean function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/mean.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5];\nconst result = mean(numbers);\n// result will be 3\n```\n\n----------------------------------------\n\nTITLE: Defining the dropRightWhile Function - TypeScript\nDESCRIPTION: This snippet defines the 'dropRightWhile' function, which takes an array and a predicate function, dropping array elements from the end based on the predicate's evaluation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropRightWhile<T>(arr: T[], canContinueDropping: (item: T, index: number, arr: T[]) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Using the defaultTo Function with Various Input Types\nDESCRIPTION: Examples demonstrating how defaultTo handles different input values, showing when the original value is returned and when the default value is used instead.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/defaultTo.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultTo(null, 'default'); // returns 'default'\ndefaultTo(undefined, 42); // returns 42\ndefaultTo(NaN, 0); // returns 0\ndefaultTo('actual', 'default'); // returns 'actual'\ndefaultTo(123, 0); // returns 123\n```\n\n----------------------------------------\n\nTITLE: Returning Last Elements from an Array in TypeScript\nDESCRIPTION: The `takeRight` function retrieves the last `count` elements of an input array `arr`. It requires an array and an integer count as parameters, and returns a new array of elements. If the count is larger than the array's length, the function returns the entire array. Dependencies include a working TypeScript environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeRight<T>(arr: T[], count: number): T[];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [4, 5]\ntakeRight([1, 2, 3, 4, 5], 2);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns ['b', 'c']\ntakeRight(['a', 'b', 'c'], 2);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns [1, 2, 3]\ntakeRight([1, 2, 3], 5);\n```\n\n----------------------------------------\n\nTITLE: Using assignWith with Custom Assignment Logic in TypeScript\nDESCRIPTION: Example demonstrating how to use the assignWith function to merge objects with custom logic. The callback function preserves existing values in the target object and only assigns source values when the target property is undefined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using differenceBy with Mixed Type Arrays in TypeScript\nDESCRIPTION: This example shows how to use the differenceBy function with arrays of different types. It compares an array of objects with an array of numbers using a custom mapper function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/differenceBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst array2 = [2, 4];\nconst mapper = item => (typeof item === 'object' ? item.id : item);\nconst result = differenceBy(array1, array2, mapper);\n// resultは[{ id: 1 }, { id: 3 }]になります。2はマッピング後に両方の配列に存在するため、結果から除外されます。\n```\n\n----------------------------------------\n\nTITLE: Negate Function TypeScript Type Definition\nDESCRIPTION: Defines the type signature for the negate function, which takes a function returning a boolean and returns a function with an inverted result\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/negate.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction negate<F extends (...args: never[]) => boolean>(func: F): F;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signatures for flowRight\nDESCRIPTION: Type definitions showing various overloads of the flowRight function to support different numbers of input functions with strong typing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/flowRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flowRight<R>(f: () => R): () => R;\nfunction flowRight<A extends any[], R>(f1: (...args: A) => R): (...args: A) => R;\nfunction flowRight<A extends any[], R1, R2>(f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R2;\nfunction flowRight<A extends any[], R1, R2, R3>(\n  f3: (a: R2) => R3,\n  f2: (a: R1) => R2,\n  f1: (...args: A) => R1\n): (...args: A) => R3;\nfunction flowRight<A extends any[], R1, R2, R3, R4>(\n  f4: (a: R3) => R4,\n  f3: (a: R2) => R3,\n  f2: (a: R1) => R2,\n  f1: (...args: A) => R1\n): (...args: A) => R4;\nfunction flowRight<A extends any[], R1, R2, R3, R4, R5>(\n  f5: (a: R4) => R5,\n  f4: (a: R3) => R4,\n  f3: (a: R2) => R3,\n  f2: (a: R1) => R2,\n  f1: (...args: A) => R1\n): (...args: A) => R5;\nfunction flowRight(...funcs: Array<(...args: any[]) => any>): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining escapeRegExp Function Interface in TypeScript\nDESCRIPTION: Declares the interface for the escapeRegExp function, which takes a string parameter and returns a string with escaped RegExp special characters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/string/escapeRegExp.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction escapeRegExp(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Example usage of the cond function\nDESCRIPTION: Demonstrates how to use the `cond` function to create a composite function that executes different functions based on input data. It uses `matches`, `conforms`, and `stubTrue` as condition functions, and `constant` to return a fixed value. This example showcases conditional execution based on object properties and type checking.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/cond.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = cond([\n  [matches({ a: 1 }), constant('matches A')],\n  [conforms({ b: isNumber }), constant('matches B')],\n  [stubTrue, constant('no match')],\n]);\n\nfunc({ a: 1, b: 2 });\n// => 'matches A'\n\nfunc({ a: 0, b: 1 });\n// => 'matches B'\n\nfunc({ a: '1', b: '2' });\n// => 'no match'\n```\n\n----------------------------------------\n\nTITLE: Using defer Function to Delay Execution in TypeScript\nDESCRIPTION: Example demonstrating how to use the defer function to delay the execution of a console.log statement until after the current call stack has cleared. The function accepts a callback and parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/defer.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defer } from 'es-toolkit/compat';\n\ndefer(text => {\n  console.log(text);\n}, 'deferred');\n// => 在当前调用栈已清空后打印 'deferred'。\n```\n\n----------------------------------------\n\nTITLE: Examples of using toNumber in TypeScript\nDESCRIPTION: This snippet provides examples demonstrating how to use the 'toNumber' function with various inputs, showcasing its expected outputs and behavior when processing different value types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/toNumber.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoNumber(3.2); // => 3.2\ntoNumber(Number.MIN_VALUE); // => 5e-324\ntoNumber(Infinity); // => Infinity\ntoNumber('3.2'); // => 3.2\ntoNumber(Symbol.iterator); // => NaN\ntoNumber(NaN); // => NaN\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of upperFirst Function\nDESCRIPTION: Demonstrates various use cases of the upperFirst function with different input strings, showing how it handles lowercase, mixed case, and uppercase strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/upperFirst.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { upperFirst } from 'es-toolkit/string';\n\nupperFirst('fred'); // returns 'Fred'\nupperFirst('Fred'); // returns 'Fred'\nupperFirst('FRED'); // returns 'FRED'\n```\n\n----------------------------------------\n\nTITLE: Using isMap Function with Different Types in TypeScript\nDESCRIPTION: This example demonstrates how to use the isMap function with different types of values. It shows that the function correctly identifies a Map instance and returns false for other types like Set and WeakMap.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Map();\nconst value2 = new Set();\nconst value3 = new WeakMap();\n\nconsole.log(isMap(value1)); // true\nconsole.log(isMap(value2)); // false\nconsole.log(isMap(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Deep Property Omission Example\nDESCRIPTION: Example demonstrating how to use the Lodash-compatible omit function from es-toolkit/compat to remove nested properties using dot notation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/omit.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { omit } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 1 } }, d: { e: 2 }, f: { g: 3 }, 'f.g': 4 };\nconst result = omit(obj, ['a.b.c', 'f.g']);\n// result will be { a: { b: {} }, d: { e: 2 }, f: { g: 3 } }\n```\n\n----------------------------------------\n\nTITLE: Median Function Usage Examples - TypeScript\nDESCRIPTION: Examples demonstrating median calculation for arrays with odd and even number of elements. Shows how the function handles both cases by finding middle value or averaging two middle values respectively.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/median.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrayWithOddNumberOfElements = [1, 2, 3, 4, 5];\nconst result = median(arrayWithOddNumberOfElements);\n// result will be 3\n\nconst arrayWithEvenNumberOfElements = [1, 2, 3, 4];\nconst result = median(arrayWithEvenNumberOfElements);\n// result will be 2.5\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'each' Function\nDESCRIPTION: Example demonstrating how to use the 'each' function to iterate over an object's properties. The callback receives the current value, key, and the original object as parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/each.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { each } from 'es-toolkit/compat';\n\nconst object = { a: 1, b: 2 };\neach(object, (value, key, object) => console.log(value, key));\n// Output:\n// 1 'a'\n// 2 'b'\n```\n\n----------------------------------------\n\nTITLE: Using attempt Function for Successful Execution in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'attempt' function when the execution is successful. It returns a tuple with null as the first element and the function's return value as the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/util/attempt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { attempt } from 'es-toolkit/function';\n\nconst [error, result] = attempt(() => 42);\n// [null, 42]\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signatures for Extend in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the 'extend' function. It demonstrates various overloads to support different numbers of source objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/extend.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extend<O, S>(object: O, source: S): O & S;\nfunction extend<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction extend<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction extend<O, S1, S2, S3, S4>(object: O, source1: S1, source2: S2, source3: S3, source4: S4): O & S1 & S2 & S3;\nfunction extend(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Using findIndex with Different Matching Methods\nDESCRIPTION: Examples demonstrating how to use findIndex with different types of matchers: predicate function, partial object, property-value pair, and property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/findIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findIndex } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = findIndex(items, item => item > 3);\nconsole.log(result); // 3\n\n// Using a partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findIndex(items, { name: 'Bob' });\nconsole.log(result); // 1\n\n// Using a property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findIndex(items, ['name', 'Alice']);\nconsole.log(result); // 0\n\n// Using a property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = findIndex(items, 'name');\nconsole.log(result); // 0\n```\n\n----------------------------------------\n\nTITLE: Defining toFinite Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toFinite. It takes an optional parameter of unknown type and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/toFinite.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toFinite(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Defining isArray Function Signature in TypeScript\nDESCRIPTION: Defines the signature of the isArray function, which takes an optional unknown value and returns a boolean indicating if the value is an array. It also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArray(value?: unknown): value is any[];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Fill Example 4\nDESCRIPTION: Illustrates filling a portion of an array using negative indices. The elements at indices -2 and -1 are targeted, effectively modifying elements from the end of the array. `result4` holds the changed array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/fill.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst array4 = [1, 2, 3];\nconst result4 = fill(array4, '*', -2, -1);\n// result4 => [1, '*', 3]\n```\n\n----------------------------------------\n\nTITLE: Defining mergeWith Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for mergeWith. It defines the function's parameters and return type, including generic types for the target and source objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mergeWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mergeWith<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(\n  target: T,\n  source: S,\n  merge: (targetValue: any, sourceValue: any, key: string, target: T, source: S) => any\n): T & S;\n```\n\n----------------------------------------\n\nTITLE: isFile Example Usage\nDESCRIPTION: This code snippet demonstrates how to use the `isFile` function. It creates a `File` object, a `Blob` object, and a plain object, then uses `isFile` to check their types. The output shows that `isFile` correctly identifies the `File` object and returns `false` for the others.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isFile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = new File(['content'], 'example.txt', { type: 'text/plain' });\nconst blob = new Blob(['content'], { type: 'text/plain' });\nconst value = {};\n\nconsole.log(isFile(file)); // true\nconsole.log(isFile(blob)); // false\nconsole.log(isFile(value)); // false\n```\n\n----------------------------------------\n\nTITLE: Using pullAllBy with Iteratee Function and Property Name\nDESCRIPTION: Demonstrates how to use the pullAllBy function with both an iteratee function and a property name. These examples show removing objects from an array based on a specific property value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/pullAllBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a iteratee function\nconst items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];\nconst result = pullAllBy(items, [{ value: 1 }, { value: 3 }], obj => obj.value);\nconsole.log(result); // [{ value: 2 }]\n\n// Using a property name\nconst items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];\nconst result = pullAllBy(items, [{ value: 1 }, { value: 3 }], 'value');\nconsole.log(result); // [{ value: 2 }]\n```\n\n----------------------------------------\n\nTITLE: takeRightWhile Signature (Basic)\nDESCRIPTION: Defines the basic signature for the `takeRightWhile` function.  It takes an array and a predicate function as input. The predicate function determines if an element should be included in the resulting array. It returns a new array containing elements from the end of the input array that satisfy the predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeRightWhile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction takeRightWhile<T>(arr: T[], shouldContinueTaking: (item: T) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating eq Function Usage in TypeScript\nDESCRIPTION: This code block provides examples of using the 'eq' function with different types of values, showing various comparison scenarios and their expected outputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/eq.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\neq(1, 1); // true\neq(0, -0); // true\neq(NaN, NaN); // true\neq('a', Object('a')); // false\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Function with Empty and Null Arrays in TypeScript\nDESCRIPTION: These examples show how the reverse function handles edge cases such as empty arrays and null inputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reverse.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst emptyArray = reverse([]);\nconsole.log(emptyArray); // []\n\nconst nullArray = reverse(null);\nconsole.log(nullArray); // null\n```\n\n----------------------------------------\n\nTITLE: Using lastIndexOf Function with Regular Values and NaN\nDESCRIPTION: Example showing how to use lastIndexOf to find the index of both regular values and NaN in an array. Demonstrates the function's ability to find NaN values, which is not possible with standard Array.prototype.lastIndexOf.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, NaN, 1];\nlastIndexOf(array, 1); // => 4\nlastIndexOf(array, NaN); // => 3\n```\n\n----------------------------------------\n\nTITLE: Defining toPairs Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for toPairs, supporting different input types including objects, sets, and maps. It specifies the input and output types for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/toPairs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPairs<T>(object: Record<string | number, T>): Array<[string, T]>;\nfunction toPairs<T>(set: Set<T>): Array<[T, T]>;\nfunction toPairs<K, V>(map: Map<K, V>): Array<[K, V]>;\n```\n\n----------------------------------------\n\nTITLE: Using propertyOf with Array Notation in TypeScript\nDESCRIPTION: This example shows how to use propertyOf to create a function that retrieves a nested value from an object using an array of keys for the path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/propertyOf.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getValue = propertyOf({ a: { b: { c: 3 } } });\nconst result = getValue(['a', 'b', 'c']);\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using defer to Delay Function Execution\nDESCRIPTION: Example of using the defer function to delay logging text until after the current call stack has cleared. The function returns a timer ID that can be used for reference.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/defer.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defer } from 'es-toolkit/compat';\n\ndefer(text => {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after the current call stack has cleared.\n```\n\n----------------------------------------\n\nTITLE: Using parseInt Function with Different Inputs in JavaScript\nDESCRIPTION: Examples demonstrating how to use the parseInt function from es-toolkit/compat with various inputs and radix values. It also shows how to use it with Array.map() to convert an array of strings to integers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/parseInt.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseInt } from 'es-toolkit/compat';\n\nparseInt('08'); // => 8\nparseInt('0x20'); // => 32\n\nparseInt('08', 10); // => 8\nparseInt('0x20', 16); // => 32\n\n['6', '08', '10'].map(parseInt); // => [6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with String Path in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'property' function with a string path to create a getter function and retrieve a nested value from an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/property.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { property } from 'es-toolkit/compat';\n\nconst getObjectValue = property('a.b.c');\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using isFinite Function Examples\nDESCRIPTION: Examples demonstrating how to use the isFinite function with different types of values including finite numbers, Infinity, and strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isFinite.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = 100;\nconst value2 = Infinity;\nconst value3 = '100';\n\nconsole.log(isFinite(value1)); // true\nconsole.log(isFinite(value2)); // false\nconsole.log(isFinite(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Using unset Function with Array Path in TypeScript\nDESCRIPTION: This example shows how to use the unset function with an array of property keys to remove a nested property from an object. It demonstrates the object structure before and after the unset operation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/unset.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: { b: { c: 42 } } };\nunset(obj, ['a', 'b', 'c']); // true\nconsole.log(obj); // { a: { b: {} } }\n```\n\n----------------------------------------\n\nTITLE: Using assignWith Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the assignWith function. It assigns properties from source objects to a target object, using a custom function to determine the assigned values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assignWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining isJSONObject Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isJSONObject. It takes an unknown value as input and returns a boolean indicating whether the input is a valid JSON object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSONObject(obj: unknown): obj is Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for sortedLastIndexBy in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the sortedLastIndexBy function, showing its parameters types and return type. The function determines the appropriate index for inserting a value into a sorted array using a custom iteratee function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedLastIndexBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedLastIndexBy<T, R>(\n  array: ArrayLike<T> | null | undefined,\n  value: T,\n  iteratee: (value: T) => R,\n  retHighest?: boolean\n): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signatures for 'defaults' in TypeScript\nDESCRIPTION: This snippet shows multiple function signatures for the 'defaults' function, accommodating different numbers of source objects and ensuring type safety.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/defaults.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaults<T extends object>(object: T): NonNullable<T>;\nfunction defaults<T extends object, S extends object>(object: T, source: S): NonNullable<T & S>;\nfunction defaults<T extends object, S1 extends object, S2 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2\n): NonNullable<T & S1 & S2>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): NonNullable<T & S1 & S2 & S3>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object, S4 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): NonNullable<T & S1 & S2 & S3 & S4>;\nfunction defaults<T extends object, S extends object>(object: T, ...sources: S[]): object;\n```\n\n----------------------------------------\n\nTITLE: Defining isArrayLike Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isArrayLike. It takes an optional unknown value and returns a boolean indicating if the value is array-like, using a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArrayLike.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArrayLike(value?: unknown): value is ArrayLike<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Defining constantCase Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for constantCase, which takes a string input and returns a string in constant case format.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/constantCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constantCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Array and Object Merging Example\nDESCRIPTION: Example showing how toMerged handles merging of arrays and nested objects simultaneously.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toMerged.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: [1, 2], b: { x: 1 } };\nconst source = { a: [3], b: { y: 2 } };\nconst result = toMerged(target, source);\nconsole.log(result);\n// Output: { a: [3, 2], b: { x: 1, y: 2 } }\n```\n\n----------------------------------------\n\nTITLE: Defining xorBy Function Interface in TypeScript\nDESCRIPTION: Function signature for xorBy which takes two arrays and a mapper function to find the symmetric difference. The mapper transforms each element before comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/xorBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction xorBy<T, U>(arr1: T[], arr2: T[], mapper: (item: T) => U): T[];\n```\n\n----------------------------------------\n\nTITLE: Usage Example of escapeRegExp Function\nDESCRIPTION: Demonstrates how to import and use the escapeRegExp function to escape special RegExp characters in a URL string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/escapeRegExp.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { escapeRegExp } from 'es-toolkit/string';\n\nescapeRegExp('[es-toolkit](https://es-toolkit.slash.page/)'); // returns '\\[es-toolkit\\]\\(https://es-toolkit\\.slash\\.page/\\)'\n```\n\n----------------------------------------\n\nTITLE: dropWhile Function Overloads in TypeScript\nDESCRIPTION: This snippet presents the overloaded signatures of the dropWhile function, allowing users to drop elements based on different conditions such as a partial object, property-value pair, or property name.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropWhile.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropWhile<T>(arr: ArrayLike<T> | null | undefined, canContinueDropping: (item: T, index: number, arr: T[]) => unknown): T[];\nfunction dropWhile<T>(arr: ArrayLike<T> | null | undefined, objectToDrop: Partial<T>): T[];\nfunction dropWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: [keyof T, unknown]): T[];\nfunction dropWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Matching Maps with isMatch Function in TypeScript\nDESCRIPTION: This example illustrates how isMatch function can be used to compare Map objects. It creates two Map instances and checks if one matches the other.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isMatch.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetMap = new Map([\n  ['key1', 'value1'],\n  ['key2', 'value2'],\n]);\nconst sourceMap = new Map([['key1', 'value1']]);\nisMatch(targetMap, sourceMap); // true\n```\n\n----------------------------------------\n\nTITLE: Using Replace Function with Various Inputs in TypeScript\nDESCRIPTION: This snippet demonstrates different ways to use the replace function. It shows examples with string and RegExp patterns, as well as string and function replacements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/replace.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreplace('abcde', 'de', '123'); // 'abc123'\nreplace('abcde', /[bd]/g, '-'); // 'a-c-e'\nreplace('abcde', 'de', substring => substring.toUpperCase()); // 'abcDE'\nreplace('abcde', /[bd]/g, substring => substring.toUpperCase()); // 'aBcDe'\n```\n\n----------------------------------------\n\nTITLE: Defining the Slice Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the slice helper that creates a partial array from start up to but not including end index. This function handles ArrayLike objects and null/undefined values for compatibility with lodash.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/slice.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction slice<T>(array: T[], start?: number, end?: number): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining toPairs Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript function signatures for toPairs, handling different input types including objects, Sets, and Maps. It specifies the input and output types for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toPairs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPairs<T>(object: Record<string | number, T>): Array<[string, T]>;\nfunction toPairs<T>(set: Set<T>): Array<[T, T]>;\nfunction toPairs<K, V>(map: Map<K, V>): Array<[K, V]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the merge function. It takes two parameters of generic types extending Record<PropertyKey, any> and returns a merged type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/merge.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction merge<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(target: T, source: S): T & S;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of methodOf in TypeScript\nDESCRIPTION: Demonstrates how to use methodOf to create a method caller that can invoke nested object methods with preset arguments\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/methodOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = methodOf(object, 1, 2);\nconsole.log(add('a.b')); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in TypeScript\nDESCRIPTION: Examples demonstrating how to use the floor function from es-toolkit/compat to round down numbers with different precision levels.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/floor.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { floor } from 'es-toolkit/compat';\n\nfloor(4.006); // => 4\nfloor(0.046, 2); // => 0.04\nfloor(4060, -2); // => 4000\n```\n\n----------------------------------------\n\nTITLE: Using Escape Delimiter in Template Function\nDESCRIPTION: Demonstrates how to use the 'escape' delimiter to escape data properties in the template. The compiled function escapes HTML special characters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<%- value %>');\ncompiled({ value: '<div>' }); // returns '&lt;div&gt;'\n```\n\n----------------------------------------\n\nTITLE: Defining the forEach Function Signature in TypeScript\nDESCRIPTION: TypeScript signature for the forEach function that iterates over object properties. It takes an object and a callback function that receives the current value, key, and the original object for each property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/forEach.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forEach<T extends object>(object: T, callback: (value: T[keyof T], key: keyof T, object: T) => void): T;\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndexBy with Object Arrays Example\nDESCRIPTION: Demonstrates how to use sortedIndexBy with an array of objects, using a custom iteratee to extract a property for comparison, and with an array of strings using string length for comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndexBy } from 'es-toolkit/compat';\n\nconst objects = [{ x: 10 }, { x: 20 }, { x: 30 }];\n\n// Use an iteratee to extract the `x` property for comparison\nsortedIndexBy(objects, { x: 25 }, o => o.x);\n// Return value: 2\n// Explanation: Based on the `x` property, `{ x: 25 }` returns index 2.\n\n// Handle custom sorting logic\nconst strings = ['apple', 'banana', 'cherry'];\nsortedIndexBy(strings, 'apricot', str => str.length);\n// Return value: 3\n// Explanation: Based on the string length, 'apricot' returns index 3.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating isJSONValue Function Usage in TypeScript\nDESCRIPTION: This example demonstrates various use cases of the isJSONValue function with different input types, showing which values are considered valid JSON values and which are not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isJSONValue.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isJSONValue(null)); // true\nconsole.log(isJSONValue({ key: 'value' })); // true\nconsole.log(isJSONValue([1, 2, 3])); // true\nconsole.log(isJSONValue('Hello')); // true\nconsole.log(isJSONValue(42)); // true\nconsole.log(isJSONValue(true)); // true\nconsole.log(isJSONValue(undefined)); // false\nconsole.log(isJSONValue(() => {})); // false\n```\n\n----------------------------------------\n\nTITLE: Matching Maps with isMatch in TypeScript\nDESCRIPTION: This example shows how to use isMatch with Map objects. It returns true if the target Map contains all key-value pairs from the source Map.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isMatch.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetMap = new Map([\n  ['key1', 'value1'],\n  ['key2', 'value2'],\n]);\nconst sourceMap = new Map([['key1', 'value1']]);\nisMatch(targetMap, sourceMap); // true\n```\n\n----------------------------------------\n\nTITLE: Defining Pull Function in TypeScript\nDESCRIPTION: Declares a generic function that removes specified values from an array, modifying the original array. Accepts an array and a list of values to remove, returning the modified array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/pull.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pull<T>(arr: T[], valuesToRemove: unknown[]): T[];\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Function Interface for toPairs\nDESCRIPTION: Defines type signatures for toPairs function with overloaded implementations for different input types: objects, Sets, and Maps\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/toPairs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPairs<T>(object: Record<string | number, T>): Array<[string, T]>;\nfunction toPairs<T>(set: Set<T>): Array<[T, T]>;\nfunction toPairs<K, V>(map: Map<K, V>): Array<[K, V]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Lodash-Compatible curryRight Function in TypeScript\nDESCRIPTION: This code snippet defines a curryRight function signature that is fully compatible with lodash, including support for arity, placeholders, and multiple argument calls.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curryRight.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curryRight(\n  func: (...args: any[]) => any,\n  arity: number = func.length,\n  guard?: unknown\n): ((...args: any[]) => any) & { placeholder: typeof curryRight.placeholder };\n\nnamespace curryRight {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Repeat Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the repeat function in JavaScript. It shows two examples: repeating a string zero times (resulting in an empty string) and repeating a string twice.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/repeat.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrepeat('abc', 0); // ''\nrepeat('abc', 2); // 'abcabc'\n```\n\n----------------------------------------\n\nTITLE: Defining Array Element Removal Function in TypeScript\nDESCRIPTION: This snippet defines the interface for a 'remove' function that takes an array and a condition function as parameters. It removes elements from the array based on the condition and returns the modified array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/remove.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction remove<T>(arr: T[], shouldRemoveElement: (value: T, index: number, array: T[]) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Comparing Maps with isMatch in TypeScript\nDESCRIPTION: This example demonstrates how to use isMatch with Map objects. It shows that a target Map with additional key-value pairs still matches the source Map.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isMatch.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetMap = new Map([\n  ['key1', 'value1'],\n  ['key2', 'value2'],\n]);\nconst sourceMap = new Map([['key1', 'value1']]);\nisMatch(targetMap, sourceMap); // true\n```\n\n----------------------------------------\n\nTITLE: Example: Numeric Array Subset Check\nDESCRIPTION: Demonstrates checking a subset of numeric arrays, showing a successful subset comparison\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubset.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst superset1 = [1, 2, 3, 4, 5];\nconst subset1 = [2, 3, 4];\n\nisSubset(superset1, subset1);\n// Return true\n```\n\n----------------------------------------\n\nTITLE: Using bindKey Function with TypeScript\nDESCRIPTION: This example demonstrates how to use the bindKey function in TypeScript. It shows binding a method to an object, using partial arguments, and working with placeholders. It also illustrates how bindKey allows referencing redefined methods.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/bindKey.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bindKey } from 'es-toolkit/compat';\n\nconst object = {\n  user: 'fred',\n  greet: function (greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  },\n};\n\nlet bound = bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function (greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nbound = bindKey(object, 'greet', bindKey.placeholder, '!');\nbound('hi');\n// => 'hiya fred!'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of rearg Function in TypeScript\nDESCRIPTION: A practical example showing how to use the rearg function to rearrange the arguments of a greeting function. It demonstrates how to import the function from es-toolkit/compat and how the rearrangement of arguments changes the function's behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/rearg.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rearg } from 'es-toolkit/compat';\n\nconst greet = (greeting: string, name: string) => `${greeting}, ${name}!`;\nconst rearrangedGreet = rearg(greet, 1, 0);\nconsole.log(rearrangedGreet('World', 'Hello')); // Output: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Fill Example 2\nDESCRIPTION: Demonstrates filling an empty array with a number. An array of length 3 is created and all elements are replaced with the value 2. The modified array is assigned to `result2`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/fill.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array2 = Array(3);\nconst result2 = fill(array2, 2);\n// result2 => [2, 2, 2]\n```\n\n----------------------------------------\n\nTITLE: Defining valuesIn Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the valuesIn function. It defines three overloads to handle different input types including Record types, ArrayLike objects, and general object types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/valuesIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction valuesIn<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction valuesIn<T>(arr: ArrayLike<T>): T[];\nfunction valuesIn<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Defining flatMap Function in TypeScript\nDESCRIPTION: Defines the flatMap function that takes an array, an iteratee function, and an optional depth parameter. It maps each element using the iteratee and flattens the result to the specified depth.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/array/flatMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatMap<T, U, D extends number = 1>(arr: T[], iteratee: (item: T) => U, depth?: D): Array<FlatArray<U[], D>>;\n```\n\n----------------------------------------\n\nTITLE: Lodash-Compatible Spread Function Usage in TypeScript\nDESCRIPTION: Example of using the Lodash-compatible 'spread' function with additional 'argsIndex' parameter for specifying the position of the spread array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/spread.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/compat';\n\nfunction fn(a: unknown, b: unknown, c: unknown) {\n  return Array.from(arguments);\n}\n\nspread(fn, -1)([1, 2]); // 返回 [1, 2]\nspread(fn, NaN)([1, 2]); // 返回 [1, 2]\nspread(fn, 'a')([1, 2]); // 返回 [1, 2]\nspread(fn, 1.6)(1, [2, 3]); // 返回 [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Comparing Primitive Values with isEqual in JavaScript\nDESCRIPTION: This example demonstrates how isEqual compares primitive values such as numbers, strings, and booleans. It shows both true and false comparison results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nisEqual(1, 1); // true\nisEqual('hello', 'hello'); // true\nisEqual(true, true); // true\nisEqual(1, 2); // false\nisEqual('hello', 'world'); // false\nisEqual(true, false); // false\n```\n\n----------------------------------------\n\nTITLE: Handling Read-Only Properties with Getters\nDESCRIPTION: Shows how cloneDeep transforms getter methods into static values during the deep cloning process\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/cloneDeep.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = {\n  get value() {\n    return 3;\n  },\n};\n\nconst cloned = cloneDeep(source);\n// cloned is now { value: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining Lodash-Compatible curryRight Function in TypeScript\nDESCRIPTION: TypeScript signature for a Lodash-compatible curryRight function. This version includes additional features like arity specification, placeholder support, and multi-argument application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/curryRight.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curryRight(\n  func: (...args: any[]) => any,\n  arity: number = func.length,\n  guard?: unknown\n): ((...args: any[]) => any) & { placeholder: typeof curryRight.placeholder };\n\nnamespace curryRight {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndexBy with Object Arrays in TypeScript\nDESCRIPTION: Demonstrates using sortedIndexBy to find the correct insertion index in an array of objects and an array of strings, showing how to use custom iteratee functions to extract comparison values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndexBy } from 'es-toolkit/compat'；\n\nconst objects = [{ x: 10 }, { x: 20 }, { x: 30 }]；\n\n// 使用迭代器提取 `x` 属性进行比较\nsortedIndexBy(objects, { x: 25 }, o => o.x)；\n// 返回值：2\n// 解释： 根据 `x` 属性，`{ x: 25 }` 返回索引 2。\n\n// 处理自定义排序逻辑\nconst strings = ['apple', 'banana', 'cherry']；\nsortedIndexBy(strings, 'apricot', str => str.length)；\n// 返回值：1\n// 解释： 根据字符串长度，'apricot'返回索引 1。\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Function with Number Array in TypeScript\nDESCRIPTION: This example demonstrates how to use the reverse function with an array of numbers. It shows that the original array is modified in place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reverse.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst reversedArray = reverse(array);\nconsole.log(reversedArray); // [5, 4, 3, 2, 1]\nconsole.log(array); // [5, 4, 3, 2, 1] (The original array is modified)\n```\n\n----------------------------------------\n\nTITLE: Comparing Sets with isMatch in JavaScript\nDESCRIPTION: This example shows how isMatch works with Set objects in JavaScript. It demonstrates that a target Set with additional elements still matches the source Set.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isMatch.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetSet = new Set([1, 2, 3]);\nconst sourceSet = new Set([1, 2]);\nisMatch(targetSet, sourceSet); // true\n```\n\n----------------------------------------\n\nTITLE: Split Function TypeScript Signatures\nDESCRIPTION: Type definitions showing the three possible function signatures for the split utility. Supports basic string splitting, splitting with separator, and splitting with separator and limit.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/split.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction split(string: string): string[];\nfunction split(string: string, separator: RegExp | string): string[];\nfunction split(string: string, separator: RegExp | string, limit: number): string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Times Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the times function that takes an optional number parameter and an optional getValue function parameter, returning an array of results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/times.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction times<R = number>(n?: number, getValue?: (index: number) => R): R[];\n```\n\n----------------------------------------\n\nTITLE: Using bindKey Function with Example Object\nDESCRIPTION: Demonstrates practical usage of the bindKey function with an object containing a greet method, showing both basic binding and usage with placeholders.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/bindKey.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bindKey } from 'es-toolkit/compat';\n\nconst object = {\n  user: 'fred',\n  greet: function (greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  },\n};\n\nlet bound = bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function (greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// 使用 placeholders 绑定\nbound = bindKey(object, 'greet', bindKey.placeholder, '!');\nbound('hi');\n// => 'hiya fred!'\n```\n\n----------------------------------------\n\nTITLE: Using fromPairs Function with Array Input in TypeScript\nDESCRIPTION: This example demonstrates how to use the fromPairs function with a two-dimensional array input. It converts the array of key-value pairs into an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/fromPairs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = [\n  ['a', 1],\n  ['b', 2],\n  ['c', 3],\n];\nconst result = fromPairs(data);\n// result will be { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for flatMap Function\nDESCRIPTION: Defines the TypeScript interface for the flatMap function, which maps each element using an iteratee and flattens the result by one level. The function works with arrays and objects, accepting a custom mapping function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/flatMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatMap<T, R>(\n  collection: Array<T> | Record<string, T> | null | undefined,\n  iteratee?: (\n    value: T,\n    index: number | string,\n    collection: Array<T> | Record<string, T>\n  ) => R | Array<R> | null | undefined\n): Array<R>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clamp Function Usage in TypeScript\nDESCRIPTION: This code snippet provides examples of how to use the clamp function in different scenarios. It demonstrates clamping with a single bound and with both lower and upper bounds.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/clamp.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = clamp(10, 5); // result1 will be 5, as 10 is clamped to the bound 5\nconst result2 = clamp(10, 5, 15); // result2 will be 10, as it is within the bounds 5 and 15\nconst result3 = clamp(2, 5, 15); // result3 will be 5, as 2 is clamped to the lower bound 5\nconst result4 = clamp(20, 5, 15); // result4 will be 15, as 20 is clamped to the upper bound 15\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the usage of the `after` function in Typescript\nDESCRIPTION: This code demonstrates how to use the `after` function.  It imports the `after` function, defines a mock function `mockFn`, and creates a new function `afterFn` that executes `mockFn` only after being called 3 times. The example shows that `afterFn` called less than 3 times doesn't log anything, and on the 3rd call logs '실행됨'.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/after.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { after } from 'es-toolkit/function';\n\nconst mockFn = () => {\n  console.log('실행됨');\n};\nconst afterFn = after(3, mockFn);\n\n// 아무것도 로깅하지 않아요.\nafterFn();\n// 아무것도 로깅하지 않아요.\nafterFn();\n// '실행됨'을 로깅해요.\nafterFn();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Interface for padStart\nDESCRIPTION: Defines the function signature for padding a string with optional length and character parameters\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/padStart.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padStart(str: string, length = 0, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: Defining toDefaulted Function Signatures in TypeScript\nDESCRIPTION: This snippet shows multiple function signatures for the toDefaulted function, accommodating different numbers of source objects and ensuring type safety.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toDefaulted.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toDefaulted<T extends object>(object: T): NonNullable<T>;\nfunction toDefaulted<T extends object, S extends object>(object: T, source: S): NonNullable<T & S>;\nfunction toDefaulted<T extends object, S1 extends object, S2 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2\n): NonNullable<T & S1 & S2>;\nfunction toDefaulted<T extends object, S1 extends object, S2 extends object, S3 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): NonNullable<T & S1 & S2 & S3>;\nfunction toDefaulted<T extends object, S1 extends object, S2 extends object, S3 extends object, S4 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): NonNullable<T & S1 & S2 & S3 & S4>;\nfunction toDefaulted<T extends object, S extends object>(object: T, ...sources: S[]): object;\nfunction toDefaulted<T extends object, S extends object>(object: T, ...sources: S[]): object;\n```\n\n----------------------------------------\n\nTITLE: String Type Checking Examples\nDESCRIPTION: Example usage of isString function showing type checking with different value types including string, number, and boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isString.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = 'abc';\nconst value2 = 123;\nconst value3 = true;\n\nconsole.log(isString(value1)); // true\nconsole.log(isString(value2)); // false\nconsole.log(isString(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Add Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the add function with normal numbers and NaN values. Shows the expected return values in different scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/math/add.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = add(2, 3); // 2つの値はnumber型なので、result1は5になります。\nconst result2 = add(NaN, 5); // valueがNaNのため、result2はNaNになります。\nconst result3 = add(10, NaN); // otherがNaNのため、result3はNaNになります。\n```\n\n----------------------------------------\n\nTITLE: Using inRange Function in TypeScript\nDESCRIPTION: Demonstrates usage examples of the inRange function with different parameter combinations. It shows how to check if a value is within a range and includes an example that would throw an error due to invalid range bounds.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/inRange.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = inRange(3, 5); // result1 will be true.\nconst result2 = inRange(1, 2, 5); // result2 will be false.\nconst result3 = inRange(1, 5, 2); // If the minimum is greater or equal than the maximum, an error is thrown.\n```\n\n----------------------------------------\n\nTITLE: Intersection By Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature of the `intersectionBy` function. This function takes two arrays (`firstArr`, `secondArr`) and a mapper function as input. The mapper function transforms elements of both arrays and the function returns a new array containing the elements from the first array that have corresponding mapped values in the second array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/intersectionBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intersectionBy<T, U>(firstArr: T[], secondArr: U[], mapper: (item: T | U) => unknown): T[];\n```\n\n----------------------------------------\n\nTITLE: Function Signature for cond in TypeScript\nDESCRIPTION: The type signature for the cond function that takes an array of pairs and returns a new function. Each pair consists of a predicate function and an execution function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/cond.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cond(pairs: any[][]): (...args: any[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Using Invoke Function with Object Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'invoke' function to call a method on a nested object. It shows two ways of specifying the path: as a string and as an array of property keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/invoke.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\ninvoke(object, 'a.b', [1, 2]); // => 3\ninvoke(object, ['a', 'b'], [1, 2]); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using toDefaulted Function with Various Inputs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the toDefaulted function with different input scenarios, showing how default values are applied and how the function handles null and undefined values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toDefaulted.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoDefaulted({ a: 1 }, { a: 2, b: 2 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ntoDefaulted({ a: 1, b: 2 }, { b: 3 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ntoDefaulted({ a: null }, { a: 1 }); // { a: null }\ntoDefaulted({ a: undefined }, { a: 1 }); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Fill Example 1\nDESCRIPTION: Illustrates filling an array with a string value. It initializes an array of numbers and replaces all elements with the string 'a'. The modified array is then assigned to `result1`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/fill.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [1, 2, 3];\nconst result1 = fill(array1, 'a');\n// result1 => ['a', 'a', 'a']\n```\n\n----------------------------------------\n\nTITLE: Using isBrowser to conditionally execute code\nDESCRIPTION: This code snippet shows how to use the `isBrowser` function to conditionally execute code that depends on a browser environment. If `isBrowser()` returns `true`, it logs a message to the console and updates the content of an HTML element with the ID 'app'.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isBrowser.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (isBrowser()) {\n  console.log('이 코드는 브라우저에서 실행됩니다');\n  document.getElementById('app').innerHTML = 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signatures for min() in TypeScript\nDESCRIPTION: Defines multiple function signatures for the min() function that finds the element with the minimum value in an array. The signatures handle different cases: a non-empty array, no arguments, an optional array, or a regular array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/min.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction min<T>(items: [T, ...T[]]): T;\nfunction min(): undefined;\nfunction min<T>(items?: T[]): T | undefined;\nfunction min<T>(items: T[]): T;\n```\n\n----------------------------------------\n\nTITLE: Implementing isPrimitive Type Definition in TypeScript\nDESCRIPTION: TypeScript function signature that defines a type guard for checking primitive values. The function takes an unknown value and returns a type predicate indicating if the value is a primitive type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPrimitive.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isPrimitive(value: unknown): value is null | undefined | string | number | boolean | symbol | bigint;\n```\n\n----------------------------------------\n\nTITLE: Defining isMap Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript function signature for isMap. It takes an unknown value as input and returns a boolean indicating if the value is a Map. The return type also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMap(value: unknown): value is Map<any, any>;\n```\n\n----------------------------------------\n\nTITLE: Defining isPlainObject Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isPlainObject. It takes an unknown value as input and returns a boolean indicating whether the value is a plain object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPlainObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isPlainObject(value: unknown): value is Record<PropertyKey, any>;\n```\n\n----------------------------------------\n\nTITLE: Defining isNil Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isNil. It takes an unknown type as input and returns a boolean, serving as a type predicate for null or undefined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNil.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNil(x: unknown): x is null | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Unzip Function Signature\nDESCRIPTION: The `unzip` function takes an array of tuples (zipped) as input and returns an `Unzip<T>` type, effectively transposing the data. The input `zipped` is of type `Array<[...T]>`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unzip.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unzip<T extends unknown[]>(zipped: Array<[...T]>): Unzip<T>;\n```\n\n----------------------------------------\n\nTITLE: Filter Function Signature in TypeScript\nDESCRIPTION: Detailed type signature for the filter function showing its different overloads for handling arrays and objects with various filtering criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/filter.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction filter<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): T[];\nfunction filter<T>(arr: T[], doesMatch: Partial<T>): T[];\nfunction filter<T>(arr: T[], doesMatch: [keyof T, unknown]): T[];\nfunction filter<T>(arr: T[], doesMatch: PropertyKey): T[];\n\nfunction filter<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (value: T[keyof T], key: keyof T, object: T) => unknown\n): T[];\nfunction filter<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): T[];\nfunction filter<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T[keyof T], unknown]): T[];\nfunction filter<T extends Record<string, unknown>>(object: T, doesMatch: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Using unzipWith to Transform Array Values in TypeScript\nDESCRIPTION: Example of using the unzipWith function to combine and sum corresponding elements from a nested array, resulting in a new array with the transformed values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/unzipWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedArray = [\n  [1, 2],\n  [3, 4],\n  [5, 6],\n];\nconst result = unzipWith(nestedArray, (item, item2, item3) => item + item2 + item3);\n// [9, 12]\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight Function with Objects in TypeScript\nDESCRIPTION: This example shows how to use the reduceRight function with objects in TypeScript. It demonstrates summing the values of an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/reduceRight.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Using an object as the collection\nconst obj = { a: 1, b: 2, c: 3 };\nreduceRight(obj, (acc, value) => acc + value, 0); // => 6\n```\n\n----------------------------------------\n\nTITLE: Defining flattenObject Function Signature in TypeScript\nDESCRIPTION: Function signature showing the type definition for the flattenObject utility that takes an object and optional delimiter configuration.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/flattenObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flattenObject(object: object, { delimiter = '.' }: FlattenObjectOptions = {}): Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Defining the toNumber Function in TypeScript\nDESCRIPTION: This snippet defines the 'toNumber' function, which converts a given value into a number. It handles 'unknown' types and has specific behavior for Symbols and NaN. It is meant for use in compatibility scenarios within the 'es-toolkit/compat' module.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/toNumber.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toNumber(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Matches Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the 'matches' function, which takes a source object and returns a boolean function for comparing targets.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matches.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction matches(source: unknown): (target: unknown) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with String Path in TypeScript\nDESCRIPTION: Example of using the 'property' function with a string path to create a function that retrieves a nested object value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/property.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { property } from 'es-toolkit/compat';\n\nconst getObjectValue = property('a.b.c');\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Using 'some' Function with Objects in TypeScript\nDESCRIPTION: Examples showing how to use the 'some' function with objects in different ways: with a predicate function, partial value, property-value pair, and property name. Each example demonstrates checking different object values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/some.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { some } from 'es-toolkit/compat';\n\n// Using a predicate function\nlet obj = { a: 1, b: 2, c: 3 };\nlet result = some(object, value => value > 2);\nconsole.log(result); // true\n\n// Using a partial value\nobj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nresult = some(obj, { name: 'Bob' });\nconsole.log(result); // true\n\n// Using a property-value pair\nobj = { alice: { id: 1, name: 'Alice' }, bob: { id: 2, name: 'Bob' } };\nresult = some(obj, ['name', 'Bob']);\nconsole.log(result); // true\n\n// Using a property name\nobj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };\nresult = some(obj, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: Defining keyBy Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for keyBy, which takes an array and a key generation function, returning a record object. The function is generic, allowing for flexible types for both the array elements and generated keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/keyBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keyBy<T, K extends PropertyKey>(arr: T[], getKeyFromItem: (item: T) => K): Record<K, T>;\n```\n\n----------------------------------------\n\nTITLE: Using the max Function with Different Array Types\nDESCRIPTION: Examples demonstrating how to use the 'max' function with both numeric and string arrays, showing that it works with any comparable type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/max.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmax([1, 2, 3]); // Returns: 3\nmax(['a', 'b']); // Returns: 'b'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of pullAt Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `pullAt` function from the `es-toolkit/array` module with an example array. It shows how elements are removed and the state of the original array after the operation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/pullAt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pullAt } from 'es-toolkit/array';\n\nconst numbers = [10, 20, 30, 40, 50];\nconst removed = pullAt(numbers, [1, 3, 4]);\nconsole.log(removed); // [20, 40, 50]\nconsole.log(numbers); // [10, 30]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'functions' Method in TypeScript\nDESCRIPTION: Provides an example of using the 'functions' method. It creates a Foo class with methods and demonstrates how the method returns an array of function names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/functions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.a = () => 'a';\n  this.b = () => 'b';\n}\n\nFoo.prototype.c = () => 'c';\n\nfunctions(new Foo());\n// => ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Add Function in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the add function that takes two number parameters and returns their sum as a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/add.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(value: number, other: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining eq Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the 'eq' function. It takes two optional parameters of type 'unknown' and returns a boolean value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/eq.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction eq(value?: unknown, other?: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining isEqual Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the isEqual function. It takes two parameters of unknown type and returns a boolean indicating equality.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqual.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEqual(a: unknown, b: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: cond function interface definition\nDESCRIPTION: Defines the interface for the `cond` function. The `cond` function takes an array of pairs, where each pair contains a condition function and a function to execute if the condition is true. It returns a new function that, when called, evaluates the conditions and executes the appropriate function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/cond.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cond(pairs: any[][]): (...args: any[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Using methodOf Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the methodOf function. It creates an object with a nested method, then uses methodOf to create a function that can invoke that method with pre-defined arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/methodOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = methodOf(object, 1, 2);\nconsole.log(add('a.b')); // => 3\n```\n\n----------------------------------------\n\nTITLE: File Type Validation Examples\nDESCRIPTION: Demonstrates practical usage of the isFile function with different types of values including File objects, Blobs, and plain objects, showing expected boolean return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isFile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = new File(['content'], 'example.txt', { type: 'text/plain' });\nconst blob = new Blob(['content'], { type: 'text/plain' });\nconst value = {};\n\nconsole.log(isFile(file)); // true\nconsole.log(isFile(blob)); // false\nconsole.log(isFile(value)); // false\n```\n\n----------------------------------------\n\nTITLE: Deep Path Omission with Compatibility Module\nDESCRIPTION: Shows advanced usage of the omit function from the compatibility module, enabling removal of nested object keys\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/omit.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { omit } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 1 } }, d: { e: 2 }, f: { g: 3 }, 'f.g': 4 };\nconst result = omit(obj, ['a.b.c', 'f.g']);\n// result will be { a: { b: {} }, d: { e: 2 }, f: { g: 3 } }\n```\n\n----------------------------------------\n\nTITLE: Lowercase Function Example\nDESCRIPTION: Illustrates the usage of the `lowerCase` function with several example input strings. The examples demonstrate how the function transforms different types of strings (camelCase, whitespace, hyphenated, and capitalized) into lowercase strings with space separation.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/string/lowerCase.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { lowerCase } from 'es-toolkit/string';\n\nlowerCase('camelCase'); // returns 'camel case'\nlowerCase('some whitespace'); // returns 'some whitespace'\nlowerCase('hyphen-text'); // returns 'hyphen text'\nlowerCase('HTTPRequest'); // returns 'http request'\n```\n```\n\n----------------------------------------\n\nTITLE: Defining isSafeInteger Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isSafeInteger. It takes an optional unknown value as input and returns a boolean indicating whether the value is a safe integer.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isSafeInteger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSafeInteger(value?: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: zipObjectDeep Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the zipObjectDeep function that takes arrays of property paths and values to create a deeply nested object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/zipObjectDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction zipObjectDeep<P extends PropertyKey, V>(keys: ArrayLike<P | P[]>, values: ArrayLike<V>): { [K in P]: V };\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Map to Pairs Example\nDESCRIPTION: Illustrates converting a Map to an array of key-value pairs using toPairs\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/toPairs.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\ntoPairs(map); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: Using Spread Function with Additional Parameters\nDESCRIPTION: This snippet shows how to create a new function using 'spread' with an additional parameter. It demonstrates how to call a function that takes both single and array arguments using the spread function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/spread.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst spreadAdd = spread(add, 1);\n// Calling `spreadAdd` with an array as the second argument\nconsole.log(spreadAdd(1, [2])); // Output: 3\n```\n\n----------------------------------------\n\nTITLE: Using isArguments Function Examples\nDESCRIPTION: Examples demonstrating how to use the isArguments function with different types of arguments objects and arrays, showing both strict and non-strict mode usage.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArguments.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isArguments } from 'es-toolkit/compat';\n\nconst args = (function () {\n  return arguments;\n})();\nconst strictArgs = (function () {\n  'use strict';\n  return arguments;\n})();\nconst value = [1, 2, 3];\n\nconsole.log(isArguments(args)); // true\nconsole.log(isArguments(strictArgs)); // true\nconsole.log(isArguments(value)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining the partition Function Signature in TypeScript\nDESCRIPTION: Function signature for the partition utility that splits a collection into two arrays based on a predicate. It accepts a collection and a predicate function, returning a tuple of two arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/partition.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partition<T>(\n  collection: ArrayLike<T> | Record<string, T> | null | undefined,\n  predicate?: ((value: T, index: number | string, collection: any) => unknown) | Object | Array<any> | string\n): [T[], T[]];\n```\n\n----------------------------------------\n\nTITLE: Using isPrimitive Function Examples in TypeScript\nDESCRIPTION: Comprehensive examples showing how to use the isPrimitive function with various value types. Demonstrates both primitive and non-primitive cases with expected boolean return values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPrimitive.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isPrimitive } from 'es-toolkit/predicate';\n\nisPrimitive(null); // true\nisPrimitive(undefined); // true\nisPrimitive('123'); // true\nisPrimitive(false); // true\nisPrimitive(true); // true\nisPrimitive(Symbol('a')); // true\nisPrimitive(123n); // true\nisPrimitive({}); // false\nisPrimitive(new Date()); // false\nisPrimitive(new Map()); // false\nisPrimitive(new Set()); // false\nisPrimitive([1, 2, 3]); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pascalCase Function Usage in TypeScript\nDESCRIPTION: A simple demonstration of how to use the pascalCase function from the es-toolkit/string module in a TypeScript file.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/pascalCase.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pascalCase } from 'es-toolkit/string';\n\nconsole.log(pascalCase('pascalCase'));\n```\n\n----------------------------------------\n\nTITLE: Using isObject Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isObject function from es-toolkit/compat to check various values. It shows the function returning true for objects, arrays, and functions, and false for null.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isObject } from 'es-toolkit/compat';\n\nconst value1 = {};\nconst value2 = [1, 2, 3];\nconst value3 = () => {};\nconst value4 = null;\n\nconsole.log(isObject(value1)); // true\nconsole.log(isObject(value2)); // true\nconsole.log(isObject(value3)); // true\nconsole.log(isObject(value4)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining omitBy Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature of the omitBy function. It takes an object and a predicate function as parameters, and returns a new object with properties that don't satisfy the predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/omitBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction omitBy<T extends Record<string, any>>(\n  obj: T,\n  shouldOmit: (value: T[keyof T], key: keyof T) => boolean\n): Partial<T>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Unzip Type Definition\nDESCRIPTION: Defines the type `Unzip` which uses mapped types to represent the structure of the unzipped array. It takes a tuple type `K` and maps each element to an array of that type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unzip.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Unzip<K extends unknown[]> = { [I in keyof K]: Array<K[I]> };\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'functions' Utility in TypeScript\nDESCRIPTION: Provides an example of how to use the 'functions' utility. It creates a Foo class with two function properties and one prototype method, then calls 'functions' on an instance of Foo to get an array of its function property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.a = () => 'a';\n  this.b = () => 'b';\n}\n\nFoo.prototype.c = () => 'c';\n\nfunctions(new Foo());\n// => ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Using the Slice Function with Arrays in TypeScript\nDESCRIPTION: Examples demonstrating how to use the slice function to create partial arrays. The first example slices a specific range, while the second shows how the function preserves undefined values in sparse arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/slice.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nslice([1, 2, 3], 1, 2); // => [2]\nslice(new Array(3)); // => [undefined, undefined, undefined]\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in TypeScript\nDESCRIPTION: These examples demonstrate how to use the floor function with different inputs and precision levels. It shows rounding down to the nearest integer, to two decimal places, and to the nearest hundred.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/math/floor.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfloor(4.006); // => 4\nfloor(0.046, 2); // => 0.04\nfloor(4060, -2); // => 4000\n```\n\n----------------------------------------\n\nTITLE: TypeScript JSON Value Type Guard Function Signature\nDESCRIPTION: Type guard function signature that checks if a value is a valid JSON value. Returns true for objects with string keys, arrays, strings, numbers, booleans, and null.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSONValue(value: unknown): value is Record<string, any> | any[] | string | number | boolean | null;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pullAllBy Usage with Property Name in TypeScript\nDESCRIPTION: This example illustrates how to use pullAllBy with a property name to remove elements from an array of objects based on a specific property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/pullAllBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a property name\nconst items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];\nconst result = pullAllBy(items, [{ value: 1 }, { value: 3 }], 'value');\nconsole.log(result); // [{ value: 2 }]\n```\n\n----------------------------------------\n\nTITLE: Matching Arrays with isMatch in TypeScript\nDESCRIPTION: These examples demonstrate how isMatch works with arrays. It returns true if the target array contains all elements from the source array, regardless of order or additional elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isMatch.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch([1, 2, 3], [1, 2, 3]); // true\nisMatch([1, 2, 2, 3], [2, 2]); // true\nisMatch([1, 2, 3], [2, 2]); // false\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for isArguments\nDESCRIPTION: Type definition showing the function signature for isArguments, which takes an unknown value and returns a type predicate for IArguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArguments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArguments(value: unknown): value is IArguments;\n```\n\n----------------------------------------\n\nTITLE: Attempt Function Signature Definition in TypeScript\nDESCRIPTION: TypeScript function signature for the attempt utility function, which takes a function and its arguments and returns either the function's result or an Error object if an exception occurs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/attempt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction attempt<F extends (...args: any[]) => any>(func: F, ...args: Parameters<F>): ReturnType<F> | Error;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for conformsTo in TypeScript\nDESCRIPTION: Type definition showing the function signature that accepts a target object and source object containing predicate functions, returning a boolean value indicating conformance.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/conformsTo.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction conformsTo(target: Record<PropertyKey, any>, source: Record<PropertyKey, (value: any) => boolean>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Specifying Source URL in Template Function\nDESCRIPTION: Demonstrates how to use the 'sourceURL' option to specify the source URL of the template. This can be useful for debugging and error tracking purposes.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('hello <%= user %>!', { sourceURL: 'template.js' });\n```\n\n----------------------------------------\n\nTITLE: Unary Function Usage Example in TypeScript\nDESCRIPTION: Demonstrates how the unary function wrapper limits function arguments to only the first parameter, ignoring subsequent arguments\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/unary.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unary } from 'es-toolkit/function';\n\nfunction fn(a, b, c) {\n  console.log(arguments);\n}\n\nunary(fn)(1, 2, 3); // [Arguments] { '0': 1 }\n```\n\n----------------------------------------\n\nTITLE: Uniq function signature in TypeScript\nDESCRIPTION: This is the function signature for the `uniq` function. It takes an array of type `T` as input and returns a new array of the same type `T` containing only the unique values from the input array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/uniq.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uniq<T>(arr: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for pullAllBy\nDESCRIPTION: Defines the function signature for pullAllBy with multiple overloads to handle different types of getValue parameters, including iteratee functions, property names, partial objects, and property-value pairs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/pullAllBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: (value: T) => unknown): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: Partial<T>): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: [keyof T, unknown]): T[];\nfunction pullAllBy<T>(arr: T[], valuesToRemove: ArrayLike<T>, getValue: keyof T): T[];\n```\n\n----------------------------------------\n\nTITLE: Using the Ary Function in TypeScript\nDESCRIPTION: Example demonstrating how to use the `ary` function to limit the number of arguments passed to a function. Shows calling with various argument limits.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/ary.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ary } from 'es-toolkit/function';\n\nfunction fn(a: number, b: number, c: number) {\n  return Array.from(arguments);\n}\n\nary(fn, 0)(1, 2, 3); // []\nary(fn, 1)(1, 2, 3); // [1]\nary(fn, 2)(1, 2, 3); // [1, 2]\nary(fn, 3)(1, 2, 3); // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using LTE Function in TypeScript\nDESCRIPTION: This snippet demonstrates usage examples of the 'lte' function. It shows comparisons between different numeric values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/lte.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlte(1, 3); // => true\nlte(3, 3); // => true\nlte(3, 1); // => false\n```\n\n----------------------------------------\n\nTITLE: Using defaultTo Function with Various Inputs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the defaultTo function with different types of inputs, including null, undefined, NaN, and valid values. It shows how the function handles each case and returns either the input value or the default value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/defaultTo.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultTo(null, 'default'); // returns 'default'\ndefaultTo(undefined, 42); // returns 42\ndefaultTo(NaN, 0); // returns 0\ndefaultTo('actual', 'default'); // returns 'actual'\ndefaultTo(123, 0); // returns 123\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for conforms function\nDESCRIPTION: Defines the TypeScript interface for the `conforms` function.  It takes a `source` object containing predicate functions and returns a function that accepts an object and returns a boolean based on whether the object's properties satisfy the predicates.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/predicate/conforms.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction conforms(source: Record<PropertyKey, (value: any) => boolean>): (object: Record<PropertyKey, any) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Typescript String Replace Function Interface\nDESCRIPTION: Defines the replace function with parameters for target string, pattern, and replacement strategy. Supports both static string replacements and dynamic replacement functions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/replace.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(\n  target: string,\n  pattern: string | RegExp,\n  replacement: string | ((substring: string, ...args: any[]) => string)\n): string;\n```\n\n----------------------------------------\n\nTITLE: Defining propertyOf Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for propertyOf. It takes an unknown object as input and returns a function that accepts a path (either as a PropertyKey or an array of PropertyKeys) and returns an unknown value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/propertyOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction propertyOf(object: unknown): (path: PropertyKey | PropertyKey[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for defer in TypeScript\nDESCRIPTION: The TypeScript signature for the defer function, which takes a function and optional parameters to invoke that function with after the current call stack has cleared.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/defer.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defer<F extends (...args: any[]) => any>(func: F, ...args: Parameters<F>): number;\n```\n\n----------------------------------------\n\nTITLE: Using curryRight Function in TypeScript\nDESCRIPTION: Example demonstrating how to use the curryRight function to create a curried version of a sum function. It shows step-by-step application of arguments from right to left.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/curryRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(a: number, b: number, c: number) {\n  return a + b + c;\n}\n\nconst curriedSum = curryRight(sum);\n\n// 参数 `c` 应该被赋值为 `10`。\nconst sum10 = curriedSum(10);\n\n// 参数 `b` 应该被赋值为 `15`。\nconst sum25 = sum10(15);\n\n// 参数 `a` 应该被赋值为 `5`。函数 'sum' 已经接收到了所有参数，现在将返回一个值。\nconst result = sum25(5); // 30\n```\n\n----------------------------------------\n\nTITLE: Using negate Function with TypeScript\nDESCRIPTION: This example demonstrates how to use the 'negate' function from the es-toolkit library. It shows negating both true and false returning functions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/negate.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { negate } from 'es-toolkit/function';\n\nnegate(() => true)(); // returns 'false'\nnegate(() => false)(); // returns 'true'\n```\n\n----------------------------------------\n\nTITLE: Using Spread Function with Basic Addition in TypeScript\nDESCRIPTION: Example of using the 'spread' function to create a new function that adds two numbers from an array input.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/spread.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/function';\n\nfunction add(a, b) {\n  return a + b;\n}\nconst spreadAdd = spread(add);\nconsole.log(spreadAdd([1, 2])); // 输出: 3\n```\n\n----------------------------------------\n\nTITLE: Using padStart Function in JavaScript\nDESCRIPTION: Examples demonstrating how to use the padStart function to pad strings to a specified length with different characters. Shows cases of padding with 'a', cases where the string is already long enough, and attempting to pad with an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/string/padStart.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npadStart('hello', 10, 'a'); // 'aaaaahello'\npadStart('hello', 3, 'a'); // 'hello'\npadStart('hello', 5, ''); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Defining xorBy Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the xorBy function that takes two arrays and a mapping function. It returns an array containing elements present in either array but not both, based on the mapper function's results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/xorBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction xorBy<T, U>(arr1: T[], arr2: T[], mapper: (item: T) => U): T[];\n```\n\n----------------------------------------\n\nTITLE: Using After Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'after' function from the es-toolkit library. It creates a new function that only logs 'called' after being invoked three times.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/after.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { after } from 'es-toolkit/function';\n\nconst mockFn = () => {\n  console.log('called');\n};\nconst afterFn = after(3, mockFn);\n\n// Will not log anything.\nafterFn();\n// Will not log anything.\nafterFn();\n// Will log 'called'.\nafterFn();\n```\n\n----------------------------------------\n\nTITLE: Using ForEach with an Object in TypeScript\nDESCRIPTION: Example showing how to use the forEach function to iterate through properties of an object. The callback logs each property's value and key to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/forEach.md#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { forEach } from 'es-toolkit/compat';\n\nconst object = { a: 1, b: 2 };\nforEach(object, (value, key, object) => console.log(value, key));\n// Output:\n// 1 'a'\n// 2 'b'\n```\n\n----------------------------------------\n\nTITLE: Defining invertBy Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for invertBy. It takes an object and an optional iteratee function, and returns a new object with reversed keys and values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/invertBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invertBy<K extends PropertyKey, V>(object: Record<K, V>, iteratee?: (value: V) => string): Record<string, K[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining differenceBy Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the differenceBy function. It takes two arrays of potentially different types and a mapper function, returning an array of the first type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/differenceBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction differenceBy<T, U>(firstArr: T[], secondArr: U[], mapper: (value: T | U) => unknown): T[];\n```\n\n----------------------------------------\n\nTITLE: Using escapeRegExp Function in TypeScript\nDESCRIPTION: Demonstrates how to import and use the escapeRegExp function from the es-toolkit library to escape RegExp special characters in a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/string/escapeRegExp.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { escapeRegExp } from 'es-toolkit/string';\n\nescapeRegExp('[es-toolkit](https://es-toolkit.slash.page/'); // returns '\\[es-toolkit\\]\\(https://es-toolkit\\.slash\\.page/\\)'\n```\n\n----------------------------------------\n\nTITLE: Node.js Environment Detection Usage Example\nDESCRIPTION: Example showing how to use the isNode() function to conditionally execute Node.js-specific code\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNode.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (isNode()) {\n  console.log('This is running in Node.js');\n  const fs = import('node:fs');\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signatures for reduceRight\nDESCRIPTION: Multiple TypeScript function signatures showing the various overloads of reduceRight to handle arrays, array-like objects, and object collections with or without initial values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reduceRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reduceRight<T, U>(\n  collection: T[],\n  iteratee: (accumulator: U, value: T, index: number, collection: T[]) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T>(collection: T[], iteratee: (accumulator: T, value: T, index: number, collection: T[]) => T): T;\n\nfunction reduceRight<T, U>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: U, value: T, index: number, collection: ArrayLike<T>) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: T, value: T, index: number, collection: ArrayLike<T>) => T\n): T;\n\nfunction reduceRight<T extends object, U>(\n  collection: T,\n  iteratee: (accumulator: U, value: T[keyof T], key: keyof T, collection: T) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T extends object>(\n  collection: T,\n  iteratee: (accumulator: T[keyof T], value: T[keyof T], key: keyof T, collection: T) => T[keyof T]\n): T[keyof T];\n```\n\n----------------------------------------\n\nTITLE: Using partialRight Function in TypeScript\nDESCRIPTION: Example usage of the partialRight function to create partially applied functions. It demonstrates basic usage and usage with placeholders.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/partialRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partialRight } from 'es-toolkit/function';\n\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nconst greetFred = partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nconst sayHelloTo = partialRight(greet, 'hello', partialRight.placeholder);\nsayHelloTo('fred');\n// => 'hello fred'\n```\n\n----------------------------------------\n\nTITLE: Using stubObject Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the stubObject function. When called, it returns an empty object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubObject(); // Returns {}\n```\n\n----------------------------------------\n\nTITLE: Using toLength Function with Various Inputs in TypeScript\nDESCRIPTION: This example demonstrates how to use the toLength function with different types of inputs, including numbers, strings, and null. It shows the expected output for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toLength.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoLength(3.2); // => 3\ntoLength(-1); // => 0\ntoLength(1.9); // => 1\ntoLength('42'); // => 42\ntoLength(null); // => 0\n```\n\n----------------------------------------\n\nTITLE: Using isArrayBuffer Function Examples\nDESCRIPTION: Examples demonstrating the usage of isArrayBuffer function with different value types, showing true for ArrayBuffer instances and false for other types like Array and Map.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isArrayBuffer.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new ArrayBuffer();\nconst value2 = new Array();\nconst value3 = new Map();\n\nconsole.log(isArrayBuffer(value1)); // true\nconsole.log(isArrayBuffer(value2)); // false\nconsole.log(isArrayBuffer(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of trimEnd Function\nDESCRIPTION: Demonstrates various use cases of the trimEnd function with different input strings and trailing characters to be removed.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trimEnd.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst trimmedStr1 = trimEnd('hello---', '-'); // returns 'hello'\nconst trimmedStr2 = trimEnd('123000', '0'); // returns '123'\nconst trimmedStr3 = trimEnd('abcabcabc', 'c'); // returns 'abcabcab'\nconst trimmedStr4 = trimEnd('trimmedxxx', 'x'); // returns 'trimmed'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of 'defaults' Function in TypeScript\nDESCRIPTION: This snippet provides examples of how to use the 'defaults' function with different input scenarios, showing how default values are applied.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/defaults.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefaults({ a: 1 }, { a: 2, b: 2 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: 1, b: 2 }, { b: 3 }, { c: 3 }); // { a: 1, b: 2, c: 3 }\ndefaults({ a: null }, { a: 1 }); // { a: null }\ndefaults({ a: undefined }, { a: 1 }); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining curryRight Function Signatures in TypeScript\nDESCRIPTION: TypeScript function signatures for curryRight, supporting various arities and return types. These signatures allow for type-safe currying of functions with different numbers of parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/curryRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction curryRight<R>(func: () => R): () => R;\nfunction curryRight<P, R>(func: (p: P) => R): (p: P) => R;\nfunction curryRight<P1, P2, R>(func: (p1: P1, p2: P2) => R): (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, R>(func: (p1: P1, p2: P2, p3: P3) => R): (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, P4, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4) => R\n): (p4: P4) => (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight<P1, P2, P3, P4, P5, R>(\n  func: (p1: P1, p2: P2, p3: P3, p4: P4, p5: P5) => R\n): (p5: P5) => (p4: P4) => (p3: P3) => (p2: P2) => (p1: P1) => R;\nfunction curryRight(func: (...args: any[]) => any): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Comparing Objects with isMatch in TypeScript\nDESCRIPTION: This example demonstrates how to use isMatch to compare objects. It shows that a target object with additional properties still matches the source object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isMatch.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch({ a: 1, b: 2 }, { a: 1 }); // true\n```\n\n----------------------------------------\n\nTITLE: Using flattenDepth Function with Depth 1 in TypeScript\nDESCRIPTION: This example demonstrates using the flattenDepth function to flatten an array to a depth of 1. It shows how nested arrays are handled and the resulting flattened array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/flattenDepth.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = flattenDepth([1, [2, 3], [4, [5, 6]]], 1);\n// Returns: [1, 2, 3, 4, [5, 6]]\n```\n\n----------------------------------------\n\nTITLE: Defining Attempt Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the 'attempt' function. It takes a function as an argument and returns a tuple with either the result or an error.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attempt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction attempt<T, E>(func: () => T): [null, T] | [E, null];\n```\n\n----------------------------------------\n\nTITLE: Defining the Reject Function Signature in TypeScript\nDESCRIPTION: TypeScript signatures for the 'reject' function showing its various overloads for handling different input types and matching conditions. The function supports arrays and objects with multiple matching strategies.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reject<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): T[];\nfunction reject<T>(arr: T[], doesMatch: Partial<T>): T[];\nfunction reject<T>(arr: T[], doesMatch: [keyof T, unknown]): T[];\nfunction reject<T>(arr: T[], doesMatch: PropertyKey): T[];\n\nfunction reject<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (value: T[keyof T], key: keyof T, object: T) => unknown\n): T[];\nfunction reject<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): T[];\nfunction reject<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T[keyof T], unknown]): T[];\nfunction reject<T extends Record<string, unknown>>(object: T, doesMatch: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining methodOf Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the methodOf function. It takes an object and variable arguments, and returns a function that accepts a property path and invokes the corresponding method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/methodOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction methodOf(object: object, ...args: any[]): (path: PropertyKey | PropertyKey[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining min Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the interface for the 'min' function in TypeScript. It includes multiple function signatures to handle different input scenarios, such as non-empty arrays, empty arrays, and optional array inputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/math/min.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction min<T>(items: [T, ...T[]]): T;\nfunction min(): undefined;\nfunction min<T>(items?: T[]): T | undefined;\nfunction min<T>(items: T[]): T;\n```\n\n----------------------------------------\n\nTITLE: asyncNoop Usage Example\nDESCRIPTION: Demonstrates how to use the `asyncNoop` function as a default value for a function prop in a React component. This ensures that the function prop is always a function, even if the user doesn't provide one, preventing potential errors.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/asyncNoop.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nimport { asyncNoop } from 'es-toolkit/function';\n\ninterface Props {\n  fetchData?: () => Promise<void>;\n}\n\nfunction MyComponent({ fetchData = asyncNoop }: Props) {\n  const handleFetchData = async () => {\n    // 여기서 fetchData는 undefined일 수 없어서, 자유롭게 부를 수 있어요.\n    await fetchData();\n  };\n\n  handleFetchData();\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Set to Pairs Example\nDESCRIPTION: Shows how toPairs transforms a Set into an array of value-value pairs\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/toPairs.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst set = new Set([1, 2]);\ntoPairs(set); // [[1, 1], [2, 2]]\n```\n\n----------------------------------------\n\nTITLE: Defining isJSONArray Function Signature in TypeScript\nDESCRIPTION: Type definition for the isJSONArray function that takes an unknown value and returns a type predicate indicating if it's a JSON array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSONArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSONArray(value: unknown): value is any[];\n```\n\n----------------------------------------\n\nTITLE: Using lastIndexOf with Regular Values and NaN\nDESCRIPTION: Example demonstrating how to use lastIndexOf to find the last occurrence of a regular value (1) and a NaN value in an array. Unlike Array.prototype.lastIndexOf, this implementation can also find NaN values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, NaN, 1];\nlastIndexOf(array, 1); // => 4\nlastIndexOf(array, NaN); // => 3\n```\n\n----------------------------------------\n\nTITLE: Defining isPromise Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isPromise. It takes an unknown value as input and returns a boolean indicating whether the value is a Promise. The function also serves as a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isPromise.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isPromise(value: unknown): value is Promise<any>;\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight Function with Arrays in TypeScript\nDESCRIPTION: These examples demonstrate how to use the reduceRight function with arrays in TypeScript. It shows summing array elements and checking for even numbers.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/reduceRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a reducer function\nconst array = [1, 2, 3];\nreduceRight(array, (acc, value) => acc + value, 0); // => 6\n\n// Using a reducer function with initialValue\nconst array = [1, 2, 3];\nreduceRight(array, (acc, value) => acc + value % 2 === 0, true); // => false\n```\n\n----------------------------------------\n\nTITLE: Using isRegExp Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isRegExp function with different types of values. It shows that the function correctly identifies a RegExp object and a string that looks like a RegExp.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isRegExp.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = /abc/;\nconst value2 = '/abc/';\n\nconsole.log(isRegExp(value1)); // true\nconsole.log(isRegExp(value2)); // false\n```\n\n----------------------------------------\n\nTITLE: Matching Nested Structures with Matches Function in TypeScript\nDESCRIPTION: Illustrates using the 'matches' function to create a matcher for comparing objects with nested structures.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matches.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedMatcher = matches({ a: { b: 2 } });\nnestedMatcher({ a: { b: 2, c: 3 } }); // true\nnestedMatcher({ a: { c: 3 } }); // false\n```\n\n----------------------------------------\n\nTITLE: Defining isRegExp Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript function signature for isRegExp. It takes an unknown value as input and returns a boolean indicating whether the value is a RegExp. The function also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isRegExp.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isRegExp(value: unknown): value is RegExp;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of unzipWith Function in TypeScript\nDESCRIPTION: Demonstrates how to use the unzipWith function with a nested array of numbers. The example unzips the array and applies a function that sums the values from each original column.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/unzipWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedArray = [\n  [1, 2],\n  [3, 4],\n  [5, 6],\n];\nconst result = unzipWith(nestedArray, (item, item2, item3) => item + item2 + item3);\n// [9, 12]\n```\n\n----------------------------------------\n\nTITLE: Using isSymbol Function in TypeScript\nDESCRIPTION: This example demonstrates various use cases of the isSymbol function. It shows how the function correctly identifies different types of symbols and returns false for non-symbol values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isSymbol.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isSymbol } from 'es-toolkit/predicate';\n\nisSymbol(Symbol('a')); // true\nisSymbol(Symbol.for('a')); // true\nisSymbol(Symbol.iterator); // true\n\nisSymbol(null); // false\nisSymbol(undefined); // false\nisSymbol('123'); // false\nisSymbol(false); // false\nisSymbol(123n); // false\nisSymbol({}); // false\nisSymbol([1, 2, 3]); // false\n```\n\n----------------------------------------\n\nTITLE: Matching Arrays with Matches Function in TypeScript\nDESCRIPTION: Shows how to use the 'matches' function to create a matcher for comparing arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matches.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrayMatcher = matches([1, 2, 3]);\narrayMatcher([1, 2, 3, 4]); // true\narrayMatcher([4, 5, 6]); // false\n```\n\n----------------------------------------\n\nTITLE: Escape Function Signature in TypeScript\nDESCRIPTION: Function signature showing the type definition for the escape function that takes a string parameter and returns an escaped string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/escape.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction escape(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Set Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the 'set' function, which modifies an object by setting a value at a specified path. It accepts an object, a path (as string, number, symbol, or array), and a value to set.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/set.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction set<T extends object>(\n  obj: T,\n  path: string | number | symbol | Array<string | number | symbol>,\n  value: unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Using isLength Function Examples in TypeScript\nDESCRIPTION: Examples demonstrating various use cases of the isLength function with different numeric values, showing both valid and invalid length scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isLength.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isLength } from 'es-toolkit/predicate';\n\nconst value1 = 0;\nconst value2 = 42;\nconst value3 = -1;\nconst value4 = 1.5;\nconst value5 = Number.MAX_SAFE_INTEGER;\nconst value6 = Number.MAX_SAFE_INTEGER + 1;\n\nconsole.log(isLength(value1)); // true\nconsole.log(isLength(value2)); // true\nconsole.log(isLength(value3)); // false\nconsole.log(isLength(value4)); // false\nconsole.log(isLength(value5)); // true\nconsole.log(isLength(value6)); // false\n```\n\n----------------------------------------\n\nTITLE: Using Custom Escape Delimiter in Template Function\nDESCRIPTION: Demonstrates how to use a custom 'escape' delimiter by specifying a custom regular expression. The compiled function uses the custom delimiter to escape data properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<@ value @>', { escape: /<@([\\s\\S]+?)@>/g });\ncompiled({ value: '<div>' }); // returns '&lt;div&gt;'\n```\n\n----------------------------------------\n\nTITLE: Defining has Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the 'has' function. It takes an object and a path as parameters and returns a boolean indicating whether the path exists in the object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/has.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction has(object: unknown, path: string | number | symbol | Array<string | number | symbol>): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining endsWith Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the endsWith function. It takes a string to search, a target string to match at the end, and an optional position to end the search.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/string/endsWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction endsWith(str: string, target: string, position: number = 0): boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for indexOf Function\nDESCRIPTION: The function signature for indexOf, which takes an array, search element, and optional from index. It returns the index of the first occurrence or -1 if not found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/indexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction indexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using Words Function with ASCII Characters in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'words' function with a string containing ASCII characters and punctuation. It splits the string into an array of words.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/words.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwords('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n```\n\n----------------------------------------\n\nTITLE: Example Usage of values Function\nDESCRIPTION: Demonstrates how to use the `values` function to extract property values from an object into an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/values.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvalues(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining assignIn Function Signatures in TypeScript\nDESCRIPTION: These function signatures define the assignIn function with various overloads to handle different numbers of source objects. It merges properties from source objects into the target object, including inherited properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignIn<O, S>(object: O, source: S): O & S;\nfunction assignIn<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction assignIn<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction assignIn<O, S1, S2, S3, S4>(object: O, source1: S1, source2: S2, source3: S3, source4: S4): O & S1 & S2 & S3;\nfunction assignIn(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining fromPairs Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the fromPairs function. It takes a two-dimensional array or Map as input and returns an object with the same keys and values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/fromPairs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fromPairs<T extends string | number | symbol, U>(data: Array<[T, U]> | Map<T, U>): { [key in T]: U };\n```\n\n----------------------------------------\n\nTITLE: Round Function Signature in TypeScript\nDESCRIPTION: Function declaration showing the type signature for the round utility that accepts a number value and optional precision parameter.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/round.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction round(value: number, precision?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Multiple Arguments Predicate Example\nDESCRIPTION: Example demonstrating how to use overSome with predicates that take multiple arguments for more complex condition checking.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/overSome.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = overSome(\n  (a, b) => typeof a === 'string' && typeof b === 'string',\n  (a, b) => a > 0 && b > 0\n);\n\nfunc(\"hello\", \"world\"); // true\nfunc(1, 10); // true\nfunc(0, 2); // false\n```\n\n----------------------------------------\n\nTITLE: Using flattenDepth Function with Depth 2 in TypeScript\nDESCRIPTION: This example shows how the flattenDepth function flattens an array to a depth of 2. It demonstrates that nested arrays up to the second level are flattened into a single array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/flattenDepth.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = flattenDepth([1, [2, 3], [4, [5, 6]]], 2);\n// Returns: [1, 2, 3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: isRegExp Function Interface\nDESCRIPTION: Defines the interface for the `isRegExp` function. It takes an unknown value as input and returns a boolean indicating whether the value is a RegExp object. It also acts as a type guard.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isRegExp.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction isRegExp(value: unknown): value is RegExp;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining size Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the 'size' function. It accepts an array, object, string, Map, Set, or null/undefined as input and returns a number representing the size.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/size.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction size<T>(value: T[] | object | string | Map<unknown, T> | Set<T> | null | undefined): number;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of now() Function - TypeScript\nDESCRIPTION: Examples demonstrating how to use the now() function to get current timestamp and measure elapsed time between operations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/now.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentTime = now();\nconsole.log(currentTime); // Outputs the current time in milliseconds\n\nconst startTime = now();\n// Some time-consuming operation\nconst endTime = now();\nconsole.log(`Operation took ${endTime - startTime} milliseconds`);\n```\n\n----------------------------------------\n\nTITLE: Declaring isBlob Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the type predicate pattern for checking Blob instances. Takes an unknown parameter and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBlob.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isBlob(x: unknown): x is Blob;\n```\n\n----------------------------------------\n\nTITLE: Using 'values' Function with Object in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'values' function with an object. It creates an object with key-value pairs and uses the 'values' function to extract an array of the object's values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/values.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvalues(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndex with Numeric Arrays in TypeScript\nDESCRIPTION: Demonstrates basic usage of sortedIndex with numeric arrays, handling of null arrays, and behavior with mixed data types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndex.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndex } from 'es-toolkit/compat'；\n\n// 数値配列で基本的な使い方\nsortedIndex([10, 20, 30, 50], 40)；\n// 戻り値: 3\n// 説明: 40はソート順を維持するため3を返します。\n\n// 空の配列やnull配列の処理\nsortedIndex(null, 25)；\n// 戻り値: 0\n// 説明: nullまたは未定義の配列は空の配列とみなされ、0を返します。\n\n// 基本的な比較ロジックを使う場合(sortedIndexByとの委任動作)\nsortedIndex([10, '20', 30], 25)；\n// 戻り値： 2\n// 説明: デフォルトの比較ロジックを使用し、2 を返します。\n```\n\n----------------------------------------\n\nTITLE: Defining padStart Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the padStart function. It takes a string to pad, a length parameter (defaulting to 0), and a padding character (defaulting to space).\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/padStart.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padStart(str: string, length = 0, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for escapeRegExp in TypeScript\nDESCRIPTION: Type definition showing the function signature that takes a string parameter and returns an escaped string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/escapeRegExp.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction escapeRegExp(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Using deburr Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the deburr function from the ES-Toolkit library. It shows various input strings with special characters and diacritical marks, and their corresponding deburred outputs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/deburr.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deburr } from 'es-toolkit/string';\n\ndeburr('déjà vu'); // returns 'deja vu'\ndeburr('Æthelred'); // returns 'Aethelred'\ndeburr('München'); // returns 'Munchen'\ndeburr('Crème brûlée'); // returns 'Creme brulee'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Drop Function Example\nDESCRIPTION: This example demonstrates how to use the `drop` function in TypeScript. It creates an array `array` and then calls the `drop` function with the array and the number of elements to drop (2). The result is stored in the `result` variable, which will contain the new array with the specified number of elements removed from the beginning.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/drop.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst result = drop(array, 2);\n// result will be [3, 4, 5] since the first two elements are dropped.\n```\n\n----------------------------------------\n\nTITLE: Using functionsIn with Plain Object in TypeScript\nDESCRIPTION: Shows how functionsIn works with a plain object containing function properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functionsIn.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Works with plain objects\nconst object = {\n  a: function () {\n    return 'a';\n  },\n  b: function () {\n    return 'b';\n  },\n};\n\nfunctionsIn(object);\n// => ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Defining Keys Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'keys' function. It takes an optional 'any' type parameter and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keys(object?: any): string[];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for isArrayLikeObject\nDESCRIPTION: Function signature showing the type definition for isArrayLikeObject. It accepts an optional unknown value and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArrayLikeObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArrayLikeObject(value?: unknown): value is ArrayLike<unknown> & object;\n```\n\n----------------------------------------\n\nTITLE: Defining keys Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'keys' function. It takes an optional 'any' type parameter and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/keys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keys(object?: any): string[];\n```\n\n----------------------------------------\n\nTITLE: Using pullAll Function to Remove Values from Array in TypeScript\nDESCRIPTION: This example demonstrates how to use the pullAll function to remove specific values from an array of numbers. It modifies the original array in place.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/pullAll.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst numbers = [1, 2, 3, 4, 5, 2, 4];\npullAll(numbers, [2, 4]);\nconsole.log(numbers); // [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for defaultTo\nDESCRIPTION: Function signature showing the type definitions for the defaultTo function. It accepts a value of any type and a default value, returning either the original value or the default if the original is null, undefined, or NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/defaultTo.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTo<T>(value: T | null | undefined, defaultValue?: T): T;\nfunction defaultTo(value?: unknown, defaultValue?: unknown): any;\n```\n\n----------------------------------------\n\nTITLE: Defining assignInWith Function Signatures in TypeScript\nDESCRIPTION: This code snippet defines multiple overloaded function signatures for the assignInWith function. It supports various combinations of object and source parameters, with an optional customizer function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignInWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignInWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignInWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignInWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignInWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignInWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with Array Path in TypeScript\nDESCRIPTION: This example shows how to use the 'property' function with an array path to retrieve a nested value from an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/property.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getObjectValue = property(['a', 'b', 'c']);\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit with npm, pnpm, and yarn in Node.js\nDESCRIPTION: Commands to install es-toolkit using different package managers in Node.js environment. Node.js version 18 or later is required.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install es-toolkit\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add es-toolkit\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Specifying Variable Name in Template Function\nDESCRIPTION: Demonstrates how to use the 'variable' option to specify a custom name for the data object in the template. The compiled function uses the specified variable name to access data properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<%= data.value %>', { variable: 'data' });\ncompiled({ value: 'Hello, World!' }); // returns 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Using sortedIndexBy with Object Arrays in TypeScript\nDESCRIPTION: Example demonstrating how to use sortedIndexBy with an array of objects. It shows two use cases: one that compares objects based on a specific property and another that uses a custom sorting logic based on string length.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sortedIndexBy } from 'es-toolkit/compat';\n\nconst objects = [{ x: 10 }, { x: 20 }, { x: 30 }];\n\n// 比較のため `x` 属性を抽出する iteratee を使います。\nsortedIndexBy(objects, { x: 25 }, o => o.x);\n// 戻り値： 2\n// 説明: `x` 属性を基準にして `{ x： 25 }` はインデックス 2 を返します。\n\n// ユーザー定義のソートロジック処理\nconst strings = ['apple', 'banana', 'cherry'];\nsortedIndexBy(strings, 'apricot', str => str.length);\n// 戻り値: 3\n// 説明: 文字列の長さを基準に'apricot'はインデックス3を返します。\n```\n\n----------------------------------------\n\nTITLE: isRegExp Usage Example\nDESCRIPTION: Demonstrates how to use the `isRegExp` function to check if a variable holds a RegExp object.  The example showcases both a RegExp literal and a string literal being checked, illustrating the difference in the function's return value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isRegExp.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst value1 = /abc/;\nconst value2 = '/abc/';\n\nconsole.log(isRegExp(value1)); // true\nconsole.log(isRegExp(value2)); // false\n```\n```\n\n----------------------------------------\n\nTITLE: Using Less Than Comparison Function in TypeScript\nDESCRIPTION: This snippet demonstrates examples of using the 'lt' function to compare different values. It shows cases where the function returns true and false based on the comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/lt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlt(1, 3); // true\nlt(3, 3); // false\nlt(3, 1); // false\n```\n\n----------------------------------------\n\nTITLE: Using Constant Function with Objects in TypeScript\nDESCRIPTION: Example demonstrating how to use the constant function to create a new function that consistently returns the same object reference, showing both the returned value and reference equality check.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/constant.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1 };\nconst returnsObject = constant(object);\n\nreturnsObject(); // => { a: 1 }\nreturnsObject() === object; // => true\n```\n\n----------------------------------------\n\nTITLE: Deep Path Property Picking with Compat Module\nDESCRIPTION: Shows how to use the pick function from the compat module to select properties with deep paths\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/pick.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pick } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 1 } }, d: { e: 2 }, f: { g: 3 }, 'f.g': 4 };\nconst result = pick(obj, ['a.b.c', 'f.g']);\n// 결괏값: { a: { b: { c: 1 } }, 'f.g': 4 }\n```\n\n----------------------------------------\n\nTITLE: StartsWith Function Usage Examples\nDESCRIPTION: Examples demonstrating various use cases of the startsWith function, including basic prefix checking and using the position parameter for offset searching.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/startsWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { startsWith } from 'es-toolkit/compat';\n\nstartsWith('fooBar', 'foo'); // returns true\nstartsWith('fooBar', 'Bar'); // returns false\nstartsWith('fooBar', 'abcdef'); // returns false\nstartsWith('fooBar', 'Bar', 3); // returns true\n```\n\n----------------------------------------\n\nTITLE: Defining Replace Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the replace function. It takes a target string, a pattern (string or RegExp), and a replacement (string or function) as parameters, and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/replace.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(\n  target: string,\n  pattern: string | RegExp,\n  replacement: string | ((substring: string, ...args: any[]) => string)\n): string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for kebabCase in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the kebabCase string conversion function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/kebabCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction kebabCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Function in TypeScript\nDESCRIPTION: TypeScript signature for the 'partial' function and its namespace. It creates a new function with partially applied arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/partial.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partial<F extends Function>(func: F, ...partialArgs: any[]): (...args: any[]) => ReturnType<F>;\n\nnamespace partial {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Negate Function Usage Example\nDESCRIPTION: Demonstrates how to use the negate function to invert boolean function results, showing examples of converting true to false and false to true\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/negate.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { negate } from 'es-toolkit/function';\n\nnegate(() => true)(); // returns 'false'\nnegate(() => false)(); // returns 'true'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pullAllBy Usage with Iteratee Function in TypeScript\nDESCRIPTION: This example shows how to use pullAllBy with an iteratee function to remove elements from an array of objects based on a specific property value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/pullAllBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a iteratee function\nconst items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];\nconst result = pullAllBy(items, [{ value: 1 }, { value: 3 }], obj => obj.value);\nconsole.log(result); // [{ value: 2 }]\n```\n\n----------------------------------------\n\nTITLE: Defining keysIn Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the keysIn function. It takes an optional unknown parameter and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keysIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction keysIn(object?: unknown): string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Join Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the join function. It takes an array of type T and an optional separator string, returning a joined string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/join.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction join<T>(array: T[], separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Tail Function - TypeScript\nDESCRIPTION: The 'tail' function in TypeScript is designed to return a new array containing all elements of a given array except for the first one. It has multiple overloads to handle various types of arrays, including empty arrays. The input parameter 'arr' is the source array from which the tail elements are extracted. The function will return an empty array if the input is empty or has only one element.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/tail.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tail<T>(arr: [T]): [];\nfunction tail(arr: []): [];\nfunction tail<T, U>(arr: [T, ...U[]]): U[];\nfunction tail<T>(arr: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Using functionsIn with Custom Object in TypeScript\nDESCRIPTION: Demonstrates how to use functionsIn with a custom Foo class that has both own and inherited function properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functionsIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { functionsIn } from 'es-toolkit/compat';\n\nfunction Foo() {\n  this.a = function () {\n    return 'a';\n  };\n  this.b = function () {\n    return 'b';\n  };\n}\n\nFoo.prototype.c = function () {\n  return 'c';\n};\n\n// Get function property names including inherited ones\nfunctionsIn(new Foo());\n// => ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Defining partialRight Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the partialRight function. It creates a new function that appends partially applied arguments to the arguments it receives.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/partialRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partialRight<F extends Function>(func: F, ...partialArgs: any[]): (...args: any[]) => ReturnType<F>;\n\nnamespace partialRight {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining deburr Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the deburr function. It takes a string input and returns a string with special characters replaced by their ASCII equivalents.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/deburr.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deburr(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining camelCase Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for the camelCase utility. It takes a string parameter and returns a string in camel case format.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/camelCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction camelCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining 'values' Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the 'values' function. It defines three overloads to handle different input types including objects, arrays, and null/undefined values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/values.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction values<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction values<T>(arr: ArrayLike<T>): T[];\nfunction values<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Using PropertyOf Function with Array Path\nDESCRIPTION: Example showing how to use propertyOf with an array of property keys to access a nested value in an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/propertyOf.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getValue = propertyOf({ a: { b: { c: 3 } } });\nconst result = getValue(['a', 'b', 'c']);\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Defining toNumber Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toNumber. It takes an optional unknown value as input and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toNumber.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toNumber(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Defining isNull TypeScript Type Guard Function\nDESCRIPTION: Defines a type guard function that checks if a value is strictly null, primarily used for type narrowing in TypeScript\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isNull.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNull(x: unknown): x is null;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Tail Function - TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the 'tail' function with different array inputs. It showcases how the function behaves with a normal array, a single-element array, and an empty array. The results are assigned to variables, demonstrating expected outcomes based on the input parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/tail.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst result = tail(arr1);\n// result will be [2, 3]\n\nconst arr2 = [1];\nconst result2 = tail(arr2);\n// result2 will be []\n\nconst arr3 = [];\nconst result3 = tail(arr3);\n// result3 will be []\n```\n\n----------------------------------------\n\nTITLE: Using isArray Function with Different Value Types in TypeScript\nDESCRIPTION: Demonstrates the usage of the isArray function with different types of values, including an array, a string, and a function. It shows how the function correctly identifies arrays and non-arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = [1, 2, 3];\nconst value2 = 'abc';\nconst value3 = () => {};\n\nconsole.log(isArray(value1)); // true\nconsole.log(isArray(value2)); // false\nconsole.log(isArray(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Using keysIn Function with Object in TypeScript\nDESCRIPTION: This example demonstrates using the keysIn function with a simple object. It returns an array of the object's keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keysIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2 };\nconsole.log(keysIn(obj)); // ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible FindKey Function in TypeScript\nDESCRIPTION: Demonstrates the usage of the Lodash-compatible findKey function with various search conditions, including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/object/findKey.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = { barney: { age: 36 }, fred: { age: 40 } };\n\nfindKey(users, o => o.age < 40);\n// => 'barney'\nfindKey(users, { age: 36 });\n// => 'barney'\nfindKey(users, ['age', 36]);\n// => 'barney'\n\nconst languages = { javascript: { active: false }, typescript: { active: true } };\nfindKey(users, 'active');\n// => 'typescript'\n```\n\n----------------------------------------\n\nTITLE: Defining toString Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the toString function that accepts an unknown value parameter and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toString.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toString(value?: unknown): string;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trimEnd Function Usage in TypeScript\nDESCRIPTION: A series of examples showing how to use the trimEnd function to remove trailing characters from different strings\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/string/trimEnd.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst trimmedStr1 = trimEnd('hello---', '-'); // returns 'hello'\nconst trimmedStr2 = trimEnd('123000', '0'); // returns '123'\nconst trimmedStr3 = trimEnd('abcabcabc', 'c'); // returns 'abcabcab'\nconst trimmedStr4 = trimEnd('trimmedxxx', 'x'); // returns 'trimmed'\n```\n\n----------------------------------------\n\nTITLE: Defining toPath Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toPath. It takes a string parameter 'deepKey' and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toPath.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPath(deepKey: string): string[];\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with Various Criteria in TypeScript\nDESCRIPTION: Examples demonstrating how to use the filter function with arrays using different approaches: predicate function, partial object matching, property-value pair, and property name existence checking.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/filter.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { filter } from 'es-toolkit/compat';\n\n// Using a predicate function\nfilter([1, 2, 3], n => n % 2 === 0);\n// => [2]\n\n// Using a partial object\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nfilter(arr, { name: 'Bob' });\n// => [{ id: 2, name: 'Bob' }]\n\n// Using a property-value pair\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nfilter(arr, ['name', 'Alice']);\n// => [{ id: 1, name: 'Alice' }]\n\n// Using a property name\nconst arr = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n  { id: 3, age: 28 },\n];\nfilter(arr, 'name');\n// => [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for sortedIndexBy\nDESCRIPTION: Defines the function signature for sortedIndexBy, which determines the index at which a value should be inserted in a sorted array based on a custom iteratee function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndexBy<T, R>(\n  array: ArrayLike<T> | null | undefined,\n  value: T,\n  iteratee: (value: T) => R,\n  retHighest?: boolean\n): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Mean Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'mean' function. It takes an array of numbers as input and returns a number representing the average.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/mean.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mean(nums: number[]): number;\n```\n\n----------------------------------------\n\nTITLE: LTE Function Signature in TypeScript\nDESCRIPTION: Function signature showing the type definition for the lte function that takes two unknown parameters and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/lte.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lte(value: unknown, other: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing bind Function with TypeScript Type Definitions\nDESCRIPTION: Type definition and function signature for the bind function that creates a bound function with a specified this context and partial arguments. It includes a placeholder symbol property that can be used as a placeholder for partial arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/bind.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bind<F extends Function>(func: F, thisObj?: unknown, ...partialArgs: any[]): F;\n\nnamespace bind {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for flatMap Function\nDESCRIPTION: TypeScript function signature for flatMap which accepts a collection and an iteratee function, mapping each element and flattening the result by one level.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/flatMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatMap<T, R>(\n  collection: Array<T> | Record<string, T> | null | undefined,\n  iteratee?: (\n    value: T,\n    index: number | string,\n    collection: Array<T> | Record<string, T>\n  ) => R | Array<R> | null | undefined\n): Array<R>;\n```\n\n----------------------------------------\n\nTITLE: toLower Function Signature in TypeScript\nDESCRIPTION: Function signature showing the type definition for the toLower utility that accepts any value and returns a lowercase string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/toLower.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toLower(value?: unknown): string;\n```\n\n----------------------------------------\n\nTITLE: Using keysIn Function with Prototype in TypeScript\nDESCRIPTION: This example illustrates how keysIn function handles prototype properties. It returns an array containing the prototype property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keysIn.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {}\nFoo.prototype.a = 1;\nconsole.log(keysIn(new Foo())); // ['a']\n```\n\n----------------------------------------\n\nTITLE: Defining the slice Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the slice function that creates a portion of an array from start index to end index (not inclusive). The function takes an array and optional start and end parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/slice.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction slice<T>(array: T[], start?: number, end?: number): T[];\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit in Deno\nDESCRIPTION: Example of importing and using the 'sum' function from es-toolkit in a Deno environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sum } from '@es-toolkit/es-toolkit';\n\nsum([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining unset Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the unset function. It takes an object and a path (either as a string or an array of property keys) and returns a boolean indicating whether the property was successfully deleted.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/unset.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unset(obj: unknown, path: PropertyKey | PropertyKey[]): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using isUndefined Function in TypeScript\nDESCRIPTION: Example usage of the isUndefined function with different types of values. It demonstrates how the function correctly identifies undefined values and returns false for other types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isUndefined.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = undefined;\nconst value2 = null;\nconst value3 = 42;\n\nconsole.log(isUndefined(value1)); // true\nconsole.log(isUndefined(value2)); // false\nconsole.log(isUndefined(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining the isLength function interface in TypeScript\nDESCRIPTION: This snippet defines the interface for the `isLength` function.  It accepts an unknown value and returns a boolean indicating if the value is a valid length. It also acts as a type guard, narrowing the type of the input value to `number` if it returns `true`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isLength.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isLength(value: unknown): value is number;\n```\n\n----------------------------------------\n\nTITLE: Defining Invoke Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the 'invoke' function. It takes an object, a path to a method, and an array of arguments, and returns the result of invoking the method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/invoke.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invoke(object: unknown, path: PropertyKey | PropertyKey[], args: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Implementing Lodash-Compatible FindKey Function in TypeScript\nDESCRIPTION: Defines a Lodash-compatible findKey function with multiple overloads to support various ways of specifying search conditions, including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/object/findKey.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function findKey<T extends Record<any, any>>(\n  obj: T,\n  conditionToFind: (value: T[keyof T], key: keyof T, obj: T) => boolean\n): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(obj: T, objectToFind: Partial<T[keyof T]>): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(\n  obj: T,\n  propertyToFind: [keyof T[keyof T], any]\n): keyof T | undefined;\nexport function findKey<T extends Record<any, any>>(obj: T, propertyToFind: keyof T[keyof T]): keyof T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining AbortError Class in TypeScript\nDESCRIPTION: TypeScript class definition that extends the Error class to create a custom AbortError. This class is used to represent operations that were intentionally aborted, typically when using AbortSignals with debounce or delay functions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/error/AbortError.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AbortError extends Error {\n  name = 'AbortError',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript trimEnd Function Interface\nDESCRIPTION: Defines the type signature for the trimEnd function that removes trailing characters from a string, with optional character specification\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/string/trimEnd.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction trimEnd(str: string, chars?: string | string[]): string;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Drop Function Signature\nDESCRIPTION: This snippet defines the signature of the `drop` function in TypeScript. It takes a generic array `arr` of type `T[]` and a number `itemsCount` indicating how many elements to drop, and returns a new array of type `T[]`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/drop.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction drop<T>(arr: T[], itemsCount: number): T[];\n```\n\n----------------------------------------\n\nTITLE: Using AttemptAsync Function with API Calls in TypeScript\nDESCRIPTION: Examples demonstrating various use cases of the attemptAsync function including successful API calls, error handling, and type inference with generics.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/attemptAsync.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { attemptAsync } from 'es-toolkit/function';\n\n// If the function returns a value without errors, it returns [null, function return value] tuple.\nconst [error, data] = await attemptAsync(async () => {\n  const response = await fetch('https://api.example.com/data');\n  return response.json();\n});\n// [null, response object]\n\n// If an error occurs, it returns [error thrown by the function, null] tuple.\nconst [error, data] = await attemptAsync(async () => {\n  throw new Error('Network error');\n});\n// [Error, null]\n\n// Using generic types lets you specify the type of the error and return value.\nconst [error, users] = await attemptAsync<User[], Error>(async () => {\n  const response = await fetch('https://api.example.com/users');\n  return response.json();\n});\n// `error` is inferred as `Error` type, `users` is inferred as `User[]` type.\n```\n\n----------------------------------------\n\nTITLE: sortedLastIndexBy Function Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for the sortedLastIndexBy function. It accepts a sorted array, a value to evaluate, and an iteratee function that determines how values are compared for sorting.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedLastIndexBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedLastIndexBy<T, R>(array: ArrayLike<T> | null | undefined, value: T, iteratee?: Iteratee<T, R>): number;\n```\n\n----------------------------------------\n\nTITLE: Defining After Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'after' function. It takes a number and a function as parameters, and returns a new function that only executes after the specified number of calls.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/after.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction after<F extends (...args: any[]) => any>(\n  n: number,\n  func: F\n): (...args: Parameters<F>) => ReturnType<F> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the sortedLastIndex Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for sortedLastIndex, which finds the highest index at which a value should be inserted into a sorted array to maintain its sort order. It takes an array-like structure and a value, returning the appropriate index number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedLastIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedLastIndex<T>(array: ArrayLike<T> | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Defining the dropWhile Function Signature in TypeScript\nDESCRIPTION: This snippet defines the signature of the dropWhile function, including its parameters and return type. It allows for generic type handling and caters to different input types such as arrays and predicates.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropWhile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropWhile<T>(arr: T[], canContinueDropping: (item: T, index: number, arr: T[]) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Using isLength to validate different values in TypeScript\nDESCRIPTION: This code demonstrates how to use the `isLength` function to validate different numeric values. The examples cover cases where the input is a positive integer, a negative integer, a floating-point number, `Number.MAX_SAFE_INTEGER`, and a number exceeding `Number.MAX_SAFE_INTEGER`. The output shows the boolean result of the validation for each value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isLength.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isLength } from 'es-toolkit/predicate';\n\nconst value1 = 0;\nconst value2 = 42;\nconst value3 = -1;\nconst value4 = 1.5;\nconst value5 = Number.MAX_SAFE_INTEGER;\nconst value6 = Number.MAX_SAFE_INTEGER + 1;\n\nconsole.log(isLength(value1)); // true\nconsole.log(isLength(value2)); // true\nconsole.log(isLength(value3)); // false\nconsole.log(isLength(value4)); // false\nconsole.log(isLength(value5)); // true\nconsole.log(isLength(value6)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining the Range Function Interface in TypeScript\nDESCRIPTION: This code snippet showcases the function signatures for the `range` function, demonstrating its ability to accept one, two, or three numeric arguments. It highlights the function's flexibility in generating number arrays based on varying input parameters, specifying the start, end, and step values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/range.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction range(end: number): number[];\nfunction range(start: number, end: number): number[];\nfunction range(start: number, end: number, step: number): number[];\n```\n\n----------------------------------------\n\nTITLE: Defining padStart Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the padStart function, which pads a string to a specified length by adding characters to the beginning. It takes a string, desired length (default 0), and optional padding character (default space).\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/string/padStart.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padStart(str: string, length = 0, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for flattenDepth in TypeScript\nDESCRIPTION: Type definition for the flattenDepth function which accepts an array and a depth parameter to flatten nested arrays. It returns a new array that has been flattened to the specified depth.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/flattenDepth.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flattenDepth<T, D extends number = 1>(value: T[], depth: D): Array<FlatArray<T[], D>> | [];\n```\n\n----------------------------------------\n\nTITLE: Defining methodOf Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the methodOf function. It takes an object and variable arguments, and returns a function that accepts a property path and returns any value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/methodOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction methodOf(object: object, ...args: any[]): (path: PropertyKey | PropertyKey[]) => any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for isNull Type Guard\nDESCRIPTION: Type definition for the isNull function that serves as a type predicate to check if a value is null. The function takes an unknown parameter and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNull.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNull(x: unknown): x is null;\n```\n\n----------------------------------------\n\nTITLE: Defining pascalCase Function Signature in TypeScript\nDESCRIPTION: Function signature for the pascalCase function, which takes a string parameter and returns a string in Pascal case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/pascalCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pascalCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: isJSONArray Function Definition\nDESCRIPTION: Defines the `isJSONArray` function in TypeScript. This function takes an unknown value as input and returns a boolean indicating whether the value is a valid JSON array. A valid JSON array consists of elements that are also valid JSON values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isJSONArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSONArray(value: unknown): value is any[];\n```\n\n----------------------------------------\n\nTITLE: Round Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating various use cases of the round function, including rounding to whole numbers and different decimal precisions. Also shows error case when invalid precision is provided.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/round.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = round(1.2345); // result1 will be 1\nconst result2 = round(1.2345, 2); // result2 will be 1.23\nconst result3 = round(1.2345, 3); // result3 will be 1.235\nconst result4 = round(1.2345, 3.1); // This will throw an error\n```\n\n----------------------------------------\n\nTITLE: Defining the Signature of the slice Function in TypeScript\nDESCRIPTION: TypeScript function signature for the slice function that creates a slice of an array from start up to, but not including, end. It specifies the generic type parameter and parameter types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/slice.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction slice<T>(array: T[], start?: number, end?: number): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining isBrowser Function\nDESCRIPTION: This function determines if the current environment is a browser by checking for the existence of the `window.document` property. It returns `true` if the environment is a browser and `false` otherwise.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isBrowser.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isBrowser(): boolean;\n```\n\n----------------------------------------\n\nTITLE: StartsWith Function Signature in TypeScript\nDESCRIPTION: Function signature showing the type definitions for the startsWith utility function. Takes a string to search, a target string to find, and an optional position parameter.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/startsWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction startsWith(str: string, target: string, position: number = 0): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Floor Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the floor function. It takes a number or string as input, with an optional precision parameter, and returns a rounded down number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/math/floor.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction floor(number: number | string, precision: number | string = 0): number;\n```\n\n----------------------------------------\n\nTITLE: Defining assignIn Function Signatures in TypeScript\nDESCRIPTION: Multiple function signatures for the assignIn function that supports different numbers of source objects with generic types for strong typing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assignIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignIn<O, S>(object: O, source: S): O & S;\nfunction assignIn<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction assignIn<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction assignIn<O, S1, S2, S3, S4>(object: O, source1: S1, source2: S2, source3: S3, source4: S4): O & S1 & S2 & S3;\nfunction assignIn(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining indexOf Function Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for the indexOf function, showing its parameters and return type. The function searches for an element in an array and returns its index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/indexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction indexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining toLength Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toLength. It takes an optional parameter of unknown type and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toLength.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toLength(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Usage of isMatch in TypeScript\nDESCRIPTION: This example shows how to use isMatch to compare two simple objects. It returns true if the target object contains all the properties and values present in the source object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isMatch.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch({ a: 1, b: 2 }, { a: 1 }); // true\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of flatMap Utility Function\nDESCRIPTION: TypeScript signature for the flatMap function that processes each element in a collection using an iteratee function and flattens the results by one level. It accepts a collection and iteratee function, returning a new flattened array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/flatMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flatMap<T, R>(\n  collection: Array<T> | Record<string, T> | null | undefined,\n  iteratee?: (\n    value: T,\n    index: number | string,\n    collection: Array<T> | Record<string, T>\n  ) => R | Array<R> | null | undefined\n): Array<R>;\n```\n\n----------------------------------------\n\nTITLE: Defining unionWith Function Signature in TypeScript\nDESCRIPTION: Type signature for a function that merges two arrays and returns unique values using a custom equality check\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unionWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unionWith<T>(arr1: T[], arr2: T[], areItemsEqual: (item1: T, item2: T) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Before Function Type Definition in TypeScript\nDESCRIPTION: TypeScript type signature for the 'before' function that takes a number limit and function as parameters, returning a new function with call limiting behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/before.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction before<F extends (...args: any[]) => any>(\n  n: number,\n  func: F\n): (...args: Parameters<F>) => ReturnType<F> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Random Number Generation Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for generating random numbers. It can accept either one or two parameters to define the range.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/random.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction random(maximum: number): number;\nfunction random(minimum: number, maximum: number): number;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Usage Examples for padStart\nDESCRIPTION: Demonstrates different scenarios of using the padStart function with various input parameters\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/padStart.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npadStart('hello', 10, 'a'); // 'aaaaahello'\npadStart('hello', 3, 'a'); // 'hello'\npadStart('hello', 5, ''); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Defining unzipWith Function Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for the unzipWith function that takes a 2D array and an iteratee function, returning a new array of transformed values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/unzipWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unzipWith<T, R>(target: T[][], iteratee: (...args: T[]) => R): R[];\n```\n\n----------------------------------------\n\nTITLE: Defining isElement Function Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the isElement function. It takes an optional parameter of any type and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isElement.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isElement(value?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Interpolate Delimiter in Template Function\nDESCRIPTION: Shows how to use the 'interpolate' delimiter to insert data properties into the template. The compiled function directly inserts the provided value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<%= value %>');\ncompiled({ value: 'Hello, World!' }); // returns 'Hello, World!'\n```\n\n----------------------------------------\n\nTITLE: Function Signature of nthArg in TypeScript\nDESCRIPTION: Defines the function signature for nthArg, which takes a number index and returns a function that retrieves the argument at that index from its arguments list.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/nthArg.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction nthArg(n: number): (...args: any[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Defining isObjectLike Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the isObjectLike function. It takes an optional unknown value and returns a boolean indicating if the value is object-like, also serving as a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isObjectLike.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isObjectLike(value?: unknown): value is object;\n```\n\n----------------------------------------\n\nTITLE: Defining isBoolean Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isBoolean. It takes an unknown parameter and returns a boolean type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBoolean.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isBoolean(x: unknown): x is boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than Comparison Function in TypeScript\nDESCRIPTION: This snippet demonstrates usage examples of the 'gt' function. It shows comparisons between different numeric values, illustrating when the function returns true or false.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/gt.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngt(3, 1); // true\ngt(3, 3); // false\ngt(1, 3); // false\n```\n\n----------------------------------------\n\nTITLE: sortedIndex Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the sortedIndex function that determines where a value should be inserted in a sorted array. It accepts an array-like object and a value, returning the appropriate insertion index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndex<T>(array: ArrayLike<T> | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of isSet Type Guard\nDESCRIPTION: Demonstrates how to use the isSet function to check different types of collections and verify Set instances\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isSet.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new Set();\nconst value2 = new Map();\nconst value3 = new WeakSet();\n\nconsole.log(isSet(value1)); // true\nconsole.log(isSet(value2)); // false\nconsole.log(isSet(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining snakeCase Function Signature in TypeScript\nDESCRIPTION: Function signature for the snakeCase function, which takes a string parameter and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/snakeCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction snakeCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of isWeakMap Function\nDESCRIPTION: Examples demonstrating how to use the isWeakMap function with different data structures including WeakMap, Map, and Set. Shows both positive and negative test cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isWeakMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = new WeakMap();\nconst value2 = new Map();\nconst value3 = new Set();\n\nconsole.log(isWeakMap(value1)); // true\nconsole.log(isWeakMap(value2)); // false\nconsole.log(isWeakMap(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interfaces for assignInWith Function\nDESCRIPTION: These TypeScript interfaces define the function signatures for assignInWith, supporting various combinations of source objects and an optional customizer function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assignInWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignInWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignInWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignInWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignInWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignInWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for lastIndexOf Function\nDESCRIPTION: The function signature for lastIndexOf, which searches for the last occurrence of a value in an array. It returns the index of the last occurrence or -1 if not found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lastIndexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining the parseInt Function Signature in TypeScript\nDESCRIPTION: TypeScript signature of the parseInt function showing its parameters and return type. It accepts a string to convert, an optional radix parameter, and an optional guard parameter for use as an iteratee.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/parseInt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseInt(string: string, radix?: number, guard?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Update Function Usage in TypeScript\nDESCRIPTION: Provides examples of using the 'update' function to modify object values and create new properties. It shows updating an existing nested value and creating a new nested array value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/update.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { update } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// Update a value using an updater function\nupdate(object, 'a[0].b.c', n => (n as number) * 2);\n// => { a: [{ b: { c: 6 } }] }\n\n// Create a value if the path doesn't exist\nupdate({}, 'a.b[0]', () => 'c');\n// => { a: { b: ['c'] } }\n```\n\n----------------------------------------\n\nTITLE: Using 'over' Function with Objects in TypeScript\nDESCRIPTION: This example demonstrates using the 'over' function with objects as iteratees. It checks if the provided object matches the properties specified in the iteratee objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/over.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = over([{ a: 1 }, { b: 2 }]);\nfunc({ a: 1, b: 2 });\n// => [true, false]\n```\n\n----------------------------------------\n\nTITLE: Defining the defaultTo Function Signature in TypeScript\nDESCRIPTION: Function signature for defaultTo which accepts a value and a default value, returning the default value if the input is null, undefined or NaN, otherwise returning the original value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/defaultTo.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaultTo<T>(value: T | null | undefined, defaultValue?: T): T;\nfunction defaultTo(value?: unknown, defaultValue?: unknown): any;\n```\n\n----------------------------------------\n\nTITLE: Defining padEnd Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for padEnd. It takes a string to pad, a length to pad to, and an optional character to pad with.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/padEnd.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padEnd(str: string, length = 0, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signatures for 'some' Function in TypeScript\nDESCRIPTION: TypeScript function signatures showing the various overloads for the 'some' function, including different parameter types for arrays and objects. The function checks if elements in collections match specified criteria.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/some.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction some<T>(arr: T[]): boolean;\nfunction some<T>(arr: T[], predicate: (item: T, index: number, arr: any) => unknown): boolean;\nfunction some<T>(arr: T[], predicate: [keyof T, unknown]): boolean;\nfunction some<T>(arr: T[], predicate: PropertyKey): boolean;\nfunction some<T>(arr: T[], predicate: Partial<T>): boolean;\n\nfunction some<T extends Record<string, unknown>>(object: T): boolean;\nfunction some<T extends Record<string, unknown>>(\n  object: T,\n  predicate: (value: T[keyof T], key: keyof T, object: T) => unknown\n): boolean;\nfunction some<T extends Record<string, unknown>>(object: T, predicate: Partial<T[keyof T]>): boolean;\nfunction some<T extends Record<string, unknown>>(object: T, predicate: [keyof T[keyof T], unknown]): boolean;\nfunction some<T extends Record<string, unknown>>(object: T, predicate: PropertyKey): boolean;\n```\n\n----------------------------------------\n\nTITLE: Function Signature - TypeScript Type Predicate\nDESCRIPTION: TypeScript function signature showing the type predicate capability for checking if a value is a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isNumber.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNumber(value?: unknown): value is number;\n```\n\n----------------------------------------\n\nTITLE: Defining eq Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'eq' function. It takes two optional parameters of unknown type and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/eq.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction eq(value?: unknown, other?: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining isUndefined Function in TypeScript\nDESCRIPTION: Function signature for isUndefined. It takes an unknown parameter and returns a boolean indicating if the value is undefined. This function also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isUndefined.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isUndefined(x: unknown): x is undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Bind Function Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the 'bind' function, including its parameters and return type. It also declares a namespace for the 'bind' function with a 'placeholder' symbol.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/bind.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bind<F extends Function>(func: F, thisObj?: unknown, ...partialArgs: any[]): F;\n\nnamespace bind {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining attempt Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the 'attempt' function. It takes a function as a parameter and returns a tuple with either null and the result, or an error and null.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/util/attempt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction attempt<T, E>(func: () => T): [null, T] | [E, null];\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the toUpper function that accepts an optional unknown parameter and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/toUpper.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toUpper(value?: unknown): string;\n```\n\n----------------------------------------\n\nTITLE: Using gte Function in TypeScript\nDESCRIPTION: These examples demonstrate how to use the 'gte' function to compare different values. It shows cases where the function returns true and false based on the comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/gte.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngte(3, 1); // => true\ngte(3, 3); // => true\ngte(1, 3); // => false\n```\n\n----------------------------------------\n\nTITLE: Using First Function with Various Array Types in TypeScript\nDESCRIPTION: Examples demonstrating how to use the 'first' function with different types of arrays. Shows retrieval from number arrays, empty arrays, string arrays, boolean arrays, and tuple types, highlighting the function's type safety and behavior with empty collections.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/first.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr1 = [1, 2, 3];\nconst firstElement1 = first(arr1);\n// firstElement1 will be 1\n\nconst arr2: string[] = [];\nconst firstElement2 = first(arr2);\n// firstElement2 will be undefined\n\nconst arr3 = ['a', 'b', 'c'];\nconst firstElement3 = first(arr3);\n// firstElement3 will be 'a'\n\nconst arr4 = [true, false, true];\nconst firstElement4 = first(arr4);\n// firstElement4 will be true\n\nconst arr5: [number, string, boolean] = [1, 'a', true];\nconst firstElement5 = first(arr5);\n// firstElement5 will be 1\n```\n\n----------------------------------------\n\nTITLE: Defining medianBy Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for medianBy. It takes an array of items and a getValue function as parameters, and returns a number representing the median.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/medianBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function medianBy<T>(items: T[], getValue: (element: T) => number): number;\n```\n\n----------------------------------------\n\nTITLE: Using invoke Function with Object Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the invoke function to call a method nested within an object. It shows two ways of specifying the path: as a string and as an array of property keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/invoke.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\ninvoke(object, 'a.b', [1, 2]); // => 3\ninvoke(object, ['a', 'b'], [1, 2]); // => 3\n```\n\n----------------------------------------\n\nTITLE: updateWith Example Usage\nDESCRIPTION: Demonstrates how to use the `updateWith` function to update values in an object using a customizer function. It creates custom path structures and customizes the path creation process by providing the customizer function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/updateWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateWith } from 'es-toolkit/compat';\n\nconst object = {};\n\n// 커스터마이저 함수를 사용하여 사용자 정의 경로 구조 생성하기\nupdateWith(object, '[0][1]', () => 'a', Object);\n// => { '0': { '1': 'a' } }\n\n// 경로 생성 커스터마이즈하기\nupdateWith(\n  object,\n  '[0][2]',\n  () => 'b',\n  value => {\n    if (typeof value === 'number') {\n      return [];\n    }\n  }\n);\n// => { '0': { '1': 'a', '2': 'b' } }\n```\n\n----------------------------------------\n\nTITLE: 数値配列での重複除去の例（TypeScript）\nDESCRIPTION: 数値配列から、値の差が1未満である要素を重複と見なして除去する例です。Math.absを使用して絶対差を計算し、基準値より小さい場合に重複と判断しています。\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/uniqWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuniqWith([1.2, 1.5, 2.1, 3.2, 5.7, 5.3, 7.19], (a, b) => Math.abs(a - b) < 1);\n// [1.2, 3.2, 5.7, 7.19]\n```\n\n----------------------------------------\n\nTITLE: Defining Object Creation Function with TypeScript in ES Toolkit\nDESCRIPTION: This snippet shows the TypeScript signature for the 'create' function. It creates an object inheriting from a prototype, with optional properties to be added.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/create.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create<T extends object, U extends object>(prototype: T, properties?: U): T & U;\n```\n\n----------------------------------------\n\nTITLE: Using sortedLastIndexBy with Object Properties in TypeScript\nDESCRIPTION: Example demonstrating how to use the sortedLastIndexBy function with an array of objects, comparing them based on a specific property using a destructuring iteratee function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedLastIndexBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst objects = [{ n: 4 }, { n: 5 }];\nsortedLastIndexBy(objects, { n: 4 }, ({ n }) => n);\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit with pnpm for Node.js\nDESCRIPTION: Command to install es-toolkit using pnpm package manager for Node.js environment.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Unary Function Usage Example\nDESCRIPTION: Demonstrates how to use the unary function to limit a function's arguments to one parameter, showing how additional arguments are ignored.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/unary.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unary } from 'es-toolkit/function';\n\nfunction fn(a, b, c) {\n  console.log(arguments);\n}\n\nunary(fn)(1, 2, 3); // [Arguments] { '0': 1 }\n```\n\n----------------------------------------\n\nTITLE: Using bind Function with Direct Arguments\nDESCRIPTION: Example demonstrating how to use the bind function to create a bound version of a greet function with a specified this context and partial arguments. The example shows binding a greeting parameter while providing the punctuation later.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/bind.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bind } from 'es-toolkit/compat';\n\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nconst object = { user: 'fred' };\n\nlet bound = bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nbound = bind(greet, object, bind.placeholder, '!');\nbound('hi');\n// => 'hi fred!'\n```\n\n----------------------------------------\n\nTITLE: Defining Ceil Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the ceil function that accepts a number and optional precision parameter, returning the number rounded up to the specified decimal places.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/ceil.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ceil(number: number | string, precision: number | string = 0): number;\n```\n\n----------------------------------------\n\nTITLE: Defining isJSONValue Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isJSONValue function. It takes an unknown value as input and returns a boolean indicating whether the value is a valid JSON value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isJSONValue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSONValue(value: unknown): value is Record<string, any> | any[] | string | number | boolean | null;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for intersectionBy Function\nDESCRIPTION: TypeScript function signature showing the interface for intersectionBy utility that takes two arrays and a mapper function to compute intersections.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/array/intersectionBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intersectionBy<T, U>(firstArr: T[], secondArr: U[], mapper: (item: T | U) => unknown): T[];\n```\n\n----------------------------------------\n\nTITLE: Using isNaN Function Examples\nDESCRIPTION: Examples demonstrating how to use the isNaN function with different value types, showing both true and false cases\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isNaN.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = NaN;\nconst value2 = undefined;\n\nconsole.log(isNaN(value1)); // true\nconsole.log(isNaN(value2)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining assignWith Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the assignWith function. It includes multiple overloads to support different numbers of source objects and optional customization function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assignWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for values Function\nDESCRIPTION: Defines the interface for the `values` function, which can operate on different types of objects and return their values as an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/values.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction values<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction values<T>(arr: ArrayLike<T>): T[];\nfunction values<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Defining uniqueId Function Signature in TypeScript\nDESCRIPTION: Function signature showing the uniqueId method that accepts an optional string prefix parameter and returns a string unique identifier.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/uniqueId.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uniqueId(prefix?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining isBuffer Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isBuffer. It takes an unknown type parameter and returns a boolean indicating whether the input is a Buffer instance.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBuffer.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isBuffer(x: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for 'each' in TypeScript\nDESCRIPTION: The TypeScript signature for the 'each' function, which iterates over properties of an object and invokes a callback for each property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/each.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction each<T extends object>(object: T, callback: (value: T[keyof T], key: keyof T, object: T) => void): T;\n```\n\n----------------------------------------\n\nTITLE: Multiply Function Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the multiply function with various inputs, including normal number multiplication and edge cases with NaN values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/multiply.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmultiply(2, 3); // Returns 6.\nmultiply(2, -3); // Returns -6.\nmultiply(NaN, 3); // Returns NaN because value is NaN.\nmultiply(2, NaN); // Returns NaN because other is NaN.\nmultiply(NaN, NaN); // Returns NaN because both arguments are NaN.\n```\n\n----------------------------------------\n\nTITLE: Example of Using dropRightWhile with Partial Object - TypeScript\nDESCRIPTION: This snippet demonstrates using the 'dropRightWhile' function where it drops elements based on properties matching a partial object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRightWhile.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst array2 = [{ a: 1 }, { a: 2 }, { a: 3 }];\nconst result2 = dropRightWhile(array2, { a: 3 });\n```\n\n----------------------------------------\n\nTITLE: Defining Ary Function Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the 'ary' function, which takes a function and a number as parameters and returns a new function with capped arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/ary.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-compatible intersectionBy Function with Array-like Objects in TypeScript\nDESCRIPTION: This example demonstrates how the Lodash-compatible intersectionBy function can work with array-like objects, finding common elements between them.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/intersectionBy.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrayLike1 = { 0: 'apple', 1: 'banana', 2: 'cherry', length: 3 };\nconst arrayLike2 = { 0: 'banana', 1: 'cherry', 2: 'date', length: 3 };\nconst result = intersectionBy(arrayLike1, arrayLike2);\n// 結果は ['banana', 'cherry'] です。これらの要素は両方の配列風オブジェクトに共通しています。\n```\n\n----------------------------------------\n\nTITLE: Median Function Type Signature - TypeScript\nDESCRIPTION: Type signature showing the function definition that takes a number array and returns a single number representing the median value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/median.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction median(nums: number[]): number;\n```\n\n----------------------------------------\n\nTITLE: Defining invertBy Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for invertBy, which takes an object and an optional iteratee function to create an inverted object with grouped keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/invertBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invertBy<K extends PropertyKey, V>(object: Record<K, V>, iteratee?: (value: V) => string): Record<string, K[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining Update Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the update function. It takes an object, a property path, and an updater function as parameters, and returns the modified object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/update.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for castArray in TypeScript\nDESCRIPTION: The TypeScript function signature for the castArray utility. It accepts an optional parameter that can be either a single value or a readonly array of values, and returns an array of the same type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/castArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction castArray<T>(value?: T | readonly T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining forEach Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the forEach function. It specifies the function signature, including the generic type T, parameters, and return type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/forEach.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forEach<T extends object>(object: T, callback: (value: T[keyof T], key: keyof T, object: T) => void): T;\n```\n\n----------------------------------------\n\nTITLE: Using has Function with Various Object Paths in TypeScript\nDESCRIPTION: This example demonstrates different ways to use the 'has' function to check for the existence of paths in an object. It shows how to use string, array, and dot notation paths.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/has.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { has } from 'es-toolkit/compat';\n\nconst obj = { a: { b: { c: 3 } } };\n\nhas(obj, 'a'); // true\nhas(obj, ['a', 'b']); // true\nhas(obj, ['a', 'b', 'c']); // true\nhas(obj, 'a.b.c'); // true\nhas(obj, 'a.b.d'); // false\nhas(obj, ['a', 'b', 'c', 'd']); // false\nhas([], 0); // false\nhas([1, 2, 3], 2); // true\nhas([1, 2, 3], 5); // false\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Fill Example 3\nDESCRIPTION: Shows filling a portion of an array with a specific value. An array of numbers is created, and the elements at indices 1 and 2 are replaced with the string '*'. `result3` then contains the modified array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/fill.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst array3 = [4, 6, 8, 10];\nconst result3 = fill(array3, '*', 1, 3);\n// result3 => [4, '*', '*', 10]\n```\n\n----------------------------------------\n\nTITLE: Function Signature for rearg in TypeScript\nDESCRIPTION: The TypeScript signature for the rearg function, which takes a function and an array of indexes to rearrange arguments. It returns a new function that calls the original function with the arguments rearranged according to the specified indexes.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/rearg.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rearg<F extends (...args: any[]) => any>(\n  func: F,\n  ...indexes: Array<number | number[]>\n): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: ForEach Function Type Definition in TypeScript\nDESCRIPTION: Type definition for the forEach function that iterates through object properties. It takes an object and a callback function that receives the value, key, and original object for each property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/forEach.md#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction forEach<T extends object>(object: T, callback: (value: T[keyof T], key: keyof T, object: T) => void): T;\n```\n\n----------------------------------------\n\nTITLE: Declaring isBrowser Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isBrowser. The function takes no parameters and returns a boolean value indicating whether the current environment is a browser.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isBrowser.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isBrowser(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using stubTrue Function Example\nDESCRIPTION: Example demonstrating the usage of stubTrue function which always returns true.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubTrue.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubTrue(); // Returns true\n```\n\n----------------------------------------\n\nTITLE: Defining Words Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'words' function. It takes a string as input and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/words.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction words(str: string): string[];\n```\n\n----------------------------------------\n\nTITLE: Defining stubTrue Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the stubTrue function that returns a boolean value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubTrue.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubTrue(): boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Trim Function Signature\nDESCRIPTION: Function signature showing the trim utility that accepts a string and optional characters to trim. Returns the trimmed string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trim.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction trim(str: string, chars?: string | string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Floor Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the floor function. It takes a number or string as the first argument and an optional precision as the second argument, returning a rounded down number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/math/floor.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction floor(number: number | string, precision: number | string = 0): number;\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the upperFirst string utility function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/upperFirst.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction upperFirst(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining functionsIn Function Signature in TypeScript\nDESCRIPTION: Declares the type signature for the functionsIn function, which takes any object as input and returns an array of strings representing function property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functionsIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// When object is any type\nfunction functionsIn(object: any): string[];\n```\n\n----------------------------------------\n\nTITLE: Using valuesIn Function with Object in TypeScript\nDESCRIPTION: This example demonstrates how to use the valuesIn function with a simple object. It shows that the function returns an array of the object's values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/valuesIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvaluesIn(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining Rest Function Generator in TypeScript\nDESCRIPTION: This TypeScript function signature defines a 'rest' function generator. It takes a function and an optional start index, returning a new function that transforms its arguments based on the start index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/rest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rest<F extends (...args: any[]) => any>(func: F, startIndex: number): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrays with isMatch in TypeScript\nDESCRIPTION: These examples show how isMatch works with arrays. It demonstrates that the order matters and that a target array can contain additional elements and still match.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isMatch.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch([1, 2, 3], [1, 2, 3]); // true\nisMatch([1, 2, 2, 3], [2, 2]); // true\nisMatch([1, 2, 3], [2, 2]); // false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of nthArg Function in TypeScript\nDESCRIPTION: Demonstrates how to use the nthArg function with both positive and negative indices. Shows retrieving the second argument and the last argument from a list.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/nthArg.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getSecondArg = nthArg(1);\nconst result = getSecondArg('a', 'b', 'c');\nconsole.log(result); // => 'b'\n\nconst getLastArg = nthArg(-1);\nconst result = getLastArg('a', 'b', 'c');\nconsole.log(result); // => 'c'\n```\n\n----------------------------------------\n\nTITLE: Using dropRightWhile Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the dropRightWhile function. It removes elements from the end of the array as long as they are greater than 3.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/dropRightWhile.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst result = dropRightWhile(array, x => x > 3);\n// 结果将是 [1, 2, 3] 因为大于 3 的元素从末尾被移除了。\n```\n\n----------------------------------------\n\nTITLE: Typescript Unset Function Interface\nDESCRIPTION: Defines the function signature for removing a property from an object by its path. Supports both string dot notation and array of property keys. Returns a boolean indicating successful property removal.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/unset.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unset(obj: unknown, path: PropertyKey | PropertyKey[]): boolean;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Concat in TypeScript\nDESCRIPTION: Defines the concat function signature that accepts multiple values of type T or arrays of T and returns an array of T.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/concat.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction concat<T>(...values: Array<T | T[]>): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining Repeat Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the repeat function. It takes a string and a number as parameters and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/repeat.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction repeat(str: string, n: number): string;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - TypeScript Array Conversion\nDESCRIPTION: Examples demonstrating various use cases of the toArray function, including converting objects, strings, numbers, and null values to arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoArray({ a: 1, b: 2 }); // returns [1, 2]\ntoArray('abc'); // returns ['a', 'b', 'c']\ntoArray(1); // returns []\ntoArray(null); // returns []\n```\n\n----------------------------------------\n\nTITLE: Using assign to Merge Object Properties in TypeScript\nDESCRIPTION: Example demonstrating how to use the assign function to merge properties from multiple source objects into a target object, creating a new combined object with all properties.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/assign.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assign(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining Spread Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the 'spread' function, which takes a function and returns a new function that accepts an array of arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/spread.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction spread<F extends (...args: any[]) => any>(func: F): (argsArr: Parameters<F>) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Using the slice Function with Examples in TypeScript\nDESCRIPTION: Examples demonstrating the usage of the slice function. The first example shows slicing an array from index 1 to 2, resulting in [2]. The second example shows how it preserves undefined values in sparse arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/slice.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nslice([1, 2, 3], 1, 2); // => [2]\nslice(new Array(3)); // => [undefined, undefined, undefined]\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the identity function. It uses a generic type T to allow for any input type, and returns the same type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/identity.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<T>(x: T);\n```\n\n----------------------------------------\n\nTITLE: Using invertBy Function with Default Behavior\nDESCRIPTION: Example of using invertBy without an iteratee function, where values directly become keys in the result object and the original keys are grouped in arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/invertBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 1 };\nconst result = invertBy(obj);\n// result => { '1': ['a', 'c'], '2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for Defaults Function in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'defaults' function. It shows various overloads to handle different numbers of source objects and return types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/defaults.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaults<T extends object>(object: T): NonNullable<T>;\nfunction defaults<T extends object, S extends object>(object: T, source: S): NonNullable<T & S>;\nfunction defaults<T extends object, S1 extends object, S2 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2\n): NonNullable<T & S1 & S2>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): NonNullable<T & S1 & S2 & S3>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object, S4 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): NonNullable<T & S1 & S2 & S3 & S4>;\nfunction defaults<T extends object, S extends object>(object: T, ...sources: S[]): object;\n```\n\n----------------------------------------\n\nTITLE: Function Interface Definition for sortedIndex in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the sortedIndex function, which takes a sorted array and a value to find the appropriate insertion index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndex<T>(array: ArrayLike<T> | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Defining trimStart Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for trimStart. It takes a string and an optional parameter for characters to trim, which can be a string or an array of strings. The function returns a string with the specified leading characters removed.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trimStart.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction trimStart(str: string, chars?: string | string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Conforms Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the conforms function. It takes a record of predicate functions as input and returns a function that checks if an object conforms to these predicates.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/conforms.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction conforms(source: Record<PropertyKey, (value: any) => boolean>): (object: Record<PropertyKey, any>) => boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for trimEnd\nDESCRIPTION: Function signature showing the type definition for the trimEnd utility that removes trailing characters from strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/trimEnd.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction trimEnd(str: string, chars?: string | string[]): string;\n```\n\n----------------------------------------\n\nTITLE: Defining toPlainObject Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the toPlainObject utility that converts any value to a plain object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toPlainObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPlainObject(value: any): Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Typescript Unset Function Example with Dot Notation\nDESCRIPTION: Demonstrates removing a nested property using dot notation path string. Shows how the function modifies the original object and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/unset.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: { b: { c: 42 } } };\nunset(obj, 'a.b.c'); // true\nconsole.log(obj); // { a: { b: {} } }\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for es-toolkit\nDESCRIPTION: This YAML configuration defines the layout and content of the es-toolkit website home page using VitePress. It includes hero section settings with image optimizations, navigation actions, and feature highlights showcasing the library's benefits.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: 'es-toolkit'\n  text: 'State-of-the-art JavaScript utility library'\n  image:\n    loading: eager\n    fetchpriority: high\n    decoding: async\n    src: /hero.webp\n    alt:\n  actions:\n    - theme: brand\n      text: About es-toolkit\n      link: /intro\n    - theme: alt\n      text: Reference\n      link: /reference/array/chunk\n    - theme: alt\n      text: Usage\n      link: /usage\n\nfeatures:\n  - title: Best performance\n    details: es-toolkit delivers 2-3× better performance in modern JavaScript runtimes compared to other libraries.\n  - title: Small bundle footprint\n    details: es-toolkit ships up to 97% less JavaScript code compared to other alternative libraries.\n  - title: Modern implementation\n    details: es-toolkit fully leverages modern JavaScript APIs for straightforward and error-free implementation.\n  - title: Robust types\n    details: es-toolkit offers simple yet robust types for all functions.\n  - title: Widely adopted\n    details: es-toolkit is widely adopted by popular open-source libraries such as Storybook and ink.\n  - title: Battle-tested\n    details: es-toolkit has 100% test coverage, ensuring maximum robustness.\n  - title: Comprehensive runtime support\n    details: es-toolkit supports all JavaScript environments, including Node.js, Deno, Bun, and browsers.\n```\n\n----------------------------------------\n\nTITLE: Lodash Compatibility with Spread Function\nDESCRIPTION: This snippet shows how to import the 'spread' function from 'es-toolkit/compat' for compatibility with Lodash. It demonstrates additional configuration options such as 'argsIndex' which determines the position of the spread arguments and the handling of edge cases.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/spread.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/compat';\n\nfunction fn(a: unknown, b: unknown, c: unknown) {\n  return Array.from(arguments);\n}\n\nspread(fn, -1)([1, 2]); // Returns [1, 2]\nspread(fn, NaN)([1, 2]); // Returns [1, 2]\nspread(fn, 'a')([1, 2]); // Returns [1, 2]\nspread(fn, 1.6)(1, [2, 3]); // Returns [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: takeRightWhile Examples (Lodash Compatibility)\nDESCRIPTION: Provides examples of using `takeRightWhile` with different matching conditions, including predicate functions, partial objects, property-value pairs, and property names, showcasing its flexibility.  Demonstrates how each overload extracts elements from the end of the array based on the specified criteria. Also includes example usages with no predicate provided, as well as null and undefined input arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeRightWhile.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example using a predicate function\nconst array1 = [1, 2, 3, 4, 5];\nconst result1 = takeRightWhile(array1, x => x > 3);\n// result1 will be [4, 5] since elements greater than 3 are taken from the end.\n\n// Example using a partial object\nconst array2 = [{ a: 1 }, { a: 2 }, { a: 3 }];\nconst result2 = takeRightWhile(array2, { a: 3 });\n// result2 will be [{ a: 3 }] since the last object matches the properties of the provided object.\n\n// Example using a property-value pair\nconst array3 = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst result3 = takeRightWhile(array3, ['id', 3]);\n// result3 will be [{ id: 3 }] since the last object has the id property matching the value 3.\n\n// Example using a property name\nconst array4 = [{ isActive: false }, { isActive: true }, { isActive: true }];\nconst result4 = takeRightWhile(array4, 'isActive');\n// result4 will be [{ isActive: true }, { isActive: true }] since elements with a truthy isActive property are taken from the end.\n\n// Example with no predicate provided\nconst array5 = [1, 2, 3];\nconst result5 = takeRightWhile(array5);\n// result5 will be [1, 2, 3] since the identity function is used by default.\n\n// null or undefined array\nconst result6 = takeRightWhile(null);\n// result6 will be [] since the input array is null.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of valuesIn Function\nDESCRIPTION: A simple example demonstrating how to use the valuesIn function to retrieve values from an object. The example shows the function returning an array of the object's values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/valuesIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvaluesIn(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining the 'over' Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'over' function. It takes an array of iteratees and returns a function that accepts any number of arguments and returns an array of unknown values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/over.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction over(...iteratees: Array<Iteratee | Iteratee[]>): (...args: any[]) => unknown[];\n```\n\n----------------------------------------\n\nTITLE: Defining the toPairs Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definitions for the toPairs function that handles different input types: objects, Sets, and Maps. Each overload specifies the expected input and output types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/toPairs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPairs<T>(object: Record<string | number, T>): Array<[string, T]>;\nfunction toPairs<T>(set: Set<T>): Array<[T, T]>;\nfunction toPairs<K, V>(map: Map<K, V>): Array<[K, V]>;\n```\n\n----------------------------------------\n\nTITLE: Example: Subset Check with Object Comparison\nDESCRIPTION: Demonstrates using isSubsetWith with an array of objects, comparing elements based on their 'id' property. Shows successful subset scenario with matching objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubsetWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst superset = [{ id: 1 }, { id: 2 }, { id: 3 }];\nconst subset = [{ id: 2 }, { id: 1 }];\nconst areItemsEqual = (a, b) => a.id === b.id;\n\nisSubsetWith(superset, subset, areItemsEqual);\n// Return true\n```\n\n----------------------------------------\n\nTITLE: Defining mapKeys Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the mapKeys function. It takes an object and a function to generate new keys, returning a new object with mapped keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/mapKeys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mapKeys<T extends Record<PropertyKey, any>, K extends PropertyKey>(\n  object: T,\n  getNewKey: (value: T[keyof T], key: keyof T, object: T) => K\n): Record<K, T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for 'nth' in TypeScript\nDESCRIPTION: Defines the type signature for the 'nth' function, which accepts an array-like object and an index parameter to retrieve an element from the array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/nth.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction nth<T>(array: ArrayLike<T> | null | undefined, n: number): T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining stubString Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript function signature for stubString. The function takes no parameters and returns an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubString.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubString(): '';\n```\n\n----------------------------------------\n\nTITLE: Defining the Ary Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the `ary` function, which creates a wrapper that limits the number of arguments passed to a function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/ary.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: stubFalse Function Example Usage\nDESCRIPTION: Demonstrates how to use the `stubFalse` function. Calling `stubFalse()` will always return the boolean value `false`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/stubFalse.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubFalse(); // Returns false\n```\n\n----------------------------------------\n\nTITLE: Function Signature for lowerFirst in TypeScript\nDESCRIPTION: TypeScript function signature showing the input parameter and return type for the lowerFirst function. Takes a string parameter and returns the modified string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/lowerFirst.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lowerFirst(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for now() - TypeScript\nDESCRIPTION: TypeScript function signature showing the now() function declaration that returns a number representing milliseconds since Unix epoch.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/now.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction now(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining unzipWith TypeScript Function\nDESCRIPTION: Type signature for a function that unzips a nested array and applies a transformation function to the unzipped elements\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/unzipWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unzipWith<T, R>(target: T[][], iteratee: (...args: T[]) => R): R[];\n```\n\n----------------------------------------\n\nTITLE: Defining sortedLastIndex Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the sortedLastIndex function. It takes a sorted array-like object and a value as parameters, and returns the index where the value should be inserted.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedLastIndex.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedLastIndex<T>(array: ArrayLike<T> | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: Type definition for the isInteger function that checks if a value is an integer. Acts as a type predicate in TypeScript to narrow the type to number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isInteger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isInteger(value?: unknown): value is number;\n```\n\n----------------------------------------\n\nTITLE: Defining Less Than Comparison Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'lt' function. It takes two parameters of unknown type and returns a boolean indicating if the first value is less than the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/lt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lt(value: unknown, other: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using assignIn Function to Merge Object Properties in TypeScript\nDESCRIPTION: This example demonstrates how to use the assignIn function to merge properties from multiple source objects into a target object. It shows the function's behavior of combining properties from different sources.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignIn(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Using dropRight Function - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the 'dropRight' function. It initializes an array and calls 'dropRight' with that array and a count of elements to drop. The expected output is a new array with the last two elements removed, showcasing the function's practical application.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/dropRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, 2, 3, 4, 5];\nconst result = dropRight(array, 2);\n// result will be [1, 2, 3] since the last two elements are dropped.\n```\n\n----------------------------------------\n\nTITLE: Defining the `after` function interface in Typescript\nDESCRIPTION: This code defines the interface for the `after` function, which takes a number `n` and a function `func` as input. It returns a new function that only executes `func` after being called `n` times. Before the nth call, it returns `undefined`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/after.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction after<F extends (...args: any[]) => any>(\n  n: number,\n  func: F\n): (...args: Parameters<F>) => ReturnType<F> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using 'each' to Iterate Through Object Properties in TypeScript\nDESCRIPTION: Example demonstrating how to use the 'each' function to iterate through the properties of an object. The callback function logs each property's value and key to the console.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/each.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { each } from 'es-toolkit/compat';\n\nconst object = { a: 1, b: 2 };\neach(object, (value, key, object) => console.log(value, key));\n// Output:\n// 1 'a'\n// 2 'b'\n```\n\n----------------------------------------\n\nTITLE: Declaring isLength Function Signature in TypeScript\nDESCRIPTION: Type declaration for the isLength function that serves as a type predicate to validate length values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isLength.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isLength(value: unknown): value is number;\n```\n\n----------------------------------------\n\nTITLE: Defining the 'cond' Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the 'cond' function. It takes an array of pairs (condition and execution functions) and returns a new composite function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/cond.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction cond(pairs: any[][]): (...args: any[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Over Function TypeScript Signature\nDESCRIPTION: TypeScript function signature showing the type definition of the 'over' function that accepts multiple iteratees and returns a new function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/over.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction over(...iteratees: Array<Iteratee | Iteratee[]>): (...args: any[]) => unknown[];\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit in Deno\nDESCRIPTION: Example of importing and using es-toolkit in Deno. Note the additional scope required due to JSR limitations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sum } from '@es-toolkit/es-toolkit';\n\nsum([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining upperCase Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the input parameter and return type for the upperCase string conversion utility.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/upperCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction upperCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Property Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the 'property' function. It takes a path parameter and returns a function that accepts an object and returns the value at the specified path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/property.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction property(path: PropertyKey | readonly PropertyKey[]): (object: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: TypedArray Type Checking Usage Example\nDESCRIPTION: Demonstrates usage of isTypedArray function with different input types, showing how to verify if a value is a TypedArray or not.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isTypedArray.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isTypedArray } from 'es-toolkit/predicate';\n\nconst arr = new Uint8Array([1, 2, 3]);\nisTypedArray(arr); // true\n\nconst regularArray = [1, 2, 3];\nisTypedArray(regularArray); // false\n\nconst buffer = new ArrayBuffer(16);\nisTypedArray(buffer); // false\n```\n\n----------------------------------------\n\nTITLE: stubFalse Function Interface\nDESCRIPTION: Defines the interface for the `stubFalse` function. It takes no arguments and returns a boolean value, specifically `false`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/stubFalse.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubFalse(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining toPairsIn Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for toPairsIn, supporting objects, sets, and maps. It specifies the input types and return types for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toPairsIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toPairsIn<T>(object: Record<string | number, T>): Array<[string, T]>;\nfunction toPairsIn<T>(set: Set<T>): Array<[T, T]>;\nfunction toPairsIn<K, V>(map: Map<K, V>): Array<[K, V]>;\n```\n\n----------------------------------------\n\nTITLE: Lowercase Function Definition\nDESCRIPTION: Defines a TypeScript function `lowerCase` that accepts a string as input and returns a string. The function converts the input string to lowercase, with spaces inserted between words.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/string/lowerCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction lowerCase(str: string): string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining isTypedArray Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isTypedArray. It takes an unknown value and returns a type predicate indicating if the value is a TypedArray.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isTypedArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isTypedArray(\n  x: unknown\n): x is\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | BigUint64Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | BigInt64Array\n  | Float32Array\n  | Float64Array;\n```\n\n----------------------------------------\n\nTITLE: Defining WeakSet Type Check Function Signature in TypeScript\nDESCRIPTION: Function signature declaration showing parameter type and return type with type predicate for TypeScript type narrowing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isWeakSet.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isWeakSet(value: unknown): value is WeakSet<WeakKey>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for isFinite\nDESCRIPTION: Function signature showing the type definition for isFinite, which takes an unknown value and returns a type predicate for number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isFinite.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isFinite(value?: unknown): value is number;\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature for 'functions' Utility in TypeScript\nDESCRIPTION: Declares the TypeScript function signature for the 'functions' utility. It takes an unknown object as input and returns an array of strings representing function property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction functions(object: unknown): string[];\n```\n\n----------------------------------------\n\nTITLE: Example Usage of extendWith Function in TypeScript\nDESCRIPTION: A practical example showing how to use the extendWith function (via assignInWith in this example) to merge properties from multiple source objects into a target object. The example demonstrates using a custom callback to determine assignment behavior.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/extendWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = assignInWith(target, { b: 2 }, { c: 3 }, function (objValue, srcValue) {\n  return objValue === undefined ? srcValue : objValue;\n});\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Declaring Lodash-Compatible dropRightWhile Function in TypeScript\nDESCRIPTION: This snippet defines multiple overloads for the dropRightWhile function to achieve Lodash compatibility. It supports various ways to specify the condition for dropping elements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/dropRightWhile.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropRightWhile<T>(\n  arr: ArrayLike<T> | null | undefined,\n  canContinueDropping: (item: T, index: number, arr: T[]) => unknown\n): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, objectToDrop: Partial<T>): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: [keyof T, unknown]): T[];\nfunction dropRightWhile<T>(arr: ArrayLike<T> | null | undefined, propertyToDrop: PropertyKey): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining the 'has' Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the 'has' function that checks if a path exists in an object. It accepts an object and a path parameter which can be a string, number, symbol, or an array of these types, and returns a boolean value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/has.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction has(object: unknown, path: string | number | symbol | Array<string | number | symbol>): boolean;\n```\n\n----------------------------------------\n\nTITLE: mapKeys Interface Definition in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the `mapKeys` function. It takes an object and a function `getNewKey` as input. The `getNewKey` function determines the new key based on the original value, key and the object itself. The function returns a new object with the transformed keys.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/mapKeys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mapKeys<T extends Record<PropertyKey, any>, K extends PropertyKey>(\n  object: T,\n  getNewKey: (value: T[keyof T], key: keyof T, object: T) => K\n): Record<K, T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript isNaN Function Signature\nDESCRIPTION: Function signature showing the TypeScript type definition for isNaN function that checks if a value is NaN and serves as a type predicate\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isNaN.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNaN(value?: unknown): value is typeof NaN;\n```\n\n----------------------------------------\n\nTITLE: Defining isEqualWith Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isEqualWith. It details the function parameters and return type, including the custom comparison function signature.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isEqualWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEqualWith(\n  a: any,\n  b: any,\n  areValuesEqual: (\n    x: any,\n    y: any,\n    property?: PropertyKey,\n    xParent?: any,\n    yParent?: any,\n    stack?: Map<any, any>\n  ) => boolean | void\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for String Capitalization\nDESCRIPTION: Type definition showing the function signature that accepts a generic string type and returns a capitalized version using TypeScript's built-in Capitalize utility type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/capitalize.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction capitalize<T extends string>(str: T): Capitalize<T>;\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit in Bun\nDESCRIPTION: Command to install es-toolkit in Bun JavaScript runtime.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Defining the Join Function Signature in TypeScript\nDESCRIPTION: Function signature for the join method that connects array elements into a string with an optional separator. It accepts an array of type T and an optional separator string, returning the joined string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/join.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction join<T>(array: T[], separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature - TypeScript Array Conversion\nDESCRIPTION: TypeScript function signature showing the type definition for the toArray function that converts any value to an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toArray(value?: unknown): any[];\n```\n\n----------------------------------------\n\nTITLE: Basic Delay Usage Example in TypeScript\nDESCRIPTION: Demonstrates basic usage of the delay function in an async context to pause execution for 1 second between console logs.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/delay.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function foo() {\n  console.log('Start');\n  await delay(1000); // Delays execution for 1 second\n  console.log('End');\n}\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for Set Type Check\nDESCRIPTION: Type definition showing the function signature that checks if a value is a Set. The function accepts an unknown value and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isSet.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSet(value: unknown): value is Set<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining pad Function Signature in TypeScript\nDESCRIPTION: Declares the 'pad' function signature with TypeScript types. It takes a string to pad, the desired length, and an optional padding character.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/pad.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pad(str: string, length: number, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: lastIndexOf Function Signature in TypeScript\nDESCRIPTION: The function signature for lastIndexOf which takes an array, a search element, and an optional from index parameter. Returns the index of the last occurrence or -1 if not found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lastIndexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining isArrayBuffer Type Predicate Function\nDESCRIPTION: Function signature for the isArrayBuffer type checker. Takes an unknown value parameter and returns a boolean with type predicate functionality in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isArrayBuffer.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArrayBuffer(value: unknown): value is ArrayBuffer;\n```\n\n----------------------------------------\n\nTITLE: Defining the rearg Function Interface in TypeScript\nDESCRIPTION: Interface definition for the rearg function that accepts a function and indices to reorder arguments. The function returns a new function with rearranged argument order according to the specified indices.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/rearg.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rearg<F extends (...args: any[]) => any>(\n  func: F,\n  ...indices: Array<number | number[]>\n): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Defining toFinite Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the toFinite function that accepts an unknown value parameter and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toFinite.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toFinite(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Defining pullAll Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for pullAll. It takes an array and a list of values to remove, and returns the modified array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/pullAll.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pullAll<T>(arr: T[], valuesToRemove: ArrayLike<T>): T[];\n```\n\n----------------------------------------\n\nTITLE: Using zipObjectDeep with Array Paths\nDESCRIPTION: Example showing how to use zipObjectDeep with arrays of property names as paths to create a nested object structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/zipObjectDeep.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst paths = [\n  ['a', 'b', 'c'],\n  ['d', 'e', 'f'],\n];\nconst values = [1, 2];\nconst result = zipObjectDeep(paths, values);\n// result will be { a: { b: { c: 1 } }, d: { e: { f: 2 } } }\n```\n\n----------------------------------------\n\nTITLE: Defining findKey Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the basic findKey function. It takes an object and a predicate function as parameters and returns the key of the first matching element or undefined.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/findKey.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction findKey<T extends Record<any, any>>(\n  obj: T,\n  predicate: (value: T[keyof T], key: keyof T, obj: T) => boolean\n): keyof T | undefined;\n```\n\n----------------------------------------\n\nTITLE: Declaring dropRightWhile Function in TypeScript\nDESCRIPTION: This snippet defines the signature of the dropRightWhile function. It takes an array and a predicate function as parameters, and returns a new array with elements removed from the end based on the predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/dropRightWhile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction dropRightWhile<T>(arr: T[], canContinueDropping: (item: T, index: number, arr: T[]) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Defining the Flip Function Signature in TypeScript\nDESCRIPTION: TypeScript signature for the flip function which takes a function and returns a new function with reversed argument order. It uses generic types to preserve the original function's parameter and return types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/flip.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flip<F extends (...args: any[]) => any>(func: F): (...args: Reversed<Parameters<F>>) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of isArrayLikeObject Function\nDESCRIPTION: Examples demonstrating various use cases of the isArrayLikeObject function, including checks on arrays, array-like objects, strings, and functions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isArrayLikeObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isArrayLikeObject } from 'es-toolkit/compat';\n\nconsole.log(isArrayLikeObject([1, 2, 3])); // true\nconsole.log(isArrayLikeObject({ 0: 'a', length: 1 })); // true\nconsole.log(isArrayLikeObject('abc')); // false\nconsole.log(isArrayLikeObject(() => {})); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Reverse Function Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the reverse function. It takes an array of type T and returns an array of the same type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/reverse.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reverse<T>(array: T[]): T[];\n```\n\n----------------------------------------\n\nTITLE: PropertyOf Function Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition of the propertyOf function that creates a function bound to a specific object for querying different paths.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/propertyOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction propertyOf(object: unknown): (path: PropertyKey | PropertyKey[]) => unknown;\n```\n\n----------------------------------------\n\nTITLE: Defining sumBy Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the sumBy function. It takes an array of generic type T and a getValue function that extracts a number from each element, returning the sum as a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/sumBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sumBy<T>(items: T[], getValue: (element: T) => number): number;\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit in Deno\nDESCRIPTION: Command to install es-toolkit in Deno environment using JSR (JavaScript Runtime).\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno add @es-toolkit/es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signatures for 'defaults' in TypeScript\nDESCRIPTION: This snippet defines multiple function signatures for the 'defaults' function, accommodating different numbers of source objects and return types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/defaults.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defaults<T extends object>(object: T): NonNullable<T>;\nfunction defaults<T extends object, S extends object>(object: T, source: S): NonNullable<T & S>;\nfunction defaults<T extends object, S1 extends object, S2 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2\n): NonNullable<T & S1 & S2>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3\n): NonNullable<T & S1 & S2 & S3>;\nfunction defaults<T extends object, S1 extends object, S2 extends object, S3 extends object, S4 extends object>(\n  object: T,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): NonNullable<T & S1 & S2 & S3 & S4>;\nfunction defaults<T extends object, S extends object>(object: T, ...sources: S[]): object;\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Function Signature with Timeout\nDESCRIPTION: TypeScript function signature for withTimeout utility that takes an async function and timeout duration as parameters and returns a generic promise.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/promise/withTimeout.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withTimeout<T>(run: () => Promise<T>, ms: number): Promise<T>;\n```\n\n----------------------------------------\n\nTITLE: Using padEnd Function Examples in JavaScript\nDESCRIPTION: Examples demonstrating how to use the padEnd function with different parameters. Shows padding with a character to reach a longer length, attempting to pad to a shorter length (which returns the original string), and padding with an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/padEnd.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npadEnd('hello', 10, 'a'); // 'helloaaaaa'\npadEnd('hello', 3, 'a'); // 'hello'\npadEnd('hello', 5, ''); // 'hello'\n```\n\n----------------------------------------\n\nTITLE: Type Predicate Function Signature for File Validation\nDESCRIPTION: TypeScript function signature that defines a type predicate for checking if a value is a File object. The function takes an unknown parameter and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isFile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isFile(x: unknown): x is File;\n```\n\n----------------------------------------\n\nTITLE: Defining isElement Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isElement. It takes an optional parameter of any type and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isElement.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isElement(value?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining isEqualWith Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isEqualWith function. It takes two values of any type and a comparison function as parameters, and returns a boolean indicating whether the values are equal according to the custom comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isEqualWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEqualWith(\n  a: any,\n  b: any,\n  areValuesEqual: (\n    x: any,\n    y: any,\n    property?: PropertyKey,\n    xParent?: any,\n    yParent?: any,\n    stack?: Map<any, any>\n  ) => boolean | void\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition for 'each' Utility in TypeScript\nDESCRIPTION: TypeScript function signature definition for the 'each' utility function that iterates through object properties. It takes an object and a callback function, applying the callback to each property value and key, and returns the original object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/each.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction each<T extends object>(object: T, callback: (value: T[keyof T], key: keyof T, object: T) => void): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Greater Than Comparison Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'gt' function. It takes two unknown parameters and returns a boolean indicating if the first value is greater than the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/gt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction gt(value: unknown, other: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Rearg Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the rearg function. It takes a function and a variable number of index arguments, and returns a new function with rearranged parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/rearg.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rearg<F extends (...args: any[]) => any>(\n  func: F,\n  ...indexes: Array<number | number[]>\n): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of meanBy function in Typescript\nDESCRIPTION: This example showcases how to use the `meanBy` function. It demonstrates calculating the mean of an array of objects based on a specific property and handles the case of an empty array, which returns `NaN`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/meanBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nmeanBy([{ a: 1 }, { a: 2 }, { a: 3 }], x => x.a); // 2를 반환해요.\nmeanBy([], x => x.a); // NaN을 반환해요.\n```\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Examples for takeWhile Function\nDESCRIPTION: The examples showcase various possibilities of the takeWhile function usage, including identity function and null arrays. Vital parameters are arrays and conditions with expected outputs being arrays filtered by these conditions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/takeWhile.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example using a predicate function\nconst array1 = [1, 2, 3, 4, 5];\nconst result1 = takeWhile(array1, x => x < 3);\n// result1 will be [1, 2] since elements less than 3 are taken from the beginning.\n\n// Example using a partial object\nconst array2 = [{ a: 3 }, { a: 2 }, { a: 1 }];\nconst result2 = takeWhile(array2, { a: 3 });\n// result2 will be [{ a: 3 }] since the first object matches the properties of the provided object.\n\n// Example using a property-value pair\nconst array3 = [{ id: 3 }, { id: 2 }, { id: 1 }];\nconst result3 = takeWhile(array3, ['id', 3]);\n// result3 will be [{ id: 3 }] since the first object has the id property matching the value 3.\n\n// Example using a property name\nconst array4 = [{ isActive: true }, { isActive: true }, { isActive: false }];\nconst result4 = takeWhile(array4, 'isActive');\n// result4 will be [{ isActive: true }, { isActive: true }] since elements with a truthy isActive property are taken from the beginning.\n\n// Example with no predicate provided\nconst array5 = [1, 2, 3];\nconst result5 = takeWhile(array5);\n// result5 will be [1, 2, 3] since the identity function is used by default.\n\n// null or undefined array\nconst result6 = takeWhile(null);\n// result6 will be [] since the input array is null.\n```\n\n----------------------------------------\n\nTITLE: Basic Spread Function Usage Example\nDESCRIPTION: Demonstrates basic usage of spread function with a simple addition example and greeting function with default parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/spread.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/function';\n\nfunction add(a, b) {\n  return a + b;\n}\nconst spreadAdd = spread(add);\nconsole.log(spreadAdd([1, 2])); // Output: 3\n\n// Example function to spread arguments over\n// Create a new function that uses `spread` to combine arguments\nconst spreadAdd = spread(add, 1);\n// Calling `spreadAdd` with an array as the second argument\nconsole.log(spreadAdd(1, [2])); // Output: 3\n\n// Function with default arguments\nfunction greet(name, greeting = 'Hello') {\n  return `${greeting}, ${name}!`;\n}\n// Create a new function that uses `spread` to position the argument array at index 0\nconst spreadGreet = spread(greet, 0);\n// Calling `spreadGreet` with an array of arguments\nconsole.log(spreadGreet(['Alice'])); // Output: Hello, Alice!\nconsole.log(spreadGreet(['Bob', 'Hi'])); // Output: Hi, Bob!\n```\n\n----------------------------------------\n\nTITLE: Defining a Throttle Function in TypeScript\nDESCRIPTION: Function signature for creating a throttle function that limits execution to once per specified time interval. The function accepts a callback, throttle time in milliseconds, and optional configuration parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/throttle.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction throttle<F extends (...args: any[]) => void>(\n  func: F,\n  throttleMs: number,\n  options?: ThrottleOptions\n): ((...args: Parameters<F>) => void) & {\n  cancel: () => void;\n  flush: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Add Function in TypeScript\nDESCRIPTION: Demonstrates different use cases of the add function, including basic addition and handling of NaN values. Shows that when either parameter is NaN, the result is also NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/add.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result1 = add(2, 3); // Both values are of type number, so result1 is 5.\nconst result2 = add(NaN, 5); // Since value is NaN, result2 is NaN.\nconst result3 = add(10, NaN); // Since other is NaN, result3 is NaN.\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Function with Simple Addition\nDESCRIPTION: This example demonstrates how to use the 'spread' function with a simple addition function. It shows how the spread function transforms the original function to accept an array of arguments, enabling a cleaner function call.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/spread.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { spread } from 'es-toolkit/function';\n\nfunction add(a, b) {\n  return a + b;\n}\nconst spreadAdd = spread(add);\nconsole.log(spreadAdd([1, 2])); // Output: 3\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Median By Function\nDESCRIPTION: Function that calculates the median of an array using a custom value extraction function. Handles different array lengths and returns NaN for empty arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/math/medianBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction medianBy<T>(items: T[], getValue: (element: T) => number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining isNaN Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isNaN function. It takes an optional unknown value as input and returns a boolean indicating whether the value is NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isNaN.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNaN(value?: unknown): value is typeof NaN;\n```\n\n----------------------------------------\n\nTITLE: Defining the sortBy Function Type Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the sortBy utility that sorts an array of objects based on multiple criteria. It accepts an array of objects and an array of criteria that can be either property keys or functions that return values for comparison.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/sortBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortBy<T extends object>(arr: T[], criteria: Array<((item: T) => unknown) | keyof T>): T[];\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit for Bun\nDESCRIPTION: Command to install es-toolkit using Bun's package manager.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbun add es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Defining Error Type Guard Function in TypeScript\nDESCRIPTION: A type guard function that checks if a given value is an Error object. Used to narrow down the type of an unknown value to an Error type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isError.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isError(value: unknown): value is Error;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Date Type Checker Function Signature\nDESCRIPTION: Type definition for a function that checks if a value is a Date object. Uses TypeScript's type predicate feature for type narrowing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isDate.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDate(value: unknown): value is Date;\n```\n\n----------------------------------------\n\nTITLE: Using Every Function with Arrays in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'every' function with arrays in various scenarios, including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/every.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { every } from 'es-toolkit/compat';\n\n// Using predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = every(items, item => item > 0);\nconsole.log(result); // true\n\n// Using partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, { name: 'Bob' });\nconsole.log(result); // false\n\n// Using property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, ['name', 'Alice']);\nconsole.log(result); // false\n\n// Using property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = every(items, 'name');\nconsole.log(result); // true\n```\n\n----------------------------------------\n\nTITLE: isFile Function Signature\nDESCRIPTION: This code snippet shows the signature of the `isFile` function. The function takes a single parameter `x` of type `unknown` and returns a boolean indicating whether `x` is a `File` object. It acts as a type guard, narrowing the type of `x` to `File` if it returns `true`.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isFile.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isFile(x: unknown): x is File;\n```\n\n----------------------------------------\n\nTITLE: Defining isMatch Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the isMatch function. It takes two parameters of type unknown and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isMatch.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMatch(target: unknown, source: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining sortedIndexBy Function Interface in TypeScript\nDESCRIPTION: Function signature for sortedIndexBy which finds the lowest index to insert a value into a sorted array while maintaining sort order. It takes an array, a value to insert, an iteratee function to transform elements for comparison, and an optional parameter to return the highest matching index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndexBy.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndexBy<T, R>(\n  array: ArrayLike<T> | null | undefined,\n  value: T,\n  iteratee: (value: T) => R,\n  retHighest?: boolean\n): number;\n```\n\n----------------------------------------\n\nTITLE: Defining gte Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'gte' function. It takes two parameters of type 'unknown' and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/gte.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction gte(value: unknown, other: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit in browser via CDN (jsdelivr and unpkg)\nDESCRIPTION: Examples of including es-toolkit in a browser environment using CDN links from jsdelivr and unpkg. All functions are available under the '_' variable, similar to Lodash.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/es-toolkit@%5E1\"></script>\n<script>\n  var arr = _.chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/es-toolkit@%5E1\"></script>\n<script>\n  var arr = _.chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Node.js Environment Detection Function Signature\nDESCRIPTION: Function signature for isNode() that returns a boolean indicating whether the current environment is Node.js.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isNode.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNode(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Merging Objects with Null Values in TypeScript\nDESCRIPTION: This example illustrates how the merge function handles null values. It shows that a null value in the target object can be overwritten by an array in the source object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/merge.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: null };\nconst source = { a: [1, 2, 3] };\nconst result = merge(target, source);\nconsole.log(result);\n// Output: { a: [1, 2, 3] }\n```\n\n----------------------------------------\n\nTITLE: Using No-Operation Function as Default Parameter in TypeScript\nDESCRIPTION: Demonstrates how to import and use the 'noop' function as a default parameter in a React-like component. This ensures that 'onChange' is always a callable function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/noop.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { noop } from 'es-toolkit/function';\n\ninterface Props {\n  onChange?: () => void;\n}\n\nfunction MyComponent({ onChange = noop }: Props) {\n  // Here onChange is guaranteed to be a function, so it's safe to call.\n  onChange();\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of isNull Type Guard\nDESCRIPTION: Demonstrates usage of the isNull function with different value types, showing how it returns true for null and false for other values\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isNull.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value1 = null;\nconst value2 = undefined;\nconst value3 = 42;\n\nconsole.log(isNull(value1)); // true\nconsole.log(isNull(value2)); // false\nconsole.log(isNull(value3)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining sortedIndexOf Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the sortedIndexOf function. It takes a sorted array-like object and a value to search for, returning the index of the value if found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/sortedIndexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sortedIndexOf(array: ArrayLike | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with Array Path in TypeScript\nDESCRIPTION: Example of using the 'property' function with an array path to create a function that retrieves a nested object value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/property.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getObjectValue = property(['a', 'b', 'c']);\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Matching Sets with isMatch in JavaScript\nDESCRIPTION: This example demonstrates how isMatch works with Set objects. It returns true if the target Set contains all elements from the source Set.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isMatch.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst targetSet = new Set([1, 2, 3]);\nconst sourceSet = new Set([1, 2]);\nisMatch(targetSet, sourceSet); // true\n```\n\n----------------------------------------\n\nTITLE: PartialRight Interface Definition\nDESCRIPTION: Defines the TypeScript interface for the `partialRight` function. It shows the function signature, taking a function `func` and a variable number of `partialArgs`, and returning a new function.  It also defines the `placeholder` symbol within the `partialRight` namespace.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/partialRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction partialRight<F extends (...args: any[] => any)>(func: F, ...partialArgs: any[]): (...args: any[]) => ReturnType<F>;\n\nnamespace partialRight {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Using isElement Function in TypeScript\nDESCRIPTION: Demonstrates how to use the isElement function to check if a value is a DOM element. It shows examples of checking a valid DOM element (document.body) and a string that looks like an HTML tag.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isElement.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isElement(document.body)); // true\nconsole.log(isElement('<body>')); // false\n```\n\n----------------------------------------\n\nTITLE: StartCase Function Signature\nDESCRIPTION: TypeScript function signature showing the input parameter and return type for the startCase utility.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/startCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction startCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining LTE Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'lte' function. It takes two parameters of type 'unknown' and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/lte.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lte(value: unknown, other: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using es-toolkit in modern browsers with esm.sh\nDESCRIPTION: Example of using es-toolkit in modern browsers using esm.sh with an import map and ES modules.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/usage.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"es-toolkit\": \"https://esm.sh/es-toolkit@%5E1\"\n    }\n  }\n</script>\n<script type=\"module\">\n  import { chunk } from 'es-toolkit';\n\n  chunk([1, 2, 3, 4, 5, 6], 3);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Property Function with Array Path in TypeScript\nDESCRIPTION: This example shows how to use the 'property' function with an array path to create a getter function and retrieve a nested value from an object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/property.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getObjectValue = property(['a', 'b', 'c']);\nconst result = getObjectValue({ a: { b: { c: 3 } } });\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Installing es-toolkit for Deno\nDESCRIPTION: Command to install es-toolkit using Deno's package manager. Note the different package name for Deno.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/usage.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno add @es-toolkit/es-toolkit\n```\n\n----------------------------------------\n\nTITLE: Defining stubObject Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for stubObject. The function takes no parameters and returns an empty object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction stubObject(): {};\n```\n\n----------------------------------------\n\nTITLE: Defining TypedArray Type Guard Function in TypeScript\nDESCRIPTION: A type guard function that checks if an input value is a TypedArray. Supports multiple TypedArray types including Uint8Array, Int16Array, Float32Array and others.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isTypedArray.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isTypedArray(\n  x: unknown\n): x is\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | BigUint64Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | BigInt64Array\n  | Float32Array\n  | Float64Array;\n```\n\n----------------------------------------\n\nTITLE: Importing Functions in Template Function\nDESCRIPTION: Shows how to use the 'imports' option to import external functions for use in the template. The compiled function can use the imported functions to manipulate data.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/template.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst compiled = template('<%= _.toUpper(value) %>', { imports: { _: { toUpper } } });\ncompiled({ value: 'hello, world!' }); // returns 'HELLO, WORLD!'\n```\n\n----------------------------------------\n\nTITLE: String Replacement Examples\nDESCRIPTION: Demonstrates various string replacement scenarios including static string replacements, global regex replacements, and dynamic function-based replacements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/replace.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreplace('abcde', 'de', '123'); // 'abc123'\nreplace('abcde', /[bd]/g, '-'); // 'a-c-e'\nreplace('abcde', 'de', substring => substring.toUpperCase()); // 'abcDE'\nreplace('abcde', /[bd]/g, substring => substring.toUpperCase()); // 'aBcDe'\n```\n\n----------------------------------------\n\nTITLE: Defining isSymbol Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isSymbol. It takes an unknown value as input and returns a boolean indicating whether the value is a symbol. The function also serves as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isSymbol.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSymbol(value: unknown): value is symbol;\n```\n\n----------------------------------------\n\nTITLE: Using Join Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the join function. It joins an array of strings using a custom separator and logs the result.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/join.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arr = ['a', 'b', 'c'];\nconst result = join(arr, '~');\nconsole.log(result); // Output: \"a~b~c\"\n```\n\n----------------------------------------\n\nTITLE: Function Signature for isWeakMap TypeScript Type Guard\nDESCRIPTION: TypeScript function signature that defines a type guard to check if a value is a WeakMap. The function takes an unknown value parameter and returns a type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isWeakMap.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isWeakMap(value: unknown): value is WeakMap<WeakKey, any>;\n```\n\n----------------------------------------\n\nTITLE: Defining reduceRight Function Interfaces in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interfaces for the reduceRight function. It includes overloads for arrays, array-like objects, and objects, with and without initial values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/reduceRight.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reduceRight<T, U>(\n  collection: T[],\n  iteratee: (accumulator: U, value: T, index: number, collection: T[]) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T>(collection: T[], iteratee: (accumulator: T, value: T, index: number, collection: T[]) => T): T;\n\nfunction reduceRight<T, U>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: U, value: T, index: number, collection: ArrayLike<T>) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T>(\n  collection: ArrayLike<T>,\n  iteratee: (accumulator: T, value: T, index: number, collection: ArrayLike<T>) => T\n): T;\n\nfunction reduceRight<T extends object, U>(\n  collection: T,\n  iteratee: (accumulator: U, value: T[keyof T], key: keyof T, collection: T) => U,\n  initialValue: U\n): U;\nfunction reduceRight<T extends object>(\n  collection: T,\n  iteratee: (accumulator: T[keyof T], value: T[keyof T], key: keyof T, collection: T) => T[keyof T]\n): T[keyof T];\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of 'nth' Function in TypeScript\nDESCRIPTION: Demonstrates how to use the 'nth' function to retrieve elements from an array using both positive and negative indices. Negative indices count from the end of the array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/nth.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnth([1, 2, 3], 1); // => 2\nnth([1, 2, 3], -1); // => 3\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signatures for assignWith\nDESCRIPTION: Type definitions for the assignWith function with various overloads to support different numbers of source objects. Each signature defines the parameter types and return types for different usage scenarios.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/assignWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assignWith<O, S>(\n  object: O,\n  source: S,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S) => any\n): O & S;\nfunction assignWith<O, S1, S2>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2) => any\n): O & S1 & S2;\nfunction assignWith<O, S1, S2, S3>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3) => any\n): O & S1 & S2 & S3;\nfunction assignWith<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4,\n  getValueToAssign?: (objValue: any, srcValue: any, key: string, object: O, source: S1 | S2 | S3 | S4) => any\n): O & S1 & S2 & S3 & S4;\nfunction assignWith(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining the ary function interface in Typescript\nDESCRIPTION: This code snippet shows the TypeScript interface definition for the `ary` function.  It takes a function `func` and a number `n` as input. It returns a new function with the same return type as the original function but limited to `n` arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/ary.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating keys Function Usage in TypeScript\nDESCRIPTION: This example demonstrates various use cases of the 'keys' function, including with custom objects, strings, arrays, and plain objects. It showcases how the function handles different input types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/keys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\nFoo.prototype.c = 3;\nkeys(new Foo()); // ['a', 'b'] (iteration order is not guaranteed)\n\nkeys('hi'); // ['0', '1']\nkeys([1, 2, 3]); // ['0', '1', '2']\nkeys({ a: 1, b: 2 }); // ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Defining the Update Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the update function, which modifies an object at a specified path using an updater function. The function accepts an object, a property path, and an updater function that transforms the value at that path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/update.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Defining isObject Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isObject function. It takes an optional unknown parameter and returns a boolean type predicate.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/predicate/isObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isObject(value?: unknown): value is object;\n```\n\n----------------------------------------\n\nTITLE: Add Function Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for the 'add' function which takes two number parameters and returns their sum as a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/math/add.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(value: number, other: number): number;\n```\n\n----------------------------------------\n\nTITLE: Declaring lastIndexOf Function Signature in TypeScript\nDESCRIPTION: Function signature for lastIndexOf which accepts an array of type T, a search element of the same type, and an optional fromIndex parameter. Returns the index of the last occurrence or -1 if not found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/lastIndexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lastIndexOf<T>(array: T[], searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining endsWith Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the endsWith function. It takes a string to search, a target string, and an optional position parameter.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/endsWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction endsWith(str: string, target: string, position: number = 0): string;\n```\n\n----------------------------------------\n\nTITLE: String Type Predicate Function Signature\nDESCRIPTION: TypeScript function signature defining a type predicate that checks if a value is a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isString.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isString(value: unknown): value is string;\n```\n\n----------------------------------------\n\nTITLE: updateWith Function Interface\nDESCRIPTION: Defines the TypeScript interface for the `updateWith` function, including its parameters and return type.  The function takes an object, a path, an updater function, and a customizer function as input. It returns the modified object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/updateWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateWith<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown,\n  customizer: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ary function in Typescript\nDESCRIPTION: This code demonstrates how to use the `ary` function to limit the number of arguments passed to a function. The example shows a function `fn` that takes three number arguments. The `ary` function is used to create new functions that accept 0, 1, 2, and 3 arguments respectively.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/ary.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ary } from 'es-toolkit/function';\n\nfunction fn(a: number, b: number, c: number) {\n  return Array.from(arguments);\n}\n\nary(fn, 0)(1, 2, 3); // []\nary(fn, 1)(1, 2, 3); // [1]\nary(fn, 2)(1, 2, 3); // [1, 2]\nary(fn, 3)(1, 2, 3); // [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using updateWith Function with Customizer in TypeScript\nDESCRIPTION: This example demonstrates how to use the updateWith function to modify a nested object property. It uses a customizer function to create custom path structures when parts of the path don't exist.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/updateWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateWith } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// Use a customizer function to create custom path structures\nupdateWith(object, '[0].a.b.c', n => (n as number) + 1, customizer);\n// => { '0': { a: { b: { c: 4 } } }, a: [{ b: { c: 3 } }] }\n\nfunction customizer(value: unknown) {\n  if (value == null) {\n    return {};\n  }\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining valuesIn Function Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for the valuesIn function. It shows three function overloads to handle different input types including Record types, ArrayLike types, and generic object types.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/valuesIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction valuesIn<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction valuesIn<T>(arr: ArrayLike<T>): T[];\nfunction valuesIn<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Using stubString Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the stubString function. When called, it returns an empty string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubString.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubString(); // Returns ''\n```\n\n----------------------------------------\n\nTITLE: Defining Divide Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the divide utility that takes two number parameters and returns their quotient. The function handles NaN values by returning NaN if either input is NaN.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/math/divide.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction divide(value: number, other: number): number;\n```\n\n----------------------------------------\n\nTITLE: asyncNoop Interface Definition\nDESCRIPTION: Defines the interface for the `asyncNoop` function. It is a function that takes no arguments and returns a Promise that resolves to void, indicating the completion of an asynchronous operation with no returned value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/asyncNoop.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction asyncNoop(): Promise<void>;\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating toPairsIn Usage with Objects, Sets, and Maps in TypeScript\nDESCRIPTION: This example illustrates how to use the toPairsIn function with different data structures. It shows the function's behavior with objects, sets, and maps, and the expected output for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/toPairsIn.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\ntoPairsIn(object); // [['a', 1], ['b', 2]]\n\nconst set = new Set([1, 2]);\ntoPairsIn(set); // [[1, 1], [2, 2]]\n\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\ntoPairsIn(map); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Once Function Usage Example\nDESCRIPTION: Demonstrates creating an initialization function that logs a message and returns a value only on the first invocation\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/once.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst initialize = once(() => {\n  console.log('초기화');\n  return true;\n});\n\ninitialize(); // '초기화'를 로깅하고, true를 반환해요\ninitialize(); // 로깅 없이 true를 반환해요\n```\n\n----------------------------------------\n\nTITLE: Defining isJSON Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isJSON function. It takes an unknown value as input and returns a boolean indicating if the value is a valid JSON string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/predicate/isJSON.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isJSON(value: unknown): value is string;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for flip in TypeScript\nDESCRIPTION: TypeScript signature for the flip function that takes a function and returns a new function with reversed argument order.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/flip.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction flip<F extends (...args: any[]) => any>(func: F): (...args: Reversed<Parameters<F>>) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Declaring lowerCase Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for the lowerCase string conversion utility.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/lowerCase.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lowerCase(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Using stubFalse Function Example\nDESCRIPTION: Example demonstrating the usage of stubFalse function which always returns false.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/stubFalse.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstubFalse(); // Returns false\n```\n\n----------------------------------------\n\nTITLE: Defining Property Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'property' function. It takes a path as a parameter and returns a function that accepts an object and returns a value.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/property.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction property(path: PropertyKey | PropertyKey[]): (object: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining isEmpty Function Signatures in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the isEmpty function. It demonstrates how the function is overloaded to handle different input types and return appropriate boolean results.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isEmpty.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEmpty(value: string): value is '';\nfunction isEmpty(value: Map<any, any>): boolean;\nfunction isEmpty(value: Set<any>): boolean;\nfunction isEmpty(value: any[]): value is [];\nfunction isEmpty<T extends Record<any, any>>(\n  value: T | null | undefined\n): value is Record<keyof T, never> | null | undefined;\nfunction isEmpty(value: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using invertBy Function with Default Behavior in TypeScript\nDESCRIPTION: This example demonstrates how to use the invertBy function without a custom iteratee. It creates a new object where the values become keys and the keys are grouped into arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/invertBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { invertBy } from 'es-toolkit/compat';\n\nconst obj = { a: 1, b: 2, c: 1 };\nconst result = invertBy(obj);\nconsole.log(result); // => { '1': ['a', 'c'], '2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: Defining Invariant Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the 'invariant' function. It takes a condition of unknown type and a message string, and asserts that the condition is true.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/util/invariant.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invariant(condition: unknown, message: string): asserts condition;\n```\n\n----------------------------------------\n\nTITLE: Using curryRight Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the curryRight function to create a curried version of a sum function and call it with individual arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curryRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(a: number, b: number, c: number) {\n  return a + b + c;\n}\n\nconst curriedSum = curryRight(sum);\n\n// The parameter `c` should be given the value `10`.\nconst sum10 = curriedSum(10);\n\n// The parameter `b` should be given the value `15`.\nconst sum25 = sum10(15);\n\n// The parameter `a` should be given the value `5`. The function 'sum' has received all its arguments and will now return a value.\nconst result = sum25(5); // 30\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible curryRight Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the lodash-compatible curryRight function, including usage with multiple arguments, placeholders, and custom arity.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/curryRight.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { curryRight } from 'es-toolkit/compat';\n\nconst abc = function (a, b, c) {\n  return [a, b, c];\n};\n\nconst curried = curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(curryRight.placeholder, 2)(1);\n// => [1, 2, 3]\n\n// Curried with arity.\ncurried = curryRight(abc, 2);\n\ncurried(2)(1);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Defining reverseString Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the reverseString function. It takes a string parameter and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/reverseString.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction reverseString(value: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining isSet Type Guard Function in TypeScript\nDESCRIPTION: A utility function that checks if a given value is a Set instance, returning a boolean and serving as a type guard for TypeScript type narrowing\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isSet.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSet(value: unknown): value is Set<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining Iteratee Function Signatures in TypeScript\nDESCRIPTION: TypeScript function signatures showing the different overloads of the iteratee function. Handles identity function case, function pass-through, and value-to-predicate conversion.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/iteratee.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction iteratee(value?: null): <T>(value: T) => T;\nfunction iteratee<F extends (...args: any[]) => unknown>(func: F): F;\nfunction iteratee(value: symbol | number | string | object | null): (...args: any[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Map Function Usage in TypeScript\nDESCRIPTION: This code snippet provides examples of using the map function with different types of iteratees, including transform functions, property keys, objects, and with no iteratee. It also shows usage with objects as collections.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/map.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 使用转换函数\nconst array = [1, 2, 3];\nmap(array, value => value * 2); // => [2, 4, 6]\n\n// 使用属性键作为迭代器\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, 'a'); // => [1, 2, 3]\n\n// 使用对象作为迭代器\nconst objects = [{ a: 1 }, { a: 2 }, { a: 3 }];\nmap(objects, { a: 1 }); // => [true, false, false]\n\n// 没有迭代器\nconst numbers = [1, 2, 3];\nmap(numbers); // => [1, 2, 3]\n\n// 使用对象作为集合\nconst obj = { a: 1, b: 2, c: 3 };\nmap(obj, (value, key) => `${key}: ${value}`); // => ['a: 1', 'b: 2', 'c: 3']\n```\n\n----------------------------------------\n\nTITLE: Using Find with Arrays in TypeScript\nDESCRIPTION: Demonstrates how to use the 'find' function with arrays using different matching criteria including predicate functions, partial objects, property-value pairs, and property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/find.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { find } from 'es-toolkit/compat';\n\n// Using a predicate function\nconst items = [1, 2, 3, 4, 5];\nconst result = find(items, item => item > 3);\nconsole.log(result); // 4\n\n// Using a partial object\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, { name: 'Bob' });\nconsole.log(result); // { id: 2, name: 'Bob' }\n\n// Using a property-value pair\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, ['name', 'Alice']);\nconsole.log(result); // { id: 1, name: 'Alice' }\n\n// Using a property name\nconst items = [\n  { id: 1, name: 'Alice' },\n  { id: 2, name: 'Bob' },\n];\nconst result = find(items, 'name');\nconsole.log(result); // { id: 1, name: 'Alice' }\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for methodOf Function\nDESCRIPTION: Defines the type signature for the methodOf utility function, which creates a method caller with predefined arguments\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/util/methodOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction methodOf(object: object, ...args: any[]): (path: PropertyKey | PropertyKey[]) => any;\n```\n\n----------------------------------------\n\nTITLE: Using unescape Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the unescape function from the es-toolkit library. It shows various use cases for unescaping HTML entities in strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/unescape.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unescape } from 'es-toolkit/string';\n\nunescape('This is a &lt;div&gt; element.'); // returns 'This is a <div> element.'\nunescape('This is a &quot;quote&quot;'); // returns 'This is a \"quote\"'\nunescape('This is a &#39;quote&#39;'); // returns 'This is a 'quote''\nunescape('This is a &amp; symbol'); // returns 'This is a & symbol'\n```\n\n----------------------------------------\n\nTITLE: Using flatMap with Various Collection Types in TypeScript\nDESCRIPTION: Examples demonstrating how to use the flatMap function with arrays and objects. Shows how to duplicate array elements, extract properties from object arrays, process object values, and handle nested arrays.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/flatMap.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flatMap } from 'es-toolkit/compat';\n\n// 使用返回数组的函数的基本示例\nfunction duplicate(n) {\n  return [n, n];\n}\n\nflatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n\n// 使用属性简写\nconst objects = [{ a: [1, 2] }, { a: [3, 4] }];\nflatMap(objects, 'a');\n// => [1, 2, 3, 4]\n\n// 在对象上使用\nflatMap({ a: 1, b: 2 }, n => [n, n]);\n// => [1, 1, 2, 2]\n\n// 处理嵌套数组\nflatMap([[1], [2, [3]], 4]);\n// => [1, 2, [3], 4]\n```\n\n----------------------------------------\n\nTITLE: Defining Every Function Signatures in TypeScript\nDESCRIPTION: This snippet defines multiple function signatures for the 'every' function, covering various use cases for both arrays and objects. It includes overloads for different types of condition checks.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/array/every.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction every<T>(arr: T[]): boolean;\nfunction every<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): boolean;\nfunction every<T>(arr: T[], doesMatch: Partial<T>): boolean;\nfunction every<T>(arr: T[], doesMatch: [keyof T, unknown]): boolean;\nfunction every<T>(arr: T[], doesMatch: PropertyKey): boolean;\n\nfunction every<T extends Record<string, unknown>>(\n  object: T,\n  doesMatch: (value: T[keyof T], key: keyof T, object: T) => unknown\n): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T[keyof T], unknown]): boolean;\nfunction every<T extends Record<string, unknown>>(object: T, doesMatch: PropertyKey): boolean;\n```\n\n----------------------------------------\n\nTITLE: Debounce with MaxWait Option - Typescript\nDESCRIPTION: Explains the `maxWait` option, which specifies the maximum time the function can be delayed. If the debounced function is called repeatedly within the `maxWait` period, it will execute after `maxWait` milliseconds, even if the `debounceMs` delay has not elapsed.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/debounce.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// maxWait 옵션 예시\nconst maxWaitFn = debounce(\n  () => {\n    console.log('MaxWait function executed');\n  },\n  1000,\n  { maxWait: 2000 }\n);\n\n// 'MaxWait function executed'를 2초 안에는 반드시 로깅해요.\nmaxWaitFn();\nsetTimeout(maxWaitFn, 500);\nsetTimeout(maxWaitFn, 1000);\nsetTimeout(maxWaitFn, 1500);\nsetTimeout(maxWaitFn, 2000);\nsetTimeout(maxWaitFn, 2500);\nsetTimeout(maxWaitFn, 3000);\n```\n\n----------------------------------------\n\nTITLE: Null Value Overwriting Example\nDESCRIPTION: Example demonstrating how toMerged handles null values being overwritten by array values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toMerged.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: null };\nconst source = { a: [1, 2, 3] };\nconst result = toMerged(target, source);\nconsole.log(result);\n// Output: { a: [1, 2, 3] }\n```\n\n----------------------------------------\n\nTITLE: Using isObjectLike Function with Various Value Types in TypeScript\nDESCRIPTION: This example demonstrates how to use the isObjectLike function with different types of values, including objects, arrays, strings, functions, and null. It shows the expected boolean results for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isObjectLike.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isObjectLike } from 'es-toolkit/compat';\n\nconst value1 = { a: 1 };\nconst value2 = [1, 2, 3];\nconst value3 = 'abc';\nconst value4 = () => {};\nconst value5 = null;\n\nconsole.log(isObjectLike(value1)); // true\nconsole.log(isObjectLike(value2)); // true\nconsole.log(isObjectLike(value3)); // false\nconsole.log(isObjectLike(value4)); // false\nconsole.log(isObjectLike(value5)); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Extend Function Signatures in TypeScript\nDESCRIPTION: This code snippet defines multiple function signatures for the 'extend' function, allowing it to accept different numbers of source objects with type inference.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/extend.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extend<O, S>(object: O, source: S): O & S;\nfunction extend<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction extend<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction extend<O, S1, S2, S3, S4>(object: O, source1: S1, source2: S2, source3: S3, source4: S4): O & S1 & S2 & S3;\nfunction extend(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Using Keys Function with Various Data Types in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'keys' function with different data types including custom objects, strings, arrays, and plain objects. It shows the expected return values for each case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/keys.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\nFoo.prototype.c = 3;\nkeys(new Foo()); // ['a', 'b'] (iteration order is not guaranteed)\n\nkeys('hi'); // ['0', '1']\nkeys([1, 2, 3]); // ['0', '1', '2']\nkeys({ a: 1, b: 2 }); // ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for 'assign' Function\nDESCRIPTION: This snippet defines the TypeScript interface for the 'assign' function, showing various overloads to support different numbers of source objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/assign.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assign<O, S>(object: O, source: S): O & S;\nfunction assign<O, S1, S2>(object: O, source1: S1, source2: S2): O & S1 & S2;\nfunction assign<O, S1, S2, S3>(object: O, source1: S1, source2: S2, source3: S3): O & S1 & S2 & S3;\nfunction assign<O, S1, S2, S3, S4>(\n  object: O,\n  source1: S1,\n  source2: S2,\n  source3: S3,\n  source4: S4\n): O & S1 & S2 & S3 & S4;\nfunction assign(object: any, ...sources: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Using updateWith Function with Custom Path Structure in TypeScript\nDESCRIPTION: This example demonstrates how to use the updateWith function to modify a nested object. It uses a customizer function to create custom path structures when they don't exist.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/updateWith.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateWith } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// 使用定制器函数创建自定义路径结构\nupdateWith(object, '[0].a.b.c', n => (n as number) + 1, customizer);\n// => { '0': { a: { b: { c: 4 } } }, a: [{ b: { c: 3 } }] }\n\nfunction customizer(value: unknown) {\n  if (value == null) {\n    return {};\n  }\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Function with Default Arguments\nDESCRIPTION: This example illustrates how the 'spread' function can be utilized with functions that have default arguments. It details how to position an array of arguments at a specific index while maintaining default values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/spread.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(name, greeting = 'Hello') {\n  return `${greeting}, ${name}!`;\n}\n// Create a new function that uses `spread` to position the argument array at index 0\nconst spreadGreet = spread(greet, 0);\n// Calling `spreadGreet` with an array of arguments\nconsole.log(spreadGreet(['Alice'])); // Output: Hello, Alice!\nconsole.log(spreadGreet(['Bob', 'Hi'])); // Output: Hi, Bob!\n```\n\n----------------------------------------\n\nTITLE: PartialRight Example Usage\nDESCRIPTION: Demonstrates how to use the `partialRight` function with a simple `greet` function. The example shows how to create a `greetFred` function by pre-filling the `name` argument. It also shows how to use the `partialRight.placeholder` to specify the position of the arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/partialRight.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { partialRight } from 'es-toolkit/function';\n\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nconst greetFred = partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nconst sayHelloTo = partialRight(greet, 'hello', partialRight.placeholder);\nsayHelloTo('fred');\n// => 'hello fred'\n```\n\n----------------------------------------\n\nTITLE: Using forEach Function to Iterate Over an Array in TypeScript\nDESCRIPTION: This example demonstrates how to use the forEach function to iterate over an array. It imports the function from 'es-toolkit/array', creates an array and a result array, then uses forEach to push each element into the result array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/array/forEach.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { forEach } from 'es-toolkit/array';\n\nconst array = [1, 2, 3];\nconst result: number[] = [];\n// forEach関数を使用して配列を走査し、各要素を結果配列に追加します。\nforEach(array, value => {\n  result.push(value);\n});\n\nconsole.log(result); // 出力: [3, 2, 1];\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ES-Toolkit Bundle Size Example\nDESCRIPTION: Example code demonstrating how bundle size is measured by importing a utility function from either es-toolkit or lodash-es. This code is used with esbuild 0.23.0 to analyze the resulting bundle size.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/bundle-size.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { chunk } from 'es-toolkit';\n\n// or import { chunk } from 'lodash-es';\n\nconsole.log(chunk);\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible curryRight Function in TypeScript\nDESCRIPTION: Example demonstrating the usage of the Lodash-compatible curryRight function, including partial application, placeholder usage, and arity specification.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/function/curryRight.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { curryRight } from 'es-toolkit/compat';\n\nconst abc = function (a, b, c) {\n  return [a, b, c];\n};\n\nconst curried = curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(curryRight.placeholder, 2)(1);\n// => [1, 2, 3]\n\n// Curried with arity.\ncurried = curryRight(abc, 2);\n\ncurried(2)(1);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for bindKey Function\nDESCRIPTION: Type definition for the bindKey function, showing its parameters and return type. It includes a namespace that defines a placeholder symbol for partially applied arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/function/bindKey.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bindKey<T extends Record<PropertyKey, any>, K extends keyof T>(\n  object: T,\n  key: K,\n  ...partialArgs: any[]\n): T[K] extends (...args: any[]) => any ? (...args: any[]) => ReturnType<T[K]> : never;\n\nnamespace bindKey {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature of invoke for ES-Toolkit Compatibility\nDESCRIPTION: Defines the TypeScript signature for the invoke function, which calls a method at a specified path in an object with provided arguments. It accepts an object, a path (as either a property key or array of keys), and an array of arguments to pass to the invoked method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/invoke.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invoke(object: unknown, path: PropertyKey | PropertyKey[], args: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining the Spread Function in TypeScript\nDESCRIPTION: This snippet defines a generic function 'spread' that takes another function as its argument and returns a new function which accepts an array of parameters to be spread. The returned function's signature matches the original function's signature with appropriate typing.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/spread.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction spread<F extends (...args: any[]) => any>(func: F): (argsArr: Parameters<F>) => ReturnType<F>;\n```\n\n----------------------------------------\n\nTITLE: Using flip Function to Reverse Arguments\nDESCRIPTION: Example demonstrating how to use the flip function to create a new function with reversed parameter order. The example shows importing flip from es-toolkit/compat and applying it to a function with four parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/flip.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { flip } from 'es-toolkit/compat';\n\nfunction fn(a: string, b: string, c: string, d: string) {\n  return [a, b, c, d];\n}\n\nconst flipped = flip(fn);\nflipped(1, 2, 3, 4); // => [4, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Using Rearg Function to Rearrange Function Arguments in TypeScript\nDESCRIPTION: This example demonstrates how to use the rearg function to create a new function with rearranged arguments. It creates a greeting function and then uses rearg to swap the order of its parameters.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/rearg.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rearg } from 'es-toolkit/compat';\n\nconst greet = (greeting: string, name: string) => `${greeting}, ${name}!`;\nconst rearrangedGreet = rearg(greet, 1, 0);\nconsole.log(rearrangedGreet('World', 'Hello')); // Output: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Using rearg Function to Rearrange Function Arguments\nDESCRIPTION: Example of using the rearg function to create a new function with swapped argument order. The example creates a greeting function and then rearranges its arguments to change how it's called.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/function/rearg.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { rearg } from 'es-toolkit/compat';\n\nconst greet = (greeting: string, name: string) => `${greeting}, ${name}!`;\nconst rearrangedGreet = rearg(greet, 1, 0);\nconsole.log(rearrangedGreet('World', 'Hello')); // Output: \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Defining flattenDeep Function Signature in TypeScript\nDESCRIPTION: This snippet defines the TypeScript signature for the flattenDeep function. It includes a type helper ExtractNestedArrayType to recursively unpack nested array types and extract the innermost element type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/array/flattenDeep.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 用于递归解包嵌套数组类型，以提取最内层元素的类型。\ntype ExtractNestedArrayType<T> = T extends ReadonlyArray<infer U> ? ExtractNestedArrayType<U> : T;\n\nfunction flattenDeep<T>(arr: T[]): Array<ExtractNestedArrayType<T>>;\n```\n\n----------------------------------------\n\nTITLE: Using isSafeInteger Function in TypeScript\nDESCRIPTION: Examples demonstrating how to use the isSafeInteger function to check different values. The examples show checking a regular integer, a value outside the safe integer range, a BigInt, and a string representation of a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isSafeInteger.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisSafeInteger(3); // Returns: true\nisSafeInteger(Number.MIN_SAFE_INTEGER - 1); // Returns: false\nisSafeInteger(1n); // Returns: false\nisSafeInteger('1'); // Returns: false\n```\n\n----------------------------------------\n\nTITLE: Using isArrayLikeObject Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isArrayLikeObject function from es-toolkit/compat. It checks various types of values to determine if they are non-primitive, array-like objects.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isArrayLikeObject.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isArrayLikeObject } from 'es-toolkit/compat';\n\nconsole.log(isArrayLikeObject([1, 2, 3])); // true\nconsole.log(isArrayLikeObject({ 0: 'a', length: 1 })); // true\nconsole.log(isArrayLikeObject('abc')); // false\nconsole.log(isArrayLikeObject(() => {})); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Replace Function Usage in TypeScript\nDESCRIPTION: This code snippet provides examples of using the replace function with different patterns and replacements. It showcases string and RegExp patterns, as well as string and function replacements.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/replace.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreplace('abcde', 'de', '123'); // 'abc123'\nreplace('abcde', /[bd]/g, '-'); // 'a-c-e'\nreplace('abcde', 'de', substring => substring.toUpperCase()); // 'abcDE'\nreplace('abcde', /[bd]/g, substring => substring.toUpperCase()); // 'aBcDe'\n```\n\n----------------------------------------\n\nTITLE: Defining defer Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for the defer utility that delays calling a function until the current call stack is cleared. It accepts a function and optional parameters to pass to that function when called, returning a timer ID.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/defer.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defer<F extends (...args: any[]) => any>(func: F, ...args: Parameters<F>): number;\n```\n\n----------------------------------------\n\nTITLE: HTML String Escaping Examples in TypeScript\nDESCRIPTION: Examples demonstrating how to use the escape function to convert special HTML characters like <, >, \", ', and & into their corresponding HTML entities.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/escape.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { escape } from 'es-toolkit/string';\n\nescape('This is a <div> element.'); // returns 'This is a &lt;div&gt; element.'\nescape('This is a \"quote\"'); // returns 'This is a &quot;quote&quot;'\nescape(\"This is a 'quote'\"); // returns 'This is a &#39;quote&#39;'\nescape('This is a & symbol'); // returns 'This is a &amp; symbol'\n```\n\n----------------------------------------\n\nTITLE: Using attempt Function for Error Handling in TypeScript\nDESCRIPTION: This example shows how the 'attempt' function handles errors. When an error occurs, it returns a tuple with the caught error as the first element and null as the second.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/util/attempt.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [error, result] = attempt(() => {\n  throw new Error('問題が発生しました');\n});\n// [Error, null]\n```\n\n----------------------------------------\n\nTITLE: Defining bindKey Function Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the bindKey function, which includes generic type parameters for object and key, along with the placeholder symbol namespace definition.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/function/bindKey.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bindKey<T extends Record<PropertyKey, any>, K extends keyof T>(\n  object: T,\n  key: K,\n  ...partialArgs: any[]\n): T[K] extends (...args: any[]) => any ? (...args: any[]) => ReturnType<T[K]> : never;\n\nnamespace bindKey {\n  placeholder: symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Using isArguments Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isArguments function to check various values. It shows checks on regular arguments, strict mode arguments, and a regular array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isArguments.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isArguments } from 'es-toolkit/compat';\n\nconst args = (function () {\n  return arguments;\n})();\nconst strictArgs = (function () {\n  'use strict';\n  return arguments;\n})();\nconst value = [1, 2, 3];\n\nconsole.log(isArguments(args)); // true\nconsole.log(isArguments(strictArgs)); // true\nconsole.log(isArguments(value)); // false\n```\n\n----------------------------------------\n\nTITLE: Using Method Function with Object in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'method' function. It creates an object with a nested method, then uses 'method' to create a function that invokes that method with specific arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/method.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = method('a.b', 1, 2);\nconsole.log(add(object)); // => 3\n```\n\n----------------------------------------\n\nTITLE: Defining Replace Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the replace function. It takes a target string, a pattern (string or RegExp), and a replacement (string or function) as parameters, and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/replace.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction replace(\n  target: string,\n  pattern: string | RegExp,\n  replacement: string | ((substring: string, ...args: any[]) => string)\n): string;\n```\n\n----------------------------------------\n\nTITLE: Using Lodash-Compatible Words Function with Custom Pattern in TypeScript\nDESCRIPTION: This example shows how to use the lodash-compatible version of the 'words' function, which accepts an optional regular expression pattern for custom word splitting.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/words.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { words } from 'es-toolkit/compat';\n\nwords('fred, barney, & pebbles', /[^, ]+/g);\n// Returns ['fred', 'barney', '&', 'pebbles']\n```\n\n----------------------------------------\n\nTITLE: Using invertBy Function with Custom Iteratee in TypeScript\nDESCRIPTION: This example shows how to use the invertBy function with a custom iteratee function. The iteratee transforms the values before using them as keys in the resulting object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/invertBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { invertBy } from 'es-toolkit/compat';\n\nconst obj = { a: 1, b: 2, c: 1 };\nconst customResult = invertBy(obj, value => `group${value}`);\nconsole.log(customResult); // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: startsWith Interface Definition\nDESCRIPTION: Defines the `startsWith` function interface with type annotations. It takes a string to search, a target string, and an optional starting position as parameters. It returns a boolean indicating whether the string starts with the target.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/string/startsWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunction startsWith(str: string, target: string, position: number = 0): string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining toInteger Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toInteger. It takes an optional parameter of type unknown and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toInteger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toInteger(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: Function Signature for values() in TypeScript\nDESCRIPTION: Defines the TypeScript function signatures for the values() function. It supports working with records, array-like objects, and general objects, returning arrays of their values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/values.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction values<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction values<T>(arr: ArrayLike<T>): T[];\nfunction values<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition for valuesIn\nDESCRIPTION: TypeScript function signatures for the valuesIn function, supporting objects, arrays, and null/undefined values. The function returns an array of values from the input object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/valuesIn.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction valuesIn<T>(object: Record<PropertyKey, T> | null | undefined): T[];\nfunction valuesIn<T>(arr: ArrayLike<T>): T[];\nfunction valuesIn<T extends object>(object: T | null | undefined): Array<T[keyof T]>;\n```\n\n----------------------------------------\n\nTITLE: Function Signature Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the function signatures for overSome, including generic type parameters and function overloads for type checking predicates.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/overSome.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction overSome<T, U extends T, V extends T>(\n  predicate1: (value: T) => value is U,\n  predicate2: (value: T) => value is V\n): (value: T) => value is U | V;\nfunction overSome<T>(\n  ...predicates: Array<((...values: T[]) => boolean) | ReadonlyArray<(...values: T[]) => boolean>>\n): (...values: T[]) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining updateWith Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for updateWith. It takes an object, a path, an updater function, and a customizer function as parameters, and returns the modified object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/updateWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateWith<T extends object | null | undefined>(\n  obj: T,\n  path: PropertyKey | readonly PropertyKey[],\n  updater: (value: unknown) => unknown,\n  customizer: (value: unknown) => unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Using Update Function to Modify Nested Object Values in TypeScript\nDESCRIPTION: This example demonstrates how to use the update function to modify a nested value in an object. It doubles the value of 'c' in the nested structure.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/update.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { update } from 'es-toolkit/compat';\n\nconst object = { a: [{ b: { c: 3 } }] };\n\n// 使用更新函数更新值\nupdate(object, 'a[0].b.c', n => (n as number) * 2);\n// => { a: [{ b: { c: 6 } }] }\n```\n\n----------------------------------------\n\nTITLE: Using isElement Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the isElement function to check if a value is a DOM element. It shows two cases: one with a DOM element (document.body) and another with a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/isElement.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(isElement(document.body)); // Output: true\nconsole.log(isElement('<body>')); // Output: false\n```\n\n----------------------------------------\n\nTITLE: Defining the Times Function in TypeScript\nDESCRIPTION: Function signature for the times utility that executes a function n times and returns an array of results. The function accepts an optional count parameter and a getValue function that receives the current index.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/times.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction times<R = number>(n?: number, getValue?: (index: number) => R): R[];\n```\n\n----------------------------------------\n\nTITLE: Defining toSafeInteger Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toSafeInteger. It takes an optional unknown value as input and returns a number.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/toSafeInteger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toSafeInteger(value?: unknown): number;\n```\n\n----------------------------------------\n\nTITLE: isSafeInteger Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for isSafeInteger which accepts an optional unknown value and returns a boolean indicating whether the value is a safe integer. It can also serve as a type predicate in TypeScript.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isSafeInteger.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isSafeInteger(value?: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Generation for Complex Arguments\nDESCRIPTION: Shows how to provide a custom cache key generation function for non-primitive arguments like arrays\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/memoize.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sum = (arr: number[]) => arr.reduce((x, y) => x + y, 0);\nconst memoizedSum = memoize(sum, { getCacheKey: (arr: number[]) => arr.join(',') });\n\nconsole.log(memoizedSum([1, 2])); // 3\nconsole.log(memoizedSum([1, 2])); // 3 (cached result)\nconsole.log(memoizedSum.cache.size); // 1\n```\n\n----------------------------------------\n\nTITLE: Using 'over' Function with Property Names in TypeScript\nDESCRIPTION: This example shows how to use the 'over' function with property names as iteratees. It extracts values from the provided object based on the specified property names.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/over.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = over(['a', 'b']);\nfunc({ a: 1, b: 2 });\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the currently supported versions of the project for security updates. It indicates that version 1.x is supported using a checkmark emoji.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/SECURITY.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.x     | :white_check_mark: |\n```\n\n----------------------------------------\n\nTITLE: Basic Object Key Omission Example\nDESCRIPTION: Demonstrates how to use the omit function to create a new object with specific keys removed, preserving the remaining properties\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/omit.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nconst result = omit(obj, ['b', 'c']);\n// 결과는 다음과 같아요 { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Using propertyOf with Dot Notation in TypeScript\nDESCRIPTION: This example demonstrates how to use propertyOf to create a function that retrieves a nested value from an object using dot notation for the path.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/propertyOf.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getValue = propertyOf({ a: { b: { c: 3 } } });\nconst result = getValue('a.b.c');\nconsole.log(result); // => 3\n```\n\n----------------------------------------\n\nTITLE: Debounce Function with AbortSignal Example\nDESCRIPTION: Shows how to use the debounce function with an AbortController signal for external cancellation control.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/function/debounce.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst controller = new AbortController();\nconst signal = controller.signal;\nconst debouncedWithSignalFunction = debounce(\n  () => {\n    console.log('Function executed');\n  },\n  1000,\n  { signal }\n);\n\n// Will log 'Function executed' after 1 second if not called again in that time\ndebouncedWithSignalFunction();\n\n// Will cancel the debounced function call\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Defining toSnakeCaseKeys Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for toSnakeCaseKeys. It takes a generic type T as input and returns a new type with keys converted to snake case.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/object/toSnakeCaseKeys.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toSnakeCaseKeys<T>(obj: T): ToSnakeCaseKeys<T>;\n```\n\n----------------------------------------\n\nTITLE: Defining padEnd Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing the padEnd function which takes a string, desired length, and padding character. It returns a new string padded to the specified length using the given character.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/padEnd.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction padEnd(str: string, length = 0, chars = ' '): string;\n```\n\n----------------------------------------\n\nTITLE: Defining endsWith Function Signature in TypeScript\nDESCRIPTION: Declares the function signature for endsWith, specifying the parameters and return type. It takes a string to search, a target string, and an optional position parameter.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/string/endsWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction endsWith(str: string, target: string, position: number = 0): string;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of xorBy Function with Object Arrays\nDESCRIPTION: Example demonstrating how to use the xorBy function with arrays of objects, using a mapper function to compare by object id property.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/xorBy.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nxorBy([{ id: 1 }, { id: 2 }], [{ id: 2 }, { id: 3 }], x => x.id);\n// [{ id: 1 }, { id: 3 }]を返します。\n```\n\n----------------------------------------\n\nTITLE: Using Extend Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the 'extend' function to merge properties from multiple source objects into a target object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/extend.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = { a: 1 };\nconst result = extend(target, { b: 2 }, { c: 3 });\nconsole.log(result); // Output: { a: 1, b: 2, c: 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining invoke Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the invoke function. It takes an object, a path to the method, and an array of arguments, and returns the result of the called method.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/util/invoke.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction invoke(object: unknown, path: PropertyKey | PropertyKey[], args: any[]): any;\n```\n\n----------------------------------------\n\nTITLE: Defining Omit Function Interface in TypeScript\nDESCRIPTION: Defines a generic function signature for omitting keys from an object, allowing type-safe key exclusion with TypeScript's type system\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/object/omit.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction omit<T extends Record<string, any>, K extends keyof T>(obj: T, keys: K[]): Omit<T, K>;\n```\n\n----------------------------------------\n\nTITLE: Using invertBy Function with Custom Iteratee\nDESCRIPTION: Example of using invertBy with a custom iteratee function that transforms each value before using it as a key in the result object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/invertBy.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 1 };\nconst result = invertBy(obj, value => `group${value}`);\n// result => { 'group1': ['a', 'c'], 'group2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: Defining isArrayLikeObject Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isArrayLikeObject. It takes an optional unknown value and returns a boolean indicating if the value is an ArrayLike<unknown> & object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isArrayLikeObject.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArrayLikeObject(value?: unknown): value is ArrayLike<unknown> & object;\n```\n\n----------------------------------------\n\nTITLE: Using the method Function with Object Methods\nDESCRIPTION: Example demonstrating how to use the method function to create a function that calls a nested method with specified arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/method.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = {\n  a: {\n    b: function (x, y) {\n      return x + y;\n    },\n  },\n};\n\nconst add = method('a.b', 1, 2);\nconsole.log(add(object)); // => 3\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Function Signatures in TypeScript\nDESCRIPTION: TypeScript function signatures showing two overloads: one that returns undefined when no value is provided, and another that returns a generic type T when a value is provided.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/util/constant.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constant(): () => undefined;\nfunction constant<T>(value: T): () => T;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of values() Function in TypeScript\nDESCRIPTION: Demonstrates how to use the values() function with a simple object to extract its property values into an array.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/object/values.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nvalues(obj); // => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining isArguments Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isArguments. It takes an optional unknown value and returns a boolean indicating if the value is an IArguments object.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isArguments.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isArguments(value?: unknown): value is IArguments;\n```\n\n----------------------------------------\n\nTITLE: Defining Set Function Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the 'set' function. It specifies the function's parameters and return type.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/set.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction set<T extends object>(\n  obj: T,\n  path: string | number | symbol | Array<string | number | symbol>,\n  value: unknown\n): T;\n```\n\n----------------------------------------\n\nTITLE: Defining Range Function Interface in TypeScript\nDESCRIPTION: This snippet defines the interface for the range function. It shows three function overloads to accommodate different parameter combinations.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/math/range.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction range(end: number): number[];\nfunction range(start: number, end: number): number[];\nfunction range(start: number, end: number, step: number): number[];\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of isMatch Function in TypeScript\nDESCRIPTION: This example demonstrates the basic usage of isMatch function with object comparison. It checks if an object with properties a and b matches an object with only property a.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isMatch.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisMatch({ a: 1, b: 2 }, { a: 1 }); // true\n```\n\n----------------------------------------\n\nTITLE: Declaring the method Function Signature in TypeScript\nDESCRIPTION: Function signature for the method function that creates a function which invokes a method at the specified path of an object with provided arguments.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/util/method.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction method(path: PropertyKey | PropertyKey[], ...args: any[]): (object?: unknown) => any;\n```\n\n----------------------------------------\n\nTITLE: Basic Memoization Example with Add Function\nDESCRIPTION: Demonstrates basic memoization usage by caching results of a simple addition function\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/function/memoize.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst add = (x: number) => x + 10;\nconst memoizedAdd = memoize(add);\n\nconsole.log(memoizedAdd(5)); // 15\nconsole.log(memoizedAdd(5)); // 15 (cached result)\nconsole.log(memoizedAdd.cache.size); // 1\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Object to Pairs Example\nDESCRIPTION: Demonstrates converting an object to an array of key-value pairs using toPairs function\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/compat/object/toPairs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst object = { a: 1, b: 2 };\ntoPairs(object); // [['a', 1], ['b', 2]]\n```\n\n----------------------------------------\n\nTITLE: Defining isNull Function Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript interface for the isNull function. It takes an unknown parameter and returns a boolean type guard.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/predicate/isNull.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNull(x: unknown): x is null;\n```\n\n----------------------------------------\n\nTITLE: Defining isMatch Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for isMatch. It takes two parameters of type unknown and returns a boolean.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/zh_hans/reference/compat/predicate/isMatch.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMatch(target: unknown, source: unknown): boolean;\n```\n\n----------------------------------------\n\nTITLE: Error Type Guard Examples in TypeScript\nDESCRIPTION: Demonstration of using the isError type guard function with different input types to determine Error object validity.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ko/reference/predicate/isError.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisError(new Error()); // true\nisError('error'); // false\nisError({ name: 'Error', message: '' }); // false\n```\n\n----------------------------------------\n\nTITLE: Declaring randomInt Function Signatures in TypeScript\nDESCRIPTION: Function overload signatures for the randomInt function showing both single and double parameter versions.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/randomInt.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction randomInt(maximum: number): number;\nfunction randomInt(minimum: number, maximum: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using functionsIn with Non-Object Values in TypeScript\nDESCRIPTION: Illustrates the behavior of functionsIn when called with null, undefined, or primitive values.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/object/functionsIn.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns empty array for non-objects\nfunctionsIn(null);\n// => []\nfunctionsIn(undefined);\n// => []\nfunctionsIn(1);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for 'functions' Method in TypeScript\nDESCRIPTION: Specifies the TypeScript interface for the 'functions' method. It takes an unknown object as input and returns an array of strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/compat/object/functions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction functions(object: unknown): string[];\n```\n\n----------------------------------------\n\nTITLE: toLower Usage Examples in TypeScript\nDESCRIPTION: Examples demonstrating the toLower function's behavior with different input types including strings, null values, and arrays. Shows how the function converts inputs to lowercase strings.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/string/toLower.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntoLower('--FOO-BAR--');\n// => '--foo-bar--'\n\ntoLower(null);\n// => ''\n\ntoLower([1, 2, 3]);\n// => '1,2,3'\n```\n\n----------------------------------------\n\nTITLE: Defining unescape Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the unescape function. It takes a string parameter and returns a string.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/string/unescape.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unescape(str: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining matchesProperty Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature showing parameter types and return type for the matchesProperty utility function.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/predicate/matchesProperty.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction matchesProperty(property: PropertyKey | PropertyKey[], source: unknown): (target?: unknown) => boolean;\n```\n\n----------------------------------------\n\nTITLE: uniqWith関数インターフェースの定義（TypeScript）\nDESCRIPTION: 配列から重複要素を除去するuniqWith関数のTypeScript型定義です。配列とカスタム比較関数を引数に取り、重複が除去された新しい配列を返します。\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/ja/reference/array/uniqWith.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction uniqWith<T>(arr: T[], areItemsEqual: (item1: T, item2: T) => boolean): T[];\n```\n\n----------------------------------------\n\nTITLE: Example: String Array Subset Check\nDESCRIPTION: Illustrates subset checking with string arrays, showing a failed subset comparison\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/array/isSubset.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst superset2 = ['a', 'b', 'c'];\nconst subset2 = ['a', 'd'];\n\nisSubset(superset2, subset2);\n// Return false\n```\n\n----------------------------------------\n\nTITLE: Defining the sortedIndexOf Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the sortedIndexOf function, which accepts a sorted array-like object and a value to search for, returning the index of the first occurrence or -1 if not found.\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/compat/array/sortedIndexOf.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sortedIndexOf(array: ArrayLike | null | undefined, value: T): number;\n```\n\n----------------------------------------\n\nTITLE: Range Function Type Definitions\nDESCRIPTION: TypeScript function signatures showing the three different overloads of the range function. Supports single parameter (end), two parameters (start, end), and three parameters (start, end, step).\nSOURCE: https://github.com/toss/es-toolkit/blob/main/docs/reference/math/range.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction range(end: number): number[];\nfunction range(start: number, end: number): number[];\nfunction range(start: number, end: number, step: number): number[];\n```"
  }
]