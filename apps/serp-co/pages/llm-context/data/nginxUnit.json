[
  {
    "owner": "nginx",
    "repo": "unit",
    "content": "TITLE: Complete NGINX Unit Configuration for PHP Application\nDESCRIPTION: JSON response showing the complete NGINX Unit configuration including both the listener and application settings. This shows how different configuration parts are organized in the configuration hierarchy.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"listeners\": {\n        \"127.0.0.1:8080\": {\n            \"pass\": \"applications/helloworld\"\n        }\n    },\n\n    \"applications\": {\n        \"helloworld\": {\n            \"type\": \"php\",\n            \"root\": \"/www/helloworld/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete NGINX Unit Configuration\nDESCRIPTION: curl command to retrieve the entire current configuration from NGINX Unit's control API. This displays all configured listeners and applications in a structured JSON format.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n# curl --unix-socket /path/to/control.unit.sock http://localhost/config/\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Unit for Python Applications\nDESCRIPTION: JSON configuration for NGINX Unit that sets up a listener on port 8000 and configures a Python application. This defines both the network listener and application settings including the application path and module name.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"listeners\": {\n    \"*:8000\": {\n      // Point listener to new application\n      \"pass\": \"applications/python\"\n    }\n  },\n\n  // Add an application definition\n  \"applications\": {\n    \"python\": {\n        \"type\": \"python\",\n        \"path\": \"/www/\",\n        \"module\": \"wsgi\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Unit with Docker\nDESCRIPTION: Commands to pull the Unit Docker image and run it with mounted directories for the control socket and web content. This configuration maps the host's network to the container and mounts the current directory to /www inside the container.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull unit:<TAG>\n$ mkdir /tmp/unit-control # customize as needed.\n$ docker run -d \\\n      --mount type=bind,src=/tmp/unit-control,dst=/var/run \\\n      --mount type=bind,src=.,dst=/www \\\n      --network host \\\n      unit\n```\n\n----------------------------------------\n\nTITLE: Editing NGINX Unit Configuration with unitctl\nDESCRIPTION: Command to interactively edit the active NGINX Unit configuration using the unitctl tool, which opens the configuration in a text editor where changes can be made and applied.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ unitctl edit\n```\n\n----------------------------------------\n\nTITLE: Accessing NGINX Unit Configuration API Endpoints\nDESCRIPTION: This snippet shows the structure of API endpoints for the NGINX Unit Configuration. It includes methods for managing listeners, TLS settings, routes, and various HTTP configuration options.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/unit-openapi/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n*ConfigApi* | [**delete_listener_tls_certificates**](docs/ConfigApi.md#delete_listener_tls_certificates) | **Delete** /config/listeners/{listenerName}/tls/certificate | Delete the certificate option in a listener\n*ConfigApi* | [**delete_listener_tls_conf_commands**](docs/ConfigApi.md#delete_listener_tls_conf_commands) | **Delete** /config/listeners/{listenerName}/tls/conf_commands | Delete the conf_commands object in a listener\n*ConfigApi* | [**delete_listener_tls_session**](docs/ConfigApi.md#delete_listener_tls_session) | **Delete** /config/listeners/{listenerName}/tls/session | Delete the session object in a listener\n*ConfigApi* | [**delete_listener_tls_session_ticket**](docs/ConfigApi.md#delete_listener_tls_session_ticket) | **Delete** /config/listeners/{listenerName}/tls/session/tickets/{arrayIndex} | Delete a ticket array item in a listener\n*ConfigApi* | [**delete_listener_tls_session_tickets**](docs/ConfigApi.md#delete_listener_tls_session_tickets) | **Delete** /config/listeners/{listenerName}/tls/session/tickets | Delete the tickets option in a listener\n*ConfigApi* | [**delete_listeners**](docs/ConfigApi.md#delete_listeners) | **Delete** /config/listeners | Delete all the listeners\n*ConfigApi* | [**delete_routes**](docs/ConfigApi.md#delete_routes) | **Delete** /config/routes | Delete the routes entity\n*ConfigApi* | [**delete_settings**](docs/ConfigApi.md#delete_settings) | **Delete** /config/settings | Delete the settings object\n*ConfigApi* | [**delete_settings_discard_unsafe_fields**](docs/ConfigApi.md#delete_settings_discard_unsafe_fields) | **Delete** /config/settings/http/discard_unsafe_fields | Delete the discard_unsafe_fields option\n*ConfigApi* | [**delete_settings_http**](docs/ConfigApi.md#delete_settings_http) | **Delete** /config/settings/http | Delete the http object\n*ConfigApi* | [**delete_settings_http_body_read_timeout**](docs/ConfigApi.md#delete_settings_http_body_read_timeout) | **Delete** /config/settings/http/body_read_timeout | Delete the body_read_timeout option\n*ConfigApi* | [**delete_settings_http_header_read_timeout**](docs/ConfigApi.md#delete_settings_http_header_read_timeout) | **Delete** /config/settings/http/header_read_timeout | Delete the header_read_timeout option\n*ConfigApi* | [**delete_settings_http_idle_timeout**](docs/ConfigApi.md#delete_settings_http_idle_timeout) | **Delete** /config/settings/http/idle_timeout | Delete the idle_timeout option\n*ConfigApi* | [**delete_settings_http_max_body_size**](docs/ConfigApi.md#delete_settings_http_max_body_size) | **Delete** /config/settings/http/max_body_size | Delete the max_body_size option\n*ConfigApi* | [**delete_settings_http_send_timeout**](docs/ConfigApi.md#delete_settings_http_send_timeout) | **Delete** /config/settings/http/send_timeout | Delete the send_timeout option\n*ConfigApi* | [**delete_settings_http_static**](docs/ConfigApi.md#delete_settings_http_static) | **Delete** /config/settings/http/static | Delete the static object\n*ConfigApi* | [**delete_settings_http_static_mime_type**](docs/ConfigApi.md#delete_settings_http_static_mime_type) | **Delete** /config/settings/http/static/mime_types/{mimeType} | Delete the MIME type option\n*ConfigApi* | [**delete_settings_http_static_mime_types**](docs/ConfigApi.md#delete_settings_http_static_mime_types) | **Delete** /config/settings/http/static/mime_types | Delete the mime_types object\n*ConfigApi* | [**delete_settings_listen_threads**](docs/ConfigApi.md#delete_settings_listen_threads) | **Delete** /config/settings/listen_threads | Delete the listen_threads option\n*ConfigApi* | [**delete_settings_log_route**](docs/ConfigApi.md#delete_settings_log_route) | **Delete** /config/settings/http/log_route | Delete the log_route option\n*ConfigApi* | [**delete_settings_server_version**](docs/ConfigApi.md#delete_settings_server_version) | **Delete** /config/settings/http/server_version | Delete the server_version option\n*ConfigApi* | [**delete_settings_telemetry**](docs/ConfigApi.md#delete_settings_telemetry) | **Delete** /config/settings/telemetry | Delete the telemetry object\n*ConfigApi* | [**get_access_log**](docs/ConfigApi.md#get_access_log) | **Get** /config/access_log | Retrieve the access log\n*ConfigApi* | [**get_access_log_format**](docs/ConfigApi.md#get_access_log_format) | **Get** /config/access_log/format | Retrieve the access log format option\n*ConfigApi* | [**get_access_log_path**](docs/ConfigApi.md#get_access_log_path) | **Get** /config/access_log/path | Retrieve the access log path option\n*ConfigApi* | [**get_application**](docs/ConfigApi.md#get_application) | **Get** /config/applications/{appName} | Retrieve an application object\n*ConfigApi* | [**get_applications**](docs/ConfigApi.md#get_applications) | **Get** /config/applications | Retrieve the applications object\n*ConfigApi* | [**get_config**](docs/ConfigApi.md#get_config) | **Get** /config | Retrieve the config\n*ConfigApi* | [**get_listener**](docs/ConfigApi.md#get_listener) | **Get** /config/listeners/{listenerName} | Retrieve a listener object\n*ConfigApi* | [**get_listener_backlog**](docs/ConfigApi.md#get_listener_backlog) | **Get** /config/listeners/{listenerName}/backlog | Retrieve the backlog option in a listener\n*ConfigApi* | [**get_listener_forwarded**](docs/ConfigApi.md#get_listener_forwarded) | **Get** /config/listeners/{listenerName}/forwarded | Retrieve the forwarded object in a listener\n*ConfigApi* | [**get_listener_forwarded_client_ip**](docs/ConfigApi.md#get_listener_forwarded_client_ip) | **Get** /config/listeners/{listenerName}/forwarded/client_ip | Retrieve the client_ip option in a listener\n*ConfigApi* | [**get_listener_forwarded_protocol**](docs/ConfigApi.md#get_listener_forwarded_protocol) | **Get** /config/listeners/{listenerName}/forwarded/protocol | Retrieve the protocol option in a listener\n*ConfigApi* | [**get_listener_forwarded_recursive**](docs/ConfigApi.md#get_listener_forwarded_recursive) | **Get** /config/listeners/{listenerName}/forwarded/recursive | Retrieve the recursive option in a listener\n*ConfigApi* | [**get_listener_forwarded_source**](docs/ConfigApi.md#get_listener_forwarded_source) | **Get** /config/listeners/{listenerName}/forwarded/source/{arrayIndex} | Retrieve a source array item in a listener\n*ConfigApi* | [**get_listener_pass**](docs/ConfigApi.md#get_listener_pass) | **Get** /config/listeners/{listenerName}/pass | Retrieve the pass option in a listener\n*ConfigApi* | [**get_listener_tls**](docs/ConfigApi.md#get_listener_tls) | **Get** /config/listeners/{listenerName}/tls | Retrieve the tls object in a listener\n*ConfigApi* | [**get_listener_tls_certificate**](docs/ConfigApi.md#get_listener_tls_certificate) | **Get** /config/listeners/{listenerName}/tls/certificate/{arrayIndex} | Retrieve a certificate array item in a listener\n*ConfigApi* | [**get_listener_tls_session**](docs/ConfigApi.md#get_listener_tls_session) | **Get** /config/listeners/{listenerName}/tls/session | Retrieve the session object in a listener\n*ConfigApi* | [**get_listener_tls_session_ticket**](docs/ConfigApi.md#get_listener_tls_session_ticket) | **Get** /config/listeners/{listenerName}/tls/session/tickets/{arrayIndex} | Retrieve a ticket array item in a listener\n*ConfigApi* | [**get_listeners**](docs/ConfigApi.md#get_listeners) | **Get** /config/listeners | Retrieve all the listeners\n*ConfigApi* | [**get_routes**](docs/ConfigApi.md#get_routes) | **Get** /config/routes | Retrieve the routes entity\n*ConfigApi* | [**get_settings**](docs/ConfigApi.md#get_settings) | **Get** /config/settings | Retrieve the settings object\n*ConfigApi* | [**get_settings_discard_unsafe_fields**](docs/ConfigApi.md#get_settings_discard_unsafe_fields) | **Get** /config/settings/http/discard_unsafe_fields | Retrieve the discard_unsafe_fields option from http settings\n*ConfigApi* | [**get_settings_http**](docs/ConfigApi.md#get_settings_http) | **Get** /config/settings/http | Retrieve the http object from settings\n*ConfigApi* | [**get_settings_http_body_read_timeout**](docs/ConfigApi.md#get_settings_http_body_read_timeout) | **Get** /config/settings/http/body_read_timeout | Retrieve the body_read_timeout option from http settings\n*ConfigApi* | [**get_settings_http_header_read_timeout**](docs/ConfigApi.md#get_settings_http_header_read_timeout) | **Get** /config/settings/http/header_read_timeout | Retrieve the header_read_timeout option from http settings\n*ConfigApi* | [**get_settings_http_idle_timeout**](docs/ConfigApi.md#get_settings_http_idle_timeout) | **Get** /config/settings/http/idle_timeout | Retrieve the idle_timeout option from http settings\n*ConfigApi* | [**get_settings_http_max_body_size**](docs/ConfigApi.md#get_settings_http_max_body_size) | **Get** /config/settings/http/max_body_size | Retrieve the max_body_size option from http settings\n*ConfigApi* | [**get_settings_http_send_timeout**](docs/ConfigApi.md#get_settings_http_send_timeout) | **Get** /config/settings/http/send_timeout | Retrieve the send_timeout option from http settings\n*ConfigApi* | [**get_settings_http_static**](docs/ConfigApi.md#get_settings_http_static) | **Get** /config/settings/http/static | Retrieve the static object from http settings\n*ConfigApi* | [**get_settings_http_static_mime_type**](docs/ConfigApi.md#get_settings_http_static_mime_type) | **Get** /config/settings/http/static/mime_types/{mimeType} | Retrieve the MIME type option from MIME type settings\n*ConfigApi* | [**get_settings_http_static_mime_types**](docs/ConfigApi.md#get_settings_http_static_mime_types) | **Get** /config/settings/http/static/mime_types | Retrieve the mime_types object from static settings\n*ConfigApi* | [**get_settings_listen_threads**](docs/ConfigApi.md#get_settings_listen_threads) | **Get** /config/settings/listen_threads | Retrieve the listen_threads option from settings\n*ConfigApi* | [**get_settings_log_route**](docs/ConfigApi.md#get_settings_log_route) | **Get** /config/settings/http/log_route | Retrieve the log_route option from http settings\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Unit Listeners in JSON\nDESCRIPTION: Example of a JSON configuration for NGINX Unit listeners. This snippet demonstrates how to set up a listener on port 8080 and pass requests to a specific application.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/unit-openapi/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } }\n```\n\n----------------------------------------\n\nTITLE: Using unitc for local NGINX Unit configuration examples\nDESCRIPTION: Basic examples of using unitc to interact with the Unit control API locally, demonstrating operations like viewing configuration, setting listeners, deleting applications, and certificate handling.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunitc /config\nunitc /config < unitconf.json\necho '{\"*:8080\": {\"pass\": \"routes\"}}' | unitc /config/listeners\nunitc /config/applications/my_app DELETE\nunitc /certificates/bundle cert.pem key.pem\n```\n\n----------------------------------------\n\nTITLE: Exporting Configuration from Nginx Unit\nDESCRIPTION: Shows different ways to export configuration from a running Unit instance to a file or standard output. The exported configuration includes settings and NJS modules but omits certificates due to technical limitations.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ unitctl export -f config.tar\n$ unitctl export -f -\n$ unitctl export -f - | tar xf - config.json\n$ unitctl export -f - > config.tar\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Unit on macOS using Homebrew\nDESCRIPTION: Command for installing both unitd (the Unit daemon) and unitctl (the control tool) on macOS using Homebrew package manager.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ brew install nginx/unit/unit\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Repositories for NGINX Unit Installation\nDESCRIPTION: Helper script commands to set up the correct package repositories for installing NGINX Unit on Debian, Ubuntu, Amazon Linux, Fedora, or Red Hat systems.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/nginx/unit/master/tools/setup-unit && chmod +x setup-unit\n# ./setup-unit repo-config\n```\n\n----------------------------------------\n\nTITLE: Importing Unit Configuration\nDESCRIPTION: Example of importing configuration files using the unitctl import command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ unitctl import /opt/unit/config\nImported /opt/unit/config/certificates/snake.pem -> /certificates/snake.pem\nImported /opt/unit/config/hello.js -> /js_modules/hello.js\nImported /opt/unit/config/put.json -> /config\nImported 3 files\n```\n\n----------------------------------------\n\nTITLE: Configuring a Listener for PHP Application via NGINX Unit API\nDESCRIPTION: curl command to configure a network listener for the PHP application using NGINX Unit's control API. This associates the IP address and port with the previously defined PHP application.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# curl -X PUT -d '{\"127.0.0.1:8080\": {\"pass\": \"applications/helloworld\"}}'  \\\n       --unix-socket /path/to/control.unit.sock http://localhost/config/listeners\n```\n\n----------------------------------------\n\nTITLE: Applying PHP Application Configuration via NGINX Unit API\nDESCRIPTION: curl command to send the PHP application configuration to NGINX Unit's control API. This uses the PUT method to upload a JSON configuration file to the applications section of the configuration.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n# curl -X PUT --data-binary @config.json --unix-socket  \\\n       /path/to/control.unit.sock http://localhost/config/applications\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Application Configuration for NGINX Unit\nDESCRIPTION: JSON configuration that defines a PHP application for NGINX Unit. This specifies the application type as PHP and sets the root directory where the PHP files are located.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"helloworld\": {\n        \"type\": \"php\",\n        \"root\": \"/www/helloworld/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Help Output\nDESCRIPTION: Help output showing available commands and options for the unitctl CLI tool\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCLI interface to the NGINX Unit Control API\n\nUsage: unitctl [OPTIONS] <COMMAND>\n\nCommands:\n  instances  List all running Unit processes\n  edit       Open current Unit configuration in editor\n  import     Import configuration from a directory\n  execute    Sends raw JSON payload to Unit\n  status     Get the current status of Unit\n  listeners  List active listeners\n  apps       List all configured Unit applications\n  export     Export the current configuration of Unit\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -s, --control-socket-address <CONTROL_SOCKET_ADDRESS>\n          Path (unix:/var/run/unit/control.sock), tcp address with port (127.0.0.1:80), or URL. This flag can be specified multiple times.\n  -w, --wait-timeout-seconds <WAIT_TIME_SECONDS>\n          Number of seconds to wait for control socket to become available\n  -t, --wait-max-tries <WAIT_MAX_TRIES>\n          Number of times to try to access control socket when waiting [default: 3]\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n```\n\n----------------------------------------\n\nTITLE: Using unitc with Docker containers for NGINX Unit configuration\nDESCRIPTION: Examples showing how to manage NGINX Unit configurations inside Docker containers by specifying container IDs or names, and accessing various configuration endpoints.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nunitc docker://d43251184c54 /config\necho '{\"http\": {\"log_route\": true}}' | unitc docker://d43251184c54 /settings\nunitc docker://f4f3d9e918e6/root/unit.sock /control/applications/my_app/restart\nUNIT_CTRL=docker://4d0431488982 unitc /status/requests/total\n```\n\n----------------------------------------\n\nTITLE: Querying NGINX Unit Configuration via Docker\nDESCRIPTION: Command to read the current NGINX Unit configuration using curl through Docker exec. Accesses the Unix socket at /var/run/control.unit.sock to retrieve the configuration.\nSOURCE: https://github.com/nginx/unit/blob/master/pkg/docker/welcome.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti <containerID> curl --unix-socket /var/run/control.unit.sock http://localhost/config\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Configuration\nDESCRIPTION: Example of sending a custom configuration payload using the unitctl execute command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ echo '{\n    \"listeners\": {\n        \"127.0.0.1:8080\": {\n            \"pass\": \"routes\"\n        }\n    },\n\n    \"routes\": [\n        {\n            \"action\": {\n                \"share\": \"/www/data$uri\"\n            }\n        }\n    ]\n}' | unitctl execute --http-method PUT --path /config -f -\n{\n  \"success\": \"Reconfiguration done.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Unix Socket Availability in Unitctl\nDESCRIPTION: Demonstrates how unitctl can wait for a unix socket to become available before executing a command. The example shows setting a timeout and maximum number of retry attempts when importing a configuration.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ unitctl --wait-timeout-seconds=3 --wait-max-tries=4 import /opt/unit/config`\nWaiting for 3s control socket to be available try 2/4...\nWaiting for 3s control socket to be available try 3/4...\nWaiting for 3s control socket to be available try 4/4...\nTimeout waiting for unit to start has been exceeded\n```\n\n----------------------------------------\n\nTITLE: Launching Unit with Docker using unitctl\nDESCRIPTION: Command to create a new NGINX Unit instance using the unitctl tool with the Python Docker image. This mounts a local application directory to the container for running Python applications.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ unitctl instances new 127.0.0.1:8001 /path/to/app 'unit:python'\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Unit on Debian-based Systems\nDESCRIPTION: Command to install NGINX Unit on Debian and Ubuntu distributions using the apt package manager after configuring the repositories.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# apt install unit\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX Unit on Fedora-based Systems\nDESCRIPTION: Command to install NGINX Unit on Fedora, Red Hat, and other RPM-based distributions using the yum package manager after configuring the repositories.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# yum install unit\n```\n\n----------------------------------------\n\nTITLE: Installing unitctl Command-line Tool\nDESCRIPTION: Commands to download and install the unitctl binary for managing NGINX Unit through a command-line interface. This example is for Linux systems but applies to other platforms with appropriate binary selection.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tar xzvf unitctl-master-x86_64-unknown-linux-gnu.tar.gz\n# mv unitctl /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Using unitc for remote NGINX Unit configuration examples\nDESCRIPTION: Examples demonstrating how to interact with remote Unit servers over HTTP, SSH, or through environment variables, allowing for remote configuration management and status queries.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nunitc http://192.168.0.1:8080/status\nUNIT_CTRL=http://192.168.0.1:8080 unitc /status\n\nexport UNIT_CTRL=ssh://root@unithost/var/run/control.unit.sock\nunitc /config/routes\ncat catchall_route.json | unitc POST /config/routes\necho '{\"match\":{\"uri\":\"/wp-admin/*\"},\"action\":{\"return\":403}}' | unitc INSERT /config/routes\n```\n\n----------------------------------------\n\nTITLE: Checking Unit Status\nDESCRIPTION: Example of checking Unit status in YAML format using the unitctl status command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n$ unitctl status -t yaml\nNo socket path provided - attempting to detect from running instance\nconnections:\n  accepted: 0\n  active: 0\n  idle: 0\n  closed: 0\nrequests:\n  total: 0\napplications: {}\n```\n\n----------------------------------------\n\nTITLE: Listing Unit Listeners\nDESCRIPTION: Example of listing active listeners using the unitctl listeners command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nunitctl listeners\nNo socket path provided - attempting to detect from running instance\n{\n  \"127.0.0.1:8080\": {\n    \"pass\": \"routes\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Unit Applications\nDESCRIPTION: Example of listing configured applications using the unitctl apps list command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n$ unitctl apps list\n{\n  \"wasm\": {\n    \"type\": \"wasm-wasi-component\",\n    \"component\": \"/www/wasmapp-proxy-component.wasm\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Unit Application\nDESCRIPTION: Example of restarting a specific application using the unitctl apps restart command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n$ unitctl apps restart wasm\n{\n  \"success\": \"Ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Python WSGI Application for NGINX Unit\nDESCRIPTION: A basic Python WSGI application that can be run on NGINX Unit. This script responds with a simple text message when accessed through a web browser or curl.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef application(environ, start_response):\n    start_response(\"200 OK\", [(\"Content-Type\", \"text/plain\")])\n    return (b\"Hello, Python on Unit!\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PHP Application for NGINX Unit\nDESCRIPTION: A basic PHP script that outputs a simple text message when accessed through a web browser or curl. This is used to demonstrate PHP configuration on NGINX Unit.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php echo \"Hello, PHP on Unit!\"; ?>\n```\n\n----------------------------------------\n\nTITLE: Testing a PHP Application on NGINX Unit with curl\nDESCRIPTION: Command to test the deployed PHP application by sending an HTTP request to the configured listener using curl, which should return the PHP script's output.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ curl 127.0.0.1:8080\n\n      Hello, PHP on Unit!\n```\n\n----------------------------------------\n\nTITLE: Testing an NGINX Unit Python Application with curl\nDESCRIPTION: Command to test the deployed Python application by sending an HTTP request to the configured listener using curl, which should return the application's response message.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ curl localhost:8000\n\nHello, Python on Unit!\n```\n\n----------------------------------------\n\nTITLE: Successful Configuration Response from NGINX Unit API\nDESCRIPTION: JSON response from NGINX Unit's control API indicating that the application configuration was successfully applied. This confirms that the reconfiguration operation completed without errors.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"success\": \"Reconfiguration done.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Listener Configuration Response from NGINX Unit API\nDESCRIPTION: JSON response from NGINX Unit's control API indicating that the listener configuration was successfully applied. This confirms that the network listener is now properly set up.\nSOURCE: https://github.com/nginx/unit/blob/master/README.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": \"Reconfiguration done.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing NGINX Unit Instances\nDESCRIPTION: Example output of the unitctl instances command showing running Unit processes\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ unitctl instances\nNo socket path provided - attempting to detect from running instance\nunitd instance [pid: 79489, version: 1.32.0]:\n  Executable: /opt/unit/sbin/unitd\n  API control unix socket: unix:/opt/unit/control.unit.sock\n  Child processes ids: 79489, 79489\n  Runtime flags: --no-daemon\n  Configure options: --prefix=/opt/unit --user=elijah --group=elijah --openssl\n```\n\n----------------------------------------\n\nTITLE: Starting New Unit Container\nDESCRIPTION: Example of starting a new NGINX Unit container using the unitctl instances new command\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ unitctl instances new /tmp/2 $(pwd) 'unit:wasm'\nPulling and starting a container from unit:wasm\nWill mount /tmp/2 to /var/run for socket access\nWill mount /home/user/repositories/nginx/unit/tools/unitctl to /www for application access\nNote: Container will be on host network\n```\n\n----------------------------------------\n\nTITLE: Installing the NGINX Unit Rust API Client with Cargo\nDESCRIPTION: Instructions for adding the NGINX Unit Rust API client to a Rust project using Cargo. This snippet shows how to specify the dependency in the Cargo.toml file.\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/unit-openapi/README.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nunit-openapi = { path = \"./unit-openapi\" }\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Table Structure\nDESCRIPTION: Markdown table showing the API endpoint documentation structure including class names, methods, HTTP requests and descriptions\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/unit-openapi/README.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*AccessLogApi* | [**delete_access_log**](docs/AccessLogApi.md#delete_access_log) | **Delete** /config/access_log | Delete the access log\n*AccessLogApi* | [**delete_access_log_format**](docs/AccessLogApi.md#delete_access_log_format) | **Delete** /config/access_log/format | Delete the access log format\n```\n\n----------------------------------------\n\nTITLE: Exporting Fuzzing Flags for Unit in Shell\nDESCRIPTION: Sets up environment variables for building Unit with fuzzing capabilities. Includes compiler settings and flags for various sanitizers.\nSOURCE: https://github.com/nginx/unit/blob/master/fuzzing/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export CC=clang\n$ export CXX=clang++\n$ export CFLAGS=\"-g -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION -fsanitize=fuzzer-no-link\"\n$ export CXXFLAGS=\"-g -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION  -fsanitize=fuzzer-no-link\"\n$ export LIB_FUZZING_ENGINE=\"-fsanitize=fuzzer\"\n```\n\n----------------------------------------\n\nTITLE: Building Unit for Fuzzing in Shell\nDESCRIPTION: Configures and builds Unit with fuzzing capabilities using the previously set environment variables.\nSOURCE: https://github.com/nginx/unit/blob/master/fuzzing/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ./configure --no-regex --no-pcre2 --fuzz=$LIB_FUZZING_ENGINE\n$ make fuzz -j$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Running Fuzzers for Unit in Shell\nDESCRIPTION: Creates necessary directories and runs various fuzzers with their respective seed corpora.\nSOURCE: https://github.com/nginx/unit/blob/master/fuzzing/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p build/fuzz_basic_seed\n$ mkdir -p build/fuzz_http_controller_seed\n$ mkdir -p build/fuzz_http_h1p_seed\n$ mkdir -p build/fuzz_http_h1p_peer_seed\n$ mkdir -p build/fuzz_json_seed\n\n$ ./build/fuzz_basic            build/fuzz_basic_seed            fuzzing/fuzz_basic_seed_corpus\n$ ./build/fuzz_http_controller  build/fuzz_http_controller_seed  fuzzing/fuzz_http_seed_corpus\n$ ./build/fuzz_http_h1p         build/fuzz_http_h1p_seed         fuzzing/fuzz_http_seed_corpus\n$ ./build/fuzz_http_h1p_peer    build/fuzz_http_h1p_peer_seed    fuzzing/fuzz_http_seed_corpus\n$ ./build/fuzz_json             build/fuzz_json_seed             fuzzing/fuzz_json_seed_corpus\n```\n\n----------------------------------------\n\nTITLE: Git Commit Message Example for Closing Issues in Markdown\nDESCRIPTION: An example showing the proper format for referencing and automatically closing GitHub issues in commit messages using the \"Closes:\" trailer tag.\nSOURCE: https://github.com/nginx/unit/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCloses: https://github.com/nginx/unit/issues/9999\n```\n\n----------------------------------------\n\nTITLE: Opening Rust Documentation\nDESCRIPTION: Command to generate and open the crate's documentation in a web browser\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/unit-openapi/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo doc --open\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MacOS\nDESCRIPTION: Command to install required GNU core utilities on MacOS using brew package manager\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install make gnu-sed grep gawk maven\n```\n\n----------------------------------------\n\nTITLE: Building NGINX Unit CLI Tool\nDESCRIPTION: Example commands showing how to build the unitctl binary for a specific target architecture\nSOURCE: https://github.com/nginx/unit/blob/master/tools/unitctl/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make list-targets\nx86_64-unknown-linux-gnu\n\n$ make x86_64-unknown-linux-gnu\n▶ building unitctl with flags [--quiet --release --bin unitctl --target x86_64-unknown-linux-gnu]\n\n$ file ./target/x86_64-unknown-linux-gnu/release/unitctl\n./target/x86_64-unknown-linux-gnu/release/unitctl: ELF 64-bit LSB pie executable,\nx86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,\nBuildID[sha1]=ef4b094ffd549b39a8cb27a7ba2cc0dbad87a3bc, for GNU/Linux 4.4.0,\nwith debug_info, not stripped\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Fuzzing Unit\nDESCRIPTION: Lists the minimum required packages for fuzzing Unit, which include clang, llvm, and compiler-rt.\nSOURCE: https://github.com/nginx/unit/blob/master/fuzzing/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nclang, llvm & compiler-rt\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies with Version Requirements\nDESCRIPTION: This requirements file specifies Python package dependencies with their minimum version constraints. It requires pyOpenSSL version 20.0.1 or higher and pytest version 6.0.1 or higher.\nSOURCE: https://github.com/nginx/unit/blob/master/test/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npyOpenSSL>=20.0.1\npytest>=6.0.1\n```"
  }
]