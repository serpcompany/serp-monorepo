[
  {
    "owner": "kurrent-io",
    "repo": "documentation",
    "content": "TITLE: Setting Stream Metadata with ACL in EventStoreDB\nDESCRIPTION: This C# code demonstrates how to set stream metadata with an Access Control List (ACL) in EventStoreDB. It defines read and write permissions for different users and groups.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/security.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar metadata = StreamMetadata.Build()\n    .SetCustomPropertyWithValueAsRawJsonString(\n        \"customRawJson\",\n        @\"{\n            \\\"$acl\\\": {\n                \\\"$w\\\": \\\"writer\\\",\n                \\\"$r\\\": [\n                    \\\"reader\\\",\n                    \\\"also-reader\\\"\n                ],\n                \\\"$d\\\": \\\"$admins\\\",\n                \\\"$mw\\\": \\\"$admins\\\",\n                \\\"$mr\\\": \\\"$admins\\\"\n            }\n        }\"\n    );\nawait connection.SetStreamMetadataAsync(\n    streamName, \n    ExpectedVersion.Any, \n    metadata, \n    adminCredentials\n);\n```\n\n----------------------------------------\n\nTITLE: Restoring KurrentDB from Backup in Kubernetes using YAML\nDESCRIPTION: This YAML snippet demonstrates how to restore a KurrentDB cluster from an existing KurrentDBBackup by specifying the `sourceBackup` field within the `spec` of the KurrentDB resource.  It requires the KurrentDB operator to be installed and configured to watch the `kurrent` namespace.  The snippet also defines the cluster size, Docker image, resource requests, and network settings.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/database-restore.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: kubernetes.kurrent.io/v1\nkind: KurrentDB\nmetadata:\n  name: kurrentdb-cluster\n  namespace: kurrent\nspec:\n  replicas: 1\n  image: docker.kurrent.io/kurrent-latest/kurrentdb:25.0.0\n  sourceBackup: kurrentdb-cluster-backup\n  resources:\n    requests:\n      cpu: 1000m\n      memory: 1Gi\n  network:\n    domain: kurrentdb-cluster.kurrent.test\n    loadBalancer:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Subscribing to $all Stream with Catch-Up Subscription in C#\nDESCRIPTION: This code snippet demonstrates how to create a catch-up subscription to the `$all` stream in EventStoreDB.  It shows how to handle the checkpoint with commit and prepare positions. It covers setting up subscription settings, handling events, and handling subscription drops.  Note the differences for the `$all` stream: no stream name is needed, and the checkpoint argument type is `Position?` instead of `long?`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n var settings = new CatchUpSubscriptionSettings(\n                maxLiveQueueSize: 1000,\n                readBatchSize: 500,\n                verboseLogging: false,\n                resolveLinkTos: true,\n                subscriptionName: \"MySubscription\");\n\n            _connection.SubscribeToAllFrom(\n                position: null,\n                settings: settings,\n                eventAppeared: EventAppeared,\n                liveProcessingStarted: LiveProcessingStarted,\n                subscriptionDropped: SubscriptionDropped);\n```\n\n----------------------------------------\n\nTITLE: Creating a Managed KurrentDB Cluster in Azure using Terraform\nDESCRIPTION: This HCL snippet demonstrates how to create a managed KurrentDB cluster in Azure using Terraform. It requires the cluster name, project ID, network ID, topology, instance type, disk size, disk type, server version and optionally disk iops, disk throughput and projection level.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"eventstorecloud_managed_cluster\" \"example\" {\n  name             = \"example-cluster\"\n  project_id       = \"...\"\n  network_id       = \"...\"\n  topology         = \"three-node-multi-zone\"\n  instance_type    = \"M8\"\n  disk_size        = 50\n  disk_type        = \"premium-ssd-lrs\"\n  server_version   = \"21.10\"\n  projection_level = \"user\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: EventStoreDB Transaction Example (C#)\nDESCRIPTION: This code demonstrates how to use transactions in EventStoreDB to append multiple events to a stream as a single atomic operation. It starts a transaction, writes several events using `transaction.WriteAsync`, and then commits the transaction using `transaction.CommitAsync`.  It shows how events can also be appended to the stream outside of the transaction and their effect on ordering. It requires the `EventStore.Client` and `Newtonsoft.Json` NuGet packages.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/appending.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic EventData CreateSample(int i)\n{\n    var sampleObject = new { a = i };\n    var data = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(sampleObject));\n    var metadata = Encoding.UTF8.GetBytes(\"{}\");\n    var eventPayload = new EventData(\n        Guid.NewGuid(), \n        \"event-type\", \n        true, \n        data, \n        metadata\n    );\n    return eventPayload;\n}\n\npublic static async Task Main()\n{\n    var conn = EventStoreConnection.Create(new Uri(\"tcp://admin:changeit@localhost:1113\"));\n    await conn.ConnectAsync();\n\n    using var transaction = \n        await conn.StartTransactionAsync(\"newstream\", ExpectedVersion.Any);\n\n    await transaction.WriteAsync(CreateSample(1));\n    await transaction.WriteAsync(CreateSample(2));\n    await conn.AppendToStreamAsync(\"newstream\", ExpectedVersion.Any, CreateSample(3));\n    await transaction.WriteAsync(CreateSample(4));\n    await transaction.WriteAsync(CreateSample(5));\n    await transaction.CommitAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to EventStoreDB using Connection String in C#\nDESCRIPTION: This snippet demonstrates how to connect to a local EventStoreDB instance using a connection string. It initializes the connection string, creates an `EventStoreConnection` instance, and then establishes the connection asynchronously. It uses the `admin:changeit` credentials and connects to `localhost` on port 1113.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = \"ConnectTo=tcp://admin:changeit@localhost:1113;\";\nvar connection = EventStoreConnection.Create(connectionString, builder);\nawait connection.ConnectAsync();\n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - C#\nDESCRIPTION: This snippet demonstrates how to hard delete (tombstone) a stream in KurrentDB using C#. It uses the `TombstoneAsync` method. The `streamName` is the name of the stream to tombstone, and `StreamState.Any` indicates that the operation should proceed regardless of the stream's state.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.TombstoneAsync(streamName, StreamState.Any);\n```\n\n----------------------------------------\n\nTITLE: Writing Raw Stream Metadata (Bytes)\nDESCRIPTION: This code snippet illustrates writing raw stream metadata as a byte array using the `SetStreamMetadataAsync` method. This enables the user to set the stream metadata to any arbitrary set of bytes.  An expected metastream version parameter is used for optimistic concurrency.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTask<WriteResult> SetStreamMetadataAsync(\n    string stream, long expectedMetastreamVersion, \n    byte[] metadata, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Connection in C#\nDESCRIPTION: This snippet shows how to configure the EventStoreDB .NET client to use an SSL-encrypted connection using the `UseSslConnection` method.  It explains the importance of setting `validateServer` to `true` in production environments.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nUseSslConnection(string targetHost, bool validateServer)\n```\n\n----------------------------------------\n\nTITLE: Writing Stream Metadata\nDESCRIPTION: This code snippet demonstrates how to write stream metadata using the `SetStreamMetadataAsync` method, allowing for setting stream properties like max count, max age, and access control lists. It uses a `StreamMetadata` object built with the `StreamMetadata.Create()` method, allowing you to specify settings for the stream.  An expected metastream version parameter is used for optimistic concurrency.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTask<WriteResult> SetStreamMetadataAsync(\n    string stream, long expectedMetastreamVersion, \n    StreamMetadata metadata, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Update Projection Properties (C#)\nDESCRIPTION: This C# code demonstrates how to update projection properties, such as the result stream name, using the `ProjectionsManager`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.UpdateContinuousAsync(\n    \"XboxOneSCounter\",\n    \"options({resultStreamName: '$projections-my-custom-projection-result'})\nfromAll().when({$init: function() { return { count: 0 }; }, ItemAdded: function(state, event) { if (event.data.product == 'Xbox One S') { state.count++; } return state; } }).outputState();\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Peering in AWS using Terraform\nDESCRIPTION: This HCL snippet demonstrates how to create a network peering from Kurrent Cloud to your own AWS account using Terraform.  It requires specifying the peering name, project ID, Kurrent Cloud network ID, peer resource provider (aws), peer network region, peer account ID, peer network ID (VPC ID), and CIDR blocks to be routed to the Kurrent Cloud network. This snippet assumes you have the necessary AWS provider configuration set up in your Terraform environment.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"eventstorecloud_peering\" \"example\" {\n  name                   = \"example-peering\"\n  project_id             = \"...\"\n  network_id             = \"...\"\n  peer_resource_provider = \"aws\"\n  peer_network_region    = \"us-west-2\"\n  peer_account_id        = \"...\"\n  peer_network_id        = \"vpc-12345678\"\n  routes                 = [\"10.0.0.0/16\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Existing Persistent Subscription Group in EventStoreDB (C#)\nDESCRIPTION: This code snippet demonstrates how to connect to an existing persistent subscription group in EventStoreDB using the C# client. It calls the `ConnectToPersistentSubscriptionAsync` method, providing the stream name, group name, and actions to be performed when an event appears or the subscription is dropped. The buffer size determines the number of outstanding messages the server should allow for this client.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar subscription = await connection.ConnectToPersistentSubscriptionAsync(\n    \"myStream\", \n    \"agroup\", \n    (_, evt) \n        => Console.Out.WriteLineAsync(\"event appeared\"),\n    (sub, reason, exception) \n        => Console.WriteLine($\"Subscription dropped: {reason}\")\n);\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - C#\nDESCRIPTION: This snippet demonstrates how to soft delete a stream in KurrentDB using C#. It uses the `DeleteAsync` method. The `streamName` is the name of the stream to delete, and `StreamState.Any` indicates that the operation should proceed regardless of the stream's state.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.DeleteAsync(streamName, StreamState.Any);\n```\n\n----------------------------------------\n\nTITLE: Create HTTP Sink Connector Bash\nDESCRIPTION: Creates an HTTP Sink connector in KurrentDB by sending a POST request to the connectors endpoint. It configures the connector to use the http-sink instance type, sets the URL to a PostBin endpoint, and filters streams starting with 'order-'. Requires KurrentDB to be running and accessible at localhost:2113.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -i -X POST \\\n http://localhost:2113/connectors/test-app \\\n -H \"Content-Type: application/json\" \\\n -u \"admin:changeit\" \\\n -d '{\n   \"settings\": {\n     \"InstanceTypeName\": \"http-sink\",\n     \"Url\": \"https://www.postb.in/1736471171412-2404703341890\",\n     \"Subscription:Filter:Expression\": \"order-.*?\"\n   }\n }'\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with npm\nDESCRIPTION: This command installs the `@kurrent/kurrentdb-client` package using npm. This package provides the necessary client SDK for interacting with KurrentDB. TypeScript type declarations are included in the package.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Process Event and Update Checkpoint C#\nDESCRIPTION: Processes each event received from the subscription by updating the Postgres read model and the checkpoint table. It uses a database transaction to ensure atomicity between updating the read model and the checkpoint. This code updates the read model and the checkpoint in a transactional manner.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nawait foreach (var message in subscription.Messages)\n{\n if (message is not StreamMessage.Event(var e)) continue;\n\n postgres.BeginTransaction();\n\n postgres.Execute(CartProjection.Project(e));\n\n postgres.Execute(\n  \"INSERT INTO checkpoints (read_model_name, checkpoint) \" +\n  \"VALUES (@ReadModelName, @Checkpoint) \" +\n  \"ON CONFLICT (read_model_name) DO \" +\n  \"UPDATE SET checkpoint = @Checkpoint\",\n  new\n  {\n   ReadModelName = \"carts\",\n   Checkpoint = e.OriginalEventNumber.ToInt64()\n  });\n\n postgres.Commit();\n\n Console.WriteLine($\"Projected event \" +\n   $\"#{e.OriginalEventNumber.ToInt64()} \" +\n   $\"{e.Event.EventType}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kurrent Cloud Network\nDESCRIPTION: Creates a Kurrent Cloud network using the `kurrentcloud_network` resource in Terraform. Requires `name`, `project_id`, `resource_provider`, `region`, and `cidr_block`. The network should be in the same cloud provider as the desired cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"kurrentcloud_network\" \"example\" {\n  name              = \"example-network\"\n  project_id        = kurrentcloud_project.example.id\n  resource_provider = \"aws\"\n  region            = \"us-west-2\"\n  cidr_block        = \"10.0.0.0/16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring KurrentDB Cluster from Backup using esc CLI\nDESCRIPTION: This command demonstrates how to restore a KurrentDB cluster from a backup using the `esc mesdb clusters create` command. It specifies the backup ID, instance type, disk size, network ID, and other cluster parameters. The command creates a new cluster based on the provided backup.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ esc mesdb clusters create \\\n    --description \"restore\" \\\n    --source-backup-id c10dvoarh41lb9otkdrg \\\n    --instance-type C4 --disk-size-in-gb 10 \\\n    --disk-type gp3 --network-id c10dr5qrh41lbabqa2j0 \\\n    --projection-level off --server-version 24.10 \\\n    --topology single-node  --project-id c10d0h2rh41lba1v92k0\n```\n\n----------------------------------------\n\nTITLE: Appending a Single Event to a Stream in EventStoreDB (C#)\nDESCRIPTION: This code snippet demonstrates how to append a single event to an EventStoreDB stream using the `AppendToStreamAsync` method. It serializes a sample object to JSON, creates an `EventData` instance, and then appends the event to the specified stream with `ExpectedVersion.Any` to disable optimistic concurrency checks. It requires the `EventStore.Client` and `Newtonsoft.Json` NuGet packages.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/appending.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar sampleObject = new { a = 2 };\nvar data = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(sampleObject));\nvar metadata = Encoding.UTF8.GetBytes(\"{}\");\nvar evt = new EventData(Guid.NewGuid(), \"event-type\", true, data, metadata);\nawait conn.AppendToStreamAsync(\"newstream\", ExpectedVersion.Any, evt);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Sink Configuration\nDESCRIPTION: This JSON configuration file defines the settings for the MongoDB Sink connector.  It specifies the instance type, subscription filter, database, collection, connection string, document ID source, and batching parameters. The placeholders `your-database-name`, `your-collection-name`, and `your-mongodb-connection-string` must be replaced with the actual values for the MongoDB instance.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"instanceTypeName\": \"mongodb-sink\",\n    \"subscription:filter:scope\": \"stream\",\n    \"subscription:filter:filterType\": \"prefix\",\n    \"subscription:filter:expression\": \"LoanRequest\",\n    \"database\": \"your-database-name\",\n    \"collection\": \"your-collection-name\",\n    \"connectionString\": \"your-mongodb-connection-string\",\n    \"documentId:source\": \"recordId\",\n    \"batching:batchSize\": 1000,\n    \"batching:batchTimeoutMs\": 250\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kurrent Cloud Project\nDESCRIPTION: Creates a Kurrent Cloud project using the `kurrentcloud_project` resource in Terraform.  The only required argument is the project name, which must be unique within the organization. The resource creates a project within the Kurrent Cloud platform.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"kurrentcloud_project\" \"example\" {\n  name = \"example-project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Signed Certificate Authority\nDESCRIPTION: This snippet demonstrates how to create a Certificate resource in Kubernetes using cert-manager to generate a self-signed certificate authority (CA). This CA can then be used to issue other certificates. Requires a self-signed issuer to be created first.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-ca\nspec:\n  isCA: true\n  commonName: ca\n  subject:\n    organizations:\n      - Kurrent\n    organizationalUnits:\n      - Cloud\n  secretName: ca-tls\n  privateKey:\n    algorithm: RSA\n    encoding: PKCS1\n    size: 2048\n  issuerRef:\n    name: selfsigned-issuer\n    kind: ClusterIssuer\n    group: cert-manager.io\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Persistent Subscription to Stream\nDESCRIPTION: This snippet demonstrates how to connect to an existing persistent subscription group for a specific stream in EventStoreDB. It highlights the importance of setting the `bufferSize` parameter and includes actions for event arrival and subscription drops.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-stream}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication in KurrentDB with YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure KurrentDB to use an LDAP server for authentication. It includes settings for host, port, SSL usage, bind credentials, base DN, object class, filter, group membership requirements, and role mappings.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/commercial-tools/ldap-plugin.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nAuthenticationType: ldaps\nLdapsAuth:\n  Host: 13.88.9.49\n  Port: 636 #to use plaintext protocol, set Port to 389 and UseSSL to false \n  UseSSL: true\n  ValidateServerCertificate: false #set this to true to validate the certificate chain\n  AnonymousBind: false\n  BindUser: cn=binduser,dc=mycompany,dc=local\n  BindPassword: p@ssw0rd!\n  BaseDn: ou=Lab,dc=mycompany,dc=local\n  ObjectClass: organizationalPerson\n  Filter: sAMAccountName\n  RequireGroupMembership: false #set this to true to allow authentication only if the user is a member of the group specified by RequiredGroupDn\n  GroupMembershipAttribute: memberOf\n  RequiredGroupDn: cn=ES-Users,dc=mycompany,dc=local\n  PrincipalCacheDurationSec: 60\n  LdapGroupRoles:\n      'cn=ES-Accounting,ou=Staff,dc=mycompany,dc=local': accounting\n      'cn=ES-Operations,ou=Staff,dc=mycompany,dc=local': it\n      'cn=ES-Admins,ou=Staff,dc=mycompany,dc=local': '$admins'\n```\n\n----------------------------------------\n\nTITLE: Generate user certificate using es-gencert-cli (Bash)\nDESCRIPTION: This command uses the es-gencert-cli tool to generate a user certificate for the user 'admin' that will expire in 10 days. It requires the path to the CA certificate and key files as input parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/authentication.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./es-gencert-cli create-user -username admin -days 10 -ca-certificate ./es-ca/ca.crt -ca-key ./es-ca/ca.key\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Manual Acknowledgements\nDESCRIPTION: This snippet shows how to connect to a persistent subscription and manually acknowledge or not acknowledge (Nack) messages. It describes the different Nack actions the server can take.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-with-manual-acks}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption-At-Rest (JSON)\nDESCRIPTION: This JSON configuration file enables Encryption-At-Rest in KurrentDB. It specifies the path to the master key file, enables AES-GCM encryption, and sets the key size. Replace `/secure/keys/` with the actual path to the master key.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Encryption-At-Rest.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EventStore\": {\n    \"Plugins\": {\n      \"EncryptionAtRest\": {\n        \"Enabled\": true,\n        \"MasterKey\": {\n          \"File\": {\n            \"KeyPath\": \"/secure/keys/\"  // Update with the actual path to your keys\n          }\n        },\n        \"Encryption\": {\n          \"AesGcm\": {\n            \"Enabled\": true,\n            \"KeySize\": 256  // Optional: 128, 192, 256 bits (default is 256)\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Projection\nDESCRIPTION: Code snippets for resetting a projection, which deletes the checkpoint and forces re-emission of events. Streams written to from the projection are also soft-deleted.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Append Event to Stream (.NET)\nDESCRIPTION: This C# code appends an event to a specified stream in EventStoreDB. It demonstrates creating an event data object, then appending it to a stream using the EventStoreClient.AppendToStreamAsync method. This assumes the EventStoreClient `client` has already been initialized.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/quick-tour.md#_snippet_3\n\nLANGUAGE: .NET\nCODE:\n```\nvar eventData = new EventData(\n    Uuid.NewUuid(),\n    \"event-type\",\n    Encoding.UTF8.GetBytes(\"{ \\\"message\\\": \\\"This is a test event\\\" }\")\n);\n\nawait client.AppendToStreamAsync(\n    \"some-stream\",\n    StreamState.Any,\n    new[] { eventData }\n);\n```\n\n----------------------------------------\n\nTITLE: Create Checkpoints Table SQL\nDESCRIPTION: Creates a table named 'checkpoints' in PostgreSQL to store the last processed event checkpoint for a given read model. This allows the projection to resume from the last processed event in case of restarts.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS checkpoints (\n read_model_name TEXT PRIMARY KEY,\n checkpoint BIGINT NOT NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Get Partition Result Async in C#\nDESCRIPTION: This method retrieves the result of a projection for a specific partition asynchronously. It requires the projection name and partition identifier. An optional UserCredentials parameter can be supplied for authentication. It returns a Task representing the asynchronous operation, which resolves to a string containing the partition result.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nTask<string> GetPartitionResultAsync(\n    string name, string partition, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Projection\nDESCRIPTION: Code snippets for enabling an existing projection by name.  Enabling ensures the projection starts processing events after restarts. Requires access to the projection based on ACL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Read Events from Stream (.NET)\nDESCRIPTION: This C# snippet reads events from a specified stream in EventStoreDB. It uses the EventStoreClient.ReadStreamAsync method to retrieve events from the beginning of the stream, reading forward. The results are then iterated over to process each event.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/quick-tour.md#_snippet_4\n\nLANGUAGE: .NET\nCODE:\n```\nvar events = client.ReadStreamAsync(\n    Direction.Forwards,\n    \"some-stream\",\n    StreamPosition.Start,\n    10\n);\n\nawait foreach (var resolvedEvent in events)\n{\n    // Do something with the event\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Kurrent Operator with Helm\nDESCRIPTION: This command upgrades the Kurrent Operator to a specified version using Helm. It refreshes the Helm repository, specifies the namespace where the Operator is installed, defines the target version, and deploys CRDs. The `--set enable.crds=true` flag enables the deployment of CRDs during the upgrade process.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/operator-upgrade.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\nhelm upgrade kurrentdb-operator kurrentdb-operator-repo/kurrentdb-operator \\\n  --version {version} \\\n  --namespace kurrent \\\n  --set enable.crds=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Managed KurrentDB Cluster in AWS using Terraform\nDESCRIPTION: This HCL snippet demonstrates how to create a managed KurrentDB cluster in AWS using Terraform. It requires the cluster name, project ID, network ID, topology, instance type, disk size, disk type, server version and optionally disk iops, disk throughput and projection level.  This example assumes the disk_type is GP3 which requires disk_iops and disk_throughput.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"eventstorecloud_managed_cluster\" \"example\" {\n  name             = \"example-cluster\"\n  project_id       = \"...\"\n  network_id       = \"...\"\n  topology         = \"three-node-multi-zone\"\n  instance_type    = \"M8\"\n  disk_size        = 50\n  disk_type        = \"GP3\"\n  disk_iops        = 3000\n  disk_throughput  = 125\n  server_version   = \"21.10\"\n  projection_level = \"user\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Events to a Stream in EventStoreDB (C#)\nDESCRIPTION: This snippet shows how to append a list of events to an EventStoreDB stream atomically using `AppendToStreamAsync`. It defines a `CreateSample` method to create sample events, serializes them to JSON, and then appends them to the stream using `ExpectedVersion.Any`.  It requires the `EventStore.Client` and `Newtonsoft.Json` NuGet packages. The example also shows connecting to EventStoreDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/appending.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic EventData CreateSample(int i)\n{\n    var sampleObject = new { a = i };\n    var data = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(sampleObject));\n    var metadata = Encoding.UTF8.GetBytes(\"{}\");\n    var eventPayload = new EventData(Guid.NewGuid(), \"event-type\", true, data, metadata);\n    return eventPayload;\n}\n\nstatic async Task Main()\n{\n    var conn = EventStoreConnection.Create(new Uri(\"tcp://admin:changeit@localhost:1113\"));\n    await conn.ConnectAsync();\n\n    await conn.AppendToStreamAsync(\n        \"newstream\", \n        ExpectedVersion.Any, \n        new[] { CreateSample(1), CreateSample(2), CreateSample(3) });\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Persistent Subscription\nDESCRIPTION: This snippet demonstrates how to delete a persistent subscription group from a stream. The deletion process requires the stream name, group name, and user credentials.  It showcases implementations in various languages including Python, JavaScript, TypeScript, Java, C#, Go, and Rust.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Disabling Projection\nDESCRIPTION: Code snippets for disabling a projection, saving the checkpoint. Disabling prevents further event processing after restarts. Requires access to the projection based on ACL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Creating a Persistent Subscription Group in EventStoreDB (C#)\nDESCRIPTION: This code snippet demonstrates how to create a persistent subscription group in EventStoreDB using the C# client. It defines user credentials, sets up subscription settings to start from the current position, and then calls the `CreatePersistentSubscriptionAsync` method to create the subscription group. Admin permissions are required to create a persistent subscription group.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar userCredentials = new UserCredentials(\"admin\", \"changeit\");\n\nvar settings = PersistentSubscriptionSettings\n    .Create()\n    .StartFromCurrent();\n\nvar result = await connection.CreatePersistentSubscriptionAsync(\n    \"myStream\", \n    \"agroup\", \n    settings, \n    userCredentials\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Managed KurrentDB Cluster in GCP using Terraform\nDESCRIPTION: This HCL snippet demonstrates how to create a managed KurrentDB cluster in GCP using Terraform. It requires the cluster name, project ID, network ID, topology, instance type, disk size, disk type, server version and optionally disk iops, disk throughput and projection level.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"eventstorecloud_managed_cluster\" \"example\" {\n  name             = \"example-cluster\"\n  project_id       = \"...\"\n  network_id       = \"...\"\n  topology         = \"three-node-multi-zone\"\n  instance_type    = \"M8\"\n  disk_size        = 50\n  disk_type        = \"ssd\"\n  server_version   = \"21.10\"\n  projection_level = \"user\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Kafka Sink Configuration JSON\nDESCRIPTION: This JSON configuration file is used to configure the Kafka Sink connector. It specifies the connection details for the Kafka cluster, including the instance type, subscription filter, topic, bootstrap servers, authentication details, and security protocol. Replace the placeholder values with your actual Kafka cluster details.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"instanceTypeName\": \"kafka-sink\",\n    \"subscription:filter:scope\": \"stream\",\n    \"subscription:filter:filterType\": \"prefix\",\n    \"subscription:filter:expression\": \"LoanRequest\",\n    \"topic\": \"loans\",\n    \"bootstrapServers\": \"your-kafka-cluster-url:9092\",\n    \"authentication:username\": \"your-username\",\n    \"authentication:password\": \"your-password\",\n    \"authentication:securityProtocol\": \"SaslSsl\",\n    \"waitForBrokerAck\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Projection\nDESCRIPTION: Code snippets for creating a continuous projection that processes new events as they are appended. The query parameter contains the JavaScript defining the projection.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Read Stream Events Forward Async - C#\nDESCRIPTION: This method reads a specified number of events from a stream in the forward direction starting from a given event number. The method accepts the stream name, the starting event number, the number of events to read, and whether to resolve link events. It returns a `StreamEventsSlice` containing the events read.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask<StreamEventsSlice> ReadStreamEventsForwardAsync(\n    string stream, long start, int count, bool resolveLinkTos\n);\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for CloudWatch Logs - JSON\nDESCRIPTION: This JSON defines an IAM policy that grants permissions for Kurrent Cloud to write logs to a specific CloudWatch Log group. It allows describing all log groups and creating log streams, describing log streams, and putting log events within the specified ARN.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/integrations/cloudwatch.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:DescribeLogGroups\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"${DescribeARN}\"\n    },\n    {\n      \"Action\": [\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"${ARN}:*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Subscription to $all\nDESCRIPTION: This snippet shows how to create a persistent subscription group for the `$all` stream in EventStoreDB.  Persistent subscriptions to `$all` support filtering.  This functionality was introduced in EventStoreDB 21.10.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{create-persistent-subscription-to-all}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Subscription Settings C#\nDESCRIPTION: This snippet shows how to create a `PersistentSubscriptionSettings` object using the fluent builder pattern.  It initializes the settings and configures options like resolving link tos and starting from the current position. The settings are then used when creating or updating persistent subscriptions. This example illustrates the use of chained method calls on the `PersistentSubscriptionSettings.Create()` method.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = PersistentSubscriptionSettings\n    .Create()\n    .ResolveLinkTos()\n    .StartFromCurrent();\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Sink Connector Configuration\nDESCRIPTION: This JSON configuration file defines the settings for the RabbitMQ Sink connector, including connection details, exchange name, routing key, and the filter for the stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"settings\": {\n    \"instanceTypeName\": \"rabbitmq-sink\",\n    \"subscription:filter:scope\": \"stream\",\n    \"subscription:filter:filterType\": \"prefix\",\n    \"subscription:filter:expression\": \"LoanRequest\",\n    \"host\": \"your-rabbitmq-host\", \n    \"port\": 5672,  \n    \"username\": \"your-username\", \n    \"password\": \"your-password\",  \n    \"virtualHost\": \"/\",  \n    \"exchangeName\": \"your-exchange\",  \n    \"routingKey\": \"your-routing-key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Manual Backup with Kurrent Cloud CLI\nDESCRIPTION: This command creates a manual backup of a Kurrent Cloud cluster using the `esc` CLI. It requires the cluster ID and project ID as parameters, and allows for an optional description to be added to the backup.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb backups create --description \"on demand backup\" \\\n    --source-cluster-id c1eut65o0aeu6ojco7a0 \\\n    --project-id btfjev2rh41scaatc1k0\n```\n\n----------------------------------------\n\nTITLE: Read Single Event Async - C#\nDESCRIPTION: This method reads a single event from a specified stream and event number. It takes the stream name, event number, and a boolean to resolve link events as parameters. It returns an `EventReadResult` containing the `ResolvedEvent` if the read was successful.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask<EventReadResult> ReadEventAsync(string stream, long eventNumber, bool resolveLinkTos);\n```\n\n----------------------------------------\n\nTITLE: Deploying the Operator Cluster-wide\nDESCRIPTION: This command deploys the Kurrent Operator in cluster-wide mode using Helm.  It sets the namespace, creates the namespace if it doesn't exist, enables CRD deployment, configures the Operator license, and deploys the Helm release.  Requires kubectl and helm to be configured and a valid license key.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/getting-started/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kurrentdb-operator kurrent-latest/kurrentdb-operator \\\n  --version 1.0.0 \\\n  --namespace kurrent \\\n  --create-namespace \\\n  --set crds.enabled=true \\\n  --set-file operator.license.key=/path/to/license.key \\\n  --set-file operator.license.file=/path/to/license.lic\n```\n\n----------------------------------------\n\nTITLE: Create cart_items table in Postgres\nDESCRIPTION: This SQL statement creates the `cart_items` table in Postgres. It defines the schema with columns for cart ID, product ID, product name, quantity, currency, price per unit, tax rate, and update timestamp. The composite key is `cart_id` and `product_id`. A foreign key constraint links `cart_id` to the `carts` table.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS cart_items (\n  cart_id TEXT NOT NULL,\n  product_id TEXT NOT NULL,\n  product_name TEXT NOT NULL,\n  quantity INTEGER NOT NULL,\n  currency TEXT NULL,\n  price_per_unit DECIMAL(10,2) NOT NULL,\n  tax_rate DECIMAL(5,2) NOT NULL,\n  updated_at TIMESTAMP NOT NULL,\n  PRIMARY KEY (cart_id, product_id),\n  FOREIGN KEY (cart_id) REFERENCES carts(cart_id) ON DELETE CASCADE\n)\n```\n\n----------------------------------------\n\nTITLE: Set Encryption Transformation\nDESCRIPTION: This command configures KurrentDB to use AES Galois Counter Mode (AES-GCM) for encryption.  This line must be added to the main KurrentDB configuration file to specify the encryption transformation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Encryption-At-Rest.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTransform: aes-gcm\n```\n\n----------------------------------------\n\nTITLE: Enable Category Projection (C#)\nDESCRIPTION: This C# code enables the built-in `$by_category` projection, which allows selecting events from a specific category of streams.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.EnableAsync(\"$by_category\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Deploy Kafka Sink Connector (PowerShell)\nDESCRIPTION: This PowerShell command deploys the Kafka Sink connector instance in KurrentDB using a POST request to the KurrentDB API.  It utilizes `curl` to send the configuration file (`kafka-sink-config.json`) as the request body. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-H \"content-type: application/json\" -d '@kafka-sink-config.json' `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: EventStoreDB Cluster Connection using DNS C#\nDESCRIPTION: This snippet demonstrates connecting to an EventStoreDB cluster using a DNS name. It sets the `ConnectTo` parameter to `discover://`, indicating a cluster connection, specifies the admin credentials, and sets the DNS name and port for the cluster gossip endpoint. The `HeartBeatTimeout` is also configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nConnectTo=discover://admin:changeit@mycluster:3114; HeartBeatTimeout=500\n```\n\n----------------------------------------\n\nTITLE: Updating Persistent Subscription Settings C#\nDESCRIPTION: This snippet demonstrates how to update the settings of an existing persistent subscription using the `UpdatePersistentSubscriptionAsync` method. It creates a `PersistentSubscriptionSettings` object with desired configurations and then updates the subscription group with the new settings. The example uses `ResolveLinkTos` and `StartFromCurrent` to configure the settings.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = PersistentSubscriptionSettings\n    .Create()\n    .ResolveLinkTos()\n    .StartFromCurrent();\n\nvar result = await connection.UpdatePersistentSubscriptionAsync(\n    stream, \"agroup\", settings, MyCredentials\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Signed Certificate Authority Issuer\nDESCRIPTION: This snippet shows how to create an Issuer resource in Kubernetes using cert-manager, referencing the previously created CA certificate. This allows other certificates to be issued by this certificate authority.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: ca-issuer\nspec:\n  ca:\n    secretName: ca-tls\n```\n\n----------------------------------------\n\nTITLE: Listing Persistent Subscriptions for a Stream C#\nDESCRIPTION: This snippet demonstrates how to list persistent subscriptions for a specific stream using the `List` method of the `PersistentSubscriptionsManager`. It requires the stream name and optionally accepts user credentials. The user must have access to the specified stream to retrieve the subscription details.  It is an asynchronous operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nTask List(string stream, UserCredentials userCredentials = null);\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Sink Connector (Powershell)\nDESCRIPTION: This PowerShell command deploys the RabbitMQ Sink connector to KurrentDB by sending a POST request to the KurrentDB API with the configuration file. Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_1\n\nLANGUAGE: Powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-H \"content-type: application/json\" -d '@rabbitmq-sink-config.json' `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: Example Pulumi plugin install (Bash)\nDESCRIPTION: Example of installing the EventStoreCloud Pulumi plugin with a specific version.  It uses the version v0.2.3 as plugin name and v0.2.7 for the download URL. Requires Pulumi CLI to be installed.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/pulumi.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npulumi plugin install resource eventstorecloud v0.2.3 \\\n  --server https://github.com/kurrent-io/pulumi-eventstorecloud/releases/download/v0.2.7\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-Scavenge YAML\nDESCRIPTION: Enables Auto-Scavenge in the KurrentDB configuration file. Requires restarting the KurrentDB cluster after making the change. It changes the `Enabled` property to `true` which activates the Auto-Scavenge plugin on the next restart.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nAutoScavenge:\n  Enabled: true\n```\n\n----------------------------------------\n\nTITLE: Applying KurrentDBBackup Resource (Bash)\nDESCRIPTION: This bash command uses `kubectl` to apply the KurrentDBBackup resource defined in the `backup.yaml` file to the `kurrent` namespace. This command triggers the KurrentDB Operator to create a volume snapshot of the KurrentDB cluster's data volume, according to the specifications in the YAML file.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/database-backup.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nkubectl -n kurrent apply -f backup.yaml\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Sink Connector via API (PowerShell)\nDESCRIPTION: This PowerShell command creates a MongoDB Sink connector instance in KurrentDB by sending a POST request to the KurrentDB API. It uses curl, including authentication credentials and the JSON configuration file specified via the `-d` option. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-H \"content-type: application/json\" -d '@mongodb-sink-config.json' `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: Subscribe to Stream (C#)\nDESCRIPTION: This C# code snippet demonstrates how to subscribe to a stream in KurrentDB for real-time updates. It subscribes to the `$ce-cart` stream (cart category system projection) from a specified `streamPosition`. The `true` parameter indicates that linked events should be automatically resolved.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-4.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nawait using var subscription = esdb.SubscribeToStream(                   // Subscribe events..\n      \"$ce-cart\",                                                          // from the cart category system projection..        \n      streamPosition,                                                      // from this position..\n      true);                                                               // with linked events automatically resolved (required for system projections)\n```\n\n----------------------------------------\n\nTITLE: EventStoreDB Cluster Connection using Gossip Seeds C#\nDESCRIPTION: This snippet demonstrates connecting to an EventStoreDB cluster using gossip seeds. It sets the `GossipSeeds` parameter to a comma-separated list of IP address and port combinations, and sets the `HeartBeatTimeout`. The client uses these seeds to discover other nodes in the cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nGossipSeeds=192.168.0.2:1111,192.168.0.3:1111; HeartBeatTimeout=500\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - JavaScript\nDESCRIPTION: This snippet shows how to soft delete a stream in KurrentDB using JavaScript. It utilizes the `deleteStream` method on the KurrentDB client object. It requires the `streamName` as a parameter, which represents the name of the stream to be deleted.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.deleteStream(streamName);\n```\n\n----------------------------------------\n\nTITLE: Replicator Configuration Example YAML\nDESCRIPTION: This YAML configuration is used for the Kurrent Replicator tool to migrate data from a source KurrentDB instance to a Kurrent Cloud cluster. It specifies the connection strings for the reader and sink, the protocol to use (TCP for the source, gRPC for the target), and other parameters such as partition count and buffer size. This configuration is designed for a simple migration scenario without filtering or transformations.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/migration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreplicator:\n  reader:\n    connectionString: ConnectTo=tcp://admin:changeit@my-instance.acme.company:1113; HeartBeatTimeout=500; UseSslConnection=false;\n    protocol: tcp\n  sink:\n    connectionString: kurrentdb+discover://username:password@clusterid.mesdb.eventstore.cloud:2113\n    protocol: grpc\n    partitionCount: 1\n    bufferSize: 1000\n  scavenge: false\n  transform: null\n  filters: []\n  checkpoint:\n    path: \"./checkpoint\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading a KurrentDB Cluster using Kurrent Cloud CLI\nDESCRIPTION: This snippet shows how to upgrade a KurrentDB cluster to a specific version using the Kurrent Cloud CLI (`esc`). The `clusters upgrade` command requires the target version tag, cluster ID, project ID, and organization ID. The version must be a full version tag (e.g., 24.10.1).\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb clusters upgrade \\\n    --target-tag 24.10.1 \\\n    --id cn7dd2do0aekgb8nbf20 \\\n    --project-id cn62uolo0aegb5icm0bg \\\n    --org-id 9bsv0s4qu99g029v5560\n```\n\n----------------------------------------\n\nTITLE: Start Kafka Sink Connector (PowerShell)\nDESCRIPTION: This PowerShell command starts the Kafka Sink connector to begin streaming events from KurrentDB to Kafka. It sends a POST request to the KurrentDB API. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Project CustomerStartedShopping Event C#\nDESCRIPTION: Handles the projection for the 'CustomerStartedShopping' event by inserting a new cart record into the 'carts' table if one doesn't already exist.  The SQL statement uses `ON CONFLICT DO NOTHING` to ensure idempotent behavior.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nprivate static IEnumerable<CommandDefinition>? Project(CustomerStartedShopping evt)\n{\n var sql = @\"INSERT INTO carts(cart_id, customer_id, status, created_at, updated_at)\n  VALUES(@CartId, @CustomerId, @Status, @Timestamp, @Timestamp)\n  ON CONFLICT(cart_id) DO NOTHING\";\n\n var parameters = new { CartId = evt.cartId, CustomerId = evt.customerId, Status = \"STARTED\", Timestamp = evt.at };\n\n yield return new CommandDefinition(sql, parameters);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Stream C#\nDESCRIPTION: Subscribes to the '$ce-cart' stream from KurrentDB, starting from the position indicated by the retrieved checkpoint. The subscription resolves linked events automatically, which is required for system projections. The subscription listens for events related to carts.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nawait using var subscription = esdb.SubscribeToStream(\n \"$ce-cart\",\n streamPosition,\n true);\n```\n\n----------------------------------------\n\nTITLE: Replaying Parked Messages in EventStoreDB (C#)\nDESCRIPTION: This code snippet shows how to replay parked messages for a specific persistent subscription in EventStoreDB using C#. It provides a method signature for replaying parked messages that were parked by a negative acknowledgement action.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic Task ReplayParkedMessages(\n    string stream,\n    string subscriptionName,\n    UserCredentials userCredentials = null\n)\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Sink Connector via API (Bash)\nDESCRIPTION: This Bash command creates a MongoDB Sink connector instance in KurrentDB by sending a POST request to the KurrentDB API. It uses curl, including authentication credentials and the JSON configuration file specified via the `-d` option. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-H \"content-type: application/json\" -d '@mongodb-sink-config.json' \\\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: Stop Kafka Sink Connector (Bash)\nDESCRIPTION: This Bash command stops the Kafka Sink connector to free up resources. It sends a POST request to the KurrentDB API. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: Projecting ItemGotRemoved Event to Redis - C#\nDESCRIPTION: This C# code projects an `ItemGotRemoved` event to Redis by decrementing the product quantity in a sorted set.  It uses Redis transaction to keep data consistent.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Project(ITransaction txn, ItemGotRemoved removedEvent)\n{\n   var hourKey = $\"top-10-products:{removedEvent.at:yyyyMMddHH}\";          // Create a key for the current hour\n   var productKey = removedEvent.productId;                                // Use the product ID as the member in the sorted set\n\n   txn.SortedSetDecrementAsync(hourKey, productKey,                        // Decrement the quantity of the product in the sorted set\n      removedEvent.quantity); \n\n   Console.WriteLine($\"Decremented product {removedEvent.productId} in \" +\n                     $\"{hourKey} by {removedEvent.quantity}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - TypeScript\nDESCRIPTION: This snippet demonstrates how to soft delete a stream in KurrentDB using TypeScript. It utilizes the `deleteStream` method on the KurrentDB client object. It requires the `streamName` as a parameter, which represents the name of the stream to be deleted.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.deleteStream(streamName);\n```\n\n----------------------------------------\n\nTITLE: Creating an IP Access List with the ESC CLI\nDESCRIPTION: This command creates an IP Access List (ACL) using the `esc` CLI.  It requires specifying the name using the `--name` flag and the CIDR blocks using the `--cidr-blocks` flag. Optionally, a comment can be added to each CIDR block using the `cidr-block,comment` format.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/networking/public-network.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nesc infra acl create \\\n    --name \"Production Access\" \\\n    --cidr-blocks \"12.23.56.0/24\" \\\n    --cidr-blocks \"12.23.57.0/24,Engineering\"\n```\n\n----------------------------------------\n\nTITLE: Expanding Disks of a KurrentDB Cluster using Kurrent Cloud CLI\nDESCRIPTION: This snippet demonstrates how to expand the disk size of a KurrentDB cluster using the Kurrent Cloud CLI (`esc`). The `clusters expand` command is used, specifying the new disk size in GB, the cluster ID, project ID, and organization ID.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb clusters expand \\\n    --disk-size-in-gb 16 --id c3fi17to0aer9r834480 \\\n    --project-id c3fhvdto0aepmg0789m0 \\\n    --org-id bt77lfqrh41scaatc180\n```\n\n----------------------------------------\n\nTITLE: Resizing a KurrentDB Cluster using Kurrent Cloud CLI\nDESCRIPTION: This snippet demonstrates how to resize a KurrentDB cluster using the Kurrent Cloud CLI (`esc`). It utilizes the `clusters resize` subcommand with parameters for target size, cluster ID, project ID, and organization ID. Ensure the target size is one of the possible values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb clusters resize \\\n    --target-size C4 \\\n    --id cn7dd2do0aekgb8nbf20 \\\n    --project-id cn62uolo0aegb5icm0bg \\\n    --org-id 9bsv0s4qu99g029v5560\n```\n\n----------------------------------------\n\nTITLE: Stop Kafka Sink Connector (PowerShell)\nDESCRIPTION: This PowerShell command stops the Kafka Sink connector to free up resources. It sends a POST request to the KurrentDB API. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry package (NodeJS)\nDESCRIPTION: These commands install the `@kurrent/opentelemetry` package using npm, yarn, or pnpm. This package provides OpenTelemetry support for the KurrentDB NodeJS client, including TypeScript type definitions.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @kurrent/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Fluent API for ConnectionSettings in C#\nDESCRIPTION: This snippet demonstrates the fluent API for configuring connection settings. It shows how to chain configuration methods like `KeepReconnecting()` before building the settings and creating a connection. It also showcases how to pass the builder directly to the `Create` method, which implicitly builds the settings.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar settings = ConnectionSettings\n    .Create()\n    .KeepReconnecting()\n    .Build();\nvar connection = EventStoreConnection.Create(\n    settings, new Uri(\"tcp://admin:changeit@localhost:1113\")\n);\n```\n\n----------------------------------------\n\nTITLE: Generate Master Key with es-cli\nDESCRIPTION: This command generates a master key used for deriving data keys to encrypt KurrentDB chunk files. The es-cli tool must be downloaded from Cloudsmith.  The generated key should be stored in a secure location, preferably on a separate drive.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Encryption-At-Rest.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nes-cli encryption generate-master-key\n```\n\n----------------------------------------\n\nTITLE: Updating a Persistent Subscription\nDESCRIPTION: This snippet demonstrates how to update the settings of an existing persistent subscription group in EventStoreDB. It requires admin permissions. Updating the subscription group resets it internally, dropping and reconnecting the connections.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{update-persistent-subscription}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Configure Auto-Scavenge Schedule HTTP POST\nDESCRIPTION: Configures the Auto-Scavenge schedule using the `/auto-scavenge/configure` HTTP endpoint. Requires a valid license and `$ops` or `$admin` role.  The cron expression specifies the schedule, replace the credentials. The example shows how to set the schedule to run at 03:00 every day.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST https://127.0.0.1:2113/auto-scavenge/configure\nContent-Type: application/json\nAuthorization: Basic <admin:changeit>\n\n   {\n    \"schedule\": \"0 3 * * *\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Deploying RabbitMQ Sink Connector (Bash)\nDESCRIPTION: This Bash command deploys the RabbitMQ Sink connector to KurrentDB by sending a POST request to the KurrentDB API with the configuration file. Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-H \"content-type: application/json\" -d '@rabbitmq-sink-config.json' \\\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: Deploying a LetsEncrypt ClusterIssuer with AWS Route53\nDESCRIPTION: This snippet demonstrates how to create a ClusterIssuer resource in Kubernetes using cert-manager to obtain certificates from LetsEncrypt, leveraging AWS Route53 for DNS challenges. It requires the cert-manager to be installed and configured, along with appropriate AWS credentials and DNS zone information.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    privateKeySecretRef:\n      name: letsencrypt-issuer-key\n    email: { email }\n    preferredChain: \"\"\n    server: https://acme-v02.api.letsencrypt.org/directory\n    solvers:\n      - dns01:\n          route53:\n            region: { region }\n            hostedZoneID: { hostedZoneId }\n            accessKeyID: { accessKeyId }\n            secretAccessKeySecretRef:\n              name: aws-route53-credentials\n              key: secretAccessKey\n        selector:\n          dnsZones:\n            - { domain }\n            - \"*.{ domain }\"\n```\n\n----------------------------------------\n\nTITLE: Reconfigure HTTP Sink Connector Bash\nDESCRIPTION: Reconfigures an existing HTTP Sink connector in KurrentDB by sending a PUT request to the connectors/{connector_id}/settings endpoint. It updates the 'Url' setting of the connector. Requires the connector to exist before reconfiguring.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -i -X PUT \\\n http://localhost:2113/connectors/test-app/settings \\\n -H \"Content-Type: application/json\" \\\n -u \"admin:changeit\" \\\n -d '{\n     \"Url\": \"https://www.postb.in/1738100652703-1518676236737\"\n }'\n```\n\n----------------------------------------\n\nTITLE: Updating IP Access List using 'esc' CLI\nDESCRIPTION: This snippet demonstrates how to update an IP Access List using the 'esc infra acl update' command.  It requires the IP Access List ID and allows specifying CIDR blocks with optional comments. It's crucial to include all desired CIDR blocks, as omitting any will remove them from the list. The ID is provided via the `--id` flag, and CIDR blocks are added using `--cidr-blocks`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/networking/public-network.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nesc infra acl update \\\n    --id \"cu3hlaiirsdmuidcjffg\" \\\n    --cidr-blocks \"12.23.56.0/24,Engineering\" \\\n    --cidr-blocks \"12.23.57.0/24,Operations\"\n```\n\n----------------------------------------\n\nTITLE: Read Stream Events Forward with Paging - C#\nDESCRIPTION: This example demonstrates how to read all events in a stream by paging through the results. It uses a loop to repeatedly call `ReadStreamEventsForwardAsync` until the end of the stream is reached. It accumulates the resolved events in a list.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar streamEvents = new List<ResolvedEvent>();\n\nStreamEventsSlice currentSlice;\nvar nextSliceStart = StreamPosition.Start;\ndo\n{\n    currentSlice = await _connection.ReadStreamEventsForwardAsync(\n        \"myStream\", \n        nextSliceStart, \n        200, false\n    );\n\n    nextSliceStart = currentSlice.NextEventNumber;\n\n    streamEvents.AddRange(currentSlice.Events);\n} while (!currentSlice.IsEndOfStream);\n```\n\n----------------------------------------\n\nTITLE: Start RabbitMQ Sink Connector (Bash)\nDESCRIPTION: This Bash command starts the RabbitMQ Sink connector in KurrentDB using a POST request to the API. Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Processing Events from Stream - C#\nDESCRIPTION: This C# code iterates through messages from the stream, projects events into Redis, and updates the checkpoint. A Redis transaction ensures atomicity of updates.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nawait foreach (var message in subscription.Messages)                     // Iterate through the messages in the subscription\n{\n   if (message is not StreamMessage.Event(var e)) continue;             // Skip if message is not an event\n\n   var txn = redis.CreateTransaction();                                 // Create a transaction for Redis\n\n   if (!CartProjection.TryProject(txn, e)) continue;                    // Project the event into Redis\n\n   txn.StringSetAsync(\"checkpoint\", e.OriginalEventNumber.ToInt64());   // Set the checkpoint to the current event number\n   \n   txn.Execute();                                                       // Execute the transaction\n}\n```\n\n----------------------------------------\n\nTITLE: Get Result Async in C#\nDESCRIPTION: This method retrieves the overall result of a projection asynchronously. It requires the projection name as input. An optional UserCredentials parameter can be provided for authentication. It returns a Task representing the asynchronous operation, which resolves to a string containing the projection result.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nTask<string> GetResult(string name, UserCredentials userCredentials = null);\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent Subscription to a Stream\nDESCRIPTION: This snippet demonstrates how to create a persistent subscription group for a specific stream in EventStoreDB. It requires admin permissions and handles the case where the subscription group already exists. The stream can be a normal stream or a stream of links.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{create-persistent-subscription-to-stream}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Creating Projection Management Client\nDESCRIPTION: Code snippets for creating a projection management client in various languages. These clients are used to manage projections within the KurrentDB system.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Download Kurrent Cloud Provider (Linux)\nDESCRIPTION: Downloads the Kurrent Cloud Terraform provider binary for Linux systems.  The script constructs the filename using the Terraform provider version and then uses `curl` to download the file. It requires `curl` and `unzip` utilities.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nVERSION={{ $frontmatter.terraform_current_version }}\n\ncurl -LO https://github.com/kurrent-io/terraform-provider-kurrentcloud/releases/download/v${VERSION}/terraform-provider-kurrentcloud_${VERSION}_linux_amd64.zip\nunzip terraform-provider-kurrentcloud_${VERSION}_linux_amd64.zip\nmv terraform-provider-kurrentcloud_v${VERSION} ~/.terraform.d/plugins/\n```\n\n----------------------------------------\n\nTITLE: Cluster DNS Discovery Connection String\nDESCRIPTION: This C# code defines a connection string to connect to an EventStoreDB cluster using DNS discovery. It sets the `ConnectTo`, `TargetHost`, `CompatibilityMode`, and `ValidateServer` parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar clusterDnsConnectionString = \n    $\"ConnectTo=discover://{dns_address}:2113;TargetHost={dns_address};\" +\n    \"CompatibilityMode=auto;ValidateServer=true;\"\n```\n\n----------------------------------------\n\nTITLE: Set up OpenTelemetry Exporter\nDESCRIPTION: This code snippet shows how to set up OpenTelemetry exporters for the KurrentDB client. The specific implementation details vary depending on the programming language (NodeJS, Java, C#), but the overall goal is to configure the client to export trace data to a collector or backend like Jaeger or Seq. The specific code is defined externally by the @code directive.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Building ConnectionSettings in C#\nDESCRIPTION: This snippet shows how to build `ConnectionSettings` from a `ConnectionSettingsBuilder` instance and then use it to create an `EventStoreConnection`.  This illustrates the basic pattern for configuring and establishing a connection to EventStoreDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar settings = settingsBuilder.Build();\nvar connection = EventStoreConnection.Create(settings);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream (Hard Delete)\nDESCRIPTION: This code snippet demonstrates how to hard-delete a stream using the `DeleteStreamAsync` method. Hard-deleting appends a tombstone event, preventing new events from being appended.  The `expectedVersion` parameter is important for ensuring correct concurrency control during the deletion process.  Using hard delete is permanent and prevents stream recreation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTask<DeleteResult> DeleteStreamAsync(\n    string stream, long expectedVersion, bool hardDelete, \n    UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Gossip Seeds Connection String\nDESCRIPTION: This C# code defines a connection string to connect to an EventStoreDB cluster using Gossip Seeds. It sets the `GossipSeeds`, `CompatibilityMode`, and `ValidateServer` parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar gossipSeedConnectionSTring = \n    $\"GossipSeeds={node1}:2113,{node2}:2113,{node3}:2113;\" + \n    \"CompatibilityMode=auto;ValidateServer=true;\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Cluster Protection using Kurrent Cloud CLI\nDESCRIPTION: This snippet demonstrates how to protect a KurrentDB cluster from deletion using the Kurrent Cloud CLI (`esc`). The `clusters update` command is used to set the `protected` parameter to `true`, preventing accidental deletion. The command requires the cluster ID.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb clusters update --id cis4pcid60b5q96r8hm0 --protected true\n```\n\n----------------------------------------\n\nTITLE: Select all from cart_items table\nDESCRIPTION: This SQL query selects all columns and rows from the `cart_items` table in the Postgres database. It is used to review the items in each shopping cart that have been projected from the KurrentDB events.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from cart_items;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Stream with Catch-Up Subscription in C#\nDESCRIPTION: This code snippet demonstrates how to create a catch-up subscription to a specific stream in EventStoreDB using the `SubscribeToStreamFrom` method. It includes setting up subscription settings, handling events, and handling subscription drops. The code also illustrates creating an instance of `CatchUpSubscriptionSettings` and using `CatchUpSubscriptionSettings.Default`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n var settings = new CatchUpSubscriptionSettings(\n                maxLiveQueueSize: 1000,\n                readBatchSize: 500,\n                verboseLogging: false,\n                resolveLinkTos: true,\n                subscriptionName: \"MySubscription\");\n\n            _connection.SubscribeToStreamFrom(\n                streamName: \"some-stream\",\n                lastCheckpoint: null,\n                settings: settings,\n                eventAppeared: EventAppeared,\n                liveProcessingStarted: LiveProcessingStarted,\n                subscriptionDropped: SubscriptionDropped);\n```\n\n----------------------------------------\n\nTITLE: Listing Continuous Projections\nDESCRIPTION: Code snippets for listing all continuous projections.  Refer to the 'projection details' section for value explanations.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Disabling Cluster Protection using Kurrent Cloud CLI\nDESCRIPTION: This snippet shows how to disable deletion protection on a KurrentDB cluster using the Kurrent Cloud CLI (`esc`). The `clusters update` command is used to set the `protected` parameter to `false`, allowing the cluster to be deleted. The command requires the cluster ID.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb clusters update --id cis4pcid60b5q96r8hm0 --protected false\n```\n\n----------------------------------------\n\nTITLE: Register OpenTelemetry Instrumentation\nDESCRIPTION: This code snippet shows how to register the OpenTelemetry instrumentation for the KurrentDB client. The exact implementation varies across languages (NodeJS, Java, C#), but the core purpose is to integrate the OpenTelemetry instrumentation with the client to enable trace data emission.  The specific code is defined externally by the @code directive.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Sample Event Body JSON\nDESCRIPTION: This JSON represents a sample event body for a LoanRequest, including the loan amount and term. It's used to test the Kafka Sink connector by appending events to KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Amount\": 10000,\n  \"loanTerm\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PersistentSubscriptionsManager Instance C#\nDESCRIPTION: This snippet illustrates how to create an instance of the `PersistentSubscriptionsManager` class. It requires a logger instance, an `EndPoint` (e.g., `DnsEndPoint`), and a timeout. The `PersistentSubscriptionsManager` is used for monitoring persistent subscriptions via the HTTP API.  The HTTP calls will be redirected to the cluster leader.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar subscriptionManager = new PersistentSubscriptionsManager(\n    new ConsoleLogger(),\n    new DnsEndPoint(\"esdb.acme.org\", 2113),\n    TimeSpan.FromSeconds(1)\n);\n```\n\n----------------------------------------\n\nTITLE: Start Kafka Sink Connector (Bash)\nDESCRIPTION: This Bash command starts the Kafka Sink connector to begin streaming events from KurrentDB to Kafka. It sends a POST request to the KurrentDB API. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Deleting Projection\nDESCRIPTION: Code snippets for deleting an existing projection.  The projection must be disabled before deletion. Deletion includes deleting the checkpoint and emitted streams.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: IAM Policy for CloudWatch Metrics - JSON\nDESCRIPTION: This JSON defines an IAM policy that grants permissions for Kurrent Cloud to send metrics to CloudWatch under a specified namespace. It allows the 'cloudwatch:PutMetricData' action, with a condition limiting the namespace to which metrics can be sent.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/integrations/cloudwatch.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"cloudwatch:PutMetricData\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\",\n      \"Condition\": {\n          \"ForAnyValue:StringEqualsIgnoreCase\": {\n                \"cloudwatch:namespace\": [\n                    \"EventStoreCloud\",\n                    \"EventStoreCloud/KurrentDB\",\n                    \"EventStoreCloud/host\"\n                ]\n            }\n        }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verify RabbitMQ Sink Connector Configuration (Bash)\nDESCRIPTION: This Bash command retrieves the settings of the RabbitMQ Sink connector from KurrentDB using a GET request. Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -u admin:password  \\ \n-X GET https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Auto-Scavenge Status Response JSON\nDESCRIPTION: Example response from the `/auto-scavenge/status` endpoint, showing the state, schedule, and time until the next cycle. The state can be 'Waiting', 'InProgress', or 'Paused'.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"state\": \"Waiting\",\n   \"schedule\": \"0 3 * * *\",\n   \"timeUntilNextCycle\": \"0.13:14:32.6299115\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate user certificate using es-gencert-cli (PowerShell)\nDESCRIPTION: This command uses the es-gencert-cli tool to generate a user certificate for the user 'admin' that will expire in 10 days. It requires the path to the CA certificate and key files as input parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/authentication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n.\\es-gencert-cli.exe create-user -username admin -days 10 -ca-certificate ./es-ca/ca.crt -ca-key ./es-ca/ca.key\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Persistent Subscription to $all\nDESCRIPTION: This snippet demonstrates how to connect to an existing persistent subscription group for the `$all` stream in EventStoreDB. It's similar to subscribing to a stream, but without specifying a stream name.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/persistent-subscriptions.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent_subscriptions.py)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent-subscriptions.js)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent-subscriptions.ts)\n```\n\nLANGUAGE: Java\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent_subscriptions/PersistentSubscriptions.java)\n```\n\nLANGUAGE: C#\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent_subscriptions/Program.cs)\n```\n\nLANGUAGE: Go\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistentSubscriptions.go)\n```\n\nLANGUAGE: Rust\nCODE:\n```\n@[code{subscribe-to-persistent-subscription-to-all}](@grpc:persistent_subscriptions.rs)\n```\n\n----------------------------------------\n\nTITLE: Stop RabbitMQ Sink Connector (Powershell)\nDESCRIPTION: This PowerShell command stops the RabbitMQ Sink connector in KurrentDB using a POST request to the API.  Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_12\n\nLANGUAGE: Powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - Go\nDESCRIPTION: This snippet demonstrates how to soft delete a stream in KurrentDB using Go. It uses the `DeleteStream` method with `DeleteStreamOptions`. The `streamName` parameter is the name of the stream to delete and `esdb.Any{}` indicates the expected revision. Context is used for cancellation and deadlines.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\noptions := esdb.DeleteStreamOptions{\n    ExpectedRevision: esdb.Any{},\n}\n_, err = client.DeleteStream(context.Background(), streamName, options)\n```\n\n----------------------------------------\n\nTITLE: Read All Events Forward with Paging - C#\nDESCRIPTION: This example demonstrates reading all events forward from the beginning of the event store, handling paging. It reads in slices of 200 events until the end of the stream is reached.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar allEvents = new List<ResolvedEvent>();\n\nAllEventsSlice currentSlice;\nvar nextSliceStart = Position.Start;\ndo\n{\n    currentSlice = await connection.ReadAllEventsForwardAsync(\n        nextSliceStart, \n        200, false\n    );\n\n    nextSliceStart = currentSlice.NextPosition;\n\n    allEvents.AddRange(currentSlice.Events);\n} while (!currentSlice.IsEndOfStream);\n```\n\n----------------------------------------\n\nTITLE: Projecting ItemGotAdded Event to Redis - C#\nDESCRIPTION: This C# code projects an `ItemGotAdded` event to Redis by incrementing the product quantity in a sorted set and storing the product name in a hash set. It uses Redis transaction to keep data consistent.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static void Project(ITransaction txn, ItemGotAdded addedEvent)\n{\n   var hourKey = $\"top-10-products:{addedEvent.at:yyyyMMddHH}\";            // Create a key for the current hour\n   var productKey = addedEvent.productId;                                  // Use the product ID as the member in the sorted set\n   var productName = addedEvent.productName;                               // Assuming `productName` is part of the event\n\n   txn.SortedSetIncrementAsync(hourKey, productKey, addedEvent.quantity);  // Increment the quantity of the product in the sorted set\n   txn.HashSetAsync(\"product-names\", productKey, productName);             // Store product name in a hash;\n\n   Console.WriteLine($\"Incremented product {addedEvent.productId} in \" +\n                     $\"{hourKey} by {addedEvent.quantity}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Network with the ESC CLI\nDESCRIPTION: This command creates a public network using the `esc` CLI. It requires specifying the description, cloud provider, region, and the `--public-access` flag. The network is created in the specified region and configured for public access.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/networking/public-network.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesc infra networks create \\\n    --description \"Public AWS us-west-2\" \\\n    --provider aws \\\n    --region us-west-2 \\\n    --public-access\n```\n\n----------------------------------------\n\nTITLE: Deploy Kafka Sink Connector (Bash)\nDESCRIPTION: This Bash command deploys the Kafka Sink connector instance in KurrentDB using a POST request to the KurrentDB API. It utilizes `curl` to send the configuration file (`kafka-sink-config.json`) as the request body. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-H \"content-type: application/json\" -d '@kafka-sink-config.json' \\\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart  \n```\n\n----------------------------------------\n\nTITLE: EventStoreDB Connection String with Spacing in C#\nDESCRIPTION: This snippet shows an example of using spacing in the keys of the connection string, such as 'Connect To' instead of 'ConnectTo', which the EventStoreDB client will still parse correctly.  It sets the connection endpoint and configures a heartbeat timeout.  This demonstrates the flexibility in connection string formatting.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nConnect To = tcp://admin:changeit@localhost:1113; HeartBeatTimeout=500\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - Rust\nDESCRIPTION: This snippet demonstrates how to soft delete a stream in KurrentDB using Rust. It uses the `delete_stream` method with `DeleteStreamOptions`. The `stream_name` parameter specifies the name of the stream to delete, and `&options` provides options for the delete operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet options = DeleteStreamOptions::default();\nclient\n    .delete_stream(stream_name, &options)\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Start MongoDB Sink Connector via API (PowerShell)\nDESCRIPTION: This PowerShell command starts the MongoDB Sink connector in KurrentDB by sending a POST request to the KurrentDB API. It uses curl with authentication credentials. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Read All Events Forward Async - C#\nDESCRIPTION: This method reads a specified number of events from all streams in the forward direction, starting from a given position. The method accepts the starting position, the maximum number of events to read, and whether to resolve link events. It returns an `AllEventsSlice`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTask<AllEventsSlice> ReadAllEventsForwardAsync(\n    Position position, int maxCount, bool resolveLinkTos\n);\n```\n\n----------------------------------------\n\nTITLE: EventStoreDB Connection String with Heartbeat Timeout C#\nDESCRIPTION: This snippet demonstrates setting the `HeartBeatTimeout` in the EventStoreDB connection string. The connection string specifies the connection endpoint and sets the heartbeat timeout to 500 milliseconds. This parameter controls how long the client waits for a heartbeat response from the server before considering the connection lost.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nConnectTo=tcp://admin:changeit@localhost:1113; HeartBeatTimeout=500\n```\n\n----------------------------------------\n\nTITLE: Kafka Sink Stop Response\nDESCRIPTION: This HTTP response indicates a successful stop of the Kafka Sink connector, confirming that the connector has paused event streaming.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - Python\nDESCRIPTION: This snippet demonstrates how to perform a hard delete (tombstone) on a stream in KurrentDB using Python. It uses the `tombstone_stream` method of the KurrentDB client.  `stream_name` parameter is the stream to delete, and `current_version` specifies the version of the stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclient.tombstone_stream(stream_name, current_version=4)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Event Stream - C#\nDESCRIPTION: This C# code subscribes to the `$ce-cart` stream, starting from the retrieved checkpoint.  It resolves linked events automatically. It requires a connection to the EventStoreDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nawait using var subscription = esdb.SubscribeToStream(                   // Subscribe events..\n   \"$ce-cart\",                                                          // from the cart category system projection..\n   streamPosition,                                                      // from this position..\n   true);                                                               // with linked events automatically resolved (required for system projections)\n```\n\n----------------------------------------\n\nTITLE: Get audit logs for the current user\nDESCRIPTION: The `esc audit user get` command retrieves audit logs specifically for the current user. It allows filtering based on organization ID, time range (after and before timestamps), and the maximum number of records to retrieve. The command assumes the `esc` tool is already installed and configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/account-security.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesc audit user get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkpoint from Redis - C#\nDESCRIPTION: This C# code retrieves the last checkpoint from Redis. If no checkpoint is found, it defaults to the beginning of the stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar checkpointValue = redis.StringGet(\"checkpoint\");                     // Get the checkpoint value from redis\nvar streamPosition = long.TryParse(checkpointValue, out var checkpoint)  // Check if it exists and convertible to long\n   ? FromStream.After(StreamPosition.FromInt64(checkpoint))             // If so, set var to subscribe events from stream after checkpoint\n   : FromStream.Start;                                                  // Otherwise, set var to subscribe to events from the stream from the start.\n```\n\n----------------------------------------\n\nTITLE: Ping KurrentDB cloud cluster\nDESCRIPTION: This command pings the KurrentDB cloud cluster from within the `busybox` container. It verifies network connectivity by sending ICMP echo requests to the cluster's IP address and checking for responses.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/ # ping c0brj8qrh41g7drr2i4g-0.mesdb.eventstore.cloud\nPING c0brj8qrh41g7drr2i4g-0.mesdb.eventstore.cloud (172.22.110.29): 56 data bytes\n64 bytes from 172.22.110.29: seq=0 ttl=63 time=2.655 ms\n64 bytes from 172.22.110.29: seq=1 ttl=63 time=1.234 ms\n64 bytes from 172.22.110.29: seq=2 ttl=63 time=1.246 ms\n```\n\n----------------------------------------\n\nTITLE: Open Cart Projection C#\nDESCRIPTION: Opens the CartProjection.cs file, which contains the code that handles the projection logic for different cart-related events. This file defines how the read model is updated based on incoming events.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\ncode ./PostgresProjection/CartProjection.cs\n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - Go\nDESCRIPTION: This snippet demonstrates how to hard delete (tombstone) a stream in KurrentDB using Go. It uses the `TombstoneStream` method with `TombstoneStreamOptions`. The `streamName` parameter is the name of the stream to tombstone and `esdb.Any{}` indicates the expected revision. Context is used for cancellation and deadlines.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\noptions := esdb.TombstoneStreamOptions{\n    ExpectedRevision: esdb.Any{},\n}\n_, err = client.TombstoneStream(context.Background(), streamName, options)\n```\n\n----------------------------------------\n\nTITLE: Start RabbitMQ Sink Connector (Powershell)\nDESCRIPTION: This PowerShell command starts the RabbitMQ Sink connector in KurrentDB using a POST request to the API. Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_5\n\nLANGUAGE: Powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Deleting Persistent Subscription Group C#\nDESCRIPTION: This snippet demonstrates how to delete a persistent subscription group using the `DeletePersistentSubscriptionAsync` method. It requires the stream name, group name, and administrative credentials. Deleting a subscription group removes it from the EventStoreDB instance. The method returns a `Task` representing the asynchronous operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await connection.DeletePersistentSubscriptionAsync(\n    stream, \"groupname\", AdminCredentials\n);\n```\n\n----------------------------------------\n\nTITLE: Ping KurrentDB cluster from container\nDESCRIPTION: This command verifies network connectivity from the `busybox` container to the KurrentDB cluster in Kurrent Cloud. Successful pings confirm that the network peering and IP address ranges are correctly configured, allowing communication between the Kubernetes workload and the KurrentDB cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/ # ping c1ut3oto0aembuk4mi6g.mesdb.eventstore.cloud\nPING c1ut3oto0aembuk4mi6g.mesdb.eventstore.cloud (172.29.98.112): 56 data bytes\n64 bytes from 172.29.98.112: seq=0 ttl=63 time=1.049 ms\n64 bytes from 172.29.98.112: seq=1 ttl=63 time=0.716 ms\n64 bytes from 172.29.98.112: seq=2 ttl=63 time=0.713 ms\n```\n\n----------------------------------------\n\nTITLE: Restarting Projection Subsystem\nDESCRIPTION: Code snippets for restarting the entire projection subsystem using the projection management client API. Requires `$ops` or `$admin` group membership.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Projections Manager Instance (C#)\nDESCRIPTION: This C# code snippet represents how to create or obtain an instance of the `ProjectionsManager` class, which is used for interacting with the EventStoreDB's projections API.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nProjectionsManager pm = new ProjectionsManager(\n    new Mock<IEventStoreConnection>().Object,\n    LogManager.GetLogger(typeof(ProjectionsManager)));\n*/\n```\n\n----------------------------------------\n\nTITLE: Xbox One S Counter Projection (JavaScript)\nDESCRIPTION: This JavaScript projection counts the number of 'XBox One S' items added to shopping carts. It initializes a counter to 0 and increments it each time an `ItemAdded` event for 'Xbox One S' is observed.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nfromAll()\n    .when({\n        $init: function() {\n            return { count: 0 };\n        },\n        ItemAdded: function(state, event) {\n            if (event.data.product == 'Xbox One S') {\n                state.count++;\n            }\n            return state;\n        }\n    });\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Default User Credentials in C#\nDESCRIPTION: This snippet demonstrates how to create a `UserCredentials` object and set it as the default credentials for all operations on the `EventStoreConnection` using the `SetDefaultUserCredentials` method. This allows operations to be performed without explicitly supplying credentials each time.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar credentials = new UserCredentials(\"username\", \"password\");\nsettingsBuilder.SetDefaultUserCredentials(credentials);\n```\n\n----------------------------------------\n\nTITLE: Verify RabbitMQ Sink Connector Configuration (Powershell)\nDESCRIPTION: This PowerShell command retrieves the settings of the RabbitMQ Sink connector from KurrentDB using a GET request.  Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_3\n\nLANGUAGE: Powershell\nCODE:\n```\ncurl -u admin:password  `\n-X GET https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Verify Kafka Sink Configuration (PowerShell)\nDESCRIPTION: This PowerShell command retrieves and verifies the Kafka Sink connector's configuration from KurrentDB using a GET request. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -u admin:password  `\n-X GET https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Reading Events Function (C#)\nDESCRIPTION: This C# function reads JSON files containing event data and constructs a list of EventData instances, which are then used to seed the EventStoreDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nprivate static async Task<List<EventData>> ReadEvents()\n{\n    // implementation\n}*/\n```\n\n----------------------------------------\n\nTITLE: Seeding Events to EventStoreDB (C#)\nDESCRIPTION: This C# code uses the ReadEvents function to read event data from JSON files and then pushes those events to EventStoreDB. This provides the initial data for the projections to operate on.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nprivate static async Task SeedEvents()\n{\n    // implementation\n}*/\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with Go modules\nDESCRIPTION: Installs the kurrentdb package using Go modules. This package is required for using the Go SDK to interact with KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/kurrent-io/KurrentDB-Client-Go/kurrentdb\n```\n\n----------------------------------------\n\nTITLE: Stop MongoDB Sink Connector via API (PowerShell)\nDESCRIPTION: This PowerShell command stops the MongoDB Sink connector in KurrentDB by sending a POST request to the KurrentDB API. It uses curl with authentication credentials. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -i -L -u admin:password  `\n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: List RabbitMQ Queues (Bash)\nDESCRIPTION: This Bash command lists the queues in RabbitMQ using the `rabbitmqctl` command-line tool.  It is used for verifying that the KurrentDB events are correctly routed to the expected queues.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nrabbitmqctl list_queues \n```\n\n----------------------------------------\n\nTITLE: Xbox One S Counter with Output State (JavaScript)\nDESCRIPTION: This JavaScript projection extends the basic counter to output the state to a stream. The `outputState()` method is called to produce a `$projections-{projection-name}-result` stream containing state updates.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nfromAll()\n    .when({\n        $init: function() {\n            return { count: 0 };\n        },\n        ItemAdded: function(state, event) {\n            if (event.data.product == 'Xbox One S') {\n                state.count++;\n            }\n            return state;\n        }\n    }).outputState();\n*/\n```\n\n----------------------------------------\n\nTITLE: Building a Cluster Node with Custom Endpoints in C#\nDESCRIPTION: This code snippet demonstrates how to build a cluster node with custom endpoints and gossip seeds using the `EmbeddedVNodeBuilder`. It initializes the builder as a cluster member with a specified cluster size, configures disk persistence, sets internal and external HTTP/TCP endpoints, disables DNS discovery, configures gossip seeds, builds the node, and starts it.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/embedded.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar nodeBuilder = EmbeddedVNodeBuilder\n    .AsClusterMember(3)\n    .RunOnDisk(\"node1db\")\n    .WithInternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1112))\n    .WithExternalHttpOn(new IPEndPoint(IPAddress.Loopback, 1113))\n    .WithExternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1114))\n    .WithInternalTcpOn(new IPEndPoint(IPAddress.Loopback, 1115))\n    .DisableDnsDiscovery()\n    .WithGossipSeeds(new IPEndPoint[]\n    {\n        new IPEndPoint(IPAddress.Loopback, 2112),\n        new IPEndPoint(IPAddress.Loopback, 3112)\n    });\nvar node = nodeBuilder.Build();\nnode.Start();\n```\n\n----------------------------------------\n\nTITLE: Get EventStoreCloud Pulumi package (Go)\nDESCRIPTION: Retrieves the EventStoreCloud Pulumi SDK for Go using go get.  This makes the Kurrent Cloud resources available in Go-based Pulumi programs. Requires Go to be installed and configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/pulumi.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/EventStore/pulumi-eventstorecloud/sdk/go/eventstorecloud\n```\n\n----------------------------------------\n\nTITLE: Install .NET EventStore client package\nDESCRIPTION: Installs the EventStore.Client.Grpc.Streams package using the .NET CLI.  This package is needed to interact with KurrentDB in .NET applications.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package EventStore.Client.Grpc.Streams\n```\n\n----------------------------------------\n\nTITLE: Retrieve Last Checkpoint SQL\nDESCRIPTION: Retrieves the last checkpoint value from the 'checkpoints' table in PostgreSQL. This checkpoint is used to determine the starting point for subscribing to the event stream, ensuring that the projection resumes from where it left off in case of interruptions.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar checkpointValue = postgres.QueryFirstOrDefault<long?>(\n   \"SELECT checkpoint \" +\n   \"FROM checkpoints \" +\n   \"WHERE read_model_name = 'carts'\");\n\nvar streamPosition = checkpointValue.HasValue\n   ? FromStream.After(StreamPosition.FromInt64(checkpointValue.Value))\n   : FromStream.Start;\n```\n\n----------------------------------------\n\nTITLE: Get Partitioned Projection State (C#)\nDESCRIPTION: This C# code shows how to query the partitioned state of a projection, which allows retrieving state for a specific partition or stream within the projection.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nstring partitionedState = await pm.GetState(\"PartitionedProjection\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Restart Tailscale with Subnet Routing (Bash)\nDESCRIPTION: Restarts the Tailscale client with subnet routing enabled, advertising the specified routes. The `advertise-routes` parameter defines the subnets to be advertised, while `accept-routes` allows the client to accept routes advertised by other Tailscale nodes. Replace the example IP ranges with your actual peering details found on the Kurrent Cloud console.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/tailscale.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo tailscale up --advertise-routes=10.164.0.0/20,172.22.101.0/24 --accept-routes\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster DNS Connection\nDESCRIPTION: This C# code snippet demonstrates how to configure cluster connection settings using the `ConnectionSettings` class, specifically setting the cluster DNS and gossip port before building the settings and creating an `EventStoreConnection` instance.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar settings = ConnectionSettings\n    .Create()\n    .SetClusterDns(\"esdb.acme.cool\")\n    .SetClusterGossipPort(2113)\n    .Build();\nvar connection = EventStoreConnection.Create(settings);\n```\n\n----------------------------------------\n\nTITLE: Creating UsersManager Instance in EventStoreDB .NET Client\nDESCRIPTION: This code snippet demonstrates how to create an instance of the `UsersManager` class in the EventStoreDB .NET client. It is often useful if the EventStoreDB Admin UI is not available under the loopback address.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/security.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n@[code{UserManager}](./sample-code/DotNetClient/UsersCreateUsersManager.cs)\n```\n\n----------------------------------------\n\nTITLE: Stop RabbitMQ Sink Connector (Bash)\nDESCRIPTION: This Bash command stops the RabbitMQ Sink connector in KurrentDB using a POST request to the API.  Replace `admin:password` with your KurrentDB credentials and `your-kurrentdb-cluster-url` with the actual KurrentDB cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/rabbitmq-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: Sample Event Body (JSON)\nDESCRIPTION: This JSON represents a sample event body with an Amount and loanTerm, for appending events to KurrentDB. The event will be sent to the RabbitMQ exchange through the configured sink.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Amount\": 10000,\n  \"loanTerm\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Get Projection State (C#)\nDESCRIPTION: This C# code demonstrates how to query the state of a running projection using the `ProjectionsManager`. It retrieves the current state of the projection based on its name.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nstring state = await pm.GetState(\"XboxOneSCounter\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Install Pulumi plugin for EventStoreCloud (Bash)\nDESCRIPTION: Installs the EventStoreCloud Pulumi plugin from the specified GitHub release.  The version must be specified twice, once for the plugin name and once for the download URL. Requires Pulumi CLI to be installed.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/pulumi.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npulumi plugin install resource eventstorecloud [version] \\\n  --server https://github.com/kurrent-io/pulumi-eventstorecloud/releases/download/[version]\n```\n\n----------------------------------------\n\nTITLE: Getting Projection Status\nDESCRIPTION: Code snippets for getting the status of a named projection. Refer to the 'projection details' section for value explanations.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Delete HTTP Sink Connector Bash\nDESCRIPTION: Deletes a specific HTTP Sink connector in KurrentDB. It sends a DELETE request to the connectors/{connector_id} endpoint. The connector ID is assumed to be 'test-app'.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -i -X DELETE http://localhost:2113/connectors/test-app\n```\n\n----------------------------------------\n\nTITLE: Create Partitioned Projection (C#)\nDESCRIPTION: This C# code demonstrates how to create a partitioned projection using the `ProjectionsManager`. It is used to create projections with stream-specific state, in this case a shopping cart counter.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.CreateContinuousAsync(\n    \"ShoppingCartCounter\",\n    \"fromCategory('shoppingCart').when({$init: function() { return { count: 0 }; }, ItemAdded: function(state, event) { state.count++; return state; } });\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Indexmap Migration Tool Usage (Shell)\nDESCRIPTION: Shows the basic usage of the indexmap-migrate tool from the command line.  It requires the tool to be in the system's PATH or the full path to the executable to be provided. The tool is used to convert indexmap files from EventStoreDB 5 to be compatible with older versions.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/commercial-tools/indexmap-migrate.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nindexmap-migrate [options]\n```\n\n----------------------------------------\n\nTITLE: Stop HTTP Sink Connector Bash\nDESCRIPTION: Stops a specific HTTP Sink connector in KurrentDB. It sends a POST request to the connectors/{connector_id}/stop endpoint. The connector ID is assumed to be 'test-app3'.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -i -X POST http://localhost:2113/connectors/test-app3/stop\n```\n\n----------------------------------------\n\nTITLE: Updating Projection\nDESCRIPTION: Code snippets for updating a projection with a new JavaScript query. Updating system projections is not currently supported.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Deploying a Self-Signed ClusterIssuer\nDESCRIPTION: This snippet shows how to create a ClusterIssuer resource in Kubernetes using cert-manager for self-signed certificates. This type of issuer is useful for development or testing environments where trusted certificates are not required.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\n```\n\n----------------------------------------\n\nTITLE: Getting Projection State\nDESCRIPTION: Code snippets for retrieving the state of a projection.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Lookup Project in EventStore Cloud with Terraform HCL\nDESCRIPTION: This snippet shows how to use the `eventstorecloud_project` data source in Terraform to lookup a project in EventStore Cloud. It requires the project name as a mandatory argument and returns the project details if a match is found. The project name is case-sensitive.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"eventstorecloud_project\" \"example\" {\n  name = \"Your Project Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get audit logs for an entire organization\nDESCRIPTION: The `esc audit organization get` command retrieves audit logs for an entire organization. It requires the organization ID as a parameter and allows filtering based on time range (after and before timestamps) and the maximum number of records to retrieve. The command assumes the `esc` tool is already installed and configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/account-security.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesc audit organization get -o {orgId}\n```\n\n----------------------------------------\n\nTITLE: Listing Most Popular Products in Redis\nDESCRIPTION: This command lists the most popular products, showing the top 10 items and their scores from a Redis sorted set. Replace `***REPLACES THIS WITH top-10-products:YYYYMMDDHH KEY FOUND ABOVE***` with the actual top-10-products key.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_2\n\nLANGUAGE: SH\nCODE:\n```\nZREVRANGE ***REPLACES THIS WITH top-10-products:YYYYMMDDHH KEY FOUND ABOVE*** 0 9 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Listing Jobs with Kurrent Cloud CLI\nDESCRIPTION: This command lists all currently defined jobs in Kurrent Cloud using the `esc orchestrate jobs list` command. It provides an overview of the scheduled jobs configured for the project.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nesc orchestrate jobs list\n```\n\n----------------------------------------\n\nTITLE: Inviting Slack Bot to Channel\nDESCRIPTION: This command invites the Slack app user (bot) to a specific channel within Slack, which is required for the bot to send messages to that channel. The bot's name must be included after the @ symbol. This step ensures the bot has permission to communicate within the designated channel.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/integrations/slack.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/invite @<name of bot>\n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - Java\nDESCRIPTION: This snippet demonstrates how to hard delete (tombstone) a stream in KurrentDB using Java. It uses the `tombstoneStream` method along with `DeleteStreamOptions`. It takes the `streamName` as an argument, which is the name of the stream to be tombstoned. The `.get()` method is called to block until the operation completes.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nclient.tombstoneStream(streamName, DeleteStreamOptions.get()).get();\n```\n\n----------------------------------------\n\nTITLE: Resume Auto-Scavenge HTTP POST\nDESCRIPTION: Resumes Auto-Scavenge using the `/auto-scavenge/resume` HTTP endpoint. Requires authorization and that Auto-Scavenge is currently paused (`\"state\": \"Paused\"`).\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST https://127.0.0.1:2113/auto-scavenge/resume\nAuthorization: Basic admin:changeit\n```\n\n----------------------------------------\n\nTITLE: Read Stream Events Backward Async - C#\nDESCRIPTION: This method reads a specified number of events from a stream in the backward direction, starting from a given event number. The method accepts the stream name, the starting event number, the number of events to read, and a boolean indicating whether to resolve link events. It returns a `StreamEventsSlice` containing the read events.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nTask<StreamEventsSlice> ReadStreamEventsBackwardAsync(\n    string stream, long start, int count, bool resolveLinkTos\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Connector Start Response\nDESCRIPTION: This text shows the HTTP response received when the MongoDB Sink connector starts successfully. A `200 OK` status code indicates that the request was successful.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Listing Job History with Kurrent Cloud CLI\nDESCRIPTION: This command retrieves the history of a specific job using the `esc orchestrate history list` command. It requires the job ID as a parameter and displays the execution history of the scheduled job, including successes and failures.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nesc orchestrate history list --job-id <job-id>\n```\n\n----------------------------------------\n\nTITLE: Getting Projection Result\nDESCRIPTION: Code snippets for retrieving the result of a named projection and partition.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - JavaScript\nDESCRIPTION: This snippet shows how to hard delete (tombstone) a stream in KurrentDB using JavaScript. It utilizes the `tombstoneStream` method on the KurrentDB client object. The `streamName` parameter specifies the name of the stream to delete.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.tombstoneStream(streamName);\n```\n\n----------------------------------------\n\nTITLE: Connecting to an Embedded Node in C#\nDESCRIPTION: This code snippet demonstrates how to connect to an embedded EventStoreDB node using the `EmbeddedEventStoreConnection` class. It creates an `IEventStoreConnection` configured to connect to the embedded node, connects to the node asynchronously, and then appends an event to a stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/embedded.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var embeddedConn = EmbeddedEventStoreConnection.Create(node);\n\nawait embeddedConn.ConnectAsync();\nawait embeddedConn.AppendToStreamAsync(\n    \"some-stream\", \n    ExpectedVersion.Any,\n    new EventData(Guid.NewGuid(), \"eventType\", true,\n    Encoding.UTF8.GetBytes(\"{\\\"Foo\\\":\\\"Bar\\\"}\"), null)\n);\n```\n\n----------------------------------------\n\nTITLE: Initialize KurrentDB with Sample Events (Shell)\nDESCRIPTION: This shell script initializes a KurrentDB instance by starting the server in Docker and appending sample e-commerce events. It is a custom script provided for this specific quickstart guide to simplify the setup process.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-1.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./scripts/1-init-data.sh\n```\n\n----------------------------------------\n\nTITLE: Listing All Projections\nDESCRIPTION: Code snippets for listing all projections, including user-defined and system projections. Refer to the 'projection details' section for value explanations.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Defining KurrentDBBackup Resource for Specific Node Backup (YAML)\nDESCRIPTION: This YAML snippet defines a KurrentDBBackup resource to back up a specific node of a KurrentDB cluster. It specifies the API version, kind (KurrentDBBackup), metadata (name), and spec (volumeSnapshotClassName, clusterName, and nodeName). The `volumeSnapshotClassName` is set to `ebs-vs`, and the `nodeName` is set to `kurrentdb-1`, both of which should be configured to match the specific Kubernetes environment.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/database-backup.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: kubernetes.kurrent.io/v1\nkind: KurrentDBBackup\nmetadata:\n  name: kurrentdb-cluster\nspec:\n  volumeSnapshotClassName: ebs-vs\n  clusterName: kurrentdb-cluster\n  nodeName: kurrentdb-1\n\n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - TypeScript\nDESCRIPTION: This snippet shows how to hard delete (tombstone) a stream in KurrentDB using TypeScript. It utilizes the `tombstoneStream` method on the KurrentDB client object. The `streamName` parameter specifies the name of the stream to delete.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.tombstoneStream(streamName);\n```\n\n----------------------------------------\n\nTITLE: Kafka Sink Configuration Response JSON\nDESCRIPTION: This JSON response displays the Kafka Sink configuration settings, including instance type, subscription filters, topic, bootstrap servers, authentication details, and security protocol.  It confirms that the connector has been configured correctly.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"settings\": {\n    \"instanceTypeName\": \"kafka-sink\",\n    \"subscription:filter:scope\": \"stream\",\n    \"subscription:filter:filterType\": \"prefix\",\n    \"subscription:filter:expression\": \"LoanRequest\",\n    \"topic\": \"loans\",\n    \"bootstrapServers\": \"your-kafka-cluster-url:9092\",\n    \"authentication:username\": \"your-username\",\n    \"authentication:password\": \"your-password\",\n    \"authentication:securityProtocol\": \"SaslSsl\",\n    \"waitForBrokerAck\": \"true\"\n  },\n  \"timestamp\": \"2024-08-14T19:08:45.907847700Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Kafka Sink Configuration (Bash)\nDESCRIPTION: This Bash command retrieves and verifies the Kafka Sink connector's configuration from KurrentDB using a GET request. Replace `admin:password` and `your-kurrentdb-cluster-url` with your actual credentials and cluster URL.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:password  \\ \n-X GET https://your-kurrentdb-cluster-url:2113/connectors/kafka-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Hard Delete Stream in KurrentDB - Rust\nDESCRIPTION: This snippet demonstrates how to hard delete (tombstone) a stream in KurrentDB using Rust. It uses the `tombstone_stream` method with `TombstoneStreamOptions`. The `stream_name` parameter specifies the name of the stream to tombstone, and `&options` provides options for the tombstone operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nlet options = TombstoneStreamOptions::default();\nclient\n    .tombstone_stream(stream_name, &options)\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with pip\nDESCRIPTION: This command installs the `kurrentdbclient` package using pip. This package provides the necessary client SDK for interacting with KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install kurrentdbclient\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with pnpm\nDESCRIPTION: This command installs the `@kurrent/kurrentdb-client` package using pnpm. This package provides the necessary client SDK for interacting with KurrentDB. TypeScript type declarations are included in the package.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Getting Backup Status with Kurrent Cloud CLI\nDESCRIPTION: This command retrieves the status of a specific backup using its ID and the project ID.  It provides detailed information about the backup, including its ID, project ID, source cluster, description, size, status, and creation timestamp.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesc mesdb backups get --project-id btfjev2rh41scaatc1k0 \\\n    --id c1ev3l5o0aeu6ojco7b0\n```\n\n----------------------------------------\n\nTITLE: KurrentDB Cluster Status JSON Output\nDESCRIPTION: This JSON output shows the status of a KurrentDB cluster, including its ID, organization ID, project ID, network ID, description, provider, region, topology, instance type, disk size, server version, projection level, status, creation date, and addresses. This information can be used to monitor the health and configuration of the cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"c1mnqjdo0aembuk4ljo0\",\n    \"organizationId\": \"bt77lfqrh41scaatc180\",\n    \"projectId\": \"c10d0h2rh41lba1v92k0\",\n    \"networkId\": \"c10dr5qrh41lbabqa2j0\",\n    \"description\": \"restore\",\n    \"provider\": \"aws\",\n    \"region\": \"eu-west-2\",\n    \"topology\": \"single-node\",\n    \"instanceType\": \"f1\",\n    \"diskSizeGb\": 10,\n    \"diskType\": \"gp3\",\n    \"serverVersion\": \"24.10\",\n    \"projectionLevel\": \"off\",\n    \"status\": \"available\",\n    \"created\": \"2021-03-26T09:37:17Z\",\n    \"addresses\": {\n        \"tcp\": [\n            \"c1mnqjdo0aembuk4ljo0.mesdb.eventstore.cloud:1113\"\n        ],\n    \"grpc\": \"kurrentdb://c1mnqjdo0aembuk4ljo0.mesdb.eventstore.cloud:2113\",\n    \"ui\": \"https://c1mnqjdo0aembuk4ljo0.mesdb.eventstore.cloud:2113\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Download Kurrent Cloud Provider (Windows)\nDESCRIPTION: Downloads the Kurrent Cloud Terraform provider binary for Windows systems using PowerShell. The script constructs the filename using the Terraform provider version and then uses `Invoke-WebRequest` to download the file. It requires PowerShell.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$VERSION = \"{{ $frontmatter.terraform_current_version }}\"\n$url = \"https://github.com/kurrent-io/terraform-provider-kurrentcloud/releases/download/v${VERSION}/terraform-provider-kurrentcloud_${VERSION}_windows_amd64.zip\"\n$output = \"terraform-provider-kurrentcloud_${VERSION}_windows_amd64.zip\"\nInvoke-WebRequest -Uri $url -OutFile $output\nExpand-Archive -Path $output -DestinationPath $HOME\\.terraform.d\\plugins\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ConnectionSettingsBuilder in C#\nDESCRIPTION: This snippet demonstrates how to create an instance of `ConnectionSettingsBuilder` with default settings for configuring EventStoreDB connections. The builder is then used to create `ConnectionSettings` and an `EventStoreConnection`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar settingsBuilder = ConnectionSettings.Create();\n```\n\n----------------------------------------\n\nTITLE: Cron Schedule Format\nDESCRIPTION: Illustrates the structure of a cron-like schedule used by the Kurrent Cloud. Each field represents a time unit: minute, hour, day of the month, month, and day of the week.  The format allows wildcards, specific numbers, and rate-based specifications for minute and hour.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/jobs.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n ┌───────────── Minute: wildcard, number (0 - 59), rate\n │ ┌─────────── Hour: wildcard, number (0 - 23), rate\n │ │ ┌───────── Day of the month: wildcard\n │ │ │ ┌─────── Month: wildcard\n │ │ │ │ ┌───── Day of the week: wildcard, number (0 - 7)\n │ │ │ │ │\n * * * * *\n```\n\n----------------------------------------\n\nTITLE: Generating Access Tokens with MFA via `esc`\nDESCRIPTION: This command regenerates access tokens using the `esc` command-line tool after MFA has been enabled.  It prompts the user for their password and an authenticator code. It assumes the `esc` tool is already installed and configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/account-security.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nesc access tokens create\n```\n\n----------------------------------------\n\nTITLE: Open Postgres Projection Program C#\nDESCRIPTION: Opens the main program file for the Postgres projection application. This is typically the starting point for examining the application's logic and event processing flow.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\ncode ./PostgresProjection/Program.cs\n```\n\n----------------------------------------\n\nTITLE: Reading Stream Metadata\nDESCRIPTION: This code snippet demonstrates how to read stream metadata using the `GetStreamMetadataAsync` method of the `EventStoreConnection` class. It returns a `StreamMetadataResult` object, which contains information about the stream, including its name, deletion status, meta-stream version, and a `StreamMetadata` object representing the metadata JSON.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTask<StreamMetadataResult> GetStreamMetadataAsync(\n    string stream, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Get MongoDB Sink Connector Configuration (Bash)\nDESCRIPTION: This Bash command retrieves the configuration settings of the MongoDB Sink connector instance in KurrentDB by sending a GET request to the KurrentDB API.  It uses curl with authentication credentials to access the settings endpoint. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u admin:password  \\ \n-X GET https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Start projection applications\nDESCRIPTION: This shell command executes the script to start the projection applications, which are responsible for projecting events from KurrentDB to the Postgres database.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./scripts/2-start-projections.sh\n```\n\n----------------------------------------\n\nTITLE: Start MongoDB Sink Connector via API (Bash)\nDESCRIPTION: This Bash command starts the MongoDB Sink connector in KurrentDB by sending a POST request to the KurrentDB API. It uses curl with authentication credentials. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/start  \n```\n\n----------------------------------------\n\nTITLE: Start Postgres CLI\nDESCRIPTION: This shell command executes the `docker exec` command to start the Postgres CLI within a Docker container.  It connects to the database as the `postgres` user.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it postgres psql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Stream Metadata\nDESCRIPTION: This code snippet shows how to retrieve the raw JSON of the stream metadata using the `GetStreamMetadataAsRawBytesAsync` method. This method returns a `RawStreamMetadataResult` object, containing the stream name, deletion status, meta-stream version, and the raw data of the metadata JSON as a byte array.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTask<RawStreamMetadataResult> GetStreamMetadataAsRawBytesAsync(\n    string stream, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Backup Job with Kurrent Cloud CLI\nDESCRIPTION: This command creates a scheduled backup job for a Kurrent Cloud cluster using the `esc orchestrate jobs create` command. It requires the cluster ID, schedule, and other parameters like description and max backup count.  The schedule is defined using a cron-like expression.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesc orchestrate jobs create \\\n    --description 'My Hourly Backup' \\\n    --schedule '0 */1 * * *' scheduled-backup \\\n    --description '{cluster} Hourly Backup {datetime:RFC3339}' \\\n    --max-backup-count 2 \\\n    --cluster-id c196ogto0aeqohe3ommq\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - Python\nDESCRIPTION: This snippet demonstrates how to perform a soft delete on a stream in KurrentDB using Python. It uses the `delete_stream` method of the KurrentDB client. The `stream_name` parameter specifies the name of the stream to be deleted and `current_version` is the version of the stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.delete_stream(stream_name, current_version=6)\n```\n\n----------------------------------------\n\nTITLE: Start RabbitMQ Service (Bash)\nDESCRIPTION: This Bash command starts the RabbitMQ service. This is required for using the rabbitmqctl command-line tool. The first command uses systemctl, common on Linux systems, while the second starts the server detached.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl start rabbitmq-server \n```\n\nLANGUAGE: Bash\nCODE:\n```\nrabbitmq-server -detached \n```\n\n----------------------------------------\n\nTITLE: Adding KurrentDB client dependency using Gradle\nDESCRIPTION: This line adds the `kurrentdb-client` dependency to a Gradle project. It specifies the group, name, and version of the KurrentDB client. Ensure Gradle is configured to resolve dependencies from Maven Central.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_4\n\nLANGUAGE: Gradle\nCODE:\n```\nimplementation 'io.kurrent:kurrentdb-client:1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Check Auto-Scavenge Status HTTP GET\nDESCRIPTION: Retrieves the Auto-Scavenge status using the `/auto-scavenge/status` HTTP endpoint. Requires authorization. Returns the current state, schedule, and time until the next cycle.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://127.0.0.1:2113/auto-scavenge/status\nAuthorization: Basic admin:changeit\n```\n\n----------------------------------------\n\nTITLE: Select all from carts table\nDESCRIPTION: This SQL query selects all columns and rows from the `carts` table in the Postgres database. It is used to review the shopping carts that have been projected from the KurrentDB events.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect * from carts;\n```\n\n----------------------------------------\n\nTITLE: Deploying a Self-Signed ClusterIssuer using kubectl\nDESCRIPTION: This command deploys the self-signed ClusterIssuer defined in `issuer.yaml` to the `kurrent` namespace using kubectl. It assumes that the `issuer.yaml` file contains a valid Kubernetes manifest for the ClusterIssuer resource.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kurrent apply -f issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry package (.NET)\nDESCRIPTION: This command installs the `EventStore.Client.Extensions.OpenTelemetry` package using the .NET CLI. This package provides OpenTelemetry support for the EventStoreDB .NET client.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package EventStore.Client.Extensions.OpenTelemetry\n```\n\n----------------------------------------\n\nTITLE: Read All Events Backward Async - C#\nDESCRIPTION: This method reads a specified number of events from all streams in the backward direction, starting from a given position. The method accepts the starting position, the maximum number of events to read, and whether to resolve link events. It returns an `AllEventsSlice`.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/reading.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nTask<AllEventsSlice> ReadAllEventsBackwardAsync(\n    Position position, int maxCount, bool resolveLinkTos\n);\n```\n\n----------------------------------------\n\nTITLE: Aborting Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to abort a non-existent projection. An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Import EventStore Client Namespace (.NET)\nDESCRIPTION: This C# snippet imports the EventStore.Client namespace, which is necessary for interacting with the EventStoreDB. This statement must be included to access the classes and methods provided by the EventStore client library.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/quick-tour.md#_snippet_1\n\nLANGUAGE: .NET\nCODE:\n```\nusing EventStore.Client;\n```\n\n----------------------------------------\n\nTITLE: Deleting Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to delete a non-existent projection. An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Check Auto-Scavenge Configuration YAML\nDESCRIPTION: Checks if Auto-Scavenge is disabled in the configuration file and enables it. Requires access to the KurrentDB configuration file. It shows an example of how the `Enabled` property should be set in the `AutoScavenge` configuration section to enable or disable Auto-Scavenge functionality.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nAutoScavenge:\n  Enabled: false\n```\n\n----------------------------------------\n\nTITLE: Executing Redis CLI using Docker\nDESCRIPTION: This command executes the Redis CLI within a Docker container, allowing you to interact with the Redis server.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_0\n\nLANGUAGE: SH\nCODE:\n```\ndocker exec -it redis redis-cli\n```\n\n----------------------------------------\n\nTITLE: Pause Auto-Scavenge HTTP POST\nDESCRIPTION: Pauses Auto-Scavenge using the `/auto-scavenge/pause` HTTP endpoint. Requires authorization and that Auto-Scavenge is currently in progress (`\"state\": \"InProgress\"`).\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Auto-Scavenge.md#_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST https://127.0.0.1:2113/auto-scavenge/pause\nAuthorization: Basic admin:changeit\n\n```\n\n----------------------------------------\n\nTITLE: EventStoreDB UsersManager Extension Methods\nDESCRIPTION: This code snippet demonstrates the extension methods for the `UsersManager` class in the EventStoreDB .NET client. It is useful for idempotent adding/removing user groups.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/security.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n@[code{Extensions}](./sample-code/DotNetClient/UsersManagerExtensions.cs)\n```\n\n----------------------------------------\n\nTITLE: Read State Partition Response (JSON)\nDESCRIPTION: This JSON represents the response containing the state for a specific partition of a projection. The structure includes the partition ID and the corresponding state data.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n{\n    \"partition\": \"stream-123\",\n    \"state\": {\n        \"count\": 5\n    }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Augmenting Watched Namespaces\nDESCRIPTION: This command updates the Operator deployment to include an additional namespace for monitoring using Helm upgrade. It reuses previous values and sets the `operator.namespaces` parameter to include the new namespace. Requires kubectl and helm to be configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/getting-started/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade kurrentdb-operator kurrent-latest/kurrentdb-operator \\\n  --version 1.0.0 \\\n  --namespace kurrent \\\n  --reuse-values \\\n  --set operator.namespaces='{kurrent,foo,bar}'\n```\n\n----------------------------------------\n\nTITLE: Deploying the Operator in Specific Namespaces\nDESCRIPTION: This command deploys the Kurrent Operator to track resources across specific namespaces using Helm. It configures the Operator to target specific namespaces by setting the `operator.namespaces` parameter. Requires kubectl and helm to be configured and a valid license key.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/getting-started/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kurrentdb-operator kurrent-latest/kurrentdb-operator \\\n  --version 1.0.0 \\\n  --namespace kurrent \\\n  --create-namespace \\\n  --set crds.enabled=true \\\n  --set-file operator.license.key=/path/to/license.key \\\n  --set-file operator.license.file=/path/to/license.lic \\\n  --set operator.namespaces='{kurrent, foo}'\n```\n\n----------------------------------------\n\nTITLE: Deploying a Self-Signed Certificate Authority using kubectl\nDESCRIPTION: This command deploys the self-signed Certificate Authority defined in `ca.yaml` to the `kurrent` namespace using kubectl.  It creates the CA certificate and associated secret, which will be used to sign other certificates.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kurrent apply -f ca.yaml\n```\n\n----------------------------------------\n\nTITLE: Read Updated Projection Stream (C#)\nDESCRIPTION: This C# code shows how to read the results from the updated stream using the new stream name.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n//Read result stream with new name\n*/\n```\n\n----------------------------------------\n\nTITLE: Start HTTP Sink Connector Bash\nDESCRIPTION: Starts a specific HTTP Sink connector in KurrentDB. It sends a POST request to the connectors/{connector_id}/start endpoint. The connector ID is assumed to be 'test-app'. Requires the connector to be created before starting.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -i -X POST http://localhost:2113/connectors/test-app/start\n```\n\n----------------------------------------\n\nTITLE: Update User Projection (C#)\nDESCRIPTION: This C# code demonstrates updating an existing user projection with a new query using the `ProjectionsManager`. This allows modifying the logic of a running projection.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.UpdateContinuousAsync(\n    \"XboxOneSCounter\",\n    \"fromAll().when({$init: function() { return { count: 0 }; }, ItemAdded: function(state, event) { if (event.data.product == 'Xbox One S') { state.count++; } return state; } }).outputState();\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Opening CartProjection.cs in RedisProjection with VS Code\nDESCRIPTION: This command opens the CartProjection.cs file for the Redis projection application using Visual Studio Code.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\ncode ./RedisProjection/CartProjection.cs\n```\n\n----------------------------------------\n\nTITLE: Run a debug container in Kubernetes\nDESCRIPTION: This command deploys an ephemeral `busybox` container to the Kubernetes cluster, providing a shell environment for testing network connectivity. It is used to verify that the Kubernetes cluster can reach the KurrentDB cloud cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl run -i --tty --rm debug --image=busybox --restart=Never -- sh\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with Go modules\nDESCRIPTION: This command installs the `kurrentdb` package using Go modules. This package provides the necessary client SDK for interacting with KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/kurrent-io/KurrentDB-Client-Go/kurrentdb\n```\n\n----------------------------------------\n\nTITLE: Deploying a Self-Signed Certificate Authority Issuer using kubectl\nDESCRIPTION: This command deploys the self-signed Certificate Authority Issuer defined in `ca-issuer.yaml` to the `kurrent` namespace using kubectl. This allows future certificates to be generated using the self-signed certificate authority.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kurrent apply -f ca-issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Start Live Data Generator (Shell)\nDESCRIPTION: This script starts a live data generator that simulates events being added to KurrentDB. It executes a shell script to generate data, which will be reflected in the read models. The URLs to the KurrentDB Admin UI and Demo Web Page are printed to the terminal.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-4.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/4-start-live-data-gen.sh\n```\n\n----------------------------------------\n\nTITLE: Open Postgres Projection Program (SQL)\nDESCRIPTION: This command opens the main program for the Postgres projection application, allowing you to inspect the C# code responsible for subscribing to streams and updating the Postgres database. It uses the `code` command, assuming a suitable IDE is configured to handle the file.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-4.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncode ./PostgresProjection/program.cs\n```\n\n----------------------------------------\n\nTITLE: Get MongoDB Sink Connector Configuration (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the configuration settings of the MongoDB Sink connector instance in KurrentDB by sending a GET request to the KurrentDB API.  It uses curl with authentication credentials to access the settings endpoint. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ncurl -u admin:password  `\n-X GET https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/settings  \n```\n\n----------------------------------------\n\nTITLE: Install EventStoreCloud Pulumi package (npm)\nDESCRIPTION: Installs the @eventstore/pulumi-eventstorecloud package using npm.  This allows the Pulumi program to interact with Kurrent Cloud. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/pulumi.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @eventstore/pulumi-eventstorecloud\n```\n\n----------------------------------------\n\nTITLE: Sample Event Body (JSON)\nDESCRIPTION: This JSON code represents a sample event body to be appended to KurrentDB.  It contains the loan amount and term. This event data is sent to the MongoDB Sink connector for processing and storage in MongoDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Amount\": 10000,\n  \"loanTerm\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Create carts table in Postgres\nDESCRIPTION: This SQL statement creates the `carts` table in Postgres.  It defines the schema with columns for cart ID, customer ID, status, and timestamps for creation and update. The `cart_id` is the primary key.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS carts (\n  cart_id TEXT PRIMARY KEY,\n  customer_id TEXT NULL,\n  status TEXT NOT NULL DEFAULT 'STARTED',\n  created_at TIMESTAMP NOT NULL,\n  updated_at TIMESTAMP NOT NULL\n)\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with yarn\nDESCRIPTION: Installs the @kurrent/kurrentdb-client package using Yarn, another Node.js package manager. This command adds the KurrentDB client library as a dependency to the project.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Deploying a LetsEncrypt ClusterIssuer using kubectl\nDESCRIPTION: This command deploys the LetsEncrypt ClusterIssuer defined in `issuer.yaml` to the `kurrent` namespace using kubectl. It assumes that the `issuer.yaml` file contains a valid Kubernetes manifest for the ClusterIssuer resource.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/managing-certificates.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kurrent apply -f issuer.yaml\n```\n\n----------------------------------------\n\nTITLE: Exiting the Redis CLI\nDESCRIPTION: This command exits the Redis CLI and returns to the terminal.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_3\n\nLANGUAGE: SH\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Maven dependency for KurrentDB client\nDESCRIPTION: Declares a Maven dependency for the kurrentdb-client library.  This is required for Java projects using Maven to manage dependencies, specifying the group ID, artifact ID, and version of the KurrentDB client.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.kurrent</groupId>\n  <artifactId>kurrentdb-client</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Inspect RabbitMQ Queue (Bash)\nDESCRIPTION: This Bash command inspects a specific queue and retrieves messages from it using the `rabbitmqadmin` command-line tool.  `your-queue-name` must be replaced by the name of the target queue.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nrabbitmqadmin get queue=your-queue-name \n```\n\n----------------------------------------\n\nTITLE: Initializing Logging for an Embedded Node in C#\nDESCRIPTION: This code snippet demonstrates how to initialize the `LogManager` for enabling logging in an embedded EventStoreDB node. It requires the logger to be configured with a `log.config` file in the configuration directory.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/embedded.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nLogManager.Init(logComponentName, logDirectory, logConfigurationDirectory);\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Projection with Conflict\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to create projections with the same name. The operation results in an error due to the name collision.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Gradle dependency for KurrentDB client\nDESCRIPTION: Declares a Gradle dependency for the kurrentdb-client library. This is required for Java projects using Gradle to manage dependencies, specifying the group ID, artifact ID, and version of the KurrentDB client.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'io.kurrent:kurrentdb-client:1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Projection Management Client\nDESCRIPTION: This command installs the `EventStore.Client.Grpc.ProjectionManagement` NuGet package for .NET projects.  This package provides the necessary client SDK for interacting with KurrentDB projection management. A specific version is specified.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package EventStore.Client.Grpc.ProjectionManagement --version 23.*\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration (0.13+)\nDESCRIPTION: Configures the Kurrent Cloud provider in Terraform version 0.13 and later. This snippet specifies the source and version of the Kurrent Cloud provider, enabling Terraform to install and use it.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    kurrentcloud = {\n      source  = \"kurrent.io/kurrentcloud/kurrentcloud\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\nprovider \"kurrentcloud\" {\n  token           = var.kurrent_cloud_token\n  organization_id = var.kurrent_cloud_organization_id\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CRDs Manually\nDESCRIPTION: This snippet shows how to manually install the CRDs for the Kurrent Operator. First, the Helm chart is pulled and extracted. Then, kubectl is used to apply the CRDs from the chart's templates directory. Requires kubectl and helm to be configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/getting-started/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Download the kurrentdb-operator Helm chart\nhelm pull kurrent-latest/kurrentdb-operator --version 1.0.0 --untar\n# Install the CRDs\nkubectl apply -f kurrentdb-operator/templates/crds\n```\n\n----------------------------------------\n\nTITLE: Deleting a Public Network with the ESC CLI\nDESCRIPTION: This command deletes a public network using the `esc` CLI. It requires specifying the network ID using the `--id` flag. Before deleting, ensure no clusters are provisioned on the network.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/networking/public-network.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesc infra networks delete \\\n    --id \"cu3hlaiirsdmuidcjffg\"\n```\n\n----------------------------------------\n\nTITLE: Renaming a Public Network with the ESC CLI\nDESCRIPTION: This command renames a public network using the `esc` CLI.  It requires specifying the network ID and the new name using the `--id` and `--name` flags, respectively. The command updates the network's name to the specified value.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/networking/public-network.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesc infra networks update \\\n    --id \"cu3hlaiirsdmuidcjffg\" \\\n    --name \"Public AWS us-west-2 Renamed\"\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with Poetry\nDESCRIPTION: This command installs the `kurrentdbclient` package using Poetry. This package provides the necessary client SDK for interacting with KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry add kurrentdbclient\n```\n\n----------------------------------------\n\nTITLE: Adding the Kurrent Helm Repository\nDESCRIPTION: This command adds the Kurrent Helm repository to your local Helm configuration. This allows you to install the kurrentdb-operator chart. Requires Helm 3 CLI to be installed and configured.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/getting-started/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kurrent-latest \\\n  'https://packages.kurrent.io/basic/kurrent-latest/helm/charts/'\n```\n\n----------------------------------------\n\nTITLE: Enabling Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to enable a non-existent projection. An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Enable IP Forwarding (Bash)\nDESCRIPTION: Enables IP forwarding on the cloud VM to allow traffic to be routed through it.  This is a prerequisite for Tailscale subnet routing. The first command writes the `net.ipv4.ip_forward = 1` to `/etc/sysctl.conf` and the second command applies the changes.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/tailscale.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p /etc/sysctl.conf\n```\n\n----------------------------------------\n\nTITLE: Inspect network configuration inside container\nDESCRIPTION: This command, executed within the `busybox` container, displays the network configuration.  The output shows the IP address assigned to the container, confirming it belongs to the configured subnet.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/ # ifconfig\neth0      Link encap:Ethernet  HWaddr 66:93:89:8F:D7:CF\n          inet addr:172.16.101.19  Bcast:0.0.0.0  Mask:255.255.255.255\n          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1\n          RX packets:12 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:7 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:1252 (1.2 KiB)  TX bytes:640 (640.0 B)\n```\n\n----------------------------------------\n\nTITLE: Listing All Persistent Subscriptions C#\nDESCRIPTION: This snippet shows how to list all persistent subscriptions from all streams using the `List` method of the `PersistentSubscriptionsManager`. It optionally takes user credentials for authentication. This returns information about all persistent subscriptions. It is an asynchronous operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nTask List(UserCredentials userCredentials = null);\n```\n\n----------------------------------------\n\nTITLE: Exit Postgres CLI\nDESCRIPTION: This command is used to exit the Postgres CLI session and return to the terminal.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Disabling Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to disable a non-existent projection.  An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Listing all keys in Redis\nDESCRIPTION: This command lists all the keys stored in the Redis database.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_1\n\nLANGUAGE: SH\nCODE:\n```\nKEYS *\n```\n\n----------------------------------------\n\nTITLE: Installing KurrentDB client with yarn\nDESCRIPTION: This command installs the `@kurrent/kurrentdb-client` package using Yarn.  This package provides the necessary client SDK for interacting with KurrentDB. TypeScript type declarations are included in the package.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Resetting Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to reset a non-existent projection. An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Kafka Sink Start Response\nDESCRIPTION: This HTTP response indicates a successful start of the Kafka Sink connector, confirming that the connector is now active and streaming events.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/Kafka_Sink.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with pnpm\nDESCRIPTION: Installs the @kurrent/kurrentdb-client package using pnpm, a performant Node.js package manager.  This command adds the KurrentDB client library as a dependency to the project.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Check HTTP Sink Connector Status Bash\nDESCRIPTION: Retrieves the status and settings of all connectors in KurrentDB. It sends a GET request to the connectors endpoint with a JSON payload specifying that settings should be included and setting paging options. The script outputs the details of all connectors, including their current state.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/HTTP_Connector.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nJSON=$(cat <<EOF\n{\n \"includeSettings\": true,\n \"paging\": {\n     \"page\": 1,\n     \"pageSize\": 100\n }\n}\nEOF\n)\n\ncurl -X GET \\\n -H \"Content-Type: application/json\" \\\n -d \"$JSON\" \\\n http://localhost:2113/connectors\n```\n\n----------------------------------------\n\nTITLE: DNS Resolution Check with nslookup\nDESCRIPTION: This command checks DNS resolution using the `nslookup` utility. It's used to diagnose if a domain name resolves correctly to an IP address. The domain name `buh63kqrh41nfqpviing.mesdb.kurrent.cloud` should be replaced with the actual cluster DNS name to be tested.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnslookup buh63kqrh41nfqpviing.mesdb.kurrent.cloud\n```\n\n----------------------------------------\n\nTITLE: Defining KurrentDBBackup Resource for Leader Backup (YAML)\nDESCRIPTION: This YAML snippet defines a KurrentDBBackup resource to back up the leader node of a KurrentDB cluster. It specifies the API version, kind (KurrentDBBackup), metadata (name), and spec (volumeSnapshotClassName and clusterName). The `volumeSnapshotClassName` is set to `ebs-vs`, but this should be configured to match the specific Kubernetes environment.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/server/kubernetes-operator/operations/database-backup.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: kubernetes.kurrent.io/v1\nkind: KurrentDBBackup\nmetadata:\n  name: kurrentdb-cluster\nspec:\n  volumeSnapshotClassName: ebs-vs\n  clusterName: kurrentdb-cluster\n\n```\n\n----------------------------------------\n\nTITLE: Updating Projection - Not Found\nDESCRIPTION: Code snippets demonstrating the error that occurs when trying to update a non-existent projection. An error is thrown as the projection does not exist.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Start RabbitMQ Service (Powershell)\nDESCRIPTION: This PowerShell command starts the RabbitMQ service on Windows. This is required for using the rabbitmqctl command-line tool.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/RabbitMQ_Sink.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nrabbitmq-service start \n```\n\n----------------------------------------\n\nTITLE: Opening Program.cs in RedisProjection with VS Code\nDESCRIPTION: This command opens the main program file (Program.cs) for the Redis projection application using Visual Studio Code.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-3.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ncode ./RedisProjection/Program.cs\n```\n\n----------------------------------------\n\nTITLE: Building a Single Node with Default Options in C#\nDESCRIPTION: This code snippet demonstrates how to build a single EventStoreDB node with default options using the `EmbeddedVNodeBuilder`. It initializes the builder as a single node, uses default endpoints, runs in-memory, builds the node, and starts it, waiting until it is ready.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/embedded.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar nodeBuilder = EmbeddedVNodeBuilder\n    .AsSingleNode()\n    .OnDefaultEndpoints() \n    .RunInMemory();\n\nvar node = nodeBuilder.Build();\nawait node.StartAndWaitUntilReady();\n```\n\n----------------------------------------\n\nTITLE: Update Projection Options (JavaScript)\nDESCRIPTION: This JavaScript code shows how to configure properties of a projection by updating the `options` object, in this case to change the name of the results stream.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*\noptions({\n    resultStreamName: '$projections-my-custom-projection-result'\n})\n\nfromAll()\n    .when({\n        $init: function() {\n            return { count: 0 };\n        },\n        ItemAdded: function(state, event) {\n            if (event.data.product == 'Xbox One S') {\n                state.count++;\n            }\n            return state;\n        }\n    }).outputState();\n*/\n```\n\n----------------------------------------\n\nTITLE: Create User Projection (C#)\nDESCRIPTION: This C# code shows how to create a user projection in EventStoreDB using the `ProjectionsManager` instance. It takes the projection name, query, and optional user credentials as parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.CreateContinuousAsync(\n    \"XboxOneSCounter\",\n    \"fromAll().when({$init: function() { return { count: 0 }; }, ItemAdded: function(state, event) { if (event.data.product == 'Xbox One S') { state.count++; } return state; } });\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry package (NodeJS)\nDESCRIPTION: These commands install the `@kurrent/opentelemetry` package using npm, yarn, or pnpm. This package provides OpenTelemetry support for the KurrentDB NodeJS client, including TypeScript type definitions.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @kurrent/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Describing a Persistent Subscription C#\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a specific persistent subscription on a given stream using the `Describe` method of the `PersistentSubscriptionsManager`. It requires the stream name, subscription name, and optionally user credentials. The user must have access to both the stream and the subscription. It is an asynchronous operation.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/subscriptions.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nTask Describe(string stream, string subscriptionName, UserCredentials userCredentials = null);\n```\n\n----------------------------------------\n\nTITLE: Get Partition State Async in C#\nDESCRIPTION: This method retrieves the state of a projection for a specific partition asynchronously. It requires the projection name and partition identifier. An optional UserCredentials parameter can be supplied for authentication. It returns a Task representing the asynchronous operation, which resolves to a string containing the partition state.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nTask<string> GetPartitionStateAsync(\n    string name, string partition, UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream (Soft Delete)\nDESCRIPTION: This code snippet demonstrates how to soft-delete a stream using the `DeleteStreamAsync` method. Soft-deleting allows for recreation of the stream by appending new events. The `expectedVersion` parameter is important for ensuring correct concurrency control during the deletion process.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/streams.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTask<DeleteResult> DeleteStreamAsync(\n    string stream, long expectedVersion, \n    UserCredentials userCredentials = null\n);\n```\n\n----------------------------------------\n\nTITLE: Download Kurrent Cloud Provider (macOS)\nDESCRIPTION: Downloads the Kurrent Cloud Terraform provider binary for macOS systems. The script constructs the filename using the Terraform provider version and then uses `curl` to download the file. It requires `curl` and `unzip` utilities.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/terraform.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nVERSION={{ $frontmatter.terraform_current_version }}\n\ncurl -LO https://github.com/kurrent-io/terraform-provider-kurrentcloud/releases/download/v${VERSION}/terraform-provider-kurrentcloud_${VERSION}_darwin_amd64.zip\nunzip terraform-provider-kurrentcloud_${VERSION}_darwin_amd64.zip\nmv terraform-provider-kurrentcloud_v${VERSION} ~/.terraform.d/plugins/\n```\n\n----------------------------------------\n\nTITLE: Project CartGotCheckedOut Event C#\nDESCRIPTION: Handles the projection for the 'CartGotCheckedOut' event by updating the status of an existing cart record in the 'carts' table to 'CHECKED_OUT'.  It updates the `status` and `updated_at` fields.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-2.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprivate static IEnumerable<CommandDefinition>? Project(CartGotCheckedOut evt)\n{\n var sql = @\"UPDATE carts\n  SET status = @Status,\n   updated_at = @Timestamp\n  WHERE cart_id = @CartId\";\n\n var parameters = new { CartId = evt.cartId, Status = \"CHECKED_OUT\", Timestamp = evt.at };\n\n yield return new CommandDefinition(sql, parameters);\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: This YAML snippet defines a Docker Compose configuration to run an EventStoreDB instance. It specifies the image, ports, and environment variables required to set up and run the database server.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/quick-tour.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '3.8'\nservices:\n  eventstore:\n    image: eventstore/eventstore:latest\n    ports:\n      - \"1113:1113\"\n      - \"2113:2113\"\n    environment:\n      - EVENTSTORE_RUN_PROJECTIONS=All\n      - EVENTSTORE_START_STANDARD_PROJECTIONS=true\n    volumes:\n      - eventstore-data:/var/lib/eventstore\n\nvolumes:\n  eventstore-data:\n```\n\n----------------------------------------\n\nTITLE: Start Demo Web Page (Shell)\nDESCRIPTION: This script starts the Demo Web Page application, allowing you to view the real-time updates to the read models. It executes a shell script that sets up and runs the web application. The URL to access the Demo Web UI is printed to the terminal.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/getting-started/use-cases/mix-and-match-database/tutorial-4.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/3-start-demo-web-page.sh\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with npm\nDESCRIPTION: Installs the @kurrent/kurrentdb-client package using npm, the Node.js package manager.  This command adds the KurrentDB client library as a dependency to the project.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @kurrent/kurrentdb-client\n```\n\n----------------------------------------\n\nTITLE: Connect to EventStoreDB (.NET)\nDESCRIPTION: This C# snippet establishes a connection to EventStoreDB running locally via TCP.  It configures the connection settings and creates an EventStoreClient instance using those settings, connecting to the default TCP port 1113.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/quick-tour.md#_snippet_2\n\nLANGUAGE: .NET\nCODE:\n```\nvar settings = EventStoreClientSettings\n    .Create($\"tcp://admin:changeit@localhost:1113\");\n\nvar client = new EventStoreClient(settings);\n```\n\n----------------------------------------\n\nTITLE: Getting KurrentDB Cluster Status using esc CLI\nDESCRIPTION: This command retrieves the status of a KurrentDB cluster using the `esc mesdb clusters get` command. It requires the cluster ID and project ID as parameters. The output is in JSON format.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ esc mesdb clusters get --id c1mnqjdo0aembuk4ljo0 \\\n    --project-id c10d0h2rh41lba1v92k0 --json\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with Poetry\nDESCRIPTION: Installs the kurrentdbclient package using Poetry, a Python dependency management tool. This is an alternative to pip for managing project dependencies including the KurrentDB client.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add kurrentdbclient\n```\n\n----------------------------------------\n\nTITLE: Running KurrentDB in Docker (Development Mode)\nDESCRIPTION: This command starts KurrentDB in developer mode using a Docker container.  It uses the latest image from kurrentplatform/kurrentdb.  This is intended for local development and testing purposes.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run kurrentplatform/kurrentdb:latest --dev\n```\n\n----------------------------------------\n\nTITLE: Reset User Projection (C#)\nDESCRIPTION: This C# code demonstrates how to reset a user projection, clearing its state and restarting it from the beginning. This is useful for replaying events and recalculating the projection's state.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n/*\nawait pm.ResetAsync(\"XboxOneSCounter\");\n*/\n```\n\n----------------------------------------\n\nTITLE: Install KurrentDB client with pip\nDESCRIPTION: Installs the kurrentdbclient package from PyPI using pip. This is a prerequisite for using the Python SDK to interact with KurrentDB.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install kurrentdbclient\n```\n\n----------------------------------------\n\nTITLE: Successful Connector Stop Response\nDESCRIPTION: This text shows the HTTP response received when the MongoDB Sink connector stops successfully. A `200 OK` status code indicates that the request was successful.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Shopping Cart Counter Projection (JavaScript)\nDESCRIPTION: This JavaScript projection defines a counter per stream for a category, producing a count of items in each shopping cart. It uses `$by_category` and its `fromCategory` API method.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nfromCategory('shoppingCart')\n    .when({\n        $init: function() {\n            return { count: 0 };\n        },\n        ItemAdded: function(state, event) {\n            state.count++;\n            return state;\n        }\n    });\n*/\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Stream in KurrentDB - Java\nDESCRIPTION: This snippet demonstrates how to soft delete a stream in KurrentDB using Java.  It uses the `deleteStream` method along with `DeleteStreamOptions`. It takes the `streamName` as an argument, which is the name of the stream to be deleted. The `.get()` method is called to block until the operation completes.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/delete-stream.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclient.deleteStream(streamName, DeleteStreamOptions.get()).get();\n```\n\n----------------------------------------\n\nTITLE: Run debug container on Kubernetes\nDESCRIPTION: This command deploys a temporary `busybox` container to test connectivity from the EKS cluster. It provides an interactive shell within the container to run network diagnostic tools.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/guides/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl run -i --tty --rm debug --image=busybox --restart=Never -- sh\n```\n\n----------------------------------------\n\nTITLE: DNS Resolution Check with Specific DNS Server\nDESCRIPTION: This command checks DNS resolution using `nslookup` with a specified DNS server (1.1.1.1, Cloudflare's public DNS). It helps determine if the issue is with the local DNS server or the domain itself. Replace the domain name with the appropriate cluster DNS name for testing.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/faq.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnslookup buh63kqrh41nfqpviing.mesdb.kurrent.cloud 1.1.1.1\n```\n\n----------------------------------------\n\nTITLE: V5 Compatibility Mode Connection String\nDESCRIPTION: This C# code defines a connection string to connect to an EventStoreDB v5 cluster. It sets the `ConnectTo`, `TargetHost`, and `CompatibilityMode` parameters.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/connecting.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = $\"ConnectTo=discover://{cluster_dns}:2113?TargetHost={cluster_dns};CompatibilityMode=5;\"\n```\n\n----------------------------------------\n\nTITLE: Aborting Projection\nDESCRIPTION: Code snippets for aborting a projection. Aborting does not save the projection's checkpoint.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Displaying New KurrentDB Cluster ID after Restoration\nDESCRIPTION: This command outputs the ID of the newly created KurrentDB cluster after restoring from a backup. This ID is used to identify and manage the cluster.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/ops/backups.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nClusterId(\"c1mnqjdo0aembuk4ljo0\")\n```\n\n----------------------------------------\n\nTITLE: Query Updated Projection (C#)\nDESCRIPTION: This C# code shows how to query the events in the result stream of an updated projection.  It reads the stream to retrieve the latest state updates.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/tcp/dotnet/21.2/projections.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n/*\n//Read result stream\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding KurrentDB client dependency using Maven\nDESCRIPTION: This XML snippet adds the `kurrentdb-client` dependency to a Maven project. It specifies the groupId, artifactId, and version of the KurrentDB client. Ensure Maven is properly configured to resolve dependencies from Maven Central.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/projections.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.kurrent</groupId>\n  <artifactId>kurrentdb-client</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Install EventStoreCloud Pulumi package (yarn)\nDESCRIPTION: Installs the @eventstore/pulumi-eventstorecloud package using yarn.  This allows the Pulumi program to interact with Kurrent Cloud. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/cloud/dedicated/automation/pulumi.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @eventstore/pulumi-eventstorecloud\n```\n\n----------------------------------------\n\nTITLE: Stop MongoDB Sink Connector via API (Bash)\nDESCRIPTION: This Bash command stops the MongoDB Sink connector in KurrentDB by sending a POST request to the KurrentDB API. It uses curl with authentication credentials. Replace `admin:password` and `your-kurrentdb-cluster-url` with appropriate values.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -L -u admin:password  \\ \n-X POST https://your-kurrentdb-cluster-url:2113/connectors/mongodb-sink-quickstart/stop  \n```\n\n----------------------------------------\n\nTITLE: Example OpenTelemetry Trace\nDESCRIPTION: This bash output provides an example of an OpenTelemetry trace for an append operation in a KurrentDB stream. It shows the trace ID, span ID, activity source name, display name, start time, duration, tags, status code, and resource associated with the activity. It illustrates the type of information captured when OpenTelemetry is enabled.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nActivity.TraceId:            8da04787239dbb85c1f9c6fba1b1f0d6\nActivity.SpanId:             4352ec4a66a20b95\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: kurrentdb\nActivity.DisplayName:        streams.append\nActivity.Kind:               Client\nActivity.StartTime:          2024-05-29T06:50:41.2519016Z\nActivity.Duration:           00:00:00.1500707\nActivity.Tags:\n    db.kurrentdb.stream: d7caa2a5-1e19-4108-9541-58d5fba02d42\n    server.address: localhost\n    server.port: 2113\n    db.system: kurrentdb\n    db.operation: streams.append\nStatusCode: Ok\nResource associated with Activity:\n    service.name: sample\n    service.instance.id: 7316ef20-c354-4e64-97da-c1b99c2c28b0\n    telemetry.sdk.name: opentelemetry\n    telemetry.sdk.language: dotnet\n    telemetry.sdk.version: 1.8.1\n```\n\n----------------------------------------\n\nTITLE: Install OpenTelemetry package (NodeJS)\nDESCRIPTION: These commands install the `@kurrent/opentelemetry` package using npm, yarn, or pnpm. This package provides OpenTelemetry support for the KurrentDB NodeJS client, including TypeScript type definitions.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/clients/grpc/observability.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @kurrent/opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Find events in MongoDB\nDESCRIPTION: This MongoDB query finds and pretty prints all documents in the specified collection.\nSOURCE: https://github.com/kurrent-io/documentation/blob/master/docs/tutorials/MongoDB_Sink.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ndb.your-collection-name.find().pretty()\n```"
  }
]