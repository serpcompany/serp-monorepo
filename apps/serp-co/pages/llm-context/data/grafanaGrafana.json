[
  {
    "owner": "grafana",
    "repo": "grafana",
    "content": "TITLE: Documenting Grafana Permissions in Markdown Table - Markdown\nDESCRIPTION: This Markdown code snippet constructs a table listing various Grafana permissions alongside their hierarchical dependencies and descriptions. The table serves as a permissions reference, using Markdown pipe delimiters and embedded HTML lists to illustrate prerequisite roles or permissions. No software dependencies exist beyond Markdown rendering; inputs and outputs are static documentation, with no programmable functionality. The table format supports easy updates and visibility, but does not inherently enforce any access controls and is intended solely for documentation purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| `serviceaccounts:create`              | None                                                                                                                | Update Grafana service accounts.                                                                                                                                                                                          |\n| `serviceaccounts:delete`              | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Delete Grafana service accounts.                                                                                                                                                                                          |\n| `serviceaccounts:read`                | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Read Grafana service accounts.                                                                                                                                                                                            |\n| `serviceaccounts.permissions:write`   | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Update Grafana service account permissions to control who can do what with the service account.                                                                                                                           |\n| `serviceaccounts.permissions:read`    | <ul><li>`serviceaccounts:*`</li><li>`serviceaccounts:id:*`</li></ul>                                                | Read Grafana service account permissions to see who can do what with the service account.                                                                                                                                 |\n| `settings:read`                       | <ul><li>`settings:*`</li><li>`settings:auth.saml:*`</li><li>`settings:auth.saml:enabled`</li></ul> (property level) | Read the [Grafana configuration settings](/docs/grafana/<GRAFANA_VERSION>/setup-grafana/configure-grafana/)                                                                                                               |\n| `settings:write`                      | <ul><li>`settings:*`</li><li>`settings:auth.saml:*`</li><li>`settings:auth.saml:enabled`</li></ul> (property level) | Update any Grafana configuration settings that can be [updated at runtime](/docs/grafana/<GRAFANA_VERSION>/setup-grafana/configure-grafana/settings-updates-at-runtime/).                                                 |\n| `support.bundles:create`              | None                                                                                                                | Create support bundles.                                                                                                                                                                                                   |\n| `support.bundles:delete`              | None                                                                                                                | Delete support bundles.                                                                                                                                                                                                   |\n| `support.bundles:read`                | None                                                                                                                | List and download support bundles.                                                                                                                                                                                        |\n| `snapshots:create`                    | None                                                                                                                | Create snapshots.                                                                                                                                                                                                         |\n| `snapshots:delete`                    | None                                                                                                                | Delete snapshots.                                                                                                                                                                                                         |\n| `snapshots:read`                      | None                                                                                                                | List snapshots.                                                                                                                                                                                                           |\n| `status:accesscontrol`                | <ul><li>`services:accesscontrol`</li><ul>                                                                           | Get access-control enabled status.                                                                                                                                                                                        |\n| `teams.permissions:read`              | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Read members and Team Sync setup for teams.                                                                                                                                                                               |\n| `teams.permissions:write`             | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Add, remove and update members and manage Team Sync setup for teams.                                                                                                                                                      |\n| `teams.roles:add`                     | <ul><li>`permissions:type:delegate`</li><ul>                                                                        | Assign a role to a team.                                                                                                                                                                                                  |\n| `teams.roles:read`                    | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | List roles assigned directly to a team.                                                                                                                                                                                   |\n| `teams.roles:remove`                  | <ul><li>`permissions:type:delegate`</li><ul>                                                                        | Unassign a role from a team.                                                                                                                                                                                              |\n| `teams:create`                        | None                                                                                                                | Create teams.                                                                                                                                                                                                             |\n| `teams:delete`                        | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Delete one or more teams.                                                                                                                                                                                                 |\n| `teams:read`                          | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Read one or more teams and team preferences. To list teams through the UI one of the following permissions is required in addition to `teams:read`: `teams:write`, `teams.permissions:read` or `teams.permissions:write`. |\n| `teams:write`                         | <ul><li>`teams:*`</li><li>`teams:id:*`</li></ul>                                                                    | Update one or more teams and team preferences.                                                                                                                                                                            |\n| `users.authtoken:read`                | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | List authentication tokens that are assigned to a user.                                                                                                                                                                   |\n| `users.authtoken:write`               | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | Update authentication tokens that are assigned to a user.                                                                                                                                                                 |\n| `users.password:write`                | <ul><li>`global.users:*`</li><li>`global.users:id:*`</li></ul>                                                      | Update a user’s password.                                                                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Example Grafana RBAC Role Structure\nDESCRIPTION: This snippet illustrates the structure of a fixed Grafana RBAC role. It shows the role identifier (`fixed:datasources:reader`) and breaks down its associated permission into an `Action` (`datasources:read`) and a `Scope` (`datasources:*`), defining what operation is allowed on which resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- **Role:** `fixed:datasources:reader`\n  - **Permission:**\n    - **Action:** `datasources:read`\n    - **Scope:** `datasources:*`\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Annotations (Plaintext)\nDESCRIPTION: Defines the `annotations:delete` permission action required to delete annotations in Grafana. This action is associated with broader scopes like `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`annotations:delete`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Mapping Grafana Roles Based on Google Group Membership via JMESPath (INI)\nDESCRIPTION: This INI configuration uses a JMESPath expression in `role_attribute_path` to assign the 'Editor' role to users belonging to the Google group 'example-group@google.com' and the 'Viewer' role to all others. This requires `skip_org_role_sync` to be `false` and the `https://www.googleapis.com/auth/cloud-identity.groups.readonly` scope to be added to Grafana's Google auth scopes to retrieve group information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nrole_attribute_path = contains(groups[*], 'example-group@google.com') && 'Editor' || 'Viewer'\nskip_org_role_sync = false\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Organization Role Mapping (INI)\nDESCRIPTION: Grafana configuration snippet demonstrating organization role mapping. `org_attribute_path` specifies the payload field ('roles') containing organization identifiers. `org_mapping` defines rules: map 'org_foo' from payload to 'org_foo' org as 'Viewer', 'org_bar' to 'org_bar' org as 'Editor', and any other role ('*') to 'org_baz' org as 'Editor'. Also includes potential Grafana Admin mapping via `role_attribute_path` if 'admin' role is present and `allow_assign_grafana_admin` is true.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = contains(roles[*], 'admin') && 'GrafanaAdmin' || 'None'\nallow_assign_grafana_admin = true\norg_attribute_path = roles\norg_mapping = org_foo:org_foo:Viewer org_bar:org_bar:Editor *:org_baz:Editor\n```\n\n----------------------------------------\n\nTITLE: Provisioning Elasticsearch Data Source for Logs using YAML\nDESCRIPTION: Shows an example of provisioning an Elasticsearch data source specifically configured for log data, potentially from Filebeat, using Grafana's YAML provisioning. It includes standard parameters like name, type, URL, index pattern, interval, and time field, but adds log-specific fields (`logMessageField`, `logLevelField`) and demonstrates configuring `dataLinks` to link log fields (like `traceID`) to other data sources (e.g., Jaeger). Note the use of `$$` in the `url` field to escape environment variable expansion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: elasticsearch-v7-filebeat\n    type: elasticsearch\n    access: proxy\n    url: http://localhost:9200\n    jsonData:\n      index: '[filebeat-]YYYY.MM.DD'\n      interval: Daily\n      timeField: '@timestamp'\n      logMessageField: message\n      logLevelField: fields.level\n      dataLinks:\n        - datasourceUid: my_jaeger_uid # Target UID needs to be known\n          field: traceID\n          url: '$${__value.raw}' # Careful about the double \"$$\" because of env var expansion\n```\n\n----------------------------------------\n\nTITLE: Defining Option Formats for Select with React (JSX)\nDESCRIPTION: Demonstrates how to define an array of options for the Select component with label, value, description, and imgUrl properties. No external dependencies beyond React are required. Input is an array of option objects; output is a properly formatted array for use with Select and related components. Options support string, number, and optional hint fields.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n  { label: 'Basic option', value: 0 },\n  { label: 'Option with description', value: 1, description: 'this is a description' },\n  {\n    label: 'Option with description and image',\n    value: 2,\n    description: 'This is a very elaborate description, describing all the wonders in the world.',\n    imgUrl: 'https://placekitten.com/40/40',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Grafana Dashboard Definition - JSON\nDESCRIPTION: This JSON snippet provides a complete example of a Grafana dashboard definition. Save this as 'cluster.json' within the directory specified by the dashboard provider configuration. The dashboard defines panels (here, one 'CPU Usage' graph) and numerous metadata and settings. The dashboard is associated with the 'TestData' datasource, and includes panel, axis, and tooltip configuration. No 'id' is set, letting Grafana assign one. Dependencies: must match the schema used by your Grafana version, typically schemaVersion 16+. Input is automatic upon provisioning, and output is a new dashboard available in the chosen folder in the Grafana UI.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"__inputs\": [],\\n  \"__requires\": [],\\n  \"annotations\": {\\n    \"list\": []\\n  },\\n  \"editable\": false,\\n  \"gnetId\": null,\\n  \"graphTooltip\": 0,\\n  \"hideControls\": false,\\n  \"id\": null,\\n  \"links\": [],\\n  \"panels\": [\\n    {\\n      \"aliasColors\": {},\\n      \"bars\": false,\\n      \"dashLength\": 10,\\n      \"dashes\": false,\\n      \"datasource\": \"TestData\",\\n      \"fill\": 1,\\n      \"gridPos\": {\\n        \"h\": 8,\\n        \"w\": 24,\\n        \"x\": 0,\\n        \"y\": 0\\n      },\\n      \"id\": 2,\\n      \"legend\": {\\n        \"alignAsTable\": false,\\n        \"avg\": false,\\n        \"current\": false,\\n        \"max\": false,\\n        \"min\": false,\\n        \"rightSide\": false,\\n        \"show\": true,\\n        \"total\": false,\\n        \"values\": false\\n      },\\n      \"lines\": true,\\n      \"linewidth\": 1,\\n      \"links\": [],\\n      \"nullPointMode\": \"null\",\\n      \"percentage\": false,\\n      \"pointradius\": 5,\\n      \"points\": false,\\n      \"renderer\": \"flot\",\\n      \"repeat\": null,\\n      \"seriesOverrides\": [],\\n      \"spaceLength\": 10,\\n      \"stack\": false,\\n      \"steppedLine\": false,\\n      \"targets\": [],\\n      \"thresholds\": [],\\n      \"timeFrom\": null,\\n      \"timeShift\": null,\\n      \"title\": \"CPU Usage\",\\n      \"tooltip\": {\\n        \"shared\": true,\\n        \"sort\": 0,\\n        \"value_type\": \"individual\"\\n      },\\n      \"type\": \"graph\",\\n      \"xaxis\": {\\n        \"buckets\": null,\\n        \"mode\": \"time\",\\n        \"name\": null,\\n        \"show\": true,\\n        \"values\": []\\n      },\\n      \"yaxes\": [\\n        {\\n          \"format\": \"short\",\\n          \"label\": null,\\n          \"logBase\": 1,\\n          \"max\": null,\\n          \"min\": null,\\n          \"show\": true\\n        },\\n        {\\n          \"format\": \"short\",\\n          \"label\": null,\\n          \"logBase\": 1,\\n          \"max\": null,\\n          \"min\": null,\\n          \"show\": true\\n        }\\n      ]\\n    }\\n  ],\\n  \"refresh\": \"\",\\n  \"rows\": [],\\n  \"schemaVersion\": 16,\\n  \"tags\": [\"kubernetes\"],\\n  \"templating\": {\\n    \"list\": []\\n  },\\n  \"time\": {\\n    \"from\": \"now-6h\",\\n    \"to\": \"now\"\\n  },\\n  \"timepicker\": {},\\n  \"timezone\": \"browser\",\\n  \"title\": \"Cluster\",\\n  \"version\": 0\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Data Source Insights (Plaintext)\nDESCRIPTION: Defines the `datasources.insights:read` permission action allowing users to read data source insights data. Viewing these insights also requires the `datasources:read` permission for the specific data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.insights:read`\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP in Grafana Configuration (INI)\nDESCRIPTION: This snippet shows the necessary configuration block within Grafana's main configuration file (typically `grafana.ini`) to enable LDAP authentication. It sets `enabled` to `true`, specifies the path to the LDAP-specific configuration file (`ldap.toml`), and determines if new users can be automatically created upon successful LDAP login via `allow_sign_up`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[auth.ldap]\n# Set to `true` to enable LDAP integration (default: `false`)\nenabled = true\n\n# Path to the LDAP specific configuration file (default: `/etc/grafana/ldap.toml`)\nconfig_file = /etc/grafana/ldap.toml\n\n# Allow sign-up should be `true` (default) to allow Grafana to create users on successful LDAP authentication.\n# If set to `false` only already existing Grafana users will be able to login.\nallow_sign_up = true\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate and PKCS#8 Private Key using OpenSSL (Bash)\nDESCRIPTION: Provides an OpenSSL command to generate a new self-signed X.509 certificate (`cert.pem`) and a corresponding private key in PKCS#8 format (`key.pem`), valid for 365 days, without password protection (`-nodes`). This format is required for Grafana SAML configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Input Values Individually (JavaScript/JSX/TypeScript)\nDESCRIPTION: Shows how to set default values directly on specific form inputs using the defaultValue prop, ensuring uncontrolled input fields have initial values. Useful for granular control over field resets, compatible with both plain JavaScript and TypeScript. Requires Form, Input, and react-hook-form’s register.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// Passing default value directly to form inputs\n\ninterface FormDTO {\n  name: string;\n  isAdmin: boolean;\n}\n\nconst defaultValues: FormDto {\n  name: 'Roger Waters',\n  isAdmin: false,\n}\n\n<Form ...>{\n  ({register}) => (\n    <>\n      <Input {...register(\"name\")} defaultValue={default.name} />\n    </>\n  )}\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth in Grafana Configuration File\nDESCRIPTION: Bash configuration example for enabling Google OAuth in Grafana's configuration file. It includes essential parameters like client credentials, authorization endpoints, scopes, and domain restrictions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auth.google]\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_id = CLIENT_ID\nclient_secret = CLIENT_SECRET\nscopes = openid email profile\nauth_url = https://accounts.google.com/o/oauth2/v2/auth\ntoken_url = https://oauth2.googleapis.com/token\napi_url = https://openidconnect.googleapis.com/v1/userinfo\nallowed_domains = mycompany.com mycompany.org\nhosted_domain = mycompany.com\nuse_pkce = true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Grafana Service in Docker Compose (YAML)\nDESCRIPTION: A basic `docker-compose.yaml` configuration defining a Grafana service using the `grafana/grafana-enterprise` image. It names the container 'grafana', ensures it restarts unless stopped, and maps the host's port 3000 to the container's port 3000. This setup uses ephemeral storage within the container.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  grafana:\n    image: grafana/grafana-enterprise\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n     - '3000:3000'\n```\n\n----------------------------------------\n\nTITLE: Setting Azure AD OAuth Parameters via Grafana Environment Variables (Plaintext)\nDESCRIPTION: This list documents environment variables that can be used to supply sensitive Azure AD OAuth parameters for Grafana, providing an alternative to setting values directly in the configuration file. These variables must be set in the environment of the Grafana process. This approach is preferable for managing secrets securely in containerized or automated deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nGF_AUTH_AZUREAD_CLIENT_AUTHENTICATION\nGF_AUTH_AZUREAD_CLIENT_ID\nGF_AUTH_AZUREAD_CLIENT_SECRET\nGF_AUTH_AZUREAD_MANAGED_IDENTITY_CLIENT_ID\nGF_AUTH_AZUREAD_FEDERATED_CREDENTIAL_AUDIENCE\n```\n\n----------------------------------------\n\nTITLE: Creating API Key Obsolete Response Example using HTTP/JSON\nDESCRIPTION: Example HTTP 410 Gone response indicating that the `POST /api/auth/keys` endpoint for creating API keys is obsolete as of Grafana 11.3.0. The response body contains a JSON message advising the use of the Service Account API endpoints (`POST /api/serviceaccounts` and `POST /api/serviceaccounts/{id}/tokens`) instead.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 410\nContent-Type: application/json\n\n{\"message\":\"this endpoint has been removed, please use POST /api/serviceaccounts and POST /api/serviceaccounts/{id}/tokens instead\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Deployment Manifest in YAML\nDESCRIPTION: Defines the Kubernetes resources required for deploying Grafana OSS within the `grafana.yaml` file. It includes a PersistentVolumeClaim (PVC) named `grafana-pvc` requesting 1Gi of storage, a Deployment named `grafana` managing pods running the `grafana/grafana:latest` image, and a LoadBalancer Service named `grafana` exposing port 3000. The Deployment specifies resource requests (250m CPU, 750Mi memory), volume mounts for persistent data, readiness and liveness probes for health checking, and security context settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: grafana-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: grafana\n  name: grafana\nspec:\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n    spec:\n      securityContext:\n        fsGroup: 472\n        supplementalGroups:\n          - 0\n      containers:\n        - name: grafana\n          image: grafana/grafana:latest\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 3000\n              name: http-grafana\n              protocol: TCP\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /robots.txt\n              port: 3000\n              scheme: HTTP\n            initialDelaySeconds: 10\n            periodSeconds: 30\n            successThreshold: 1\n            timeoutSeconds: 2\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold: 1\n            tcpSocket:\n              port: 3000\n            timeoutSeconds: 1\n          resources:\n            requests:\n              cpu: 250m\n              memory: 750Mi\n          volumeMounts:\n            - mountPath: /var/lib/grafana\n              name: grafana-pv\n      volumes:\n        - name: grafana-pv\n          persistentVolumeClaim:\n            claimName: grafana-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\nspec:\n  ports:\n    - port: 3000\n      protocol: TCP\n      targetPort: http-grafana\n  selector:\n    app: grafana\n  sessionAffinity: None\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Enforcing Secure Cookies (HTTPS) in Grafana INI\nDESCRIPTION: Illustrates the `cookie_secure` setting within the `[security]` section of the Grafana configuration file. Setting this to `true` ensures that Grafana session cookies are only transmitted over HTTPS connections, enhancing security. This setting is often required when `cookie_samesite` is set to `none`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[security]\ncookie_secure = true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Modal in React/TSX\nDESCRIPTION: Demonstrates how to use the `Modal` component in a React/TSX application using JSX syntax. It shows setting the `title` and `isOpen` props, adding content (a `div` element) within the modal body, and utilizing the nested `Modal.ButtonRow` component to include right-aligned action buttons like 'Cancel' (styled with secondary variant and outline fill) and 'Save'. This requires the `Modal` and `Button` components to be imported.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Modal/Modal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Modal title=\"title\" isOpen={true}>\n  <div>Some body</div>\n  <Modal.ButtonRow>\n    <Button variant=\"secondary\" fill=\"outline\">\n      Cancel\n    </Button>\n    <Button>Save</Button>\n  </Modal.ButtonRow>\n</Modal>\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Container with Docker CLI - Bash\nDESCRIPTION: Runs the latest stable Grafana Enterprise Docker image, exposing port 3000 from the container to the host and assigning a container name. This command requires Docker to be installed and available on your system. The output is a running container accessible on the host at port 3000; make sure the port is available.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Example SAML Configuration in grafana.ini\nDESCRIPTION: This INI snippet shows an example configuration within the `[auth.saml]` section of the Grafana configuration file (`grafana.ini` or `custom.ini`). It enables SAML, sets paths for the SP certificate and private key, specifies the IdP metadata URL (using Okta as an example), and maps SAML assertion attributes (DisplayName, Login, Email, Group) to Grafana user properties. The `name` parameter customizes the login button text, and `auto_login` is disabled. The `[server]` section with `root_url` is included for context, as it's often relevant for SAML configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[server]\nroot_url = https://grafana.example.com\n\n[auth.saml]\nenabled = true\nname = My IdP\nauto_login = false\nprivate_key_path = \"/path/to/private_key.pem\"\ncertificate_path = \"/path/to/certificate.cert\"\nidp_metadata_url = \"https://my-org.okta.com/app/my-application/sso/saml/metadata\"\nassertion_attribute_name = DisplayName\nassertion_attribute_login = Login\nassertion_attribute_email = Email\nassertion_attribute_groups = Group\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted PostgreSQL User for Grafana\nDESCRIPTION: SQL commands to create a dedicated PostgreSQL user with restricted SELECT permissions for secure Grafana access. Creates a user 'grafanareader' and grants specific schema and table access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/configure/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER grafanareader WITH PASSWORD 'password';\nGRANT USAGE ON SCHEMA schema TO grafanareader;\nGRANT SELECT ON schema.table TO grafanareader;\n```\n\n----------------------------------------\n\nTITLE: Filtering Data by Values in Grafana\nDESCRIPTION: This example illustrates how to use the 'Filter data by values' transformation in Grafana. It shows how to filter a dataset based on temperature and altitude conditions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n#### Dataset Example\n\n| Time                | Temperature | Altitude |\n| ------------------- | ----------- | -------- |\n| 2020-07-07 11:34:23 | 32          | 101      |\n| 2020-07-07 11:34:22 | 28          | 125      |\n| 2020-07-07 11:34:21 | 26          | 110      |\n| 2020-07-07 11:34:20 | 23          | 98       |\n| 2020-07-07 10:32:24 | 31          | 95       |\n| 2020-07-07 10:31:22 | 20          | 85       |\n| 2020-07-07 09:30:57 | 19          | 101      |\n\n#### Transformed Data\n\n| Time                | Temperature | Altitude |\n| ------------------- | ----------- | -------- |\n| 2020-07-07 11:34:22 | 28          | 125      |\n| 2020-07-07 11:34:21 | 26          | 110      |\n| 2020-07-07 11:34:20 | 23          | 98       |\n| 2020-07-07 10:31:22 | 20          | 85       |\n| 2020-07-07 09:30:57 | 19          | 101      |\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication with Auth0 in Grafana (Bash Configuration)\nDESCRIPTION: This configuration snippet enables Generic OAuth authentication in Grafana using Auth0 as the provider. Required dependencies are an Auth0 application set to type 'Regular Web Application,' client ID, client secret, and valid redirect URIs matching the Grafana domain. Key parameters define the OAuth2 client credentials, Auth0 endpoints for authorization and token exchange, PKCE usage, and enablement of refresh tokens. Inputs are inserted as plain text in Grafana's configuration file, with sensitive values such as client_id and client_secret provided by Auth0. Outputs are user authentication and integration as enabled by Grafana's OAuth flow.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n[auth.generic_oauth]\nenabled = true\nallow_sign_up = true\nauto_login = false\nteam_ids =\nallowed_organizations =\nname = Auth0\nclient_id = <client id>\nclient_secret = <client secret>\nscopes = openid profile email offline_access\nauth_url = https://<domain>/authorize\ntoken_url = https://<domain>/oauth/token\napi_url = https://<domain>/userinfo\nuse_pkce = true\nuse_refresh_token = true\n\n```\n\n----------------------------------------\n\nTITLE: Grafana Label Matchers for Excluding Labels\nDESCRIPTION: Demonstrates different ways to write Grafana label matchers to effectively exclude a label (e.g., `team`) or match when its value is empty. These examples show matching an exactly empty string (`=\"\"`), ensuring the value does not contain one or more characters (`!~ .+`), or using a regex to match an empty string (`=~ ^$`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nteam = \"\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nteam !~ .+\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nteam =~ ^$\n```\n\n----------------------------------------\n\nTITLE: Filtering Loki Logs with 'or' Syntax in LogQL\nDESCRIPTION: This LogQL query demonstrates the enhanced line filter syntax in Grafana's Loki data source. It shows how to use the 'or' operator to chain multiple string matching conditions using existing filter operators (`|=`, `!=`), allowing users to search for log lines containing 'foo' or 'bar', or not containing 'baz' or 'qux', within the logs where the 'app' label is 'foo'. This feature simplifies querying for multiple substrings compared to using regular expressions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_0\n\nLANGUAGE: logql\nCODE:\n```\n{app=\"foo\"} |= \"foo\" or \"bar\" != \"baz\" or \"qux\"\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted MySQL User for Grafana\nDESCRIPTION: SQL commands to create a dedicated MySQL user with only SELECT permissions for Grafana to use. This follows security best practices by limiting database access permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'grafanaReader' IDENTIFIED BY 'password';\nGRANT SELECT ON mydatabase.mytable TO 'grafanaReader';\n```\n\n----------------------------------------\n\nTITLE: Server Response for Dashboard Retrieval in HTTP/JSON\nDESCRIPTION: Example of a successful response from the server after retrieving a dashboard by UID. The response contains the complete dashboard object with its properties and metadata, including starring status, folder information, and URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"dashboard\": {\n    \"id\": 1,\n    \"uid\": \"cIBgcSjkk\",\n    \"title\": \"Production Overview\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"schemaVersion\": 16,\n    \"version\": 0\n  },\n  \"meta\": {\n    \"isStarred\": false,\n    \"url\": \"/d/cIBgcSjkk/production-overview\",\n    \"folderId\": 2,\n    \"folderUid\": \"l3KqBxCMz\",\n    \"slug\": \"production-overview\" //deprecated in Grafana v5.0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base API Configuration with Redux Toolkit\nDESCRIPTION: Base API configuration file that sets up the Redux Toolkit Query instance with baseQuery and endpoint configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createApi } from '@reduxjs/toolkit/query/react';\n\nimport { createBaseQuery } from 'app/api/createBaseQuery';\nimport { getAPIBaseURL } from 'app/api/utils';\n\nexport const BASE_URL = getAPIBaseURL('dashboard.grafana.app', 'v0alpha1');\n\nexport const api = createApi({\n  reducerPath: 'dashboardAPI',\n  baseQuery: createBaseQuery({\n    baseURL: BASE_URL,\n  }),\n  endpoints: () => ({}),\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Unsupported ref Props in Custom Inputs with InputControl (JavaScript/JSX)\nDESCRIPTION: Shows how to manually exclude the ref property from react-hook-form's field when spreading onto custom input components that do not support ref. Utilizes object destructuring and ensures compatibility for React inputs lacking ref support, in the InputControl render pattern.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"SelectExample\">\n  <InputControl\n     {/*Remove `ref` prop, so it doesn't get passed down to the component that doesn't support it. */}\n    render={(field: {onChange, ref, ...field}) => <Select {...field} onChange={(value) => onChange(value.value)}/>}\n    control={control}\n    name=\"select\"\n  />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Multi-value Time Series with Multiple Dimensions in Azure Monitor Logs\nDESCRIPTION: This query demonstrates how to select multiple numeric values (count and average) with multiple dimensions. It groups performance data by time interval, Computer, CounterName, and InstanceName, using the $__interval macro to adapt to dashboard time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: kusto\nCODE:\n```\nPerf\n| where $__timeFilter(TimeGenerated)\n| summarize Samples=count(), [\"Avg Value\"]=avg(CounterValue)\n    by bin(TimeGenerated, $__interval), Computer, CounterName, InstanceName\n| order by TimeGenerated asc\n```\n\n----------------------------------------\n\nTITLE: Recommended Usage of $__rate_interval in PromQL\nDESCRIPTION: Recommended approach using $__rate_interval with the rate function to calculate the rate of change for HTTP requests. This avoids problems specific to Prometheus by ensuring the interval is at least four times the scrape interval.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(http_requests_total[$__rate_interval])\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Authentication in Grafana\nDESCRIPTION: Basic configuration to enable JWT authentication in Grafana by setting the enabled flag to true and specifying the header name containing the JWT token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.jwt]\n# By default, auth.jwt is disabled.\nenabled = true\n\n# HTTP header to look into to get a JWT token.\nheader_name = X-JWT-Assertion\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta SSO Settings using Terraform\nDESCRIPTION: This Terraform snippet defines a `grafana_sso_settings` resource to configure Okta OIDC authentication for Grafana. It specifies the necessary OAuth2 settings, including authorization, token, and API URLs, client credentials, scopes, role mapping using JMESPath in `role_attribute_path`, and allowed Okta groups. This configuration method requires the `ssoSettingsAPI` feature toggle to be enabled in Grafana and is supported by the Grafana Terraform provider version 2.12.0 and later.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"okta_sso_settings\" {\n  provider_name = \"okta\"\n  oauth2_settings {\n    name                  = \"Okta\"\n    auth_url              = \"https://<okta tenant id>.okta.com/oauth2/v1/authorize\"\n    token_url             = \"https://<okta tenant id>.okta.com/oauth2/v1/token\"\n    api_url               = \"https://<okta tenant id>.okta.com/oauth2/v1/userinfo\"\n    client_id             = \"CLIENT_ID\"\n    client_secret         = \"CLIENT_SECRET\"\n    allow_sign_up         = true\n    auto_login            = false\n    scopes                = \"openid profile email offline_access\"\n    role_attribute_path   = \"contains(groups[*], 'Example::DevOps') && 'Admin' || 'None'\"\n    role_attribute_strict = true\n    allowed_groups        = \"Example::DevOps,Example::Dev,Example::QA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request to Move a Grafana Folder\nDESCRIPTION: This snippet shows an example HTTP POST request to the `/api/folders/:uid/move` endpoint to relocate a specific folder identified by its UID. It includes standard `Accept`, `Content-Type`, and `Authorization` headers. The JSON body contains the `parentUid` field, specifying the unique identifier of the target parent folder. A valid bearer token is required for authorization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/folders/a5393ec3-5568-4e88-8809-b866968ae8a6/move HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"parentUid\": \"d80b18c0-266a-4aa4-ad5d-5537a00cb8e8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Attribute for Grafana Cookies in TOML\nDESCRIPTION: Sets the `cookie_secure` flag in the `[security]` section of `grafana.ini` to `true`. This adds the `Secure` attribute to authentication cookies, ensuring they are only sent over HTTPS connections, mitigating certain Man-in-the-Middle attacks. This configuration requires Grafana to be hosted behind HTTPS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[security]\n# Set to true if you host Grafana behind HTTPS. The default value is false.\ncookie_secure = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication for Prometheus in Grafana's .ini File\nDESCRIPTION: This snippet shows the configuration required in Grafana's .ini file to enable Azure Active Directory authentication for the Prometheus data source. This setting should be added to the auth section of the configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auth]\nazure_auth_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Azure AD OAuth via Grafana Configuration File (INI)\nDESCRIPTION: This INI configuration enables Azure AD authentication in Grafana by setting relevant OAuth parameters (client ID, secret, endpoints, organizational/group/domain access for users, and PKCE). It requires Grafana v10.1.0 or newer for full refresh token support. The settings must be placed under [auth.azuread] in the main configuration file, and changes may require a Grafana restart. Security-sensitive parameters can also be supplied as environment variables as described.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[auth.azuread]\nname = Azure AD\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_authentication = CLIENT_AUTHENTICATION_OPTION\nclient_id = APPLICATION_ID\nclient_secret = CLIENT_SECRET\nmanaged_identity_client_id = MANAGED_IDENTITY_CLIENT_ID\nfederated_credential_audience = FEDERATED_CREDENTIAL_AUDIENCE\nscopes = openid email profile\nauth_url = https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/authorize\ntoken_url = https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token\nallowed_domains =\nallowed_groups =\nallowed_organizations = TENANT_ID\nrole_attribute_strict = false\nallow_assign_grafana_admin = false\nskip_org_role_sync = false\nuse_pkce = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Session Settings in Grafana (Bash)\nDESCRIPTION: Example configuration block for the `[auth]` section in Grafana's configuration file. It demonstrates how to set the login cookie name (`login_cookie_name`) and the maximum duration (`login_maximum_inactive_lifetime_duration`) an authenticated user can be inactive before being required to log in again. The inactivity timer resets upon successful token rotation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[auth]\n\n# Login cookie name\nlogin_cookie_name = grafana_session\n\n# The maximum lifetime (duration) an authenticated user can be inactive before being required to login at next visit. Default is 7 days (7d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month). The lifetime resets at each successful token rotation (token_rotation_interval_minutes).\nlogin_maximum_inactive_lifetime_duration =\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Authentication in Grafana\nDESCRIPTION: Complete configuration example for enabling anonymous access in Grafana, including organization settings, role assignment, version display options, and device limitations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/anonymous-auth/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auth.anonymous]\nenabled = true\n\n# Organization name that should be used for unauthenticated users\norg_name = Main Org.\n\n# Role for unauthenticated users, other valid values are `Editor` and `Admin`\norg_role = Viewer\n\n# Hide the Grafana version text from the footer and help tooltip for unauthenticated users (default: false)\nhide_version = true\n\n# Setting this limits the number of anonymous devices in your instance. Any new anonymous devices added after the limit has been reached will be denied access.\ndevice_limit =\n```\n\n----------------------------------------\n\nTITLE: Creating a New Dashboard via POST Request in HTTP/JSON\nDESCRIPTION: Example of creating a new dashboard using the Dashboard API. This request sends a POST to /api/dashboards/db with a JSON payload containing dashboard properties, folder information, and other metadata. The dashboard will be created with the specified title, tags, and refresh interval.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/db HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"dashboard\": {\n    \"id\": null,\n    \"uid\": null,\n    \"title\": \"Production Overview\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"schemaVersion\": 16,\n    \"refresh\": \"25s\"\n  },\n  \"folderUid\": \"l3KqBxCMz\",\n  \"message\": \"Made changes to xyz\",\n  \"overwrite\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading and Managing Prometheus Service with systemctl (Linux/MacOS, Bash)\nDESCRIPTION: This code block demonstrates a sequence of systemctl commands for reloading unit files, enabling, starting, and checking the status of the Prometheus service. Prerequisites: systemd-based system, Prometheus must be installed and configured. Each command performs a specific function: reloads all systemd units, ensures Prometheus starts on boot, immediately starts the service, and displays its status. Outputs service state information to the terminal.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable prometheus\nsudo systemctl start prometheus\nsudo systemctl status prometheus\n```\n\n----------------------------------------\n\nTITLE: Configuring WeCom Contact Point - YAML\nDESCRIPTION: Defines configuration for sending Grafana alerts to WeCom (WeChat Work) via webhook. Requires the recipient webhook URL and supports templated message and title formatting. Outputs messages sent to the defined WeCom channel. No extra dependencies required beyond valid WeCom webhook URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntype: wecom\\nsettings:\\n  # <string, required>\\n  url: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxxxxxxx\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n  # <string>\\n  title: |\\n    {{ template \\\"default.title\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a Switch component for automatic toggle value saving.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <Switch\n      value={switchTest}\n      onChange={(e) => {\n        onChange(e.currentTarget.value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Customizing Disabled Time Units in DateTimePicker (React/TypeScript)\nDESCRIPTION: Illustrates use of DateTimePicker with disabled hours, minutes, and seconds in a React (TypeScript) context. The snippet manages DateTime state and provides functions disabling specific time units, restricting selection to disallow certain hours ([0,1,2]), minutes ([10,15,30]), and seconds ([5,10,15,20]). Depends on @grafana/data and @grafana/ui. Key parameters: label, date, onChange, disabledHours, disabledMinutes, and disabledSeconds. Constraints: only the times not in the provided arrays are selectable. Inputs: label string, DateTime value, callback functions. Outputs: restricted DateTimePicker component. Requires component support for these props.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DateTimePicker/DateTimePicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { DateTime, dateTime } from '@grafana/data';\\nimport { DateTimePicker } from '@grafana/ui';\\n\\nconst [date, setDate] = useState<DateTime>(dateTime('2021-05-05 12:00:00'));\\nreturn (\\n  <DateTimePicker\\n    label=\\\"Date\\\"\\n    date={date}\\n    onChange={setDate}\\n    disabledHours={() => [0, 1, 2]}\\n    disabledMinutes={() => [10, 15, 30]}\\n    disabledSeconds={() => [5, 10, 15, 20]}\\n  />\\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Request Rate for Grafana Alert Rule\nDESCRIPTION: This PromQL query calculates the total 5-minute rate of requests (`tns_request_duration_seconds_count`) aggregated by the `route` dimension. It's used within a Grafana alert rule (Section 2, query A) to monitor application request rates from a Prometheus data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_9\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tns_request_duration_seconds_count[5m])) by(route)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Grafana Data Sources via HTTP API\nDESCRIPTION: Describes the `GET /api/datasources` endpoint used to fetch a list of all configured data sources. This endpoint requires `datasources:read` permission with the scope `datasources:*`. Note that this API currently lacks pagination and returns a maximum of 5000 data sources by default, configurable in `default.ini`. The request requires standard `Accept` and `Authorization` headers, and the response is a JSON array of data source objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n   {\n     \"id\": 1,\n     \"orgId\": 1,\n     \"uid\": \"H8joYFVGz\"\n     \"name\": \"datasource_elastic\",\n     \"type\": \"elasticsearch\",\n     \"typeLogoUrl\": \"public/app/plugins/datasource/elasticsearch/img/elasticsearch.svg\",\n     \"access\": \"proxy\",\n     \"url\": \"http://mydatasource.com\",\n     \"password\": \"\",\n     \"user\": \"\",\n     \"database\": \"grafana-dash\",\n     \"basicAuth\": false,\n     \"isDefault\": false,\n     \"jsonData\": {\n         \"logLevelField\": \"\",\n         \"logMessageField\": \"\",\n         \"maxConcurrentShardRequests\": 256,\n         \"timeField\": \"@timestamp\"\n     },\n     \"readOnly\": false\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Grafana Team Resources with Terraform (HCL)\nDESCRIPTION: This HCL code snippet demonstrates using Terraform and the Grafana provider to manage various Grafana resources related to teams. It defines resources for a Grafana folder, a team ('Awesome Team'), maps the team to an external group ('Awesome_group'), creates a custom role ('team_role') with specific permissions (create datasources, create service accounts), assigns this role to the team, creates a service account, grants the team admin permissions over the service account, and finally, assigns admin permissions for both the team and the service account to the created folder. This example, provided within comments, illustrates an Infrastructure as Code approach to Grafana team management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nterraform {\n  required_providers {\n    grafana = {\n      source = \"grafana/grafana\"\n    }\n  }\n}\n\nprovider \"grafana\" {\n  url  = \"http://localhost:3000/\"\n  auth = \"admin:admin\"\n}\n\nresource \"grafana_folder\" \"awesome_folder\" {\n  title = \"Awesome Team Folder\"\n}\n\n\nresource \"grafana_team\" \"awesome-team\" {\n  name  = \"Awesome Team\"\n}\n\nresource \"grafana_team_external_group\" \"awesome-team-group\" {\n  team_id = grafana_team.awesome-team.id\n  groups = [\n    \"Awesome_group\"\n  ]\n}\n\nresource \"grafana_role\" \"team_role\" {\n  name  = \"team_role\"\n  uid = \"team_role\"\n  version = 4\n  global = true\n\n  permissions {\n    action = \"datasources:create\"\n  }\n\n  permissions {\n    action = \"serviceaccounts:create\"\n  }\n\n  # below should be deleted after bug fix to view service accounts\n  permissions {\n    action = \"users.roles:read\"\n    scope = \"users:id:*\"\n  }\n\n}\n\nresource \"grafana_role_assignment\" \"assign_role\" {\n  role_uid         = grafana_role.team_role.uid\n  teams            = [grafana_team.awesome-team.id]\n}\n\nresource \"grafana_service_account\" \"awesome_service_account\" {\n  name        = \"awesome_service_account\"\n  role        = \"None\"\n  is_disabled = false\n}\n\nresource \"grafana_service_account_permission\" \"awesome_service_account_permissions\" {\n  service_account_id = grafana_service_account.awesome_service_account.id\n\n  permissions {\n    team_id    = grafana_team.awesome-team.id\n    permission = \"Admin\"\n  }\n}\n\nresource \"grafana_folder_permission\" \"awesome_folder_permission\" {\n  folder_uid = grafana_folder.awesome_folder.uid\n  permissions {\n    team_id    = grafana_team.awesome-team.id\n    permission = \"Admin\"\n  }\n\n  permissions {\n    user_id = grafana_service_account.awesome_service_account.id\n    permission = \"Admin\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Rules with YAML Provisioning in Grafana\nDESCRIPTION: Defines alert rule groups and associated rules for Grafana provisioning in YAML format. Dependencies include Grafana with provisioning support and access to the 'provisioning/alerting' directory. The configuration includes organization ID, rule group name, folder, evaluation interval, list of rules with detailed settings, linked dashboards/panels, and optional annotations/labels. Inputs follow YAML structure with fields per Grafana documentation, and the output is the creation or update of alert rules upon Grafana startup or reload. Changes require modifying the provisioning file and reloading Grafana; resources become immutable from within the UI when managed this way.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of rule groups to import or update\\ngroups:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> name of the rule group\\n    name: my_rule_group\\n    # <string, required> name of the folder the rule group will be stored in\\n    folder: my_first_folder\\n    # <duration, required> interval that the rule group should evaluated at\\n    interval: 60s\\n    # <list, required> list of rules that are part of the rule group\\n    rules:\\n      # <string, required> unique identifier for the rule. Should not exceed 40 symbols. Only letters, numbers, - (hyphen), and _ (underscore) allowed.\\n      - uid: my_id_1\\n        # <string, required> title of the rule that will be displayed in the UI\\n        title: my_first_rule\\n        # <string, required> which query should be used for the condition\\n        condition: A\\n        # <list, required> list of query objects that should be executed on each\\n        #                  evaluation - should be obtained through the API\\n        data:\\n          - refId: A\\n            datasourceUid: '__expr__'\\n            model:\\n              conditions:\\n                - evaluator:\\n                    params:\\n                      - 3\\n                    type: gt\\n                  operator:\\n                    type: and\\n                  query:\\n                    params:\\n                      - A\\n                  reducer:\\n                    type: last\\n                  type: query\\n              datasource:\\n                type: __expr__\\n                uid: '__expr__'\\n              expression: 1==0\\n              intervalMs: 1000\\n              maxDataPoints: 43200\\n              refId: A\\n              type: math\\n        # <string> UID of a dashboard that the alert rule should be linked to\\n        dashboardUid: my_dashboard\\n        # <int> ID of the panel that the alert rule should be linked to\\n        panelId: 123\\n        # <string> the state the alert rule will have when no data is returned\\n        #          possible values: \"NoData\", \"Alerting\", \"OK\", default = NoData\\n        noDataState: Alerting\\n        # <string> the state the alert rule will have when the query execution\\n        #          failed - possible values: \"Error\", \"Alerting\", \"OK\"\\n        #          default = Alerting\\n        execErrState: Alerting\\n        # <duration, required> for how long should the alert fire before alerting\\n        for: 60s\\n        # <map<string, string>> a map of strings to pass around any data\\n        annotations:\\n          some_key: some_value\\n        # <map<string, string> a map of strings that can be used to filter and\\n        #                      route alerts\\n        labels:\\n          team: sre_team_1\n```\n\n----------------------------------------\n\nTITLE: Mapping Google Groups to Grafana Organizations and Roles (INI)\nDESCRIPTION: This INI configuration snippet demonstrates how to map Google groups to specific Grafana organizations and assign roles within those organizations using the `org_mapping` setting. Users in 'group-1' are mapped to 'org_foo' as 'Viewer', users in 'group-2' are mapped to 'org_bar' as 'Editor', and all other authenticated users (*) are mapped to 'org_baz' as 'Editor'. This relies on the Google group email key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n```ini\norg_mapping = group-1:org_foo:Viewer group-2:org_bar:Editor *:org_baz:Editor\n```\n```\n\n----------------------------------------\n\nTITLE: Sending API Request with Organization Context to Grafana API\nDESCRIPTION: Example HTTP request showing how to call Grafana's API with authentication token and organization context. The X-Grafana-Org-Id header specifies which organization the operation applies to.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/org/ HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nX-Grafana-Org-Id: 2\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Using the Icon Component within IconButton Documentation (MDX/JSX)\nDESCRIPTION: Demonstrates an example usage of the `Icon` component within the `IconButton` documentation, embedded directly in the MDX content. This specific example shows an unambiguous icon ('angle-down'), illustrating a use case where an `IconButton` might be used without an accompanying tooltip, as mentioned in the surrounding text. It relies on the imported `Icon` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/IconButton/IconButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Icon name=\"angle-down\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication with Dex in Grafana (Bash Configuration)\nDESCRIPTION: This snippet configures Grafana to use Dex as its OAuth2 identity provider. Key dependencies include the Dex IdP running with Grafana registered as a client and matching client ID/secret from the Dex configuration. The block defines OAuth endpoints corresponding to Dex's issuer configuration, required scopes for user info and refresh tokens, and disables extraneous properties. Inputs are Dex base URI, client credentials, and appropriate scopes; output is enabling Dex-based SSO in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n[auth.generic_oauth]\nname = Dex\nenabled = true\nclient_id = <client id>\nclient_secret = <client secret>\nscopes = openid email profile groups offline_access\nauth_url = https://<dex base uri>/auth\ntoken_url = https://<dex base uri>/token\napi_url = https://<dex base uri>/userinfo\n\n```\n\n----------------------------------------\n\nTITLE: TraceQL Regular Expression Query\nDESCRIPTION: Example of using anchored regular expressions in TraceQL queries to search for span attributes\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-editor-traceql.md#2025-04-23_snippet_1\n\nLANGUAGE: traceql\nCODE:\n```\n{ span.foo =~ \".*bar.*\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Hourly Electricity Consumption with Flux\nDESCRIPTION: This Flux query retrieves hourly electricity consumption data from the 'RetroEncabulator' bucket. It filters by measurement, location, and field, then applies an aggregation window based on the variable window period to calculate the mean power consumption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_5\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"RetroEncabulator\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r[\"_measurement\"] == \"ElectricityData\")\n|> filter(fn: (r) => r[\"Location\"] == \"PlantD5\")\n|> filter(fn: (r) => r[\"_field\"] == \"power_consumed\")\n|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n|> yield(name: \"power\")\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Commands for running Cypress and Playwright end-to-end tests\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn e2e\nBASE_URL=http://localhost:3333 yarn e2e\nyarn e2e:debug\nyarn e2e:dev\nyarn playwright install chromium\nyarn e2e:playwright\nyarn e2e:playwright:server\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Authentication in Grafana (Bash Syntax in .ini Configuration)\nDESCRIPTION: This configuration block enables GitHub OAuth in Grafana, specifying the required client_id, secret, OAuth URLs, and organization/team restrictions. 'client_id' and 'client_secret' must come from your GitHub OAuth app; 'allowed_organizations' and 'team_ids' restrict login to specific organizations and teams. The 'role_attribute_path' expression dynamically assigns the 'GrafanaAdmin' role to user 'octocat', with 'Viewer' as fallback. The configuration must be placed in the proper section of Grafana's configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[auth.github]\nenabled = true\nclient_id = YOUR_GITHUB_APP_CLIENT_ID\nclient_secret = YOUR_GITHUB_APP_CLIENT_SECRET\nscopes = user:email,read:org\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\napi_url = https://api.github.com/user\nallow_sign_up = true\nauto_login = false\nteam_ids = 150,300\nallowed_organizations = [\"My Organization\", \"Octocats\"]\nallowed_domains = mycompany.com mycompany.org\nrole_attribute_path = [login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Mapping Roles Based on GitHub Team Membership\nDESCRIPTION: JMESPath expression that grants Editor role to members of a specific GitHub team and Viewer role to all other users. Uses the contains function to check team membership.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = contains(groups[*], '@my-github-organization/my-github-team') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to Team - Grafana Access Control HTTP API - HTTP\nDESCRIPTION: Shows an example HTTP POST request to assign a role to a team via the access control API. The endpoint uses the team ID in the URL and expects a JSON body containing a single roleUid field. Requires 'teams.roles:add' permission with 'permissions:type:delegate' scope. The Accept and Content-Type headers indicate JSON is both sent and expected.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/teams/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"roleUid\": \"XvHQJq57z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Custom Grafana Webhook Payload Template (Go Template)\nDESCRIPTION: Provides an example of a Go template used to define a custom JSON payload for Grafana webhooks. This template demonstrates how to access alert data (like CommonLabels and Status) and custom variables (defined via Payload Variables, accessed via `.Vars`) to construct a tailored JSON output. Note that when using Custom Payload, the standard Title and Message fields are ignored.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/webhook-notifier.md#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{\n  \"alert_name\": \"{{ .CommonLabels.alertname }}\",\n  \"status\": \"{{ .Status }}\",\n  \"environment\": \"{{ .Vars.environment }}\",\n  \"custom_field\": \"{{ .Vars.custom_field }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Data Source using PromQL in Grafana\nDESCRIPTION: Example PromQL query for a Prometheus data source within Grafana. It uses the `max_over_time` function to find the maximum value of a given '<metric>' over the time range specified by the Grafana global variable `${__range_s}` (representing the dashboard's time range in seconds). The `query_result` function then compares this maximum value against a specified '<state>', demonstrating the use of PromQL functions and Grafana variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nquery_result(max_over_time(<metric>[${__range_s}s]) != <state>)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role via Grafana HTTP API - Shell Script\nDESCRIPTION: This shell script uses curl to send a POST request to the Grafana HTTP API endpoint for role creation. It includes the necessary HTTP headers for authorization and content type, and sends a JSON payload defining a custom role with user creation permissions. Dependencies include curl and a valid Grafana instance with appropriate HTTP API access; key parameters are the role attributes (`uid`, `name`, `permissions`). Input is a JSON-formatted data payload, output is the API's HTTP response. Only permissions for which the requester is authorized can be included.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST '<grafana_url>/api/access-control/roles/' \\\n--header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ=' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"version\": 1,\n    \"uid\": \"jZrmlLCkGksdka\",\n    \"name\": \"custom:users:admin\",\n    \"displayName\": \"custom users admin\",\n    \"description\": \"My custom role which gives users permissions to create users\",\n    \"global\": true,\n    \"permissions\": [\n        {\n            \"action\": \"users:create\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining CloudWatch Metric Insights Queries using SQL Syntax\nDESCRIPTION: This snippet shows the SQL-like syntax used for defining queries with CloudWatch Metric Insights. It outlines the structure including SELECT, FROM (Namespace or SCHEMA), optional WHERE, GROUP BY, ORDER BY, and LIMIT clauses. This syntax allows for identifying trends and patterns across operational metrics and is used within the Code mode of the Metric Insights query editor in Grafana. Refer to AWS documentation for detailed syntax and limits.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FUNCTION(MetricName)\nFROM Namespace | SCHEMA(...)\n[ WHERE labelKey OPERATOR labelValue [AND|...]]\n[ GROUP BY labelKey [, ...]]\n[ ORDER BY FUNCTION() [DESC | ASC] ]\n[ LIMIT number]\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Secret Encryption using Grafana CLI\nDESCRIPTION: Uses the Grafana CLI to decrypt secrets previously encrypted with envelope encryption and re-encrypt them using the legacy method. This is primarily intended for scenarios where a Grafana upgrade to v9.0+ needs to be rolled back to a pre-v9.0 version. It is recommended to run this command during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngrafana cli admin secrets-migration rollback\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Settings for SAML in Grafana INI\nDESCRIPTION: Provides an example configuration snippet within the `[security]` section of Grafana's `config.ini`. It demonstrates setting `csrf_trusted_origins` to allow requests from a specific domain and `csrf_additional_headers` to trust headers like `X-Forwarded-Host`, which can resolve CSRF errors during SAML login, especially behind reverse proxies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n# config.ini\n...\n[security]\ncsrf_trusted_origins = https://grafana.example.com\ncsrf_additional_headers = X-Forwarded-Host\n...\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Value Structures Using onChange in InputControl (JavaScript/JSX)\nDESCRIPTION: Highlights advanced usage of the InputControl render prop to transform value structures before committing to form state. Demonstrates extracting nested values from Select input and passing them to the form using a custom onChange. Relies on react-hook-form’s render field pattern and is suitable when input values need adaptation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"SelectExample\">\n  <InputControl\n    {/* Here `value` has a nested `value` property, which we want to save onto the form. */}\n    render={(field: {onChange, ...field}) => <Select {...field} onChange={(value) => onChange(value.value)}/>}\n    control={control}\n    name=\"select\"\n  />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Aggregating Daily Electricity Consumption with Flux\nDESCRIPTION: This Flux query calculates daily electricity consumption by modifying the aggregation window. It retrieves data from the 'RetroEncabulator' bucket, filters it, and uses a 1-day aggregation window with a sum function to calculate total daily consumption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_6\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"RetroEncabulator\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ElectricityData\")\n  |> filter(fn: (r) => r[\"Location\"] == \"PlantD5\")\n  |> filter(fn: (r) => r[\"_field\"] == \"power_consumed\")\n  |> aggregateWindow(every: 1d, fn: sum)\n  |> yield(name: \"power\")\n```\n\n----------------------------------------\n\nTITLE: Querying Production CPU Usage with PromQL\nDESCRIPTION: PromQL query used within a Grafana time series panel to retrieve the `flask_app_cpu_usage` metric specifically for the 'prod' environment. This metric is used for visualization and later for defining alert rules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nflask_app_cpu_usage{environment=\"prod\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Job for Grafana Metrics (YAML)\nDESCRIPTION: This YAML configuration defines a Prometheus scrape job named 'grafana'. It instructs Prometheus to collect metrics exposed by a Grafana instance via its '/metrics' endpoint every 15 seconds. This is essential for monitoring Grafana's internal state, including Alertmanager metrics relevant for verifying High Availability setups.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: grafana\n  honor_timestamps: true\n  scrape_interval: 15s\n  scrape_timeout: 10s\n  metrics_path: /metrics\n  scheme: http\n  follow_redirects: true\n  static_configs:\n    - targets:\n        - grafana:3000\n```\n\n----------------------------------------\n\nTITLE: Example Default Grafana Webhook JSON Payload\nDESCRIPTION: Illustrates the default JSON structure sent by Grafana webhooks when alerts are firing. This example shows a payload containing information for two distinct firing alerts, including their status, labels, annotations, timestamps, and associated URLs. It also includes common fields like receiver, organization ID, common labels/annotations, and overall state.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/webhook-notifier.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"My Super Webhook\",\n  \"status\": \"firing\",\n  \"orgId\": 1,\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High memory usage\",\n        \"team\": \"blue\",\n        \"zone\": \"us-1\"\n      },\n      \"annotations\": {\n        \"description\": \"The system has high memory usage\",\n        \"runbook_url\": \"https://myrunbook.com/runbook/1234\",\n        \"summary\": \"This alert was triggered for zone us-1\"\n      },\n      \"startsAt\": \"2021-10-12T09:51:03.157076+02:00\",\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\": \"https://play.grafana.org/alerting/1afz29v7z/edit\",\n      \"fingerprint\": \"c6eadffa33fcdf37\",\n      \"silenceURL\": \"https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\",\n      \"dashboardURL\": \"\",\n      \"panelURL\": \"\",\n      \"values\": {\n        \"B\": 44.23943737541908,\n        \"C\": 1\n      }\n    },\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High CPU usage\",\n        \"team\": \"blue\",\n        \"zone\": \"eu-1\"\n      },\n      \"annotations\": {\n        \"description\": \"The system has high CPU usage\",\n        \"runbook_url\": \"https://myrunbook.com/runbook/1234\",\n        \"summary\": \"This alert was triggered for zone eu-1\"\n      },\n      \"startsAt\": \"2021-10-12T09:56:03.157076+02:00\",\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\": \"https://play.grafana.org/alerting/d1rdpdv7k/edit\",\n      \"fingerprint\": \"bc97ff14869b13e3\",\n      \"silenceURL\": \"https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\",\n      \"dashboardURL\": \"\",\n      \"panelURL\": \"\",\n      \"values\": {\n        \"B\": 44.23943737541908,\n        \"C\": 1\n      }\n    }\n  ],\n  \"groupLabels\": {},\n  \"commonLabels\": {\n    \"team\": \"blue\"\n  },\n  \"commonAnnotations\": {},\n  \"externalURL\": \"https://play.grafana.org/\",\n  \"version\": \"1\",\n  \"groupKey\": \"{}:{}\",\n  \"truncatedAlerts\": 0,\n  \"title\": \"[FIRING:2]  (blue)\",\n  \"state\": \"alerting\",\n  \"message\": \"**Firing**\\n\\nLabels:\\n - alertname = T2\\n - team = blue\\n - zone = us-1\\nAnnotations:\\n - description = This is the alert rule checking the second system\\n - runbook_url = https://myrunbook.com\\n - summary = This is my summary\\nSource: https://play.grafana.org/alerting/1afz29v7z/edit\\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\\n\\nLabels:\\n - alertname = T1\\n - team = blue\\n - zone = eu-1\\nAnnotations:\\nSource: https://play.grafana.org/alerting/d1rdpdv7k/edit\\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth via Terraform for Grafana\nDESCRIPTION: Terraform resource block for configuring Google SSO settings in Grafana. It sets up OAuth2 settings including client credentials, scopes, domain restrictions, and PKCE support.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"google_sso_settings\" {\n  provider_name = \"google\"\n  oauth2_settings {\n    name            = \"Google\"\n    client_id       = \"CLIENT_ID\"\n    client_secret   = \"CLIENT_SECRET\"\n    allow_sign_up   = true\n    auto_login      = false\n    scopes          = \"openid email profile\"\n    allowed_domains = \"mycompany.com mycompany.org\"\n    hosted_domain   = \"mycompany.com\"\n    use_pkce        = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Memoized Columns and Data for InteractiveTable in TSX\nDESCRIPTION: This snippet demonstrates how to define the `columns` and `data` props for the `InteractiveTable` component using TypeScript (TSX). It defines a `TableData` interface and uses the `useMemo` hook to memoize both the column definitions and the data array, which is crucial for preventing unnecessary re-renders. The `columns` array defines the table structure with `id` and `header`, where the `id` corresponds to keys in the `data` objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface TableData {\n  projectName: string;\n  repository: string;\n}\n\nconst columns = useMemo<Array<Column<TableData>>>(\n  () => [\n    id: 'projectName'\n    header: \"Project Name\"\n  ],\n  [\n    id: 'repository',\n    header: \"Repository\"\n  ],\n  []\n);\n\nconst data = useMemo<Array<TableData>>(\n  () => [\n    {\n      projectName: 'Grafana',\n      repository: 'https://github.com/grafana/grafana',\n   }\n  ],\n  [\n    {\n      projectName: 'Loki';\n      repository: 'https://github.com/grafana/loki';\n    }\n  ],\n  []\n);\n```\n\n----------------------------------------\n\nTITLE: Resetting Selected Value in Multiple Linked Selects with React and @grafana/ui (TSX)\nDESCRIPTION: Illustrates how to synchronize two Select components by resetting the value of the dependent Select when the primary Select changes. Utilizes React useState and the @grafana/ui Select component, clearing the dependent Select with setTeam(null) in the onChange handler. Inputs are user selections; outputs are updated state for person and team. Limitation: ensure state resetting does not introduce UI inconsistency.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Select } from '@grafana/ui';\n\nconst SelectComponent = () => {\n  const [person, setPerson] = useState<string | undefined>('');\n  const [team, setTeam] = useState<string | undefined | null>('');\n\n  return (\n    <form>\n      <Select\n        onChange={({ value }) => {\n          setPerson(value);\n          setTeam(null); // Setting the team to null will reset the selected value in the team Select\n        }}\n        options={[\n          {\n            value: 'option1',\n            label: 'Option 1',\n          },\n          {\n            value: 'option2',\n            label: 'Option 2',\n          },\n        ]}\n        value={person}\n        backspaceRemovesValue\n      />\n      <Select\n        onChange={({ value }) => setTeam(value)}\n        options={[\n          {\n            value: 'team1',\n            label: 'Team 1',\n          },\n          {\n            value: 'team',\n            label: 'Team 2',\n          },\n        ]}\n        value={team}\n      />\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Role Mapping Using JMESPath Expressions\nDESCRIPTION: Configuration for advanced role mapping using JMESPath expressions to evaluate complex conditions and assign appropriate roles based on JWT claims.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = contains(info.roles[*], 'admin') && 'Admin' || contains(info.roles[*], 'editor') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Using FileListItem Component in React (JSX)\nDESCRIPTION: This code snippet demonstrates how to import the FileListItem component from the @grafana/ui package and render it with a file prop containing a file object (including name and size). The FileListItem component is intended to visually represent a file in a list, and typically appears within UI elements that handle file uploads such as FileDropzone. The required dependency is @grafana/ui, and the file prop must provide, at minimum, a file object with name and size fields. The output is a rendered React element representing the file.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileDropzone/FileListItem.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileListItem } from '@grafana/ui';\n\n<FileListItem file={{ file: { name: 'someFile.jpg', size: 12345 } }} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Grafana Keycloak OAuth2 Configuration (INI)\nDESCRIPTION: Example Grafana configuration snippet for enabling Keycloak OAuth2 using the generic OAuth provider. It specifies enabling the provider, naming it, allowing sign-ups, setting client credentials, defining scopes (including 'offline_access' for refresh tokens), mapping user attributes (email, login, name), providing Keycloak endpoints (auth, token, userinfo), and defining a basic role mapping based on Keycloak roles. Note that `root_url` under `[server]` might need setting if Grafana is behind a proxy.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nenabled = true\nname = Keycloak-OAuth\nallow_sign_up = true\nclient_id = YOUR_APP_CLIENT_ID\nclient_secret = YOUR_APP_CLIENT_SECRET\nscopes = openid email profile offline_access roles\nemail_attribute_path = email\nlogin_attribute_path = username\nname_attribute_path = full_name\nauth_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/auth\ntoken_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/token\napi_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/userinfo\nrole_attribute_path = contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Querying Time Series Data with Metric Column in PostgreSQL\nDESCRIPTION: Demonstrates a SQL query that groups time series data by 5-minute intervals, calculates the minimum value, and includes a 'metric' column. This query format is used for backward compatibility in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(\"time_date_time\",'5m'),\n  min(\"value_double\"),\n  'min' as metric\nFROM test_data\nWHERE $__timeFilter(\"time_date_time\")\nGROUP BY time\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Provisioning Datasources in Grafana Using YAML - YAML\nDESCRIPTION: This code snippet demonstrates how to use environment variables in a Grafana data source provisioning file. Grafana allows substituting environment variable values directly in the YAML by using $ENV_VAR_NAME or ${ENV_VAR_NAME} syntax. The snippet configures a Graphite datasource, using environment variables for its URL port, user, and password to keep sensitive credentials outside the file. Inputs are environment variables and expected outputs are a properly configured data source instance at Grafana startup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\\n  - name: Graphite\\n    url: http://localhost:$PORT\\n    user: $USER\\n    secureJsonData:\\n      password: $PASSWORD\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Library Element Request Example (HTTP/JSON)\nDESCRIPTION: Example HTTP POST request to create a new library panel element named 'Example library panel' using the `/api/library-elements` endpoint. The JSON request body specifies the element's properties, including an optional `uid`, `folderUid`, `name`, the element `model` (content), and `kind` (1 for panel). Requires authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/library-elements HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"uid\": \"nErXDvCkzz\",\n  \"folderUid\": \"\",\n  \"name\": \"Example library panel\",\n  \"model\": {...},\n  \"kind\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with Partition By Values Transformation - SQL\nDESCRIPTION: Illustrates the recommended approach in Grafana v9.3 using a single SQL query with the 'partition by values' transformation. The single query retrieves all region data and partitions results based on column values, enabling dynamic handling of new regions. Input includes the 'metrics' table, with outputs grouped by distinct Region values through Grafana's transformer. Requires SQL-compatible database and Grafana v9.3+. Limitation: relies on the 'partition by values' transformation within Grafana, not SQL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n   SELECT Time, Region, Value FROM metrics WHERE Time > ‘2022-10-20’\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Container with Docker Volume for Persistence - Bash\nDESCRIPTION: Starts a Grafana container using a persistent Docker volume mapped to the container data directory. Passes the volume (grafana-storage) for persistent storage and assigns the container a name. Docker and the previously created volume must exist; the container will keep user data across restarts or upgrades if run this way.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# start grafana\ndocker run -d -p 3000:3000 --name=grafana \\\n  --volume grafana-storage:/var/lib/grafana \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Adding Secure Prefix to Grafana Login Cookie Name in TOML\nDESCRIPTION: Sets the `login_cookie_name` in the `[auth]` section of `grafana.ini` to include a secure prefix like `__Host-`. This adds an extra layer of security against cookie hijacking, even over HTTPS, by enforcing stricter browser rules for cookie acceptance based on the prefix used. Requires Grafana to be served over HTTPS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\n# Login cookie name\nlogin_cookie_name = __Host-grafana_session\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication with OneLogin in Grafana (Bash Configuration)\nDESCRIPTION: This snippet configures Grafana to use OneLogin as an OAuth2/OpenID Connect provider for user authentication. Required steps include setting up a custom connector in OneLogin, obtaining client credentials, and specifying redirect URIs to match the Grafana domain. The configuration maps essential OAuth endpoints, OpenID scopes, and disables unnecessary properties. Inputs are obtained from OneLogin's SSO tab, with security-sensitive client credentials and domain-related placeholders to be replaced accordingly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n[auth.generic_oauth]\nname = OneLogin\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_id = <client id>\nclient_secret = <client secret>\nscopes = openid email name\nauth_url = https://<onelogin domain>.onelogin.com/oidc/2/auth\ntoken_url = https://<onelogin domain>.onelogin.com/oidc/2/token\napi_url = https://<onelogin domain>.onelogin.com/oidc/2/me\nteam_ids =\nallowed_organizations =\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning Grafana Cloud Stack Service Accounts with Tokens using Terraform\nDESCRIPTION: This example demonstrates how to define Grafana cloud stack service accounts and their associated tokens using Terraform. Dependencies include the Grafana provider and an existing cloud stack resource. The configuration provisions a service account, assigns a role, and generates a token linked to that account—all referencing the appropriate stack and service account identifiers. These resources replace the legacy API key resource and improve both security and granularity in access management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    grafana = {\n      source = \"grafana/grafana\"\n    }\n  }\n}\n\n# Declaring the first provider to be only used for creating the cloud-stack\nprovider \"grafana\" {\n  alias = \"cloud\"\n\n  cloud_api_key = \"<API-Key>\"\n}\n\nresource \"grafana_cloud_stack\" \"my_stack\" {\n  provider = grafana.cloud\n\n  name        = \"my_stack\"\n  slug        = \"my_stack\"\n  region_slug = \"eu\" # Example “us”,”eu” etc\n}\n\n# Creating a grafana cloud stack service account\nresource \"grafana_cloud_stack_service_account\" \"mystack_cloud-stack_service_account\" {\n  provider   = grafana.cloud\n  stack_slug = grafana_cloud_stack.my_stack.slug\n\n  name = \"mystack-cloud-stack-sa\"\n  role = \"Admin\"\n}\n\n# Creating a grafana cloud stack service account token\nresource \"grafana_cloud_stack_service_account_token\" \"mystack_cloud-stack_service-account_token\" {\n  provider   = grafana.cloud\n  stack_slug = grafana_cloud_stack.my_stack.slug\n\n  name               = \"mystack-cloud-stack-sa-token\"\n  service_account_id = grafana_cloud_stack_service_account.mystack_cloud-stack_service_account.id\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Service Account Token in an HTTP Request\nDESCRIPTION: Illustrates how to authenticate a Grafana API request using a Service Account Token. The token is included in the `Authorization` header with the `Bearer` scheme. This example shows a GET request to the `/api/dashboards/db/mydash` endpoint. Service Account Tokens are created within the Grafana administration interface.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/developers/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET http://your.grafana.com/api/dashboards/db/mydash HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Multiple LDAP Servers Configuration\nDESCRIPTION: Configuration example for multiple LDAP servers with different group mappings and roles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n[[servers]]\nhost = \"10.0.0.1\"\nport = 389\nuse_ssl = false\nstart_tls = false\nssl_skip_verify = false\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\nbind_password = \"grafana\"\nsearch_filter = \"(cn=%s)\"\nsearch_base_dns = [\"ou=users,dc=grafana,dc=org\"]\n\n[servers.attributes]\nmember_of = \"memberOf\"\nemail =  \"email\"\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=admins,ou=groups,dc=grafana,dc=org\"\norg_role = \"Admin\"\ngrafana_admin = true\n\n[[servers]]\nhost = \"10.0.0.2\"\nport = 389\nuse_ssl = false\nstart_tls = false\nssl_skip_verify = false\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\nbind_password = \"grafana\"\nsearch_filter = \"(cn=%s)\"\nsearch_base_dns = [\"ou=users,dc=grafana,dc=org\"]\n\n[servers.attributes]\nmember_of = \"memberOf\"\nemail =  \"email\"\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=editors,ou=groups,dc=grafana,dc=org\"\norg_role = \"Editor\"\n\n[[servers.group_mappings]]\ngroup_dn = \"*\"\norg_role = \"Viewer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Provider in Grafana INI\nDESCRIPTION: Example section for the `grafana.ini` file defining an AWS KMS encryption provider named 'example-encryption-key'. It includes placeholders for the KMS `key_id` (which can be an ID, ARN, alias name, or alias ARN), AWS `access_key_id`, `secret_access_key`, and the AWS `region`. These values must be uncommented and filled with actual credentials and key details from your AWS account to enable Grafana to use the specified KMS key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n   # AWS key management service provider setup\n   ;[security.encryption.awskms.example-encryption-key]\n   # Reference to a KMS key - either key ID, key ARN, alias name, or ARN\n   ;key_id = 1234abcd-12ab-34cd-56ef-1234567890ab\n   # AWS access key ID\n   ;access_key_id = AKIAIOSFODNN7EXAMPLE\n   # AWS secret access key\n   ;secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n   # AWS region, for example eu-north-1\n   ;region = eu-north-1\n```\n\n----------------------------------------\n\nTITLE: Active Directory Server Configuration\nDESCRIPTION: Configuration example for Active Directory server with SSL enabled and specific Windows domain settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n[[servers]]\nhost = \"10.0.0.1\"\nport = 3269\nuse_ssl = true\nstart_tls = false\nssl_skip_verify = true\nbind_dn = \"CORP\\\\%s\"\nsearch_filter = \"(sAMAccountName=%s)\"\nsearch_base_dns = [\"dc=corp,dc=local\"]\n\n[servers.attributes]\nmember_of = \"memberOf\"\nemail =  \"mail\"\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Plugins in Grafana Docker Container\nDESCRIPTION: A bash command to run Grafana Enterprise with pre-installed plugins specified by the GF_PLUGINS_PREINSTALL environment variable, including a custom plugin from a URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_PLUGINS_PREINSTALL=custom-plugin@@http://plugin-domain.com/my-custom-plugin.zip,grafana-clock-panel\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Querying Loki Logs for Error Annotations with LogQL in Grafana\nDESCRIPTION: This LogQL query retrieves log lines containing 'error' from `/var/log/tns-app.log` using the Loki data source. It is configured within Grafana Dashboard settings (Annotations section) to create annotations on graphs, visually correlating error occurrences logged in Loki with metric data displayed on the dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_8\n\nLANGUAGE: logql\nCODE:\n```\n{filename=\"/var/log/tns-app.log\"} |= \"error\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role with Grafana HTTP API using cURL (bash)\nDESCRIPTION: This cURL command sends a POST request to the Grafana API to create a custom role with predefined permissions for reading alerts in a specific folder and querying designated data sources. It requires authorization via a Bearer token and a JSON payload specifying the role name, display name, description, version, permissions, and other properties. The key parameters include the folder and data source UIDs mapped to precise actions. Inputs are API endpoint and role config, output is role creation or an error if parameters are malformed. Ensure proper Bearer token and endpoint substitution.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST '<grafana_url>/api/access-control/roles/' \\\n--header 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"version\": 1,\n    \"name\": \"custom:alerts.reader.in.folder.123\",\n    \"displayName\": \"Read-only access to alerts in folder Test-Folder\",\n    \"description\": \"Let user query DS1 and DS2, and read alerts in folder Test-Folders\",\n    \"group\":\"Custom\",\n    \"global\": false,\n    \"permissions\": [\n        {\n            \"action\": \"folders:read\",\n            \"scope\": \"folders:uid:YEcBGYU22\"\n        },\n        {\n            \"action\": \"alert.rules:read\",\n            \"scope\": \"folders:uid:YEcBGYU22\"\n        },\n        {\n            \"action\": \"datasources:query\",\n            \"scope\": \"datasources:uid:_oAfGYUnk\"\n        },\n        {\n            \"action\": \"datasources:query\",\n            \"scope\": \"datasources:uid:YYcBGYUnk\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Example Input Data Frame (Query B) for Concatenate Fields Transformation\nDESCRIPTION: This table represents example input data (Query B) containing air quality index (AQI) and error count information, intended to be used with the 'Concatenate fields' transformation in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| AQI | Errors |\n| --- | ------ |\n| 3.2 | 5      |\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate and Private Key using OpenSSL (Shell)\nDESCRIPTION: Generates a self-signed X.509 certificate (`cert.pem`) and a corresponding RSA 4096-bit private key (`key.pem`) using the OpenSSL command-line tool. The key is generated without a passphrase (`-nodes`) and the certificate is valid for 365 days. This is used when Grafana needs to sign SAML requests and the certificate/key are not automatically provided by the IdP metadata, specifically mentioning its use for Azure AD setup as well. The generated files can be used with `private_key_path` and `certificate_path` configuration options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes​\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL for Low Disk Space Alerting in Grafana (SQL)\nDESCRIPTION: This SQL query retrieves disk space information from a MySQL table named 'DiskSpace'. It calculates the average free percentage grouped by host and disk, filtered by Grafana's time range using the `__timeFilter` macro. The query returns the host, disk, and the percentage if it's below 5.0, otherwise 0. This output format is suitable for Grafana's numeric table alerting, triggering alerts for non-zero values. Requires a MySQL data source configured in Grafana and a 'DiskSpace' table with 'Host', 'Disk', 'PercentFree', and 'Time' columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Host, Disk, CASE WHEN PercentFree < 5.0 THEN PercentFree ELSE 0 END FROM (\n  SELECT\n      Host,\n      Disk,\n      Avg(PercentFree)\n  FROM DiskSpace\n  Group By\n    Host,\n    Disk\n  Where __timeFilter(Time)\n\n```\n\n----------------------------------------\n\nTITLE: Server Response for Dashboard Creation/Update in HTTP/JSON\nDESCRIPTION: Example of a successful response from the server after creating or updating a dashboard. The response includes the dashboard ID, UID, URL, status, and version. This confirms the operation was successful and provides reference information for the dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 78\n\n{\n    \"id\": 1,\n    \"uid\": \"e883f11b-77c0-4ee3-9a70-3ba223d66e56\",\n    \"url\": \"/d/e883f11b-77c0-4ee3-9a70-3ba223d66e56/production-overview-updated\",\n    \"status\": \"success\",\n    \"version\": 2\n    \"slug\": \"production-overview-updated\",\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation with Dynamic Value and Label Interpolation - Go Template - Markdown\nDESCRIPTION: This example demonstrates how to construct an annotation string using both a specific query value (from $values.A.Value) and a label field (from $labels.instance) in a Grafana alert rule template with Go templating. The template requires both $values and $labels to be available, populated by the alert rule's queries. The output combines numeric and label data in a human-readable sentence, where parameters are the query value and label 'instance'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_2\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $values.A.Value }} CPU usage for {{ $labels.instance }} over the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Setting Form Default Values via defaultValues Prop (JavaScript/JSX/TypeScript)\nDESCRIPTION: Provides an example of setting form-wide default values using the defaultValues prop on the Form component. Defines TypeScript interfaces for type safety, illustrates a typical DTO, and demonstrates form initialization for prefilled form state. Dependencies include react-hook-form, TypeScript support, and correct prop assignment.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Passing default values to the Form\n\ninterface FormDTO {\n  name: string;\n  isAdmin: boolean;\n}\n\nconst defaultValues: FormDto {\n  name: 'Roger Waters',\n  isAdmin: false,\n}\n\n<Form defaultValues={defaultValues} ...>{...}</Form>\n```\n\n----------------------------------------\n\nTITLE: Defining Test Log Data for Grafana Correlations using JSON\nDESCRIPTION: A JSON structure defining a Grafana data frame to simulate log data for the 'Source' test data source. It includes 'time' and 'msg' fields, with the 'msg' field containing log lines ('level=error msg=error service=app1.loginService', etc.) parsable by the configured correlations (regex and logfmt). The 'meta' field specifies the preferred visualization as 'logs'. This data structure is intended to be pasted into the 'Raw Frames' scenario in Grafana's Explore view when using the 'Source' TestData data source to test the provisioned correlations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"meta\": {\n      \"preferredVisualisationType\": \"logs\"\n    },\n    \"fields\": [\n      {\n        \"name\": \"time\",\n        \"values\": [1, 2]\n      },\n      {\n        \"name\": \"msg\",\n        \"values\": [\n          \"level=error msg=error service=app1.loginService\",\n          \"level=debug msg=info service=app2.userProfileService\"\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Time Series Table Data via SQL Query - SQL\nDESCRIPTION: This snippet provides an example SQL query for selecting time series data (Time, Region, Value fields) from a 'metrics' table where the time is greater than a specified date. Intended for use within Grafana to demonstrate the 'Partition by values' transformation, this query returns all regions and times in a single result set. Its key parameter is the date \"2022-10-20\" in the WHERE condition, which restricts output to more recent entries. The output is a standard SQL result set for further transformation and visualization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_38\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT Time, Region, Value FROM metrics WHERE Time > \"2022-10-20\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Fill Parameter for Null Value Handling in Grafana\nDESCRIPTION: This query uses the $__timeGroupAlias macro with a fill parameter to convert null values to zero. It groups data by time and hostname, summing the values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(createdAt, '5m', 0),\n  sum(value) as value,\n  hostname\nFROM test_data\nWHERE\n  $__timeFilter(createdAt)\nGROUP BY\n  time,\n  hostname\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Provisioning Jaeger Data Source in YAML\nDESCRIPTION: Example YAML configuration for provisioning a Jaeger data source in Grafana. Includes settings for basic authentication, trace-to-logs linking, trace-to-metrics linking, node graph configuration, and span bar customization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Jaeger\n    type: jaeger\n    uid: EbPG8fYoz\n    url: http://localhost:16686\n    access: proxy\n    basicAuth: true\n    basicAuthUser: my_user\n    readOnly: false\n    isDefault: false\n    jsonData:\n      tracesToLogsV2:\n        datasourceUid: 'loki'\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n        tags: ['job', 'instance', 'pod', 'namespace']\n        filterByTraceID: false\n        filterBySpanID: false\n        customQuery: true\n        query: 'method=\"${__span.tags.method}\"'\n      tracesToMetrics:\n        datasourceUid: 'prom'\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]\n        queries:\n          - name: 'Sample query'\n            query: 'sum(rate(traces_spanmetrics_latency_bucket{$__tags}[5m]))'\n      nodeGraph:\n        enabled: true\n      traceQuery:\n        timeShiftEnabled: true\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n      spanBar:\n        type: 'None'\n    secureJsonData:\n      basicAuthPassword: my_password\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Teams Contact Point - YAML\nDESCRIPTION: Enables sending alert notifications to Microsoft Teams using a webhook URL. Supports templated titles, section titles, and message content through the 'settings' object. Inputs include the Teams webhook URL and optional message formatting. Outputs notifications posted to the Teams channel tied to the webhook. Requires valid Teams webhook credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntype: teams\\nsettings:\\n  # <string, required>\\n  url: https://ms_teams_url\\n  # <string>\\n  title: |\\n    {{ template \\\"default.title\\\" . }}\\n  # <string>\\n  sectiontitle: ''\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing a Grafana Plugin from a ZIP File using Bash\nDESCRIPTION: This Bash command demonstrates how to install a Grafana plugin manually by extracting a downloaded ZIP archive into the Grafana plugin directory. The `unzip` command extracts the contents of `my-plugin-0.2.0.zip` into a subdirectory named `my-plugin` within the designated Grafana plugin directory (`YOUR_PLUGIN_DIR`). This method is often used for custom plugins or in air-gapped environments. The exact path for `YOUR_PLUGIN_DIR` needs to be substituted based on the Grafana configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nunzip my-plugin-0.2.0.zip -d YOUR_PLUGIN_DIR/my-plugin\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users (Lookup Mode) in Organization via REST API - HTTP\nDESCRIPTION: This HTTP GET example requests a less-detailed list of users for the organization from /api/org/users/lookup. Used by admins, team managers, or when editing permissions, this endpoint returns basic user details and is authenticated via Bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/org/users/lookup HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Provisioning Google Cloud Monitoring Data Source with JWT Private Key Path (YAML)\nDESCRIPTION: This YAML snippet provisions the Google Cloud Monitoring data source in Grafana using a JWT authentication method where the service account's private key is referenced by file path instead of embedded directly. The 'privateKeyPath' field under 'jsonData' specifies the location of the PEM private key file accessible to the Grafana server. Main requirements are the service account's client email, token URI, and valid path to the private key. The provisioned data source will be set with JWT authentication and ready for use upon Grafana reload.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\ndatasources:\\n  - name: Google Cloud Monitoring\\n    type: stackdriver\\n    access: proxy\\n    jsonData:\\n      tokenUri: https://oauth2.googleapis.com/token\\n      clientEmail: stackdriver@myproject.iam.gserviceaccount.com\\n      authenticationType: jwt\\n      defaultProject: my-project-name\\n      privateKeyPath: /etc/secrets/gce.pem\n```\n\n----------------------------------------\n\nTITLE: Updated Main Function with Error Handling in Go\nDESCRIPTION: Modifies the main function to handle potential errors from InitializeEvent.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    e, err := InitializeEvent()\n    if err != nil {\n        fmt.Printf(\"failed to create event: %s\\n\", err)\n        os.Exit(2)\n    }\n    e.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Integration Tests in Grafana\nDESCRIPTION: Pattern for creating integration tests in Grafana. Tests should be named with the TestIntegration prefix and include a check for testing.Short() to allow skipping when running unit tests only.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestIntegrationFoo(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n    // function body\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Account - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates how to create a new service account in Grafana using the POST endpoint. The request contains a JSON payload with mandatory fields such as name, role, and isDisabled. Required headers include content type and authorization. The response showcases the server's JSON reply with detailed information on the newly created service account, including timestamps, avatar URL, and assigned role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\\n\\n{\\n  \"name\": \"grafana\",\\n  \"role\": \"Viewer\",\\n  \"isDisabled\": false\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201\\nContent-Type: application/json\\n\\n{\\n\\t\"id\": 1,\\n\\t\"name\": \"test\",\\n\\t\"login\": \"sa-test\",\\n\\t\"orgId\": 1,\\n\\t\"isDisabled\": false,\\n\\t\"createdAt\": \"2022-03-21T14:35:33Z\",\\n\\t\"updatedAt\": \"2022-03-21T14:35:33Z\",\\n\\t\"avatarUrl\": \"/avatar/8ea890a677d6a223c591a1beea6ea9d2\",\\n\\t\"role\": \"Viewer\",\\n\\t\"teams\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for Alert State History Backend (TOML)\nDESCRIPTION: This TOML snippet demonstrates the necessary configuration within the Grafana configuration file (typically `grafana.ini` or custom path) to enable alert state history. The `[unified_alerting.state_history]` section is used, setting `enabled` to true, specifying `backend` as \"loki\", and providing the `loki_remote_url` for the Loki instance where state changes will be written.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[unified_alerting.state_history]\nenabled = true\nbackend = \"loki\"\nloki_remote_url = \"http://localhost:3100\"\n```\n\n----------------------------------------\n\nTITLE: Setting up User Event Testing for React Components in Grafana\nDESCRIPTION: A utility function for setting up user event testing in React components. It combines rendering with userEvent setup to simplify testing user interactions, following the recommended approach of using userEvent.setup() for future compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nfunction setup(jsx: JSX.Element) {\n  return {\n    user: userEvent.setup(),\n    ...render(jsx),\n  };\n}\n\nit('should render', async () => {\n  const { user } = setup(<Button />);\n  await user.click(screen.getByRole('button'));\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Grafana as a Client in Dex OAuth2 Provider (YAML Configuration)\nDESCRIPTION: This YAML fragment is part of Dex's configuration file and registers Grafana as an OAuth2 client in the Dex IdP. It defines the client ID, secret (which must be generated externally), friendly name, and authorized redirect URIs. Required prerequisites are an operational Dex IdP instance and the ability to securely generate client secrets. Inputs are static values and secret, and output is enabling Dex to recognize Grafana as an authorized client.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nstaticClients:\n  - id: <client id>\n    name: Grafana\n    secret: <client secret>\n    redirectURIs:\n      - 'https://<grafana domain>/login/generic_oauth'\n\n```\n\n----------------------------------------\n\nTITLE: Using RenderUserContentAsHTML React Component\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `RenderUserContentAsHTML` component. It shows how to render the component and pass a string (\"sample content\") to the `content` prop. The component is designed to sanitize this input before rendering it as HTML, providing a safe alternative to `dangerouslySetInnerHTML`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<RenderUserContentAsHTML content=\"sample content\" />\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Dashboard Permissions (Plaintext)\nDESCRIPTION: Defines the `dashboards.permissions:write` permission action necessary to update permissions for one or more dashboards in Grafana. Access is linked to dashboard and folder scopes such as `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards.permissions:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Requesting Current Organization Data via REST API - HTTP\nDESCRIPTION: This HTTP snippet demonstrates a GET request to the Grafana /api/org/ endpoint to retrieve details of the current organization. Requires a valid Bearer token for authentication. The Accept and Content-Type headers must be set to application/json. The response will contain organization metadata such as the organization ID and name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/org/ HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Using Templating Variables in Time Series Query for PostgreSQL\nDESCRIPTION: Demonstrates how to use templating variables in a time series query. This example shows the usage of the $hostname variable and the $__timeFilter macro to create a dynamic query based on user selections.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  atimestamp as time,\n  aint as value\nFROM table\nWHERE $__timeFilter(atimestamp) and hostname in($hostname)\nORDER BY atimestamp ASC\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EmptySearchResult in JSX\nDESCRIPTION: This snippet demonstrates how to import the `EmptySearchResult` component from the `@grafana/ui` package and use it to display a custom message within a React/JSX application. It renders the component with a text node child indicating that no results matched the user's query.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptySearchResult/EmptySearchResult.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptySearchResult } from '@grafana/ui';\n\n<EmptySearchResult>Could not find anything matching your query</EmptySearchResult>;\n```\n\n----------------------------------------\n\nTITLE: Configuring User, Organization, and Global Limits - Grafana INI\nDESCRIPTION: Defines INI-style configuration options to control limits for user account creation, organization reporting, dashboard instantiation, API key generation, as well as alert rule and correlation count in Grafana. No external dependencies besides base Grafana. Parameters include limits for users per org (`user_org`), total users (`global_user`), organizations (`global_org`), dashboards (`global_dashboard`), API keys (`global_api_key`), sessions (`global_session`), alert rules (`global_alert_rule`), correlations (`global_correlations`), and alert evaluation result limits (`alerting_rule_evaluation_results`). All values support integers, with -1 meaning unlimited. These options are set inside the main Grafana config file (often `grafana.ini`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[users]\n# Limit the number of organizations a user can create (default: 10)\nuser_org = 10\n\n# Sets a global limit of users (default: -1 for unlimited)\nglobal_user = -1\n\n# Sets a global limit on organizations (default: -1 for unlimited)\nglobal_org = -1\n\n# Sets a global limit on dashboards (default: -1 for unlimited)\nglobal_dashboard = -1\n\n# Sets a global limit of API keys (default: -1 for unlimited)\nglobal_api_key = -1\n\n# Sets a global limit on sessions (default: -1 for unlimited)\nglobal_session = -1\n\n# Sets a global limit on alert rules (default: -1 for unlimited)\nglobal_alert_rule = -1\n\n# Sets a global limit on correlations (default: -1 for unlimited)\nglobal_correlations = -1\n\n# Limit the number of query evaluation results per alert rule (default: -1 for unlimited)\nalerting_rule_evaluation_results = -1\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Checkbox Component in React/JSX\nDESCRIPTION: This snippet demonstrates the basic import and usage of the Checkbox component from '@grafana/ui' within a React/JSX environment. It shows how to pass essential props like 'value' (boolean), 'label', 'description', and an 'onChange' handler function. It requires the '@grafana/ui' package to be installed as a dependency. The surrounding text explains the purpose of the checkbox for binary or multiple selections and provides usage guidelines.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Forms } from '@grafana/ui';\n\n<Checkbox value={true|false} label={...} description={...} onChange={...} />\n```\n\n----------------------------------------\n\nTITLE: Calculating Request Rate per Route with PromQL in Grafana Panel\nDESCRIPTION: This PromQL query calculates the sum of the per-second average rate of increase of the `tns_request_duration_seconds_count` metric over the last 5 minutes, grouped by the `route` label. It's used within a Grafana dashboard panel connected to a Prometheus data source to visualize traffic.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_7\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(tns_request_duration_seconds_count[5m])) by(route)\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Team Sync Group Attribute Path (Bash/INI)\nDESCRIPTION: Grafana configuration snippet setting `groups_attribute_path` to 'groups'. This tells Grafana's Team Sync feature to look for an array named 'groups' within the OAuth2 payload to identify the user's group memberships.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngroups_attribute_path = groups\n```\n\n----------------------------------------\n\nTITLE: Defining Local Custom Roles in Grafana Provisioning - YAML\nDESCRIPTION: This YAML snippet defines a local custom role for Grafana using the provisioning system. It sets the role's name, description, version, organization ID, and a set of permissions including reading, writing, and creating users. Requires Grafana with provisioning enabled and access to the roles configuration file. Inputs include role details and permissions; outputs are the applied custom roles after reloading the config. Limit role names to 190 ASCII characters.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 2\\n\\nroles:\\n  - name: custom:users:writer\\n    description: 'List, create, or update other users.'\\n    version: 1\\n    orgId: 1\\n    permissions:\\n      - action: 'users:read'\\n        scope: 'global.users:*'\\n      - action: 'users:write'\\n        scope: 'global.users:*'\\n      - action: 'users:create'\\n\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Image Renderer with Docker - Bash\nDESCRIPTION: Demonstrates how to run the Grafana Image Renderer as a Docker container while mounting a custom configuration file. This setup allows customization of renderer settings by mapping a host path to the container's configuration file location. You must have Docker installed and a valid config.json at the given host path. The 'grafana/grafana-image-renderer:latest' image is used, and network mode is set to host.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name=renderer --network=host -v /some/path/config.json:/usr/src/app/config.json grafana/grafana-image-renderer:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring OpsGenie Contact Point - YAML\nDESCRIPTION: Defines an OpsGenie contact point for Grafana alerts. Requires an API key and API URL, with optional message, description, auto-close, and tag handling configuration. Input fields map directly to OpsGenie API expectations. Outputs are managed OpsGenie alerts based on Grafana triggers. Requires a valid OpsGenie account and API access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntype: opsgenie\\nsettings:\\n  # <string, required>\\n  apiKey: xxx\\n  # <string, required>\\n  apiUrl: https://api.opsgenie.com/v2/alerts\\n  # <string>\\n  message: |\\n    {{ template \\\"default.title\\\" . }}\\n  # <string>\\n  description: some descriptive description\\n  # <bool>\\n  autoClose: false\\n  # <bool>\\n  overridePriority: false\\n  # <string> options: tags, details, both\\n  sendTagsAs: both\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Health Status via HTTP API - HTTP\nDESCRIPTION: This snippet sends a GET request to the /api/health endpoint to retrieve health information about a Grafana instance. The request includes Accept: application/json, but does not require authentication headers in most setups. It is used for monitoring system status and readiness for integrations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/health\\nAccept: application/json\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Dashboard Permissions with HTTP API\nDESCRIPTION: This snippet shows how to make a POST request to update the permissions for a dashboard. The request includes permissions for roles, teams, and individual users.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/uid/dHEquNzGz/permissions\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"items\": [\n    {\n      \"role\": \"Viewer\",\n      \"permission\": 1\n    },\n    {\n      \"role\": \"Editor\",\n      \"permission\": 2\n    },\n    {\n      \"teamId\": 1,\n      \"permission\": 1\n    },\n    {\n      \"userId\": 11,\n      \"permission\": 4\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable Expansion in Grafana Configuration\nDESCRIPTION: Example of using the env provider to expand environment variables in the Grafana paths configuration, setting the logs directory based on an environment variable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\nlogs = $__env{LOGDIR}/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Data Source Custom Headers using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Grafana data source (Graphite) using the provisioning system. It specifically shows how to add custom HTTP headers to requests sent to the data source. Header names are defined in `jsonData`, while their corresponding values, potentially sensitive like API keys or tokens, are stored encrypted in `secureJsonData`. This example sets 'HeaderName' to 'HeaderValue' and 'Authorization' to 'Bearer XXXXXXXXX'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Graphite\n    jsonData:\n      httpHeaderName1: 'HeaderName'\n      httpHeaderName2: 'Authorization'\n    secureJsonData:\n      httpHeaderValue1: 'HeaderValue'\n      httpHeaderValue2: 'Bearer XXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD OAuth SSO with Grafana Terraform Provider (Terraform)\nDESCRIPTION: This Terraform resource configures Azure AD as an SSO provider in Grafana by specifying OAuth2 URLs, credentials, and behavioral flags via the grafana_sso_settings resource. Dependencies include the Grafana Terraform Provider version v2.12.0 or later and access to a configured Azure AD App. Required fields include client_id, client_secret, auth_url, token_url, tenant/group restrictions, and PKCE setting. The configuration allows fine-tuning of admin assignment, auto-login, organizational, and group-based access control.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"azuread_sso_settings\" {\n  provider_name = \"azuread\"\n  oauth2_settings {\n    name                          = \"Azure AD\"\n    auth_url                      = \"https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/authorize\"\n    token_url                     = \"https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token\"\n    client_authentication         = \"CLIENT_AUTHENTICATION_OPTION\"\n    client_id                     = \"APPLICATION_ID\"\n    client_secret                 = \"CLIENT_SECRET\"\n    managed_identity_client_id    = \"MANAGED_IDENTITY_CLIENT_ID\"\n    federated_credential_audience = \"FEDERATED_CREDENTIAL_AUDIENCE\"\n    allow_sign_up                 = true\n    auto_login                    = false\n    scopes                        = \"openid email profile\"\n    allowed_organizations         = \"TENANT_ID\"\n    role_attribute_strict         = false\n    allow_assign_grafana_admin    = false\n    skip_org_role_sync            = false\n    use_pkce                      = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uncontrolled Context Menu Wrapper in React (JSX)\nDESCRIPTION: This snippet illustrates the use of the WithContextMenu higher-order component to wrap a trigger element (an IconButton) and handle menu open/close logic internally. The getContextMenuItems prop supplies menu data, and the child function receives a function (openMenu) to call to display the menu. Dependencies include WithContextMenu and IconButton. This approach abstracts state management, letting developers focus on triggering and rendering logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ContextMenu/ContextMenu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<WithContextMenu getContextMenuItems={() => [{ label: 'Test', items: [{ label: 'First' }, { label: 'Second' }] }]}>\\n  {({ openMenu }) => <IconButton name=\"info-circle\" onClick={openMenu} />}\\n</WithContextMenu>\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Data Source Permissions (Plaintext)\nDESCRIPTION: Defines the `datasources.permissions:write` permission action necessary to update permissions for data sources in Grafana. This capability is linked to data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.permissions:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Deleting a Shared Dashboard in Grafana using HTTP DELETE\nDESCRIPTION: This HTTP request deletes a shared dashboard by specifying both the dashboard UID and the public dashboard UID. It requires public write permissions for the dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/dashboards/uid/xCpsVuc4z/public-dashboards/cd56d9fd-f3d4-486d-afba-a21760e2acbe HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Alert Rule Group using Terraform\nDESCRIPTION: Creates a Grafana alert rule group named 'My Alert Rules' within a specified folder (referenced via `grafana_folder.<terraform_folder_name>.uid`), evaluated every 60 seconds. The rule 'My Random Walk Alert' involves querying a data source (linked via `grafana_data_source.<terraform_data_source_name>.uid`), reducing the result using an expression (`__expr__`), and applying a math expression (`$B > 70`) as the condition. Requires replacing placeholder names (`<terraform_rule_group_name>`, `<terraform_folder_name>`, `<terraform_data_source_name>`) with appropriate Terraform resource identifiers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_rule_group\" \"<terraform_rule_group_name>\" {\n    name = \"My Alert Rules\"\n    folder_uid = grafana_folder.<terraform_folder_name>.uid\n    interval_seconds = 60\n    org_id = 1\n\n    rule {\n        name = \"My Random Walk Alert\"\n        condition = \"C\"\n        for = \"0s\"\n\n        // Query the datasource.\n        data {\n            ref_id = \"A\"\n            relative_time_range {\n                from = 600\n                to = 0\n            }\n            datasource_uid = grafana_data_source.<terraform_data_source_name>.uid\n            // `model` is a JSON blob that sends datasource-specific data.\n            // It's different for every datasource. The alert's query is defined here.\n            model = jsonencode({\n                intervalMs = 1000\n                maxDataPoints = 43200\n                refId = \"A\"\n            })\n        }\n\n        // The query was configured to obtain data from the last 60 seconds. Let's alert on the average value of that series using a Reduce stage.\n        data {\n            datasource_uid = \"__expr__\"\n            // You can also create a rule in the UI, then GET that rule to obtain the JSON.\n            // This can be helpful when using more complex reduce expressions.\n            model = <<EOT\n{\"conditions\":[{\"evaluator\":{\"params\":[0,0],\"type\":\"gt\"},\"operator\":{\"type\":\"and\"},\"query\":{\"params\":[\"A\"]},\"reducer\":{\"params\":[],\"type\":\"last\"},\"type\":\"avg\"}],\"datasource\":{\"name\":\"Expression\",\"type\":\"__expr__\",\"uid\":\"__expr__\"},\"expression\":\"A\",\"hide\":false,\"intervalMs\":1000,\"maxDataPoints\":43200,\"reducer\":\"last\",\"refId\":\"B\",\"type\":\"reduce\"}\nEOT\n            ref_id = \"B\"\n            relative_time_range {\n                from = 0\n                to = 0\n            }\n        }\n\n        // Now, let's use a math expression as our threshold.\n        // We want to alert when the value of stage \"B\" above exceeds 70.\n        data {\n            datasource_uid = \"__expr__\"\n            ref_id = \"C\"\n            relative_time_range {\n                from = 0\n                to = 0\n            }\n            model = jsonencode({\n                expression = \"$B > 70\"\n                type = \"math\"\n                refId = \"C\"\n            })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dashboard Tags in HTTP/JSON\nDESCRIPTION: Example of retrieving all dashboard tags and their usage counts. This request sends a GET to /api/dashboards/tags endpoint. The response includes each tag term and the number of dashboards using that tag.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/tags HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Active Directory Nested Group Search Configuration\nDESCRIPTION: Example configurations for Active Directory nested/recursive group membership search filters using LDAP_MATCHING_RULE_IN_CHAIN.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngroup_search_filter = \"(member:1.2.840.113556.1.4.1941:=%s)\"\ngroup_search_base_dns = [\"DC=mycorp,DC=mytld\"]\ngroup_search_filter_user_attribute = \"dn\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngroup_search_filter = \"(member:1.2.840.113556.1.4.1941:=CN=%s,[user container/OU])\"\ngroup_search_filter = \"(|(member:1.2.840.113556.1.4.1941:=CN=%s,[user container/OU])(member:1.2.840.113556.1.4.1941:=CN=%s,[another user container/OU]))\"\ngroup_search_filter_user_attribute = \"cn\"\n```\n\n----------------------------------------\n\nTITLE: Humanizing Numbers with Go Template Functions - Go Template\nDESCRIPTION: Demonstrates usage of the {{ humanize }}, {{ humanize1024 }}, {{ humanizeDuration }}, {{ humanizePercentage }}, and {{ humanizeTimestamp }} functions for converting numeric values to human-friendly formats within Grafana templates. Requires Grafana's templating system, which in turn depends on the Go template language. Inputs are typically numeric values (floats or strings), and outputs are formatted strings suitable for display. Limitations include dependency on function support in Grafana versions and the formatting may vary based on locale.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_6\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ humanize 1000.0 }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ humanize1024 1024.0 }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ humanizeDuration 60.0 }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ humanizePercentage 0.2 }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ humanizeTimestamp 1577836800.0 }}\n\n```\n\n----------------------------------------\n\nTITLE: Using Bracket Variable Syntax in InfluxDB Queries\nDESCRIPTION: Example of using the ${varname} syntax (shown as [[host]] in the example) for variables in InfluxDB queries, useful when interpolating a variable within an expression.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT mean(\"value\") FROM \"logins\" WHERE \"hostname\" =~ /^[[host]]$/ AND $timeFilter GROUP BY time($__interval), \"hostname\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Templated Summary Annotation in Grafana\nDESCRIPTION: This snippet shows the resulting text of a templated `summary` annotation after Grafana evaluates it. It demonstrates how the template variables (`$labels.instance` and `$values.A.Value` or their `index` equivalents) are replaced with actual data (e.g., 'Instance 1' and '81.2345').\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorization Feature Toggles in Grafana via INI\nDESCRIPTION: This snippet enables critical feature toggles for the authorization (authZGRPCServer) and general GRPC server (grpcServer) functions within Grafana by using the [feature_toggles] section in the INI configuration. Both flags must be set to true to activate server support. No additional dependencies are required, and improper configuration may prevent server endpoints from being registered.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nauthZGRPCServer = true\ngrpcServer = true\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team by ID - HTTP\nDESCRIPTION: Performs an HTTP DELETE operation to remove a team using the team's numeric ID. Requires authentication with a valid Bearer token. Response indicates success or failure based on permissions or ID validity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/teams/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Provisioning CloudWatch Data Source with IAM Role Assumption\nDESCRIPTION: YAML configuration for provisioning CloudWatch data source using AWS SDK default authentication with an IAM role to assume.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\ndatasources:\n  - name: CloudWatch\n    type: cloudwatch\n    jsonData:\n      authType: default\n      assumeRoleArn: arn:aws:iam::123456789012:root\n      defaultRegion: eu-west-2\n```\n\n----------------------------------------\n\nTITLE: Team Search API Response Example - JSON\nDESCRIPTION: Shows the expected JSON response when retrieving a paginated list of teams using the team search HTTP API endpoint. The response includes metadata like totalCount, a listing of matching teams, and pagination info. All returned teams contain fields for ID, name, avatar URL, and member count.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"totalCount\\\": 1,\\n  \\\"teams\\\": [\\n    {\\n      \\\"id\\\": 1,\\n      \\\"orgId\\\": 1,\\n      \\\"name\\\": \\\"MyTestTeam\\\",\\n      \\\"email\\\": \\\"\\\",\\n      \\\"avatarUrl\\\": \\\"\\/avatar\\/3f49c15916554246daa714b9bd0ee398\\\",\\n      \\\"memberCount\\\": 1\\n    }\\n  ],\\n  \\\"page\\\": 1,\\n  \\\"perPage\\\": 1000\\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Temperature Units in Flux for Grafana Alerting\nDESCRIPTION: This Flux snippet demonstrates how to convert temperature values (e.g., Celsius) to Fahrenheit within a query pipeline using the `map()` function. It remaps the `_value` field by applying the conversion formula (`_value * 1.8 + 32.0`) before further processing like `aggregateWindow`. This is useful for alerting based on Fahrenheit thresholds when the stored data is in Celsius.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_1\n\nLANGUAGE: flux\nCODE:\n```\n|> map(fn: (r) => ({r with _value: r._value * 1.8 + 32.0}))\n```\n\n----------------------------------------\n\nTITLE: Using the BarGauge Component in TypeScript React (Grafana UI)\nDESCRIPTION: This TypeScript React snippet illustrates how to render the `BarGauge` component from `@grafana/ui`. It involves importing necessary types and components, defining a field configuration with thresholds, processing display properties using `getDisplayProcessor`, and passing the required props (theme, field config, display processor, value, orientation, display mode) to the `BarGauge` component for rendering a vertical basic bar gauge. Requires `@grafana/ui`, `@grafana/data`, and a `theme` object.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/BarGauge/BarGauge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BarGauge, BarGaugeDisplayMode } from '@grafana/ui';\nimport { VizOrientation, ThresholdsMode, Field, FieldType, getDisplayProcessor } from '@grafana/data';\n\nconst field: Partial<Field> = {\n  type: FieldType.number,\n  config: {\n    min: 0,\n    max: 100,\n    thresholds: {\n      mode: ThresholdsMode.Absolute,\n      steps: [\n        { value: -Infinity, color: 'green' },\n        { value: 20, color: 'blue' },\n        { value: 90, color: 'red' },\n      ],\n    },\n  },\n};\n\nfield.display = getDisplayProcessor({ theme, field });\n\nreturn (\n  <BarGauge\n    theme={theme}\n    field={field.config}\n    display={field.display}\n    value={{\n      text: '70',\n      title: 'Title of data point',\n      numeric: 70,\n    }}\n    orientation={VizOrientation.Vertical}\n    displayMode={BarGaugeDisplayMode.Basic}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Graphite Data Source via Grafana API - HTTP\nDESCRIPTION: This HTTP POST example demonstrates how to create a new Graphite data source in Grafana by sending a JSON body specifying the name, type (graphite), URL, access type, and authentication options. Requires an Authorization header with a Bearer token for authentication. Inputs include parameters for the data source configuration. Outputs include a JSON response describing the created data source, including sensitive fields. Password and basicAuthPassword fields should be handled securely as per Grafana guidance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"name\":\"test_datasource\",\\n  \"type\":\"graphite\",\\n  \"url\":\"http://mydatasource.com\",\\n  \"access\":\"proxy\",\\n  \"basicAuth\":false\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n  \"datasource\": {\\n    \"id\": 1,\\n    \"orgId\": 1,\\n    \"name\": \"test_datasource\",\\n    \"type\": \"graphite\",\\n    \"typeLogoUrl\": \"\",\\n    \"access\": \"proxy\",\\n    \"url\": \"http://mydatasource.com\",\\n    \"password\": \"\",\\n    \"user\": \"\",\\n    \"database\": \"\",\\n    \"basicAuth\": false,\\n    \"basicAuthUser\": \"\",\\n    \"basicAuthPassword\": \"\",\\n    \"withCredentials\": false,\\n    \"isDefault\": false,\\n    \"jsonData\": {},\\n    \"secureJsonFields\": {},\\n    \"version\": 1,\\n    \"readOnly\": false\\n  },\\n  \"id\": 1,\\n  \"message\": \"Datasource added\",\\n  \"name\": \"test_datasource\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Provisioning with TLS Verification in Grafana\nDESCRIPTION: This YAML configuration sets up a MySQL datasource in Grafana with TLS verification. It includes TLS-specific settings and client certificates, in addition to the basic connection details and pool settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    user: grafana\n    jsonData:\n      tlsAuth: true\n      database: grafana\n      maxOpenConns: 100\n      maxIdleConns: 100\n      maxIdleConnsAuto: true\n      connMaxLifetime: 14400\n    secureJsonData:\n      password: ${GRAFANA_MYSQL_PASSWORD}\n      tlsClientCert: ${GRAFANA_TLS_CLIENT_CERT}\n      tlsCACert: ${GRAFANA_TLS_CA_CERT}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Custom Cloud Environment in Grafana\nDESCRIPTION: Example configuration for defining custom Azure cloud environments with specific endpoints and properties. This includes settings for AAD authority, data explorer, log analytics, portal, prometheus and resource manager URLs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nclouds_config = `[\n\t\t{\n\t\t\t\"name\":\"CustomCloud1\",\n\t\t\t\"displayName\":\"Custom Cloud 1\",\n\t\t\t\"aadAuthority\":\"https://login.cloud1.contoso.com/\",\n\t\t\t\"properties\":{\n\t\t\t\t\"azureDataExplorerSuffix\": \".kusto.windows.cloud1.contoso.com\",\n\t\t\t\t\"logAnalytics\":            \"https://api.loganalytics.cloud1.contoso.com\",\n\t\t\t\t\"portal\":                  \"https://portal.azure.cloud1.contoso.com\",\n\t\t\t\t\"prometheusResourceId\":    \"https://prometheus.monitor.azure.cloud1.contoso.com\",\n\t\t\t\t\"resourceManager\":         \"https://management.azure.cloud1.contoso.com\"\n\t\t\t}\n\t\t}]`\n```\n\n----------------------------------------\n\nTITLE: Querying External Groups for a Team with HTTP API in HTTP\nDESCRIPTION: Performs a GET request to retrieve all external groups associated with a specific team in Grafana. Requires the 'teams.permissions:read' permission scope and proper bearer token authentication. The request accepts and expects JSON-formatted data, with the response including an array of group mappings for the team.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/teams/1/groups HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Searching Service Accounts with Paging - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates how to search for service accounts in Grafana using the HTTP API with support for paging and filtering. Basic authentication is required for On-Prem Grafana instances, and results are paginated using the 'perpage' and 'page' parameters. The request shows the necessary HTTP headers and URI structure for performing a filtered search for service accounts. The response sample illustrates the structure of the returned JSON payload, including totalCount, paged serviceAccounts, and pagination metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/serviceaccounts/search?perpage=10&page=1&query=mygraf HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n{\\n\\t\"totalCount\": 2,\\n\\t\"serviceAccounts\": [\\n\\t\\t{\\n\\t\\t\\t\"id\": 1,\\n\\t\\t\\t\"name\": \"grafana\",\\n\\t\\t\\t\"login\": \"sa-grafana\",\\n\\t\\t\\t\"orgId\": 1,\\n\\t\\t\\t\"isDisabled\": false,\\n\\t\\t\\t\"role\": \"Viewer\",\\n\\t\\t\\t\"tokens\": 0,\\n\\t\\t\\t\"avatarUrl\": \"/avatar/85ec38023d90823d3e5b43ef35646af9\",\\n\\t\\t\\t\"accessControl\": {\\n\\t\\t\\t\\t\"serviceaccounts:delete\": true,\\n\\t\\t\\t\\t\"serviceaccounts:read\": true,\\n\\t\\t\\t\\t\"serviceaccounts:write\": true\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t\"id\": 2,\\n\\t\\t\\t\"name\": \"test\",\\n\\t\\t\\t\"login\": \"sa-test\",\\n\\t\\t\\t\"orgId\": 1,\\n\\t\\t\\t\"isDisabled\": false,\\n\\t\\t\\t\"role\": \"Viewer\",\\n\\t\\t\\t\"tokens\": 0,\\n\\t\\t\\t\"avatarUrl\": \"/avatar/8ea890a677d6a223c591a1beea6ea9d2\",\\n\\t\\t\\t\"accessControl\": {\\n\\t\\t\\t\\t\"serviceaccounts:delete\": true,\\n\\t\\t\\t\\t\"serviceaccounts:read\": true,\\n\\t\\t\\t\\t\"serviceaccounts:write\": true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t],\\n\\t\"page\": 1,\\n\\t\"perPage\": 10\\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Zipkin Data Source - Grafana (YAML)\nDESCRIPTION: This YAML snippet demonstrates provisioning a Zipkin data source within Grafana’s provisioning framework. Dependencies include Grafana 6.0+ and access to a running Zipkin-compatible endpoint. Key configuration parameters include the data source name, URL, authentication, and advanced tracing-to-logs/metrics options such as 'datasourceUid', 'spanStartTimeShift', tags, queries, and spanBar display settings. The 'secureJsonData' section includes sensitive authentication credentials. Inputs must conform to Grafana's datasource provisioning schemas, and misconfiguration may cause data source connection or UI issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/zipkin/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Zipkin\n    type: zipkin\n    uid: EbPG8fYoz\n    url: http://localhost:16686\n    access: proxy\n    basicAuth: true\n    basicAuthUser: my_user\n    readOnly: true\n    isDefault: false\n    jsonData:\n      tracesToLogsV2:\n        # Field with an internal link pointing to a logs data source in Grafana.\n        # datasourceUid value must match the uid value of the logs data source.\n        datasourceUid: 'loki'\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n        tags: ['job', 'instance', 'pod', 'namespace']\n        filterByTraceID: false\n        filterBySpanID: false\n        customQuery: true\n        query: 'method=\"$${__span.tags.method}\"'\n      tracesToMetrics:\n        datasourceUid: 'prom'\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]\n        queries:\n          - name: 'Sample query'\n            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'\n      nodeGraph:\n        enabled: true\n      traceQuery:\n        timeShiftEnabled: true\n        spanStartTimeShift: '1h'\n        spanEndTimeShift: '-1h'\n      spanBar:\n        type: 'None'\n    secureJsonData:\n      basicAuthPassword: my_password\n```\n\n----------------------------------------\n\nTITLE: Configuring Descope OAuth Integration for Grafana\nDESCRIPTION: Configuration settings for enabling Descope OAuth authentication in Grafana. Includes required parameters like client ID, secret, authorization endpoints, and scopes for proper OAuth2 flow implementation with PKCE and refresh token support.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n[auth.generic_oauth]\nenabled = true\nallow_sign_up = true\nauto_login = false\nteam_ids =\nallowed_organizations =\nname = Descope\nclient_id = <Descope Project ID>\nclient_secret = <Descope Access Key>\nscopes = openid profile email descope.claims descope.custom_claims\nauth_url = https://api.descope.com/oauth2/v1/authorize\ntoken_url = https://api.descope.com/oauth2/v1/token\napi_url = https://api.descope.com/oauth2/v1/userinfo\nuse_pkce = true\nuse_refresh_token = true\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundary with Custom Fallback - React & Grafana UI - JSX\nDESCRIPTION: Demonstrates how to import and use the ErrorBoundary component from Grafana UI, allowing child components to be wrapped in an error catcher. Utilizes render props to check for errors and conditionally display a customized Alert UI or the wrapped component. Requires '@grafana/ui' and React as dependencies. Inputs include children components, and the output is either the fallback UI or the normal rendering flow. Intended for robust error handling in React interfaces.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ErrorBoundary, Alert } from '@grafana/ui';\\n\\n<ErrorBoundary>\\n  {({ error }) => {\\n    if (error) {\\n      return <Alert title={error.message} />;\\n    }\\n    return <Component />;\\n  }}\\n</ErrorBoundary>;\n```\n\n----------------------------------------\n\nTITLE: Standard Bind DN and Password Configuration (ldap.toml)\nDESCRIPTION: Shows the default method for configuring LDAP binding in `ldap.toml`. This requires specifying a read-only service account (`bind_dn`) and its password (`bind_password`). Grafana uses these credentials to perform an initial search for the logging-in user, then performs a second bind using the user's provided credentials for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\nbind_password = \"grafana\"\n```\n```\n\n----------------------------------------\n\nTITLE: Naming React Callback Props and Handlers\nDESCRIPTION: Demonstrates the correct naming convention for React callback props and handlers using the 'on' prefix.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// bad\nhandleChange = () => {\n\n};\n\nrender() {\n  return (\n    <MyComponent changed={this.handleChange} />\n  );\n}\n\n// good\nonChange = () => {\n\n};\n\nrender() {\n  return (\n    <MyComponent onChange={this.onChange} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Completion Item Provider Interface\nDESCRIPTION: Comprehensive interface for customizing SQL completion behavior including functions, operators, macros, and custom suggestions support.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SQLCompletionItemProvider\n  extends Omit<monacoTypes.languages.CompletionItemProvider, 'provideCompletionItems'> {\n  supportedFunctions?: () => Array<{\n    id: string;\n    name: string;\n  }>;\n\n  supportedOperators?: () => Array<{\n    id: string;\n    operator: string;\n    type: OperatorType;\n  }>;\n\n  supportedMacros?: () => Array<{\n    id: string;\n    name: string;\n    type: MacroType;\n    args: Array<string>;\n  }>;\n\n  customSuggestionKinds?: () => CustomSuggestionKind[];\n\n  customStatementPlacement?: () => CustomStatementPlacement[];\n\n  tables?: {\n    resolve: () => Promise<TableDefinition[]>;\n    parseName?: (t: LinkedToken) => string;\n  };\n\n  columns?: {\n    resolve: (table: string) => Promise<ColumnDefinition[]>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Data Sources (Plaintext)\nDESCRIPTION: Defines the `datasources:query` permission action required to query data sources within Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources:query`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Deleting the Notification Policy Tree using Grafana REST API (HTTP)\nDESCRIPTION: This HTTP code snippet documents the DELETE request to remove the entire notification policy tree in the Grafana backend. No parameters are required; success returns a 202 Accepted status with an empty Ack schema in the response. This endpoint is used to fully reset policies and is typically protected, so ensure correct authentication and permissions before usage. Expected input is a DELETE request and the response is a confirmation of acceptance (202).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/provisioning/policies\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for Grid Component in MDX\nDESCRIPTION: This snippet uses the imported `Meta` component from Storybook to configure the documentation page. The `title` prop sets the component's path in the Storybook navigation ('MDX|Grid'), and the `component` prop links the documentation to the actual `Grid` component, enabling features like props table generation via `ArgTypes`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|Grid\" component={Grid} />\n```\n\n----------------------------------------\n\nTITLE: Exporting Grafana Image Renderer Metrics in Prometheus Metrics Format - Prometheus\nDESCRIPTION: This snippet exposes a series of Prometheus metrics capturing the duration of different steps in the Grafana image rendering pipeline and metadata about the browser used. The primary metric, 'grafana_image_renderer_step_duration_seconds', is a histogram reporting step durations with associated buckets, along with counters and sums for each step type. Another metric, 'grafana_image_renderer_browser_info', indicates the browser version in use. These metrics support monitoring and alerting for performance and compatibility. No external dependencies are required except for Prometheus or compatible monitoring solutions. Inputs are exported automatically by the renderer; outputs are scraped metrics usable by Prometheus. All lines conform to the expected Prometheus exposition format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/monitoring/index.md#2025-04-23_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\n# TYPE grafana_image_renderer_step_duration_seconds histogram\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"launch\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"launch\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"launch\"} 0.7914972\ngrafana_image_renderer_step_duration_seconds_count{step=\"launch\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"newPage\"} 0.2217868\ngrafana_image_renderer_step_duration_seconds_count{step=\"newPage\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"prepare\"} 0.0819274\ngrafana_image_renderer_step_duration_seconds_count{step=\"prepare\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"navigate\"} 0\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"navigate\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"navigate\"} 15.3311258\ngrafana_image_renderer_step_duration_seconds_count{step=\"navigate\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"panelsRendered\"} 0.0205577\ngrafana_image_renderer_step_duration_seconds_count{step=\"panelsRendered\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.3\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"0.5\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"1\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"2\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"3\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"5\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_bucket{le=\"+Inf\",step=\"screenshot\"} 1\ngrafana_image_renderer_step_duration_seconds_sum{step=\"screenshot\"} 0.2866623\ngrafana_image_renderer_step_duration_seconds_count{step=\"screenshot\"} 1\n\n# HELP grafana_image_renderer_browser_info A metric with a constant '1 value labeled by version of the browser in use\n# TYPE grafana_image_renderer_browser_info gauge\ngrafana_image_renderer_browser_info{version=\"HeadlessChrome/79.0.3945.0\"} 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape for Alertmanager Metrics (YAML)\nDESCRIPTION: This YAML snippet gives a Prometheus scrape_config job for scraping metrics from an Alertmanager instance, including critical job parameters and endpoint targeting. It supports the collection of Alertmanager performance, notification, and health metrics, crucial for alerting system reliability. Required dependencies are Prometheus, network connectivity to the Alertmanager host, and reloading Prometheus after editing the config. Inputs are Prometheus scrape config parameters; outputs are Alertmanager metrics consumed and made queryable by Prometheus.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/meta-monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: alertmanager\\n  honor_timestamps: true\\n  scrape_interval: 15s\\n  scrape_timeout: 10s\\n  metrics_path: /metrics\\n  scheme: http\\n  follow_redirects: true\\n  static_configs:\\n    - targets:\\n        - alertmanager:9093\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Resizable Panes with useSplitter in React\nDESCRIPTION: This snippet demonstrates how to use the useSplitter hook from @grafana/ui to create two resizable panes. It shows the setup of the hook with options and the rendering of the container, primary pane, splitter, and secondary pane using the returned props.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Splitter/useSplitter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSplitter } from '@grafana/ui';\n\nconst { containerProps, primaryProps, secondaryProps, splitterProps } = useSplitter({\n  direction: 'row',\n  initialSize: 0.5,\n  dragPosition: 'end',\n});\n\nreturn (\n  <div {...containerProps}>\n    <div {...primaryProps}>\n      <Box display=\"flex\" grow={1} backgroundColor=\"primary\" padding={2}>\n        Primary\n      </Box>\n    </div>\n    <div {...splitterProps} />\n    <div {...secondaryProps}>\n      <Box display=\"flex\" grow={1} backgroundColor=\"primary\" padding={2}>\n        Secondary\n      </Box>\n    </div>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using JMESPath for Role Mapping in Grafana GitHub OAuth\nDESCRIPTION: Configuration using `role_attribute_path` employs a JMESPath expression to determine a user's Grafana role based on data from the UserInfo endpoint or GitHub teams retrieved via the `/api/user/teams` endpoint. The expression must resolve to a valid role: `None`, `Viewer`, `Editor`, `Admin`, or `GrafanaAdmin`. Requires understanding of JMESPath syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[JMESPath](http://jmespath.org/examples.html)\n```\n\nLANGUAGE: http\nCODE:\n```\n/api/user/teams\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNone, Viewer, Editor, Admin, GrafanaAdmin\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Log Groups with OpenSearch SQL in CloudWatch\nDESCRIPTION: Shows how to query multiple log groups simultaneously using OpenSearch SQL syntax in CloudWatch. The query counts exceptions across specified log groups within a time window.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT window.start, COUNT(*) AS exceptionCount\nFROM `logGroups( logGroupIdentifier: ['LogGroup1', 'LogGroup2'])`\nWHERE `@message` LIKE '%Exception%'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Grafana Admin Role Mapping\nDESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'roles' array with 'admin'. This is used with specific Grafana configuration to grant the user Grafana server administrator privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"roles\": [\n        \"admin\",\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Example of Auto User Creation in Grafana AuthProxy\nDESCRIPTION: Demonstration of how Grafana automatically creates a new user when AuthProxy authentication sends a previously unknown username in the header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-WEBAUTH-USER: anthony\" http://localhost:3000/api/user\n{\n    \"email\":\"anthony\",\n    \"name\":\"\",\n    \"login\":\"anthony\",\n    \"theme\":\"\",\n    \"orgId\":1,\n    \"isGrafanaAdmin\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an External Group to a Team with HTTP API in HTTP\nDESCRIPTION: Performs a POST operation to add an external group to a specified Grafana team. The bearer token must have 'teams.permissions:write' permission. The request body must be JSON with the 'groupId' parameter specifying the LDAP-style group name. The request expects and responds with JSON; errors are returned for duplicates or invalid teams.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/teams/1/groups HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer YWRtaW46YWRtaW4=\\n\\n{\\n  \\\"groupId\\\": \\\"cn=editors,ou=groups,dc=grafana,dc=org\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping a Single Grafana Role to All Users (INI)\nDESCRIPTION: This INI configuration assigns the 'Viewer' role to every user authenticating via Google OAuth, regardless of their specific attributes or group memberships. It uses a constant string value in the `role_attribute_path` JMESPath expression and requires `skip_org_role_sync = false` for the mapping to be applied.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nrole_attribute_path = \"'Viewer'\"\nskip_org_role_sync = false\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Passwordless Authentication in Grafana (INI)\nDESCRIPTION: This configuration snippet enables the experimental passwordless authentication feature in Grafana. Setting `enabled = true` under the `[auth.passwordless]` section activates authentication via magic links or one-time passwords sent through email. Requires the `passwordlessMagicLinkAuthentication` feature toggle to be enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[auth.passwordless]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Creatable Options in Select with React and @grafana/ui (JSX)\nDESCRIPTION: Shows how to use the Select component with creatable options by enabling the allowCustomValue prop and handling value creation in the onCreateOption callback. Requires @grafana/ui's Select and React's useState. Inputs include user-defined custom option values; output is updated state via setValue when a custom option is created. The key limitation is ensuring allowCustomValue is true and managing the creation logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"@grafana/ui\";\n\nconst SelectComponent = () => {\n  const [value, setValue] = useState<SelectableValue<number>>();\n\n  return (\n    <Select\n      options={option}\n      value={value}\n      allowCustomValue\n      onCreateOption={customValue => {\n        setValue(customValue);\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Provisioning Directory Path in Grafana - INI\nDESCRIPTION: This snippet configures the provisioning directory path by setting the 'provisioning' key in the 'paths' section of Grafana's main configuration file. To use, update <path to config files> with your provisioning directory's path. This is a prerequisite for using provisioning via configuration files and requires Grafana 7.0 or later. The file is typically named grafana.ini and must be edited with appropriate permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\\nprovisioning = <path to config files>\\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning Google Cloud Monitoring Data Source with JWT Key File (YAML)\nDESCRIPTION: This YAML snippet configures the Google Cloud Monitoring (Stackdriver) data source in Grafana using a service account JWT authentication method. It requires the service account's client email, a token URI, and the complete private key (in secureJsonData) in PEM format. The 'jsonData' section configures the main connection, while 'secureJsonData' stores secret material. The input is a Grafana configuration file, and the output is a fully provisioned Cloud Monitoring data source. Ensure the 'type' is set to 'stackdriver' and Grafana is restarted after changing configuration files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\ndatasources:\\n  - name: Google Cloud Monitoring\\n    type: stackdriver\\n    access: proxy\\n    jsonData:\\n      tokenUri: https://oauth2.googleapis.com/token\\n      clientEmail: stackdriver@myproject.iam.gserviceaccount.com\\n      authenticationType: jwt\\n      defaultProject: my-project-name\\n    secureJsonData:\\n      privateKey: |\\n        -----BEGIN PRIVATE KEY-----\\n        POSEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCb1u1Srw8ICYHS\\n        ...\\n        yA+23427282348234=\\n        -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Initiating Group Mappings in ldap.toml (Bash)\nDESCRIPTION: This snippet shows the beginning of the group mapping section within the `ldap.toml` file. The `[[servers.group_mappings]]` directive marks the start of a block where specific LDAP groups can be mapped to Grafana organization roles. Subsequent lines within this block (not shown in the snippet) would define these mappings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n[[servers.group_mappings]]\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshot by Key via Grafana HTTP API (HTTP)\nDESCRIPTION: Illustrates the DELETE HTTP request structure for removing a dashboard snapshot by its unique key. The endpoint requires authorization and is intended for authenticated cleanup of dashboard snapshots from the server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/snapshots/YYYYYYY HTTP/1.1\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining and Assigning Custom/Fixed Roles to Grafana Teams via YAML Provisioning\nDESCRIPTION: This YAML configuration example demonstrates how to define a custom role 'custom:users:writer' with read/write permissions for users and assign both this custom role and the fixed role 'fixed:users:writer' to the 'user writers' and 'user admins' teams within organization ID 1 using Grafana's provisioning system. The `apiVersion`, `roles`, and `teams` sections structure the configuration. Requires Grafana provisioning to be enabled and the specified teams to exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/assign-rbac-roles/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 2\n\n# Roles to insert/update in the database\nroles:\n  - name: 'custom:users:writer'\n    description: 'List/update other users in the organization'\n    version: 1\n    global: true\n    permissions:\n      - action: 'org.users:read'\n        scope: 'users:*'\n      - action: 'org.users:write'\n        scope: 'users:*'\n\n# Assignments to teams\nteams:\n  - name: 'user writers'\n    orgId: 1\n    roles:\n      # Custom role assignment\n      - name: 'custom:users:writer'\n        global: true\n      # Fixed role assignment\n      - name: 'fixed:users:writer'\n        global: true\n  - name: 'user admins'\n    orgId: 1\n    roles:\n      - name: 'custom:users:writer'\n        global: true\n      - name: 'fixed:users:writer'\n        global: true\n```\n\n----------------------------------------\n\nTITLE: Provisioning InfluxDB 2.x Data Source with Flux in Grafana\nDESCRIPTION: This YAML snippet shows how to provision an InfluxDB 2.x data source using Flux query language in Grafana. It specifies the version, organization, default bucket, and includes a secure token for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: InfluxDB_v2_Flux\n    type: influxdb\n    access: proxy\n    url: http://localhost:8086\n    jsonData:\n      version: Flux\n      organization: organization\n      defaultBucket: bucket\n      tlsSkipVerify: true\n    secureJsonData:\n      token: token\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Service with Docker Compose\nDESCRIPTION: Defines a Grafana service within a `docker-compose.yml` file. Specifies the image, container name, restart policy, environment variables (including plugins to install), port mapping, and volume for persistent storage.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\nversion: '3.8'\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    environment:\n      - TERM=linux\n      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel\n    ports:\n      - '3000:3000'\n    volumes:\n      - 'grafana_storage:/var/lib/grafana'\nvolumes:\n  grafana_storage: {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Installed Plugins via Grafana HTTP API - Shell\nDESCRIPTION: This shell snippet retrieves the list of plugins installed on your Grafana OSS/Enterprise instance using an authenticated HTTP GET request with curl and processes the response using jq. It filters community and externally signed plugins, extracts relevant metadata, and writes the resulting objects to plugins.json. Dependencies include environment variables for authentication and the jq command line tool. Input parameters: $GRAFANA_SOURCE_TOKEN (source token), $GRAFANA_ONPREM_INSTANCE_URL (base URL). Output: plugins.json containing the array of plugin objects. This script must be executed on a system with curl and jq installed, and is limited to plugins meeting the signature filter criteria.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nresponse=$(curl -s -H \"Accept: application/json\" -H \"Authorization: Bearer $GRAFANA_SOURCE_TOKEN\" \"${GRAFANA_ONPREM_INSTANCE_URL}/api/plugins\")\n\nplugins=$(echo $response | jq '[.[] | select(.signatureType == \"community\" or (.signatureType != \"internal\" and .signatureType != \"\")) | {name: .id, version: .info.version}]')\n\necho \"$plugins\" > plugins.json\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Enterprise via APT - Bash\nDESCRIPTION: Installs the latest Grafana Enterprise edition using apt. Dependencies: Repository for Enterprise must be present. Input: None. Output: Installs grafana-enterprise with optional full-feature unlocking via license.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Installs the latest Enterprise release:\nsudo apt-get install grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Trust Policy for Grafana Assume Role (JSON)\nDESCRIPTION: This JSON defines an AWS IAM trust policy statement required for the 'Grafana Assume Role' authentication method. It grants the 'sts:AssumeRole' permission to Grafana's AWS account principal, conditioned on the presence of a specific 'sts:ExternalId'. This ensures that Grafana can only assume the role if it provides the correct unique external ID associated with the user's account.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": {Grafana's AWS Account}\n            },\n            \"Action\": \"sts:AssumeRole\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": {External ID unique to your account}\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Annotation via Grafana HTTP API - HTTP+JSON\nDESCRIPTION: Provides the structure for creating a new annotation using a POST request to the Grafana API. The request must include a JSON body specifying dashboardUID, panelId, time, timeEnd, tags, and text. The endpoint responds with a confirmation message and the new annotation id if successful.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/annotations HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\\n  \"dashboardUID\":\"jcIIG-07z\",\\n  \"panelId\":1,\\n  \"time\":1507037197339,\\n  \"timeEnd\":1507180805056,\\n  \"tags\":[\"tag1\",\"tag2\"],\\n  \"text\":\"Annotation Description\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifest using Bash\nDESCRIPTION: Applies the Kubernetes resource definitions contained within the `grafana.yaml` file to the cluster using `kubectl apply`. The `--namespace=my-grafana` flag ensures these resources are created within the designated 'my-grafana' namespace. This command instructs the Kubernetes API server to create or update the PVC, Deployment, and Service objects defined in the manifest. Requires `kubectl` installed and configured, and the `grafana.yaml` file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f grafana.yaml --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf WebSocket Output for Grafana Live Streaming (TOML)\nDESCRIPTION: This Telegraf configuration demonstrates using the WebSocket output plugin (`outputs.websocket`), available since Telegraf v1.19.0, for potentially higher frequency updates (500ms `interval` and `flush_interval`) and reduced Grafana backend CPU usage compared to HTTP. It collects total CPU metrics (`inputs.cpu`) and sends them in InfluxDB line protocol format (`data_format = \"influx\"`) to Grafana's WebSocket live push endpoint (`ws://localhost:3000/api/live/push/custom_stream_id`). Authentication requires replacing `<Your API Key>` with a Grafana Admin API key in the Authorization Bearer token header. The `custom_stream_id` defines the Grafana Live channel namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/stream-metrics-from-telegraf-to-grafana/index.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[agent]\n  interval = \"500ms\"\n  flush_interval = \"500ms\"\n\n[[inputs.cpu]]\n  percpu = false\n  totalcpu = true\n\n[[outputs.websocket]]\n  url = \"ws://localhost:3000/api/live/push/custom_stream_id\"\n  data_format = \"influx\"\n  [outputs.websocket.headers]\n    Authorization = \"Bearer <Your API Key>\"\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Filtered Elasticsearch Terms for Grafana Variable (JSON)\nDESCRIPTION: This JSON query retrieves distinct values (terms) from the `hostname` field in Elasticsearch for a Grafana template variable. It applies an additional filter specified by a `<Lucene query>` and respects the current dashboard time range. This allows for more specific filtering when populating variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n`{\"find\": \"terms\", \"field\": \"hostname\", \"query\": '<Lucene query>'}`\n```\n\n----------------------------------------\n\nTITLE: Setting Severity Label based on Query Value\nDESCRIPTION: This Go template defines a dynamic `severity` label for a Grafana alert. It uses conditional logic (`if/else if/else`) with the `gt` (greater than) function to compare the value of query 'A' against thresholds, assigning 'critical', 'high', 'medium', or 'low' accordingly. This allows for routing alerts based on severity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_14\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- if (gt $values.A.Value 90.0) -}}critical\n{{- else if (gt $values.A.Value 80.0) -}}high\n{{- else if (gt $values.A.Value 60.0) -}}medium\n{{- else -}}low\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Time Series Query for SQL Databases in Grafana v8.0\nDESCRIPTION: Example SQL query demonstrating the time series format in Grafana v8.0 for PostgreSQL, MySQL, and Microsoft SQL Server data sources. This query selects time-grouped data along with average values and hostname, which may require adjustments to visualization after upgrading.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.0/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroup(\"createdAt\",'10m'),\n  avg(value) as \"value\",\n  hostname\nFROM grafana_metric\nWHERE $__timeFilter(\"createdAt\")\nGROUP BY time, hostname\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Using File Provider for Secure Database Password in Grafana\nDESCRIPTION: Example of using the file provider in Grafana configuration to securely read the database password from an external file instead of storing it directly in the configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[database]\npassword = $__file{/etc/secrets/gf_sql_password}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Grafana User via Admin HTTP API - HTTP\nDESCRIPTION: Performs an HTTP DELETE request to remove a user account from Grafana using the admin API. Basic Authentication and users:delete permission are required for access. A successful deletion yields a JSON confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/admin/users/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"User deleted\"}\n```\n\n----------------------------------------\n\nTITLE: POSIX Schema Configuration for Group Search (ldap.toml)\nDESCRIPTION: Provides configuration options for `ldap.toml` specifically for LDAP servers following a POSIX schema where the `memberOf` attribute is not available. It defines `group_search_filter` to find groups based on a user attribute (like `memberUid`), `group_search_base_dns` to specify where to search for groups, and `group_search_filter_user_attribute` to indicate which user attribute (e.g., `uid`) should replace `%s` in the filter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)\ngroup_search_filter = \"(&(objectClass=posixGroup)(memberUid=%s))\"\n## An array of the base DNs to search through for groups. Typically uses ou=groups\ngroup_search_base_dns = [\"ou=groups,dc=grafana,dc=org\"]\n## the %s in the search filter will be replaced with the attribute defined below\ngroup_search_filter_user_attribute = \"uid\"\n```\n```\n\n----------------------------------------\n\nTITLE: Role Mapping Example for GitHub Organizations\nDESCRIPTION: Configuration example showing how to map GitHub team memberships to different Grafana organization roles. This maps specific GitHub teams to different Grafana organizations with appropriate permission levels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\norg_mapping = @my-github-organization/my-github-team-1:org_foo:Viewer @my-github-organization/my-github-team-2:org_bar:Editor *:org_baz:Editor\n```\n\n----------------------------------------\n\nTITLE: Running API Generation Command\nDESCRIPTION: Command to execute the API client generation script.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nyarn generate-apis\n```\n\n----------------------------------------\n\nTITLE: Example Usage of FieldValidationMessage in a Custom Form Field (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to integrate the `FormValidationMessage` component within a custom form field structure. It defines a functional React component `CustomFormField` which includes a label, an input element, and conditionally renders the `FormValidationMessage` with the text 'Invalid input' based on the truthiness of an 'error' variable. This pattern is typical for showing validation feedback directly under the relevant input.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldValidationMessage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const CustomFormField = () => {\n  return (\n    <div>\n      Label\n      <div>\n        <input />\n        {error && <FormValidationMessage>Invalid input</FormValidationMessage>}\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Example GitLab OAuth Configuration in Grafana (Bash/INI)\nDESCRIPTION: This configuration block, presented in a Bash context but intended for Grafana's INI file, shows a complete example for the `[auth.gitlab]` section. It enables GitLab authentication, allows sign-up, sets client ID/secret, defines OAuth scopes, specifies authorization/token/API URLs, configures role mapping based on group membership ('example-group' grants Editor, others Viewer), lists allowed groups and domains, and sets security options like TLS verification, PKCE, and refresh token usage.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[auth.gitlab]\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_id = YOUR_GITLAB_APPLICATION_ID\nclient_secret = YOUR_GITLAB_APPLICATION_SECRET\nscopes = openid email profile\nauth_url = https://gitlab.com/oauth/authorize\ntoken_url = https://gitlab.com/oauth/token\napi_url = https://gitlab.com/api/v4\nrole_attribute_path = contains(groups[*], 'example-group') && 'Editor' || 'Viewer'\nrole_attribute_strict = false\nallow_assign_grafana_admin = false\nallowed_groups = [\"admins\", \"software engineers\", \"developers/frontend\"]\nallowed_domains = mycompany.com mycompany.org\ntls_skip_verify_insecure = false\nuse_pkce = true\nuse_refresh_token = true\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Query Builder Mode Example\nDESCRIPTION: Example displaying the structure of a PostgreSQL query built using the visual Builder mode. The builder supports table selection, data operations, column filtering, grouping, ordering and limit configurations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT column\nFROM table\nWHERE condition\nGROUP BY column\nORDER BY column ASC/DESC\nLIMIT 50\n```\n\n----------------------------------------\n\nTITLE: Example Trace JSON Structure for Tempo\nDESCRIPTION: This example demonstrates the structure of a JSON trace file that can be uploaded to Grafana Tempo. It contains a single trace with resource attributes, instrumentation library spans, and details including trace ID, span ID, timestamps, and HTTP request information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/traces-in-grafana/json-trace-file.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batches\": [\n    {\n      \"resource\": {\n        \"attributes\": [\n          { \"key\": \"service.name\", \"value\": { \"stringValue\": \"db\" } },\n          { \"key\": \"job\", \"value\": { \"stringValue\": \"tns/db\" } },\n          { \"key\": \"opencensus.exporterversion\", \"value\": { \"stringValue\": \"Jaeger-Go-2.22.1\" } },\n          { \"key\": \"host.name\", \"value\": { \"stringValue\": \"63d16772b4a2\" } },\n          { \"key\": \"ip\", \"value\": { \"stringValue\": \"0.0.0.0\" } },\n          { \"key\": \"client-uuid\", \"value\": { \"stringValue\": \"39fb01637a579639\" } }\n        ]\n      },\n      \"instrumentationLibrarySpans\": [\n        {\n          \"instrumentationLibrary\": {},\n          \"spans\": [\n            {\n              \"traceId\": \"AAAAAAAAAABguiq7RPE+rg==\",\n              \"spanId\": \"cmteMBAvwNA=\",\n              \"parentSpanId\": \"OY8PIaPbma4=\",\n              \"name\": \"HTTP GET - root\",\n              \"kind\": \"SPAN_KIND_SERVER\",\n              \"startTimeUnixNano\": \"1627471657255809000\",\n              \"endTimeUnixNano\": \"1627471657256268000\",\n              \"attributes\": [\n                { \"key\": \"http.status_code\", \"value\": { \"intValue\": \"200\" } },\n                { \"key\": \"http.method\", \"value\": { \"stringValue\": \"GET\" } },\n                { \"key\": \"http.url\", \"value\": { \"stringValue\": \"/\" } },\n                { \"key\": \"component\", \"value\": { \"stringValue\": \"net/http\" } }\n              ],\n              \"status\": {}\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax Example for Accessing Vault K/V Secrets\nDESCRIPTION: Demonstrates the Grafana variable expansion syntax (`$__vault{<argument>}`) for retrieving a value from a Vault Key/Value (version 2) secrets engine. The argument specifies the engine (`kv`), the secret path (`secret/grafana/smtp`), and the field name (`username`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n$__vault{kv:secret/grafana/smtp:username}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Chrome/Chromium Binary - JSON\nDESCRIPTION: Configures rendering.chromeBin in JSON to set a custom location for the Chrome/Chromium browser binary used for image rendering. Ensures the binary is accessible to the rendering service process and compatible with Grafana image rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"chromeBin\": \"/usr/bin/chromium-browser\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiSelect Component for Multiple Selections with React and @grafana/ui (TSX)\nDESCRIPTION: Shows how to use the MultiSelect component to handle multiple selections at once in React. Requires MultiSelect from @grafana/ui and React useState. Inputs are options and selected values array; output is an updated selected values array passed to onChange handler. Useful for UIs requiring multi-value selection by the user.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiSelect } from '@grafana/ui';\n\nconst multiSelect = () => {\n  const [value, setValue] = useState<Array<SelectableValue<string>>>([]);\n\n  return (\n    <>\n      <MultiSelect\n        options={options}\n        value={value}\n        onChange={(v) => {\n          setValue(v);\n        }}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Deployment to Specific Revision with Kubectl (Bash)\nDESCRIPTION: Uses `kubectl rollout undo` to revert a deployment ('grafana') in a given namespace ('my-grafana') to a previous state recorded in its revision history. The `--to-revision` flag specifies the target revision number (e.g., 1) to roll back to.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout undo deployment grafana --to-revision=1 --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Rule via Grafana HTTP API (HTTP)\nDESCRIPTION: This HTTP request demonstrates how to create a new alert rule by sending a POST request to the /api/v1/provisioning/alert-rules endpoint. The payload includes all mandatory fields such as title, ruleGroup, folderUID, alert conditions, data queries, and organizational context. Dependencies include an active Grafana instance with the appropriate alerting settings and a valid API token supplied in the Authorization header. The request should use application/json for both Accept and Content-Type headers, and responds with a standard confirmation and created resource attributes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/v1/provisioning/alert-rules\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"title\": \"TEST-API_1\",\n  \"ruleGroup\": \"API\",\n  \"folderUID\": \"SET_FOLDER_UID\",\n  \"noDataState\": \"OK\",\n  \"execErrState\": \"OK\",\n  \"for\": \"5m\",\n  \"orgId\": 1,\n  \"uid\": \"\",\n  \"condition\": \"B\",\n  \"annotations\": {\n    \"summary\": \"test_api_1\"\n  },\n  \"labels\": {\n    \"API\": \"test1\"\n  },\n  \"data\": [\n    {\n      \"refId\": \"A\",\n      \"queryType\": \"\",\n      \"relativeTimeRange\": {\n        \"from\": 600,\n        \"to\": 0\n      },\n      \"datasourceUid\": \"XXXXXXXXX-XXXXXXXXX-XXXXXXXXXX\",\n      \"model\": {\n        \"expr\": \"up\",\n        \"hide\": false,\n        \"intervalMs\": 1000,\n        \"maxDataPoints\": 43200,\n        \"refId\": \"A\"\n      }\n    },\n    {\n      \"refId\": \"B\",\n      \"queryType\": \"\",\n      \"relativeTimeRange\": {\n        \"from\": 0,\n        \"to\": 0\n      },\n      \"datasourceUid\": \"-100\",\n      \"model\": {\n        \"conditions\": [\n          {\n            \"evaluator\": {\n              \"params\": [6],\n              \"type\": \"gt\"\n            },\n            \"operator\": {\n              \"type\": \"and\"\n            },\n            \"query\": {\n              \"params\": [\"A\"]\n            },\n            \"reducer\": {\n              \"params\": [],\n              \"type\": \"last\"\n            },\n            \"type\": \"query\"\n          }\n        ],\n        \"datasource\": {\n          \"type\": \"__expr__\",\n          \"uid\": \"-100\"\n        },\n        \"hide\": false,\n        \"intervalMs\": 1000,\n        \"maxDataPoints\": 43200,\n        \"refId\": \"B\",\n        \"type\": \"classic_conditions\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Logout for Keycloak in Grafana (INI)\nDESCRIPTION: Grafana configuration setting to enable Single Logout (SLO) with Keycloak. The `signout_redirect_url` points to the Keycloak logout endpoint and includes a `post_logout_redirect_uri` parameter to redirect the user back to the Grafana login page after successful Keycloak logout. The redirect URI needs to be URL-encoded.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nsignout_redirect_url = https://<PROVIDER_DOMAIN>/auth/realms/<REALM_NAME>/protocol/openid-connect/logout?post_logout_redirect_uri=https%3A%2F%2F<GRAFANA_DOMAIN>%2Flogin\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in TypeScript\nDESCRIPTION: Shows the correct way to name variables using camelCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconst QueryTargets = [];\n// bad\nconst query_targets = [];\n\n// good\nconst queryTargets = [];\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Systemd Service Unit in Ini\nDESCRIPTION: Defines the systemd service configuration for Grafana within the `/etc/systemd/system/grafana-server.service` file. It specifies the service description, dependencies (`After=network.target`), the user (`grafana`) and group (`users`) to run as, the command to start the server (`ExecStart`) including paths to the binary, config file, and homepath, restart policy (`Restart=on-failure`), and the target to enable it (`WantedBy=multi-user.target`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Grafana Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=grafana\nGroup=users\nExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Proxy in Grafana.ini\nDESCRIPTION: Configuration settings for enabling and customizing auth proxy authentication in Grafana's configuration file. Controls behavior like auto sign-up, header names, sync intervals, and IP whitelisting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[auth.proxy]\n# Defaults to false, but set to true to enable this feature\nenabled = true\n# HTTP Header name that will contain the username or email\nheader_name = X-WEBAUTH-USER\n# HTTP Header property, defaults to `username` but can also be `email`\nheader_property = username\n# Set to `true` to enable auto sign up of users who do not exist in Grafana DB. Defaults to `true`.\nauto_sign_up = true\n# Define cache time to live in minutes\n# If combined with Grafana LDAP integration it is also the sync interval\n# Set to 0 to always fetch and sync the latest user data\nsync_ttl = 15\n# Limit where auth proxy requests come from by configuring a list of IP addresses.\n# This can be used to prevent users spoofing the X-WEBAUTH-USER header.\n# Example `whitelist = 192.168.1.1, 192.168.1.0/24, 2001::23, 2001::0/120`\nwhitelist =\n# Optionally define more headers to sync other user attributes\n# Example `headers = Name:X-WEBAUTH-NAME Role:X-WEBAUTH-ROLE Email:X-WEBAUTH-EMAIL Groups:X-WEBAUTH-GROUPS`\nheaders =\n# Non-ASCII strings in header values are encoded using quoted-printable encoding\n;headers_encoded = false\n# Check out docs on this for more details on the below setting\nenable_login_token = false\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS Certificate and Key Files - JSON\nDESCRIPTION: Assigns paths to the SSL/TLS certificate and key in the JSON config for the image renderer. These paths are used to initialize the HTTPS server. Both 'certFile' and 'certKey' are required for HTTPS mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"certFile\": \"./path/to/cert\",\n    \"certKey\": \"./path/to/key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML SSO Settings using Grafana Terraform Provider\nDESCRIPTION: Demonstrates configuring Grafana SAML SSO settings using the `grafana_sso_settings` Terraform resource (available in preview). It mirrors the INI configuration example, setting parameters like certificate paths, IdP metadata, assertion attributes, role mappings, organization mappings, and allowed organizations via Terraform HCL. Requires the Grafana Terraform provider v2.17.0+ and the `ssoSettingsSAML` feature toggle in Grafana v11.1+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_18\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"saml_sso_settings\" {\n  provider_name = \"saml\"\n  saml_settings {\n    name                       = \"SAML\"\n    auto_login                 = false\n    certificate_path           = \"/path/to/certificate.cert\"\n    private_key_path           = \"/path/to/private_key.pem\"\n    idp_metadata_path          = \"/my/metadata.xml\"\n    max_issue_delay            = \"90s\"\n    metadata_valid_duration    = \"48h\"\n    assertion_attribute_name   = \"displayName\"\n    assertion_attribute_login  = \"mail\"\n    assertion_attribute_email  = \"mail\"\n    assertion_attribute_groups = \"Group\"\n    assertion_attribute_role   = \"Role\"\n    assertion_attribute_org    = \"Org\"\n    role_values_editor         = \"editor, developer\"\n    role_values_admin          = \"admin, operator\"\n    role_values_grafana_admin  = \"superadmin\"\n    org_mapping                = \"Engineering:2:Editor, Engineering:3:Viewer, Sales:3:Editor, *:1:Editor\"\n    allowed_organizations      = \"Engineering, Sales\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Controlled Context Menu in React (JSX)\nDESCRIPTION: This snippet demonstrates how to use the ContextMenu component in a controlled manner by specifying the menu's location (x, y), the items to display, and providing an onClose handler. It requires the ContextMenu component from the local module. The menu structure supports nested items and expects the parent to manage open/close state. The component receives positional props and an items array—each item may include a nested items array. Returns a menu at the given coordinates when rendered.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ContextMenu/ContextMenu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ContextMenu\n  x={10}\n  y={11}\n  onClose={() => {}}\n  items={[{ label: 'Test', items: [{ label: 'First' }, { label: 'Second' }] }]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Assigned Managed Identity in Grafana Server Configuration\nDESCRIPTION: INI configuration for enabling a specific user-assigned Managed Identity in Grafana's server configuration. Includes the client ID of the user-assigned identity to be used instead of the default system-assigned identity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[azure]\nmanaged_identity_enabled = true\nmanaged_identity_client_id = USER_ASSIGNED_IDENTITY_CLIENT_ID\n```\n\n----------------------------------------\n\nTITLE: Displaying Box Component Property Table in Storybook MDX\nDESCRIPTION: Renders the ArgTypes table for the Box component within Storybook documentation, allowing users to view all configurable props and their types. Depends on Storybook's ArgTypes rendering component and the Box component's prop definitions. The output is a dynamic prop table that updates as Box's type annotations change.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={Box} />\n```\n\n----------------------------------------\n\nTITLE: Organization Role Mapping Configuration for GitLab Integration\nDESCRIPTION: Configuration example showing how to map GitLab group memberships to specific organization roles in Grafana. This configuration grants different roles in multiple Grafana organizations based on GitLab group membership.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\norg_mapping = group-1:org_foo:Viewer groupd-1:org_bar:Editor *:org_baz:Editor\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer Role for Reports Permissions using Bash, cURL, and jq (bash)\nDESCRIPTION: This bash script enables the 'basic_viewer' Grafana role to create and manage reports by programmatically adding the required permissions using cURL, jq, and the HTTP API. The script fetches the current role, strips metadata, increments the version, appends new permissions (create, read, write, send for reports), and uploads the updated configuration. Inputs include endpoint, Bearer token, and jq; output is a modified role granting the new capabilities. Be cautious: missing jq or malformed API details will result in errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the role, modify it to add the desired permissions and increment its version\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \\\n  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \\\n  jq '.permissions += [{\"action\": \"reports:create\"}, {\"action\": \"reports:read\", \"scope\": \"reports:*\"}, {\"action\": \"reports:write\", \"scope\": \"reports:*\"}, {\"action\": \"reports:send\", \"scope\": \"reports:*\"}]' > /tmp/basic_viewer.json\n\n# Update the role\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \\\n  -X PUT-d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta OIDC Authentication in Grafana - INI Configuration - ini\nDESCRIPTION: This snippet demonstrates a minimally functioning [auth.okta] INI configuration section for enabling Okta OIDC authentication in Grafana. It specifies required parameters like client_id, scope, URLs for auth, token, and user info, and role/group mapping attributes. To use, copy this section into your Grafana config file, replacing placeholder values (e.g., <client id>) with your actual Okta details. The configuration enables sign-up, associates Okta groups and custom attributes, and enforces strict role assignment; all fields must match your Okta app and Grafana needs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.okta]\nname = Okta\nicon = okta\nenabled = true\nallow_sign_up = true\nclient_id = <client id>\nscopes = openid profile email offline_access\nauth_url = https://<okta tenant id>.okta.com/oauth2/v1/authorize\ntoken_url = https://<okta tenant id>.okta.com/oauth2/v1/token\napi_url = https://<okta tenant id>.okta.com/oauth2/v1/userinfo\nrole_attribute_path = grafana_role\nrole_attribute_strict = true\nallowed_groups = \"Example::DevOps\" \"Example::Dev\" \"Example::QA\"\n```\n\n----------------------------------------\n\nTITLE: Updating Folder Permissions in Grafana HTTP API\nDESCRIPTION: This HTTP POST request updates permissions for a folder. It removes existing permissions if not included in the request. Requires 'folders.permissions:write' action with 'folders:*' scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_permissions.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/folders/nErXDvCkzz/permissions\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n{\n  \"items\": [\n    {\n      \"role\": \"Viewer\",\n      \"permission\": 1\n    },\n    {\n      \"role\": \"Editor\",\n      \"permission\": 2\n    },\n    {\n      \"teamId\": 1,\n      \"permission\": 1\n    },\n    {\n      \"userId\": 11,\n      \"permission\": 4\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Required Field with Synchronous Custom Validation (JavaScript/JSX)\nDESCRIPTION: Demonstrates defining field validation with both required errors and custom (synchronous) logic, returning custom error messages based on validation type. Useful for differentiating error reporting within forms. Depends on react-hook-form’s validation system and Form, Field, Input UI elements.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Form ...>{\n  ({register, errors}) => (\n    <>\n      <Field invalid={!!errors.name} error={errors.name?.message }\n      <Input\n        defaultValue={default.name}\n        {...register(\"name\", {\n          required: 'Name is required',\n          validation: v => {\n            return v !== 'John' && 'Name must be John'\n          },\n        )}\n      />\n    </>\n  )}\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Data Source Caching Settings (Plaintext)\nDESCRIPTION: Defines the `datasources.caching:write` permission action required to update data source query caching settings in Grafana. This capability is linked to data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.caching:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Partially Updating Current User Preferences via HTTP PATCH - HTTP\nDESCRIPTION: Allows partial update of one or more user preference fields using PATCH, without changing other preference settings. Only the provided fields, e.g., theme, will be updated. Requires Bearer token and JSON body containing only preferences to update. Use when only some aspects of a user's preferences need to change without resetting unspecified values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/user/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"theme\": \"dark\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning RBAC Roles and Team Assignments - Grafana YAML Example\nDESCRIPTION: This YAML code demonstrates how to define and provision custom RBAC roles, update or remove existing roles, and assign or revoke role assignments to teams within Grafana. Dependencies include access to the provisioning directory of a Grafana Enterprise or Cloud server. Parameters include role names, UIDs, permissions, team names, and optional flags for global scope and deletion. Input is a YAML file placed in provisioning/access-control/, and the output is the synchronized RBAC configuration upon reload. Limitations: all fields must conform to Grafana provisioning schema and custom roles require the correct version and orgId. Comments are provided inline.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-grafana-provisioning/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\n# config file version\\napiVersion: 2\\n\\n# <list> list of roles to insert/update/delete\\nroles:\\n  # <string, required> name of the role you want to create or update. Required.\\n  - name: 'custom:users:writer'\\n    # <string> uid of the role. Has to be unique for all orgs.\\n    uid: customuserswriter1\\n    # <string> description of the role, informative purpose only.\\n    description: 'Create, read, write users'\\n    # <int> version of the role, Grafana will update the role when increased.\\n    version: 2\\n    # <int> org id. Defaults to Grafana's default if not specified.\\n    orgId: 1\\n    # <list> list of the permissions granted by this role.\\n    permissions:\\n      # <string, required> action allowed.\\n      - action: 'users:read'\\n        #<string> scope it applies to.\\n        scope: 'users:*'\\n      - action: 'users:write'\\n        scope: 'users:*'\\n      - action: 'users:create'\\n  - name: 'custom:global:users:reader'\\n    # <bool> overwrite org id and creates a global role.\\n    global: true\\n    # <string> state of the role. Defaults to 'present'. If 'absent', role will be deleted.\\n    state: 'absent'\\n    # <bool> force deletion revoking all grants of the role.\\n    force: true\\n  - uid: 'basic_editor'\\n    # <bool> always apply the specified changes to the role, regardless of the role version in the database\\n    overrideRole: true\\n    global: true\\n    # <list> list of roles to copy permissions from.\\n    from:\\n      - uid: 'basic_editor'\\n        global: true\\n      - name: 'fixed:users:writer'\\n        global: true\\n    # <list> list of the permissions to add/remove on top of the copied ones.\\n    permissions:\\n      - action: 'users:read'\\n        scope: 'users:*'\\n      - action: 'users:write'\\n        scope: 'users:*'\\n        # <string> state of the permission. Defaults to 'present'. If 'absent', the permission will be removed.\\n        state: absent\\n\\n# <list> list role assignments to teams to create or remove.\\nteams:\\n  # <string, required> name of the team you want to assign roles to. Required.\\n  - name: 'Users writers'\\n    # <int> org id. Will default to Grafana's default if not specified.\\n    orgId: 1\\n    # <list> list of roles to assign to the team\\n    roles:\\n      # <string> uid of the role you want to assign to the team.\\n      - uid: 'customuserswriter1'\\n        # <int> org id. Will default to Grafana's default if not specified.\\n        orgId: 1\\n      # <string> name of the role you want to assign to the team.\\n      - name: 'fixed:users:writer'\\n        # <bool> overwrite org id to specify the role is global.\\n        global: true\\n        # <string> state of the assignment. Defaults to 'present'. If 'absent', the assignment will be revoked.\\n        state: absent\n```\n\n----------------------------------------\n\nTITLE: Executing a SQL Server Stored Procedure with Grafana Time Range Variables\nDESCRIPTION: This SQL script demonstrates how to execute the `sp_test_datetime` stored procedure within a Grafana MS SQL data source query. It declares two `datetime` variables, `@from` and `@to`, and assigns them values derived from Grafana's built-in time range variables `$__timeFrom()` and `$__timeTo()`. These variables are then passed as parameters to the `EXEC` statement, running the stored procedure with the dashboard's currently selected time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDECLARE\n  @from datetime = $__timeFrom(),\n  @to datetime = $__timeTo()\n\nEXEC dbo.sp_test_datetime @from, @to\n\n```\n\n----------------------------------------\n\nTITLE: Interpolating Variables with 't' Function in JavaScript\nDESCRIPTION: Illustrates how to use the `t` function for translating strings that require variable interpolation. The third argument is an object containing the variables (e.g., `{ username }`) which correspond to placeholders (e.g., `{{ username }}`) in the default string. Requires importing `t` from `app/core/internationalization`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst placeholder = t('page.greeting', 'Hello {{ username }}', { username });\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Job for Node Exporter (YAML)\nDESCRIPTION: This YAML snippet configures a Prometheus scrape job named 'node'. It specifies the target endpoint for Node Exporter, assumed to be running locally on 'localhost:9100', from which Prometheus should scrape metrics. This configuration should be added to the 'scrape_configs' section of the 'prometheus.yml' file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# A scrape configuration containing exactly one endpoint to scrape from Node exporter running on a host:\nscrape_configs:\n    # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n    - job_name: 'node'\n\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n\n      static_configs:\n      - targets: ['localhost:9100']\n```\n\n----------------------------------------\n\nTITLE: Describing /apis/query.grafana.app Workflow Using Mermaid Diagrams (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram details the request/response flow for the /apis/query.grafana.app endpoint in single-tenant Grafana. It exposes the sequence of API parsing, dependency calculation, concurrent datasource querying (with access verification), expression execution, result validation, and final return. Rendered using Mermaid and meant for documentation purposes, it relies on the Mermaid processor for visualization and demonstrates interactions involving query parsing, access control, and processing of query logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/registry/apis/query/README.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\\n    autonumber\\n    actor User as User or Process\\n    participant api as /apis/query.grafana.app\\n    participant ds as Datasource<br/>Handler/Plugin\\n    participant db as Storage<br/> (SQL)\\n    participant expr as Expression<br/>Engine\\n\\n    User->>api: POST Query\\n    api->>api: Parse queries\\n    api->>api: Calculate dependencies\\n    loop Each datasource (concurrently)\\n        api->>ds: QueryData\\n        ds->>ds: Verify user access\\n        ds->>db: Get settings <br> and secrets\\n    end\\n    loop Each expression\\n        api->>expr: Execute\\n    end\\n    api->>api: Verify ResultExpectations\\n    api->>User: return results\n```\n\n----------------------------------------\n\nTITLE: Using Vault Secrets for SMTP and Database Configuration in Grafana INI\nDESCRIPTION: This partial `grafana.ini` example demonstrates using the `$__vault{}` syntax to fetch SMTP and database credentials from Hashicorp Vault. It retrieves SMTP host, username, and password from a K/V secret and database username and password from a database secret.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[smtp]\nenabled = true\nhost = $__vault{kv:secret/grafana/smtp:hostname}:587\nuser = $__vault{kv:secret/grafana/smtp:username}\npassword = $__vault{kv:secret/grafana/smtp:password}\n\n[database]\ntype = mysql\nhost = mysqlhost:3306\nname = grafana\nuser = $__vault{database:database/creds/grafana:username}\npassword = $__vault{database:database/creds/grafana:password}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Dashboard by UID in HTTP/JSON\nDESCRIPTION: Example of retrieving a dashboard using its unique identifier (UID). This request sends a GET to /api/dashboards/uid/:uid endpoint with the dashboard's UID. The response includes the complete dashboard definition and metadata including folder information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/uid/cIBgcSjkk HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key using OpenSSL (Bash)\nDESCRIPTION: Uses the `openssl genrsa` command to create a 2048-bit RSA private key file named `grafana.key` located in `/etc/grafana/`. This key is essential for decrypting HTTPS traffic when using a self-signed certificate. Requires `openssl` to be installed and `sudo` privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl genrsa -out /etc/grafana/grafana.key 2048\n```\n\n----------------------------------------\n\nTITLE: Mapping Grafana Roles Based on User Email (INI)\nDESCRIPTION: This INI configuration snippet demonstrates using a JMESPath expression in `role_attribute_path` to conditionally assign Grafana roles. If the user's email obtained from the OAuth token matches 'admin@company.com', they are assigned the 'Admin' role; otherwise, they receive the 'Viewer' role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = email=='admin@company.com' && 'Admin' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Querying Annotations via Grafana HTTP API - HTTP\nDESCRIPTION: Demonstrates how to retrieve a list of annotations from the Grafana API using a GET request. Requires appropriate permissions and may include query parameters such as 'from', 'to', 'tags', and 'limit' to filter results. Expects an array of annotation objects in the JSON response, with fields such as id, dashboardUID, panelId, time, text, and tags.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/annotations?from=1506676478816&to=1507281278816&tags=tag1&tags=tag2&limit=100 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Using the index() Function for Dynamic Value and Label Access - Go Template - Markdown\nDESCRIPTION: This example demonstrates how to use Go template's index() function in Grafana to dynamically access query values and labels by key ('B' and 'instance', respectively). The dependencies are Grafana's Go templating engine and $values/$labels populated by query data. 'index $values \"B\"' retrieves the value for Ref ID 'B', and 'index $labels \"instance\"' gets the label named 'instance'. Useful when keys are dynamic or variable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_4\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ index $values \"B\" }} CPU usage for {{ index $labels \"instance\" }} over the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Manually Starting Grafana Server Binary - Shell\nDESCRIPTION: Runs the Grafana server directly from the installed binary, primarily to initialize its data directory before daemonizing via systemd. Input: None. Output: Grafana server launches in terminal. Press CTRL+C to stop. Run as grafana user if possible for correct file permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Filtering Loki Logs by Substring with LogQL in Grafana Explore\nDESCRIPTION: This LogQL query filters logs from `/var/log/tns-app.log` to show only lines containing the substring 'error'. It is executed within Grafana Explore using a Loki data source to help identify specific error occurrences after triggering an error in the sample application.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_6\n\nLANGUAGE: logql\nCODE:\n```\n{filename=\"/var/log/tns-app.log\"} |= \"error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-Out Redirect URL for Generic OAuth (Bash)\nDESCRIPTION: Shows the `signout_redirect_url` configuration setting within the `[auth.generic_oauth]` section of the Grafana configuration file. Setting a URL here will redirect users to that specific address after they sign out of Grafana, often used to trigger sign-out from the OAuth provider as well. The example shows the parameter without a value assigned.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n[auth.generic_oauth]\nsignout_redirect_url =\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana API Keys (Plaintext)\nDESCRIPTION: Defines the `apikeys:delete` permission action required to delete API keys in Grafana. This is linked to the `apikeys:*` and `apikeys:id:*` scopes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`apikeys:delete`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`apikeys:*`</li><li>`apikeys:id:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Response for Listing Roles Assigned to a Service Account (HTTP)\nDESCRIPTION: Example response for the GET request to list roles assigned to a service account. It includes role details such as version, UID, name, and description.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n[\n    {\n        \"version\": 4,\n        \"uid\": \"6dNwJq57z\",\n        \"name\": \"fixed:reports:writer\",\n        \"displayName\": \"Report writer\",\n        \"description\": \"Create, read, update, or delete all reports and shared report settings.\",\n        \"group\": \"Reports\",\n        \"updated\": \"2021-11-19T10:48:00+01:00\",\n        \"created\": \"2021-11-19T10:48:00+01:00\",\n        \"global\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Capture for Alerts - Grafana INI\nDESCRIPTION: Describes the `[unified_alerting.screenshots]` section for enabling screenshots in notifications, setting timeouts, and controlling concurrency. Dependencies include a remote HTTP image rendering service for screenshot capability. Key parameters are `capture` (enables feature), `capture_timeout` (max duration), `max_concurrent_screenshots` (parallel jobs), and `upload_external_image_storage` (disk vs. cloud storage behavior). Timeouts must be in seconds and less than all alert evaluation intervals for optimal performance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting.screenshots]\n# Enable screenshots in alert notifications\ncapture = true\n# Screenshot capture timeout (max 30s, should be less than evaluation intervals)\ncapture_timeout = 20s\n# Max concurrent screenshots across all alerts\nmax_concurrent_screenshots = 4\n# Whether to upload screenshots to external storage (Azure, S3, GCS), false = local disk upload_external_image_storage = false\n\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Grafana Enterprise License - kubectl Bash\nDESCRIPTION: Generates a generic Kubernetes secret named 'ge-license' from a local 'license.jwt' file, which contains the Grafana Enterprise license. This secret should be referenced in the Grafana Enterprise deployment for license activation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic ge-license --from-file=/path/to/your/license.jwt\n\n```\n\n----------------------------------------\n\nTITLE: Using FieldSet to Group Form Elements in React/JSX\nDESCRIPTION: This JSX example demonstrates how to utilize the `FieldSet` component from `@grafana/ui` to group related form inputs within a `Form`. It showcases structuring a form with multiple fieldsets, each identified by a `label` prop (e.g., \"Details\", \"Preferences\"), which renders as a legend. Dependencies include React and components like `Form`, `Field`, `Input`, and `Button` from `@grafana/ui`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldSet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FieldSet } from '@grafana/ui';\n\n<Form onSubmit={() => console.log('Submit')}>\n  {() => (\n    <>\n      <FieldSet label=\"Details\">\n        <Field label=\"Name\">\n          <Input name=\"name\" />\n        </Field>\n        <Field label=\"Email\">\n          <Input name=\"email\" />\n        </Field>\n      </FieldSet>\n\n      <FieldSet label=\"Preferences\">\n        <Field label=\"Color\">\n          <Input name=\"color\" />\n        </Field>\n        <Field label=\"Font size\">\n          <Input name=\"fontsize\" />\n        </Field>\n      </FieldSet>\n      <Button variant=\"primary\">Save</Button>\n    </>\n  )}\n</Form>;\n```\n\n----------------------------------------\n\nTITLE: Updating Data Source Cache Configuration via Grafana HTTP API (HTTP)\nDESCRIPTION: This snippet illustrates how to update the cache configuration for a specific Grafana data source using a POST request to `/api/datasources/:dataSourceUID/cache`. It requires the `datasources.caching:write` permission. The request body is a JSON object specifying settings like `enabled`, `useDefaultTTL`, `ttlQueriesMs`, and `ttlResourcesMs`. The example shows the request format including the JSON payload and the expected successful JSON response reflecting the updated settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/jZrmlLCGka/cache HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": true,\n   \"useDefaultTTL\": false,\n   \"ttlQueriesMs\": 60000,\n   \"ttlResourcesMs\": 300000,\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n   \"message\": \"Data source cache settings updated\",\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": true,\n   \"useDefaultTTL\": false,\n   \"ttlQueriesMs\": 60000,\n   \"ttlResourcesMs\": 300000,\n   \"defaultTTLMs\": 300000,\n   \"created\": \"2023-04-21T11:49:22-04:00\",\n   \"updated\": \"2023-04-24T17:03:40-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Database Connection via Environment Variables on ECS\nDESCRIPTION: Sets environment variables within an AWS ECS task definition to configure Grafana Enterprise's connection to an external database. This is crucial for high availability setups. Replace bracketed placeholders with actual database credentials and connection details (type, host, port, name, user, password).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-ecs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGF_DATABASE_TYPE=[database type]\nGF_DATABASE_HOST=[database address and port]\nGF_DATABASE_NAME=[database name]\nGF_DATABASE_USER=[database username]\nGF_DATABASE_PASSWORD=[database password]\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Self-Signed Certificate and Key (Bash)\nDESCRIPTION: Uses `chown` to set the owner and group of the certificate (`grafana.crt`) and key (`grafana.key`) files to `grafana:grafana`. Uses `chmod` to set the file permissions to read-only for the owner (`400`), enhancing security. Requires `sudo` privileges and the existence of the `grafana` user/group.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown grafana:grafana /etc/grafana/grafana.crt\nsudo chown grafana:grafana /etc/grafana/grafana.key\nsudo chmod 400 /etc/grafana/grafana.key /etc/grafana/grafana.crt\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Helm Repository - Helm CLI - Bash\nDESCRIPTION: This snippet demonstrates how to add the official Grafana Helm repository using the Helm command-line tool. It requires Helm to be installed and the syntax follows `helm repo add <DESIRED-NAME> <HELM-REPO-URL>`. The command registers the repository for later chart installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add grafana https://grafana.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables with Double Quotes\nDESCRIPTION: Shows the `:doublequote` format option. This formats single or multi-valued variables into a comma-separated string where each value is enclosed in double quotes (`\"`) and internal double quotes are escaped (`\\\"`). The example shows `['test1', 'test2']` interpolated as `'\"test1\",\"test2\"'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:doublequote}'\nInterpolation result: '\"test1\",\"test2\"'\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Dashboard via POST Request in HTTP/JSON\nDESCRIPTION: Example of updating an existing dashboard using the Dashboard API. This request sends a POST to /api/dashboards/db with a JSON payload containing the dashboard ID, updated title, and version information. The dashboard will be moved to the specified folder and updated with the provided properties.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/db HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"dashboard\": {\n    \"id\": 1,\n    \"title\": \"Production Overview Updated\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"schemaVersion\": 16,\n    \"version\": 1,\n    \"refresh\": \"25s\"\n  },\n  \"folderUid\": \"l3KqBxCMz\",\n  \"message\": \"Made changes to xyz\",\n  \"overwrite\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Registration of Remote Services in custom.ini (INI)\nDESCRIPTION: This INI configuration snippet sets up Grafana for auto-registering remote services defined in a YAML file upon startup. The `apiservice_ca_bundle_file` specifies the Certificate Authority bundle used to verify the TLS certificates of the remote services (note the comment indicating it's primarily for non-dev mode). The `remote_services_file` points to a YAML file (`./pkg/services/apiserver/aggregator/examples/autoregister/apiservices.yaml`) that contains the definitions of the remote services to be registered automatically.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n; in custom.ini\n; the bundle is only used when not in dev mode\napiservice_ca_bundle_file = ./data/grafana-aggregator/ca.crt\n\nremote_services_file = ./pkg/services/apiserver/aggregator/examples/autoregister/apiservices.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a Data Source by ID (Deprecated) via Grafana API - HTTP\nDESCRIPTION: This DELETE example demonstrates how to remove a data source by its numeric ID using the deprecated endpoint. Requires bearer token authentication and the datasourceId in the URL path. No request body is required. Successful response returns a confirmation JSON message. Note: Deprecated in recent Grafana versions; prefer using UID or name endpoints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/datasources/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\"message\":\"Data source deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Storage Endpoint for Usage Insights (INI Configuration) - ini\nDESCRIPTION: This snippet provides an example of configuring Loki as the target for usage insights log export in the Grafana configuration file. Adjust the properties to match your Loki installation, including communication type ('grpc' or 'http'), URL (host:port), TLS setting, and optionally the tenant ID for multi-tenant Loki setups. Dependencies include a running Loki instance and correct values in the Grafana config file. Inputs are protocol, URL, TLS setting, and tenant ID; output is successfully exported logs to your Loki backend.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[usage_insights.export.storage.loki]\n# Set the communication protocol to use with Loki (can be grpc or http)\ntype = grpc\n# Set the address for writing logs to Loki (format must be host:port)\nurl = localhost:9095\n# Defaults to true. If true, it establishes a secure connection to Loki\ntls = true\n# Set the tenant ID for Loki communication, which is disabled by default.\n# The tenant ID is required to interact with Loki running in multi-tenant mode.\ntenant_id =\n\n```\n\n----------------------------------------\n\nTITLE: Persisting Open File Limit Configuration (Bash)\nDESCRIPTION: Appends the command `ulimit -S -n $LIMIT` to the specified shell initialization file (`$INIT_FILE`), where `$LIMIT` is the desired file limit number (e.g., 4096). This ensures the limit is applied automatically whenever a new shell session starts, making the configuration persistent. The specific `$INIT_FILE` depends on the user's shell (e.g., `.bashrc` for bash, `.zshrc` for zsh).\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\necho ulimit -S -n $LIMIT >> $INIT_FILE\n```\n\n----------------------------------------\n\nTITLE: Example Notification Policy Export Response - HTTP/YAML\nDESCRIPTION: This snippet illustrates an example HTTP 200 OK response for exporting notification policies. The payload uses YAML formatting to structure alert notification groupings, including organization ID, receiver settings, grouping criteria, route definitions, object matchers, and mute time intervals. The 'Content-Type: text/yaml' header indicates payload format. The response schema aids clients in parsing and applying policies, with routes and matchers organizing alerting flows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: text/yaml\\n\\napiVersion: 1\\npolicies:\\n    - orgId: 1\\n      receiver: My Contact Email Point\\n      group_by:\\n        - grafana_folder\\n        - alertname\\n      routes:\\n        - receiver: My Contact Email Point\\n          object_matchers:\\n            - - monitor\\n              - =\\n              - testdata\\n          mute_time_intervals:\\n            - weekends\n```\n\n----------------------------------------\n\nTITLE: Adding a Query to Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet shows an example HTTP POST request to add a query to the Grafana query history. It requires a JSON body containing the `datasourceUid` and an array of `queries`. Authentication is handled via a Bearer token in the Authorization header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/query-history HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n{\n  \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n  \"queries\": [\n    {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PD8C576611E62080A\"\n        }\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring E-Mail Contact Point - YAML\nDESCRIPTION: Defines an SMTP/E-Mail contact point for alert notifications in Grafana. Requires recipient addresses; supports configuring single or multiple emails, message customization, and templated subjects. Key parameters allow for email content tailoring. Grafana sends alerts directly to the specified email(s) using this configuration; relies on a properly configured SMTP server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntype: email\\nsettings:\\n  # <string, required>\\n  addresses: me@example.com;you@example.com\\n  # <bool>\\n  singleEmail: false\\n  # <string>\\n  message: my optional message to include\\n  # <string>\\n  subject: |\\n    {{ template \\\"default.title\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Recording Audit Log for API Key Creation - Grafana - JSON\nDESCRIPTION: This snippet shows a full example of a Grafana audit log record generated when an API key is created. The JSON structure details the action, the targeted resources, request and result payloads, user metadata, and additional context such as the user agent and Grafana version. Inputs include HTTP request context and API operation details, while the output is a persisted structured log entry; dependencies are internal Grafana logging and authentication subsystems.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"create\",\n  \"resources\": [\n    {\n      \"id\": 1,\n      \"type\": \"api-key\"\n    }\n  ],\n  \"timestamp\": \"2021-11-12T22:12:36.144795692Z\",\n  \"user\": {\n    \"userId\": 1,\n    \"orgId\": 1,\n    \"orgRole\": \"Admin\",\n    \"username\": \"admin\",\n    \"isAnonymous\": false,\n    \"authTokenId\": 1\n  },\n  \"request\": {\n    \"body\": \"{\\\"name\\\":\\\"example\\\",\\\"role\\\":\\\"Viewer\\\",\\\"secondsToLive\\\":null}\"\n  },\n  \"result\": {\n    \"statusType\": \"success\",\n    \"statusCode\": 200,\n    \"responseBody\": \"{\\\"id\\\":1,\\\"name\\\":\\\"example\\\"}\"\n  },\n  \"resources\": [\n    {\n      \"id\": 1,\n      \"type\": \"api-key\"\n    }\n  ],\n  \"requestUri\": \"/api/auth/keys\",\n  \"ipAddress\": \"127.0.0.1:54652\",\n  \"userAgent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0\",\n  \"grafanaVersion\": \"8.3.0-pre\"\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming '_value' Column in Flux for Grafana Compatibility\nDESCRIPTION: This Flux `rename` function demonstrates a workaround to prevent Grafana from automatically interpreting the '_value' column as the primary time-series value, especially when it represents a calculated result like a difference rather than raw data. Renaming '_value' to a different name (e.g., 'something' or 'difference' as used in the primary example query) ensures Grafana processes the results correctly within its alerting or visualization panels. This is appended to a Flux query chain.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_10\n\nLANGUAGE: flux\nCODE:\n```\n |> rename(columns: {_value: \"something\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Organization Mapping with Mixed Org Names and IDs in Grafana INI\nDESCRIPTION: Provides an example of setting `assertion_attribute_org` and `org_mapping` in Grafana's SAML configuration. It demonstrates mapping users from 'Engineering' to the Grafana organization named 'ACME Corp' as Editor, and users from 'Sales' to Grafana Org ID 3 as Admin, using the 'Org' attribute from the IdP. This showcases mixing organization names and IDs in mappings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nassertion_attribute_org = Org\norg_mapping = [\"Engineering:ACME Corp:Editor\", \"Sales:3:Admin\"]\n```\n\n----------------------------------------\n\nTITLE: Provisioning CloudWatch Data Source Using Access and Secret Keys\nDESCRIPTION: YAML configuration for provisioning CloudWatch data source using explicit AWS access key and secret key authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: CloudWatch\n    type: cloudwatch\n    jsonData:\n      authType: keys\n      defaultRegion: eu-west-2\n    secureJsonData:\n      accessKey: '<your access key>'\n      secretKey: '<your secret key>'\n```\n\n----------------------------------------\n\nTITLE: Provisioning Loki Data Source in Grafana (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to provision a basic Loki data source in Grafana using the provisioning system. It sets up a Loki data source with proxy access and custom timeout and maxLines settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Loki\n    type: loki\n    access: proxy\n    url: http://localhost:3100\n    jsonData:\n      timeout: 60\n      maxLines: 1000\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure Monitor with App Registration (client secret) in YAML\nDESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure AD App Registration with client secret authentication. Includes required fields for the connection such as tenant ID, client ID, and client secret.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1 # config file version\n\ndatasources:\n  - name: Azure Monitor\n    type: grafana-azure-monitor-datasource\n    access: proxy\n    jsonData:\n      azureAuthType: clientsecret\n      cloudName: azuremonitor # See table below\n      tenantId: <tenant-id>\n      clientId: <client-id>\n      subscriptionId: <subscription-id> # Optional, default subscription\n    secureJsonData:\n      clientSecret: <client-secret>\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Boolean Configuration Values for Grafana GitHub OAuth\nDESCRIPTION: Illustrates the common boolean values `true` and `false` used as defaults or settings for various Grafana GitHub OAuth configuration options like `allow_sign_up`, `auto_login`, `role_attribute_strict`, `skip_org_role_sync`, `allow_assign_grafana_admin`, and `tls_skip_verify_insecure`. These flags enable or disable specific behaviors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_10\n\nLANGUAGE: boolean\nCODE:\n```\ntrue\n```\n\nLANGUAGE: boolean\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Tracing - Bash\nDESCRIPTION: Sets RENDERING_TRACING_URL to specify an OpenTelemetry (OTel) tracing collector URL for gathering tracing spans from the renderer. Enable for distributed tracing of rendering operations. Default is disabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_TRACING_URL=\"http://localhost:4318/v1/traces\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication with Bitbucket in Grafana (Bash Configuration)\nDESCRIPTION: This snippet is used to configure Grafana's Generic OAuth authentication to work with Bitbucket. Dependencies include a pre-created Bitbucket OAuth consumer with keys and a correctly set callback URL. The configuration block specifies Bitbucket endpoints for authentication, scopes, and maps team/workspace permissions by attribute path. Client ID and secret must match those from Bitbucket's OAuth consumer. This enables user authentication and mapping of Bitbucket workspaces to Grafana teams.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n[auth.generic_oauth]\nname = BitBucket\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_id = <client key>\nclient_secret = <client secret>\nscopes = account email\nauth_url = https://bitbucket.org/site/oauth2/authorize\ntoken_url = https://bitbucket.org/site/oauth2/access_token\napi_url = https://api.bitbucket.org/2.0/user\nteams_url = https://api.bitbucket.org/2.0/user/permissions/workspaces\nteam_ids_attribute_path = values[*].workspace.slug\nteam_ids =\nallowed_organizations =\nuse_refresh_token = true\n\n```\n\n----------------------------------------\n\nTITLE: Input Component Usage within Field for Forms - React JSX\nDESCRIPTION: This example shows how to use the Input component within a Field wrapper to enable labeling, description, and validation (via the 'required' attribute). Dependencies are the Field and Input components. The 'label' and 'description' props provide user guidance, while 'required' ensures the input must be completed before form submission. This composition is intended for use in forms requiring clear instruction and basic validation, returning a labeled input and triggering standard HTML validation on submission.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/Input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\\\"Important information\\\" description=\\\"This information is very important, so you really need to fill it in\\\">\\n  <Input name=\\\"importantInput\\\" required />\\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Aligning LDAP Search Filter and Username Attribute in Grafana (TOML/Config)\nDESCRIPTION: Provides an example configuration snippet in TOML format demonstrating how to set the `search_filter` and `servers.attributes.username` to the same LDAP attribute (e.g., `sAMAccountName`) within the `[[servers]]` block. This alignment is crucial for active LDAP synchronization to function correctly and prevent user session termination. Requires Grafana Enterprise or Cloud with active sync enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/enhanced-ldap/index.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[servers]]\nsearch_filter = \"(sAMAccountName=%s)\"\n\n[servers.attributes]\nusername  = \"sAMAccountName\"\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Types in TypeScript\nDESCRIPTION: This TypeScript snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks`, which are essential for creating structured documentation pages in Storybook MDX. It also imports the `SliderProps` type definition from a local `./types` file, necessary for defining the component's interface and enabling automatic prop documentation generation via `ArgTypes`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { SliderProps } from './types';\n```\n\n----------------------------------------\n\nTITLE: Example Grafana LDAP Configuration File (ldap.toml)\nDESCRIPTION: Provides a comprehensive example of the `ldap.toml` file, which contains detailed settings for connecting to and interacting with an LDAP server. It covers server details (host, port, SSL/TLS settings, timeouts), bind credentials (`bind_dn`, `bind_password`), user search parameters (`search_filter`, `search_base_dns`), optional group search settings, and attribute mappings (`member_of`, `email`). This file is referenced by the main Grafana configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n[[servers]]\n# Ldap server host (specify multiple hosts space separated)\nhost = \"ldap.my_secure_remote_server.org\"\n# Default port is 389 or 636 if use_ssl = true\nport = 636\n# Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS)\nuse_ssl = true\n# If set to true, use LDAP with STARTTLS instead of LDAPS\nstart_tls = false\n# The value of an accepted TLS cipher. By default, this value is empty. Example value: [\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"])\n# For a complete list of supported ciphers and TLS versions, refer to: https://go.dev/src/crypto/tls/cipher_suites.go\n# Starting with Grafana v11.0 only ciphers with ECDHE support are accepted for TLS 1.2 connections.\ntls_ciphers = []\n# This is the minimum TLS version allowed. By default, this value is empty. Accepted values are: TLS1.1 (only for Grafana v10.4 or earlier), TLS1.2, TLS1.3.\nmin_tls_version = \"\"\n# set to true if you want to skip SSL cert validation\nssl_skip_verify = false\n# set to the path to your root CA certificate or leave unset to use system defaults\n# root_ca_cert = \"/path/to/certificate.crt\"\n# Authentication against LDAP servers requiring client certificates\n# client_cert = \"/path/to/client.crt\"\n# client_key = \"/path/to/client.key\"\n\n# Search user bind dn\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\n# Search user bind password\n# If the password contains # or ; you have to wrap it with triple quotes. Ex \"\"\"#password;\"\"\"\nbind_password = \"grafana\"\n# We recommend using variable expansion for the bind_password, for more info https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#variable-expansion\n# bind_password = '$__env{LDAP_BIND_PASSWORD}'\n\n# Timeout in seconds. Applies to each host specified in the 'host' entry (space separated).\ntimeout = 10\n\n# User search filter, for example \"(cn=%s)\" or \"(sAMAccountName=%s)\" or \"(uid=%s)\"\n# Allow login from email or username, example \"(|(sAMAccountName=%s)(userPrincipalName=%s))\"\nsearch_filter = \"(cn=%s)\"\n\n# An array of base dns to search through\nsearch_base_dns = [\"dc=grafana,dc=org\"]\n\n# group_search_filter = \"(&(objectClass=posixGroup)(memberUid=%s))\"\n# group_search_filter_user_attribute = \"distinguishedName\"\n# group_search_base_dns = [\"ou=groups,dc=grafana,dc=org\"]\n\n# Specify names of the LDAP attributes your LDAP uses\n[servers.attributes]\nmember_of = \"memberOf\"\nemail =  \"email\"\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying a Secondary Button with React in Storybook (TSX)\nDESCRIPTION: This snippet showcases the Secondary Button variant in small, medium, and large sizes, embedded within an ExampleFrame for interactive preview in Storybook. The Button component must be available and props passed to control appearance. This is intended for demonstrating default (secondary) button styling to consumers, with the example visually and contextually highlighting the available sizes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <Button variant=\\\"secondary\\\" size=\\\"sm\\\" style={{ margin: '5px' }}>\\n    {'Small'}\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"md\\\" style={{ margin: '5px' }}>\\n    {'Medium'}\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" style={{ margin: '5px' }}>\\n    {'Large'}\\n  </Button>\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of organizations. `orgs:*` matches any organization, while `orgs:id:1` targets the specific organization with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\norgs:*\n```\n\nLANGUAGE: text\nCODE:\n```\norgs:id:*\n```\n\n----------------------------------------\n\nTITLE: Saving Report Settings via HTTP POST Request\nDESCRIPTION: Example of saving or updating global reports branding settings including logo URLs and email footer configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/settings HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n\t\"branding\": {\n\t\t\"reportLogoUrl\": \"https://grafana.com/reportLogo.jpg\",\n\t\t\"emailLogoUrl\": \"https://grafana.com/emailLogo.jpg\",\n\t\t\"emailFooterMode\": \"sent-by\",\n\t\t\"emailFooterText\": \"Grafana Labs\",\n\t\t\"emailFooterLink\": \"https://grafana.com/\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Dot Context in Go Templates - Go\nDESCRIPTION: This code snippet shows how to access the dot (.) special cursor in Go templates, which is contextually set by Grafana to notification or alert data. In notification templates, \".\" refers to the Notification Data, while in annotation and label templates it refers to all alert data. The snippet prints the Alerts field from the current dot context using Grafana's text/template implementation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/language.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ .Alerts }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Graphite Stats Export in Grafana - INI\nDESCRIPTION: This snippet configures Grafana to send internal metrics directly to a Graphite instance. Placed under the [metrics.graphite] section of grafana.ini or custom.ini, it requires specifying the 'address' of the Graphite server and optionally a prefix for metrics naming. Dependencies: a Graphite instance running and reachable from the Grafana server. Parameters: address (hostname:port), prefix (string pattern with %(instance_name)s support). Outputs: Grafana metrics sent to the specified Graphite node; also available at /metrics. The address directive must be configured for export to be active.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Send internal metrics to Graphite\\n[metrics.graphite]\\n# Enable by setting the address setting (ex localhost:2003)\\naddress = <hostname or ip>:<port#>\\nprefix = prod.grafana.%(instance_name)s.\\n\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Policy for Grafana License Validation (JSON)\nDESCRIPTION: This JSON defines an AWS IAM policy required for a Grafana instance to validate its Enterprise license using AWS License Manager. It grants permissions to check out, list, get usage data for, and check in the license (`license-manager:CheckoutLicense`, `license-manager:ListReceivedLicenses`, `license-manager:GetLicenseUsage`, `license-manager:CheckInLicense`). The `GetLicenseUsage` permission should be restricted to the specific Grafana Enterprise license ARN by replacing `[YOUR_ACCOUNT]` and `[YOUR_LICENSE_ID]`. This policy must be attached to the IAM user whose credentials Grafana will use.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"license-manager:GetLicenseUsage\",\n            \"Resource\": \"arn:aws:license-manager::[YOUR_ACCOUNT]:license:[YOUR_LICENSE_ID]\"\n      },\n      {\n            \"Sid\": \"VisualEditor1\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n               \"license-manager:CheckoutLicense\",\n               \"license-manager:ListReceivedLicenses\",\n               \"license-manager:CheckInLicense\"\n            ],\n            \"Resource\": \"*\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Grafana Alert Severity Label using Go Template\nDESCRIPTION: This Go template demonstrates how to dynamically set a `severity` label for a Grafana alert based on the value of a query result. It uses conditional logic (`if`/`else if`/`else`) and the `gt` (greater than) function to compare the query value (`$values.A.Value`) against thresholds (90.0, 80.0, 60.0) and assigns a severity level (`critical`, `high`, `medium`, or `low`). This templated label can then be used in notification policies for routing or handling.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ if (gt $values.A.Value 90.0) -}}\ncritical\n{{ else if (gt $values.A.Value 80.0) -}}\nhigh\n{{ else if (gt $values.A.Value 60.0) -}}\nmedium\n{{ else -}}\nlow\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Mapping SAML Assertion Attributes for User Name (Template)\nDESCRIPTION: This INI configuration snippet shows how to construct the Grafana user's display name using a template that combines multiple attributes ('firstName' and 'lastName') from the SAML assertion using the `$__saml{<attribute>}` syntax. This allows for more complex name formatting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n#template mapping\nassertion_attribute_name = $__saml{firstName} $__saml{lastName}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grafana Dashboard JSON Model\nDESCRIPTION: This JSON object represents the initial structure of a new Grafana dashboard before it is saved. It includes core fields like 'id' (null until saved), 'uid', 'title', 'tags', 'timezone', 'time' range, and empty arrays for 'panels', 'templating', and 'annotations'. Default values for 'editable', 'graphTooltip', 'refresh', 'schemaVersion', and 'version' are also set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": null,\n  \"uid\": \"cLV5GDCkz\",\n  \"title\": \"New dashboard\",\n  \"tags\": [],\n  \"timezone\": \"browser\",\n  \"editable\": true,\n  \"graphTooltip\": 1,\n  \"panels\": [],\n  \"time\": {\n    \"from\": \"now-6h\",\n    \"to\": \"now\"\n  },\n  \"timepicker\": {\n    \"refresh_intervals\": []\n  },\n  \"templating\": {\n    \"list\": []\n  },\n  \"annotations\": {\n    \"list\": []\n  },\n  \"refresh\": \"5s\",\n  \"schemaVersion\": 17,\n  \"version\": 0,\n  \"links\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Cloud OAuth2 Authentication in Grafana\nDESCRIPTION: Example configuration for setting up Grafana Cloud as an OAuth2 authentication provider in a Grafana instance. Includes client credentials, scopes, and organization settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.grafana_com]\nenabled = true\nallow_sign_up = true\nauto_login = false\nclient_id = 450bc21c10dc2194879d\nclient_secret = eyJ0Ijoib2F1dGgyYyIhlmlkIjoiNzUwYmMzM2MxMGRjMjE6NDh3OWQiLCJ2IjoiZmI1YzVlYmIwYzFmN2ZhYzZmNjIwOGI1NmVkYTRlNWYxMzgwM2NkMiJ9\nscopes = user:email\nallowed_organizations = sampleorganization\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Authentication for Remote Authorization in Grafana via INI\nDESCRIPTION: This snippet demonstrates advanced INI configuration for connecting an authorization client to a remote GRPC server using access token authentication. It sets a stack_id, specifies cloud mode, and configures token-related parameters in the [grpc_client_authentication] section, including the token value, signing server URL, and namespace. This setup is crucial for secure, tenant-specific authentication workflows in multi-stack environments.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[environment]\nstack_id = 11\n\n[authorization]\nremote_address = \"server.example.org:10000\"\nmode = \"cloud\"\nlisten = false\n\n[grpc_client_authentication]\ntoken = \"ReplaceWithToken\"\ntoken_exchange_url = \"signing-server.example.org/path/to/signing\"\ntoken_namespace = \"stacks-11\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Comprehensive IAM Policy for CloudWatch Metrics and Logs Access in JSON\nDESCRIPTION: This JSON configuration provides a combined AWS IAM policy granting Grafana permissions to access both CloudWatch Metrics and Logs, along with necessary EC2, tag, and Performance Insights data. It includes permissions from both the metrics-only and logs-only policies, covering actions like `cloudwatch:GetMetricData`, `logs:StartQuery`, `ec2:DescribeInstances`, `tag:GetResources`, and `pi:GetResourceMetrics`. Use this policy for full CloudWatch data source functionality in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowReadingMetricsFromCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetInsightRuleReport\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingResourceMetricsFromPerformanceInsights\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"pi:GetResourceMetrics\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingLogsFromCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:DescribeLogGroups\",\n        \"logs:GetLogGroupFields\",\n        \"logs:StartQuery\",\n        \"logs:StopQuery\",\n        \"logs:GetQueryResults\",\n        \"logs:GetLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingTagsInstancesRegionsFromEC2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"ec2:DescribeTags\", \"ec2:DescribeInstances\", \"ec2:DescribeRegions\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingResourcesForTags\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"tag:GetResources\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Pyroscope Data Source in Grafana using YAML Configuration\nDESCRIPTION: YAML configuration example for provisioning the Grafana Pyroscope data source. This configuration sets up a data source named 'Grafana Pyroscope' that connects to a Pyroscope instance running on localhost:4040 with a minimum step interval of 15 seconds.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Grafana Pyroscope\n    type: grafana-pyroscope-datasource\n    url: http://localhost:4040\n    jsonData:\n      minStep: '15s'\n```\n\n----------------------------------------\n\nTITLE: Defining Report Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of reports. `reports:*` matches any report, whereas `reports:id:1` targets the specific report with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_39\n\nLANGUAGE: text\nCODE:\n```\nreports:*\n```\n\nLANGUAGE: text\nCODE:\n```\nreports:id:*\n```\n\n----------------------------------------\n\nTITLE: Cloning a GitHub Repository Using Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the sample tutorial environment repository from GitHub using the 'git clone' command. It requires Git to be installed on the user's machine. The command downloads the full repository to the current directory, which contains files necessary for following the Grafana tutorial. Input: None (run from any shell). Output: Creates a new 'tutorial-environment' directory within the current working directory. This operation has no effect if the directory already exists and may overwrite if not managed properly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/tutorial-environment.git\n\n```\n\n----------------------------------------\n\nTITLE: Using the Drawer Component in a React Application (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to import and render the Drawer component from the @grafana/ui package within a React (TSX) application. It includes an example of handling the onClose event and passing props like title and size. Dependencies include React, @grafana/ui, and any relevant Drawer props implementation. The Drawer receives child content and defines the overlay appearance, with size controlling width/min-width as per documented options. Inputs include title (string), size (one of 'sm', 'md', 'lg'), onClose (function), and child elements. The output is a modal-like overlay anchored to the screen edge that can display any React content.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Drawer/Drawer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Drawer } from '@grafana/ui';\\n\\nonClose = () => {\\n  // handle the show or hide Drawer logic\\n};\\n\\nreturn (\\n  <Drawer title=\\\"This a Drawer\\\" size=\\\"md\\\" onClose={this.onClose}>\\n    <div>Put your Drawer content here</div>\\n  </Drawer>\\n);\n```\n\n----------------------------------------\n\nTITLE: Organization Roles Mapping for JWT Authentication\nDESCRIPTION: Configuration for mapping users to specific organizations with different roles based on JWT claims using organization attribute path and mapping.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\norg_attribute_path = info.orgs\norg_mapping = engineer:org_foo:Viewer admin:org_bar:Editor *:org_baz:Editor\n```\n\n----------------------------------------\n\nTITLE: Implementing BigValue Component with Display Options in React/TypeScript\nDESCRIPTION: Example implementation of the BigValue component showing how to use various display modes including color, graph, justify, and text modes. The component takes a DisplayValue object and theme as props to render a customized value display.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/BigValue/BigValue.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DisplayValue } from '@grafana/data';\nimport {\n  BigValue,\n  BigValueColorMode,\n  BigValueGraphMode,\n  BigValueJustifyMode,\n  BigValueTextMode,\n  useTheme,\n} from '@grafana/ui';\n\nconst bigValue: DisplayValue = {\n  color: 'red',\n  value: '5000',\n  numeric: 5000,\n  title: 'Volume',\n};\n\nreturn (\n  <BigValue\n    theme={useTheme()}\n    justifyMode={BigValueJustifyMode.Auto}\n    graphMode={BigValueGraphMode.Area}\n    colorMode={BigValueColorMode.Value}\n    textMode={BigValueTextMode.Auto}\n    value={bigValue}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on Ubuntu 18.10 (Bash)\nDESCRIPTION: Provides a list of package names that need to be installed on an Ubuntu 18.10 system to satisfy the dependencies for the Grafana image rendering plugin. These packages provide the necessary shared libraries for Chromium.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlibx11-6 libx11-xcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrender1 libxtst6 libglib2.0-0 libnss3 libcups2  libdbus-1-3 libxss1 libxrandr2 libgtk-3-0 libasound2 libxcb-dri3-0 libgbm1 libxshmfence1\n```\n\n----------------------------------------\n\nTITLE: Starting the Grafana Stack with Docker Compose - Bash\nDESCRIPTION: This Bash snippet starts Grafana, Loki, and Prometheus as background (detached) Docker containers using Docker Compose. It assumes Docker and Docker Compose are installed and accessible, and that the working directory contains the relevant 'docker-compose.yml' file. The command pulls required images on the first run (may take several minutes), and sets up services on their default ports. If local services are already using relevant ports, users may encounter errors, requiring those services to be stopped before proceeding.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n\n```\n\n----------------------------------------\n\nTITLE: Mounting Provisioning Volume in Grafana Deployment - Kubernetes YAML\nDESCRIPTION: Specifies how to mount the persistent volume for provisioning resources into the Grafana pod at '/etc/grafana/provisioning'. It configures the volume mount in the container spec, and connects the volume to the previously created 'grafana-provisioning-pvc'. This ensures provisioned YAML files are available to Grafana during startup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n...\n    volumeMounts:\n      - mountPath: /etc/grafana/provisioning\n        name: grafana-provisioning-pv\n      ...\nvolumes:\n  - name: grafana-provisioning-pv\n    persistentVolumeClaim:\n      claimName: grafana-provisioning-pvc\n...\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Source Cache via Grafana HTTP API (HTTP)\nDESCRIPTION: This snippet shows how to disable caching for a specific Grafana data source by sending a POST request to the `/api/datasources/:dataSourceUID/cache/disable` endpoint. The necessary permission is `datasources.caching:write` scoped to `datasources:*`. The example illustrates the request structure and the JSON response confirming successful disabling, reflecting the updated cache status.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/jZrmlLCGka/cache/disable HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n   \"message\": \"Data source cache disabled\",\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": false,\n   \"ttlQueriesMs\": 300000,\n   \"ttlResourcesMs\": 300000,\n   \"useDefaultTTL\": true,\n   \"defaultTTLMs\": 0,\n   \"created\": \"2023-04-21T11:49:22-04:00\",\n   \"updated\": \"2023-04-24T16:30:31-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Configuration Parameters for Grafana - Markdown\nDESCRIPTION: This Markdown snippet defines a configuration reference table for Grafana's authentication settings, including role mapping, SAML NameID formats, and Microsoft Entra ID (Azure AD) OAuth parameters. It does not require any dependencies beyond Markdown rendering in documentation platforms. All parameters are represented in a tabular format, clarifying whether they are required, their purposes, and defaults when applicable. Expected input is the documentation build system, and output is formatted docs for administrators; the limitation is that the table only describes static config settings and no dynamic behavior.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_26\n\nLANGUAGE: Markdown\nCODE:\n```\n| `role_values_grafana_admin`                                | No       | List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.                                                                                                      |                                                       |\n| `skip_org_role_sync`                                       | No       | Whether to skip organization role synchronization.                                                                                                                                                           | `false`                                               |\n| `name_id_format`                                           | No       | Specifies the format of the requested NameID element in the SAML AuthnRequest.                                                                                                                               | `urn:oasis:names:tc:SAML:2.0:nameid-format:transient` |\n| `client_id`                                                | No       | Client ID of the IdP service application used to retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                            |                                                       |\n| `client_secret`                                            | No       | Client secret of the IdP service application used to retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                        |                                                       |\n| `token_url`                                                | No       | URL to retrieve the access token from the IdP. (Microsoft Entra ID only)                                                                                                                                     |                                                       |\n| `force_use_graph_api`                                      | No       | Whether to use the IdP service application retrieve more information about the user from the IdP. (Microsoft Entra ID only)                                                                                  | `false`                                               |\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components and Storybook Blocks in TypeScript\nDESCRIPTION: This code snippet imports essential modules and components required for displaying and documenting layout patterns within Storybook. Dependencies include React components for layout (Layout, HorizontalGroup, VerticalGroup), UI elements (Button, Select), as well as Storybook Canvas and ArgTypes for documentation. This serves as the setup for integrating component stories and prop definitions within the Storybook interface.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Layout.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Canvas, ArgTypes } from '@storybook/blocks';\nimport { Layout, HorizontalGroup, VerticalGroup } from './Layout';\nimport { Button } from '../Button';\nimport { Select } from '../index';\nimport { ExampleFrame } from '../../utils/storybook/ExampleFrame';\nimport * as LayoutStories from './Layout.story';\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server Network and TLS Settings - INI\nDESCRIPTION: This snippet defines the gRPC server's network parameters, such as protocol, listening address, TLS usage, certificate files, unary call logging, and message size limits. Specified under the [grpc_server] section in the INI configuration file, these settings allow administrators to control how the gRPC server listens for connections, handles logging, and manages message size constraints. Leaving fields like cert_file, key_file, max_recv_msg_size, or max_send_msg_size unset will result in use of default gRPC values; improper configuration may affect server security and performance.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/grpcserver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[grpc_server]\nnetwork = \"tcp\"\naddress = \"127.0.0.1:10000\"\nuse_tls = false\ncert_file =\nkey_file =\n# this will log the request and response for each unary gRPC call\nenable_logging = false\n# Maximum size of a message that can be received in bytes. If not set, uses the gRPC default (4MiB).\nmax_recv_msg_size =\n# Maximum size of a message that can be sent in bytes. If not set, uses the gRPC default (unlimited).\nmax_send_msg_size =\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Domain in Configuration File - Bash\nDESCRIPTION: This snippet demonstrates how to set the domain Grafana will use for rendering links and processing redirects. The configuration should be placed inside the Grafana configuration file, typically grafana.ini, under the [server] section. Set the 'domain' value to match the hostname used by your reverse proxy. Requires Grafana service restart for changes to take effect. The 'domain' parameter is essential for proper reverse proxy behavior.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[server]\\ndomain = example.com\n```\n\n----------------------------------------\n\nTITLE: Listing Available Plugins from Repository (Bash)\nDESCRIPTION: Uses the 'plugins list-remote' command to display a list of plugins available for installation from the configured Grafana plugin repository (default or overridden).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins list-remote\n```\n\n----------------------------------------\n\nTITLE: Using [[varname]] Syntax in SQL Queries\nDESCRIPTION: SQL query example using the [[varname]] syntax to incorporate a template variable named 'hostname' with the Grafana time filter macro.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  atimestamp as time,\n  aint as value\nFROM table\nWHERE $__timeFilter(atimestamp) and hostname in([[hostname]])\nORDER BY atimestamp\n```\n\n----------------------------------------\n\nTITLE: Pinning Grafana Terraform Provider Version for API Key Migration\nDESCRIPTION: This Terraform configuration block specifies the required Grafana provider (`grafana/grafana`) and pins its version to exactly `2.19.0`. This is necessary for configurations still using the `grafana_api_key` resource, which was removed in provider version 3.0.0, allowing for migration before upgrading the provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    grafana = {\n      source  = \"grafana/grafana\"\n      version = \"2.19.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlled RadioButton and Select Inputs with InputControl (JavaScript/JSX)\nDESCRIPTION: Shows integrating controlled components like RadioButtonGroup and Select within the Form using InputControl and the exposed control prop. The render prop pattern allows mapping react-hook-form state to non-standard input components. Ensures compatibility with react-hook-form for non-standard or controlled inputs, depending on InputControl, Field, and specific input widgets.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Form, Field, InputControl } from '@grafana/ui';\n\n// render function\n<Form ...>{({register, errors, control}) => (\n  <>\n    <Field label=\"RadioButtonExample\">\n      <InputControl\n        {/* Render InputControl as controlled input (RadioButtonGroup) */}\n        render={({field}) => <RadioButtonGroup {...field} options={...} />}\n        {/* Pass control exposed from Form render prop */}\n        control={control}\n        name=\"radio\"\n      />\n    </Field>\n\n    <Field label=\"SelectExample\">\n      <InputControl\n        {/* Render InputControl as controlled input (Select) */}\n        render={({field}) => <Select {...field} options={...} />}\n        {/* Pass control exposed from Form render prop */}\n        control={control}\n        name=\"select\"\n      />\n    </Field>\n  </>\n)}\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Enabling Refresh Token Usage in Grafana (INI)\nDESCRIPTION: Configuration setting within the `[auth.generic_oauth]` section of Grafana's INI file to enable the use of refresh tokens obtained from Keycloak. This allows Grafana to obtain new access tokens without requiring user re-login when the initial access token expires. This requires the `offline_access` scope to be included in the `scopes` setting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\n# ... other settings\nuse_refresh_token = true\n```\n\n----------------------------------------\n\nTITLE: Creating Snapshot via Grafana HTTP API (HTTP)\nDESCRIPTION: Demonstrates forming a POST HTTP request to create a new Grafana dashboard snapshot by submitting a complete dashboard model as JSON to the /api/snapshots endpoint. Requires authentication via Bearer token and Content-Type headers. The dashboard payload and optional parameters like 'expires' customize snapshot creation. The API accepts a JSON request body and returns a JSON response with keys for snapshot sharing and deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n    POST /api/snapshots HTTP/1.1\\n    Accept: application/json\\n    Content-Type: application/json\\n    Authorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n    {\\n      \"dashboard\": {\\n        \"editable\":false,\\n        \"nav\":[\\n        {\\n          \"enable\":false,\\n        \"type\":\"timepicker\"\\n        }\\n        ],\\n        \"rows\": [\\n          {\\n\\n          }\\n        ],\\n        \"style\":\"dark\",\\n        \"tags\":[],\\n        \"templating\":{\\n          \"list\":[\\n          ]\\n        },\\n        \"time\":{\\n        },\\n        \"timezone\":\"browser\",\\n        \"title\":\"Home\",\\n        \"version\":5\\n        },\\n      \"expires\": 3600\\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring SOCKS5 Proxy in Grafana's config.ini\nDESCRIPTION: This code snippet shows the configuration options for setting up a secure SOCKS5 proxy in Grafana's config.ini file. It includes settings for enabling the feature, specifying certificates, and setting the proxy address.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/proxy/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nsecure_socks_datasource_proxy:\n  enabled = true\n  root_ca_cert = /etc/ca.crt\n  client_key = /etc/client.key\n  client_cert = /etc/client.crt\n  server_name = proxy.grafana.svc.cluster.local\n  proxy_address = localhost:9090\n  allow_insecure = false\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Alert Description Annotation Text\nDESCRIPTION: Provides an example text string for the 'description' annotation in a Grafana alert rule. This detailed description offers context about the alert trigger (e.g., high CPU load), potential impact (e.g., outage risk), and suggested response actions (e.g., scaling resources, investigation).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/annotation-label.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe web server's CPU has exceeded 80% for more than 5 minutes.\\n\\nThis indicates that the system is under heavy load and may result in an outage.\\n\\nConsider scaling the server's resources and investigating bottlenecks.\n```\n\n----------------------------------------\n\nTITLE: Creating a Grafana Service Account via HTTP API\nDESCRIPTION: This shell command uses `curl` to send a POST request to the `/api/serviceaccounts` endpoint in Grafana to create a new Service Account named 'my-service-account' with the 'Viewer' role. Basic authentication (`admin:admin`) is used. The response contains the details of the created service account, including its ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# create a service account\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"my-service-account\", \"role\": \"Viewer\"}' http://admin:admin@localhost:3000/api/serviceaccounts\n\n# response with the created service account id,name, login\n{\"id\":1,\"name\":\"my-service-account\",\"login\":\"sa-my-service-account\",\"orgId\":1,\"isDisabled\":false,\"role\":\"Viewer\",\"tokens\":0,\"avatarUrl\":\"\"}%\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element by UID Request Example (HTTP)\nDESCRIPTION: Example HTTP GET request to fetch a specific library element using its unique identifier (UID) via the `/api/library-elements/:uid` endpoint. The UID `V--OrYHnz` is provided in the path. Requires authentication via Bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/library-elements/V--OrYHnz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Secrets using Grafana Admin API\nDESCRIPTION: Triggers the re-encryption of database secrets via the Grafana Admin API endpoint `/encryption/reencrypt-secrets`. This process uses envelope encryption and a fresh data key. It is recommended to perform this action during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/encryption/reencrypt-secrets\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis HA Engine for Grafana Live\nDESCRIPTION: Configuration example for setting up Redis as the high availability engine for Grafana Live, including connection details and password configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n[live]\nha_engine = redis\nha_engine_address: redis-headless.grafana.svc.cluster.local:6379\nha_engine_password: $__file{/your/redis/password/secret/mount}\n```\n\n----------------------------------------\n\nTITLE: Creating a Playlist via Grafana HTTP API\nDESCRIPTION: Sends a POST request to `/api/playlists/` to create a new playlist. Requires `Authorization` and `Content-Type: application/json` headers. The request body must be a JSON object specifying the playlist's `name`, `interval`, and `items`. Returns a JSON object confirming the creation with the new playlist's `uid`, `name`, and `interval`. Note: The provided example uses PUT method and a specific UID, which typically corresponds to an update or create-or-update operation, while the endpoint description indicates POST for creation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/playlists/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n  {\n    \"name\": \"my playlist\",\n    \"interval\": \"5m\",\n    \"items\": [\n      {\n        \"type\": \"dashboard_by_uid\",\n        \"value\": \"3\",\n        \"order\": 1,\n        \"title\":\"my third dashboard\"\n      },\n      {\n        \"type\": \"dashboard_by_tag\",\n        \"value\": \"myTag\",\n        \"order\": 2,\n        \"title\":\"my other dashboard\"\n      }\n    ]\n  }\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n  {\n    \"uid\": \"1\",\n    \"name\": \"my playlist\",\n    \"interval\": \"5m\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Roles in Azure AD App Manifest (JSON)\nDESCRIPTION: This JSON snippet shows the structure for defining Grafana application roles (Admin, Viewer, Editor) within the `appRoles` section of an Azure AD application manifest. Each role object requires a unique ID (replace `SOME_UNIQUE_ID`), specifies allowed member types, description, display name, and a `value` corresponding to the Grafana role name. This configuration is an alternative to defining roles through the Azure Portal UI.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   \\\"appRoles\\\": [\n   \\t\\t{\n   \\t\\t\\t\\\"allowedMemberTypes\\\": [\n   \\t\\t\\t\\t\\\"User\\\"\n   \\t\\t\\t],\n   \\t\\t\\t\\\"description\\\": \\\"Grafana org admin Users\\\",\n   \\t\\t\\t\\\"displayName\\\": \\\"Grafana Org Admin\\\",\n   \\t\\t\\t\\\"id\\\": \\\"SOME_UNIQUE_ID\\\",\n   \\t\\t\\t\\\"isEnabled\\\": true,\n   \\t\\t\\t\\\"lang\\\": null,\n   \\t\\t\\t\\\"origin\\\": \\\"Application\\\",\n   \\t\\t\\t\\\"value\\\": \\\"Admin\\\"\n   \\t\\t},\n   \\t\\t{\n   \\t\\t\\t\\\"allowedMemberTypes\\\": [\n   \\t\\t\\t\\t\\\"User\\\"\n   \\t\\t\\t],\n   \\t\\t\\t\\\"description\\\": \\\"Grafana read only Users\\\",\n   \\t\\t\\t\\\"displayName\\\": \\\"Grafana Viewer\\\",\n   \\t\\t\\t\\\"id\\\": \\\"SOME_UNIQUE_ID\\\",\n   \\t\\t\\t\\\"isEnabled\\\": true,\n   \\t\\t\\t\\\"lang\\\": null,\n   \\t\\t\\t\\\"origin\\\": \\\"Application\\\",\n   \\t\\t\\t\\\"value\\\": \\\"Viewer\\\"\n   \\t\\t},\n   \\t\\t{\n   \\t\\t\\t\\\"allowedMemberTypes\\\": [\n   \\t\\t\\t\\t\\\"User\\\"\n   \\t\\t\\t],\n   \\t\\t\\t\\\"description\\\": \\\"Grafana Editor Users\\\",\n   \\t\\t\\t\\\"displayName\\\": \\\"Grafana Editor\\\",\n   \\t\\t\\t\\\"id\\\": \\\"SOME_UNIQUE_ID\\\",\n   \\t\\t\\t\\\"isEnabled\\\": true,\n   \\t\\t\\t\\\"lang\\\": null,\n   \\t\\t\\t\\\"origin\\\": \\\"Application\\\",\n   \\t\\t\\t\\\"value\\\": \\\"Editor\\\"\n   \\t\\t}\n   \\t],\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape for Grafana Metrics (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to add a Prometheus scrape_config job for collecting metrics from Grafana, specifying job parameters such as scrape interval, timeout, path, scheme, and target endpoints. It is used to facilitate meta-monitoring by enabling Prometheus (or a compatible metrics database) to collect and store critical Grafana alerting metrics. Dependencies include a running Prometheus instance, network access to the Grafana server, and Prometheus configuration reload after update. Inputs are Prometheus job configuration fields; outputs are time-series metrics accessible in Prometheus for further dashboarding or alerting use.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/meta-monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: grafana\\n  honor_timestamps: true\\n  scrape_interval: 15s\\n  scrape_timeout: 10s\\n  metrics_path: /metrics\\n  scheme: http\\n  follow_redirects: true\\n  static_configs:\\n    - targets:\\n        - grafana:3000\\n\n```\n\n----------------------------------------\n\nTITLE: Testing Select Component Interactions using React Testing Library and react-select-event (TSX)\nDESCRIPTION: Shows how to write a test for the Select component using @testing-library/react and react-select-event, by rendering the component with labeled controls and simulating user interaction. Requires @testing-library/react for rendering/testing, react-select-event for selection simulation, and jest for assertions. Inputs are simulated user selections; output is a checked onChange call with the selected value.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport selectEvent from 'react-select-event';\nimport { Select } from '@grafana/ui';\n\nit('should call onChange', () => {\n  const onChange = jest.fn();\n\n  render(\n    <>\n      <label htmlFor=\"my-select\">My select</label>\n      <Select onChange={onChange} options={options} inputId=\"my-select\" />\n    </>\n  );\n\n  const selectEl = screen.getByLabelText('My select');\n  expect(selectEl).toBeInTheDocument();\n\n  await selectEvent.select(selectEl, 'Option 2', { container: document.body });\n  expect(onChange).toHaveBeenCalledWith({\n    label: 'Option 2',\n    value: 2,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Grafana Region Annotations with Start and End Times\nDESCRIPTION: This query retrieves data for Grafana region annotations, using separate columns for start and end times in epoch format. It includes description as text and tags.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  time_sec as time,\n  time_end_sec as timeend,\n  description as [text],\n  tags\nFROM\n  [events]\nWHERE\n  $__unixEpochFilter(time_sec)\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Template for Alert Groups with Go Templating Language - Go\nDESCRIPTION: This Go templating snippet defines reusable templates for formatting notification messages sent via contact points in Grafana. It introduces two template blocks: 'alerts.message', which summarizes the count of firing and resolved alerts and uses the 'alerts.summarize' subtemplate to list summaries for each alert. The template expects .Alerts.Firing and .Alerts.Resolved in its context and is suitable for customizing notifications across multiple contact points. The snippet assumes variables and functions provided by Grafana's notification template engine environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"alerts.message\" -}}\n  {{ if .Alerts.Firing -}}\n    {{ len .Alerts.Firing }} firing alert(s)\n    {{ template \"alerts.summarize\" .Alerts.Firing }}\n  {{- end }}\n  {{- if .Alerts.Resolved -}}\n    {{ len .Alerts.Resolved }} resolved alert(s)\n    {{ template \"alerts.summarize\" .Alerts.Resolved }}\n  {{- end }}\n{{- end }}\n\n{{ define \"alerts.summarize\" -}}\n  {{ range . -}}\n  - {{ index .Annotations \"summary\" }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuration Table in Markdown\nDESCRIPTION: Markdown table listing all Okta OIDC configuration options including required flags, cloud support status, descriptions, and default values. The table covers essential settings like client credentials, authentication endpoints, scopes, and role mapping options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting                 | Required | Supported on Cloud | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | Default                       |\n| ----------------------- | -------- | ------------------ || ----------------------------- |\n| `enabled`               | No       | Yes                | Enables Okta OIDC authentication.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | `false`                       |\n| `name`                  | No       | Yes                | Name that refers to the Okta OIDC authentication from the Grafana user interface.                                                                                                                                                                                                                                                                                                                                                                                                                                   | `Okta`                        |\n| `icon`                  | No       | Yes                | Icon used for the Okta OIDC authentication in the Grafana user interface.                                                                                                                                                                                                                                                                                                                                                                                                                                           | `okta`                        |\n| `client_id`             | Yes      | Yes                | Client ID provided by your Okta OIDC app.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |                               |\n| `client_secret`         | Yes      | Yes                | Client secret provided by your Okta OIDC app.                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |                               |\n| `auth_url`              | Yes      | Yes                | Authorization endpoint of your Okta OIDC provider.                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |                               |\n| `token_url`             | Yes      | Yes                | Endpoint used to obtain the Okta OIDC access token.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |                               |\n| `api_url`               | Yes      | Yes                | Endpoint used to obtain user information.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |                               |\n| `scopes`                | No       | Yes                | List of comma- or space-separated Okta OIDC scopes.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 | `openid profile email groups` |\n| `allow_sign_up`         | No       | Yes                | Controls Grafana user creation through the Okta OIDC login. Only existing Grafana users can log in with Okta OIDC if set to `false`.                                                                                                                                                                                                                                                                                                                                                                                | `true`                        |\n| `auto_login`            | No       | Yes                | Set to `true` to enable users to bypass the login screen and automatically log in. This setting is ignored if you configure multiple auth providers to use auto-login.                                                                                                                                                                                                                                                                                                                                              | `false`                       |\n| `role_attribute_path`   | No       | Yes                | [JMESPath](http://jmespath.org/examples.html) expression to use for Grafana role lookup. Grafana will first evaluate the expression using the Okta OIDC ID token. If no role is found, the expression will be evaluated using the user information obtained from the UserInfo endpoint. The result of the evaluation should be a valid Grafana role (`None`, `Viewer`, `Editor`, `Admin` or `GrafanaAdmin`). For more information on user role mapping, refer to [Configure role mapping](#configure-role-mapping). |                               |\n| `role_attribute_strict` | No       | Yes                | Set to `true` to deny user login if the Grafana org role cannot be extracted using `role_attribute_path` or `org_mapping`. For more information on user role mapping, refer to [Configure role mapping](#configure-role-mapping).                                                                                                                                                                                                                                                                                   | `false`                       |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Authorization Server Behavior for Grafana via INI\nDESCRIPTION: This snippet defines the default behavior for the authorization server using the [authorization] section, indicating the server does not listen for remote connections (listen=false), the client operates in in-process mode (mode=\"inproc\"), and no remote address is set. This setup avoids exposing the authorization endpoint externally and keeps all communications internal. The configuration is suitable for local development setups or single-instance deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[authorization]\nremote_address = \"\"\nlisten = false\nmode = \"inproc\"\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Logging for Access Control in Grafana - Bash\nDESCRIPTION: This snippet enables audit logging by adding an [auditing] section to the Grafana configuration file and setting enabled to true. Audit logs document all permission and role updates, supporting compliance and troubleshooting. This feature requires Grafana Enterprise or Grafana Cloud. The change takes effect after Grafana is restarted, and additional documentation can be consulted for usage details.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auditing]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Searching Users with Paging via Grafana HTTP API (http)\nDESCRIPTION: Illustrates a paged search for users, where the query parameter filters results by name, login, or email. Uses Basic authentication and standard headers. Returns paged results suitable for UI listing or further processing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/search?perpage=10&page=1&query=mygraf HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Changing Encryption Mode to AES-GCM in Grafana Enterprise Configuration\nDESCRIPTION: For Grafana Enterprise users, the encryption algorithm can be changed from the default AES-CFB to AES-GCM. This is done by updating the `algorithm` setting within the `[security.encryption]` section of the Grafana configuration file. AES-GCM may be required for specific security compliance or consistency.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[security.encryption]\nalgorithm = AES-GCM # Example value\n```\n\n----------------------------------------\n\nTITLE: Applying Grafana Kubernetes Manifest (Bash)\nDESCRIPTION: This command uses `kubectl apply` to submit the Kubernetes resource definitions contained within the `grafana.yaml` file to the Kubernetes API server. This action creates or updates the PersistentVolumeClaim, Deployment, and Service as defined in the manifest file. Requires `kubectl` and the presence of `grafana.yaml` in the current directory or a specified path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f grafana.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Pushover Contact Point - YAML\nDESCRIPTION: Establishes a Pushover integration for Grafana alerting. Requires 'apiToken' and 'userKey', and supports optional message, device, priority, TTL, and sound parameters. Inputs define message delivery behavior and recipient devices. Outputs push notifications via Pushover's service. Requires valid Pushover credentials; optional fields must follow Pushover API constraints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ntype: pushover\\nsettings:\\n  # <string, required>\\n  apiToken: XXX\\n  # <string, required>\\n  userKey: user1,user2\\n  # <string>\\n  device: device1,device2\\n  # <string> options (high to low): 2,1,0,-1,-2\\n  priority: '2'\\n  # <string>\\n  retry: '30'\\n  # <string>\\n  expire: '120'\\n  # <string> the number of seconds before a message expires and is deleted automatically. Examples: 10s, 5m30s, 8h.\\n  ttl:\\n  # <string>\\n  sound: siren\\n  # <string>\\n  okSound: magic\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Restricting Metrics Endpoint with Basic Authentication - INI\nDESCRIPTION: This snippet provides configuration variables for optionally securing the metrics endpoint using HTTP basic authentication. Placing or uncommenting this in your grafana.ini or custom.ini will require a basic username/password for accessing the metrics endpoint. Parameters: basic_auth_username (string), basic_auth_password (string). Outputs a protected metrics endpoint. If left empty, no authentication is applied.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nbasic_auth_username =\\nbasic_auth_password =\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering an Elevated (Toast-Style) Alert Directly in JSX\nDESCRIPTION: This JSX snippet illustrates rendering the `Alert` component with the `elevated` prop, which gives it the visual appearance of a Toast notification (typically used with position styling for the top-right corner). It accepts `title`, `severity`, an `onRemove` handler, and child content for details. While this shows the component structure, the documentation strongly advises against this direct usage for toasts, recommending the `AppEvents` method instead for triggering them.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert title={title} severity={severity} onRemove={onRemove} elevated>\n  Child content that includes some alert details, like maybe what actually happened.\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Calling Template to Separate Firing and Resolved Alerts in Grafana - Go\nDESCRIPTION: This snippet calls the 'custom.firing_and_resolved_alerts' template, passing the entire notification context. Results in alert summaries grouped by status as defined by the template, and should be included in notification message formatting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom.firing_and_resolved_alerts\" . }}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Grafana Data Sources and Correlations using YAML\nDESCRIPTION: Defines Grafana data sources ('Source', 'Target') and two correlations using YAML provisioning. The correlations link the 'Source' (logs) to the 'Target' (metrics) data source. One correlation uses a regex transformation to extract an 'application' name from the 'msg' field, while the other uses a logfmt transformation to parse the log line and extract a 'service' name. These extracted values are used as variables ('$${application}', '$${service}') in the respective target query aliases. Note the double dollar sign '$$' is used to escape the '$' character in provisioning files. Requires Grafana's provisioning system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\n  - name: Target\n    uid: test-target\n    type: testdata\n\n  - name: Source\n    uid: test-source\n    type: testdata\n  - name: Source\n    uid: test-source\n    type: testdata\n    correlations:\n      - targetUID: test-target\n        label: App metrics\n        description: Application HTTP request metrics\n        config:\n          type: query\n          target:\n            scenario_id: random_walk\n            alias: $${application}\n          field: msg\n          transformations:\n            - type: regex\n              field: msg\n              expression: service=(\\w+)\\.\\w+\n              mapValue: application\n      - targetUID: test-target\n        label: Service metrics\n        description: Service metrics\n        config:\n          type: query\n          target:\n            scenario_id: random_walk\n            alias: $${service}\n          field: msg\n          transformations:\n            - type: logfmt\n              field: msg\n```\n\n----------------------------------------\n\nTITLE: Basic Role Mapping Example for JWT Authentication\nDESCRIPTION: Configuration for a basic role mapping where a direct role property from the JWT is used to assign the user role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = role\n```\n\n----------------------------------------\n\nTITLE: Custom Button ConfirmButton Implementation in React\nDESCRIPTION: Advanced implementation showing how to use ConfirmButton with a custom Button component as a child. The example demonstrates how to pass a custom button while maintaining the confirmation functionality.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmButton/ConfirmButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfirmButton\n  closeOnConfirm\n  size=\"md\"\n  confirmText=\"Are you sure?\"\n  confirmVariant=\"secondary\"\n  onConfirm={() => {\n    console.log('Action confirmed!');\n  }}\n>\n  <Button variant=\"secondary\">Click me</Button>\n</ConfirmButton>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Dashboard Provisioning from Filesystem using YAML\nDESCRIPTION: This YAML snippet shows an example configuration for provisioning Grafana dashboards from the local filesystem. It defines a list of `providers` under `apiVersion: 1`. Each provider specifies a unique `name`, target `orgId`, destination `folder` or `folderUid`, and `type` (typically 'file'). Important options under `options` for the 'file' type include the `path` to the directory containing dashboard JSON files, `updateIntervalSeconds` for polling changes, `disableDeletion` to prevent removal, and `allowUiUpdates` to control if provisioned dashboards can be modified via the Grafana UI.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\nproviders:\n  # <string> an unique provider name. Required\n  - name: 'a unique provider name'\n    # <int> Org id. Default to 1\n    orgId: 1\n    # <string> name of the dashboard folder.\n    folder: ''\n    # <string> folder UID. will be automatically generated if not specified\n    folderUid: ''\n    # <string> provider type. Default to 'file'\n    type: file\n    # <bool> disable dashboard deletion\n    disableDeletion: false\n    # <int> how often Grafana will scan for changed dashboards\n    updateIntervalSeconds: 10\n    # <bool> allow updating provisioned dashboards from the UI\n    allowUiUpdates: false\n    options:\n      # <string, required> path to dashboard files on disk. Required when using the 'file' type\n      path: /var/lib/grafana/dashboards\n      # <bool> use folder names from filesystem to create folders in Grafana\n      foldersFromFilesStructure: true\n```\n\n----------------------------------------\n\nTITLE: Defining 'None' Scope in Grafana RBAC\nDESCRIPTION: Indicates that an action does not require a specific scope. If an action lists 'None' as its scope, permissions for that action are granted without needing to specify a resource target. For example, `teams:create` might use 'None'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_46\n\nLANGUAGE: text\nCODE:\n```\nNone\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Provider in grafana.ini Security Section (INI)\nDESCRIPTION: This snippet demonstrates how to update the [security] section in grafana.ini to specify the active encryption provider for Grafana. It lists the secret_key for legacy operations, the new Azure Key Vault provider, and available key providers. Proper configuration here ensures Grafana uses the designated provider for encrypting and decrypting secrets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[security]\n# previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured\nsecret_key = AaaaAaaa\n# encryption provider key in the format <PROVIDER>.<KEY-NAME>\nencryption_provider = azurekv.example-encryption-key\n# list of configured key providers, space separated\navailable_encryption_providers =  azurekv.example-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying KV Pair Values in Grafana Go Templates\nDESCRIPTION: This Go template snippet defines a custom template that accesses properties from the CommonLabels KV object by key. It demonstrates how KV keys can be accessed via dot notation, returning string representations even if the original values are boolean or numeric. Use this approach when you need to include dynamic label data in your notification outputs. Input is a context object with .CommonLabels, and output is the string value associated with the 'grafana_folder' key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ .CommonLabels.grafana_folder }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Azure AD SAML Attribute URL for Other Claims (Email Example)\nDESCRIPTION: Shows an example URL (`http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress`) for mapping standard SAML assertion attributes, like email address, when using Azure AD with Grafana. Unlike group/role claims, these often use standard schema URLs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml-ui/index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\n```\n\n----------------------------------------\n\nTITLE: Listing Contents of Provisioning Directories in Grafana Pod - kubectl Bash\nDESCRIPTION: Runs commands to list contents of the main provisioning directory, and the 'alerting' subdirectory, inside the running Grafana pod. Helpful for verifying correct volume/mount configuration and existence of provisioned files such as 'alerting.yaml'. Complete this after mounting or copying provisioning folders, using the appropriate pod name and namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -n my-grafana <pod_name> -- ls /etc/grafana/provisioning/\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -n my-grafana <pod_name> -- ls /etc/grafana/provisioning/alerting\n\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Monitor Logs with Grafana Template Variables (KQL)\nDESCRIPTION: This Kusto Query Language (KQL) query retrieves performance data ('Perf' table) from an Azure Log Analytics workspace. It filters data based on Grafana template variables for object (`$object`), metric (`$metric`), and computer (`$computer`), within the dashboard's selected time range (`$__timeFrom()`, `$__timeTo()`). It then aggregates the average `CounterValue` over time intervals (`$__interval`) per `Computer` and sorts the results chronologically. The `$__contains` macro is used to handle potential multi-value `$computer` variables. Requires an Azure Monitor data source and defined variables in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\n```kusto\nPerf\n| where ObjectName == \"$object\" and CounterName == \"$metric\"\n| where TimeGenerated >= $__timeFrom() and TimeGenerated <= $__timeTo()\n| where  $__contains(Computer, $computer)\n| summarize avg(CounterValue) by bin(TimeGenerated, $__interval), Computer\n| order by TimeGenerated asc\n```\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Syntax for Templating Variables in PostgreSQL Query\nDESCRIPTION: Shows an alternative syntax for using templating variables in a PostgreSQL query. This example uses the [[varname]] syntax instead of $varname to include the hostname variable in the query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  atimestamp as time,\n  aint as value\nFROM table\nWHERE $__timeFilter(atimestamp) and hostname in([[hostname]])\nORDER BY atimestamp ASC\n```\n\n----------------------------------------\n\nTITLE: Authenticating Grafana API Requests with a Service Account Token\nDESCRIPTION: This shell command uses `curl` to send a GET request to the `/api/folders` endpoint. Authentication is performed using the Service Account Token generated in the previous step, passed in the `Authorization` header with the `Bearer` prefix. The response shows the folders accessible with the token's permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# now you can authenticate the same way as you did with the API key\ncurl --request GET --url http://localhost:3000/api/folders --header 'Authorization: Bearer glsa_9244xlVFZK0j8Lh4fU8Cz6Z5tO664zIi_7a762939'\n\n# response\n[{\"id\":1,\"uid\":\"a5261a84-eebc-4733-83a9-61f4713561d1\",\"title\":\"gdev dashboards\"}]%\n```\n\n----------------------------------------\n\nTITLE: Example Output of Common Labels and Annotations in Grafana Templates - template_output\nDESCRIPTION: Shows example notification output after rendering the shared labels and annotations template. Indicates one resolved and one firing alert, two common labels, and no common annotations. Outputs are plain text for notification consumption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_13\n\nLANGUAGE: template_output\nCODE:\n```\n1 resolved alert(s)\n1 firing alert(s)\nCommon labels: 2\n- grafana_folder = server_alerts\n- team = server_admin\n\nCommon annotations: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana HA Settings in grafana.ini (INI)\nDESCRIPTION: This INI configuration snippet shows the `[unified_alerting]` section settings required in `grafana.ini` (or `custom.ini`) to enable high availability in a Kubernetes environment. It uses the `POD_IP` environment variable (set up previously) for `ha_listen_address` and `ha_advertise_address`. The `ha_peers` setting points to the Kubernetes headless service (`grafana-alerting.grafana:9094`) for peer discovery. It also sets peer communication timeouts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting]\nenabled = true\nha_listen_address = \"${POD_IP}:9094\"\nha_peers = \"grafana-alerting.grafana:9094\"\nha_advertise_address = \"${POD_IP}:9094\"\nha_peer_timeout = 15s\nha_reconnect_timeout = 2m\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker with Debug Logging (Bash)\nDESCRIPTION: Starts a Grafana Enterprise Docker container with debug logging enabled for troubleshooting purposes. This is done by setting the `GF_LOG_LEVEL` environment variable to `debug` using the `-e` flag in the `docker run` command.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_LOG_LEVEL=debug\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Implementing a Grafana Service in Go\nDESCRIPTION: A complete example of a Grafana service implementation, showing the service structure, provider function, initialization, and implementing interfaces for background services and disabled services.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/services.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\n// Service service is the service responsible for X, Y and Z.\ntype Service struct {\n    logger   log.Logger\n    cfg      *setting.Cfg\n    sqlStore db.DB\n}\n\n// ProvideService provides Service as dependency for other services.\nfunc ProvideService(cfg *setting.Cfg, sqlStore db.DB) (*Service, error) {\n    s := &Service{\n        logger:     log.New(\"service\"),\n        cfg:        cfg,\n        sqlStore:   sqlStore,\n    }\n\n    if s.IsDisabled() {\n        // skip certain initialization logic\n        return s, nil\n    }\n\n    if err := s.init(); err != nil {\n        return nil, err\n    }\n\n    return s, nil\n}\n\nfunc (s *Service) init() error {\n    // additional initialization logic...\n    return nil\n}\n\n// IsDisabled returns true if the service is disabled.\n//\n// Satisfies the registry.CanBeDisabled interface that guarantees\n// that Run() isn't called if the service is disabled.\nfunc (s *Service) IsDisabled() bool {\n\treturn !s.cfg.IsServiceEnabled()\n}\n\n// Run runs the service in the background.\n//\n// Satisfies the registry.BackgroundService interface which\n// guarantees that the service can be registered as a background service.\nfunc (s *Service) Run(ctx context.Context) error {\n    // background service logic...\n    <-ctx.Done()\n    return ctx.Err()\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Grafana Enterprise Reports via API in Shell\nDESCRIPTION: This shell command uses `curl` to make an HTTP GET request to the `/api/reports` endpoint of the source Grafana Enterprise instance (specified by `$GRAFANA_ONPREM_INSTANCE_URL`). It authenticates using a Bearer token (`$GRAFANA_SOURCE_TOKEN`) provided in the Authorization header. The JSON response containing the report configurations is redirected and saved to a file named `reports.json`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl ${GRAFANA_ONPREM_INSTANCE_URL}/api/reports -H \"Authorization: Bearer $GRAFANA_SOURCE_TOKEN\" > reports.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Metrics in Grafana - INI\nDESCRIPTION: This snippet details the configuration needed to enable Grafana's internal metrics output for Prometheus and Graphite integration. The [metrics] section enables metrics endpoints at /metrics and /metrics/plugins/:pluginId, with flags to control overall output and whether stat_totals_* metrics are included. Place the snippet in grafana.ini or custom.ini, removing leading semicolons to activate. Parameters: enabled (bool), disable_total_stats (bool). Outputs include HTTP endpoints serving Grafana metrics as well as push to Graphite if enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Metrics available at HTTP URL /metrics and /metrics/plugins/:pluginId\\n[metrics]\\n# Disable / Enable internal metrics\\nenabled           = true\\n\\n# Disable total stats (stat_totals_*) metrics to be generated\\ndisable_total_stats = false\\n\n```\n\n----------------------------------------\n\nTITLE: Loki LogQL Query for Counting Non-200 Status Codes\nDESCRIPTION: A LogQL query that counts log lines with status codes other than 200 (OK) and sums the results by message type. Uses the pattern parser to extract message content from log entries and performs an instant query over a 10-minute interval.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_4\n\nLANGUAGE: logql\nCODE:\n```\nsum by (message)(count_over_time({filename=\"/var/log/web_requests.log\"} != \"status=200\" | pattern \"<_> <message> duration<_>\" [10m]))\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisite Packages for Grafana - Bash\nDESCRIPTION: Installs key packages needed to manage repositories and downloads securely before Grafana installation. Requires root privileges and an internet connection. Inputs: None. Outputs: Installs apt-transport-https, software-properties-common, and wget, preparing the system for secure repository access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y apt-transport-https software-properties-common wget\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Grafana Cloud Stack API Key Resources in Terraform\nDESCRIPTION: This Terraform example shows how to set up a Grafana provider using a cloud API key, declare a cloud stack resource, and provision a stack API key for management purposes. It requires the Grafana Terraform provider and a valid cloud API key. Key parameters include the stack name, slug, and region, as well as API key naming and role assignment. This approach is deprecated in favor of service accounts but illustrates the older integration method, providing a foundation for migration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    grafana = {\n      source = \"grafana/grafana\"\n    }\n  }\n}\n\n# Declaring the first provider to be only used for creating the cloud-stack\nprovider \"grafana\" {\n  alias = \"cloud\"\n\n  cloud_api_key = \"<API-Key>\"\n}\n\nresource \"grafana_cloud_stack\" \"my_stack\" {\n  provider = grafana.cloud\n\n  name        = \"my_stack\"\n  slug        = \"my_stack\"\n  region_slug = \"eu\" # Example “us”,”eu” etc\n}\n\n# Creating a Grafana API key to be used as auth\nresource \"grafana_cloud_stack_api_key\" \"management\" {\n  provider = grafana.cloud\n\n  stack_slug = grafana_cloud_stack.my_stack.slug\n  name       = \"management-key\"\n  role       = \"Admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Managing Datasources with Versioning and Pruning - YAML\nDESCRIPTION: This code snippet illustrates a comprehensive YAML configuration file for provisioning data sources in Grafana. It covers syntax for deleting data sources (deleteDatasources), enabling prune to remove sources when they are deleted from the file, and specifying data source details including name, type, connection, TLS authentication, and versioning for managing updates across instances. The snippet makes use of required and optional parameters, provides support for sensitive data via secureJsonData, and disables editing by setting editable to false. Requires a working Grafana instance and correct file placement within the provisioning directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Configuration file version\\napiVersion: 1\\n\\n# List of data sources to delete from the database.\\ndeleteDatasources:\\n  - name: Graphite\\n    orgId: 1\\n\\n# Mark provisioned data sources for deletion if they are no longer in a provisioning file.\\n# It takes no effect if data sources are already listed in the deleteDatasources section.\\nprune: true\\n\\n# List of data sources to insert/update depending on what's\\n# available in the database.\\ndatasources:\\n  # <string, required> Sets the name you use to refer to\\n  # the data source in panels and queries.\\n  - name: Graphite\\n    # <string, required> Sets the data source type.\\n    type: graphite\\n    # <string, required> Sets the access mode, either\\n    # proxy or direct (Server or Browser in the UI).\\n    # Some data sources are incompatible with any setting\\n    # but proxy (Server).\\n    access: proxy\\n    # <int> Sets the organization id. Defaults to orgId 1.\\n    orgId: 1\\n    # <string> Sets a custom UID to reference this\\n    # data source in other parts of the configuration.\\n    # If not specified, Grafana generates one.\\n    uid: my_unique_uid\\n    # <string> Sets the data source's URL, including the\\n    # port.\\n    url: http://localhost:8080\\n    # <string> Sets the database user, if necessary.\\n    user:\\n    # <string> Sets the database name, if necessary.\\n    database:\\n    # <bool> Enables basic authorization.\\n    basicAuth:\\n    # <string> Sets the basic authorization username.\\n    basicAuthUser:\\n    # <bool> Enables credential headers.\\n    withCredentials:\\n    # <bool> Toggles whether the data source is pre-selected\\n    # for new panels. You can set only one default\\n    # data source per organization.\\n    isDefault:\\n    # <map> Fields to convert to JSON and store in jsonData.\\n    jsonData:\\n      # <string> Defines the Graphite service's version.\\n      graphiteVersion: '1.1'\\n      # <bool> Enables TLS authentication using a client\\n      # certificate configured in secureJsonData.\\n      tlsAuth: true\\n      # <bool> Enables TLS authentication using a CA\\n      # certificate.\\n      tlsAuthWithCACert: true\\n    # <map> Fields to encrypt before storing in jsonData.\\n    secureJsonData:\\n      # <string> Defines the CA cert, client cert, and\\n      # client key for encrypted authentication.\\n      tlsCACert: '...'\\n      tlsClientCert: '...'\\n      tlsClientKey: '...'\\n      # <string> Sets the database password, if necessary.\\n      password:\\n      # <string> Sets the basic authorization password.\\n      basicAuthPassword:\\n    # <int> Sets the version. Used to compare versions when\\n    # updating. Ignored when creating a new data source.\\n    version: 1\\n    # <bool> Allows users to edit data sources from the\\n    # Grafana UI.\\n    editable: false\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Basic Role Permissions via YAML Provisioning - YAML Example\nDESCRIPTION: This YAML configuration snippet demonstrates updating the permissions for the 'basic:grafana_admin' basic role in Grafana via provisioning. It removes team role management permissions and adds folder read/write permissions, leveraging the role's versioning system for updates. Parameters include role name, version, permissions to add or remove, and scope. Requires access to Grafana provisioning and configuration reload. Input is a structured YAML; output is effective role modification upon reload.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 2\n\nroles:\n  - name: 'basic:grafana_admin'\n    global: true\n    version: 3\n    from:\n      - name: 'basic:grafana_admin'\n        global: true\n    permissions:\n      # Permissions to remove\n      - action: 'teams.roles:read'\n        scope: 'teams:*'\n        state: 'absent'\n      - action: 'teams.roles:remove'\n        scope: 'permissions:type:delegate'\n        state: 'absent'\n      - action: 'teams.roles:add'\n        scope: 'permissions:type:delegate'\n        state: 'absent'\n      # Permissions to add\n      - action: 'folders:read'\n        scope: 'folder:*'\n      - action: 'folders:write'\n        scope: 'folder:*'\n\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest in JSON\nDESCRIPTION: A JSON object defining the manifest for a Grafana plugin named 'test', version '1.0.0'. It includes metadata like manifest version ('2.0.0'), signature type ('grafana'), signing organization ('grafana'), timestamp, key ID, and a map of file names ('plugin.json', 'veryImportantFile') to their SHA256 checksums for integrity verification during plugin loading.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test\",\n  \"version\": \"1.0.0\",\n  \"time\": 1605809299800,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f\",\n    \"veryImportantFile\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana SAML Role Synchronization\nDESCRIPTION: This INI configuration example demonstrates setting up role synchronization within the `[auth.saml]` section. It specifies the SAML attribute containing role information (`assertion_attribute_role = role`) and maps specific values received from the IdP to Grafana roles (None, Viewer, Editor, Admin, Grafana Admin) using the `role_values_*` options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nassertion_attribute_role = role\nrole_values_none = none\nrole_values_viewer = external\nrole_values_editor = editor, developer\nrole_values_admin = admin, operator\nrole_values_grafana_admin = superadmin\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Organization Role Mapping\nDESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'roles' array. These values ('org_foo', 'org_bar', etc.) are used by Grafana's organization mapping configuration (`org_mapping`) to assign users to specific organizations with specific roles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": [\"org_foo\", \"org_bar\", \"another_org\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Correlation Creation Response in Grafana HTTP API\nDESCRIPTION: HTTP response returned when successfully creating a correlation between data sources. The response includes the created correlation details with a unique identifier.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"message\": \"Correlation created\",\n  \"result\": {\n    \"description\": \"Logs to Traces\",\n    \"label\": \"My Label\",\n    \"sourceUID\": \"uyBf2637k\",\n    \"targetUID\": \"PDDA8E780A17E7EF1\",\n    \"uid\": \"50xhMlg9k\",\n    \"type\": \"query\",\n    \"config\": {\n      \"field\": \"message\",\n      \"target\": {},\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Organization Mapping (`org_mapping`) in Grafana GitHub OAuth\nDESCRIPTION: Defines the syntax for the `org_mapping` setting, used to map GitHub teams to Grafana organizations and roles. Mappings are comma- or space-separated strings in the format `<ExternalGitHubTeamName>:<OrgIdOrName>:<Role>`. The wildcard `*` matches all users, and roles can be `None`, `Viewer`, `Editor`, or `Admin`. Role part is optional.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n<ExternalGitHubTeamName>:<OrgIdOrName>:<Role>\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n*\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNone, Viewer, Editor, Admin\n```\n\n----------------------------------------\n\nTITLE: Importing Grafana GPG Key using Bash\nDESCRIPTION: Downloads the Grafana GPG key using `wget` and imports it into the system's RPM keyring using `rpm --import`. This step is necessary to verify the authenticity of Grafana packages installed from the repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -q -O gpg.key https://rpm.grafana.com/gpg.key\nsudo rpm --import gpg.key\n```\n\n----------------------------------------\n\nTITLE: Creating PersistentVolumeClaim for Grafana Provisioning - Kubernetes YAML\nDESCRIPTION: Defines a Kubernetes PersistentVolumeClaim (PVC) named 'grafana-provisioning-pvc' for Grafana resource provisioning. The PVC requests 1Mi of storage and sets the access mode to ReadWriteOnce. This PVC must be referenced in the Grafana pod to provide access to provisioning configuration files, ensuring they are persistently available for Grafana on startup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: grafana-provisioning-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Mi\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Alerting and High Availability - Grafana INI\nDESCRIPTION: Provides INI section `[unified_alerting]` for enabling/disabling Grafana Alerting, controlling organization-level alerting, administering config/alertmanager poll intervals, and configuring High Availability (HA) using Redis. Parameters include `enabled`, `disabled_orgs`, polling intervals, Redis connection details (`ha_redis_address`, etc.), cluster peer names, HA-related timeouts, labels, and gossip settings. Redis setup is a prerequisite for HA. Key parameters impact alert delivery timing, cluster network usage, and reliability. All durations accept suffixes (ms, s, m, h, d), and network settings are colon-separated addresses.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting]\n# Enable or disable Grafana Alerting (default: true)\nenabled = true\n\n# Comma-separated list of organization IDs to disable unified alerting\n# disabled_orgs = \"1,2,3\"\n\n# Frequency of polling for configuration changes (default: 60s)\nadmin_config_poll_interval = 60s\n\n# Frequency of polling for Alertmanager config changes (default: 60s)\nalertmanager_config_poll_interval = 60s\n\n# Redis HA configuration\nha_redis_address = \"127.0.0.1:6379\"\n# ha_redis_username = \"redisuser\"\n# ha_redis_password = \"secret\"\nha_redis_db = 0\nha_redis_prefix = \"grafana_ha:\"\n\n# HA Peer options\nha_redis_peer_name = \"production-peer-1\"\nha_redis_max_conns = 50\nha_listen_address = \"0.0.0.0:9094\"\nha_advertise_address = \"my-grafana-instance:9094\"\nha_peers = \"host1:9094,host2:9094\"\nha_peer_timeout = 15s\nha_label = \"prod-cluster-1\"\nha_gossip_interval = 200ms\nha_reconnect_timeout = 5m\nha_push_pull_interval = 60s\n\n# Alert rule execution\nexecute_alerts = true\n# Evaluation timeout for data fetching (default: 30s)\nevaluation_timeout = 30s\nmax_attempts = 3\nmin_interval = 10s\n\n```\n\n----------------------------------------\n\nTITLE: Example Format of a PKCS#8 Private Key PEM Block\nDESCRIPTION: Illustrates the typical structure of a PKCS#8 private key file in PEM format. It shows the standard header (`-----BEGIN PRIVATE KEY-----`) and footer (`-----END PRIVATE KEY-----`) lines that enclose the Base64 encoded key data. This format is expected by Grafana for the `private_key_path` or `private_key` setting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\n...\n...\n-----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Querying Loki for Alert State History Data (LogQL)\nDESCRIPTION: This LogQL query is used within the Grafana Explore view to verify that alert state history data is being successfully written to the configured Loki instance. It selects log streams labeled with `from=\"state-history\"` (which Grafana uses by default) and pipes the results to the `json` parser to display the structured state change information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_2\n\nLANGUAGE: logql\nCODE:\n```\n{ from=\"state-history\" } | json\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Plugin from Custom URL - Bash\nDESCRIPTION: Explains installing a Grafana plugin directly from a custom URL by passing the full path via the 'GF_PLUGINS_PREINSTALL' environment variable. Input is of the form <plugin ID>@[<plugin version>]@<url>. Assumes Docker is running and the container has internet access to download the ZIP plugin archive; useful for custom or private plugins not available in the official repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_PLUGINS_PREINSTALL=custom-plugin@@https://github.com/VolkovLabs/custom-plugin.zip\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Health with cURL (Linux/MacOS, Bash)\nDESCRIPTION: This snippet utilizes curl to send an HTTP GET request to the Prometheus '/-/ready' health endpoint on localhost port 9090. If Prometheus is running and healthy, it will return an HTTP 200 status, confirming it is ready to handle requests. No authentication is assumed. This is typically used for basic health checks after a restart or deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s http://localhost:9090/-/ready\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Panel Column Names with SQL AS Syntax\nDESCRIPTION: This SQL query demonstrates how to change or customize column names in a Grafana Table panel using the SQL 'AS' keyword. The query joins the dashboard and user tables, filtering results by a time range, and renames columns for better display.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  title as \"Title\",\n  \"user\".login as \"Created By\",\n  dashboard.created as \"Created On\"\nFROM dashboard\nINNER JOIN \"user\" on \"user\".id = dashboard.created_by\nWHERE $__timeFilter(dashboard.created)\n```\n\n----------------------------------------\n\nTITLE: Requesting All Notification Template Groups - HTTP\nDESCRIPTION: This snippet demonstrates an HTTP GET request to retrieve all notification template groups from the Grafana provisioning API. The authentication is provided via an Authorization header, with both Accept and Content-Type set to application/json. The endpoint returns a list of template resources, which clients can use for notification customization within alerting flows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/templates\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana Dashboard with Team Authentication\nDESCRIPTION: Example showing how to access Grafana dashboard with user-specific team authentication headers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-WEBAUTH-USER: leonard\" -H \"X-WEBAUTH-GROUPS: lokiteamOnExternalSystem\" http://localhost:3000/dashboards/home\n```\n\n----------------------------------------\n\nTITLE: Setting Default Home Dashboard Path in Grafana Configuration (INI)\nDESCRIPTION: This configuration snippet sets the path to the default home dashboard used by Grafana. The 'default_home_dashboard_path' option should be set in the Grafana configuration file; if the value is empty, Grafana will use the fallback location defined by 'StaticRootPath' combined with 'dashboards/home.json'. Dependencies: a valid Grafana installation and access to the configuration file. Input is the file path to the JSON dashboard definition, and the output is that Grafana uses this dashboard as the default home dashboard. Ensure the path is correct and accessible to the Grafana server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/organization-preferences/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# Path to the default home dashboard. If this value is empty, then Grafana uses StaticRootPath + \"dashboards/home.json\"\ndefault_home_dashboard_path = data/main-dashboard.json\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Source Cache via Grafana HTTP API (HTTP)\nDESCRIPTION: This snippet demonstrates how to enable caching for a specific Grafana data source using a POST request to the `/api/datasources/:dataSourceUID/cache/enable` endpoint. It requires the `datasources.caching:write` permission scoped to `datasources:*`. The example shows the request format including headers and the expected JSON response upon successful enablement, indicating the cache status and configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/jZrmlLCGka/cache/enable HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n   \"message\": \"Data source cache enabled\",\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": true,\n   \"ttlQueriesMs\": 300000,\n   \"ttlResourcesMs\": 300000,\n   \"useDefaultTTL\": true,\n   \"defaultTTLMs\": 300000,\n   \"created\": \"2023-04-21T11:49:22-04:00\",\n   \"updated\": \"2023-04-24T16:30:29-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Correlations from a Source in Grafana HTTP API\nDESCRIPTION: HTTP request for retrieving all correlations that originate from a specific data source identified by sourceUID. This returns all correlations where the specified data source is the source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/uid/uyBf2637k/correlations HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Configuring nginx to Proxy Grafana - Nginx\nDESCRIPTION: Provides a full nginx configuration for proxying HTTP and Grafana's Live WebSocket connections. The config includes mapping for handling WebSocket upgrades, creation of an upstream block to target Grafana, and two location blocks (root and /api/live/) with proxy headers set appropriately. Place this inside nginx's http section. Key parameters include domain routing, proxy_set_header, and proxy_http_version for WebSocket support. Reload nginx after applying; ensure worker_connections are set high for large WebSocket loads.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# This is required to proxy Grafana Live WebSocket connections.\\nmap $http_upgrade $connection_upgrade {\\n  default upgrade;\\n  '' close;\\n}\\n\\nupstream grafana {\\n  server localhost:3000;\\n}\\n\\nserver {\\n  listen 80;\\n  root /usr/share/nginx/html;\\n  index index.html index.htm;\\n\\n  location / {\\n    proxy_set_header Host $host;\\n    proxy_pass http://grafana;\\n  }\\n\\n  # Proxy Grafana Live WebSocket connections.\\n  location /api/live/ {\\n    proxy_http_version 1.1;\\n    proxy_set_header Upgrade $http_upgrade;\\n    proxy_set_header Connection $connection_upgrade;\\n    proxy_set_header Host $host;\\n    proxy_pass http://grafana;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Enterprise License and Server URL (YAML/INI)\nDESCRIPTION: This snippet shows the content for a `grafana.ini` file, specifying the path to the Grafana Enterprise license file (`license_path`) and the root URL (`root_url`) for the Grafana instance. These settings are necessary for enabling enterprise features and ensuring correct URL generation within Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n[enterprise]\nlicense_path = /etc/grafana/license/license.jwt\n[server]\nroot_url =/your/license/root/url\n```\n```\n\n----------------------------------------\n\nTITLE: LogQL Label Filter Expression\nDESCRIPTION: Example of using the label filter syntax in LogQL queries for Loki\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: logql\nCODE:\n```\n{{hostname}}\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Temperature Data using Flux for Grafana Alerting\nDESCRIPTION: This Flux query retrieves temperature data for a specific tank ('A5') from an InfluxDB bucket ('RetroEncabulator'). It filters data by time range, measurement, tank ID, and field ('Temperature'), aggregates it using a mean function over a specified window period (v.windowPeriod), and yields the mean result. This query is intended as the data source ('A') for a Grafana alert rule.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_0\n\nLANGUAGE: flux\nCODE:\n```\n from(bucket: \"RetroEncabulator\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r[\"_measurement\"] == \"TemperatureData\")\n|> filter(fn: (r) => r[\"Tank\"] == \"A5\")\n|> filter(fn: (r) => r[\"_field\"] == \"Temperature\")\n|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n|> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Adding a User to Organization - HTTP\nDESCRIPTION: This HTTP POST request adds a global user to the current organization by submitting their login or email and role as a JSON payload. Requires proper authorization and org.users:add permission. Response includes userId and status message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/org/users HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"role\": \"Admin\",\\n  \"loginOrEmail\": \"admin\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Usage with Menu in Grafana UI (TypeScript)\nDESCRIPTION: This snippet demonstrates the basic implementation of a Dropdown component in Grafana UI using TypeScript (TSX). It imports necessary components (Dropdown, Menu, Button) and defines a simple Menu. The Dropdown component then uses this menu as its overlay, triggered by a Button component provided as its child. Clicking the button will reveal the menu.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Dropdown/Dropdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dropdown, Menu, Button } from '@grafana/ui';\n\nconst menu = (\n  <Menu>\n    <Menu.Item label=\"Google\" />\n    <Menu.Item label=\"Filter\" />\n  </Menu>\n);\n\nreturn (\n  <Dropdown overlay={menu}>\n    <Button icon=\"bars\" />\n  </Dropdown>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom CA Certificate to NSS Trust Store on Linux (Bash)\nDESCRIPTION: Shows the sequence of shell commands to add a custom root CA certificate (`internal-root-ca.crt.pem`) to the NSS (Network Security Services) database used by Chromium. It creates the database if it doesn't exist, imports the certificate using `certutil`, and sets the correct ownership for the `grafana` user. This allows the renderer to trust certificates signed by this CA.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[root@server ~]# [ -d /usr/share/grafana/.pki/nssdb ] || mkdir -p /usr/share/grafana/.pki/nssdb\n[root@server ~]# certutil -d sql:/usr/share/grafana/.pki/nssdb -A -n internal-root-ca -t C -i /etc/pki/tls/certs/internal-root-ca.crt.pem\n[root@server ~]# chown -R grafana: /usr/share/grafana/.pki/nssdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Contact Point - YAML\nDESCRIPTION: Sets up a Discord integration as a contact point for Grafana alerting. Requires a webhook URL and supports optional parameters such as avatar and username customization. The 'message' field may include templated content. Input parameters include all relevant Discord webhook configuration options. Integrates directly with Discord and requires no extra dependencies besides the webhook.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntype: discord\\nsettings:\\n  # <string, required>\\n  url: https://discord/webhook\\n  # <string>\\n  avatar_url: https://my_avatar\\n  # <bool>\\n  use_discord_username: false\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Admin Role Mapping (INI)\nDESCRIPTION: Grafana configuration snippet using `role_attribute_path` with a JMESPath expression to map the 'admin' value from the payload's 'roles' array to the special 'GrafanaAdmin' role. Critically, `allow_assign_grafana_admin` must be set to `true` to enable this privileged role assignment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = contains(roles[*], 'admin') && 'GrafanaAdmin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\nallow_assign_grafana_admin = true\n```\n\n----------------------------------------\n\nTITLE: Testing Option Selection in Select Components in Grafana\nDESCRIPTION: Test case demonstrating how to verify option selection in a Select component. It uses the selectOptionInTest utility function to simplify the selection process and verifies that the onChange callback is called with the correct value.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nit('should select an option', async () => {\n  const mockOnChange = jest.fn();\n  setup(\n    <>\n      <label htmlFor={'role-picker'}>Role picker</label>\n      <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={mockOnChange} />\n    </>\n  );\n  await selectOptionInTest(screen.getByRole('combobox', { name: 'Role picker' }), 'Viewer');\n  expect(mockOnChange).toHaveBeenCalledWith('Viewer');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.caching:writer\nDESCRIPTION: Specifies the `fixed:datasources.caching:writer` role (ID: `fixed_JtFjHr7jd7hSqUYcktKvRvIOGRE`) within Grafana. This role grants `datasources.caching:read` and `datasources.caching:write` permissions, allowing users to enable, disable, or update query caching settings for data sources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.caching:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_JtFjHr7jd7hSqUYcktKvRvIOGRE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- datasources.caching:read\n- datasources.caching:write\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Custom Alert Notification Templates with Go Template (Go)\nDESCRIPTION: This snippet demonstrates how to create reusable notification templates using the Go template language in Grafana. It defines partial templates for rendering a collection of alert objects, outputting their count, summary, status, and description fields. The templates rely on the .Alerts and .Annotations context objects provided by Grafana during notification evaluation. Input is the alert data structure from Grafana alerting; output is a formatted string suitable for notification channels. Requires knowledge of Grafana's notification pipeline and Go's templating syntax; users cannot add HTML/CSS or modify webhook structures beyond what is supported by Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.alerts\" -}}\n{{ len .Alerts }} alert(s)\n{{ range .Alerts -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Data Source in Grafana\nDESCRIPTION: Example SQL query for a PostgreSQL data source within Grafana. It selects the 'hostname' from the 'host' table where the 'region' column matches values provided by the Grafana template variable '$region'. This illustrates how template variables can be incorporated into data source queries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM host WHERE region IN($region)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Response Headers - INI Configuration\nDESCRIPTION: This snippet demonstrates how to add custom HTTP response headers in Grafana's configuration. It belongs to the `[server.custom_response_headers]` section; each header is defined as a key-value pair. Inputs are header names and their values; outputs are additional headers in every HTTP(S) response, with no constraints on header content other than standard HTTP/INI requirements. No external dependencies required—settings are applied by Grafana's server code based on the configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nexampleHeader1 = exampleValue1\\nexampleHeader2 = exampleValue2\\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Roles Based on Multiple GitHub Teams\nDESCRIPTION: Complex JMESPath expression that assigns different roles based on membership in multiple GitHub teams. Maps Admin, Editor, and Viewer roles to specific teams with a default of None.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = contains(groups[*], '@my-github-organization/admins') && 'Admin' || contains(groups[*], '@my-github-organization/devops') && 'Admin' || contains(groups[*], '@my-github-organization/engineers') && 'Editor' || contains(groups[*], '@my-github-organization/managers') && 'Editor' || contains(groups[*], '@my-github-organization/qa') && 'Viewer' || 'None'\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for CloudWatch Metrics-Only Access in JSON\nDESCRIPTION: This JSON configuration defines an AWS IAM policy granting permissions necessary for Grafana to read CloudWatch metrics, EC2 tags, instances, regions, alarms, and Performance Insights resource metrics. It allows actions like `cloudwatch:ListMetrics`, `cloudwatch:GetMetricData`, `ec2:DescribeInstances`, `tag:GetResources`, and `pi:GetResourceMetrics`. This policy should be attached to the IAM role or user Grafana uses for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowReadingMetricsFromCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudwatch:DescribeAlarmsForMetric\",\n        \"cloudwatch:DescribeAlarmHistory\",\n        \"cloudwatch:DescribeAlarms\",\n        \"cloudwatch:ListMetrics\",\n        \"cloudwatch:GetMetricData\",\n        \"cloudwatch:GetInsightRuleReport\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingTagsInstancesRegionsFromEC2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"ec2:DescribeTags\", \"ec2:DescribeInstances\", \"ec2:DescribeRegions\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingResourcesForTags\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"tag:GetResources\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingResourceMetricsFromPerformanceInsights\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"pi:GetResourceMetrics\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Folder with HTTP PUT Request\nDESCRIPTION: Example HTTP PUT request to update an existing folder identified by UID. The request includes the new title and the current version for concurrency control. Requires 'folders:write' permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/folders/nErXDvCkzz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"title\":\"Department DEF\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ClipboardButton with Input Component in React/JSX\nDESCRIPTION: Illustrates how to use the `ClipboardButton` as an `addonAfter` element within a Grafana `Input` component. The `Input` displays a `shareUrl` value and is set to `readOnly`. The `ClipboardButton` uses an icon ('copy'), has a 'primary' `variant`, and its `getText` prop retrieves the `shareUrl` variable for copying. The button's text content is 'Copy'.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClipboardButton/ClipboardButton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\n  id=\"link-url-input\"\n  value={shareUrl}\n  readOnly\n  addonAfter={\n    <ClipboardButton icon=\"copy\" variant=\"primary\" getText={() => shareUrl}>\n      Copy\n    </ClipboardButton>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Uncommenting Configuration in INI Files for Grafana\nDESCRIPTION: Example of a commented configuration line in a Grafana INI file. To use this setting, you need to remove the semicolon at the beginning of the line.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n;http_port = 3000\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana API Keys with Terraform (Legacy)\nDESCRIPTION: This Terraform configuration defines two `grafana_api_key` resources, 'foo' and 'bar'. It configures the Grafana provider using basic authentication and creates API keys with specified names, roles ('Viewer', 'Admin'), and optionally, a time-to-live (`seconds_to_live`). This uses the legacy approach before service accounts were preferred.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_5\n\nLANGUAGE: tf\nCODE:\n```\nterraform {\n  required_providers {\n    grafana = {\n      source  = \"grafana/grafana\"\n    }\n  }\n}\n\n# configure the provider with basic auth\nprovider \"grafana\" {\n  url  = \"http://localhost:3000\"\n  auth = \"admin:admin\"\n}\n\nresource \"grafana_api_key\" \"foo\" {\n  name = \"key_foo\"\n  role = \"Viewer\"\n}\n\nresource \"grafana_api_key\" \"bar\" {\n  name            = \"key_bar\"\n  role            = \"Admin\"\n  seconds_to_live = 30\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Cleanup in Go Wire Provider\nDESCRIPTION: Demonstrates how to create a provider that returns both a resource and its cleanup function. The example shows opening a file and providing a closure to properly close it, with error logging if the close operation fails.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc provideFile(log Logger, path Path) (*os.File, func(), error) {\n    f, err := os.Open(string(path))\n    if err != nil {\n        return nil, nil, err\n    }\n    cleanup := func() {\n        if err := f.Close(); err != nil {\n            log.Log(err)\n        }\n    }\n    return f, cleanup, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Secret Scanning in Grafana - INI\nDESCRIPTION: This INI snippet shows how to enable Grafana's secret scanning feature and configure automatic token revocation in the Grafana configuration file ([secretscan] section). The 'enabled' flag activates secret scanning, and 'revoke' determines whether exposed tokens are revoked or just notified. Dependencies include Grafana's configuration system. Required parameters are 'enabled' (boolean) and 'revoke' (boolean). Inputs: boolean values; Outputs: feature behavior. The configuration must be saved and Grafana restarted for changes to take effect.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[secretscan]\n# Enable secretscan feature\nenabled = true\n\n# Whether to revoke the token if a leak is detected or just send a notification\nrevoke = true\n```\n\n----------------------------------------\n\nTITLE: Mapping Organization Roles with org_mapping in Grafana - INI\nDESCRIPTION: This snippet demonstrates how to use the org_mapping configuration option in Grafana’s INI file to map Entra ID group IDs to specific Grafana organizations and roles. Include this in your relevant INI section to associate external group membership with the Viewer or Editor role for particular organizations, using the pattern <group_id>:<org_name>:<role>. The wildcard entry (\"*\") applies to any group not explicitly listed. Requires Entra ID group object IDs and correct organization names; ensure role values match Grafana’s supported roles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\norg_mapping = [\"032cb8e0-240f-4347-9120-6f33013e817a:org_foo:Viewer\", \"bce1c492-0679-4989-941b-8de5e6789cb9:org_bar:Editor\", \"*:org_baz:Editor\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Formats in Grafana with INI Settings - INI\nDESCRIPTION: This snippet provides an example of how to configure custom date and time formats in the Grafana settings file using the INI file syntax. The configuration options, defined under the [date_formats] section, allow you to set patterns for full dates as well as for various zoom levels such as seconds, minutes, hours, days, months, and years. Each setting customizes how dates and times appear throughout the Grafana UI, including the time range picker and graphs. This configuration requires access to the Grafana server configuration file and adherence to INI syntax, with expected string formats following Moment.js formatting conventions. The inputs are string date patterns, and the outputs affect the UI presentation of dates across panels and dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-2.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[date_formats]\nfull_date = MMM Do, YYYY @ hh:mm:ss a\ninterval_second = hh:mm:ss a\ninterval_minute = hh:mm a\ninterval_hour = MMM DD hh:mm a\ninterval_day = MMM DD\ninterval_month = YYYY-MM\ninterval_year = YYYY\n```\n\n----------------------------------------\n\nTITLE: Printing Variables and Values in Go Templates - Go\nDESCRIPTION: This snippet demonstrates various ways to print variables, field values, and the output of functions using the Go template language in Grafana notification and alert rule templates. It showcases printing a simple variable, accessing a struct field, using a function with an argument, and printing the dot context. The syntax uses double curly braces for interpolation; dependencies include knowledge of variables available in Grafana template contexts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/language.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ $values }}\n{{ $values.A.Value }}\n{{ humanize 1000.0 }}\n{{ .Alerts }}\n```\n\n----------------------------------------\n\nTITLE: Custom Grafana Configuration for Docker Walkthrough\nDESCRIPTION: Grafana configuration file for Docker-based walkthrough, enabling auth proxy authentication and configuring user signup settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[users]\nallow_sign_up = false\nauto_assign_org = true\nauto_assign_org_role = Editor\n\n[auth.proxy]\nenabled = true\nheader_name = X-WEBAUTH-USER\nheader_property = username\nauto_sign_up = true\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Resources for Grafana Enterprise Deployment (YAML)\nDESCRIPTION: This multi-document YAML file defines the necessary Kubernetes resources for deploying Grafana Enterprise. It includes a PersistentVolumeClaim (`grafana-pvc`) for persistent storage, a Deployment (`grafana`) to manage the Grafana pods using the `grafana/grafana-enterprise:latest` image, and a Service (`grafana`) of type LoadBalancer to expose Grafana on port 3000. The Deployment mounts volumes for data (`grafana-pv`), configuration (`ge-config` ConfigMap), and the license (`ge-license` Secret). Resource requests and limits, along with a readiness probe, are also configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: grafana-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: grafana\n  name: grafana\nspec:\n  selector:\n    matchLabels:\n      app: grafana\n  template:\n    metadata:\n      labels:\n        app: grafana\n    spec:\n      securityContext:\n        fsGroup: 472\n        supplementalGroups:\n          - 0\n      containers:\n        - image: grafana/grafana-enterprise:latest\n          imagePullPolicy: IfNotPresent\n          name: grafana\n          ports:\n            - containerPort: 3000\n              name: http-grafana\n              protocol: TCP\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /robots.txt\n              port: 3000\n              scheme: HTTP\n            initialDelaySeconds: 10\n            periodSeconds: 30\n            successThreshold: 1\n            timeoutSeconds: 2\n          resources:\n            limits:\n              memory: 4Gi\n            requests:\n              cpu: 100m\n              memory: 2Gi\n          volumeMounts:\n            - mountPath: /var/lib/grafana\n              name: grafana-pv\n            - mountPath: /etc/grafana\n              name: ge-config\n            - mountPath: /etc/grafana/license\n              name: ge-license\n      volumes:\n        - name: grafana-pv\n          persistentVolumeClaim:\n            claimName: grafana-pvc\n        - name: ge-config\n          configMap:\n            name: ge-config\n        - name: ge-license\n          secret:\n            secretName: ge-license\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\nspec:\n  ports:\n    - port: 3000\n      protocol: TCP\n      targetPort: http-grafana\n  selector:\n    app: grafana\n  sessionAffinity: None\n  type: LoadBalancer\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Restricted SQL User with SELECT Permissions in Microsoft SQL Server\nDESCRIPTION: SQL commands to create a dedicated database user with restricted SELECT permissions for Grafana to safely query data, helping prevent destructive queries from being executed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER grafanareader WITH PASSWORD 'password'\nGRANT SELECT ON dbo.YourTable3 TO grafanareader\n```\n\n----------------------------------------\n\nTITLE: Running Database Integration Tests\nDESCRIPTION: Commands for running SQLite, PostgreSQL and MySQL integration tests\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test -covermode=atomic -tags=integration ./pkg/...\nmake test-go-integration-mysql\nmake test-go-integration-postgres\n```\n\n----------------------------------------\n\nTITLE: Provisioning a TestData Data Source in Grafana - YAML\nDESCRIPTION: This YAML manifest provisions a 'TestData' data source for Grafana. Place this content in a file named 'default.yaml' under the 'provisioning/datasources/' directory. This file specifies 'apiVersion: 1' and defines a list of datasources to provision. It requires no additional dependencies, but Grafana must be restarted after changes. All key-value pairs and structure must be preserved to function correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\ndatasources:\\n  - name: TestData\\n    type: testdata\\n\n```\n\n----------------------------------------\n\nTITLE: Filesystem Directory Structure Example for Grafana Dashboards\nDESCRIPTION: Example directory structure showing how dashboard JSON files can be organized in folders for provisioning into Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/etc/dashboards\n├── /server\n│   ├── /common_dashboard.json\n│   └── /network_dashboard.json\n└── /application\n    ├── /requests_dashboard.json\n    └── /resources_dashboard.json\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Annotations with Epoch Time Column (SQL)\nDESCRIPTION: SQL query example for fetching Grafana annotations where the time information is stored in an epoch timestamp column named `epoch_time`. It uses the Grafana macro `$__unixEpochFilter` for time range filtering based on the dashboard's time range and maps database columns (`epoch_time`, `metric1`, `tag1`, `tag2`) to the required Grafana annotation fields (`time`, `text`, `tags`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  epoch_time as time,\n  metric1 as text,\n  CONCAT(tag1, ',', tag2) as tags\nFROM\n  public.test_data\nWHERE\n  $__unixEpochFilter(epoch_time)\n```\n\n----------------------------------------\n\nTITLE: Example Full SAML Configuration in Grafana INI\nDESCRIPTION: Presents a complete example `[auth.saml]` section for Grafana's configuration file. It demonstrates various settings including enabling SAML, certificate paths, IdP metadata, assertion attribute mapping for login, email, groups, roles, and organizations, role value mappings, organization mappings, and allowed organizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nenabled = true\nauto_login = false\ncertificate_path = \"/path/to/certificate.cert\"\nprivate_key_path = \"/path/to/private_key.pem\"\nidp_metadata_path = \"/my/metadata.xml\"\nmax_issue_delay = 90s\nmetadata_valid_duration = 48h\nassertion_attribute_name = displayName\nassertion_attribute_login = mail\nassertion_attribute_email = mail\n\nassertion_attribute_groups = Group\nassertion_attribute_role = Role\nassertion_attribute_org = Org\nrole_values_viewer = external\nrole_values_editor = editor, developer\nrole_values_admin = admin, operator\nrole_values_grafana_admin = superadmin\norg_mapping = Engineering:2:Editor, Engineering:3:Viewer, Sales:3:Editor, *:1:Editor\nallowed_organizations = Engineering, Sales\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Insights Export in Grafana (INI Configuration) - ini\nDESCRIPTION: This snippet demonstrates how to enable the usage insights export feature in Grafana using INI configuration. To use it, set these values in your Grafana configuration file, ensuring the 'enabled' flag is set to true and 'storage' type is set to either 'loki' or 'logger'. No external dependencies are required beyond adjusting the config file. Inputs include boolean for 'enabled' and string for 'storage'. Outputs are enabled log exporting for usage insights data; this requires a Grafana Enterprise or Cloud Pro edition.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[usage_insights.export]\n# Enable the usage insights export feature\nenabled = true\n# Storage type\nstorage = loki\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Dashboards - Grafana INI\nDESCRIPTION: This section groups settings for Grafana's shared dashboards feature, allowing dashboards to be publicly accessible. The header itself organizes subsequent keys related to shared dashboards. It requires a compatible Grafana version supporting public dashboard sharing, with specific feature toggles (like 'enabled') under this section.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: ini\nCODE:\n```\n[public_dashboards]\n```\n\n----------------------------------------\n\nTITLE: Base64-Encoding Certificate and Key Files (Shell)\nDESCRIPTION: Uses the `base64` command-line tool to encode the previously generated `key.pem` and `cert.pem` files into `key.pem.base64` and `cert.pem.base64` respectively. This encoding is necessary when configuring Grafana to use the certificate and private key content directly via the `certificate` and `private_key` options, rather than file paths. The `-w0` switch prevents line wrapping and is noted as unnecessary on macOS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ base64 -i key.pem -o key.pem.base64\n$ base64 -i cert.pem -o cert.pem.base64\n```\n\n----------------------------------------\n\nTITLE: Running Grafana with AWS Credentials via Docker Secrets (Bash)\nDESCRIPTION: Runs the `grafana/grafana-enterprise` container, configuring AWS credentials using Docker Secrets. It sets environment variables ending with `__FILE` (e.g., `GF_AWS_default_ACCESS_KEY_ID__FILE`) to point Grafana to the secret files mounted at `/run/secrets/` within the container. Requires previously created Docker secrets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name grafana \\\n  -e \"GF_DEFAULT_INSTANCE_NAME=my-grafana\" \\\n  -e \"GF_AWS_PROFILES=default\" \\\n  -e \"GF_AWS_default_ACCESS_KEY_ID__FILE=/run/secrets/aws_access_key_id\" \\\n  -e \"GF_AWS_default_SECRET_ACCESS_KEY__FILE=/run/secrets/aws_secret_access_key\" \\\n  -e \"GF_AWS_default_REGION__FILE=/run/secrets/aws_region\" \\\n  -v grafana-data:/var/lib/grafana \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Checking Data Source Health by UID in HTTP\nDESCRIPTION: Sends a GET request to check the health of a data source identified by UID. This is the current recommended method for health checks.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET api/datasources/uid/P8045C56BDA891CB2/health HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud KMS Provider in grafana.ini (INI Configuration - ini)\nDESCRIPTION: This snippet demonstrates how to define a Google Cloud KMS encryption provider section in the grafana.ini configuration file. It provides an example layout with parameters such as key_id and credentials_file, which reference the KMS key's resource ID and the path to a service account JSON key. Required prerequisites include a valid Google Cloud KMS key, a corresponding service account, and the appropriate credential file. The section must be uniquely named and commented lines (prefixed with ; or #) can be included for context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Example of Google Cloud KMS provider setup\\n;[security.encryption.googlekms.example-encryption-key]\\n# Google Cloud KMS key ID\\nkey_id = 1234abcd-12ab-34cd-56ef-1234567890ab\\n# Full path to a JSON file with a service account key\\ncredentials_file = ~/.config/gcloud/sample-project-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MySQL Provisioning in Grafana\nDESCRIPTION: This YAML configuration sets up a basic MySQL datasource in Grafana. It specifies connection details, database name, and connection pool settings. The password is stored as a secure JSON data using an environment variable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    user: grafana\n    jsonData:\n      database: grafana\n      maxOpenConns: 100\n      maxIdleConns: 100\n      maxIdleConnsAuto: true\n      connMaxLifetime: 14400\n    secureJsonData:\n      password: ${GRAFANA_MYSQL_PASSWORD}\n```\n\n----------------------------------------\n\nTITLE: Mapping Server Administrator Role\nDESCRIPTION: JMESPath expression that grants both the Admin organization role and the Grafana server admin role to a specific GitHub user, while giving all other users Viewer role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = [login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Lookup User by Login or Email - Response Example (json)\nDESCRIPTION: Supplies the full JSON user profile as returned by the lookup endpoint, verifying correct user identification by either login or email. Highlights the returned information's completeness for authentication or account management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": 1,\\n  \"email\": \"user@mygraf.com\",\\n  \"name\": \"admin\",\\n  \"login\": \"admin\",\\n  \"theme\": \"light\",\\n  \"orgId\": 1,\\n  \"isGrafanaAdmin\": true,\\n  \"isDisabled\": false,\\n  \"isExternal\": false,\\n  \"authLabels\": null,\\n  \"updatedAt\": \"2019-09-25T14:44:37+01:00\",\\n  \"createdAt\": \"2019-09-25T14:44:37+01:00\",\\n  \"avatarUrl\":\"\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Encryption Provider in grafana.ini (Security Section - ini)\nDESCRIPTION: This snippet shows the required modifications to the [security] section in grafana.ini to activate the new Google Cloud KMS key as the encryption provider. Parameters include secret_key (legacy or fallback key), encryption_provider (specifies the active provider), and available_encryption_providers (defines the allowed key providers). This enables Grafana to use the newly defined KMS configuration for cryptographic operations. The section should reference the provider key as configured previously and may retain legacy parameters for backward compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[security]\\n# previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured\\nsecret_key = AaaaAaaa\\n# encryption provider key in the format <PROVIDER>.<KEY-NAME>\\nencryption_provider = googlekms.example-encryption-key\\n# list of configured key providers, space separated\\navailable_encryption_providers = googlekms.example-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Storage Folders and Dashboards - INI\nDESCRIPTION: This snippet provides baseline INI configuration for enabling folders to be backed by Unified Storage in Grafana. It enables experimental API features and unified storage support for folders and dashboards, sets the dualWriterMode to 4 (read and write from unified), and configures the API server storage type. Required dependencies include an up-to-date version of Grafana with Unified Storage support; changes should be written into the main config file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n; need to specify target here for override to work later\\ntarget = all\\n\\n[server]\\n; https is required for kubectl\\nprotocol = https\\n\\n[feature_toggles]\\ngrafanaAPIServerWithExperimentalAPIs = true\\nkubernetesClientDashboardsFolders = true\\n\\n[unified_storage.folders.folder.grafana.app]\\ndualWriterMode = 4\\n\\n[unified_storage.dashboards.dashboard.grafana.app]\\ndualWriterMode = 4\\n\\n[grafana-apiserver]\\n; use unified storage for k8s apiserver\\nstorage_type = unified\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Data Keys using Grafana CLI\nDESCRIPTION: Uses the Grafana CLI to re-encrypt existing data encryption keys (DEKs) with a specified key encryption key (KEK). This allows updating to a new KEK version or switching to a different KEK, often used with KMS integrations. It is recommended to run this command during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngrafana cli admin secrets-migration re-encrypt-data-keys\n```\n\n----------------------------------------\n\nTITLE: Provisioning a MySQL Datasource using Vault Secrets in YAML\nDESCRIPTION: This YAML snippet, intended for a provisioning file (e.g., `provisioning/custom.yaml`), defines a MySQL data source named 'statistics'. It uses the `$__vault{}` syntax to dynamically retrieve the database username and password from Vault's database secrets engine at runtime.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: statistics\n    type: mysql\n    url: localhost:3306\n    database: stats\n    user: $__vault{database:database/creds/ro/stats:username}\n    secureJsonData:\n      password: $__vault{database:database/creds/ro/stats:password}\n```\n\n----------------------------------------\n\nTITLE: Searching Users via Grafana HTTP API (http)\nDESCRIPTION: Demonstrates how to use an authenticated HTTP GET request to search for users using the User HTTP API. The example includes headers for JSON requests and basic authentication. The 'perpage' and 'page' query parameters control pagination, and the endpoint requires a Grafana admin user.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Chrome/Chromium Binary - Bash\nDESCRIPTION: Sets the CHROME_BIN environment variable to specify a custom path to the Chrome or Chromium executable for use in remote rendering. The path must point to a compatible Chrome/Chromium version. Used when the default packaged Chromium is not desired.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nCHROME_BIN=\"/usr/bin/chromium-browser\"\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana User Account - Shell\nDESCRIPTION: Creates a dedicated user account named 'grafana' with no login shell for running the Grafana service. Use 'sudo' for elevated privileges. Prerequisites: useradd available, no existing user 'grafana'. No inputs required; output: user 'grafana' added to system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd -r -s /bin/false grafana\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Component with Field Overrides in React\nDESCRIPTION: This snippet demonstrates how to use the Table component in conjunction with the applyFieldOverrides function from @grafana/data. It sets up custom field configurations and applies them to the data before rendering the table.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Table/Table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { DataFrame, applyFieldOverrides, GrafanaTheme2 } from '@grafana/data';\nimport { Table, useTheme2 } from '@grafana/ui';\n\nconst TableComponent = (dataFrame: DataFrame) => {\n  const theme = useTheme2();\n  const displayData = applyFieldOverrides({\n    data: dataFrame,\n    fieldConfig: {\n      defaults: {\n        custom: {\n          align: 'auto',\n          cellOptions: {\n            type: 'gauge',\n            mode: 'gradient',\n          },\n          inspect: false,\n        },\n        mappings: [],\n        unit: 'locale',\n      },\n      overrides: [],\n    },\n    theme,\n    replaceVariables: (value) => value,\n  });\n\n  return (\n    <Table\n      data={displayData}\n      width={1000}\n      height={400}\n      columnMinWidth={50}\n      footerOptions={{ show: true, reducer: ['sum'] }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Rollout Status with Kubectl (Bash)\nDESCRIPTION: Executes `kubectl rollout status` to monitor and report the progress of a deployment rollout ('grafana') within a specific namespace ('my-grafana'). It's used after initiating an update (e.g., via `kubectl edit` or `kubectl apply`) or a rollback (`kubectl rollout undo`) to confirm successful completion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout status deployment grafana --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout status deployment grafana --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Delete a Contact Point by UID - HTTP\nDESCRIPTION: This snippet provides the HTTP request format for deleting a given contact point by UID in the provisioning API. DELETE is performed on /contact-points/:uid. Requires the unique identifier in the path, and relies on proper authentication and provisioning permissions. Used for programmatic management of alerting contact endpoints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/provisioning/contact-points/:uid\n```\n\n----------------------------------------\n\nTITLE: Updating All Properties of an Annotation via Grafana HTTP API - HTTP+JSON\nDESCRIPTION: Shows how to completely update an existing annotation using a PUT request. The JSON payload must provide all properties to be updated, such as time, timeEnd, text, and tags. Requires authentication and returns a confirmation message upon success.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/annotations/1141 HTTP/1.1\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\nContent-Type: application/json\\n\\n{\\n  \"time\":1507037197339,\\n  \"timeEnd\":1507180805056,\\n  \"text\":\"Annotation Description\",\\n  \"tags\":[\"tag3\",\"tag4\",\"tag5\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Role Assignment from a Service Account (HTTP DELETE)\nDESCRIPTION: Sends a DELETE request to revoke a role from a service account. It includes the required permissions and query parameters for the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/access-control/users/1/roles/AFUXBHKnk\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Provisioning Tempo Data Source in Grafana with YAML\nDESCRIPTION: This YAML snippet defines the Tempo data source configuration for provisioning within Grafana. It specifies connection properties, integration with logs (Loki), metrics (Prometheus), and profiling (Pyroscope) data sources, and enables features such as service maps and node graphs. Key parameters include UIDs for associated data sources, time shift settings, tags, and custom query fields. This setup requires a working Grafana instance and pre-existing data sources with specified UIDs. Inputs are static (file-based), and the output is a Grafana instance with the configured and provisioned Tempo data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/configure-tempo-data-source.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\ndatasources:\\n  - name: Tempo\\n    type: tempo\\n    uid: EbPG8fYoz\\n    url: http://localhost:3200\\n    access: proxy\\n    basicAuth: false\\n    jsonData:\\n      tracesToLogsV2:\\n        # Field with an internal link pointing to a logs data source in Grafana.\\n        # datasourceUid value must match the uid value of the logs data source.\\n        datasourceUid: 'loki'\\n        spanStartTimeShift: '-1h'\\n        spanEndTimeShift: '1h'\\n        tags: ['job', 'instance', 'pod', 'namespace']\\n        filterByTraceID: false\\n        filterBySpanID: false\\n        customQuery: true\\n        query: 'method=\"$${__span.tags.method}\"'\\n      tracesToMetrics:\\n        datasourceUid: 'prom'\\n        spanStartTimeShift: '-1h'\\n        spanEndTimeShift: '1h'\\n        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]\\n        queries:\\n          - name: 'Sample query'\\n            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'\\n      tracesToProfiles:\\n        datasourceUid: 'grafana-pyroscope-datasource'\\n        tags: ['job', 'instance', 'pod', 'namespace']\\n        profileTypeId: 'process_cpu:cpu:nanoseconds:cpu:nanoseconds'\\n        customQuery: true\\n        query: 'method=\"$${__span.tags.method}\"'\\n      serviceMap:\\n        datasourceUid: 'prometheus'\\n      nodeGraph:\\n        enabled: true\\n      search:\\n        hide: false\\n      traceQuery:\\n        timeShiftEnabled: true\\n        spanStartTimeShift: '-1h'\\n        spanEndTimeShift: '1h'\\n      spanBar:\\n        type: 'Tag'\\n        tag: 'http.path'\\n      streamingEnabled:\\n        search: true\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Key/Value Template Variable Options - SQL\nDESCRIPTION: Returns two columns with aliases '__text' for display name and '__value' for backend value, from 'my_host'. Enables drop-down options to show user-friendly text while storing the underlying id using Grafana's template variable conventions. MySQL 'my_host' table must contain 'hostname' and 'id'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname AS __text, id AS __value FROM my_host\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folder by UID with HTTP GET Request\nDESCRIPTION: Example HTTP GET request to retrieve a specific folder by its unique identifier (UID). Requires 'folders:read' permission with appropriate scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/folders/nErXDvCkzzh HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notification Template by ID with HTTP GET - HTTP\nDESCRIPTION: This HTTP code snippet demonstrates retrieving a single notification template by its unique identifier using the GET method. No authentication headers or request body are shown, and successful responses return a NotificationTemplate with code 200, while missing templates yield a 404 error with a GenericPublicError. The endpoint requires the user's authorization context and expects results in JSON format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_29\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v1/provisioning/templates/:id\n```\n\n----------------------------------------\n\nTITLE: Provisioning CloudWatch Data Source Using AWS SDK Default\nDESCRIPTION: YAML configuration for provisioning CloudWatch data source using AWS SDK default authentication and specifying a default region.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\ndatasources:\n  - name: CloudWatch\n    type: cloudwatch\n    jsonData:\n      authType: default\n      defaultRegion: eu-west-2\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana to Apply Log Level Change - Bash\nDESCRIPTION: This Helm upgrade command redeploys Grafana with modified logging parameters, ensuring the debug log level is applied. Must be run after editing values.yaml as described. Requires Helm and access to the 'monitoring' namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Listing Pods in Namespace with Kubectl (Bash)\nDESCRIPTION: Uses `kubectl get pods` to list all pods running within the specified 'my-grafana' namespace. This is necessary to identify the exact Grafana pod name required for commands like `kubectl port-forward`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Provisioning Grafana Entities and Role Assignment using Terraform\nDESCRIPTION: This Terraform configuration snippet defines resources for creating a Grafana team ('test_team'), a user ('test_user'), and a service account ('test_sa'). It then uses the 'grafana_role_assignment' resource to assign a custom role (referenced via 'grafana_role.my_new_role.uid', presumably defined in a previous step) to the newly created user, team, and service account. Note that the user resource requires substituting '<TEST_PASSWORD>' with an actual password.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_team\" \"test_team\" {\n\tname = \"terraform_test_team\"\n}\n\nresource \"grafana_user\" \"test_user\" {\n\temail = \"terraform_user@test.com\"\n\tlogin    = \"terraform_test_user\"\n\tpassword = <TEST_PASSWORD>\n}\n\nresource \"grafana_service_account\" \"test_sa\" {\n  name = \"terraform_test_sa\"\n  role = \"Viewer\"\n}\n\nresource \"grafana_role_assignment\" \"my_new_role_assignment\" {\n  role_uid = grafana_role.my_new_role.uid\n  users = [grafana_user.test_user.id]\n  teams = [grafana_team.test_team.id]\n  service_accounts = [grafana_service_account.test_sa.id]\n}\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Grafana Secrets via CLI\nDESCRIPTION: Optional command-line instruction using the Grafana CLI to re-encrypt all existing secrets (like data source credentials) stored within the Grafana database using the newly configured AWS KMS key. This command should be run from the Grafana root directory after restarting Grafana with the updated configuration. This ensures all secrets are protected by the new KMS key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli admin secrets-migration re-encrypt\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Organization Mapping with Roles in Grafana INI\nDESCRIPTION: Demonstrates setting the `assertion_attribute_org` and `org_mapping` parameters within the `[auth.saml]` section of the Grafana configuration file. This example maps users from 'Engineering' to Grafana Org ID 2 as Editor and 'Sales' to Org ID 3 as Admin, based on the 'Org' attribute from the IdP.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nassertion_attribute_org = Org\norg_mapping = Engineering:2:Editor, Sales:3:Admin\n```\n\n----------------------------------------\n\nTITLE: Collecting Heap Profiles (Bash)\nDESCRIPTION: Commands to collect multiple heap profiles using curl for memory analysis.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://<profile-addr>:<profile-port>/debug/pprof/heap > heap1.pprof\nsleep 30\ncurl http://<profile-addr>:<profile-port>/debug/pprof/heap > heap2.pprof\n```\n\n----------------------------------------\n\nTITLE: Generating LetsEncrypt Certificates with Certbot Standalone (Bash)\nDESCRIPTION: Executes `certbot certonly --standalone` which initiates an interactive process to obtain SSL certificates from LetsEncrypt. It requires user input for email and domain name(s). The `--standalone` flag causes `certbot` to temporarily run its own web server on port 80 for domain validation. Requires `sudo` privileges, `certbot` installed, and port 80 to be open.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo certbot certonly --standalone\n\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nEnter email address (used for urgent renewal and security notices)\n(Enter 'c' to cancel): me@mysite.com\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must\nagree in order to register with the ACME server. Do you agree?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: y\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nWould you be willing, once your first certificate is successfully issued, to\nshare your email address with the Electronic Frontier Foundation, a founding\npartner of the Let’s Encrypt project and the non-profit organization that\ndevelops Certbot? We’d like to send you email about our work encrypting the web,\nEFF news, campaigns, and ways to support digital freedom.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: n\nAccount registered.\nPlease enter the domain name(s) you would like on your certificate (comma and/or\nspace separated) (Enter 'c' to cancel): subdomain.mysite.com\nRequesting a certificate for subdomain.mysite.com\n\nSuccessfully received certificate.\nCertificate is saved at: /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem\nKey is saved at:         /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem\nThis certificate expires on 2023-06-20.\nThese files will be updated when the certificate renews.\nCertbot has set up a scheduled task to automatically renew this certificate in the background.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nIf you like Certbot, please consider supporting our work by:\n* Donating to ISRG / Let’s Encrypt:   https://letsencrypt.org/donate\n* Donating to EFF:                    https://eff.org/donate-le\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n----------------------------------------\n\nTITLE: Rendering a Field Component with Input (React JSX)\nDESCRIPTION: This example demonstrates how to use the Field component to wrap an Input element in a React form. The Field accepts label and description props, while the nested Input receives id and onChange handlers. The snippet shows recommended usage for composing labeled form inputs, typical in React/Grafana UI. Inputs include props: label, description, id, and onChange. Outputs a labeled form field with an interactive input box.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Field.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label={...} description={...}>\n  <Input id=\"userName\"  onChange={...}/>\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Calculating Per-CPU Usage Rate in PromQL for Multi-Instance Alerting\nDESCRIPTION: This PromQL query calculates the rate of CPU seconds consumed per CPU (excluding idle time) over the last minute. It's used within a Grafana Alert Rule to demonstrate how a single rule can generate multiple alert instances, one for each unique value of the 'cpu' label. Requires a Prometheus data source providing the `node_cpu_seconds_total` metric.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum by(cpu) (\n  rate(node_cpu_seconds_total{mode!=\"idle\"}[1m])\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping by Time with Multiple Aggregated Columns - SQL\nDESCRIPTION: Aggregates minimum and maximum of 'value_double' using MIN and MAX over 5-minute intervals from 'test_data', returning both min and max alongside the time grouping. Optimized for displaying metric ranges in a single panel. Requires 'time_date_time' and 'value_double' fields.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(time_date_time,'5m'),\n  min(value_double) as min_value,\n  max(value_double) as max_value\nFROM test_data\nWHERE $__timeFilter(time_date_time)\nGROUP BY time\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Account Tokens - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates obtaining the tokens associated with a specific service account by sending a GET request to the tokens sub-endpoint. The response consists of a JSON array, where each element is a token object with columns such as id, name, role, created, expiration, secondsUntilExpiration, and hasExpired.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /api/serviceaccounts/2/tokens HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n[\\n\\t{\\n\\t\\t\"id\": 1,\\n\\t\\t\"name\": \"grafana\",\\n\\t\\t\"role\": \"Viewer\",\\n\\t\\t\"created\": \"2022-03-23T10:31:02Z\",\\n\\t\\t\"expiration\": null,\\n\\t\\t\"secondsUntilExpiration\": 0,\\n\\t\\t\"hasExpired\": false\\n\\t}\\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Deployment Logs - kubectl Bash\nDESCRIPTION: Shows commands to fetch logs of the Grafana deployment in a Kubernetes namespace. The first command retrieves logs from a single-container deployment. The second retrieves from a specific container named 'grafana' in case of multi-container deployments. Helps with troubleshooting startup and provisioning issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# dump Pod logs for a Deployment (single-container case)\nkubectl logs --namespace=my-grafana deploy/grafana\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# dump Pod logs for a Deployment (multi-container case)\nkubectl logs --namespace=my-grafana deploy/grafana -c grafana\n\n```\n\n----------------------------------------\n\nTITLE: Streaming Configuration in Tempo\nDESCRIPTION: Configuration setting required in Tempo to enable streaming functionality. This must be set to true for streaming to work in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/configure-tempo-data-source.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstream_over_http_enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Grafana Service Account Token via HTTP API\nDESCRIPTION: This shell command uses `curl` to send a POST request to the `/api/serviceaccounts/{id}/tokens` endpoint (using ID 1 in this example) to create a token named 'my-service-account-token' for the specified service account. Basic authentication (`admin:admin`) is used. The response includes the token's ID, name, and the secret key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# create the service account token with the service account id 1 - /serviceaccounts/{id} returned from the previous step\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"my-service-account-token\"}' http://admin:admin@localhost:3000/api/serviceaccounts/1/tokens\n\n# response with the created SAT id,name and key.\n{\"id\":2,\"name\":\"my-service-account-token\",\"key\":\"glsa_9244xlVFZK0j8Lh4fU8Cz6Z5tO664zIi_7a762939\"}%\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Limits for Alert State History (YAML)\nDESCRIPTION: This YAML snippet shows recommended adjustments to the `limits_config` section in the Loki configuration file. It sets `split_queries_by_interval` to '24h' and `max_query_parallelism` to 32 to better handle potentially long-range queries (up to 30 days) originating from the Grafana state history dialog box. Using a separate Loki instance is advised due to potential performance impact.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-alert-state-history/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlimits_config:\n  split_queries_by_interval: '24h'\n  max_query_parallelism: 32\n```\n\n----------------------------------------\n\nTITLE: Validating Expected Claims in JWT Tokens\nDESCRIPTION: Configuration for validating that JWT claims match expected values, providing an additional layer of security.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# This can be seen as a required \"subset\" of a JWT Claims Set.\nexpect_claims = {\"iss\": \"https://your-token-issuer\", \"your-custom-claim\": \"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Google Cloud Monitoring Data Source with GCE Service Account (YAML)\nDESCRIPTION: This YAML example provisions the Stackdriver (Google Cloud Monitoring) data source in Grafana using GCE Default Service Account authentication. No explicit key or credential is included; Grafana uses the service account attached to the running VM. Only the 'authenticationType: gce' setting is needed in 'jsonData'. The configuration file should be installed on an instance with the correct IAM role and Cloud Monitoring API access. This approach is simplest for VM-based Grafana deployments on Google Cloud.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\ndatasources:\\n  - name: Google Cloud Monitoring\\n    type: stackdriver\\n    access: proxy\\n    jsonData:\\n      authenticationType: gce\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecation Warning in Grafana Frontend\nDESCRIPTION: Example showing how to properly deprecate a function in Grafana's frontend code. Demonstrates the use of deprecation comment, JSDoc annotation, and the deprecationWarning utility function to notify developers of deprecated functionality.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/breaking-changes-guide/breaking-changes-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { deprecationWarning } from '@grafana/data';\n\n/**\n * @deprecated -- this is no longer necessary and will be removed in Grafana 9.0.0\n */\nmyOldFunction(name: string) {\n    deprecationWarning('MyFile', 'myOldFunction', 'myNewFunction');\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextArea with Field Component in JSX\nDESCRIPTION: This example shows how to use the TextArea component within a Field component, providing labels, descriptions, and validation through the required attribute.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleFrame>\n  <Field\n    label=\"Important information\"\n    description=\"This information is very important, so you really need to fill it in\"\n  >\n    <TextArea name=\"importantTextarea\" required />\n  </Field>\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for CloudWatch Cross-Account Observability in JSON\nDESCRIPTION: This JSON configuration outlines the AWS IAM policy required for Grafana to utilize CloudWatch Cross-Account Observability features. It grants permissions to list OAM (Observability Access Manager) sinks and attached links (`oam:ListSinks`, `oam:ListAttachedLinks`), enabling Grafana to retrieve metrics and logs from linked accounts within a single region. Note that EC2 instance attributes cannot be queried across accounts using this feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\"oam:ListSinks\", \"oam:ListAttachedLinks\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConfirmModal Component with React in JSX\nDESCRIPTION: This example demonstrates how to instantiate the ConfirmModal component in a React application. The modal is configured with properties such as isOpen, title, body text, confirmText, icon, and callback functions for user confirmation and dismissal. Dependencies include React and the ConfirmModal component itself. Inputs include strings for UI content and callback functions; outputs are the invocation of the provided handlers. The ConfirmModal expects to be embedded within a React render context.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmModal/ConfirmModal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfirmModal\n  isOpen={false}\n  title=\"Delete user\"\n  body=\"Are you sure you want to delete this user?\"\n  confirmText=\"Confirm\"\n  icon=\"exclamation-triangle\"\n  onConfirm={() => console.log('Confirm action')}\n  onDismiss={() => console.log('Dismiss action')}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Service Port - Bash\nDESCRIPTION: Sets the HTTP server's listening port for the image renderer using the HTTP_PORT environment variable. A value of 0 assigns an available unused port automatically. Default port is 8081.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PORT=0\n```\n\n----------------------------------------\n\nTITLE: Time Filtered Query with Variable Substitution (Bracket Syntax) - SQL\nDESCRIPTION: Uses the alternate ([[hostname]]) bracket syntax for variable substitution in a Grafana SQL query, useful for compatibility with some SQL dialects or plugins. Outputs time, value, and a metric string. Requires 'my_table' with appropriate schema and Grafana template variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  UNIX_TIMESTAMP(atimestamp) as time,\n  aint as value,\n  avarchar as metric\nFROM my_table\nWHERE $__timeFilter(atimestamp) and hostname in([[hostname]])\nORDER BY atimestamp ASC\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Alert Notification Groups with Grafana Go Templates - Go Template\nDESCRIPTION: This snippet defines two Go templates in Grafana's notification templating system for rendering firing and resolved alerts in separate sections inside a notification payload. The main template (\"custom.firing_and_resolved_alerts\") iterates over .Alerts.Resolved and .Alerts.Firing collections, includes their counts, and renders each using the 'alert.summary_and_description' sub-template, which prints summary, status, and description annotations. Dependencies include Grafana's alerting data context and notification template engine; templates should be uniquely named within the Grafana configuration. Expected inputs are alert objects with status and annotation fields, and output is a formatted notification payload summarizing both firing and resolved alerts. Template naming uniqueness is a constraint, and this snippet is typically embedded in Grafana's notification template editor.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_6\n\nLANGUAGE: Go Template\nCODE:\n```\n{{- /* Example displaying firing and resolved alerts separately in the notification. */ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.firing_and_resolved_alerts\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Conditional Role Mapping Using JMESPath (Bash/INI)\nDESCRIPTION: Grafana configuration snippet using a JMESPath expression for `role_attribute_path`. It checks if the 'groups' array in the payload contains 'admin' (assigning 'Admin' role), else if it contains 'editor' (assigning 'Editor' role), otherwise defaults to 'Viewer'. Requires the corresponding JSON payload with a 'groups' array.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Patching Specific Annotation Properties via Grafana HTTP API - HTTP+JSON\nDESCRIPTION: Demonstrates how to update one or more properties of an annotation using the PATCH HTTP verb. Only the provided fields in the JSON payload (such as text and tags) will be updated. Endpoint requires authentication and returns a confirmation upon success.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/annotations/1145 HTTP/1.1\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\nContent-Type: application/json\\n\\n{\\n  \"text\":\"New Annotation Description\",\\n  \"tags\":[\"tag6\",\"tag7\",\"tag8\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.caching:reader\nDESCRIPTION: Specifies the `fixed:datasources.caching:reader` role (ID: `fixed_D2ddpGxJYlw0mbsTS1ek9fj0kj4`) within Grafana. This role grants the `datasources.caching:read` permission, allowing users to read data source query caching settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.caching:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_D2ddpGxJYlw0mbsTS1ek9fj0kj4\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- datasources.caching:read\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Connection Details in Grafana INI\nDESCRIPTION: This INI snippet shows the `[keystore.vault]` section in `grafana.ini` used to configure the connection to Hashicorp Vault. It includes parameters for Vault URL, namespace, authentication method (only 'token' supported currently), the authentication token, and optional settings for managing lease renewals for secrets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[keystore.vault]\n# Location of the Vault server\n;url =\n# Vault namespace if using Vault with multi-tenancy\n;namespace =\n# Method for authenticating towards Vault. Vault is inactive if this option is not set\n# Possible values: token\n;auth_method =\n# Secret token to connect to Vault when auth_method is token\n;token =\n# Time between checking if there are any secrets which needs to be renewed.\n;lease_renewal_interval = 5m\n# Time until expiration for tokens which are renewed. Should have a value higher than lease_renewal_interval\n;lease_renewal_expires_within = 15m\n# New duration for renewed tokens. Vault may be configured to ignore this value and impose a stricter limit.\n;lease_renewal_increment = 1h\n```\n\n----------------------------------------\n\nTITLE: Defining Hashicorp Vault Provider in Grafana INI Configuration\nDESCRIPTION: This configuration snippet demonstrates how to define a Hashicorp Vault encryption provider in the `grafana.ini` file. It requires specifying the Vault `token` for authentication, the server `url`, the `transit_engine_path`, the `key_ring` name, and the `token_renewal_interval`. This section must be named following the pattern `[security.encryption.hashicorpvault.<KEY-NAME>]`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n   ```\n   # Example of Hashicorp Vault provider setup\n   ;[security.encryption.hashicorpvault.example-encryption-key]\n   # Token used to authenticate within Vault. We suggest to use periodic tokens: more on token types https://www.vaultproject.io/docs/concepts/tokens#service-tokens\n   ;token =\n   # Location of the Hashicorp Vault server\n   ;url = http://localhost:8200\n   # Mount point of the transit secret engine\n   ;transit_engine_path = transit\n   # Key ring name\n   ;key_ring = grafana-encryption-key\n   # Specifies how often to check if a token needs to be renewed, should be less than a token's period value\n   token_renewal_interval = 5m\n   ```\n```\n\n----------------------------------------\n\nTITLE: Filtering Variable Query Results with query_result Function in PromQL\nDESCRIPTION: Example of using query_result function to populate a variable with the top 5 busiest request instances based on average QPS over the dashboard's time range. The regex extracts instance names from the query results.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: PromQL\nCODE:\n```\nQuery: query_result(topk(5, sum(rate(http_requests_total[$__range])) by (instance)))\nRegex: /\"([^\"]+)\"/\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Branding Using Environment Variables\nDESCRIPTION: This example shows how to configure custom footer links using environment variables instead of configuration files. This approach allows for easier configuration in containerized environments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nGF_WHITE_LABELING_FOOTER_LINKS=support guides extracustom\nGF_WHITE_LABELING_FOOTER_LINKS_SUPPORT_TEXT=Support\nGF_WHITE_LABELING_FOOTER_LINKS_SUPPORT_URL=http://your.support.site\nGF_WHITE_LABELING_FOOTER_LINKS_GUIDES_TEXT=Guides\nGF_WHITE_LABELING_FOOTER_LINKS_GUIDES_URL=http://your.guides.site\nGF_WHITE_LABELING_FOOTER_LINKS_EXTRACUSTOM_TEXT=Custom Text\nGF_WHITE_LABELING_FOOTER_LINKS_EXTRACUSTOM_URL=http://your.custom.site\n```\n\n----------------------------------------\n\nTITLE: Dashboard Configuration Properties\nDESCRIPTION: Settings for dashboard version control, refresh intervals and default dashboard configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\nversions_to_keep=20\nmin_refresh_interval=5s\ndefault_home_dashboard_path=/usr/share/grafana/public/dashboards/home.json\n```\n\n----------------------------------------\n\nTITLE: Searching Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet demonstrates an example HTTP GET request to search the Grafana query history. It uses query parameters like `datasourceUid` (multiple allowed for AND filtering), `searchString`, and `sort` to filter and order the results. Authentication is required via a Bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/query-history?datasourceUid=\"PE1C5CBDA0504A6A3\"&datasourceUid=\"FG1C1CBDA0504A6EL\"&searchString=\"ALERTS\"&sort=\"time-asc\" HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Points with YAML Provisioning in Grafana\nDESCRIPTION: Defines contact points to create or update in a Grafana instance via a YAML provisioning file. Dependencies include a provision-enabled Grafana setup and access to the 'provisioning/alerting' directory. Each contact point entry must have an organization ID, a name, and a list of receivers (with required fields such as UID, type, and receiver-specific settings like endpoint URLs). The configuration takes effect on Grafana restart or reload. YAML must conform to field requirements; additions or changes require subsequent reloads.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of contact points to import or update\\ncontactPoints:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> name of the contact point\\n    name: cp_1\\n    receivers:\\n      # <string, required> unique identifier for the receiver. Should not exceed 40 symbols. Only letters, numbers, - (hyphen), and _ (underscore) allowed.\\n      - uid: first_uid\\n        # <string, required> type of the receiver\\n        type: prometheus-alertmanager\\n        # <bool, optional> Disable the additional [Incident Resolved] follow-up alert, default = false\\n        disableResolveMessage: false\\n        # <object, required> settings for the specific receiver type\\n        settings:\\n          url: http://test:9000\n```\n\n----------------------------------------\n\nTITLE: Table Query for Azure Activity Logs\nDESCRIPTION: This query retrieves Azure activity logs filtered by the dashboard's time range, selecting specific columns for display in a table panel. Results are ordered by TimeGenerated in descending order to show the most recent activities first.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_3\n\nLANGUAGE: kusto\nCODE:\n```\nAzureActivity\n| where $__timeFilter()\n| project TimeGenerated, ResourceGroup, Category, OperationName, ActivityStatus, Caller\n| order by TimeGenerated desc\n```\n\n----------------------------------------\n\nTITLE: Fetching Admin Settings with HTTP GET Request\nDESCRIPTION: Example HTTP GET request to fetch Grafana admin settings. This endpoint requires Basic Authentication with administrator credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/admin/settings\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: LDAP Debug Logging Configuration\nDESCRIPTION: Configuration setting to enable LDAP debug logging in Grafana's configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n[log]\nfilters = ldap:debug\n```\n\n----------------------------------------\n\nTITLE: Example Error Log for Missing Libraries (Bash)\nDESCRIPTION: Shows a typical error message encountered in Grafana logs when the image rendering plugin fails because required shared libraries (like `libX11.so.6`) are missing on the system where Grafana is running. This indicates a dependency issue that needs to be resolved.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRendering failed: Error: Failed to launch chrome!/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome:\nerror while loading shared libraries: libX11.so.6: cannot open shared object file: No such file or directory\\n\\n\\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStreetMap Standard as Default Baselayer in Grafana (INI)\nDESCRIPTION: Configuration for setting OpenStreetMap as the default base map in Grafana. This option requires no additional configuration parameters in the config object.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ndefault_baselayer_config = `{\n  \"type\": \"osm-standard\",\n  \"config\": {}\n}`\n```\n\n----------------------------------------\n\nTITLE: Getting Minikube IP Address (Bash)\nDESCRIPTION: Runs the `minikube ip` command to retrieve the IP address assigned to the running `minikube` cluster instance. This IP is required for accessing services via port forwarding when not using a LoadBalancer.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nminikube ip\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom CA Certificate in Grafana Image Renderer Docker Container (Dockerfile)\nDESCRIPTION: Provides a Dockerfile snippet for building a custom Grafana Image Renderer container. It installs `nss-tools`, copies a custom root CA certificate into the container, creates an NSS database for the `grafana` user, and imports the certificate using `certutil`, ensuring the renderer within the container trusts the custom CA.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM grafana/grafana-image-renderer:latest\n\nUSER root\n\nRUN apk add --no-cache nss-tools\n\nUSER grafana\n\nCOPY internal-root-ca.crt.pem /etc/pki/tls/certs/internal-root-ca.crt.pem\nRUN mkdir -p /home/grafana/.pki/nssdb\nRUN certutil -d sql:/home/grafana/.pki/nssdb -A -n internal-root-ca -t C -i /etc/pki/tls/certs/internal-root-ca.crt.pem\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Terms with Limit for Grafana Variable (JSON)\nDESCRIPTION: This JSON query retrieves distinct values (terms) from the `hostname.keyword` field in Elasticsearch for a Grafana template variable. It uses a term aggregation and explicitly sets a `size` limit of 1000 results. The query automatically respects the current dashboard time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n`{\"find\": \"terms\", \"field\": \"hostname.keyword\", \"size\": 1000}`\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Tokens in Grafana (HTTP)\nDESCRIPTION: This HTTP request creates a new service account token with a specified name and optional expiration time. The secondsToLive parameter determines token lifetime, with 0 meaning the token never expires.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts/2/tokens HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n\n{\n\t\"name\": \"grafana\",\n\t\"secondsToLive\": 604800\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ClipboardButton in React/JSX\nDESCRIPTION: Demonstrates the basic implementation of the `ClipboardButton` component. It sets the button `variant` to 'secondary', provides a function to the `getText` prop to return the static string 'Text to be copied', and defines an `onClipboardCopy` callback that logs a message to the console when text is successfully copied. The button text is set to 'Copy to clipboard'.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClipboardButton/ClipboardButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ClipboardButton\n  variant=\"secondary\"\n  getText={() => 'Text to be copied'}\n  onClipboardCopy={() => console.log('text copied')}\n>\n  Copy to clipboard\n</ClipboardButton>\n```\n\n----------------------------------------\n\nTITLE: Provisioning OpenTSDB Data Source in Grafana\nDESCRIPTION: This YAML configuration example demonstrates how to provision an OpenTSDB data source in Grafana using the provisioning system. It sets up a data source named 'OpenTSDB' with proxy access, specifying the URL, TSDB resolution, and version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/opentsdb/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: OpenTSDB\n    type: opentsdb\n    access: proxy\n    url: http://localhost:4242\n    jsonData:\n      tsdbResolution: 1\n      tsdbVersion: 1\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Using JSON Web Key Set from Local File\nDESCRIPTION: Configuration for verifying JWT tokens using a JSON Web Key Set loaded from a local JSON file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\njwk_set_file = /path/to/jwks.json\n```\n\n----------------------------------------\n\nTITLE: Parsing Frontend Settings Response from Grafana HTTP API - JSON\nDESCRIPTION: This snippet shows a typical JSON response from the GET /api/frontend/settings endpoint in Grafana. The response includes flags such as allowOrgCreate, a buildInfo object (with fields like buildstamp, commit, and version), a datasources map listing available datasource definitions, and the defaultDatasource string. This output is useful for client applications needing to configure UI or connect to datasources dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"allowOrgCreate\\\":true,\\n  \\\"appSubUrl\\\":\\\"\\\",\\n  \\\"buildInfo\\\":{\\n    \\\"buildstamp\\\":xxxxxx,\\n    \\\"commit\\\":\\\"vyyyy\\\",\\n    \\\"version\\\":\\\"zzzzz\\\"\\n  },\\n  \\\"datasources\\\":{\\n    \\\"datasourcename\\\":{\\n      \\\"index\\\":\\\"grafana-dash\\\",\\n      \\\"meta\\\":{\\n        \\\"annotations\\\":true,\\n        \\\"module\\\":\\\"plugins/datasource/grafana/datasource\\\",\\n        \\\"name\\\":\\\"Grafana\\\",\\n        \\\"partials\\\":{\\n          \\\"annotations\\\":\\\"app/plugins/datasource/grafana/partials/annotations.editor.html\\\",\\n          \\\"config\\\":\\\"app/plugins/datasource/grafana/partials/config.html\\\"\\n        },\\n        \\\"pluginType\\\":\\\"datasource\\\",\\n        \\\"serviceName\\\":\\\"Grafana\\\",\\n        \\\"type\\\":\\\"grafanasearch\\\"\\n      }\\n    }\\n  },\\n  \\\"defaultDatasource\\\": \\\"Grafana\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Grafana Data Source by UID via HTTP API\nDESCRIPTION: Explains the `GET /api/datasources/uid/:uid` endpoint for fetching a specific data source using its unique identifier (UID). This is a recommended alternative to the deprecated ID lookup. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:uid:*`, or `datasources:uid:<UID>`. The request includes the data source UID in the path and standard headers. The response is a JSON object containing the details of the specified data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/uid/kLtEtcRGk HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"uid\": \"kLtEtcRGk\",\n  \"orgId\": 1,\n  \"name\": \"test_datasource\",\n  \"type\": \"graphite\",\n  \"typeLogoUrl\": \"\",\n  \"access\": \"proxy\",\n  \"url\": \"http://mydatasource.com\",\n  \"password\": \"\",\n  \"user\": \"\",\n  \"database\": \"\",\n  \"basicAuth\": false,\n  \"basicAuthUser\": \"\",\n  \"basicAuthPassword\": \"\",\n  \"withCredentials\": false,\n  \"isDefault\": false,\n  \"jsonData\": {\n    \"graphiteType\": \"default\",\n    \"graphiteVersion\": \"1.1\"\n  },\n  \"secureJsonFields\": {},\n  \"version\": 1,\n  \"readOnly\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading an Existing Helm Release with Custom Values - Helm CLI - Bash\nDESCRIPTION: This command upgrades the existing `my-grafana` Helm release using values from a modified `values.yaml` file, particularly after enabling persistent storage. Requires the Helm chart to be already installed and the file path to be accessible. The command applies any chart value customizations to the running deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Provisioning InfluxDB 1.x Data Source in Grafana\nDESCRIPTION: This YAML configuration example demonstrates how to provision an InfluxDB 1.x data source in Grafana. It includes settings for name, type, access method, authentication, and database name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: InfluxDB_v1\n    type: influxdb\n    access: proxy\n    user: grafana\n    url: http://localhost:8086\n    jsonData:\n      dbName: site\n      httpMode: GET\n    secureJsonData:\n      password: grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Contact Point - YAML\nDESCRIPTION: Integrates Telegram as a contact point for Grafana's alerting. Requires a valid bot token and chat ID; allows optional custom message content via templates. Messages are sent to specified Telegram chat. Requires a Telegram bot and chat ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntype: telegram\\nsettings:\\n  # <string, required>\\n  bottoken: xxx\\n  # <string, required>\\n  chatid: some_chat_id\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Grafana Plugin (Bash)\nDESCRIPTION: Command 'plugins update <plugin-id>' updates a specific installed Grafana plugin, identified by '<plugin-id>', to its latest compatible version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins update <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Secrets using Grafana CLI\nDESCRIPTION: Uses the Grafana CLI to re-encrypt existing database secrets using envelope encryption with a fresh data key. This is useful for migrating from legacy encryption or after rotating data keys. It is recommended to run this command during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrafana cli admin secrets-migration re-encrypt\n```\n\n----------------------------------------\n\nTITLE: SQL Query for First Part of Multi-Series Graph in Grafana\nDESCRIPTION: This query is the first part of a two-query set to create a multi-series graph in Grafana. It groups time data, formats the metric name, and calculates the average of valueOne.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroup(time, '5m') as time,\n  measurement + ' - value one' as metric,\n  avg(valueOne) as valueOne\nFROM\n  metric_values\nWHERE\n  $__timeFilter(time)\nGROUP BY\n  $__timeGroup(time, '5m'),\n  measurement\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Adding the Beta Grafana APT Repository - Bash\nDESCRIPTION: Adds the beta release Grafana APT repository for those wishing to track pre-release versions. Prerequisite: GPG key must be installed as shown in earlier steps. Output: Updates /etc/apt/sources.list.d/grafana.list and allows beta installs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com beta main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list\n```\n\n----------------------------------------\n\nTITLE: Response for Listing Snapshots via Grafana HTTP API (HTTP)\nDESCRIPTION: Displays the JSON-format HTTP response for a successful snapshot listing operation. Each entry in the response array contains identifiers, ownership, expiration, and tracking metadata about a snapshot for use in client applications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n[\\n  {\\n    \"id\":8,\\n    \"name\":\"Home\",\\n    \"key\":\"YYYYYYY\",\\n    \"orgId\":1,\\n    \"userId\":1,\\n    \"external\":false,\\n    \"externalUrl\":\"\",\\n    \"expires\":\"2200-13-32T25:23:23+02:00\",\\n    \"created\":\"2200-13-32T28:24:23+02:00\",\\n    \"updated\":\"2200-13-32T28:24:23+02:00\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $value in Go Template Annotation - Go Template - Markdown\nDESCRIPTION: This snippet shows how to include the special $value string variable in a Grafana alert annotation template. $value contains a summary of all relevant query/condition results. With a single query, it renders just the float value; with multiple queries, it provides a string listing each. The template engine is Go templates. The output is an annotation string including the relevant dynamic value(s).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_5\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $value }}: CPU usage has exceeded 80% for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mute Timing via Grafana Provisioning API (HTTP)\nDESCRIPTION: Defines the `DELETE` request endpoint `/api/v1/provisioning/mute-timings/:name` to remove a specific Grafana mute timing. The `name` path parameter identifies the mute timing. An optional `version` query parameter enables optimistic concurrency validation. Successful deletion returns a 204 No Content status, while a conflict (e.g., version mismatch) results in a 409 Conflict status.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE /api/v1/provisioning/mute-timings/:name\n```\n\n----------------------------------------\n\nTITLE: Joining Tables for Multi-Column Template Variable Dropdown - SQL\nDESCRIPTION: Selects hostnames from two tables (my_host and my_other_host) using a JOIN on the city field. Makes available multiple columns for a variable dropdown. Requires both tables and the join column to exist. Returns a list of hostname combinations reflecting joined cities.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT my_host.hostname, my_other_host.hostname2 FROM my_host JOIN my_other_host ON my_host.city = my_other_host.city\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Notification Title Template for Grafana Alerts\nDESCRIPTION: This template creates a simple notification title that shows the count of firing and resolved alerts with appropriate emoji indicators.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_title\" -}}\n{{ if gt (.Alerts.Firing | len) 0 }}🚨 {{ .Alerts.Firing | len }} firing alerts. {{ end }}{{ if gt (.Alerts.Resolved | len) 0 }}✅ {{ .Alerts.Resolved | len }} resolved alerts.{{ end }}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Updating Current Organization Preferences via HTTP API - HTTP\nDESCRIPTION: PUT request to set or replace all organization-wide preferences in Grafana. Requires admin privileges and Bearer authentication. All expected keys, such as theme, homeDashboardUID, and timezone, should be set, as missing keys revert to defaults. A successful update returns a confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/org/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"theme\": \"\",\\n  \"homeDashboardUID\":\"home\",\\n  \"timezone\":\"utc\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Deployment Configuration with Kubectl (Bash)\nDESCRIPTION: Opens the YAML manifest of the specified deployment ('grafana') within the given namespace ('my-grafana') in the default text editor (defined by the $EDITOR environment variable). This allows direct modification of the deployment's configuration, such as changing the container image version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit deployment grafana --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Listing Role Permissions via Grafana HTTP API (curl)\nDESCRIPTION: This shell command uses `curl` to send a GET request to the Grafana `/api/access-control/roles/{roleUID}` endpoint to retrieve the details and associated permissions for a specific RBAC role identified by its UID (`qQui_LCMk`). The request requires Basic Authentication using a base64 encoded `username:password` string in the `Authorization` header. Replace `<grafana_url>` with the actual Grafana instance URL and `YWRtaW46cGFzc3dvcmQ=` with the appropriate encoded credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request GET '<grafana_url>/api/access-control/roles/qQui_LCMk' --header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ='\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistent Storage in Grafana Chart - values.yaml - YAML\nDESCRIPTION: This YAML snippet configures the Helm chart to enable persistent storage for Grafana by setting `persistence.enabled` to `true` and specifying the volume type as PersistentVolumeClaim (pvc). Must be included in the `values.yaml` file before running `helm upgrade`. Ensures Grafana data survives pod restarts. Key fields are `type` and `enabled`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n.......\n............\n......\npersistence:\n  type: pvc\n  enabled: true\n  # storageClassName: default\n.......\n............\n......\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegraf HTTP Output for Grafana Live Streaming (TOML)\nDESCRIPTION: This Telegraf configuration snippet defines how to collect total CPU usage metrics every second (`interval`, `flush_interval`) using the `inputs.cpu` plugin. It then configures the `outputs.http` plugin to send these metrics in InfluxDB line protocol format (`data_format = \"influx\"`) to the Grafana live push API endpoint (`http://localhost:3000/api/live/push/custom_stream_id`). Authentication is handled via an Authorization Bearer token header, which requires replacing `<Your API Key>` with a valid Grafana Admin API key. The `custom_stream_id` part of the URL defines the namespace for the Grafana Live channel.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/stream-metrics-from-telegraf-to-grafana/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[agent]\n  interval = \"1s\"\n  flush_interval = \"1s\"\n\n[[inputs.cpu]]\n  percpu = false\n  totalcpu = true\n\n[[outputs.http]]\n  url = \"http://localhost:3000/api/live/push/custom_stream_id\"\n  data_format = \"influx\"\n  [outputs.http.headers]\n    Authorization = \"Bearer <Your API Key>\"\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Kubeconfig for Grafana Auth - YAML\nDESCRIPTION: This YAML manifest defines a Kubernetes kubeconfig for authenticating to Grafana API server as a user. The configuration disables TLS verification, points the API server to https://127.0.0.1:3000, sets user and context information, and consumes username and password for HTTP basic authentication. Expected inputs are credentials that must be filled in by the user. Limitations include hardcoded cluster server and obvious sensitivity of credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\\nclusters:\\n- cluster:\\n    insecure-skip-tls-verify: true\\n    server: https://127.0.0.1:3000\\n  name: default-cluster\\ncontexts:\\n- context:\\n    cluster: default-cluster\\n    namespace: default\\n    user: default\\n  name: default-context\\ncurrent-context: default-context\\nkind: Config\\npreferences: {}\\nusers:\\n- name: default\\n  user:\\n    username: <username>\\n    password: <password>\n```\n\n----------------------------------------\n\nTITLE: Apache Proxy Configuration for Grafana (Root Path) - Bash\nDESCRIPTION: This snippet configures Apache to forward all requests from the root (/) to the Grafana server on port 3000. Intended for inclusion in your Apache site's <VirtualHost> block. The ProxyPreserveHost directive assures Host header preservation for correct backend operation. Requires mod_proxy and mod_proxy_http modules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n  ProxyPreserveHost on\\n  ProxyPass / http://your_grafana_server:3000\\n  ProxyPassReverse / http://your_grafana_server:3000\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Grafana Data Source by Name via HTTP API\nDESCRIPTION: Describes the `GET /api/datasources/name/:name` endpoint for fetching a specific data source using its name. This is another recommended alternative to the deprecated ID lookup. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:name:*`, or `datasources:name:<Name>`. The request includes the data source name in the path and standard headers. The response is a JSON object containing the details of the specified data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/name/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"uid\": \"kLtEtcRGk\",\n  \"orgId\": 1,\n  \"name\": \"test_datasource\",\n  \"type\": \"graphite\",\n  \"typeLogoUrl\": \"\",\n  \"access\": \"proxy\",\n  \"url\": \"http://mydatasource.com\",\n  \"password\": \"\",\n  \"user\": \"\",\n  \"database\": \"\",\n  \"basicAuth\": false,\n  \"basicAuthUser\": \"\",\n  \"basicAuthPassword\": \"\",\n  \"withCredentials\": false,\n  \"isDefault\": false,\n  \"jsonData\": {\n    \"graphiteType\": \"default\",\n    \"graphiteVersion\": \"1.1\"\n  },\n  \"secureJsonFields\": {},\n  \"version\": 1,\n  \"readOnly\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix Icon to Input - React JSX\nDESCRIPTION: This snippet demonstrates how to use the Input component with a prefix, specifically rendering a search icon before the input field. Dependencies include the Input and Icon components from the codebase. The 'prefix' prop injects a React element before the input control; the rest of the input acts as a standard text field. This approach increases visual clarity by indicating the input's intended use, with the icon's 'name' parameter specifying which glyph to show. Outputs a React element representing a text box with an icon prefix.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/Input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Input prefix={<Icon name=\\\"search\\\" />} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Global User with HTTP POST Request\nDESCRIPTION: Example HTTP POST request to create a new Grafana user. The request includes user details such as name, email, login, password, and optional organization ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\":\"User\",\n  \"email\":\"user@graf.com\",\n  \"login\":\"user\",\n  \"password\":\"userpassword\",\n  \"OrgId\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Log Level via Environment Variable - Bash\nDESCRIPTION: Runs a Grafana container with the debug log level enabled by setting an environment variable. Assumes that Docker is installed and a free port 3000 is available. Setting 'GF_LOG_LEVEL=debug' increases verbosity in logs; output is more detailed logs from the running container, useful for troubleshooting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# enable debug logs\n\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_LOG_LEVEL=debug\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Dashboards (Plaintext)\nDESCRIPTION: Defines the `dashboards:read` permission action required to read one or more dashboards in Grafana. This capability is tied to dashboard and folder scopes including `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Options Loading in Combobox\nDESCRIPTION: Example of implementing asynchronous options loading in the Combobox component using a callback function that fetches data from an API.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst loadOptions = useCallback(async (input: string) => {\n  const response = await fetch(`/api/options?query=${input}`);\n  return response.json();\n}, []);\n\n<Combobox options={loadOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Service Accounts and Tokens with Terraform\nDESCRIPTION: This Terraform configuration demonstrates the modern approach using service accounts. It defines a `grafana_service_account` resource ('sa-admin') with the 'Admin' role. It then creates two `grafana_service_account_token` resources ('sat-bar', 'sat-foo'), associated with the previously defined service account, optionally setting a time-to-live. This replaces the deprecated `grafana_api_key` resource.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_6\n\nLANGUAGE: tf\nCODE:\n```\nterraform {\n  required_providers {\n    grafana = {\n      source  = \"grafana/grafana\"\n    }\n  }\n}\n\n# configure the provider with basic auth\nprovider \"grafana\" {\n  url  = \"http://localhost:3000\"\n  auth = \"admin:admin\"\n}\n\n# Creating a service account in Grafana instance to be used as auth and attach tokens\n# notice we can attach multiple tokens to one service account\nresource \"grafana_service_account\" \"sa-admin\" {\n  name             = \"sa-admin\"\n  role             = \"Admin\"\n}\n\n# Creating a service account token in Grafana instance to be used for creating resources in Grafana instance\nresource \"grafana_service_account_token\" \"sat-bar\" {\n  name           = \"sat-bar\"\n  service_account_id = grafana_service_account.sa-admin.id\n}\n\n# Creating a service account token in Grafana instance to be used for creating resources in Grafana instance\nresource \"grafana_service_account_token\" \"sat-foo\" {\n  name           = \"sat-foo\"\n  service_account_id = grafana_service_account.sa-admin.id\n  seconds_to_live    = 30\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Org Mapping with Colons using JSON Syntax in Grafana INI\nDESCRIPTION: Illustrates using JSON array syntax and escaping colons (`\\:`) within the `org_mapping` parameter in Grafana's SAML configuration. This example maps users from the external IdP group \"External:Admin\" to the Grafana organization named \"ACME Corp\" with the Admin role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# Assign users from \"External:Admin\" to the organization with name \"ACME Corp\" as Admin\norg_mapping = [\"External\\:Admin:ACME Corp:Admin\"]\n```\n\n----------------------------------------\n\nTITLE: Mapping Grafana Roles Based on GitLab Group Membership (INI)\nDESCRIPTION: This INI configuration uses a JMESPath expression with the `contains` function to check if the user's `groups` array (from the OAuth token) includes 'example-group'. If the user is part of this GitLab group, they are granted the 'Editor' role; otherwise, they are assigned the 'Viewer' role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = contains(groups[*], 'example-group') && 'Editor' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Config with Volume, Env Vars, Plugin (YAML)\nDESCRIPTION: An example `docker-compose.yaml` demonstrating a more complex Grafana setup. It uses a named Docker volume (`grafana_storage`) for persistence, sets environment variables (`GF_SERVER_ROOT_URL`, `GF_PLUGINS_PREINSTALL`) to configure the server URL and preinstall the `grafana-clock-panel` plugin, maps port 3000, and ensures the container restarts unless stopped.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  grafana:\n    image: grafana/grafana-enterprise\n    container_name: grafana\n    restart: unless-stopped\n    environment:\n     - GF_SERVER_ROOT_URL=http://my.grafana.server/\n     - GF_PLUGINS_PREINSTALL=grafana-clock-panel\n    ports:\n     - '3000:3000'\n    volumes:\n     - 'grafana_storage:/var/lib/grafana'\nvolumes:\n  grafana_storage: {}\n```\n\n----------------------------------------\n\nTITLE: Complex Graphite Query with Interval Variable\nDESCRIPTION: This example shows a more complex Graphite query using an interval variable. It combines multiple functions including groupByNode, summarize, and movingAverage, demonstrating how interval variables can be used in sophisticated time series analysis.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: graphite\nCODE:\n```\ngroupByNode(summarize(movingAverage(apps.$app.$server.counters.requests.count, 5), '$interval', 'sum', false), 2, 'sum')\n```\n\n----------------------------------------\n\nTITLE: Checking License Status via HTTP - Grafana Licensing API - HTTP\nDESCRIPTION: This HTTP example demonstrates how to check license availability in a Grafana Enterprise instance using the GET /api/licensing/check endpoint. Requires Bearer token authentication; response is a boolean indicating license status. Ensure the user has Grafana server admin permissions, and set proper HTTP headers as shown.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/licensing/check\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Contact Point - YAML\nDESCRIPTION: Configures Slack as a contact point for Grafana alerts. Requires a recipient and authentication token or a webhook URL. Supports customization through fields such as username, icon, mentions, message color, title, and text, the latter two using templated content. Outputs are customized Slack alert messages. Requires access to Slack API and/or webhooks.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntype: slack\\nsettings:\\n  # <string, required>\\n  recipient: alerting-dev\\n  # <string, required>\\n  token: xxx\\n  # <string>\\n  username: grafana_bot\\n  # <string>\\n  icon_emoji: heart\\n  # <string>\\n  icon_url: https://icon_url\\n  # <string>\\n  mentionUsers: user_1,user_2\\n  # <string>\\n  mentionGroups: group_1,group_2\\n  # <string> options: here, channel\\n  mentionChannel: here\\n  # <string> Optionally provide a Slack incoming webhook URL for sending messages, in this case the token isn't necessary\\n  url: https://some_webhook_url\\n  # <string>\\n  endpointUrl: https://custom_url/api/chat.postMessage\\n  # <string>\\n  color: {{ if eq .Status \\\"firing\\\" }}#D63232{{ else }}#36a64f{{ end }}\\n  # <string>\\n  title: |\\n    {{ template \\\"slack.default.title\\\" . }}\\n  text: |\\n    {{ template \\\"slack.default.text\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning Loki Data Source with Basic Auth and Derived Fields (YAML)\nDESCRIPTION: This YAML configuration shows how to provision a Loki data source with basic authentication and derived fields. It includes settings for tracing integration and demonstrates proper escaping of special characters in YAML.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Loki\n    type: loki\n    access: proxy\n    url: http://localhost:3100\n    basicAuth: true\n    basicAuthUser: my_user\n    jsonData:\n      maxLines: 1000\n      derivedFields:\n        - datasourceUid: my_jaeger_uid\n          matcherRegex: \"traceID=(\\\\w+)\"\n          name: TraceID\n          url: '$${__value.raw}'\n          urlDisplayLabel: 'View Trace'\n        - matcherRegex: \"traceID=(\\\\w+)\"\n          name: TraceID\n          url: 'http://localhost:16686/trace/$${__value.raw}'\n    secureJsonData:\n      basicAuthPassword: test_password\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC Server Feature Toggle - INI\nDESCRIPTION: This snippet shows how to enable the Grafana gRPC server via the INI configuration file by setting the grpcServer feature toggle to true under the [feature_toggles] section. This is a prerequisite for activating any gRPC-related functionality in Grafana. The value can be set to false to disable the server entirely.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/grpcserver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\ngrpcServer = true\n\n```\n\n----------------------------------------\n\nTITLE: Querying Flask App Memory Usage in Prometheus\nDESCRIPTION: This PromQL query selects the `flask_app_memory_usage` metric from a Prometheus data source. It is used to create a second Grafana alert rule, similar to the CPU usage alert, to monitor memory consumption. The context suggests setting a threshold (e.g., 60%) and linking this alert to the same dashboard panel as the CPU alert for unified visualization and annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_8\n\nLANGUAGE: promql\nCODE:\n```\nflask_app_memory_usage{}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Email Verification Data with Go Templating - GoTemplate\nDESCRIPTION: This snippet demonstrates the use of Go template syntax to inject dynamic data into an email template for account verification. Dependencies include the Go templating engine, with required variables: \".Subject\" for the email subject, \".ConfirmationCode\" for the one-time code, \".Expire\" for the code's expiration time in minutes, \".AppUrl\" and \".Code\" for constructing the verification link. Inputs are provided as template variables at render time, and outputs are the completed email content with the corresponding verification instructions and links. The template expects all variables to be defined at runtime and does not perform validation within the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/passwordless_verify_existing_user.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n[[HiddenSubject .Subject \"Verify your email\"]]\n\nHi,\n\nCopy and paste the email verification code:\n[[.ConfirmationCode]]\ninto the login form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. \nAlternatively, you can use the button below to verify your email address. \n\n[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level - Bash\nDESCRIPTION: Sets the LOG_LEVEL environment variable for controlling verbosity of Grafana rendering service logs. Accepts values like 'debug', 'info', 'warning', and 'error', with 'debug' enabling the most verbose output. Affects logging output to stdout/stderr or log files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nLOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Deployment for Resource Provisioning - kubectl Bash\nDESCRIPTION: Performs a rolling restart of the Grafana deployment in 'my-grafana' namespace to trigger provisioning reload. Uses deployment selector 'app=grafana'. This is necessary for Grafana to pick up changes in provisioning directories/files, especially after copying new resources into the pod.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart -n my-grafana deployment --selector=app=grafana\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Roles in Grafana RBAC API\nDESCRIPTION: Makes a GET request to retrieve all existing roles, including global and organization-specific roles. Requires the 'roles:read' action on 'roles:*' scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/roles\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Updating a Team - HTTP\nDESCRIPTION: Sends a PUT request to update an existing team's name and/or email by its numeric ID. The user must include updated fields as a JSON object in the request body and authenticate with a Bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/teams/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\\n\\n{\\n  \\\"name\\\": \\\"MyTestTeam\\\",\\n  \\\"email\\\": \\\"email@test.com\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Apache httpd.conf Configuration for Docker AuthProxy\nDESCRIPTION: Complete Apache HTTP server configuration file for Docker-based authentication proxy to Grafana, including module loading, authentication setup, and proxy configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nServerRoot \"/usr/local/apache2\"\nListen 80\nLoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule authn_file_module modules/mod_authn_file.so\nLoadModule authn_core_module modules/mod_authn_core.so\nLoadModule authz_host_module modules/mod_authz_host.so\nLoadModule authz_user_module modules/mod_authz_user.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule auth_basic_module modules/mod_auth_basic.so\nLoadModule log_config_module modules/mod_log_config.so\nLoadModule env_module modules/mod_env.so\nLoadModule headers_module modules/mod_headers.so\nLoadModule unixd_module modules/mod_unixd.so\nLoadModule rewrite_module modules/mod_rewrite.so\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\n<IfModule unixd_module>\nUser daemon\nGroup daemon\n</IfModule>\nServerAdmin you@example.com\n<Directory />\n    AllowOverride none\n    Require all denied\n</Directory>\nDocumentRoot \"/usr/local/apache2/htdocs\"\nErrorLog /proc/self/fd/2\nLogLevel error\n<IfModule log_config_module>\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\n    <IfModule logio_module>\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n    </IfModule>\n    CustomLog /proc/self/fd/1 common\n</IfModule>\n<Proxy *>\n    AuthType Basic\n    AuthName GrafanaAuthProxy\n    AuthBasicProvider file\n    AuthUserFile /tmp/htpasswd\n    Require valid-user\n    RewriteEngine On\n    RewriteRule .* - [E=PROXY_USER:%{LA-U:REMOTE_USER},NS]\n    RequestHeader set X-WEBAUTH-USER \"%{PROXY_USER}e\"\n</Proxy>\nRequestHeader unset Authorization\nProxyRequests Off\nProxyPass / http://grafana:3000/\nProxyPassReverse / http://grafana:3000/\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana Server (systemd) - Shell\nDESCRIPTION: Stops the Grafana server if it is running as a systemd service. Requires sudo and systemd support. Input: None. Output: grafana-server systemd service is stopped cleanly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop grafana-server\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password from Kubernetes Secret - kubectl - Bash\nDESCRIPTION: This command extracts and decodes the admin password for the deployed Grafana instance from a Kubernetes secret. It combines `kubectl get secret` with a JSONPath query and base64 decoding. Requires earlier deployment of Grafana and that the secret exists in the specified namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace monitoring my-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Disabling Grafana Login Form\nDESCRIPTION: Configuration to hide the Grafana login form, which is useful when authentication is handled externally through SSO or other methods.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[auth]\ndisable_login_form = true\n```\n\n----------------------------------------\n\nTITLE: Basic ConfirmButton Implementation in React\nDESCRIPTION: Basic implementation of the ConfirmButton component showing core functionality with confirmation text and callback handling. The component includes size specification, confirmation text, variant selection, and an onConfirm callback.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ConfirmButton/ConfirmButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConfirmButton\n  closeOnConfirm\n  size=\"md\"\n  confirmText=\"Are you sure?\"\n  confirmVariant=\"secondary\"\n  onConfirm={() => {\n    console.log('Action confirmed!');\n  }}\n>\n  Click me\n</ConfirmButton>\n```\n\n----------------------------------------\n\nTITLE: Defining RBAC Roles and Permissions in Grafana plugin.json (JSON)\nDESCRIPTION: This snippet shows how to define custom RBAC roles and permissions in a Grafana plugin's plugin.json file. It introduces two roles, each with its own name, description, and permissions (actions) that reference plugin-specific capabilities, and then assigns these roles to Grafana's built-in user groups like Admin and Viewer. Dependencies include a valid plugin.json file within a Grafana plugin, and an understanding of Grafana's RBAC schema. Roles are assigned through the \\\"grants\\\" property, with permissions specified as an array of action objects. Plugins are currently limited to defining actions without scopes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-3.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"roles\\\": [\\n    {\\n      \\\"role\\\": {\\n        \\\"name\\\": \\\"Patents Reader\\\",\\n        \\\"description\\\": \\\"Read patents\\\",\\n        \\\"permissions\\\": [\\n          {\\\"action\\\": \\\"grafana-appwithrbac-app.patents:read\\\"}\\n        ]\\n      },\\n      \\\"grants\\\": [\\\"Admin\\\"]\\n    },\\n    {\\n      \\\"role\\\": {\\n        \\\"name\\\": \\\"Research papers Reader\\\",\\n        \\\"description\\\": \\\"Read research papers\\\",\\n        \\\"permissions\\\": [\\n          {\\\"action\\\": \\\"grafana-appwithrbac-app.papers:read\\\"}\\n        ]\\n      },\\n      \\\"grants\\\": [\\\"Viewer\\\"]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Support Bundle Collector with the Bundle Registry in Go Service Initialization\nDESCRIPTION: This Go snippet shows how to register a support bundle collector with the registry inside the ProvideService function. The service instance is created and its collector is added to the bundleRegistry using RegisterSupportItemCollector. The required dependency is the supportbundles.Service injected earlier. This pattern ensures that the service's diagnostics collector is automatically available after registration. The function returns the initialized service instance and error state as output.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc ProvideService(\n    ...\n) (*UsageStats, error) {\n\ts := &UsageStats{\n        // ...\n\t}\n\n\tbundleRegistry.RegisterSupportItemCollector(s.supportBundleCollector())\n\n\treturn s, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Schema for 'panes' Query Parameter in Grafana Explore URLs (JSON)\nDESCRIPTION: This JSON code block illustrates the structure of the 'panes' query parameter used in Grafana Explore links. Each pane is represented by an object containing datasource and query information, including datasource UID/type, an array of queries (each with a unique refId and datasource info), and a time range (from/to). The keys such as 'from' and 'to' accept both timestamps and relative time expressions. This schema is required for programmatically building valid Explore URLs or integrating external tools.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/get-started-with-explore.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  datasource: string; // the pane's root datasource UID, or `-- Mixed --` for mixed datasources\\n  queries: {\\n    refId: string; // an alphanumeric identifier for this query, must be unique within the pane, i.e. \\\"A\\\", \\\"B\\\", \\\"C\\\", etc.\\n    datasource: {\\n      uid: string; // the query's datasource UID ie: \\\"AD7864H6422\\\"\\n      type: string; // the query's datasource type-id, i.e: \\\"loki\\\"\\n    }\\n    // ... any other datasource-specific query parameters\\n  }[]; // array of queries for this pane\\n  range: {\\n    from: string; // the start time, in milliseconds since epoch\\n    to: string; // the end time, in milliseconds since epoch\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Domain with Existing Subpath in Grafana (INI, Bash Syntax)\nDESCRIPTION: Adapts the Grafana configuration file for use when an additional subpath already exists in the IIS parent site. This ensures Grafana is accessible from a nested subpath (e.g., /existingsubpath/grafana). The values for domain and root_url must match the actual structure on IIS. Inputs: domain with subpath, root_url. Outputs: Proper resource loading through nested subpaths. Requires restart after modifications. No special dependencies beyond the Grafana INI file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[server]\ndomain = yourdomain.com/existingsubpath\nroot_url = %(protocol)s://%(domain)s/grafana/\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana-Managed Recording Rules (INI)\nDESCRIPTION: This INI configuration snippet enables Grafana-managed recording rules and configures the connection to a Prometheus-compatible remote-write endpoint. It sets `enabled` to true under the `[recording_rules]` section, specifies the remote write `url`, and optionally includes `basic_auth_username`, `basic_auth_password` for authentication, and custom headers under `[recording_rules.custom_headers]`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/create-recording-rules/create-grafana-managed-recording-rules.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[recording_rules]\nenabled = true\nurl = http://my-example-prometheus.local:9090/api/prom/push\nbasic_auth_username = my-user\nbasic_auth_password = my-pass\n\n[recording_rules.custom_headers]\nX-My-Header = MyValue\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Service with systemd (Linux)\nDESCRIPTION: Restarts the Grafana server service using systemd. Required for certain configuration changes to take effect.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart grafana-server\n```\n\n----------------------------------------\n\nTITLE: Deleting Service Account Tokens in Grafana (HTTP)\nDESCRIPTION: This HTTP request deletes a specific service account token identified by the service account ID and token ID. Requires serviceaccounts:write permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/serviceaccounts/2/tokens/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Tank Temperatures with Flux for Multidimensional Alerts\nDESCRIPTION: This Flux query retrieves temperature data for five different tanks from the 'HyperEncabulator' bucket. It filters by measurement and type, then uses a logical OR condition to include data from all five tanks before aggregating and yielding the mean values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_7\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"HyperEncabulator\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r[\"_measurement\"] == \"TemperatureData\")\n|> filter(fn: (r) => r[\"MeasType\"] == \"actual\")\n|> filter(fn: (r) => r[\"Tank\"] == \"A5\" or r[\"Tank\"] == \"B4\" or r[\"Tank\"] == \"C3\" or r[\"Tank\"] == \"D2\" or r[\"Tank\"] == \"E1\")\n|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n|> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster for Grafana Live in Kubernetes\nDESCRIPTION: Example configuration for connecting Grafana Live to a Redis Cluster in a Kubernetes environment using a headless service.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlive:\n   ha_engine: redis\n   ha_engine_address: redis-headless.grafana.svc.cluster.local:6379\n   ha_engine_password: $__file{/your/redis/password/secret/mount}\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana Container with Docker Compose (Bash)\nDESCRIPTION: Command to stop and remove the Grafana container(s), networks, and potentially volumes defined in the `docker-compose.yaml` file located in the current directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Removing SAML Settings via Grafana Admin API\nDESCRIPTION: JSON payload example for removing a specific SAML setting (allow_idp_initiated) through the Grafana Admin API. The removals parameter specifies settings to unset.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"removals\": {\n    \"auth.saml\": [\"allow_idp_initiated\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Enterprise 9.4.7 in Docker\nDESCRIPTION: An example bash command that runs Grafana Enterprise version 9.4.7 in a Docker container on port 3000 in detached mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name grafana grafana/grafana-enterprise:9.4.7\n```\n\n----------------------------------------\n\nTITLE: Provisioning Notification Template Groups - YAML\nDESCRIPTION: Demonstrates how to declare notification templates for provisioning in Grafana. Defines an 'apiVersion', lists organization IDs, unique template group names, and Block content (template) to register or update. Inputs include the full template group YAML structure. Outputs make templates available for use in alert message rendering; templates must use unique names across organizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of templates to import or update\\ntemplates:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> name of the template group, must be unique\\n    name: my_first_template\\n    # <string, required> content of the template group\\n    template: |\\n      {{ define \\\"my_first_template\\\" }}\\n        Custom notification message\\n      {{ end }}\\n\n```\n\n----------------------------------------\n\nTITLE: Building a Full Grafana Development Docker Image (Bash)\nDESCRIPTION: This command uses the project's Makefile to execute the `build-docker-full` target, building a complete Docker image of Grafana intended for development use. The resulting image will be tagged `grafana/grafana:dev`. Requires Docker installed, and potentially increased memory allocation ( > 2 GiB) on Docker Desktop for macOS.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake build-docker-full\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Grafana Webhook Payload Structure in Go Template\nDESCRIPTION: This Go template defines the structure for a custom webhook notification payload in Grafana. It gathers various alert details like receiver, status, labels, annotations, and calls a nested template (`webhook.custom.simple_alerts`) to format the alerts array. The final output is formatted as a pretty-printed JSON object using `data.ToJSONPretty`. It relies on Grafana's template functions (`coll.Dict`, `tmpl.Exec`, `data.JSON`, `index`) and the alert context provided during execution.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/example-custom-json-payload.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"webhook.custom.payload\" -}}\n  {{ coll.Dict\n  \"receiver\" .Receiver\n  \"status\" .Status\n  \"alerts\" (tmpl.Exec \"webhook.custom.simple_alerts\" .Alerts | data.JSON)\n  \"groupLabels\" .GroupLabels\n  \"commonLabels\" .CommonLabels\n  \"commonAnnotations\" .CommonAnnotations\n  \"externalURL\" .ExternalURL\n  \"version\" \"1\"\n  \"orgId\"  (index .Alerts 0).OrgID\n  \"truncatedAlerts\"  .TruncatedAlerts\n  \"groupKey\" .GroupKey\n  \"state\"  (tmpl.Inline \"{{ if eq .Status \\\"resolved\\\" }}ok{{ else }}alerting{{ end }}\" . )\n  \"allVariables\"  .Vars\n  \"title\" (tmpl.Exec \"default.title\" . )\n  \"message\" (tmpl.Exec \"default.message\" . )\n  | data.ToJSONPretty \" \"}}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Example Permissions for Grafana Viewer Basic Role\nDESCRIPTION: This snippet lists several example permissions included in the standard Grafana 'Viewer' basic role. Each line represents a permission defined by an `Action` (e.g., `datasources.id:read`, `annotations:read`) and a `Scope` (e.g., `datasources:*`, `annotations:type:dashboard`), detailing the specific capabilities granted to users with this role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- `Action: datasources.id:read, Scope: datasources:*`: Enables the viewer to see the ID of a data source.\n- `Action: orgs:read`: Enables the viewer to see their organization details\n- `Action: annotations:read, Scope: annotations:*`: Enables the viewer to see annotations that other users have added to a dashboard.\n- `Action: annotations:create, Scope: annotations:type:dashboard`: Enables the viewer to add annotations to a dashboard.\n- `Action: annotations:write, Scope: annotations:type:dashboard`: Enables the viewer to modify annotations of a dashboard.\n- `Action: annotations:delete, Scope: annotations:type:dashboard`: Enables the viewer to remove annotations from a dashboard.\n```\n\n----------------------------------------\n\nTITLE: Single Correlation Retrieval Response in Grafana HTTP API\nDESCRIPTION: HTTP response containing the details of a specific correlation. The response includes all properties including source and target data sources, label, description, and configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"description\": \"Logs to Traces\",\n  \"label\": \"My Label\",\n  \"sourceUID\": \"uyBf2637k\",\n  \"targetUID\": \"PDDA8E780A17E7EF1\",\n  \"uid\": \"J6gn7d31L\",\n  \"provisioned\": false,\n  \"type\": \"query\",\n  \"config\": {\n    \"field\": \"message\",\n    \"target\": {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx WebSocket Proxy for Grafana\nDESCRIPTION: Nginx configuration example for properly proxying WebSocket connections to Grafana. Includes necessary header settings and upstream server configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n\n    upstream grafana {\n        server 127.0.0.1:3000;\n    }\n\n    server {\n        listen 8000;\n\n        location / {\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            proxy_set_header Host $http_host;\n            proxy_pass http://grafana;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Reusable Rendering Mode - Bash\nDESCRIPTION: Sets the rendering mode to 'reusable' via an environment variable, leading to a single browser instance that is reused for rendering with a new incognito page per request. This mode is experimental and may not recover automatically from browser crashes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_MODE=reusable\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ESRI MapServer as Default Baselayer in Grafana (INI)\nDESCRIPTION: Example for setting a custom ArcGIS map server as the default base map in Grafana. This configuration requires specifying a custom URL and attribution for the tile server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ngeomap_default_baselayer = `{\n  \"type\": \"esri-xyz\",\n  \"config\": {\n    \"server\": \"custom\",\n    \"url\": \"[tile server url]\",\n    \"attribution\": \"[tile server attribution]\"\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana OSS via APT - Bash\nDESCRIPTION: Installs the latest open source (OSS) version of Grafana using the apt package manager. Dependencies: Prior repository configuration. Input: None. Output: Installs grafana OSS. Note: Use for stable or beta based on repository above.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Installs the latest OSS release:\nsudo apt-get install grafana\n```\n\n----------------------------------------\n\nTITLE: Response for Listing Permissions Assigned to a Service Account (HTTP)\nDESCRIPTION: Example response for the GET request to list permissions assigned to a service account. It includes the action and scope for each permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n[\n    {\n        \"action\": \"ldap.status:read\",\n        \"scope\": \"\"\n    },\n    {\n        \"action\": \"ldap.user:read\",\n        \"scope\": \"\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Remote Write to Grafana Cloud (YAML)\nDESCRIPTION: This YAML snippet configures Prometheus to send its scraped metrics to a Grafana Cloud Prometheus instance using the 'remote_write' feature. It requires specifying the remote write endpoint URL, username, and a Grafana.com API Key (as the password) within the 'prometheus.yml' file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n- url: <https://your-remote-write-endpoint>\n  basic_auth:\n    username: <your user name>\n    password: <Your Grafana.com API Key>\n```\n\n----------------------------------------\n\nTITLE: SQL query with column aliasing for Grafana table panels\nDESCRIPTION: SQL query that demonstrates how to rename columns using AS syntax. This allows customizing the column headers that appear in the Grafana Table panel visualization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  c_bit as [column1], c_tinyint as [column2]\nFROM\n  [mssql_types]\n```\n\n----------------------------------------\n\nTITLE: Delete an Alert Rule by UID - HTTP\nDESCRIPTION: This snippet provides the HTTP request line format for deleting a specific alert rule by its unique UID using the provisioning API. The DELETE method targets the /alert-rules/:uid endpoint. Additional optional headers (e.g., X-Disable-Provenance: true) may influence resource editability but are not strictly required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/provisioning/alert-rules/:uid\n```\n\n----------------------------------------\n\nTITLE: Selecting Clustered Rendering Mode - Bash\nDESCRIPTION: Configures the image renderer to use clustered mode, controlling parallelization and concurrency levels. Multiple related environment variables specify the clustering strategy, maximum concurrency, and request timeout. This allows tuning browser or incognito page usage to optimize memory and CPU.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_MODE=clustered\nRENDERING_CLUSTERING_MODE=browser\nRENDERING_CLUSTERING_MAX_CONCURRENCY=5\nRENDERING_CLUSTERING_TIMEOUT=30\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profile (Go)\nDESCRIPTION: Command to analyze a collected CPU profile using the Go pprof tool.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof -http=localhost:8081 profile.pprof\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana API with HTTP Basic Authorization\nDESCRIPTION: This example shows how to use cURL to make an API call to Grafana's access control endpoint using HTTP basic authorization. It demonstrates how to pass a username and password for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location '<grafana_url>/api/access-control/builtin-roles' --user 'user:password'\n```\n\n----------------------------------------\n\nTITLE: Compatible Rule API Endpoints for Import/Export - HTTP\nDESCRIPTION: Demonstrates the set of RESTful HTTP endpoints compatible with Grafana Mimirtool or Coretextool for working with alert rule groups. Includes methods for fetching, creating, updating, and deleting rule groups by namespace or group. Use GET to retrieve rule groups, POST to add or update, and DELETE to remove rules in the specified namespace/group. Make sure to provide required authentication headers and (for POST) datasource-related headers as noted.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /convert/prometheus/config/v1/rules - Get all rule groups across all namespaces\\nGET /convert/prometheus/config/v1/rules/<NamespaceTitle> - Get rule groups in a specific namespace\\nGET /convert/prometheus/config/v1/rules/<NamespaceTitle>/<Group> - Get a single rule group\\n\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /convert/prometheus/config/v1/rules - Create/update multiple rule groups across multiple namespaces\\nPOST /convert/prometheus/config/v1/rules/<NamespaceTitle> - Create/update a single rule group in a namespace\\n\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /convert/prometheus/config/v1/rules/{NamespaceTitle} - Delete all alert rules in a namespace\\nDELETE /convert/prometheus/config/v1/rules/{NamespaceTitle}/{Group} - Delete a specific rule group\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Helm Chart to a Namespace - Helm CLI - Bash\nDESCRIPTION: This command deploys the Grafana Helm chart to the `monitoring` Kubernetes namespace. It requires the Helm repository to be added and the namespace to exist. Key parameters include the chart release name, the repository/package, and the namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-grafana grafana/grafana --namespace monitoring\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Grafana Data Source by ID via HTTP API (Deprecated)\nDESCRIPTION: Details the `GET /api/datasources/:datasourceId` endpoint for fetching a specific data source using its numeric ID. This API is deprecated since Grafana v9.0.0 and will be removed; use UID or name lookups instead. Requires `datasources:read` permission with scopes like `datasources:*`, `datasources:id:*`, or `datasources:id:<ID>`. The request includes the data source ID in the path and standard headers. The response is a JSON object containing the details of the specified data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"uid\": \"kLtEtcRGk\",\n  \"orgId\": 1,\n  \"name\": \"test_datasource\",\n  \"type\": \"graphite\",\n  \"typeLogoUrl\": \"\",\n  \"access\": \"proxy\",\n  \"url\": \"http://mydatasource.com\",\n  \"password\": \"\",\n  \"user\": \"\",\n  \"database\": \"\",\n  \"basicAuth\": false,\n  \"basicAuthUser\": \"\",\n  \"basicAuthPassword\": \"\",\n  \"withCredentials\": false,\n  \"isDefault\": false,\n  \"jsonData\": {\n    \"graphiteType\": \"default\",\n    \"graphiteVersion\": \"1.1\"\n  },\n  \"secureJsonFields\": {},\n  \"version\": 1,\n  \"readOnly\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example Keycloak Role Names (Plaintext)\nDESCRIPTION: Lists the example role names (`admin`, `editor`, `viewer`) that need to be created and assigned to users in Keycloak. These roles correspond to the example `role_attribute_path` configuration in Grafana, allowing Keycloak roles to be mapped to Grafana organization roles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nadmin\neditor\nviewer\n```\n\n----------------------------------------\n\nTITLE: Backing up and Restoring MySQL Database for Grafana\nDESCRIPTION: Commands for backing up and restoring a MySQL database used by Grafana. The backup command creates a SQL dump file, while the restore command imports the backup into the database.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/back-up/back-up-grafana.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbackup:\n> mysqldump -u root -p[root_password] [grafana] > grafana_backup.sql\n\nrestore:\n> mysql -u root -p grafana < grafana_backup.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Viewport Width - JSON\nDESCRIPTION: Defines the maximum permitted rendering viewport width via rendering.maxWidth. Input is an integer (pixels) that constrains request parameters to prevent out-of-bounds resource usage.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"maxWidth\": 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Query Labels in Annotation\nDESCRIPTION: This Go template example shows how to incorporate multiple labels (e.g., `environment`, `region`) returned by the alert query into an annotation using the `$labels` variable. This adds detailed contextual information about where the alert originated.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_5\n\nLANGUAGE: gotemplate\nCODE:\n```\nAlert triggered in {{ $labels.environment }} on {{ $labels.region }} region.\n```\n\n----------------------------------------\n\nTITLE: Registering Inputs with react-hook-form in Form Component (JavaScript/JSX)\nDESCRIPTION: Shows how to register a basic input field inside the Form component using react-hook-form's register function in JSX. Demonstrates essential spread operator usage for the returned input props. Requires the Form and Input components and supports specifying field names and validation directly within the registration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Input {...register('inputName')} />\n```\n\n----------------------------------------\n\nTITLE: Defining an Alert Iteration Template - Go Templating - Go\nDESCRIPTION: This code snippet defines a custom Go template that iterates over the list of alerts in a notification, printing out key properties for each alert, including fields specific to Grafana-managed alerts. Dependencies are an available array of alert objects in the dot (.) context, and the expanded fields expected in Grafana's alerting data structure. The template outputs alert details such as status, labels, annotations, timing, and associated dashboard/panel links if available.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{ define \"custom_template\" }}\n{{ range .Alerts }}\n  {{ .Status }}\n  {{ .Labels }}\n  {{ .Annotations }}\n  {{ .StartsAt }}\n  {{ .EndsAt }}\n  {{ .GeneratorURL }}\n  {{ .Fingerprint }}\n\n  {{/* Only available for Grafana-managed alerts */}}\n  {{ .DashboardURL }}\n  {{ .PanelURL }}\n  {{ .SilenceURL }}\n  {{ .Values }}\n  {{ .ValueString }}\n{{ end }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Docker Image with Pre-installed Image Renderer Plugin\nDESCRIPTION: A series of bash commands to build a custom Grafana Docker image with the Image Renderer plugin pre-installed using the GF_INSTALL_IMAGE_RENDERER_PLUGIN build argument.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# go to the folder\ncd packaging/docker/custom\n\n# running the build command\ndocker build \\\n  --build-arg \"GRAFANA_VERSION=latest\" \\\n  --build-arg \"GF_INSTALL_IMAGE_RENDERER_PLUGIN=true\" \\\n  -t grafana-custom .\n\n# running the docker run command\ndocker run -d -p 3000:3000 --name=grafana grafana-custom\n```\n\n----------------------------------------\n\nTITLE: Updating User Permissions via Grafana Admin HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates an HTTP PUT request for modifying a user's admin permissions, submitting a JSON payload to the appropriate endpoint. The operation requires Basic Authentication and the correct admin permissions. Returns a JSON object confirming the update.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/admin/users/2/permissions HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\"isGrafanaAdmin\": true}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"User permissions updated\"}\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker with Custom Log Mode (Bash)\nDESCRIPTION: Runs the `grafana/grafana-enterprise` Docker image, configuring it to log to both standard output (`console`) and a file (`file`) within the container. This is achieved by setting the `GF_LOG_MODE` environment variable using the `-e` flag.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Run Grafana while logging to both standard out\n# and /var/log/grafana/grafana.log\n\ndocker run -p 3000:3000 -e \"GF_LOG_MODE=console file\" grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Team Members - HTTP\nDESCRIPTION: Executes a PUT request to update all members and admins of a team in one operation. Accepts a list of member and admin emails in the JSON body, replacing previous membership. Used for mass updates by authorized clients.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/teams/1/members HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\\n\\n{\\n  \\\"members\\\": [\\\"user1@email.com\\\", \\\"user2@email.com\\\"]\\n  \\\"admins\\\": [\\\"user3@email.com\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating APT Cache and Installing Grafana (Bash)\nDESCRIPTION: First, updates the local package index using `apt-get update` to include packages from the newly added Grafana repository. Then, installs the `grafana` package using `apt-get install -y grafana`. The `-y` flag automatically confirms the installation prompts. Requires `sudo` privileges and `apt-get`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y grafana\n```\n\n----------------------------------------\n\nTITLE: Single Bind DN Configuration Example (ldap.toml)\nDESCRIPTION: Illustrates an alternative LDAP binding method in `ldap.toml` that avoids storing a service account password. By using `%s` as a placeholder for the username within the `bind_dn` pattern, Grafana attempts to bind directly as the logging-in user. The `bind_password` setting is omitted in this configuration, but `search_filter` and `search_base_dns` are still required for attribute retrieval.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbind_dn = \"cn=%s,o=users,dc=grafana,dc=org\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Provider for Encryption in grafana.ini (INI)\nDESCRIPTION: This snippet shows how to define an Azure Key Vault provider section within the Grafana configuration file (grafana.ini) to specify credentials and key information for encryption. It requires valid Azure Directory ID, Application ID, Client Secret, Key Name, and Vault URI values. This section enables Grafana to interact with Azure Key Vault for envelope encryption of database secrets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Azure Key Vault provider setup\n;[security.encryption.azurekv.example-encryption-key]\n# Azure Application directory ID (tenant)\ntenant_id = 1234abcd-12ab-34cd-56ef-1234567890ab\n# Azure Application application ID (client).\nclient_id = 1356dfgh-12ab-34cd-56ef-3322114455cc\n# Azure Application client secret.\nclient_secret = FbE4X~4Jq45ERKxx823Aheb9plBjQqHHe81Sc\n# Azure Key Vault key name.\nkey_id = mysecretkey\n# Azure Key Vault uri.\nvault_uri = https://my-vault-name.vault.azure.net\n```\n\n----------------------------------------\n\nTITLE: Configuring Collaborative Grafana Teams via INI\nDESCRIPTION: This INI configuration snippet, intended for the Grafana configuration file, sets up Grafana for collaborative teams. It sets the default organization role (`auto_assign_org_role`) to `Viewer`, allowing users to view resources by default. Similar to the isolated team configuration, `role_attribute_path` uses a JMESPath expression to conditionally assign the 'Admin' role based on group membership, defaulting to 'None' otherwise (though the default Viewer role provides base visibility). This configuration is presented as an example within comments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nauto_assign_org_role = Viewer\nrole_attribute_path = contains(groups[*], 'admin') && 'Admin' || 'None'\n```\n```\n\n----------------------------------------\n\nTITLE: Using the abs Function in Grafana Expressions\nDESCRIPTION: Demonstrates the usage of the `abs` function, which returns the absolute value of its argument. It accepts either a number or a time series, returning the same type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_5\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nabs(-1)\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nabs($A)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Simple Role Mapping\nDESCRIPTION: Sample JSON payload received from an OAuth2 provider containing a simple 'role' field. This field's value ('Editor') is intended to be directly mapped to a Grafana user role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"role\": \"Editor\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana to Serve From Sub Path - Bash\nDESCRIPTION: Defines Grafana's own configuration for serving under a sub path, set within grafana.ini's [server] section. The 'root_url' must specify the external URL including the sub path, and 'serve_from_sub_path' set to true enables correct internal link rendering. Use this if your reverse proxy does not handle sub path rewrites. Requires Grafana restart for config changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n[server]\\ndomain = example.com\\nroot_url = %(protocol)s://%(domain)s:%(http_port)s/grafana/\\nserve_from_sub_path = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggletip Component in React TSX\nDESCRIPTION: This example demonstrates how to use the Toggletip component in a React application. It includes setting up the onClose function, configuring Toggletip properties, and wrapping it around an IconButton.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Toggletip/Toggletip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction onClose() {\n  // code to execute when the toggletip is closed\n}\n\nreturn (\n  <Toggletip\n    content=\"Toggletip body\"\n    title=\"This is the title of the Toggletip\"\n    footer=\"Toggletip footer text\"\n    closeButton={true}\n    onClose={onClose}\n  >\n    <IconButton name=\"question-circle\" tooltip=\"IconButton containing a Toggletip\" />\n  </Toggletip>\n);\n```\n\n----------------------------------------\n\nTITLE: Assigning Grafana Server Administrator Role Based on Email (INI)\nDESCRIPTION: This INI configuration assigns the 'GrafanaAdmin' server role (and the 'Admin' organization role) to the user with email 'admin@company.com', while other users get the 'Viewer' role. It requires enabling `allow_assign_grafana_admin = true` and setting `skip_org_role_sync = false`. The `role_attribute_path` uses a JMESPath expression to perform the conditional role assignment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nallow_assign_grafana_admin = true\nskip_org_role_sync = false\nrole_attribute_path = email=='admin@company.com' && 'GrafanaAdmin' || 'Viewer'\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Correlations Between Data Sources in Grafana HTTP API\nDESCRIPTION: HTTP request and response for creating a correlation between two data sources. The sourceUID is specified in the path, while the targetUID, label, description, type and configuration are provided in the request body.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/uid/uyBf2637k/correlations HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n{\n\t\"targetUID\": \"PDDA8E780A17E7EF1\",\n\t\"label\": \"My Label\",\n\t\"description\": \"Logs to Traces\",\n  \"type\": \"query\",\n  \"config\": {\n    \"field\": \"message\",\n    \"target\": {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Login for Grafana Cloud Authentication\nDESCRIPTION: Configuration setting to enable automatic login with Grafana Cloud credentials, bypassing the login screen when possible.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauto_login = true\n```\n\n----------------------------------------\n\nTITLE: Generating Prop Controls with Storybook ArgTypes for RangeSlider (MDX)\nDESCRIPTION: This MDX/JSX snippet uses the `ArgTypes` component from Storybook, passing the imported `RangeSliderProps` type to the `of` prop. This automatically generates an interactive documentation table displaying the properties (props) of the `RangeSlider` component, inferring details from the provided TypeScript type.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={RangeSliderProps} />\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Notification Policy Tree using Terraform\nDESCRIPTION: Configures the Grafana notification policy tree using the `grafana_notification_policy` resource. It sets a default contact point (referenced by `grafana_contact_point.<terraform_contact_point_name>.name`) and defines nested policies. The example shows a nested policy that also uses the same contact point, includes a matcher block (`...`), and applies the 'No weekends' mute timing (referenced by `grafana_mute_timing.<terraform_mute_timing_name>.name`). Requires replacing placeholder names for the contact point and mute timing resources and defining the matcher logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_notification_policy\" \"my_policy_tree\" {\ncontact_point = grafana_contact_point.<terraform_contact_point_name>.name\n...\n\npolicy {\n    contact_point = grafana_contact_point.<terraform_contact_point_name>.name\n\n    matcher {...}\n\n    mute_timings = [grafana_mute_timing.<terraform_mute_timing_name>.name]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Reduced Motion Handling to Transition Properties (Styled Components, TypeScript)\nDESCRIPTION: These examples illustrate how to apply transitions to style objects using either direct application or wrapping in 'prefers-reduced-motion'. The incorrect usage shows a plain transition, while the correct usage demonstrates the use of theme.transitions.handleMotion and media queries to consistently apply transitions for users regardless of motion preferences. Dependencies: GrafanaTheme2, css, transition creation helpers. All methods expect a theme input and return a style block for a 'card' class. Usage of theme tokens for durations is required.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Bad ❌\nconst getStyles = (theme: GrafanaTheme2) => ({\n  card: css({\n    transition: theme.transitions.create(['background-color'], {\n      duration: theme.transitions.duration.short,\n    }),\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Good ✅\nconst getStyles = (theme: GrafanaTheme2) => ({\n  card: css({\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: theme.transitions.create(['background-color'], {\n        duration: theme.transitions.duration.short,\n      }),\n    },\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Good ✅\nconst getStyles = (theme: GrafanaTheme2) => ({\n  card: css({\n    '@media (prefers-reduced-motion: no-preference), @media (prefers-reduced-motion: reduce)': {\n      transition: theme.transitions.create(['background-color'], {\n        duration: theme.transitions.duration.short,\n      }),\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repositories - Helm CLI - Bash\nDESCRIPTION: This command forces Helm to update its local index of chart repositories, ensuring access to the latest versions. It requires that repositories have already been added via `helm repo add`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Generating Grafana Organization Invitation Email Body (Go Template)\nDESCRIPTION: This Go template defines the structure and content of an email sent to a user upon being added to a Grafana organization. It utilizes placeholders such as `{{.InvitedBy}}`, `{{.OrgName}}`, `{{.AppUrl}}`, and `{{.BuildVersion}}` which are dynamically populated at runtime. The template also includes a hidden subject line (`{{HiddenSubject}}`) and dynamically generates the current year using the `now | date \"2006\"` function.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/invited_to_org.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{HiddenSubject .Subject \"{{.InvitedBy}} has added you to the {{.OrgName}} organization\"}}\n\nYou have been added to {{.OrgName}}\n\n{{.InvitedBy}} has added you to the {{.OrgName}} organization in Grafana.\nOnce logged in, {{.OrgName}} will be available in the left side menu, in the dropdown below your username.\n\nLog in now:\n{{.AppUrl}}\n\n\nSent by Grafana v{{.BuildVersion}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Organizing Standalone App Pages - Grafana INI\nDESCRIPTION: This configuration section allows assigning individual app plugin pages to navigation sections by referencing their 'path' field. Under this header, configuration lines follow the format '<pageUrl> = <sectionId> <sortWeight>', enabling granular organization of standalone pages. It is meant for custom navigation structure in the Grafana UI, with parameters required per standalone page.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\n[navigation.app_standalone_pages]\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Infinity Values\nDESCRIPTION: Provides an example of how to explicitly check for negative infinity using a comparison operator, as `is_inf` checks for both positive and negative infinity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_7\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n$A == infn()\n```\n\n----------------------------------------\n\nTITLE: Filtering Alert Instances by Label Query in Grafana\nDESCRIPTION: This example demonstrates filtering alert instances in the Grafana Alert List panel using label query syntax. The query `{severity=\"critical\", instance=~\"cluster-us-.+\"}` selects alert instances where the 'severity' label is exactly 'critical' and the 'instance' label matches the regular expression 'cluster-us-.+'. This feature allows for precise filtering of alerts based on their associated labels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/alert-list/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{severity=\"critical\", instance=~\"cluster-us-.+\"}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana Enterprise via APT - Shell\nDESCRIPTION: Removes the grafana-enterprise package from the local system using apt. Input: None. Output: Grafana Enterprise uninstalled, configuration and user data may need separate cleanup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get remove grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Permissions Response Structure - JSON\nDESCRIPTION: This JSON snippet shows an example response obtained from the Grafana API, detailing the structured permissions attached to a service account token. Each key represents a permission (e.g., \"dashboards:read\") mapped to an array of resource identifiers the token can operate on. No direct dependencies; this is for reference as a typical API output. Inputs: N/A. Outputs: Permission-resource mapping. Limitation: Sample only, may omit some permissions in actual responses.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dashboards:read\": [\"dashboards:uid:70KrY6IVz\"],\n  \"dashboards:write\": [\"dashboards:uid:70KrY6IVz\"],\n  \"datasources.id:read\": [\"datasources:*\"],\n  \"datasources:read\": [\"datasources:*\"],\n  \"datasources:explore\": [\"\"],\n  \"datasources:query\": [\"datasources:uid:grafana\"],\n  \"datasources:read\": [\"datasources:uid:grafana\"],\n  \"orgs:read\": [\"\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure Monitor with Workload Identity in YAML\nDESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure Workload Identity authentication. This method is used when running Grafana in Kubernetes environments such as AKS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1 # config file version\n\ndatasources:\n  - name: Azure Monitor\n    type: grafana-azure-monitor-datasource\n    access: proxy\n    jsonData:\n      azureAuthType: workloadidentity\n      subscriptionId: <subscription-id> # Optional, default subscription\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Overriding Grafana Homepath for Admin Command (Bash)\nDESCRIPTION: Demonstrates using the '--homepath' global option to specify the Grafana installation directory when running an admin command, such as resetting the admin password. This is useful if the CLI is not run from the installation directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --homepath \\\"/usr/share/grafana\\\" admin reset-admin-password <new password>\n```\n\n----------------------------------------\n\nTITLE: Mounting Additional ConfigMap in values.yaml for CA Certificates - YAML\nDESCRIPTION: This YAML snippet shows how to specify additional ConfigMap mounts in Grafana Helm's values.yaml for inserting CA certificates into container file systems. It lists the ConfigMap name, mount path, and read-only status in the extraConfigmapMounts section. Correct structure and indentation are crucial. Prerequisites: the referenced ConfigMap ('grafana-ca-cert') must exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n.......\n............\n......\nextraConfigmapMounts:\n   - name: ca-certs-configmap\n     mountPath: /etc/ssl/certs/ca.pem\n     subPath: ca.pem\n     configMap: grafana-ca-cert\n     readOnly: true\n.......\n............\n......\n```\n\n----------------------------------------\n\nTITLE: Filtering Hostnames by Region with Multi-Value Template Variable - SQL\nDESCRIPTION: Returns hostnames from 'my_host' filtered by selected region(s), supporting variables where 'region' can resolve to single or multiple values. Utilizes SQL 'IN' clause for compatibility with Grafana's multi-value variable feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM my_host  WHERE region IN($region)\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana APT GPG Key (Bash)\nDESCRIPTION: Downloads the Grafana GPG public key using `wget`, de-armors it using `gpg`, and saves it to `/etc/apt/keyrings/grafana.gpg`. This key is required by `apt` to verify the authenticity of packages downloaded from the Grafana repository. Requires `wget`, `gpg`, and `sudo` privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings/\nwget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Enabling SMTP Server in Grafana (INI)\nDESCRIPTION: This configuration snippet enables the SMTP server within Grafana, which is a prerequisite for sending emails, including those required for passwordless authentication (magic links/OTP). Setting `enabled = true` under the `[smtp]` section activates the SMTP functionality. Further SMTP settings are required for actual email delivery.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[smtp]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Using TimeRangeInput React Component with Grafana UI in JSX\nDESCRIPTION: This sample shows how to import and use the TimeRangeInput component from the @grafana/ui package within a React form. The component is configured with a value prop for the current time range, an onChange handler for range updates, and an onChangeTimeZone handler for timezone changes. Inputs include the current time range object, and event handlers that receive updated range or timezone values; outputs are user interface interactions and event logging. Requires @grafana/ui and React as dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/TimeRangeInput.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TimeRangeInput } from '@grafana/ui';\\n\\n<TimeRangeInput\\n  value={timeRange}\\n  onChange={(range) => console.log('range', range)}\\n  onChangeTimeZone={(tz) => console.log('timezone', tz)}\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Grafana - INI\nDESCRIPTION: This ini snippet demonstrates the required configuration options in 'grafana.ini' to enable HTTPS. Key parameters include certificate and key file paths, root URL, domain, and protocol. Users must replace values with their actual domain and certificate locations. Proper permissions on the certificate files and a running Grafana server are prerequisites.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[server]\nhttp_addr =\nhttp_port = 3000\ndomain = mysite.com\nroot_url = https://subdomain.mysite.com:3000\ncert_key = /etc/grafana/grafana.key\ncert_file = /etc/grafana/grafana.crt\nenforce_domain = False\nprotocol = https\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Authentication for Grafana Metrics Endpoint in TOML\nDESCRIPTION: Secures the Grafana metrics endpoint by enabling basic authentication within the `[metrics]` section of `grafana.ini`. Setting `basic_auth_username` and `basic_auth_password` requires users to provide these credentials to access metrics data, preventing potential information leakage. By default, metrics are accessible without authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[metrics]\n# If both are set, basic auth will be required for the metrics endpoints\nbasic_auth_username =\nbasic_auth_password =\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Deployment on Kubernetes using Kubectl\nDESCRIPTION: Performs a rolling restart of the Grafana deployment named 'my-release' on the Kubernetes cluster. This command is necessary to apply configuration changes, such as database settings or license validation type, and activate the Grafana Enterprise features. Requires `kubectl` access to the EKS cluster.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment my-release\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Role Mapping from Okta Groups - INI Configuration - ini\nDESCRIPTION: This snippet shows INI configuration directives for mapping Okta group membership to Grafana organizations and roles using the org_attribute_path and org_mapping settings. The example maps Group 1 to Viewer in org_foo, Group 2 to Editor in org_bar, and a wildcard entry assigns Editor to org_baz (OrgID=3). Required prerequisites include Okta groups, Grafana organizations, and appropriate user info returned by the Okta OIDC provider. Place these lines in your configuration file to enable org-level access mapping based on Okta groups.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/okta/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\norg_attribute_path = groups\norg_mapping = [\"Group 1:org_foo:Viewer\", \"Group 2:org_bar:Editor\", \"*:3:Editor\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana APT Repository Source (Bash)\nDESCRIPTION: Creates a new source list file `/etc/apt/sources.list.d/grafana.list` and adds the Grafana stable repository definition. It specifies that packages from this repository should be signed by the previously added GPG key (`/etc/apt/keyrings/grafana.gpg`). Requires `sudo` privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n```\n\n----------------------------------------\n\nTITLE: Setting Grafana to Bind to Port 80 Using setcap\nDESCRIPTION: Command to give the Grafana binary permission to bind to privileged ports (below 1024) using Linux capabilities, allowing it to bind directly to port 80 without running as root.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo setcap 'cap_net_bind_service=+ep' /usr/sbin/grafana-server\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Exporting All Alert Rules - HTTP\nDESCRIPTION: Defines an HTTP GET endpoint for exporting all alert rules in a provisioning file format (e.g., yaml, json, hcl) in Grafana. Optional query parameters enable format selection and file download behavior. The endpoint responds with 200 OK and an AlertingFileExport object upon success, or 404 Not Found for missing data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/alert-rules/export\n```\n\n----------------------------------------\n\nTITLE: Configuring PagerDuty Contact Point - YAML\nDESCRIPTION: Defines PagerDuty as a notification backend for Grafana. Requires the 32-character Events API key ('integrationKey') and optionals like severity, class, component, group, and summary. Parameters tune the alert routing and formatting for PagerDuty. Outputs incidents in the PagerDuty system linked to the configured integration key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntype: pagerduty\\nsettings:\\n  # <string, required> the 32-character Events API key https://support.pagerduty.com/docs/api-access-keys#events-api-keys\\n  integrationKey: XXX\\n  # <string> options: critical, error, warning, info\\n  severity: critical\\n  # <string>\\n  class: ping failure\\n  # <string>\\n  component: Grafana\\n  # <string>\\n  group: app-stack\\n  # <string>\\n  summary: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Arguments via args in Go Templates - Go Template\nDESCRIPTION: Demonstrates the use of {{ args }} to create a map from multiple arguments in Go templates, with usage of define/template blocks. Used for passing several values to a template, especially where only one argument is allowed. Inputs are a variadic list, output is a map accessible as .arg0, .arg1, etc. Requires understanding of advanced Go template features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_13\n\nLANGUAGE: Go Template\nCODE:\n```\n{{define \"x\"}}{{.arg0}} {{.arg1}}{{end}}{{template \"x\" (args 1 \"2\")}}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Page Zoom Level - Bash\nDESCRIPTION: Sets RENDERING_VIEWPORT_PAGE_ZOOM_LEVEL to control the browser zoom level in renders. The value is a float (e.g., 1.5 for 150%) and affects the scaling of the rendered image. Default is 1 (100% zoom).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_VIEWPORT_PAGE_ZOOM_LEVEL=1\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Buckets with Flux in Grafana\nDESCRIPTION: This basic Flux query `buckets()` is executed within the Grafana query editor against an InfluxDB data source configured to use Flux. Its purpose is to retrieve and display a list of all available buckets in the connected InfluxDB instance, often used as an initial test to verify the data source connection and setup, typically visualized using a Table panel.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-influxdb.md#2025-04-23_snippet_0\n\nLANGUAGE: flux\nCODE:\n```\nbuckets()\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exporter for Grafana Audit Logs\nDESCRIPTION: This snippet shows the configuration options for the file exporter, which saves audit logs to files. It includes settings for the log file path, maximum number of files to keep, and maximum file size.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auditing.logs.file]\n# Path to logs folder\npath = data/log\n# Maximum log files to keep\nmax_files = 5\n# Max size in megabytes per log file\nmax_file_size_mb = 256\n```\n\n----------------------------------------\n\nTITLE: Creating a Library Element Response Example (HTTP/JSON)\nDESCRIPTION: Example HTTP 200 OK response after successfully creating a library element via a POST request. The JSON body contains the complete details of the newly created element, including its server-assigned ID, version, and full metadata, within the `result` field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": {\n        \"id\": 28,\n        \"orgId\": 1,\n        \"folderId\": 0,\n        \"folderUid\": \"\",\n        \"uid\": \"nErXDvCkzz\",\n        \"name\": \"Example library panel\",\n        \"kind\": 1,\n        \"type\": \"\",\n        \"description\": \"\",\n        \"model\": {...},\n        \"version\": 1,\n        \"meta\": {\n            \"folderName\": \"General\",\n            \"folderUid\": \"\",\n            \"connectedDashboards\": 0,\n            \"created\": \"2021-09-30T09:14:22.378307+02:00\",\n            \"updated\": \"2021-09-30T09:14:22.378307+02:00\",\n            \"createdBy\": {\n                \"id\": 1,\n                \"name\": \"admin\",\n                \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n            },\n            \"updatedBy\": {\n                \"id\": 1,\n                \"name\": \"admin\",\n                \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MS SQL Server Kerberos Authentication with Credential Cache File (JSON)\nDESCRIPTION: This JSON snippet provides an example configuration format for the MS SQL Server data source in Grafana when using the 'Credential cache file' method for Windows Active Directory (Kerberos) authentication. It defines an array of objects, each specifying connection details (user, database, address) and the path to the corresponding Kerberos credential cache file (`credentialCache`). Grafana uses this information to match the appropriate credentials based on the connection parameters.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-ms-sql-server.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"user\": \"grot@GF.LAB\",\n    \"database\": \"dbone\",\n    \"address\": \"mysql1.mydomain.com:3306\",\n    \"credentialCache\": \"/tmp/krb5cc_1000\"\n  },\n  {\n    \"user\": \"grot@GF.LAB\",\n    \"database\": \"dbtwo\",\n    \"address\": \"mysql2.gf.lab\",\n    \"credentialCache\": \"/tmp/krb5cc_1000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using ldd to Identify Missing Libraries (Bash)\nDESCRIPTION: Demonstrates how to use the `ldd` command on Linux to list the shared library dependencies of the Chromium executable used by the Grafana image renderer. This command helps identify which specific libraries are missing ('not found') on the system, guiding the installation process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <grafana-image-render plugin directory>\nldd chrome-headless-shell/linux-132.0.6781.0/chrome-headless-shell-linux64/chrome-headless-shell\n      linux-vdso.so.1 (0x00007fff1bf65000)\n      libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f2047945000)\n      libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2047924000)\n      librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f204791a000)\n      libX11.so.6 => not found\n      libX11-xcb.so.1 => not found\n      libxcb.so.1 => not found\n      libXcomposite.so.1 => not found\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace using Bash\nDESCRIPTION: Creates a new Kubernetes namespace named 'my-grafana' using the `kubectl` command-line tool. This isolates the Grafana deployment from other applications within the cluster, aiding in organization and resource management. Requires `kubectl` to be installed and configured to communicate with a Kubernetes cluster.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace my-grafana\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Namespace - kubectl - Bash\nDESCRIPTION: This snippet creates a new namespace in the Kubernetes cluster using `kubectl`. The namespace is used for isolating the Grafana deployment from other workloads. Requires `kubectl` configured with access to the target cluster.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace monitoring\n```\n\nLANGUAGE: bash\nCODE:\n```\nnamespace/monitoring created\n```\n\n----------------------------------------\n\nTITLE: Configuring Timepicker in Grafana Dashboard JSON\nDESCRIPTION: This JSON object details the configuration options for the dashboard's timepicker component, nested within the main dashboard JSON. It includes settings like visibility ('collapse', 'hidden'), state ('enable', 'now'), custom quick time ranges ('quick_ranges'), available refresh intervals ('refresh_intervals'), and the ability to offset 'now' using 'nowDelay'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"timepicker\": {\n    \"collapse\": false,\n    \"enable\": true,\n    \"notice\": false,\n    \"now\": true,\n    \"hidden\": false,\n    \"nowDelay\": \"\",\n    \"quick_ranges\": [\n      {\n        \"display\": \"Last 6 hours\",\n        \"from\": \"now-6h\",\n        \"to\": \"now\"\n      },\n      {\n        \"display\": \"Last 7 days\",\n        \"from\": \"now-7d\",\n        \"to\": \"now\"\n      }\n    ],\n    \"refresh_intervals\": [\n      \"5s\",\n      \"10s\",\n      \"30s\",\n      \"1m\",\n      \"5m\",\n      \"15m\",\n      \"30m\",\n      \"1h\",\n      \"2h\",\n      \"1d\"\n    ],\n    \"status\": \"Stable\",\n    \"type\": \"timepicker\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Annotation Output with Multiple Labels\nDESCRIPTION: This shows the rendered output of a Grafana alert annotation template that includes multiple labels (`environment` and `region`). It illustrates how different pieces of label data are inserted into the final annotation text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nAlert triggered in production on AMER region.\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events in a Grafana Service\nDESCRIPTION: Example showing how to subscribe to events in a Grafana service by implementing an Init method that registers event listeners. The event listener method will be called whenever the specified event occurs.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *MyService) Init() error {\n    s.bus.AddEventListener(s.UserCreated)\n    return nil\n}\n\nfunc (s *MyService) UserCreated(event *events.UserCreated) error {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Threshold Conditions in Grafana Alert Expressions\nDESCRIPTION: Demonstrates various comparison operators available in Grafana's Threshold expression type. These expressions compare numeric values from queries or other expressions (represented by variables like $A, $B) against static thresholds or ranges (e.g., > 5, < 3, == 2, within 0-10). A threshold expression returns 1 (true) if the condition is met and 0 (false) otherwise, often serving as the final alert condition.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIs above: $A > 5\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs below: $B < 3\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs equal to: $A == 2\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs not equal to: $B =! 4\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs above or equal to: $A >= 8\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs below or equal to: $B <= 16\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs within range: $A > 0 AND $A < 10\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs outside range: $B < 0 OR $B > 100\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs within range included: $A >= 0 AND $A <= 10\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIs outside range included: $B <= 0 OR $B >= 100\n```\n\n----------------------------------------\n\nTITLE: Creating Key/Value Templating Variable in PostgreSQL\nDESCRIPTION: Demonstrates a SQL query that creates a key/value templating variable by selecting hostname as text and id as value. This query format allows for more user-friendly dropdown options in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname AS __text, id AS __value FROM host\n```\n\n----------------------------------------\n\nTITLE: Getting an Alert Rule Group via Grafana Provisioning API (HTTP)\nDESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/folder/:folderUid/rule-groups/:group` to retrieve a specific Grafana alert rule group within a specified folder. Requires `FolderUID` and `Group` as path parameters to identify the target resource. A successful request returns a 200 OK status with the `AlertRuleGroup` object, whereas a 404 Not Found status indicates the folder or group was not found.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /api/v1/provisioning/folder/:folderUid/rule-groups/:group\n```\n\n----------------------------------------\n\nTITLE: Iterating over Collections with 'range' in Go Templates\nDESCRIPTION: Shows the basic usage of the `range` statement to iterate over an array or map (`$array`). Within the loop, the dot (`.`) is set to the current element, allowing access to its properties (e.g., `.itemPropertyName`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ range $array }}\n{{ .itemPropertyName }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Label based on Instance Label (Regex Match)\nDESCRIPTION: This Go template dynamically sets an `environment` label by using regular expression matching on the `instance` label. It employs the `match` function within conditional logic to check if the `instance` label starts with 'prod-server-' or 'staging-server-', assigning 'production' or 'staging' respectively, otherwise defaulting to 'development'. This offers more flexibility than exact matching.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_16\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- if match \"^prod-server-.*\" $labels.instance -}}\nproduction\n{{- else if match \"^staging-server-.*\" $labels.instance -}}\nstaging\n{{- else -}}\ndevelopment\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Response for Dashboard Restoration in Grafana HTTP API\nDESCRIPTION: This HTTP response confirms successful restoration of a dashboard to a previous version, providing the dashboard ID, slug, UID, and the new version number.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 67\n\n{\n  \"id\": 70,\n  \"slug\": \"my-dashboard\",\n  \"status\": \"success\",\n  \"uid\": \"QA7wKklGz\",\n  \"url\": \"/d/QA7wKklGz/my-dashboard\",\n  \"version\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Example Input Data for Convert Field Type Transformation\nDESCRIPTION: This table shows sample input data before applying the 'Convert field type' transformation. The 'Time' field contains string representations of years.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| Time       | Mark  | Value |\n| ---------- | ----- | ----- |\n| 2017-07-01 | above | 25    |\n| 2018-08-02 | below | 22    |\n| 2019-09-02 | below | 29    |\n| 2020-10-04 | above | 22    |\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Settings with HTTP PUT Request\nDESCRIPTION: Example HTTP PUT request to update Grafana settings. This example shows how to enable SAML authentication and remove a SAML configuration property. Available in Grafana Enterprise v8.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/admin/settings\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"updates\": {\n    \"auth.saml\": {\n      \"enabled\": \"true\"\n    }\n  },\n  \"removals\": {\n    \"auth.saml\": [\"single_logout\"]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Tracing - JSON\nDESCRIPTION: Provides a rendering.tracing.url key to specify the endpoint for sending OpenTelemetry trace data during rendering jobs. Use to integrate rendering service with OTel-compatible tracing systems like Jaeger or Zipkin. Input as a valid HTTP/S URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"tracing\": {\n      \"url\": \"http://localhost:4318/v1/traces\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Jaeger Data Source for Tracing Integration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to provision a Jaeger data source that can be used in conjunction with Loki for distributed tracing. The UID of this data source should match the datasourceUid in Loki's derived fields configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\n    - name: Jaeger\n      type: jaeger\n      url: http://jaeger-tracing-query:16686/\n      access: proxy\n      uid: my_jaeger_uid\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Server Configuration\nDESCRIPTION: Basic OpenLDAP server configuration example showing connection settings and attribute mappings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[[servers]]\nhost = \"127.0.0.1\"\nport = 389\nuse_ssl = false\nstart_tls = false\nssl_skip_verify = false\nbind_dn = \"cn=admin,dc=grafana,dc=org\"\nbind_password = \"grafana\"\nsearch_filter = \"(cn=%s)\"\nsearch_base_dns = [\"dc=grafana,dc=org\"]\n\n[servers.attributes]\nmember_of = \"memberOf\"\nemail =  \"email\"\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Grafana Version in Docker\nDESCRIPTION: A bash command to run a specific version of Grafana Enterprise in a Docker container on port 3000 in detached mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name grafana grafana/grafana-enterprise:<version number>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie SameSite Policy for SAML Compatibility in Grafana INI\nDESCRIPTION: Shows the `cookie_samesite` setting within the `[security]` section of the Grafana configuration file. Setting this to `none` is recommended when using SAML, especially with redirects, to ensure the Grafana session cookie is sent correctly across sites, preventing \"login session has expired\" errors. Requires `cookie_secure = true`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n[security]\ncookie_samesite = none\n```\n\n----------------------------------------\n\nTITLE: Configuring Inter-Plugin Backend Communication (INI)\nDESCRIPTION: Configuration examples for the `actions_allow_post_url` setting within the Grafana configuration file (`grafana.ini` or `custom.ini`). This option allows installed plugin frontends to communicate directly with the backends of other specified plugins using glob matching. By default, it's empty or commented out, preventing direct local communication. Examples show the default state, allowing all plugin backends, or allowing only a specific plugin's backend.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nactions_allow_post_url=\n```\n\nLANGUAGE: ini\nCODE:\n```\nactions_allow_post_url=/api/plugins/*\n```\n\nLANGUAGE: ini\nCODE:\n```\nactions_allow_post_url=/api/plugins/<GRAFANA_SPECIAL_APP>\n```\n\n----------------------------------------\n\nTITLE: Starring a Query in Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet shows a successful HTTP 200 OK response after starring a query. The JSON body returns the complete query history entry, reflecting its potentially updated starred status (although the example shows `starred: false`, a successful star operation would typically result in `starred: true`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"result\": {\n    \"uid\": \"P8zM2I1nz\",\n    \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n    \"createdBy\": 1,\n    \"createdAt\": 1643630762,\n    \"starred\": false,\n    \"comment\": \"Debugging query\",\n    \"queries\": [\n      {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PD8C576611E62080A\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ConfigMap with CA Certificate for Grafana - YAML\nDESCRIPTION: This YAML snippet creates a Kubernetes ConfigMap containing a CA certificate for Grafana to trust private TLS certificates. The file is intended to be applied to the cluster to store 'ca.pem' which should have the PEM-encoded certificate. Requires kubectl and a Kubernetes cluster. Key parameters include the name of the ConfigMap and the actual certificate contents.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# grafana-ca-configmap.yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: grafana-ca-cert\ndata:\n  ca.pem: |\n    -----BEGIN CERTIFICATE-----\n    (rest of the CA cert)\n    -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Source Resources by UID in HTTP\nDESCRIPTION: Sends a GET request to fetch resources from a data source identified by UID. This is the current recommended method for fetching resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET api/datasources/uid/P8045C56BDA891CB2/resources/dimension-keys?region=us-east-2&namespace=AWS%2FEC2&dimensionFilters=%7B%7D&metricName=CPUUtilization HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Role in Grafana RBAC API\nDESCRIPTION: Makes a POST request to create a new custom role with specified permissions. Requires the 'roles:write' action on 'permissions:type:delegate' scope to prevent privilege escalation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"version\": 1,\n    \"uid\": \"jZrmlLCGka\",\n    \"name\": \"custom:delete:roles\",\n    \"displayName\": \"custom delete roles\",\n    \"description\": \"My custom role which gives users permissions to delete roles\",\n    \"group\":\"My Group\",\n    \"displayName\": \"My Custom Role\",\n    \"global\": false,\n    \"permissions\": [\n        {\n            \"action\": \"roles:delete\",\n            \"scope\": \"permissions:type:delegate\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using __searchFilter with Tag Values in Graphite\nDESCRIPTION: Example showing how to integrate __searchFilter with tag_values to enable searching for server values as the user types in the dropdown.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntag_values(server, server=~${__searchFilter:regex})\n```\n\n----------------------------------------\n\nTITLE: Creating Table SQL Query with Custom Column Names in MySQL for Grafana\nDESCRIPTION: This SQL query demonstrates how to create a table display in Grafana with custom column names using the AS syntax. The query joins dashboard and user tables, filters by time range using the $__timeFilter macro, and displays dashboard titles, creators, and creation dates.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  title as 'Title',\n  user.login as 'Created By' ,\n  dashboard.created as 'Created On'\n FROM dashboard\nINNER JOIN user on user.id = dashboard.created_by\nWHERE $__timeFilter(dashboard.created)\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Library Element via API (HTTP)\nDESCRIPTION: This snippet provides an example HTTP DELETE request to remove a specific Grafana library element identified by its UID (`nErXDvCkzz`). It requires appropriate `Accept`, `Content-Type`, and `Authorization` headers. Note that library elements connected to dashboards cannot be deleted, and this operation is irreversible.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/library-elements/nErXDvCkzz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n\n```\n\n----------------------------------------\n\nTITLE: Team Details Response Example - JSON\nDESCRIPTION: Presents the detailed JSON representation of a team as returned by the get team by ID endpoint. Contains fields for ID, organization, team name, contact info, and ISO timestamps for creation and last update.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"id\\\": 1,\\n  \\\"orgId\\\": 1,\\n  \\\"name\\\": \\\"MyTestTeam\\\",\\n  \\\"email\\\": \\\"\\\",\\n  \\\"created\\\": \\\"2017-12-15T10:40:45+01:00\\\",\\n  \\\"updated\\\": \\\"2017-12-15T10:40:45+01:00\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to RadioButtonGroup Options (JSX)\nDESCRIPTION: Demonstrates how to augment RadioButtonGroup options with description fields for richer option context. Requires @grafana/ui. Each option object can include label, value, and description. Disabled options are specified by value. Resulting UI displays descriptions alongside each radio option.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioButtonList } from '@grafana/ui';\n\nconst options = [\n  { label: 'Prometheus', value: 'prometheus', description: 'Monitoring system & TSDB' },\n  { label: 'Loki', value: 'loki', description: 'Log aggregation system' },\n];\n\nconst disabledOptions = ['prometheus', 'elastic'];\n\n\n<RadioButtonGroup\n  options={options}\n  disabledOptions={disabledOptions}\n  value={...}\n  onChange={...}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Developer Dashboards and Data Sources in Grafana\nDESCRIPTION: This bash command runs the setup script that configures developer dashboards and data sources in Grafana for development and testing.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: Definition of UserView Interface in TypeScript\nDESCRIPTION: This snippet defines the UserView interface used by the UserIcon component. It specifies the structure of the user object and includes a lastActiveAt property for tracking user activity.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateTimeInput } from '@grafana/data';\n\nexport interface UserView {\n  user: {\n    /** User's name, containing first + last name */\n    name: string;\n    /** URL to the user's avatar */\n    avatarUrl?: string;\n  };\n  /** Datetime string when the user was last active */\n  lastActiveAt: DateTimeInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana API without Authentication\nDESCRIPTION: This example shows how to make a basic unauthenticated API call to Grafana's search endpoint using cURL. It assumes a default local installation with anonymous access enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/api/search\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Service with Docker Compose\nDESCRIPTION: Restarts the 'grafana' service defined within the `docker-compose.yml` file. Affects the running container managed by Docker Compose.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose restart grafana\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Paginated List of Shared Dashboards in Grafana\nDESCRIPTION: This HTTP response returns a paginated list of shared dashboards, including details like UID, access token, title, and enabled status for each dashboard, along with pagination information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"publicDashboards\": [\n        {\n            \"uid\": \"e9f29a3c-fcc3-4fc5-a690-ae39c97d24ba\",\n            \"accessToken\": \"6c13ec1997ba48c5af8c9c5079049692\",\n            \"title\": \"Datasource Shared Queries\",\n            \"dashboardUid\": \"d2f21d0a-76c7-47ec-b5f3-9dda16e5a996\",\n            \"isEnabled\": true\n        },\n        {\n            \"uid\": \"a174f604-6fe7-47de-97b4-48b7e401b540\",\n            \"accessToken\": \"d1fcff345c0f45e8a78c096c9696034a\",\n            \"title\": \"Datasource with template variables\",\n            \"dashboardUid\": \"51DiOw0Vz\",\n            \"isEnabled\": true\n        }\n    ],\n    \"totalCount\": 30,\n    \"page\": 3,\n    \"perPage\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Grafana Bind Address Failed Error - Log\nDESCRIPTION: This log snippet highlights an error when Grafana cannot bind to the configured TCP address during startup. The issue may stem from incorrect 'http_addr' settings or network constraints, preventing successful binding to the host interface. Review network configuration and the 'http_addr' parameter to resolve.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_12\n\nLANGUAGE: log\nCODE:\n```\nlisten tcp 34.148.30.243:3000: bind: cannot assign requested address\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single User by ID via Grafana HTTP API (http)\nDESCRIPTION: Provides a HTTP GET request example to fetch a user by their unique numeric ID. Requires Grafana admin privileges and returns a JSON object with the user's detailed attributes, suited for lookup or profile viewing operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Injecting Kubernetes Pod IP as Environment Variable (YAML)\nDESCRIPTION: This Kubernetes YAML snippet defines an environment variable named `POD_IP` within a container definition. It uses `valueFrom` and `fieldRef` to dynamically populate this variable with the Pod's actual IP address obtained from `status.podIP`. This is a prerequisite for configuring Grafana HA in Kubernetes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: POD_IP\n    valueFrom:\n      fieldRef:\n        fieldPath: status.podIP\n```\n\n----------------------------------------\n\nTITLE: Iterating Alerts and Accessing Labels in Grafana Notification Templates - Go\nDESCRIPTION: This snippet shows how to iterate over alerts in the notification and print a specific label for each, using Go templates in Grafana. The `range` function traverses `.Alerts`, and `index .Labels \"alertname\"` accesses the specified label. Dependencies include Grafana notification system and correct shaping of alert labels; input is alert data, output is a formatted list of alert names.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_message\" -}}\n{{ range .Alerts }}\nThe name of the alert is {{ index .Labels \"alertname\" }}\n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Validating Docker Compose YAML File Syntax (Bash)\nDESCRIPTION: Shows how to validate the syntax of a `docker-compose.yaml` file using the `docker compose config` command. It requires changing the directory to where the file resides. The command outputs the parsed configuration if valid, or error messages if syntax errors are found.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# go to your docker-compose.yaml directory\ncd /path-to/docker-compose/file\n\n# run the validation command\ndocker compose config\n```\n\n----------------------------------------\n\nTITLE: Enabling Grafana Service at Boot with systemd (Linux)\nDESCRIPTION: Configures the Grafana server service to start automatically when the system boots, using systemd. Ensures Grafana is available after a system restart.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable grafana-server.service\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Settings in INI Format - Bash\nDESCRIPTION: This code snippet demonstrates how to define an [rbac] block in Grafana's configuration file, using INI-style syntax to enable the permission cache. This modifies Grafana's behavior by activating in-memory caching for user permission evaluation, which is suitable for setups in Grafana Enterprise and Grafana Cloud. The snippet's main parameter, permission_cache, is set to true to enhance performance; this setting requires no dependencies beyond Grafana itself. The snippet should be added to the Grafana configuration file, and the expected result is active caching for permission checks, while all other RBAC settings remain default.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/configure-rbac/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[rbac]\n\npermission_cache = true\n```\n\n----------------------------------------\n\nTITLE: Hiding Grafana Version Number for Unauthenticated Users in TOML\nDESCRIPTION: Configures the `hide_version` setting in the `[anonymous.auth]` section of `grafana.ini`. Setting this to `true` prevents the Grafana version number from being displayed to users who are not logged in, reducing information leakage about potentially outdated or vulnerable installations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[anonymous.auth]\n# mask the Grafana version number for unauthenticated users\nhide_version = true\n```\n\n----------------------------------------\n\nTITLE: Running Generation Command for Feature Toggles in Grafana\nDESCRIPTION: Command to generate all necessary feature toggle files after defining a new toggle in registry.go. This generates backend, frontend, and documentation files.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/feature-toggles.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake gen-feature-toggles\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak `kc_idp_hint` in Grafana (INI)\nDESCRIPTION: Shows how to modify the `auth_url` in the Grafana configuration to include the `kc_idp_hint` query parameter. This parameter directs Keycloak to use a specific identity provider (e.g., 'google') during the authentication flow.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nauth_url = https://<PROVIDER_DOMAIN>/realms/<REALM_NAME>/protocol/openid-connect/auth?kc_idp_hint=google\n```\n\n----------------------------------------\n\nTITLE: Exporting Grafana Resources with Grizzly in Shell\nDESCRIPTION: This shell command uses Grizzly (`grr`) to export (pull) various resources from the Grafana instance associated with the currently active `grafana-onprem` context. It targets Dashboards, DataSources, DashboardFolders, LibraryElements, AlertRuleGroups, AlertContactPoints, and AlertNotificationPolicies using wildcard patterns (`-t 'ResourceType/*'`) and saves them as files in the current directory (`.`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngrr config use-context grafana-onprem\ngrr pull . \\\n  -t 'Dashboard/*' \\\n  -t 'Datasource/*' \\\n  -t 'DashboardFolder/*' \\\n  -t 'LibraryElement/*' \\\n  -t 'AlertRuleGroup/*' \\\n  -t 'AlertContactPoint/*' \\\n  -t 'AlertNotificationPolicy/*'\n```\n\n----------------------------------------\n\nTITLE: Provisioning Grafana Correlations via YAML Configuration\nDESCRIPTION: Defines the structure for provisioning correlations within a Grafana data source configuration file using YAML. It specifies the target data source UID, label, description, and configuration details including the target query, source field, and optional transformations (regex, logfmt) to extract variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/create-a-new-correlation/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatasources:\n  - name: Data source name # source data source\n    ...\n    jsonData:\n    ...\n    correlations:\n      - targetUID: uid\n        label: \"test\"\n        description: \"...\"\n        config:\n          type: \"query\"\n          target:\n            expr: \"...\"\n          field: \"name\"\n          transformations:\n            - type: regex\n              field: \"test\"\n              expression: /\\w+/\n              mapValue: \"other\"\n            - type: logfmt\n              field: \"test\"\n```\n\n----------------------------------------\n\nTITLE: Migrating and Encrypting Datasource Passwords (Bash)\nDESCRIPTION: Executes a data migration script specifically designed to encrypt unsecured datasource passwords stored in the Grafana database. The command migrates plain text passwords to the secure_json_data field and can be run multiple times safely.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli admin data-migration encrypt-datasource-passwords\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Grafana Plugins on Container Start - Bash\nDESCRIPTION: Shows how to preinstall official or community Grafana plugins by passing their IDs via the 'GF_PLUGINS_PREINSTALL' environment variable in the Docker run command. Docker and internet access are required. Plugins are specified as a comma-separated list; latest versions are installed unless otherwise specified.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_PLUGINS_PREINSTALL=grafana-clock-panel, grafana-simple-json-datasource\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Looking Up User by Login or Email via Grafana HTTP API (http)\nDESCRIPTION: Demonstrates two GET request variants for finding a user based on login name or email address. Appropriate for systems needing to identify users without knowing their numeric ID. Headers indicate JSON content and authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/lookup?loginOrEmail=user@mygraf.com HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/lookup?loginOrEmail=admin HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Defining Default Alert Message Templates in Grafana Go Templating Language\nDESCRIPTION: This snippet defines the \"__default_message\" template and supporting sub-templates in Grafana's Go templating language. It provides the overall format for firing and resolved alerts, summary and annotation formatting, and a sorted key-value renderer for label and annotation pairs. Dependencies include standard Go template functions (e.g., define, if, range, index, template), and it expects the surrounding Grafana alert context (with objects like Alerts, GroupLabels, Labels, and Annotations) to be present. The template accepts alert data and renders a structured alert message, allowing easy notification customization. Outputs are dynamic alert messages with standard labeling, annotation, and links, constrained to Grafana's Go template runtime.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/ng_alert_notification.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- define \"__default_message\" -}}\nYou have {{ len .Alerts.Firing }} firing alert(s), and {{ len .Alerts.Resolved }} resolved alert(s) for {{ .GroupLabels }}\n\n{{ if .Alerts.Firing -}}\n({{ len .Alerts.Firing }}) FIRING\n-----------\n{{ template \"__default_alerts_summarize\" .Alerts.Firing }}\n{{- end }}\n\n{{- if .Alerts.Resolved }}\n({{ len .Alerts.Resolved }}) RESOLVED\n-------------\n{{ template \"__default_alerts_summarize\" .Alerts.Resolved }}\n{{- end }}\nGo to the Alerts page: {{ .AlertPageUrl }}\n{{- end -}}\n\n{{- define \"__default_alerts_summarize\" -}}\n{{- range . }}\n{{- template \"__default_alert_labels\" . }}\n{{- template \"__default_alert_annotations\" . }}\n{{ end }}\n{{- end -}}\n\n{{- define \"__default_alert_labels\" -}}\n{{- $labels := .Labels -}}\n{{- if index $labels \"alertname\" }}\nAlertname: {{ index .Labels \"alertname\" -}}\n{{ $labels = $labels.Remove (toStrings (list \"alertname\")) }}\n{{- end }}\nLabels: {{ template \"__default_sorted_pairs\" $labels }}\n{{- end -}}\n\n{{- define \"__default_alert_annotations\" -}}\n{{- $annotations := .Annotations -}}\n{{- if index $annotations \"summary\" }}\nSummary: {{ index .Annotations \"summary\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"summary\")) }}\n{{- end -}}\n{{- if index $annotations \"description\" }}\nDescription: {{ index .Annotations \"description\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"description\")) }}\n{{- end -}}\n{{- if index $annotations \"runbook_url\" }}\nRunbook: {{ index .Annotations \"runbook_url\" -}}\n{{- $annotations = $annotations.Remove (toStrings (list \"runbook_url\")) }}\n{{- end -}}\n{{- if $annotations }}\nAnnotations: {{ template \"__default_sorted_pairs\" $annotations }}\n{{- end -}}\n{{- end -}}\n\n{{- define \"__default_sorted_pairs\" -}}\n{{ range .SortedPairs }}\n - {{ .Name }} = {{ .Value }}\n{{- end }}\n{{- end -}}\n\n{{- if .Message -}}\n    {{ .Message }}\n{{- else -}}\n    {{ template \"__default_message\" . }}\n{{- end }}\n\n\nSent by Grafana v{{.BuildVersion}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Defining AWS CloudWatch Datasource Credentials (Bash)\nDESCRIPTION: Shows example values for AWS credentials (Access Key ID, Secret Access Key, Region) used for configuring the Grafana CloudWatch data source. These values are used in subsequent Docker Secret examples.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nAWS_default_ACCESS_KEY_ID=aws01us02\nAWS_default_SECRET_ACCESS_KEY=topsecret9b78c6\nAWS_default_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Selecting Clustered Rendering Mode - JSON\nDESCRIPTION: Specifies the 'clustered' rendering mode and tuning parameters in a JSON configuration file for the renderer. Allows fine-grained control over the number and type of browser or page instances and rendering request timeout.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"mode\": \"clustered\",\n    \"clustering\": {\n      \"mode\": \"browser\",\n      \"maxConcurrency\": 5,\n      \"timeout\": 30\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana with Bind Mount Persistence (YAML)\nDESCRIPTION: A `docker-compose.yaml` configuration using a bind mount for persistent storage. It maps a directory on the host (`$PWD/data`) to `/var/lib/grafana` inside the container. The `user: '0'` directive sets the container user to root (UID 0) to ensure write permissions to the mounted host directory; alternatively, use `id -u` to find the correct user ID if not running as root.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  grafana:\n    image: grafana/grafana-enterprise\n    container_name: grafana\n    restart: unless-stopped\n    # if you are running as root then set it to 0\n    # else find the right id with the id -u command\n    user: '0'\n    ports:\n      - '3000:3000'\n    # adding the mount volume point which we create earlier\n    volumes:\n      - '$PWD/data:/var/lib/grafana'\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule for Specific Namespace/Cluster Combination (Task 3)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 3. This rule filters logs, granting access only to data points matching *both* `cluster=\\\"us-west-0\\\"` AND `namespace=\\\"staging\\\"`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_7\n\nLANGUAGE: logql\nCODE:\n```\n{cluster=\"us-west-0\", namespace=\"staging\"}\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Signing Request (CSR) using OpenSSL (Bash)\nDESCRIPTION: Uses the `openssl req` command with the `-new` flag to create a CSR file named `grafana.csr` in `/etc/grafana/` based on the private key `grafana.key`. It prompts the user for information to be included in the certificate (domain name, location, etc.). Requires `openssl` and the previously generated private key file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl req -new -key /etc/grafana/grafana.key -out /etc/grafana/grafana.csr\n```\n\n----------------------------------------\n\nTITLE: Provisioning CloudWatch Data Source Using Credentials Profile\nDESCRIPTION: YAML configuration for provisioning CloudWatch data source using a non-default credentials profile, along with custom metrics namespaces.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: CloudWatch\n    type: cloudwatch\n    jsonData:\n      authType: credentials\n      defaultRegion: eu-west-2\n      customMetricsNamespaces: 'CWAgent,CustomNameSpace'\n      profile: secondary\n```\n\n----------------------------------------\n\nTITLE: Using Tag Variables with Filter Expressions in Graphite\nDESCRIPTION: Example of a tag_values query with multiple filter expressions including a variable reference. This allows filtering tag values based on server pattern and application variable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntag_values(server, server=~backend\\*, app=~${apps:regex})\n```\n\n----------------------------------------\n\nTITLE: Sorting and Projecting Azure Resources using Kusto Query Language\nDESCRIPTION: This query returns all resources in the selected subscriptions, showing only the name, type, and location properties, sorted by name in ascending order. It demonstrates the use of 'project' to select specific properties and 'order by' for sorting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_4\n\nLANGUAGE: kusto\nCODE:\n```\nResources\n| project name, type, location\n| order by name asc\n```\n\n----------------------------------------\n\nTITLE: Overriding Grafana Config File Location (Bash)\nDESCRIPTION: Shows how to use the '--config' global option to specify a custom path to the Grafana configuration file when running a command, overriding the default location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --config \\\"/etc/configuration/\\\" admin reset-admin-password mynewpassword\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule for Metrics with Multiple AND Conditions\nDESCRIPTION: Example LogQL query used as an LBAC rule to filter metrics. This rule matches metric data points that contain *both* the label `job` with the value `api-server` AND the label `region` with the value `europe`. This shows applying LBAC rules to metrics data using multiple label matchers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_1\n\nLANGUAGE: logql\nCODE:\n```\n{job=\"api-server\", region=\"europe\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Headless Service for Grafana HA (YAML)\nDESCRIPTION: This Kubernetes YAML definition creates a headless Service named `grafana-alerting`. Unlike regular services, a headless service (`clusterIP: 'None'`) resolves to the IPs of the Pods selected by its selector (`app: grafana`), rather than a single virtual IP. This allows Grafana instances configured for HA to discover the actual IP addresses of their peers via DNS lookup of the service name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana-alerting\n  namespace: grafana\n  labels:\n    app.kubernetes.io/name: grafana-alerting\n    app.kubernetes.io/part-of: grafana\nspec:\n  type: ClusterIP\n  clusterIP: 'None'\n  ports:\n    - port: 9094\n  selector:\n    app: grafana\n```\n\n----------------------------------------\n\nTITLE: Listing Helm Deployments in a Namespace - Helm CLI - Bash\nDESCRIPTION: This command lists all Helm releases in the specified `monitoring` namespace. It is used to verify deployment status and chart versions. Requires Helm client configured for the cluster.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm list -n monitoring\n```\n\nLANGUAGE: bash\nCODE:\n```\nNAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART          APP VERSION\nmy-grafana      monitoring      1               2024-01-13 23:06:42.737989554 +0000 UTC deployed        grafana-6.59.0 10.1.0\n```\n\n----------------------------------------\n\nTITLE: Interpolating Variables in Translated Strings (React, TypeScript/JSX)\nDESCRIPTION: These examples show best practices for interpolating variables and nested components within translated strings using the <Trans> component from @grafana/i18n. Bad examples interpolate directly in JSX, while good examples use value interpolation or include child components. Inputs include dynamic data such as a 'term' prop. Outputs are translated, variable-aware UI components. Proper usage enables both plain and nested translations, supporting Grafana's internationalization conventions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad ❌\nconst SearchTitle = ({ term }) => <div>Results for {term}</div>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅\nconst SearchTitle = ({ term }) => <Trans i18nKey=\"search-page.results-title\">Results for {{ term }}</Trans>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅ (if you need to interpolate variables inside nested components)\nconst SearchTerm = ({ term }) => <Text color=\"success\">{term}</Text>;\nconst SearchTitle = ({ term }) => (\n  <Trans i18nKey=\"search-page.results-title\">\n    Results for <SearchTerm term={term} />\n  </Trans>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅ (if you need to interpolate variables and additional translated strings inside nested components)\nconst SearchTitle = ({ term }) => (\n  <Trans i18nKey=\"search-page.results-title\" values={{ myVariable: term }}>\n    Results for <Text color=\"success\">{'{{ myVariable }}'} and this translated text is also in green</Text>\n  </Trans>\n);\n```\n\n----------------------------------------\n\nTITLE: Time Filtered Query with Variable Substitution (Dollar Syntax) - SQL\nDESCRIPTION: Demonstrates using the dollar-sign syntax for template variable substitution ($hostname) in a time-filtered query, with UNIX_TIMESTAMP conversion and 'aint' field as value. Suitable for dashboards needing dynamic host selection. Requires MySQL compatibility and Grafana macro support.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  UNIX_TIMESTAMP(atimestamp) as time,\n  aint as value,\n  avarchar as metric\nFROM my_table\nWHERE $__timeFilter(atimestamp) and hostname in($hostname)\nORDER BY atimestamp ASC\n```\n\n----------------------------------------\n\nTITLE: Multi-Column SQL Query for Template Variables\nDESCRIPTION: SQL query that returns multiple columns to automatically create a list of values for a template variable dropdown, joining two tables based on city.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [host].[hostname], [other_host].[hostname2] FROM host JOIN other_host ON [host].[city] = [other_host].[city]\n```\n\n----------------------------------------\n\nTITLE: Example SCIM Configuration in Grafana INI\nDESCRIPTION: Provides an example configuration snippet for enabling SCIM user sync (`user_sync_enabled = true`) and disabling group sync (`group_sync_enabled = false`) within the `[auth.scim]` section of the Grafana configuration file (grafana.ini or via environment variables). This illustrates a basic setup for SCIM user management, often used alongside Team Sync for group management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-scim-provisioning/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.scim]\nuser_sync_enabled = true\ngroup_sync_enabled = false\n```\n\n----------------------------------------\n\nTITLE: Security Policy Configuration Properties\nDESCRIPTION: Configuration settings for Content Security Policy (CSP), CSRF protection, and plugin security features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ncontent_security_policy=true\ncontent_security_policy_template=$NONCE\ncontent_security_policy_report_only=true\nactions_allow_post_url=/api/plugins/*\nangular_support_enabled=false\ncsrf_trusted_origins=\ncsrf_additional_headers=\ncsrf_always_check=false\nenable_frontend_sandbox_for_plugins=\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Mimirtool Rule Import - Bash\nDESCRIPTION: These bash commands set necessary environment variables to prepare for running mimirtool commands. Substitute <Grafana URL> and <your token ID> with your Grafana instance's URL and your service account token. MIMIR_ADDRESS defines the endpoint, MIMIR_AUTH_TOKEN sets authorization, and MIMIR_TENANT_ID specifies the tenant context for rule import. Required to authenticate and operate with Mimirtool for managing alert rules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMIMIR_ADDRESS=https://<Grafana URL>.grafana-dev.net/api/convert/ MIMIR_AUTH_TOKEN=<your token ID> MIMIR_TENANT_ID=1\n```\n\n----------------------------------------\n\nTITLE: Exporting the Notification Policy Tree via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to `/api/v1/provisioning/policies/export` to export the entire notification policy tree in a specified file format (YAML, JSON, or HCL). Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control download behavior and file type. Expects a 200 OK response with the exported data or a 404 Not Found if the policy tree doesn't exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/policies/export\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert State History Annotation Retention - Grafana INI\nDESCRIPTION: Describes `[unified_alerting.state_history.annotations]`, which sets retention periods and total count for auto-created alert state annotations. Key parameters are `max_age` (how long to retain) and `max_annotations_to_keep` (max number to store); both accept 0 for unlimited. Values are specified in durations like '6h', '10d', etc.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting.state_history.annotations]\n# How long to keep alert annotations\nmax_age = 7d\n# Maximum number of annotations to retain. 0 = unlimited\nmax_annotations_to_keep = 1000\n\n```\n\n----------------------------------------\n\nTITLE: Finding Grafana Annotation Tags (HTTP Request)\nDESCRIPTION: Example HTTP GET request to the `/api/annotations/tags` endpoint to retrieve annotation tags. It demonstrates using the optional `tag` query parameter (e.g., `?tag=out`) for filtering and requires a valid `Authorization` header (Basic Auth shown). The `Accept` and `Content-Type` headers are set to `application/json`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /api/annotations/tags?tag=out HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Folder Deletion API Response Example\nDESCRIPTION: Example HTTP response for the DELETE /api/folders/:uid endpoint, confirming the successful deletion of the folder and returning its ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"message\":\"Folder deleted\",\n  \"id\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Custom Ubuntu-based Grafana Docker Image\nDESCRIPTION: A series of bash commands to navigate to the custom directory, build a custom Grafana Docker image based on the latest Ubuntu image, and run it as a container.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# go to the custom directory\ncd packaging/docker/custom\n\n# run the docker build command to build the image\ndocker build \\\n  --build-arg \"GRAFANA_VERSION=latest-ubuntu\" \\\n  -t grafana-custom .\n\n# run the custom grafana container using docker run command\ndocker run -d -p 3000:3000 --name=grafana grafana-custom\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Email Lookup via Grafana Admin API (Bash)\nDESCRIPTION: Shows how to enable email-based user lookup for OAuth authentication using a `curl` command to interact with the Grafana Admin API (`/api/admin/settings`). This method requires an admin service account token (`glsa_yourserviceaccounttoken`) and sends a PUT request with a JSON payload to update the `auth.oauth_allow_insecure_email_lookup` setting. This feature is available in Grafana Enterprise and Cloud from v10.4 onwards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl --request PUT \\\n  --url http://{slug}.grafana.com/api/admin/settings \\\n  --header 'Authorization: Bearer glsa_yourserviceaccounttoken' \\\n  --header 'Content-Type: application/json' \\\n  --data '{ \"updates\": { \"auth\": { \"oauth_allow_insecure_email_lookup\": \"true\" }}}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Notification Template - Go Templating - Go\nDESCRIPTION: This snippet defines a custom notification template using Go template syntax for Grafana. It outputs all core notification data fields, such as Receiver, Status, alert counts, group labels, and URLs. This template is intended to be executed by passing the relevant dot (.) data object from Grafana alert notifications and requires knowledge of the fields available in that context. Inputs are the notification context object; outputs are the formatted notification body.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{ define \"custom_template\" }}\n  {{ .Receiver }}\n  {{ .Status }}\n  There are {{ len .Alerts }} alerts\n  There are {{ len .Alerts.Firing }} firing alerts\n  There are {{ len .Alerts.Resolved }} resolved alerts\n  {{ .GroupLabels }}\n  {{ .CommonLabels }}\n  {{ .CommonAnnotations }}\n  {{ .ExternalURL }}\n{{ end }}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook URL for Secret Scan Notifications - INI\nDESCRIPTION: This INI snippet illustrates how to set the 'oncall_url' parameter in the [secretscan] section of Grafana's configuration file to specify the webhook endpoint for outgoing secret scan notifications. The 'oncall_url' must be set to a valid webhook URL, typically obtained from a Grafana OnCall integration. Inputs: a valid webhook URL; Outputs: directs secret scan alerts to the provided endpoint. The configuration requires manual edit and Grafana restart.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[secretscan]\n# URL to send a webhook payload in oncall format\noncall_url = https://example.url/integrations/v1/webhook/3a359nib9eweAd9lAAAETVdOx/\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Rendering in Grafana Configuration (Bash)\nDESCRIPTION: This configuration snippet, intended for the Grafana configuration file (grafana.ini or custom.ini), enables detailed debug logging specifically for the rendering component. This helps in diagnosing rendering issues by providing more verbose log output in the main Grafana server logs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[log]\nfilters = rendering:debug\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder with HTTP POST Request\nDESCRIPTION: Example HTTP POST request to create a new folder in Grafana. The request body includes optional UID, required title, and optional parentUid for nested folders. Requires 'folders:create' permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/folders HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"uid\": \"nErXDvCkzz\",\n  \"title\": \"Department ABC\",\n  \"parentUid\": \"fgnj5e52gel76g\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Service Status using Bash\nDESCRIPTION: Checks the status of the Grafana Service within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides additional information. This command displays details like the Service type (LoadBalancer), ClusterIP, ExternalIP (if assigned by the cloud provider), and port mappings, which are essential for accessing the Grafana UI. Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc --namespace=my-grafana -o wide\n```\n\n----------------------------------------\n\nTITLE: Listing Teams for Actual User via Grafana API (HTTP)\nDESCRIPTION: Fetches a list of teams the currently authenticated user is a member of using a GET request to `/api/user/teams`. Requires authentication (Bearer Token shown in example). The response is a JSON array of team objects, including details like ID, organization ID, name, email, avatar URL, and member count.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /api/user/teams HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\": 1,\n    \"orgId\": 1,\n    \"name\": \"MyTestTeam\",\n    \"email\": \"\",\n    \"avatarUrl\": \"\\/avatar\\/3f49c15916554246daa714b9bd0ee398\",\n    \"memberCount\": 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Release to Mount CA ConfigMap - Bash\nDESCRIPTION: This Helm upgrade command ensures Grafana is redeployed with the new ConfigMap mounted, updating the deployment as specified in values.yaml. It relies on a properly edited values.yaml referencing the additional config map and applies changes to the 'my-grafana' instance in 'monitoring' namespace. Ensure ConfigMap is present before running.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-grafana grafana/grafana --values values.yaml --namespace monitoring\n```\n\n----------------------------------------\n\nTITLE: Deleting a Query from Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet provides an example HTTP DELETE request to remove a specific query entry from the Grafana query history using its unique identifier (UID). Authentication via Bearer token is necessary.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/query-history/P8zM2I1nz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Checking Data Source Health by ID in HTTP\nDESCRIPTION: Sends a GET request to check the health of a data source identified by ID. This endpoint is deprecated as of Grafana v9.0.0.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET api/datasources/112/health HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Grafana Role Details API\nDESCRIPTION: This is an example JSON response from the Grafana API endpoint `/api/access-control/roles/{roleUID}`. It shows the structure of the data returned when querying for a specific role, including its version, UID, name, display name, description, global status, associated permissions (each with action, scope, and timestamps), and overall created/updated timestamps. This particular example shows details for the `fixed:users:writer` role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 2,\n    \"uid\": \"qQui_LCMk\",\n    \"name\": \"fixed:users:writer\",\n    \"displayName\": \"User writer\",\n    \"description\": \"Read and update all attributes and settings for all users in Grafana: update user information, read user information, create or enable or disable a user, make a user a Grafana administrator, sign out a user, update a user’s authentication token, or update quotas for all users.\",\n    \"global\": true,\n    \"permissions\": [\n        {\n            \"action\": \"org.users:add\",\n            \"scope\": \"users:*\",\n            \"updated\": \"2021-05-17T20:49:18+02:00\",\n            \"created\": \"2021-05-17T20:49:18+02:00\"\n        },\n        {\n            \"action\": \"org.users:read\",\n            \"scope\": \"users:*\",\n            \"updated\": \"2021-05-17T20:49:18+02:00\",\n            \"created\": \"2021-05-17T20:49:18+02:00\"\n        },\n        {\n            \"action\": \"org.users:remove\",\n            \"scope\": \"users:*\",\n            \"updated\": \"2021-05-17T20:49:18+02:00\",\n            \"created\": \"2021-05-17T20:49:18+02:00\"\n        },\n        {\n            \"action\": \"org.users:write\",\n            \"scope\": \"users:*\",\n            \"updated\": \"2021-05-17T20:49:18+02:00\",\n            \"created\": \"2021-05-17T20:49:18+02:00\"\n        }\n    ],\n    \"updated\": \"2021-05-17T20:49:18+02:00\",\n    \"created\": \"2021-05-13T16:24:26+02:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example for Listing All Reports - JSON\nDESCRIPTION: This JSON snippet shows an example response from the /api/reports endpoint, illustrating the data structure returned when listing all reports. The JSON array contains report objects with detailed scheduling, options, dashboard references, supported formats, and timestamps. This response is returned upon successful authentication and permission checks with a 200 OK HTTP status.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\\n\\t{\\n\\t\\t\\\"id\\\": 2,\\n\\t\\t\\\"userId\\\": 1,\\n\\t\\t\\\"orgId\\\": 1,\\n\\t\\t\\\"name\\\": \\\"Report 2\\\",\\n\\t\\t\\\"recipients\\\": \\\"example-report@grafana.com\\\",\\n\\t\\t\\\"replyTo\\\": \\\"\\\",\\n\\t\\t\\\"message\\\": \\\"Hi, \\\\nPlease find attached a PDF status report. If you have any questions, feel free to contact me!\\\\nBest,\\\",\\n\\t\\t\\\"schedule\\\": {\\n\\t\\t\\t\\\"startDate\\\": \\\"2022-10-02T00:00:00+02:00\\\",\\n\\t\\t\\t\\\"endDate\\\": null,\\n\\t\\t\\t\\\"frequency\\\": \\\"once\\\",\\n\\t\\t\\t\\\"intervalFrequency\\\": \\\"\\\",\\n\\t\\t\\t\\\"intervalAmount\\\": 0,\\n\\t\\t\\t\\\"workdaysOnly\\\": false,\\n\\t\\t\\t\\\"dayOfMonth\\\": \\\"2\\\",\\n\\t\\t\\t\\\"timeZone\\\": \\\"Europe/Warsaw\\\"\\n\\t\\t},\\n\\t\\t\\\"options\\\": {\\n\\t\\t\\t\\\"orientation\\\": \\\"landscape\\\",\\n\\t\\t\\t\\\"layout\\\": \\\"grid\\\",\\n\\t\\t},\\n\\t\\t\\\"enableDashboardUrl\\\": true,\\n\\t\\t\\\"state\\\": \\\"scheduled\\\",\\n\\t\\t\\\"dashboards\\\": [\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\\"dashboard\\\": {\\n\\t\\t\\t\\t\\t\\\"id\\\": 463,\\n\\t\\t\\t\\t\\t\\\"uid\\\": \\\"7MeksYbmk\\\",\\n\\t\\t\\t\\t\\t\\\"name\\\": \\\"Alerting with TestData\\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"reportVariables\\\": {\\n\\t\\t\\t\\t\\t\\\"namefilter\\\": \\\"TestData\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t],\\n\\t\\t\\\"formats\\\": [\\n\\t\\t\\t\\\"pdf\\\",\\n\\t\\t\\t\\\"csv\\\"\\n\\t\\t],\\n\\t\\t\\\"created\\\": \\\"2022-09-19T11:44:42+02:00\\\",\\n\\t\\t\\\"updated\\\": \\\"2022-09-19T11:44:42+02:00\\\"\\n\\t}\\n]\n```\n\n----------------------------------------\n\nTITLE: Closing a Documentation List Block (Hugo)\nDESCRIPTION: This Hugo shortcode closes the list block previously opened by `{{< docs/list >}}`. It signifies the end of the structured list in the Grafana documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< /docs/list >}}\n```\n\n----------------------------------------\n\nTITLE: Using Dollar Sign Variable Syntax in InfluxDB Queries\nDESCRIPTION: Example of how to use the $varname syntax for variables in InfluxDB queries, which is best used when the variable stands alone.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT mean(\"value\") FROM \"logins\" WHERE \"hostname\" =~ /^$host$/ AND $timeFilter GROUP BY time($__interval), \"hostname\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for Stack Component in TypeScript/MDX\nDESCRIPTION: This snippet imports Meta and ArgTypes from Storybook Blocks and the Stack component. It then sets up Storybook metadata for the Stack component using the <Meta> tag, specifying the Storybook title and linking it to the component. This setup is required to display the Stack component and its props in Storybook's documentation interface. Storybook and React must be installed for this to function.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Stack/Stack.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Stack } from './Stack';\n\n<Meta title=\"MDX|Stack\" component={Stack} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InfluxDB Line Protocol for Storing Time Series (Plaintext Example)\nDESCRIPTION: This snippet provides an example of the InfluxDB line protocol for writing a measurement with tags, fields, and a timestamp. It is annotated to show the roles of various components: measurement name, tag set, field set, and timestamp. The snippet is purely illustrative, requiring no dependencies, and shows the required structure for InfluxDB line protocol data ingestion. Inputs are a single measurement string, and outputs are the corresponding parsed components; actual storage and parsing are performed by InfluxDB itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nweather,location=us-midwest temperature=82 1465839830100400200\n  |    -------------------- --------------  |\n  |             |             |             |\n  |             |             |             |\n+-----------+--------+-+---------+-+---------+\n|measurement|,tag_set| |field_set| |timestamp|\n+-----------+--------+-+---------+-+---------+\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with Pre-v9.3 Multiple Queries - SQL\nDESCRIPTION: Demonstrates how, prior to Grafana v9.3, separate SQL queries are required to plot separate regions ('US' and 'EU') on the same timeseries panel. Each query filters by one region using a specific WHERE clause, and both require the user to know all region values in advance. Inputs are the 'metrics' table and specific region names; outputs are result sets filtered by Region. Dependencies: relational database compatible with SQL. Limitation: requires knowledge of all desired values in the filter column.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n   SELECT Time, Value FROM metrics WHERE Time > ‘2022-10-20’ AND Region=’US’\n   SELECT Time, Value FROM metrics WHERE Time > ‘2022-10-20’ AND Region=’EU’\n```\n\n----------------------------------------\n\nTITLE: Deleting a Data Source by Name in HTTP\nDESCRIPTION: Sends a DELETE request to remove a data source identified by name. Requires an authorization token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/datasources/name/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Creating a New Report via Grafana Reporting API - HTTP\nDESCRIPTION: This HTTP example shows how to create a new report in Grafana Enterprise by sending a POST request to the /api/reports endpoint. The request body must be a JSON object specifying the report's configuration, including name, recipients, schedule, options, associated dashboards, and desired formats. Proper authentication and permission (reports:create) are required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n\\t\\\"name\\\": \\\"Report 4\\\",\\n\\t\\\"recipients\\\": \\\"texample-report@grafana.com\\\",\\n\\t\\\"replyTo\\\": \\\"\\\",\\n\\t\\\"message\\\": \\\"Hello, please, find the report attached\\\",\\n\\t\\\"schedule\\\": {\\n\\t\\t\\\"startDate\\\": \\\"2022-10-02T10:00:00+02:00\\\",\\n\\t\\t\\\"endDate\\\": \\\"2022-11-02T20:00:00+02:00\\\",\\n\\t\\t\\\"frequency\\\": \\\"daily\\\",\\n\\t\\t\\\"intervalFrequency\\\": \\\"\\\",\\n\\t\\t\\\"intervalAmount\\\": 0,\\n\\t\\t\\\"workdaysOnly\\\": true,\\n\\t\\t\\\"timeZone\\\": \\\"Europe/Warsaw\\\"\\n\\t},\\n\\t\\\"options\\\": {\\n\\t\\t\\\"orientation\\\": \\\"landscape\\\",\\n\\t\\t\\\"layout\\\": \\\"grid\\\"\\n\\t},\\n\\t\\\"enableDashboardUrl\\\": true,\\n\\t\\\"dashboards\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"dashboard\\\": {\\n\\t\\t\\t\\t\\\"uid\\\": \\\"7MeksYbmk\\\",\\n\\t\\t\\t},\\n\\t\\t\\t\\\"timeRange\\\": {\\n\\t\\t\\t\\t\\\"from\\\": \\\"2022-08-08T15:00:00+02:00\\\",\\n\\t\\t\\t\\t\\\"to\\\": \\\"2022-09-02T17:00:00+02:00\\\"\\n\\t\\t\\t},\\n\\t\\t\\t\\\"reportVariables\\\": {\\n\\t\\t\\t\\t\\\"variable1\\\": \\\"Value1\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t],\\n\\t\\\"formats\\\": [\\n\\t\\t\\\"pdf\\\",\\n\\t\\t\\\"csv\\\"\\n\\t]\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering PanelChrome with Custom Title Items and Actions in React\nDESCRIPTION: Provides a rendered example of `PanelChrome` featuring custom header elements. It utilizes the `titleItems` prop to display `IconButton` components alongside the title and the `actions` prop to add a `Button` component to the header's action area.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  titleItems={\n    <>\n      <IconButton\n        className={css`\n          margin-right: 10px;\n        `}\n        name=\"github\"\n        variant=\"secondary\"\n        tooltip=\"extra content to render\"\n      />\n      <IconButton name=\"sliders-v-alt\" variant=\"secondary\" tooltip=\"extra content to render\" />\n    </>\n  }\n  actions={\n    <Button size=\"sm\" variant=\"secondary\" key=\"A\">\n      Breakdown\n    </Button>\n  }\n  width={500}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'rgba(230,0,0,0.05)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Content\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Logging Audit Events in Grafana Enterprise (JSON)\nDESCRIPTION: This snippet provides a sample of a Grafana Enterprise auditing log entry as a JSON object, showing the structure and fields used to record a login event. It demonstrates usage of standard JSON properties to track timestamp, user information, event action, result, request URI, origin IP, user agent, and software version. The object is intended to be logged to file or streaming systems (such as Loki) for compliance and auditing; inputs are the event fields, outputs are persisted JSON log entries, and usage depends on Grafana's auditing subsystem being enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-3.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2020-10-22T10:18:00.838094347Z\",\n  \"user\": {\n    \"userId\": 1,\n    \"orgId\": 1,\n    \"isAnonymous\": false\n  },\n  \"action\": \"login-grafana\",\n  \"result\": {\n    \"statusType\": \"success\",\n    \"statusCode\": 200\n  },\n  \"requestUri\": \"/login\",\n  \"ipAddress\": \"127.0.0.1:41324\",\n  \"userAgent\": \"Chrome/86.0.4240.111\",\n  \"grafanaVersion\": \"7.3.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Conditional Role Mapping Based on Groups\nDESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'groups' array. This structure is used in conjunction with a JMESPath expression in Grafana config to conditionally assign roles based on group membership.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"groups\": [\n        \"engineer\",\n        \"admin\",\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dimensional Time Series with KQL in Azure Monitor Logs\nDESCRIPTION: This query creates a time series with dimensions by aggregating performance counter data. It counts records and groups them by hour, Computer, and CounterName, demonstrating how to create multi-dimensional visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: kusto\nCODE:\n```\nPerf\n| where $__timeFilter(TimeGenerated)\n| summarize count() by bin(TimeGenerated, 1h), Computer, CounterName\n| order by TimeGenerated asc\n```\n\n----------------------------------------\n\nTITLE: Advanced Workload Identity Configuration in Grafana Server\nDESCRIPTION: INI configuration for advanced Workload Identity settings in Grafana, including tenant ID, client ID, and token file path. These optional settings provide more control over the workload identity authentication process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[azure]\nworkload_identity_enabled = true\nworkload_identity_tenant_id = IDENTITY_TENANT_ID\nworkload_identity_client_id = IDENTITY_CLIENT_ID\nworkload_identity_token_file = TOKEN_FILE_PATH\n```\n\n----------------------------------------\n\nTITLE: Removing a Grafana Plugin (Bash)\nDESCRIPTION: Command 'plugins remove <plugin-id>' uninstalls and removes a specific Grafana plugin, identified by '<plugin-id>', from the Grafana instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins remove <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Screenshot Capture in Grafana Alerting Configuration - Plaintext\nDESCRIPTION: This configuration snippet enables image screenshot capture for alert notifications in Grafana by setting the capture option within the [unified_alerting.screenshots] section. This requires either the Grafana image rendering plugin or a remote rendering service to be installed as a prerequisite. Set capture to true to activate; otherwise, screenshots will not be included in notifications. The parameter accepts boolean values and defaults to false if unspecified.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Enable screenshots in notifications. You must have either installed the Grafana image rendering\\n# plugin, or set up Grafana to use a remote rendering service.\\n# For more information on configuration options, refer to [rendering].\\ncapture = false\n```\n\n----------------------------------------\n\nTITLE: Querying Usage Insights Logs in Explore via Loki - loki-query\nDESCRIPTION: This query retrieves all usage insights logs for a specific Loki datasource in Grafana Explore. To use, enter this expression in the Explore interface after selecting your Loki datasource. The input datasource label ('gdev-loki') should correspond to your configured datasource name in Loki. Output is the set of log entries matching the kind 'usage_insights' for the selected datasource; note results depend on data retention and log volume.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_2\n\nLANGUAGE: loki-query\nCODE:\n```\n{datasource=\\\"gdev-loki\\\",kind=\\\"usage_insights\\\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic SAML Login in Grafana\nDESCRIPTION: This INI configuration snippet sets the `auto_login` option to `true` within the `[auth.saml]` section. This configuration attempts to log the user in automatically via SAML, bypassing the Grafana login screen. This setting is ignored if multiple authentication providers are configured for auto-login.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nauto_login = true\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File (Bash)\nDESCRIPTION: Bash commands to navigate into the target directory and create an empty `docker-compose.yaml` file. This step is a prerequisite before defining the Grafana service configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# first go into the directory where you have created this docker-compose.yaml file\ncd /path/to/docker-compose-directory\n\n# now create the docker-compose.yaml file\ntouch docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Region Annotations with Epoch Times in SQL for Grafana\nDESCRIPTION: SQL query example for fetching Grafana region annotations using epoch values for both start (`epoch_time`) and end (`epoch_time_end`) times. It maps these to `time` and `timeend` respectively, selects `metric1` for `text`, and creates comma-separated `tags` from `metric1` and `metric2`. Time filtering is applied to the start time using the `$__unixEpochFilter` macro. Requires a table `public.test_data` with relevant epoch time and metric columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  epoch_time as time,\n  epoch_time_end as timeend,\n  metric1 as text,\n  concat_ws(', ', metric1::text, metric2::text) as tags\nFROM\n  public.test_data\nWHERE\n  $__unixEpochFilter(epoch_time)\n```\n\n----------------------------------------\n\nTITLE: Creating a Graphite Data Source with Basic Auth via Grafana API - HTTP\nDESCRIPTION: This POST request illustrates creating a Graphite data source with HTTP basic authentication enabled. The body includes basicAuthUser and a secureJsonData object containing basicAuthPassword, which Grafana encrypts before saving. The request requires a bearer authorization token, and on success, the response confirms which secure fields have been encrypted. Inputs are the required data source parameters; output is a confirmation and data source details. Useful for securely storing credentials for data sources requiring basic authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"name\": \"test_datasource\",\\n  \"type\": \"graphite\",\\n  \"url\": \"http://mydatasource.com\",\\n  \"access\": \"proxy\",\\n  \"basicAuth\": true,\\n  \"basicAuthUser\": \"basicuser\",\\n  \"secureJsonData\": {\\n    \"basicAuthPassword\": \"basicpassword\"\\n  }\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n  \"datasource\": {\\n    \"id\": 1,\\n    \"orgId\": 1,\\n    \"name\": \"test_datasource\",\\n    \"type\": \"graphite\",\\n    \"typeLogoUrl\": \"\",\\n    \"access\": \"proxy\",\\n    \"url\": \"http://mydatasource.com\",\\n    \"password\": \"\",\\n    \"user\": \"\",\\n    \"database\": \"\",\\n    \"basicAuth\": true,\\n    \"basicAuthUser\": \"basicuser\",\\n    \"basicAuthPassword\": \"\",\\n    \"withCredentials\": false,\\n    \"isDefault\": false,\\n    \"jsonData\": {},\\n    \"secureJsonFields\": {\\n      \"basicAuthPassword\": true\\n    },\\n    \"version\": 1,\\n    \"readOnly\": false\\n  },\\n  \"id\": 102,\\n  \"message\": \"Datasource added\",\\n  \"name\": \"test_datasource\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chrome Binary Path in Grafana Renderer Config - JSON\nDESCRIPTION: Defines the chromeBin configuration key in the rendering section of a JSON config file to set the path to the Chrome/Chromium binary for the Grafana Image renderer in remote rendering mode. This configuration is read by the rendering service at startup and overrides the default binary. The file should be placed where the rendering service expects its configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"rendering\": {\\n    \"chromeBin\": \"/usr/bin/chromium-browser\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Editor Role Permissions via YAML Configuration (yaml)\nDESCRIPTION: This YAML snippet is used for declarative provisioning of the Grafana Editor role, combining permissions from both 'basic:editor' and 'fixed:roles:writer'. The configuration sets the 'editor' role as global, sets its version, and defines its permission inheritance, ideal for automated deployments or configuration-as-code. Key fields include role names, global status, version, and permission sources. Requires a supported Grafana provisioning process and compatible provisioning file structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 2\n\nroles:\n  - name: 'basic:editor'\n    global: true\n    version: 3\n    from:\n      - name: 'basic:editor'\n        global: true\n      - name: 'fixed:roles:writer'\n        global: true\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for CloudWatch Logs-Only Access in JSON\nDESCRIPTION: This JSON configuration defines an AWS IAM policy granting permissions specifically for Grafana to access CloudWatch Logs and related EC2/tag information. It allows actions such as `logs:DescribeLogGroups`, `logs:StartQuery`, `logs:GetQueryResults`, `ec2:DescribeInstances`, and `tag:GetResources`. Attach this policy to the IAM role or user used by Grafana if only log querying capabilities are needed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowReadingLogsFromCloudWatch\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:DescribeLogGroups\",\n        \"logs:GetLogGroupFields\",\n        \"logs:StartQuery\",\n        \"logs:StopQuery\",\n        \"logs:GetQueryResults\",\n        \"logs:GetLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingTagsInstancesRegionsFromEC2\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"ec2:DescribeTags\", \"ec2:DescribeInstances\", \"ec2:DescribeRegions\"],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowReadingResourcesForTags\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"tag:GetResources\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Test Data Visualization to 'table' using JSON\nDESCRIPTION: Modifies the previous JSON data frame definition by changing the 'preferredVisualisationType' in the 'meta' section from 'logs' to 'table'. This demonstrates how the configured correlation links, generated based on the field data (represented by '[...]'), will be displayed within a Grafana Table visualization cell instead of the Logs panel when this data frame structure is used with the TestData source in Explore.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-variables-and-transformations/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"meta\": {\n      \"preferredVisualisationType\": \"table\"\n    },\n    \"fields\": [...]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Representing a TCP Connection Tuple\nDESCRIPTION: Illustrates the 4-part tuple (source IP, source port, destination IP, destination port) that uniquely identifies a TCP connection in the operating system. This concept is relevant for understanding potential ephemeral port exhaustion when load balancing Grafana Live connections between a load balancer and Grafana server instances.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsource ip | source port | destination ip | destination port\n```\n\n----------------------------------------\n\nTITLE: Using PanelChrome with Standard and Hover Menus in React\nDESCRIPTION: Demonstrates rendering two `PanelChrome` components within a `Stack`. The first shows a standard fixed header with a dropdown menu provided via the `menu` prop. The second example utilizes the `hoverHeader={true}` prop, causing the header and menu to only appear on hover.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack gap={2} alignItems=\"flex-start\" wrap=\"wrap\">\n  <PanelChrome\n    title=\"My awesome panel title\"\n    menu={() => (\n       <Menu>\n          <Menu.Item label=\"View\" icon=\"eye\" />\n          <Menu.Item label=\"Edit\" icon=\"edit\" />\n          <Menu.Item label=\"Share\" icon=\"share-alt\" />\n          <Menu.Divider />\n          <Menu.Item label=\"Remove\" icon=\"trash-alt\" />\n        </Menu>\n       )}\n    description=\"Here I will put a description that explains a bit more this panel\"\n    width={400}\n    height={200}\n\n>\n\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          Content with fixed header\n        </div>\n      );\n    }}\n\n  </PanelChrome>\n\n  <PanelChrome\n    title=\"My awesome panel title\"\n    menu={() => (\n       <Menu>\n          <Menu.Item label=\"View\" icon=\"eye\" />\n          <Menu.Item label=\"Edit\" icon=\"edit\" />\n          <Menu.Item label=\"Share\" icon=\"share-alt\" />\n          <Menu.Divider />\n          <Menu.Item label=\"Remove\" icon=\"trash-alt\" />\n        </Menu>\n       )}\n    hoverHeader={true}\n    description=\"Here I will put a description that explains a bit more this panel\"\n    width={400}\n    height={200}\n\n>\n\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          Content with hoverHeader=true\n        </div>\n      );\n    }}\n\n  </PanelChrome>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Disabling Envelope Encryption via Feature Toggle\nDESCRIPTION: To turn off envelope encryption (default in Grafana v9.0+) and revert to the legacy encryption method, add the `disableEnvelopeEncryption` feature toggle to the `[feature_toggles]` section in your Grafana configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndisableEnvelopeEncryption\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Grafana Data Source ID by Name via HTTP API\nDESCRIPTION: Details the `GET /api/datasources/id/:name` endpoint used to retrieve the numeric ID of a data source given its name. Requires `datasources.id:read` permission with scopes like `datasources:*`, `datasources:name:*`, or `datasources:name:<Name>`. The request includes the data source name in the path parameter and standard headers. The response is a simple JSON object containing only the `id` field of the matching data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/id/test_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Durations in Grafana Templates - Go Template\nDESCRIPTION: Illustrates using {{ parseDuration }} to convert duration strings like '1h' or '30m' into floating-point numbers representing seconds. Works in Grafana's Go templating environment. Input is duration string, output is the numerical value (in seconds). Only supports valid duration strings recognized by Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_12\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ parseDuration \"1h\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact Points via Grafana HTTP API (HTTP)\nDESCRIPTION: This HTTP request demonstrates how to list all existing contact points using the GET method against the /api/v1/provisioning/contact-points endpoint. Requires the Bearer token in Authorization, the proper Accept and Content-Type set to application/json. No request body is needed. The response lists all configured contact point objects for alert notifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/contact-points\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Creating a New Organization (Admin API) - HTTP\nDESCRIPTION: This HTTP POST request creates a new organization by sending its name in the JSON request body to the /api/orgs endpoint. This action is restricted to server administrators authenticated via Basic Auth, and configuration must allow organization creation. Response will include the new orgId.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/orgs HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\\n  \"name\":\"New Org.\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Grafana Deployment Manifest - kubectl Bash\nDESCRIPTION: Applies changes in the 'grafana.yaml' manifest to the cluster, in the 'my-grafana' namespace. Required after configuration file or volume changes. Ensures new mounts and settings take effect in the running deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f grafana.yaml --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Grafana API Key via HTTP API (Legacy)\nDESCRIPTION: This shell command uses `curl` to send a POST request to the legacy `/api/auth/keys` endpoint in Grafana to create an API key named 'my-api-key' with the 'Viewer' role. Basic authentication (`admin:admin`) is used. The response includes the key ID, name, and the secret key itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/migrate-api-keys.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\": \"my-api-key\", \"role\": \"Viewer\"}' http://admin:admin@localhost:3000/api/auth/keys\n\n# response from the api\n{\"id\":2,\"name\":\"my-api-key\",\"key\":\"eyJrIjoiTFRSN1RBOVc3SGhjblc0bWZodXZ3MnNDcU92Um5VZUIiLKJuIjoibXktYXBpLWtleSIsImlkIjoxfQ==\"}%\n```\n\n----------------------------------------\n\nTITLE: Restricting Azure AD OAuth to Specific Groups (INI)\nDESCRIPTION: This example sets allowed_groups with a group object ID to restrict Grafana access to users who are members of a particular Microsoft Entra ID group. The group object IDs must be obtained from Azure Portal and the group claim should be configured in the Azure application. Multiple groups can be specified using commas or spaces as separators.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n  allowed_groups = 8bab1c86-8fba-33e5-2089-1d1c80ec267d\n```\n\n----------------------------------------\n\nTITLE: Assigning a Single Default Grafana Role to All Users (INI)\nDESCRIPTION: This INI configuration assigns the 'Viewer' role to every user authenticating via the configured provider. The `role_attribute_path` is set to a literal string 'Viewer' (note the double quotes within single quotes for the literal string in JMESPath). `skip_org_role_sync = false` ensures that this role assignment is applied during login.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = \"'Viewer'\"\nskip_org_role_sync = false\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Data Source and Folder using Terraform\nDESCRIPTION: Creates a 'TestData' data source and a folder named 'My Rule Folder' in Grafana using Terraform resources. Requires replacing placeholder names (`<terraform_data_source_name>`, `<terraform_folder_name>`) with desired Terraform resource identifiers. These resources serve as prerequisites for defining alert rules within the specified folder and querying the data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_data_source\" \"<terraform_data_source_name>\" {\n    name = \"TestData\"\n    type = \"testdata\"\n}\n\nresource \"grafana_folder\" \"<terraform_folder_name>\" {\n    title = \"My Rule Folder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing User Creation Permissions from Admin with Bash, cURL, and jq (bash)\nDESCRIPTION: This bash script removes user creation and invitation permissions from the 'basic_grafana_admin' role by fetching its JSON definition over HTTP, stripping metadata, incrementing version, and deleting relevant actions using jq, before uploading the new configuration. Inputs include the API endpoint, Bearer token, jq, and the existing role json. The script modifies the permissions array by removing entries for 'users:create' and 'org.users:add', restricting what the admin role can perform. Always check the output for unintended permission removals.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the role, modify it to remove the undesired permissions and increment its version\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n  -X GET '<grafana_url>/api/access-control/roles/basic_grafana_admin' | \\\n  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \\\n  jq 'del(.permissions[] | select (.action == \"users:create\")) | del(.permissions[] | select (.action == \"org.users:add\" and .scope == \"users:*\"))' > /tmp/basic_grafana_admin.json\n\n# Update the role\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \\\n  -X PUT-d @/tmp/basic_grafana_admin.json '<grafana_url>/api/access-control/roles/basic_grafana_admin'\n```\n\n----------------------------------------\n\nTITLE: Nested Template Variable SQL Query\nDESCRIPTION: SQL query that filters hostname results based on another template variable named 'region', demonstrating how to create dependent variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM host WHERE region IN ($region)\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker Container - Docker - Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'docker run' command to start a Grafana container in detached mode, naming the container 'grafana' and mapping the external port 3000 to the container's internal port 3000. Dependencies include Docker installed on the host machine and network access to port 3000. Inputs required are the 'grafana/grafana' image (default credentials: admin/admin); output is a running Grafana monitoring server accessible at http://localhost:3000. No data persistence is configured by default, and configuration is limited without mounting volumes or setting environment variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/packaging/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Defining Basic LogQL LBAC Rule with Single Label Matcher\nDESCRIPTION: Example LogQL query used as an LBAC rule, illustrated in Task 1 and Task 4 for Team A. This rule filters logs or metrics, granting access only to data points that have the label `namespace` with the value `dev`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_2\n\nLANGUAGE: logql\nCODE:\n```\n{namespace=\"dev\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Types in TypeScript\nDESCRIPTION: Demonstrates best practices for defining types in TypeScript, including explicit function return types.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconst stringArray = [];\n\n// good\nconst stringArray: string[] = [];\n\n// bad\nfunction transform(value?: string) {\n  if (!value) {\n    return undefined;\n  }\n  return applyTransform(value);\n}\n\n// good\nfunction transform(value?: string): TransformedValue | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return applyTransform(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Service with Homebrew (macOS)\nDESCRIPTION: Restarts the Grafana service managed by Homebrew on macOS. Useful for applying configuration changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbrew services restart grafana\n```\n\n----------------------------------------\n\nTITLE: Forcing Group Fetching via Microsoft Graph API in Grafana - INI\nDESCRIPTION: This INI snippet sets the force_use_graph_api configuration option to true, instructing Grafana to always retrieve group membership information from the Microsoft Graph API rather than relying on the id_token from Entra ID. No dependencies aside from a properly configured Grafana and Microsoft Graph API permissions are required. Set this option when experiencing group claim overages or to ensure the freshest group data on every login; place it in the relevant authentication section of your Grafana INI configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nforce_use_graph_api = true\n```\n\n----------------------------------------\n\nTITLE: Configuring RTK API Client Schema - TypeScript\nDESCRIPTION: Configuration example for updating the schema file path in the RTK API client generation script. Shows how to map an endpoint file to its corresponding OpenAPI schema.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'../public/app/features/dashboards/api/endpoints.gen.ts': {\n  schemaFile: '../data/openapi/dashboard.grafana.app-v0alpha1.json',\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tag Values Query in InfluxDB for Template Variables\nDESCRIPTION: Query to fetch all values for the hostname tag in InfluxDB, used to populate a template variable dropdown in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"hostname\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Browser Output - JSON\nDESCRIPTION: Enables the dumpio option in the rendering service JSON configuration to pipe browser process output back to the main service log. This is intended for advanced troubleshooting scenarios and is not recommended for normal operation due to large output size.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"dumpio\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SSO Settings for a Provider via HTTP API in HTTP\nDESCRIPTION: Explains how to update settings for a specified SSO provider using a HTTP PUT request to /api/v1/sso-settings/:provider. Requires a bearer token and 'settings:write' permission. The request payload must contain a 'settings' object with all relevant configuration. Grafana validates and applies the changes without a restart. The successful response returns status 204 with no body. Ensure that the provider name in the URL matches the intended target.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/sso-settings/github HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"settings\": {\\n    \"apiUrl\": \"https://api.github.com/user\",\\n    \"clientId\": \"my_github_client\",\\n    \"clientSecret\": \"my_github_secret\",\\n    \"enabled\": true,\\n    \"scopes\": \"user:email,read:org\"\\n  }\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Using Mock Objects in Grafana Tests\nDESCRIPTION: Example of using mocked objects in tests to control responses. Shows setting up expectations with On(), handling different return values, and asserting that expectations were met.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nobjectToReturn := Object{Message: \"abc\"}\nerrToReturn := errors.New(\"my error\")\n\nmyMock := &MockImplementation{}\ndefer myMock.AssertExpectations(t)\n\nmyMock.On(\"Get\", mock.Anything, \"id1\").Return(Object{}, errToReturn).Once()\nmyMock.On(\"Get\", mock.Anything, \"id2\").Return(objectToReturn, nil).Once()\n\nanyService := NewService(myMock)\n\nresp, err := anyService.Call(\"id1\")\nassert.Error(t, err, errToReturn)\n\nresp, err = anyService.Call(\"id2\")\nassert.Nil(t, err)\nassert.Equal(t, resp.Message, objectToReturn.Message)\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSO Settings for a Provider via HTTP API in HTTP\nDESCRIPTION: Shows how to obtain the SSO settings for a specific provider using a HTTP GET request to /api/v1/sso-settings/:provider. Requires a valid authorization token and the 'settings:read' permission. The response gives the configuration details for the requested provider, or an error if not found. Ideal for integration scripts and GUIs that need to display current SSO configuration for a single provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/sso-settings/github HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\nETag: db87f729761898ee\\n{\\n  \"id\":        \"1\",\\n  \"provider\":  \"github\",\\n  \"settings\": {\\n    \"apiUrl\": \"https://api.github.com/user\",\\n    \"clientId\": \"my_github_client\",\\n    \"clientSecret\": \"*********\",\\n    \"enabled\": true,\\n    \"scopes\": \"user:email,read:org\"\\n    // rest of the settings\\n  },\\n  \"source\":    \"system\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Correct SAML Group Attribute Formatting for Grafana Team Sync\nDESCRIPTION: This XML snippet illustrates the required format for a SAML attribute containing user groups intended for Grafana Team Sync. Each group membership must be provided as a distinct `saml2:AttributeValue` element within the `saml2:Attribute`. Including multiple groups within a single, delimited `AttributeValue` is not supported.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<saml2:Attribute ...>\n    <saml2:AttributeValue ...>admins_group</saml2:AttributeValue>\n    <saml2:AttributeValue ...>division_1</saml2:AttributeValue>\n</saml2:Attribute>\n```\n\n----------------------------------------\n\nTITLE: Submitting HTTP PUT Request to Update Team Preferences - HTTP\nDESCRIPTION: This snippet shows an HTTP PUT request to the Grafana API endpoint for modifying team preferences, including authorization headers and JSON body fields. Dependencies include having appropriate API permissions and a valid Bearer token. The request body parameters are: \"theme\" (options: 'light', 'dark', or ''), \"homeDashboardId\" (dashboard numeric ID), and \"timezone\" ('utc', 'browser', or ''). Omitting a field resets it to the system default. The expected output is a success response if permissions and data are valid.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/teams/2/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"theme\": \"dark\",\\n  \"homeDashboardId\": 39,\\n  \"timezone\": \"utc\"\\n}\n```\n\n----------------------------------------\n\nTITLE: List User Permissions Request\nDESCRIPTION: GET request to retrieve permissions for a specific user by ID. Requires users.permissions:read permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/users/1/permissions\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Showing Result of Inner Join on SQL-like Data\nDESCRIPTION: This Markdown table displays the outcome of applying an inner join transformation to the 'Students' and 'Enrollments' tables. The join uses the 'StudentID' field, including only students who have corresponding entries in the enrollments table.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | Name    | Major            | CourseID | Grade |\n| --------- | ------- | ---------------- | -------- | ----- |\n| 1         | John    | Computer Science | CS101    | A     |\n| 1         | John    | Computer Science | CS102    | B     |\n| 2         | Emily   | Mathematics      | MATH201  | A     |\n| 3         | Michael | Physics          | PHYS101  | B     |\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana OSS via APT - Shell\nDESCRIPTION: Removes the grafana OSS package and its installed files using the apt package manager. Input: None. Output: Grafana OSS uninstalled. Does not remove user data or repository sources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get remove grafana\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Heap Size Limit (Bash/Unix)\nDESCRIPTION: Exports the `NODE_OPTIONS` environment variable for the current shell session on Unix-like systems (Linux, macOS). It sets the `--max-old-space-size` flag to 8192, instructing Node.js processes launched from this session to use a maximum heap size of 8192 MB (8 GB). This can resolve 'JavaScript heap out of memory' errors, but the change applies only to the current session.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nexport NODE_OPTIONS=\"--max-old-space-size=8192\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as URL Query Parameters\nDESCRIPTION: Illustrates the `:queryparam` format option. This formats single or multi-valued variables into a URL query string representation. For multi-value variables, the parameter name is repeated for each value, joined by `&` (e.g., `var-name=value1&var-name=value2`). The example shows `[\"test1\", \"test2\"]` interpolated as `\"var-servers=test1&var-servers=test2\"`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nservers = [\"test1\", \"test2\"]\nString to interpolate: '${servers:queryparam}'\nInterpolation result: \"var-servers=test1&var-servers=test2\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Helm Release to Install Plugins - Bash\nDESCRIPTION: This bash command upgrades the Grafana Helm release using the specified values.yaml, triggering installation of newly added plugins. It requires Helm CLI, access to the Kubernetes cluster, and assumes the plugins are listed in the given YAML file. The command takes a customized values.yaml, applies it, and installs/upgrades release 'my-grafana' in the 'monitoring' namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Revoking Team Role Assignment - Grafana Access Control HTTP API - HTTP\nDESCRIPTION: Presents an example HTTP DELETE request to remove a specific role from a team based on the team and role UIDs in the endpoint path. Required scope is 'teams.roles:remove' with 'permissions:type:delegate' for privilege governance. JSON response is expected, and Accept header is set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/access-control/teams/1/roles/AFUXBHKnk\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Listing All Reports via Grafana Reporting API - HTTP\nDESCRIPTION: This HTTP code snippet demonstrates how to list all available reports from the Grafana Reporting API by sending a GET request to the /api/reports endpoint. The snippet includes necessary HTTP headers for authentication and content type, with a focus on obtaining data in JSON format. Requires an authentication bearer token and sufficient read permissions on reports.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining Folder Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of folders. `folders:*` matches any folder, while `folders:uid:1` targets the specific folder with UID 1. Permissions granted to a folder cascade down to its subfolders.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nfolders:*\n```\n\nLANGUAGE: text\nCODE:\n```\nfolders:uid:*\n```\n\n----------------------------------------\n\nTITLE: Adding a Query to Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet illustrates a successful HTTP 200 OK response after adding a query to the history. The JSON body contains the details of the newly added query history entry, including its UID, associated data source, creation timestamp, and the original query details.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"result\": {\n    \"uid\": \"Ahg678z\",\n    \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n    \"createdBy\": 1,\n    \"createdAt\": 1643630762,\n    \"starred\": false,\n    \"comment\": \"\",\n    \"queries\": [\n      {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PD8C576611E62080A\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Grafana Plugin using create-plugin (Shell)\nDESCRIPTION: Executes the `@grafana/create-plugin` CLI tool via `npx` to interactively create a starter Grafana plugin project. The command fetches the latest version of the tool and prompts the user for details like plugin type (e.g., datasource) and name. Requires Node.js and npx to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @grafana/create-plugin@latest\n```\n\n----------------------------------------\n\nTITLE: Using $__interval Variable in rate Function with PromQL\nDESCRIPTION: Example of using the $__interval variable with the rate function to calculate the rate of change for HTTP requests based on the dashboard's time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(http_requests_total[$__interval])\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Grafana Teams via INI\nDESCRIPTION: This INI configuration snippet, intended for the Grafana configuration file, sets up Grafana for isolated teams. It achieves this by setting the default organization role assigned to new users (`auto_assign_org_role`) to `None`, meaning users have no default viewing permissions. The `role_attribute_path` uses a JMESPath expression to assign the 'Admin' role if a user belongs to an 'admin' group, otherwise assigns 'None'. This configuration is presented as an example within comments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/team-management/configure-grafana-teams.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nauto_assign_org_role = None\nrole_attribute_path = contains(groups[*], 'admin') && 'Admin' || 'None'\n```\n```\n\n----------------------------------------\n\nTITLE: Server Response for Dashboard Deletion in HTTP/JSON\nDESCRIPTION: Example of a successful response from the server after deleting a dashboard. The response includes the title of the deleted dashboard, a confirmation message, and the dashboard ID. This confirms the dashboard was successfully removed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"title\": \"Production Overview\",\n  \"message\": \"Dashboard Production Overview deleted\",\n  \"id\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Basic Elasticsearch Data Source using YAML\nDESCRIPTION: Provides a basic example of provisioning an Elasticsearch data source in Grafana using YAML configuration. It defines the data source name, type, access method (proxy), URL, and essential `jsonData` parameters like the index pattern (`index`), the expected index interval (`interval`), and the field containing timestamps (`timeField`). This configuration is used within Grafana's provisioning system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Elastic\n    type: elasticsearch\n    access: proxy\n    url: http://localhost:9200\n    jsonData:\n      index: '[metrics-]YYYY.MM.DD'\n      interval: Daily\n      timeField: '@timestamp'\n```\n\n----------------------------------------\n\nTITLE: Displaying PanelChrome Loading, Streaming, and Error States in React\nDESCRIPTION: Provides examples of rendering `PanelChrome` in various data states using a `Stack` layout. The first panel demonstrates the 'Loading' state using `loadingState={LoadingState.Loading}`. The second shows the 'Streaming' state with `loadingState={LoadingState.Streaming}`. The third example illustrates an error state by setting the `statusMessage` prop and handling clicks via `statusMessageOnClick`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack gap={2} alignItems=\"flex-start\" wrap=\"wrap\">\n  <PanelChrome\n    title=\"My awesome panel title\"\n    loadingState={LoadingState.Loading}\n    width={400}\n    height={200}\n\n>\n\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          Data is loading\n        </div>\n      );\n    }}\n\n  </PanelChrome>\n\n  <PanelChrome\n    title=\"My awesome panel title\"\n    loadingState={LoadingState.Streaming}\n    width={400}\n    height={200}\n  >\n\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          Data is Streaming\n        </div>\n      );\n    }}\n\n  </PanelChrome>\n\n  <PanelChrome\n    title=\"My awesome panel title\"\n    statusMessage='Error text'\n    statusMessageOnClick={action('ErrorIndicator: onClick fired')}\n    width={400}\n    height={200}\n  >\n\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          There is an error\n        </div>\n      );\n    }}\n\n  </PanelChrome>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Browser Language - JSON\nDESCRIPTION: Uses rendering.acceptLanguage in JSON config to define the browser's Accept-Language header. This setting determines language preferences during rendering and must follow Accept-Language formatting. Useful for multi-lingual dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"acceptLanguage\": \"fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Debug Logging in Docker Compose (YAML)\nDESCRIPTION: Illustrates a `docker-compose.yaml` configuration snippet for running Grafana Enterprise with debug logging enabled. The `GF_LOG_LEVEL` environment variable is set to `debug` under the `environment` section of the `grafana` service definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  grafana:\n    image: grafana/grafana-enterprise\n    container_name: grafana\n    restart: unless-stopped\n    environment:\n      # increases the log level from info to debug\n      - GF_LOG_LEVEL=debug\n    ports:\n      - '3000:3000'\n    volumes:\n      - 'grafana_storage:/var/lib/grafana'\nvolumes:\n  grafana_storage: {}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Limits for a Running Process on Linux\nDESCRIPTION: This shell command displays the current resource limits for a specific running process (identified by its PID) on Linux systems by reading the `/proc` filesystem. It's useful for verifying the applied open file limit for a running Grafana instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/<PROCESS_PID>/limits\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Contact Point - YAML\nDESCRIPTION: Configures Kafka as an alert notification target in Grafana. Requires both 'kafkaRestProxy' and 'kafkaTopic' parameters to send messages. Input fields specify the Kafka REST Proxy endpoint and desired topic. Outputs Grafana alerts as Kafka messages via proxy. Assumes Kafka REST Proxy is deployed and accessible.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntype: kafka\\nsettings:\\n  # <string, required>\\n  kafkaRestProxy: http://localhost:8082\\n  # <string, required>\\n  kafkaTopic: topic1\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of plugins. `plugins:*` matches all plugins, while `plugins:id:grafana-oncall-app` targets the specific Grafana OnCall plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_37\n\nLANGUAGE: text\nCODE:\n```\nplugins:*\n```\n\nLANGUAGE: text\nCODE:\n```\nplugins:id:*\n```\n\n----------------------------------------\n\nTITLE: Provisioning Parca Data Source in Grafana YAML Configuration\nDESCRIPTION: Example YAML configuration for provisioning the Parca data source in Grafana. It specifies the API version, data source name, type, and URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/parca.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Parca\n    type: parca\n    url: http://localhost:3100\n```\n\n----------------------------------------\n\nTITLE: Describing /api/ds/query Workflow Using Mermaid Diagrams (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates the workflow for the legacy /api/ds/query API in Grafana. It visualizes the interactions between the user, API, storage, datasource plugin, and expression engine, mapping out branching logic for handling queries with and without expressions. No external dependencies are necessary except for the Mermaid rendering environment; it takes no runtime inputs, and outputs a visual call flow. The diagram highlights the parsing, datasource config retrieval, conditional logic along expressions and datasources, and eventual return of results.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/registry/apis/query/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\\n    autonumber\\n    actor User as User or Process\\n    participant api as /api/ds/query\\n    participant db as Storage<br/> (SQL)\\n    participant ds as Datasource<br/>Plugin\\n    participant expr as Expression<br/>Engine\\n\\n    User->>api: POST Query\\n    loop Each query\\n        api->>api: Parse query\\n        api->>db: Get ds config<br>and secrets\\n        db->>api: \\n    end\\n    alt No expressions\\n      alt Single datasource\\n          api->>ds: QueryData\\n      else Multiple datasources\\n        loop Each datasource (concurrently)\\n          api->>ds: QueryData\\n        end\\n        api->>api: Wait for results\\n      end\\n    else Expressions exist\\n        api->>expr: Calculate expressions graph\\n        loop Each node (eg, refID)\\n          alt Is query\\n              expr->>ds: QueryData\\n          else Is expression\\n            expr->>expr: Process\\n          end\\n        end\\n    end\\n    api->>User: return results\n```\n\n----------------------------------------\n\nTITLE: Updating Alert Rule Group - Grafana REST HTTP Endpoint - http\nDESCRIPTION: Defines the HTTP PUT route for updating an alert rule group in Grafana provisioning. The endpoint expects folder and group identifiers as path parameters and a body that includes the set of alert rules to assign to the group. This call is idempotent; rules supplied replace any existing group configuration. Requires the `PUT /api/v1/provisioning/folder/:folderUid/rule-groups/:group` endpoint and an appropriate request body. Inputs: folderUid, group (path), request body. Output: updated AlertRuleGroup object or ValidationError (on failure). Requires authorization and, optionally, the `X-Disable-Provenance` header for UI resource editing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_35\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/provisioning/folder/:folderUid/rule-groups/:group\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Tracer for Distributed Tracing in Go\nDESCRIPTION: Demonstrates how to create and use a Tracer for distributed tracing using OpenTelemetry. It shows how to create spans, add events and attributes, and handle errors in the context of tracing.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n   \"fmt\"\n\n   \"github.com/grafana/grafana/pkg/infra/tracing\"\n   \"go.opentelemetry.io/otel/attribute\"\n   \"go.opentelemetry.io/otel/trace\"\n)\n\ntype MyService struct {\n   tracer tracing.Tracer\n}\n\nfunc ProvideService(tracer tracing.Tracer) *MyService {\n   return &MyService{\n      tracer: tracer,\n   }\n}\n\nfunc (s *MyService) Hello(ctx context.Context, name string) (string, error) {\n   ctx, span := s.tracer.Start(ctx, \"MyService.Hello\", trace.WithAttributes(\n      attribute.String(\"my_attribute\", \"val\"),\n   ))\n   defer span.End()\n\n   span.AddEvent(\"checking name...\")\n\n   if name == \"\" {\n      err := fmt.Errorf(\"name cannot be empty\")\n      return \"\", tracing.Errorf(span, \"failed to check name: %w\", err)\n   }\n\n   span.AddEvent(\"name checked\")\n\n   span.SetAttributes(\n      attribute.String(\"my_service.name\", name),\n      attribute.Int64(\"my_service.some_other\", int64(1337)),\n   )\n\n   return fmt.Sprintf(\"Hello %s\", name), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Read-Only Custom Role for Alert Rules in a Specific Folder via Grafana RBAC API\nDESCRIPTION: This JSON payload is used with the `PUT access-control/roles` Grafana API endpoint to define a custom role named `custom:alert_rules_reader`. The role grants read-only access permissions (`alert.rules:read` and `folders:read`) specifically limited to the resources within the folder identified by `UID_F`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/access-roles/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPUT access-control/roles\n{\n\t\"name\": \"custom:alert_rules_reader\",\n\t\"displayName\": \"Alert rule reader in folder F\",\n\t\"description\": \"Read access to rules in folder F that use DS1 and DS2\",\n\t\"permissions\": [\n    \t{\n        \t\"action\": \"alert.rules:read\",\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t},\n    \t{\n        \t\"action\": \"folders:read\",\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prometheus Metrics with cURL (Linux/MacOS, Bash)\nDESCRIPTION: This code snippet uses curl to request the '/metrics' HTTP endpoint from a local Prometheus instance. It retrieves all current metrics and metadata in Prometheus' text exposition format. Assumes Prometheus is running and listening on port 9090. The response provides a list of all metrics collected and exposed by Prometheus on the instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:9090/metrics\n```\n\n----------------------------------------\n\nTITLE: Rendering Legacy PanelChrome Loading Indicator (Pre-v9.4.0) in React\nDESCRIPTION: Displays a rendered example of the older `PanelChrome` loading indicator pattern, used before Grafana v9.4.0. It utilizes the `leftItems` prop to include a `PanelChrome.LoadingIndicator` component, setting its `loading` state to true and providing a cancel handler via `onCancel`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  leftItems={[\n    <PanelChrome.LoadingIndicator\n      loading={true}\n      onCancel={action('CancelQuery: onClick fired')}\n      key=\"loading-indicator\"\n    />,\n  ]}\n  width={400}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'rgba(230,0,0,0.05)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Content\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding Grafana Service for Local Access (Bash)\nDESCRIPTION: This command uses `kubectl port-forward` to establish a connection between the local machine's port 3000 and the Grafana service's port 3000 running within the Kubernetes cluster. This allows accessing the Grafana UI via `localhost:3000` in a web browser for verification purposes. Requires `kubectl` and the Grafana service (`service/grafana`) to be running.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/grafana 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Grafana Dashboard Provisioning Configuration\nDESCRIPTION: YAML configuration for provisioning dashboards from filesystem structure into Grafana, enabling automatic folder creation based on filesystem hierarchy.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\nproviders:\n  - name: dashboards\n    type: file\n    updateIntervalSeconds: 30\n    options:\n      path: /etc/dashboards\n      foldersFromFilesStructure: true\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Data Sources (Plaintext)\nDESCRIPTION: Defines the `datasources:read` permission action needed to list or read details about data sources in Grafana. This is related to data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Dedicated Prometheus User (Linux)\nDESCRIPTION: This command uses 'sudo' and 'useradd' to create a dedicated system user named 'prometheus' without a home directory and with a non-login shell ('/bin/false'). Running Prometheus under a dedicated, non-privileged user is a recommended security practice.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd --no-create-home --shell /bin/false prometheus\n```\n\n----------------------------------------\n\nTITLE: Embedding License JWT Directly in Grafana INI (Bash)\nDESCRIPTION: Places the entire signed JWT license content directly into the Grafana INI file under the license_text property, enabling license provisioning without filesystem files. Useful for automation or ephemeral deployments. The value must be a valid JWT string. No output is produced; correct license content is required for Grafana Enterprise features to be enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[enterprise]\\nlicense_text = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aGlzIjoiaXMiLCJub3QiOiJhIiwidmFsaWQiOiJsaWNlbnNlIn0.bxDzxIoJlYMwiEYKYT_l2s42z0Y30tY-6KKoyz9RuLE\n```\n\n----------------------------------------\n\nTITLE: Enforcing Domain Verification in Grafana Server using TOML\nDESCRIPTION: Configures the `enforce_domain` setting in the `[server]` section (note: original text contains typo '[sever]') of `grafana.ini`. Setting this to `true` makes Grafana redirect requests if the `Host` header doesn't match the configured Grafana domain (`root_url`), helping to mitigate DNS rebinding attacks.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[sever]\n# Redirect to correct domain if host header does not match domain\n# Prevents DNS rebinding attacks\nenforce_domain = true\n```\n\n----------------------------------------\n\nTITLE: Factory Function with Context-Aware Resolver, Documented with Param and Returns Tags - TypeScript\nDESCRIPTION: This well-documented TypeScript function uses TSDoc to explain its behavior, parameter, and return type. It takes a Context argument, checks if the execution is server-side, and returns a FileResolver or HttpResolver accordingly. Dependencies include TypeScript types for Context, IResolver, FileResolver, and HttpResolver. The snippet illustrates the use of @param for input details and @returns for output description, fulfilling best documentation practices.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Helps to create a resource resolver depending\n * on the current execution context.\n *\n * @param context - The current execution context.\n * @returns FileResolver if executed on the server otherwise a HttpResolver.\n * @public\n **/\nexport const factory = (context: Context): IResolver => {\n  if (context.isServer) {\n    return new FileResolver();\n  }\n  return new HttpResolver();\n};\n```\n\n----------------------------------------\n\nTITLE: Port-Forwarding Grafana Service using Bash\nDESCRIPTION: Establishes a port forward from the local machine's port 3000 to the Grafana service's port 3000 within the 'my-grafana' namespace using `kubectl port-forward`. This allows accessing the Grafana UI via `localhost:3000` in a web browser, particularly useful when an ExternalIP is not available (e.g., in local clusters like minikube or when using a ClusterIP service type). Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward service/grafana 3000:3000 --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Getting an Alert Rule by UID via Grafana Provisioning API (HTTP)\nDESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/alert-rules/:uid` to retrieve a specific Grafana alert rule. The `UID` path parameter identifies the alert rule. A successful request returns a 200 OK status with the `ProvisionedAlertRule` object, while a 404 Not Found status is returned if the specified alert rule does not exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /api/v1/provisioning/alert-rules/:uid\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element by Name Response Example (HTTP/JSON)\nDESCRIPTION: Example HTTP 200 OK response for the 'Get library element by name' request. The JSON body contains an array of matching library element objects within the `result` field, as multiple elements might share the same name (e.g., in different folders).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": [\n        {\n            \"id\": 25,\n            \"orgId\": 1,\n            \"folderId\": 0,\n            \"uid\": \"V--OrYHnz\",\n            \"name\": \"API docs Example\",\n            \"kind\": 1,\n            \"type\": \"text\",\n            \"description\": \"\",\n            \"model\": {...},\n            \"version\": 1,\n            \"meta\": {\n                \"folderName\": \"General\",\n                \"folderUid\": \"\",\n                \"connectedDashboards\": 1,\n                \"created\": \"2021-09-27T09:56:17+02:00\",\n                \"updated\": \"2021-09-27T09:56:17+02:00\",\n                \"createdBy\": {\n                    \"id\": 1,\n                    \"name\": \"admin\",\n                    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n                },\n                \"updatedBy\": {\n                    \"id\": 1,\n                    \"name\": \"admin\",\n                    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Grafana Service Connectivity with Curl (Bash)\nDESCRIPTION: Executes a `curl` command against a specific Grafana service IP address and port (e.g., obtained via `minikube service`) to confirm that the endpoint is reachable and responding. A successful connection typically returns an HTML snippet indicating a redirect to the login page.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl 192.168.122.144:32182\n```\n\n----------------------------------------\n\nTITLE: Grouping with Null Fill Parameter and Labels (Per Host) - SQL\nDESCRIPTION: Aggregates 'value_double' with sum for each 'hostname' over 5-minute intervals, using the fill parameter in $__timeGroupAlias to substitute zeros for nulls. Results in distinct series for each hostname in Grafana's graph panel. Requires 'createdAt', 'value_double', and 'hostname' fields.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(createdAt,'5m',0),\n  sum(value_double) as value,\n  hostname\nFROM test_data\nWHERE\n  $__timeFilter(createdAt)\nGROUP BY time, hostname\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Configuring Team Sync for Google OAuth in Grafana\nDESCRIPTION: Configuration example for setting up team synchronization with Google groups. It shows how to add the required Cloud Identity API scope to the Grafana configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[auth.google]\n# ..\nscopes = openid email profile https://www.googleapis.com/auth/cloud-identity.groups.readonly\n```\n\n----------------------------------------\n\nTITLE: Grafana Server systemd Unit Configuration - INI\nDESCRIPTION: Defines a systemd unit file for Grafana Server. Configures unit metadata, user and group context, start command with config/homepath, and behavior on restart. Required for systemd-based service management. Dependencies: systemd, configured Grafana binary and config files. Input: none; file must be placed at /etc/systemd/system/grafana-server.service. Output: controls Grafana process lifecycle.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Grafana Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=grafana\nGroup=users\nExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Managed Identity in Grafana Server Configuration\nDESCRIPTION: INI configuration for enabling Managed Identity in Grafana's server configuration. This setting is needed to allow Grafana to use Azure Managed Identity for authentication to Azure services.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[azure]\nmanaged_identity_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Layers in Grafana Configuration\nDESCRIPTION: This YAML snippet shows how to enable experimental (alpha) layers in the Grafana configuration file by setting the 'enable_alpha' option to true under the 'panels' section.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[panels]\nenable_alpha = true\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Correlation in Grafana HTTP API\nDESCRIPTION: HTTP request for retrieving details of a specific correlation identified by source data source UID and correlation UID. This returns the complete correlation configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Response for Service Account Token Deletion in Grafana (HTTP)\nDESCRIPTION: The HTTP response after successfully deleting a service account token provides a confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n\t\"message\": \"API key deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as JSON Array String\nDESCRIPTION: Illustrates the `:json` format option. This formats multi-value variables into a string representation of a JSON array. The example shows `['test1', 'test2']` interpolated as `'[\"test1\", \"test2\"]'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:json}'\nInterpolation result: '[\"test1\", \"test2\"]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Allow and Deny Lists for Grafana Server Egress Requests in TOML\nDESCRIPTION: This snippet configures Grafana to block or allow outgoing requests based on specified hostnames or IP addresses. The 'host_deny_list' parameter defines addresses that are always blocked, while 'host_allow_list' permits only the listed addresses and denies all others if any entries are present. These options are placed under the '[security.egress]' section in the TOML configuration file. Input parameters are space-separated lists of hostnames or IPs, and proper configuration enhances control over network egress from the server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-request-security.md#2025-04-23_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[security.egress]\n# A list of hostnames or IP addresses separated by spaces for which requests are blocked.\nhost_deny_list = supersecret.internal 192.168.1.10\n# a list of hostnames or IP addresses separated by spaces for which requests will be allowed, all other requests will be blocked\nhost_allow_list = prometheus.internal\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Dashboards (Plaintext)\nDESCRIPTION: Defines the `dashboards:delete` permission action needed to delete one or more dashboards in Grafana. Access is related to dashboard and folder scopes including `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards:delete`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Wire-Generated Initialization Code in Go\nDESCRIPTION: Shows the initialization code generated by Wire based on the provided injector function.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc InitializeEvent() Event {\n    message := NewMessage()\n    greeter := NewGreeter(message)\n    event := NewEvent(greeter)\n    return event\n}\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Manifest File using Bash\nDESCRIPTION: Creates an empty file named `grafana.yaml` in the current directory using the standard Unix `touch` command. This file will subsequently be populated with the Kubernetes resource definitions (PVC, Deployment, Service) needed to deploy Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntouch grafana.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS License Validation via grafana.ini\nDESCRIPTION: Configures Grafana Enterprise to validate its license against AWS License Manager instead of Grafana Labs by editing the `grafana.ini` file (managed via a ConfigMap). This requires setting `license_validation_type` to `aws` within the `[enterprise]` section. Appropriate IAM permissions must be granted to the EKS node or pod execution role beforehand.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[enterprise]\nlicense_validation_type=aws\n```\n\n----------------------------------------\n\nTITLE: Resetting Admin Password for Homebrew Installation (Bash)\nDESCRIPTION: Provides the specific command to reset the Grafana admin password for an instance installed via Homebrew on macOS. It includes necessary overrides for config path, homepath, and data path specific to Homebrew's structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --configOverrides cfg:default.paths.data=/opt/homebrew/var/lib/grafana admin reset-admin-password <new password>\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Process/Service Status (macOS)\nDESCRIPTION: This command uses 'pgrep' on macOS to check if a process named 'prometheus' is running. In the context of checking service status on macOS (which might not use a traditional service manager like systemd or Windows Services), checking the process existence serves a similar purpose.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npgrep prometheus\n```\n\n----------------------------------------\n\nTITLE: Migrating a Single API Key by ID to a Service Account - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet covers how to migrate a specific API key, identified by its keyId, to a service account. The POST request and authentication are required; the keyId is part of the endpoint URI. On success, a simple JSON response confirms the migration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts/migrate/4 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"message\": \"Service accounts migrated\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a User's Role in an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP PATCH request to update the role of a specific user (identified by `:userId`) within a particular Grafana organization (identified by `:orgId`). The request body specifies the new `role`. This operation requires Basic Authentication and the `org.users:write` permission with the `users:*` scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/orgs/1/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"role\":\"Admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Basic Roles to Users, Teams, and Service Accounts - Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to define users, teams, and service accounts and assign predefined basic Grafana roles to them using 'grafana_role_assignment'. It depends on the 'grafana/grafana' provider and requires existing users, teams, or service accounts to assign roles. Each 'role_assignment' specifies the target entities and the basic role UID, such as 'basic_viewer', 'basic_editor', or 'basic_admin'. Inputs: entity definitions and role UIDs. Outputs: RBAC assignments in Grafana. All sensitive values (e.g., passwords, tokens) must be securely managed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_team\" \"viewer_team\" {\n  name = \"terraform_viewer_team\"\n}\n\nresource \"grafana_user\" \"editor_user\" {\n  email    = \"terraform_editor@example.com\"\n  login    = \"terraform_editor_user\"\n  password = <TEST_PASSWORD>\n}\n\nresource \"grafana_service_account\" \"admin_sa\" {\n  name = \"terraform_admin_sa\"\n}\n\n# Assign Viewer role to a team\nresource \"grafana_role_assignment\" \"viewer_role_assignment\" {\n  role_uid = \"basic_viewer\"\n  teams    = [grafana_team.viewer_team.id]\n}\n\n# Assign Editor role to a user\nresource \"grafana_role_assignment\" \"editor_role_assignment\" {\n  role_uid = \"basic_editor\"\n  users    = [grafana_user.editor_user.id]\n}\n\n# Assign Admin role to a service account\nresource \"grafana_role_assignment\" \"admin_role_assignment\" {\n  role_uid = \"basic_admin\"\n  service_accounts = [grafana_service_account.admin_sa.id]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Partially Updating Organization Preferences via HTTP PATCH - HTTP\nDESCRIPTION: Updates only the specified organization-wide preferences using a PATCH request, preserving other settings. Only fields provided, like theme, are changed; others remain untouched. Requires admin rights and proper authentication. Ideal for incremental configuration changes at the org level.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/org/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"theme\": \"dark\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account Token Expiration Limit (Plaintext)\nDESCRIPTION: This represents the 'token_expiration_day_limit' configuration option in Grafana. When set, it enforces a maximum expiration duration (in days) for newly created service account tokens, enhancing security. This option is disabled by default in Grafana v9.4.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntoken_expiration_day_limit\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab OAuth using Terraform Provider\nDESCRIPTION: Terraform configuration for setting up GitLab SSO in Grafana. This snippet shows how to configure OAuth2 settings including client credentials, scopes, role attributes, and group permissions using the grafana_sso_settings resource.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"gitlab_sso_settings\" {\n  provider_name = \"gitlab\"\n  oauth2_settings {\n    name                  = \"Gitlab\"\n    client_id             = \"YOUR_GITLAB_APPLICATION_ID\"\n    client_secret         = \"YOUR_GITLAB_APPLICATION_SECRET\"\n    allow_sign_up         = true\n    auto_login            = false\n    scopes                = \"openid email profile\"\n    allowed_domains       = \"mycompany.com mycompany.org\"\n    role_attribute_path   = \"contains(groups[*], 'example-group') && 'Editor' || 'Viewer'\"\n    role_attribute_strict = false\n    allowed_groups        = \"[\\\"admins\\\", \\\"software engineers\\\", \\\"developers/frontend\\\"]\"\n    use_pkce              = true\n    use_refresh_token     = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana OSS via DNF using Shell\nDESCRIPTION: Removes the Grafana Open Source (OSS) package using the `dnf remove` command. Requires `sudo` privileges. This command uninstalls Grafana that was previously installed using the `dnf install grafana` command.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf remove grafana\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables with Single Quotes\nDESCRIPTION: Illustrates the `:singlequote` format option. This formats single or multi-valued variables into a comma-separated string where each value is enclosed in single quotes (`'`) and internal single quotes are escaped (`\\'`). The example shows `['test1', 'test2']` interpolated as `\"'test1','test2'\"`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:singlequote}'\nInterpolation result: \"'test1','test2'\"\n```\n\n----------------------------------------\n\nTITLE: Enabling File Provisioning and Kubernetes Dashboard Feature Toggles in Grafana Configuration - INI\nDESCRIPTION: This snippet demonstrates how to enable the 'provisioning' and 'kubernetesDashboards' feature toggles in Grafana by editing the configuration file (typically grafana.ini or custom.ini). These toggles activate experimental provisioning features and Kubernetes dashboard support. Optionally, 'grafanaAPIServerEnsureKubectlAccess' can be enabled for smoother kubectl development workflows. No external dependencies are required, but only users with administration access to the configuration should apply this change. All parameters must appear under a '[feature_toggles]' section.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/file-path-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nprovisioning = true\nkubernetesDashboards = true ; use k8s from browser\n\n# If you want easy kubectl setup development mode\ngrafanaAPIServerEnsureKubectlAccess = true\n\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inline Banner Alert in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the Grafana `Alert` component to display an inline banner. It takes properties like `title`, `severity` (e.g., 'info', 'success', 'warning', 'error'), optional `buttonContent`, an `onRemove` function handler for dismissal, and allows nesting child elements (like a `div` shown here) to provide detailed alert messages. Inline banners are typically placed within the main content area.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert title={title} severity={severity} buttonContent={buttonContent} onRemove={onRemove}>\n  Child content that includes some alert details, like maybe what actually happened.</div>\n</Alert>\n```\n\n----------------------------------------\n\nTITLE: Enriching Data with Lookup Fields in Grafana\nDESCRIPTION: This example demonstrates how to use the 'Lookup fields from resource' transformation in Grafana. It shows how to enrich location data with additional information from a USA States lookup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n#### Dataset Example\n\n| Location  | Values |\n| --------- | ------ |\n| AL        | 0      |\n| AK        | 10     |\n| Arizona   | 5      |\n| Arkansas  | 1      |\n| Somewhere | 5      |\n\n#### Transformed Data\n\n| Location  | ID  | Name     | Lng         | Lat       | Values |\n| --------- | --- | -------- | ----------- | --------- | ------ |\n| AL        | AL  | Alabama  | -80.891064  | 12.448457 | 0      |\n| AK        | AK  | Arkansas | -100.891064 | 24.448457 | 10     |\n| Arizona   |     |          |             |           | 5      |\n| Arkansas  |     |          |             |           | 1      |\n| Somewhere |     |          |             |           | 5      |\n```\n\n----------------------------------------\n\nTITLE: Installing certbot via Snap on Debian (Bash)\nDESCRIPTION: Ensures any apt-installed version of `certbot` is removed using `apt-get remove`. Installs the recommended `certbot` version using `snap install --classic certbot`. Creates a symbolic link (`ln -s`) so `certbot` can be run from the standard path `/usr/bin/certbot`. Requires `sudo` privileges and `snapd`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get remove certbot\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Credentials in values.yaml for Grafana Deployment - YAML\nDESCRIPTION: This YAML entry sets the administrator username and password for Grafana when not using an existing Kubernetes secret. Edit this section in values.yaml to define static credentials. The adminUser and adminPassword fields are accepted, and changes will take effect on redeployment. Do not use default credentials in production environments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# Administrator credentials when not using an existing secret (see below)\nadminUser: admin\nadminPassword: admin\n```\n\n----------------------------------------\n\nTITLE: Docker Command to Launch Grafana with Custom Configuration\nDESCRIPTION: Docker command for launching Grafana container with a custom configuration file that enables auth proxy authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -v $(pwd)/grafana.ini:/etc/grafana/grafana.ini --name grafana grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Report Details via Grafana Reporting API - HTTP\nDESCRIPTION: This HTTP code snippet illustrates how to retrieve the details of a specific report by performing a GET request to the /api/reports/:id endpoint. An Authorization header with a valid bearer token is required, and the Accept and Content-Type headers specify JSON format. The endpoint expects the report ID as a path parameter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching and Replacement with Go Template Functions - Go Template\nDESCRIPTION: Demonstrates usage of {{ match }} for regex pattern matching and {{ reReplaceAll }} for performing regex-based replacements in strings in Grafana's Go templates. Requires regex support from the underlying template processing system. Inputs are pattern and string (and replacement in reReplaceAll), and outputs are boolean or the replaced string, respectively. Limitations may include complexity of supported regex features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_10\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ match \"a.*\" \"abc\" }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ reReplaceAll \"localhost:(.*)\" \"example.com:$1\" \"localhost:8080\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a User to an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP POST request to add an existing Grafana user to a specific organization identified by `:orgId`. The request body includes the user's `loginOrEmail` and the desired `role` (e.g., Viewer, Editor, Admin). This operation requires Basic Authentication and the `org.users:add` permission with the `users:*` scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/orgs/1/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"loginOrEmail\":\"user\",\n  \"role\":\"Viewer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack using Docker Compose\nDESCRIPTION: This command uses Docker Compose (specifically the `docker-compose` executable) to build, (re)create, start, and attach to containers for a service, running them in detached mode (`-d`). It reads the `docker-compose.yml` file in the current directory ('tutorial-environment') to start the Grafana, Loki, and Prometheus services required for the tutorial. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Annotations with Native SQL Time Column (SQL)\nDESCRIPTION: SQL query example for fetching Grafana annotations where the time information uses a native SQL date/time data type column named `native_date_time`. It employs the Grafana macro `$__timeFilter` which adapts the filtering based on the native column type and the dashboard's time range. Database columns (`native_date_time`, `metric1`, `tag1`, `tag2`) are mapped to the required Grafana annotation fields (`time`, `text`, `tags`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  native_date_time as time,\n  metric1 as text,\n  CONCAT(tag1, ',', tag2) as tags\nFROM\n  public.test_data\nWHERE\n  $__timeFilter(native_date_time)\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Value in Annotation (Dot Notation)\nDESCRIPTION: This Go template snippet demonstrates how to include the numeric value of a query result (identified by Ref ID 'A') within a Grafana alert annotation using dot notation access on the `$values` variable. It's used to provide specific context about the metric value that triggered the alert.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\nCPU usage has exceeded 80% ({{ $values.A.value }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Viewport Width - Bash\nDESCRIPTION: Defines RENDERING_VIEWPORT_MAX_WIDTH to restrict the maximum allowable width (in pixels) of the rendering viewport. Used to prevent excessive memory use in rendering. Requires v3.9.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_MAX_WIDTH=1000\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Listing Team Roles - Grafana Access Control - JSON\nDESCRIPTION: This exemplifies a successful HTTP/1.1 JSON response from the team roles list endpoint, where a set of roles is returned for the requested team. Includes all expected fields per role entity: version, uid, name, displayName, description, group, updated/created timestamps, and global status. Content-Type is JSON. Output is a JSON array of role objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"version\": 4,\n        \"uid\": \"j08ZBi-nk\",\n        \"name\": \"fixed:licensing:reader\",\n        \"displayName\": \"Licensing reader\",\n        \"description\": \"Read licensing information and licensing reports.\",\n        \"group\": \"Licenses\",\n        \"updated\": \"2022-02-03T14:19:50+01:00\",\n        \"created\": \"0001-01-01T00:00:00Z\",\n        \"global\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Webhook Notification Payload for Secret Leak - JSON\nDESCRIPTION: This JSON snippet demonstrates the format of the payload sent via webhook when a Grafana service account token leak is detected. The payload includes the alert unique identifier, link to the leak, an explanatory message, the state of the alert, and the notification title. Key parameters are: 'alert_uid' (leak alert identifier), 'link_to_upstream_details' (URL where leak occurred), 'message' (detailed description), 'state', and 'title'. The expected input is event data from a secret scan, the output is a properly structured JSON object sent as POST data to a webhook endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/secret-scan.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alert_uid\": \"c9ce50a1-d66b-45e4-9b5d-175766cfc026\",\n  \"link_to_upstream_details\": <URL to token leak>,\n  \"message\": \"Token of type grafana_service_account_token with name\\nsa-the-toucans has been publicly exposed in <URL to token leak>.\\nGrafana has revoked this token\",\n  \"state\": \"alerting\",\n  \"title\": \"SecretScan Alert: Grafana Token leaked\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Component Below Paginated Content in React (TSX)\nDESCRIPTION: This snippet shows an example of embedding the Pagination component beneath paginated content inside a div element, setting the current page to 1, the total number of pages to 5, and assigning a handler function for navigation. It demonstrates how to integrate the Pagination component in a React application using TypeScript JSX (TSX), with properties like currentPage, numberOfPages, and onNavigate. To reproduce this setup, ensure that the Pagination component is imported and that fetchPage is defined elsewhere to handle page changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Pagination/Pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\\n<div>\\n  <div>Page 1 content</div>\\n  <Pagination currentPage={1} numberOfPages={5} onNavigate={() => fetchPage(2)} />\\n</div>\\n```\n```\n\n----------------------------------------\n\nTITLE: Modern PanelChrome Loading State Implementation (v9.4.0+) in React\nDESCRIPTION: Demonstrates the current, recommended approach for handling loading states in `PanelChrome` (Grafana v9.4.0 and later). This involves using the `loadingState` prop (e.g., setting it to `LoadingState.Loading`) and optionally providing a cancellation callback via the `onCancelQuery` prop, replacing the older `leftItems` pattern.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  loadingState={LoadingState.Loading}\n  onCancelQuery={onCancelQuery}\n  width={400}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'white',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        New panel with old API\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana RPM Repository - Bash\nDESCRIPTION: This snippet uses zypper to add the official Grafana RPM repository for package management on SUSE/openSUSE. The 'addrepo' command configures the remote repository, enabling subsequent installation or updates via zypper. Requires: zypper package manager, sudo access. No parameters; outputs: adds repository named 'grafana'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper addrepo https://rpm.grafana.com grafana\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Structured Logger in Go\nDESCRIPTION: Demonstrates how to create a named, structured logger using the pkg/infra/log package and use different log levels. It also shows how to include error information in log messages.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"fmt\"\n\n  \"github.com/grafana/grafana/pkg/infra/log\"\n)\n\nlogger := log.New(\"my-logger\")\nlogger.Debug(\"Debug msg\")\nlogger.Info(\"Info msg\")\nlogger.Warning(\"Warning msg\")\nlogger.Error(\"Error msg\", \"error\", fmt.Errorf(\"BOOM\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Alerting Provisioning Resource - Grafana YAML\nDESCRIPTION: Defines an alerting provisioning resource for Grafana. The YAML describes a mute timing resource named 'MuteWeekends' for organization ID 1, muting alerts on Saturday and Sunday. This file (typically 'alerting.yaml') is placed in the 'provisioning/alerting' directory and loaded on Grafana startup. No external dependencies beyond standard provisioning structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\nmuteTimes:\n  - orgId: 1\n    name: MuteWeekends\n    time_intervals:\n      - weekdays: [saturday, sunday]\n\n```\n\n----------------------------------------\n\nTITLE: Using Search Filter in Templating Variable Query for PostgreSQL\nDESCRIPTION: Illustrates a SQL query that incorporates a search filter in a templating variable. This query allows users to dynamically filter hostname options as they type in the dropdown selection box.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM my_host WHERE hostname LIKE '$__searchFilter'\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Metrics Output from Grafana Image Renderer\nDESCRIPTION: Illustrates the Prometheus exposition format output from the Grafana image rendering service. Includes metrics on process resources (CPU, memory, file descriptors), Node.js event loop, handles, requests, heap usage, version info, HTTP request duration histograms, service uptime (`up` metric), and in-flight requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/monitoring/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.\n# TYPE process_cpu_user_seconds_total counter\nprocess_cpu_user_seconds_total 0.536 1579444523566\n\n# HELP process_cpu_system_seconds_total Total system CPU time spent in seconds.\n# TYPE process_cpu_system_seconds_total counter\nprocess_cpu_system_seconds_total 0.064 1579444523566\n\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.6000000000000001 1579444523566\n\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n# TYPE process_start_time_seconds gauge\nprocess_start_time_seconds 1579444433\n\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes gauge\nprocess_resident_memory_bytes 52686848 1579444523568\n\n# HELP process_virtual_memory_bytes Virtual memory size in bytes.\n# TYPE process_virtual_memory_bytes gauge\nprocess_virtual_memory_bytes 2055344128 1579444523568\n\n# HELP process_heap_bytes Process heap size in bytes.\n# TYPE process_heap_bytes gauge\nprocess_heap_bytes 1996390400 1579444523568\n\n# HELP process_open_fds Number of open file descriptors.\n# TYPE process_open_fds gauge\nprocess_open_fds 31 1579444523567\n\n# HELP process_max_fds Maximum number of open file descriptors.\n# TYPE process_max_fds gauge\nprocess_max_fds 1573877\n\n# HELP nodejs_eventloop_lag_seconds Lag of event loop in seconds.\n# TYPE nodejs_eventloop_lag_seconds gauge\nnodejs_eventloop_lag_seconds 0.000915922 1579444523567\n\n# HELP nodejs_active_handles Number of active libuv handles grouped by handle type. Every handle type is C++ class name.\n# TYPE nodejs_active_handles gauge\nnodejs_active_handles{type=\"WriteStream\"} 2 1579444523566\nnodejs_active_handles{type=\"Server\"} 1 1579444523566\nnodejs_active_handles{type=\"Socket\"} 9 1579444523566\nnodejs_active_handles{type=\"ChildProcess\"} 2 1579444523566\n\n# HELP nodejs_active_handles_total Total number of active handles.\n# TYPE nodejs_active_handles_total gauge\nnodejs_active_handles_total 14 1579444523567\n\n# HELP nodejs_active_requests Number of active libuv requests grouped by request type. Every request type is C++ class name.\n# TYPE nodejs_active_requests gauge\nnodejs_active_requests{type=\"FSReqCallback\"} 2\n\n# HELP nodejs_active_requests_total Total number of active requests.\n# TYPE nodejs_active_requests_total gauge\nnodejs_active_requests_total 2 1579444523567\n\n# HELP nodejs_heap_size_total_bytes Process heap size from node.js in bytes.\n# TYPE nodejs_heap_size_total_bytes gauge\nnodejs_heap_size_total_bytes 13725696 1579444523567\n\n# HELP nodejs_heap_size_used_bytes Process heap size used from node.js in bytes.\n# TYPE nodejs_heap_size_used_bytes gauge\nnodejs_heap_size_used_bytes 12068008 1579444523567\n\n# HELP nodejs_external_memory_bytes Nodejs external memory size in bytes.\n# TYPE nodejs_external_memory_bytes gauge\nnodejs_external_memory_bytes 1728962 1579444523567\n\n# HELP nodejs_heap_space_size_total_bytes Process heap space size total from node.js in bytes.\n# TYPE nodejs_heap_space_size_total_bytes gauge\nnodejs_heap_space_size_total_bytes{space=\"read_only\"} 262144 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"new\"} 1048576 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"old\"} 9809920 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"code\"} 425984 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"map\"} 1052672 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"large_object\"} 1077248 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"code_large_object\"} 49152 1579444523567\nnodejs_heap_space_size_total_bytes{space=\"new_large_object\"} 0 1579444523567\n\n# HELP nodejs_heap_space_size_used_bytes Process heap space size used from node.js in bytes.\n# TYPE nodejs_heap_space_size_used_bytes gauge\nnodejs_heap_space_size_used_bytes{space=\"read_only\"} 32296 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"new\"} 601696 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"old\"} 9376600 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"code\"} 286688 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"map\"} 704320 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"large_object\"} 1064872 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"code_large_object\"} 3552 1579444523567\nnodejs_heap_space_size_used_bytes{space=\"new_large_object\"} 0 1579444523567\n\n# HELP nodejs_heap_space_size_available_bytes Process heap space size available from node.js in bytes.\n# TYPE nodejs_heap_space_size_available_bytes gauge\nnodejs_heap_space_size_available_bytes{space=\"read_only\"} 229576 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"new\"} 445792 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"old\"} 417712 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"code\"} 20576 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"map\"} 343632 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"large_object\"} 0 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"code_large_object\"} 0 1579444523567\nnodejs_heap_space_size_available_bytes{space=\"new_large_object\"} 1047488 1579444523567\n\n# HELP nodejs_version_info Node.js version info.\n# TYPE nodejs_version_info gauge\nnodejs_version_info{version=\"v14.16.1\",major=\"14\",minor=\"16\",patch=\"1\"} 1\n\n# HELP grafana_image_renderer_service_http_request_duration_seconds duration histogram of http responses labeled with: status_code\n# TYPE grafana_image_renderer_service_http_request_duration_seconds histogram\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"1\",status_code=\"200\"} 0\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"5\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"7\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"9\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"11\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"13\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"15\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"20\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"30\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_bucket{le=\"+Inf\",status_code=\"200\"} 4\ngrafana_image_renderer_service_http_request_duration_seconds_sum{status_code=\"200\"} 10.492873834\ngrafana_image_renderer_service_http_request_duration_seconds_count{status_code=\"200\"} 4\n\n# HELP up 1 = up, 0 = not up\n# TYPE up gauge\nup 1\n\n# HELP grafana_image_renderer_http_request_in_flight A gauge of requests currently being served by the image renderer.\n# TYPE grafana_image_renderer_http_request_in_flight gauge\ngrafana_image_renderer_http_request_in_flight 1\n\n# HELP grafana_image_renderer_step_duration_seconds duration histogram of browser steps for rendering an image labeled with: step\n# TYPE grafana_image_renderer_step_duration_seconds histogram\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Dashboards (Plaintext)\nDESCRIPTION: Defines the `dashboards:write` permission action necessary to update one or more dashboards in Grafana. Access is associated with dashboard and folder scopes such as `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Traefik File Provider Router/Service (Sub Path) - YAML\nDESCRIPTION: Configures a Traefik file provider router and service to forward requests with a /grafana prefix and host check to a Grafana backend. Suitable for use in traefik.yml or a file-based provider directory. This supports deployments where Grafana must be hosted behind a specific path (multi-application hosts).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\\n  routers:\\n    grafana:\\n      rule: Host(`example.com`) && PathPrefix(`/grafana`)\\n      service: grafana\\n  services:\\n    grafana:\\n      loadBalancer:\\n        servers:\\n          - url: http://192.168.30.10:3000\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Basic Auth using cURL in Bash\nDESCRIPTION: Demonstrates how to make an authenticated request to the Grafana API endpoint `/api/org` using Basic Authentication with `curl`. This method passes the username and password directly in the URL. It requires Basic Authentication to be enabled in Grafana (which is the default).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/developers/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://admin:admin@localhost:3000/api/org\n{\"id\":1,\"name\":\"Main Org.\"}\n```\n\n----------------------------------------\n\nTITLE: Reloading Provisioning Configurations via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Demonstrates an HTTP POST request to reload dashboard provisioning configurations in Grafana. No payload is needed, and a JSON confirmation message is provided in the response. Requires Basic Authentication and provisioning reload permissions for the specified entity type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/provisioning/dashboards/reload HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"Dashboards config reloaded\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Executable for Grafana Plugin Rendering - Bash\nDESCRIPTION: Sets the GF_PLUGIN_RENDERING_CHROME_BIN environment variable to specify a custom Chrome/Chromium binary for the Grafana Image renderer plugin in plugin mode. This Bash command ensures that the Grafana process uses the specified executable path. The variable should be set before starting the Grafana server and the given path must point to a valid, installed Chrome/Chromium binary. No additional dependencies are needed other than Bash and a compatible Chrome/Chromium installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport GF_PLUGIN_RENDERING_CHROME_BIN=\"/usr/bin/chromium-browser\"\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Notification Template Group - Grafana REST HTTP Endpoint - http\nDESCRIPTION: Presents the HTTP PUT endpoint for creating or updating a notification template group in Grafana provisioning. A template group is addressed by its name as a path parameter. Endpoint: `PUT /api/v1/provisioning/templates/:name`. The required request body should define the template group contents. Supports the optional `X-Disable-Provenance` header for enabling UI modifications of provisioned resources. Input: template group name (path), request body. Output depends on operation's validity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/provisioning/templates/:name\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Mocks in Grafana\nDESCRIPTION: Example of creating a mock implementation of an interface using the testify/mock package. Shows how to define the mock struct and implement interface methods to return controlled responses.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/stretchr/testify/mock\"\n\ntype MockImplementation struct {\n    mock.Mock\n}\n\nfunc (m *MockImplementation) Get(ctx context.Context, id string) (Object, error) {\n    args := m.Called(ctx, id) // Pass all arguments in order here\n    return args.Get(0).(Object), args.Error(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Team Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of teams within an organization. `teams:*` matches any team, while `teams:id:1` targets the specific team with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_44\n\nLANGUAGE: text\nCODE:\n```\nteams:*\n```\n\nLANGUAGE: text\nCODE:\n```\nteams:id:*\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose Version - Bash\nDESCRIPTION: Verifies if Docker Compose is installed by querying its version. This command requires Docker Compose CLI to be available on the system PATH. Outputs the version information if Compose is installed; otherwise, prompts the user to install it.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose version\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server using Binary (Linux)\nDESCRIPTION: Executes the Grafana server binary directly. Requires the current working directory to be the Grafana installation root. Used when Grafana is installed from a .tar.gz file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./bin/grafana server\n```\n\n----------------------------------------\n\nTITLE: Building Email Templates using Make (Shell)\nDESCRIPTION: This command executes the default task defined in the project's Makefile. According to the context, this default task builds new inlined email templates. The assembled templates are placed in the `dist/` directory, and the final inlined templates are output to the `../public/emails/` directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Creating Async Option Loader Function for AsyncSelect with React (TSX)\nDESCRIPTION: Provides a reusable async function for loading Select options via Promises. The function returns a Promise resolving to an array of SelectableValue<string>. Requires Promises, setTimeout, and compatible options variable. Key input is the resolve callback for the Promise, output is the available options after a simulated delay.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst loadAsyncOptions = () => {\n  return new Promise<Array<SelectableValue<string>>>((resolve) => {\n    setTimeout(() => {\n      resolve(options);\n    }, 2000);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: IIS URL Rewrite Rule for Grafana on Sub Path - XML\nDESCRIPTION: This XML snippet defines an IIS URL Rewrite rule for rerouting requests to /grafana and its subpaths to the backend Grafana server. Place this inside the <system.webServer> section of web.config for the parent website. Key parameters include the URL matching pattern, rewrite action target, and enabling query string appending and rule stopping. IIS URL Rewrite module must be installed and enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n  <rewrite>\\n      <rules>\\n          <rule name=\"Grafana\" enabled=\"true\" stopProcessing=\"true\">\\n              <match url=\"grafana(/)?(.*)\" />\\n              <action type=\"Rewrite\" url=\"http://localhost:3000/{R:2}\" logRewrittenUrl=\"false\" />\\n          </rule>\\n      </rules>\\n  </rewrite>\n```\n\n----------------------------------------\n\nTITLE: Configuring PanelChrome Loading and Error States in React\nDESCRIPTION: Illustrates how to configure the `PanelChrome` component to display different states. It shows setting the loading state via the `loadingState` prop (accepting `LoadingState.Loading` or `LoadingState.Streaming`), displaying an error message using `statusMessage`, and handling clicks on the error indicator with `statusMessageOnClick`. These props allow reflecting the underlying data status directly on the panel.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  loadingState={<Loading.Loading || Loading.Streaming>}\n  statusMessage='Error text'\n  statusMessageOnClick={action('ErrorIndicator: onClick fired')}\n  width={400}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'rgba(230,0,0,0.05)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        New panel with old API\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server via Command Line (Windows)\nDESCRIPTION: Executes the Grafana server executable from the command line. This command should be run from the 'bin' directory of the Grafana installation folder after extracting the standalone Windows binary.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngrafana-server.exe\n```\n\n----------------------------------------\n\nTITLE: Rendered Accessible HTML for Form Elements\nDESCRIPTION: Shows the rendered HTML output of the Grafana UI Field component, demonstrating how it correctly associates the label with the input using the 'for' attribute matching the input's 'id'.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <label for=\"name\"> Name </label>\n  <input name=\"name\" type=\"text\" id=\"name\" placeholder=\"Enter a name\" value=\"\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Secrets via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Executes an HTTP POST request to roll back the previous state of secrets in Grafana. The endpoint processes the request synchronously. The API signifies completion with a 204 No Content HTTP response.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/encryption/rollback-secrets HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Building Prometheus and Grafana Outputs with Make - Bash\nDESCRIPTION: This Bash command snippet demonstrates how to build the Prometheus alert/rule output YAML files and Grafana dashboard JSON directories using a Makefile. By invoking 'make build', it ensures the necessary build steps defined in the Makefile are executed, resulting in 'alerts.yaml', 'rules.yaml', and a 'dashboard_out' directory. It requires GNU make and that build dependencies such as mixtool and jsonnetfmt are already installed and available on the PATH. The inputs are defined by the Makefile present in the directory, and outputs are updated dashboard and rule files suitable for deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/grafana-mixin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make build\n```\n\n----------------------------------------\n\nTITLE: Searching for Grafana Helm Charts - Helm CLI - Bash\nDESCRIPTION: This command searches the Helm repositories for the `grafana/grafana` chart using Helm CLI. Useful for confirming the chart’s availability and viewing version information. Requires Helm and access to the internet.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm search repo grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Grafana\nDESCRIPTION: Configuration snippet for enabling and setting up JWT authentication in Grafana's custom.ini file. It includes settings for JWT header, claims mapping, and role assignments.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auth.jwt]\nenabled = true\nheader_name = X-JWT-Assertion\nusername_claim = preferred_username\nemail_claim = email\njwk_set_file = devenv/docker/blocks/auth/oauth/jwks.json\ncache_ttl = 60m\nexpect_claims = {\"iss\": \"http://localhost:8087/realms/grafana\", \"azp\": \"grafana-oauth\"}\nauto_sign_up = true\nrole_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\nrole_attribute_strict = true\nallow_assign_grafana_admin = true\n```\n\n----------------------------------------\n\nTITLE: Example MQTT Notification Payload Structure in JSON\nDESCRIPTION: This JSON object exemplifies the payload structure sent by the Grafana Alerting MQTT integration when the message format is set to JSON. It includes top-level fields like `receiver`, `status`, `orgId`, `externalURL`, and an `alerts` array containing details for each firing alert instance. The structure and field descriptions are further detailed in the accompanying tables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/configure-mqtt.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"My MQTT integration\",\n  \"status\": \"firing\",\n  \"orgId\": 1,\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High memory usage\",\n        \"team\": \"blue\",\n        \"zone\": \"us-1\"\n      },\n      \"annotations\": {\n        \"description\": \"The system has high memory usage\",\n        \"runbook_url\": \"https://myrunbook.com/runbook/1234\",\n        \"summary\": \"This alert was triggered for zone us-1\"\n      },\n      \"startsAt\": \"2021-10-12T09:51:03.157076+02:00\",\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\": \"https://play.grafana.org/alerting/1afz29v7z/edit\",\n      \"fingerprint\": \"c6eadffa33fcdf37\",\n      \"silenceURL\": \"https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\",\n      \"dashboardURL\": \"\",\n      \"panelURL\": \"\",\n      \"values\": {\n        \"B\": 44.23943737541908,\n        \"C\": 1\n      }\n    },\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High CPU usage\",\n        \"team\": \"blue\",\n        \"zone\": \"eu-1\"\n      },\n      \"annotations\": {\n        \"description\": \"The system has high CPU usage\",\n        \"runbook_url\": \"https://myrunbook.com/runbook/1234\",\n        \"summary\": \"This alert was triggered for zone eu-1\"\n      },\n      \"startsAt\": \"2021-10-12T09:56:03.157076+02:00\",\n      \"endsAt\": \"0001-01-01T00:00:00Z\",\n      \"generatorURL\": \"https://play.grafana.org/alerting/d1rdpdv7k/edit\",\n      \"fingerprint\": \"bc97ff14869b13e3\",\n      \"silenceURL\": \"https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\",\n      \"dashboardURL\": \"\",\n      \"panelURL\": \"\",\n      \"values\": {\n        \"B\": 44.23943737541908,\n        \"C\": 1\n      }\n    }\n  ],\n  \"groupLabels\": {},\n  \"commonLabels\": {\n    \"team\": \"blue\"\n  },\n  \"commonAnnotations\": {},\n  \"externalURL\": \"https://play.grafana.org/\",\n  \"version\": \"1\",\n  \"groupKey\": \"{}:{}\",\n  \"message\": \"**Firing**\\n\\nLabels:\\n - alertname = T2\\n - team = blue\\n - zone = us-1\\nAnnotations:\\n - description = This is the alert rule checking the second system\\n - runbook_url = https://myrunbook.com\\n - summary = This is my summary\\nSource: https://play.grafana.org/alerting/1afz29v7z/edit\\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT2%2Cteam%3Dblue%2Czone%3Dus-1\\n\\nLabels:\\n - alertname = T1\\n - team = blue\\n - zone = eu-1\\nAnnotations:\\nSource: https://play.grafana.org/alerting/d1rdpdv7k/edit\\nSilence: https://play.grafana.org/alerting/silence/new?alertmanager=grafana&matchers=alertname%3DT1%2Cteam%3Dblue%2Czone%3Deu-1\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editable Grafana Resources with Terraform\nDESCRIPTION: Terraform configuration demonstrating how to create editable Grafana resources by setting the disable_provenance attribute. Shows configuration for contact points and message templates.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_contact_point\" \"my_contact_point\" {\n  name = \"My Contact Point\"\n\n  disable_provenance = true\n}\n\nresource \"grafana_message_template\" \"custom_notification_template_group\" {\n  name     = \"custom_notification_template_group\"\n  template = \"{{define \\\"template1\\\" }}Say{{ end }}{{define \\\"template2\\\" }}Hi!{{ end }}\"\n\n  disable_provenance = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VictorOps Contact Point - YAML\nDESCRIPTION: Sets up VictorOps as a contact point for Grafana, requiring a VictorOps endpoint URL and optional message type. Alerts are routed to VictorOps using this configuration. Requires valid endpoint and event type; outputs notifications to the VictorOps platform.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ntype: victorops\\nsettings:\\n  # <string, required>\\n  url: XXX\\n  # <string> options: CRITICAL, WARNING\\n  messageType: CRITICAL\\n\n```\n\n----------------------------------------\n\nTITLE: Response for Admin Settings Request\nDESCRIPTION: Example response from the Grafana Admin Settings API showing various configuration sections including authentication providers, database settings, and server configurations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"DEFAULT\": {\n    \"app_mode\":\"production\"\n  },\n  \"analytics\": {\n    \"google_analytics_ua_id\":\"\",\n    \"reporting_enabled\":\"false\"\n  },\n  \"auth.anonymous\":{\n    \"enabled\":\"true\",\n    \"org_name\":\"Main Org.\",\n    \"org_role\":\"Viewer\"\n  },\n  \"auth.basic\":{\n    \"enabled\":\"false\"\n  },\n  \"auth.github\":{\n    \"allow_sign_up\":\"false\",\n    \"allowed_domains\":\"\",\n    \"allowed_organizations\":\"\",\n    \"api_url\":\"https://api.github.com/user\",\n    \"auth_url\":\"https://github.com/login/oauth/authorize\",\n    \"client_id\":\"some_id\",\n    \"client_secret\":\"************\",\n    \"enabled\":\"false\",\n    \"scopes\":\"user:email,read:org\",\n    \"team_ids\":\"\",\n    \"token_url\":\"https://github.com/login/oauth/access_token\"\n  },\n  \"auth.google\":{\n    \"allow_sign_up\":\"false\",\"allowed_domains\":\"\",\n    \"api_url\":\"https://www.googleapis.com/oauth2/v1/userinfo\",\n    \"auth_url\":\"https://accounts.google.com/o/oauth2/auth\",\n    \"client_id\":\"some_client_id\",\n    \"client_secret\":\"************\",\n    \"enabled\":\"false\",\n    \"scopes\":\"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\",\n    \"token_url\":\"https://accounts.google.com/o/oauth2/token\"\n  },\n  \"auth.ldap\":{\n    \"config_file\":\"/etc/grafana/ldap.toml\",\n    \"enabled\":\"false\"\n  },\n  \"auth.proxy\":{\n    \"auto_sign_up\":\"true\",\n    \"enabled\":\"false\",\n    \"header_name\":\"X-WEBAUTH-USER\",\n    \"header_property\":\"username\"\n  },\n  \"dashboards.json\":{\n    \"enabled\":\"false\",\n    \"path\":\"/var/lib/grafana/dashboards\"\n  },\n  \"database\":{\n    \"host\":\"127.0.0.1:0000\",\n    \"name\":\"grafana\",\n    \"password\":\"************\",\n    \"path\":\"grafana.db\",\n    \"ssl_mode\":\"disable\",\n    \"type\":\"sqlite3\",\n    \"user\":\"root\"\n  },\n  \"emails\":{\n    \"templates_pattern\":\"emails/*.html, emails/*.txt\",\n    \"welcome_email_on_sign_up\":\"false\",\n    \"content_types\":\"text/html\"\n  },\n  \"log\":{\n    \"buffer_len\":\"10000\",\n    \"level\":\"Info\",\n    \"mode\":\"file\"\n  },\n  \"log.console\":{\n    \"level\":\"\"\n  },\n  \"log.file\":{\n    \"daily_rotate\":\"true\",\n    \"file_name\":\"\",\n    \"level\":\"\",\n    \"log_rotate\":\"true\",\n    \"max_days\":\"7\",\n    \"max_lines\":\"1000000\",\n    \"max_lines_shift\":\"28\",\n    \"max_size_shift\":\"\"\n  },\n  \"paths\":{\n    \"data\":\"/tsdb/grafana\",\n    \"logs\":\"/logs/apps/grafana\"},\n    \"security\":{\n    \"admin_password\":\"************\",\n    \"admin_user\":\"admin\",\n    \"cookie_remember_name\":\"grafana_remember\",\n    \"cookie_username\":\"grafana_user\",\n    \"disable_gravatar\":\"false\",\n    \"login_remember_days\":\"7\",\n    \"secret_key\":\"************\"\n  },\n  \"server\":{\n    \"cert_file\":\"\",\n    \"cert_key\":\"\",\n    \"certs_watch_interval\": \"0s\",\n    \"domain\":\"mygraf.com\",\n    \"enable_gzip\":\"false\",\n    \"enforce_domain\":\"false\",\n    \"http_addr\":\"127.0.0.1\",\n    \"http_port\":\"0000\",\n    \"protocol\":\"http\",\n    \"root_url\":\"%(protocol)s://%(domain)s:%(http_port)s/\",\n    \"router_logging\":\"true\",\n    \"data_proxy_logging\":\"true\",\n    \"static_root_path\":\"public\"\n  },\n  \"session\":{\n    \"cookie_name\":\"grafana_sess\",\n    \"cookie_secure\":\"false\",\n    \"gc_interval_time\":\"\",\n    \"provider\":\"file\",\n    \"provider_config\":\"sessions\",\n    \"session_life_time\":\"86400\"\n  },\n  \"smtp\":{\n    \"cert_file\":\"\",\n    \"enabled\":\"false\",\n    \"from_address\":\"admin@grafana.localhost\",\n    \"from_name\":\"Grafana\",\n    \"ehlo_identity\":\"dashboard.example.com\",\n    \"host\":\"localhost:25\",\n    \"key_file\":\"\",\n    \"password\":\"************\",\n    \"skip_verify\":\"false\",\n    \"user\":\"\"\n  },\n  \"users\":{\n    \"allow_org_create\":\"true\",\n    \"allow_sign_up\":\"false\",\n    \"auto_assign_org\":\"true\",\n    \"auto_assign_org_role\":\"Viewer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Prometheus Process is Running (Windows/PowerShell)\nDESCRIPTION: This PowerShell command checks if a process named 'prometheus' is currently running on Windows. The '-ErrorAction SilentlyContinue' parameter prevents errors from being displayed if the process is not found.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Process -Name prometheus -ErrorAction SilentlyContinue\n```\n\n----------------------------------------\n\nTITLE: Using Dashboard Variable in TraceQL Query (Grafana)\nDESCRIPTION: This snippet demonstrates using a Grafana dashboard variable placeholder within a TraceQL query field for a Traces panel. The `${traceId}` syntax allows the query to dynamically fetch traces based on the current value selected for the 'traceId' variable defined in the dashboard settings. This enables users to input or select a specific trace ID to visualize in the panel. Requires a dashboard variable named `traceId` (typically of type 'Custom') to be defined.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/traces/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${traceId}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Creating Annotation - HTTP+JSON\nDESCRIPTION: Shows a sample HTTP 200 response indicating successful creation of an annotation. The response includes a 'message' and the 'id' of the newly created annotation. This illustrates the structure of the positive server response.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n    \"message\":\"Annotation added\",\\n    \"id\": 1,\\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Current User's Context via Grafana API (HTTP)\nDESCRIPTION: Switches the context of the currently authenticated user to a specified organization (identified by `:organizationId`) using a POST request to `/api/user/using/:organizationId`. Requires authentication, shown here using a Bearer Token. Returns a JSON success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/user/using/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Active organization changed\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Escalate Permission Scope in Grafana RBAC\nDESCRIPTION: The `permissions:type:escalate` scope is required to trigger the reset of basic role permissions. It signifies that users might gain additional permissions they didn't previously possess through this action.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_36\n\nLANGUAGE: text\nCODE:\n```\npermissions:type:escalate\n```\n\n----------------------------------------\n\nTITLE: Grouping SQL Time Series Data by Multiple Dimensions\nDESCRIPTION: This SQL fragment shows the `GROUP BY` clause used to aggregate time series data by multiple dimensions ('Location' and 'Sensor') along with hourly time buckets. When used in a query that selects these columns and an aggregated value (like average temperature), this grouping allows Grafana to identify distinct time series based on the combination of all dimensions, such as '{Location=LGA,Sensor=A}'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries-dimensions/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGROUP BY BUCKET(StartTime, 1h), Location, Sensor\n```\n\n----------------------------------------\n\nTITLE: Provisioning Graphite Data Source in Grafana using YAML\nDESCRIPTION: Example YAML configuration for provisioning a Graphite data source in Grafana. This configuration specifies the data source name, type, access method, URL, and Graphite version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Graphite\n    type: graphite\n    access: proxy\n    url: http://localhost:8080\n    jsonData:\n      graphiteVersion: '1.1'\n```\n\n----------------------------------------\n\nTITLE: Resetting Admin Password with Explicit Homepath (Bash)\nDESCRIPTION: Corrects a potential error when resetting the admin password by explicitly providing the Grafana homepath using the '--homepath' global option. This command resets the password for the default admin user (ID 1) or a specified user ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --homepath \\\"/usr/share/grafana\\\" admin reset-admin-password <new password>\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Service Status with systemd (Linux)\nDESCRIPTION: Verifies the current status of the Grafana server service using systemd. Useful for confirming if the service started correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status grafana-server\n```\n\n----------------------------------------\n\nTITLE: Using Global Regex Patterns in Rename Transformation (Regex)\nDESCRIPTION: This example demonstrates the updated format for the \"rename by regex\" transformation in Grafana 9.0, which now supports global patterns using the `/.../g` syntax. This allows replacing all occurrences of a pattern within a string, potentially changing behavior from previous versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_4\n\nLANGUAGE: regex\nCODE:\n```\n/<stringToReplace>/g\n```\n\n----------------------------------------\n\nTITLE: Correlation Update Response in Grafana HTTP API\nDESCRIPTION: HTTP response returned when a correlation is successfully updated. The response includes the complete updated correlation details.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"message\": \"Correlation updated\",\n  \"result\": {\n    \"description\": \"Logs to Traces\",\n    \"label\": \"My Label\",\n    \"sourceUID\": \"uyBf2637k\",\n    \"targetUID\": \"PDDA8E780A17E7EF1\",\n    \"uid\": \"J6gn7d31L\",\n    \"type\": \"query\",\n    \"config\": {\n\t\t\t\"field\": \"message\",\n\t\t\t\"target\": {}\n\t\t}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alertmanager Contact Point - YAML\nDESCRIPTION: Configures a Prometheus Alertmanager contact point for Grafana alert notifications. Requires the 'url' field for the Alertmanager endpoint, and supports optional basic authentication. Inputs are the Alertmanager URL and optional basicAuth credentials. Outputs are configured Alertmanager contact point for Grafana's alerting system. No external dependencies beyond the Grafana provisioning system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntype: prometheus-alertmanager\\nsettings:\\n  # <string, required>\\n  url: http://localhost:9093\\n  # <string>\\n  basicAuthUser: abc\\n  # <string>\\n  basicAuthPassword: abc123\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Team Role Assignments - Grafana Access Control HTTP API - HTTP\nDESCRIPTION: Demonstrates a GET request to list direct role assignments for a team in Grafana via its access control API. The URL path contains the team ID as a parameter. The Accept header signals request of a JSON response. Requires 'teams.roles:read' permission scoped to the team. Returns a list of roles assigned to the specified team in JSON format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/teams/1/roles\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Example Grafana CPU Alert Notification for US-East Region (JSON)\nDESCRIPTION: This JSON object demonstrates a notification payload sent by Grafana Alerting to the 'US-East-Alerts' receiver. It contains a firing alert specifically for 'High CPU usage' originating from the 'us-east' region, illustrating how notification policies route alerts based on region labels to different receivers. The '...' indicates that the full alert details are truncated.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"US-East-Alerts\",\n  \"status\": \"firing\",\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High CPU usage - Multi-region\",\n        \"grafana_folder\": \"Multi-region alerts\",\n        \"instance\": \"server-03\",\n        \"region\": \"us-east\",\n        \"service\": \"web-server-2\"\n...}}}\n```\n\n----------------------------------------\n\nTITLE: Supported Operators in Grafana Math Expressions\nDESCRIPTION: Lists the arithmetic, relational, and logical operators supported within Grafana math expressions. These operators work differently depending on whether the operands are numbers or time series.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_2\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n// Arithmetic\n+, -, *, /, %, **\n\n// Relational\n<, >, ==, !=, >=, <=\n\n// Logical\n&&, ||, !\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations (Admin API) - HTTP\nDESCRIPTION: This HTTP GET retrieves all organizations as an admin, optionally paginated with perpage and page query parameters. Requires Basic Auth with admin credentials, targeting /api/orgs endpoint. The Content-Type and Accept headers are application/json.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /api/orgs HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Searching Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet shows a successful HTTP 200 OK response for a query history search. The JSON body includes pagination details (`totalCount`, `page`, `perPage`) and an array `queryHistory` containing the matching query entries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"result\": {\n    \"totalCount\": 150,\n    \"page\": 1,\n    \"perPage\": 100\n    \"queryHistory\":[{\n    \"uid\": \"Ahg678z\",\n    \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n    \"createdBy\": 1,\n    \"createdAt\": 1643630762,\n    \"starred\": false,\n    \"comment\": \"\",\n    \"queries\": [\n      {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PE1C5CBDA0504A6A3\"\n        }\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Port-forwarding Grafana Pod to Local Port - kubectl - Bash\nDESCRIPTION: This snippet runs port-forwarding to make the Grafana pod accessible via localhost:3000 on the user's machine. It uses the previously exported `POD_NAME` variable and `kubectl --namespace ... port-forward`. Required for accessing Grafana’s web UI when a LoadBalancer is not used.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace monitoring port-forward $POD_NAME 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Footer Links in grafana.ini\nDESCRIPTION: This configuration snippet demonstrates how to replace the default footer links in Grafana with custom links. It shows how to define multiple custom links with specific text and URLs that will appear in the footer.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nfooter_links = support guides extracustom\nfooter_links_support_text = Support\nfooter_links_support_url = http://your.support.site\nfooter_links_guides_text = Guides\nfooter_links_guides_url = http://your.guides.site\nfooter_links_extracustom_text = Custom text\nfooter_links_extracustom_url = http://your.custom.site\n```\n\n----------------------------------------\n\nTITLE: Setting Renderer Security Token - JSON\nDESCRIPTION: Configures the 'authToken' in the renderer's JSON configuration file to limit access to the rendered images. This setting must match the token specified in the Grafana configuration file when running in remote rendering mode. The example sets the token to '-'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"security\": {\n      \"authToken\": \"-\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Time Objects and Formatting in Grafana Go Templates\nDESCRIPTION: This snippet presents the use of Go's time.Time object in Grafana templates, allowing field access and invocation of native time methods (Add, AddDate, Year, Month, Day, Hour, Minute, Second, YearDay, Weekday, Unix, UnixMilli) within a range statement over '.Alerts'. Requires .Alerts as a list of alert objects, each with .StartsAt (a Time object). Outputs are formatted date/time strings and components per alert for rich notification rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ range .Alerts }}\n    {{ .StartsAt  }}\n    {{ .StartsAt.Add 6000000000000  }}\n    {{ .StartsAt.Add -6000000000000  }}\n    {{ .StartsAt.AddDate 1 0 0  }}\n    {{ .StartsAt.Year   }}/{{ .StartsAt.Month   }}/{{ .StartsAt.Day   }}\n    {{ .StartsAt.Hour   }}:{{ .StartsAt.Minute   }}:{{ .StartsAt.Second   }}\n    {{ .StartsAt.YearDay   }}-{{ .StartsAt.Weekday   }}\n    {{ .StartsAt.Unix }} {{ .StartsAt.UnixMilli }}\n  {{ end}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Example Output of 'kubectl get all'\nDESCRIPTION: Shows representative output from the `kubectl get all --namespace=my-grafana` command after a successful deployment. This output includes the status of the Grafana pod(s), the LoadBalancer service details (including ClusterIP and potentially an ExternalIP), the deployment status, and the associated ReplicaSet information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNAME                           READY   STATUS    RESTARTS   AGE\npod/grafana-69946c9bd6-kwjb6   1/1     Running   0          7m27s\n\nNAME              TYPE           CLUSTER-IP     EXTERNAL-IP      PORT(S)          AGE\nservice/grafana   LoadBalancer   10.5.243.226   1.120.130.330   3000:31171/TCP   7m27s\n\nNAME                      READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/grafana   1/1     1            1           7m29s\n\nNAME                                 DESIRED   CURRENT   READY   AGE\nreplicaset.apps/grafana-69946c9bd6   1         1         1       7m30s\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Branding Options in grafana.ini\nDESCRIPTION: This configuration snippet shows the white_labeling section of grafana.ini that controls custom branding options in Grafana Enterprise. It includes settings for application title, login page elements, logos, background images, and options to hide the Grafana edition.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Enterprise only\n[white_labeling]\n# Set to your company name to override application title\n;app_title =\n\n# Set to main title on the login page (Will not appear if a login logo is set)\n;login_title =\n\n# Set to login subtitle (Will not appear if a login logo is set)\n;login_subtitle =\n\n# Set to complete URL to override login logo\n;login_logo =\n\n# Set to complete CSS background expression to override login background\n# example: login_background = url(http://www.bhmpics.com/wallpapers/starfield-1920x1080.jpg)\n;login_background =\n\n# Set to complete CSS background expression to override login box background\n;login_box_background =\n\n# Set to complete URL to override menu logo\n;menu_logo =\n\n# Set to complete URL to override fav icon (icon shown in browser tab)\n;fav_icon =\n\n# Set to complete URL to override apple/ios icon\n;apple_touch_icon =\n\n# Set to complete URL to override loading logo\n;loading_logo =\n\n# Set to `true` to remove the Grafana edition from appearing in the footer\n;hide_edition =\n```\n\n----------------------------------------\n\nTITLE: Defining Organization User Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of users within an organization. `users:*` matches any user in the organization, while `users:id:1` targets the specific user with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nusers:*\n```\n\nLANGUAGE: text\nCODE:\n```\nusers:id:*\n```\n\n----------------------------------------\n\nTITLE: Installing the Latest Version of a Plugin (Bash)\nDESCRIPTION: Command to install the latest available version of a specific Grafana plugin identified by its '<plugin-id>'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Data Source in Grafana using YAML\nDESCRIPTION: This YAML configuration sets up a PostgreSQL data source in Grafana. It specifies connection details, credentials, SSL mode, connection pool settings, and PostgreSQL version. The configuration also includes options for TimescaleDB support and connection lifecycle management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/configure/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Postgres\n    type: postgres\n    url: localhost:5432\n    user: grafana\n    secureJsonData:\n      password: 'Password!'\n    jsonData:\n      database: grafana\n      sslmode: 'disable' # disable/require/verify-ca/verify-full\n      maxOpenConns: 100\n      maxIdleConns: 100\n      maxIdleConnsAuto: true\n      connMaxLifetime: 14400\n      postgresVersion: 903 # 903=9.3, 904=9.4, 905=9.5, 906=9.6, 1000=10\n      timescaledb: false\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Height - Bash\nDESCRIPTION: Sets RENDERING_VIEWPORT_HEIGHT to define the default viewport height in pixels for the render browser. Used when height is unspecified in rendering requests. Requires v3.9.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_HEIGHT=500\n```\n\n----------------------------------------\n\nTITLE: Deleting a User from an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP DELETE request to remove a specific user (identified by `:userId`) from a particular Grafana organization (identified by `:orgId`). This operation requires Basic Authentication and the `org.users:remove` permission with the `users:*` scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/orgs/1/users/2 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Assigning Role to Team - Grafana Access Control - JSON\nDESCRIPTION: This response demonstrates success when assigning a role to a team. HTTP/1.1 200 OK is returned with a JSON body stating the outcome message. Indicates successful assignment of the requested role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Role added to the team.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Dashboard by UID in HTTP/JSON\nDESCRIPTION: Example of deleting a dashboard using its unique identifier (UID). This request sends a DELETE to /api/dashboards/uid/:uid endpoint with the dashboard's UID. This permanently removes the dashboard from Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/dashboards/uid/cIBgcSjkk HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Options in RadioButtonGroup (JSX)\nDESCRIPTION: Shows how to pass disabledOptions prop to RadioButtonGroup, disabling specific choices by their value using strict equality check. Assumes @grafana/ui is installed. Options list and disabledOptions (array of values to disable) are required. The rendered UI will have some items unselectable based on disabledOptions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioButtonList } from '@grafana/ui';\n\nconst options = [\n  { label: 'Prometheus', value: 'prometheus' },\n  { label: 'Graphite', value: 'graphite' },\n  { label: 'Elastic', value: 'elastic' },\n  { label: 'InfluxDB', value: 'influx' },\n];\n\nconst disabledOptions = ['prometheus', 'elastic'];\n\n\n<RadioButtonGroup\n  options={options}\n  disabledOptions={disabledOptions}\n  value={...}\n  onChange={...}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Dropdown Menu Using Grafana UI in TypeScript (React)\nDESCRIPTION: This snippet demonstrates how to create a dropdown menu using the Dropdown, Menu, and Button components from @grafana/ui in a React (TypeScript) environment. It shows how to define a Menu with menu items (labeled 'Google' and 'Delete'—the latter styled as destructive with an icon), insert a divider, and wrap the menu in a Dropdown triggered by a button. Prerequisites include installing @grafana/ui and ensuring the Menu component supports Item, Divider, and icon/props as specified. The Dropdown expects an overlay prop containing a JSX menu definition, and the Button provides a visual trigger. The code is intended for embedding in a Storybook or React app and requires proper React and TypeScript configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Menu/Menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Dropdown, Menu, Button } from '@grafana/ui';\nconst menu = (\n  <Menu>\n    <Menu.Item label=\"Google\" />\n    <Menu.Divider />\n    <Menu.Item label=\"Delete\" icon=\"trash-alt\" destructive />\n  </Menu>\n);\nreturn (\n  <Dropdown overlay={menu}>\n    <Button icon=\"bars\" />\n  </Dropdown>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Router and Service for Grafana (Domain or Subdomain) - YAML\nDESCRIPTION: This YAML snippet configures Traefik labels for routing traffic to Grafana based on the host/domain using the Docker provider. Set traefik.http.routers.grafana.rule to specify the host, and set the backend service port. Attach these labels to your Grafana container in Docker Compose or similar. Traefik is required for this configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\\n  traefik.http.routers.grafana.rule: Host(`grafana.example.com`)\\n  traefik.http.services.grafana.loadbalancer.server.port: 3000\n```\n\n----------------------------------------\n\nTITLE: Running Drone Configuration Generation Command in Make\nDESCRIPTION: Executes the 'make drone' command to build the .drone.yml file after making changes to the Starlark files. This step is crucial in the Drone development process.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/drone-pipeline.md#2025-04-23_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake drone\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a subset of Grafana settings. `settings:*` matches all settings, `settings:auth.saml:*` targets all SAML settings, and `settings:auth.saml:enabled` targets the specific 'enabled' property within SAML settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nsettings:*\n```\n\n----------------------------------------\n\nTITLE: Querying a Data Source in HTTP\nDESCRIPTION: Sends a POST request to query a data source with a backend implementation. This example uses the Test data source to generate CSV metric values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/ds/query HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n   \"queries\":[\n      {\n         \"refId\":\"A\",\n         \"scenarioId\":\"csv_metric_values\",\n         \"datasource\":{\n            \"uid\":\"PD8C576611E62080A\"\n         },\n         \"format\": \"table\",\n         \"maxDataPoints\":1848,\n         \"intervalMs\":200,\n         \"stringInput\":\"1,20,90,30,5,0\"\n      }\n   ],\n   \"from\":\"now-5m\",\n   \"to\":\"now\"\n}\n```\n\n----------------------------------------\n\nTITLE: Printing All Labels from Classic Alert Conditions in Grafana (Go Template)\nDESCRIPTION: This Go template snippet iterates over the $values map from a Grafana legacy alert classic condition and prints the labels of all firing time series. It uses the match function to filter keys (e.g., B0, B1, etc.) corresponding to the classic condition reference ID. Requires Grafana's alert templating context and that $values is populated by the alerting engine. Outputs lines such as 'B0: instance=server1'. Replace 'B' in the regular expression with your actual condition Ref ID if different.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n{{ range $k, $v := $values -}}\\n{{ if (match \"B[0-9]+\" $k) -}}\\n{{ $k }}: {{ $v.Labels }}{{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring nginx for Grafana on Sub Path - Nginx\nDESCRIPTION: Shows how to set up nginx to serve Grafana from a sub path (e.g., /grafana/), including proxied WebSocket support. Modifies the location blocks, root directory, and upstream definition, mapping traffic with the sub path to the backend. It's important to pair this with a rewrite rule if using path variables. Reload nginx after changes. Designed for situations when Grafana should not be at the web server root.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n# This is required to proxy Grafana Live WebSocket connections.\\nmap $http_upgrade $connection_upgrade {\\n  default upgrade;\\n  '' close;\\n}\\n\\nupstream grafana {\\n  server localhost:3000;\\n}\\n\\nserver {\\n  listen 80;\\n  root /usr/share/nginx/www;\\n  index index.html index.htm;\\n\\n  location /grafana/ {\\n    proxy_set_header Host $host;\\n    proxy_pass http://grafana;\\n  }\\n\\n  # Proxy Grafana Live WebSocket connections.\\n  location /grafana/api/live/ {\\n    proxy_http_version 1.1;\\n    proxy_set_header Upgrade $http_upgrade;\\n    proxy_set_header Connection $connection_upgrade;\\n    proxy_set_header Host $host;\\n    proxy_pass http://grafana;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Target Query Model Structure in JSON\nDESCRIPTION: Illustrates an example JSON structure representing a target query model for a Grafana data source. This structure, often found using Explore's query inspector, is used within the 'target' field of the correlation provisioning configuration. Runtime properties like 'refId' and 'datasource' should be omitted.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/create-a-new-correlation/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scenario_id\": \"random_walk\",\n  \"alias\": \"app\",\n  \"seriesCount: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Team Sync Group Attribute\nDESCRIPTION: This INI configuration snippet, within the `[auth.saml]` section, sets the `assertion_attribute_groups` option to 'groups'. This tells Grafana to look for an attribute named 'groups' in the SAML assertion to extract group memberships for Team Sync.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\n# ...\nassertion_attribute_groups = groups\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Container with Docker Compose (Bash)\nDESCRIPTION: Command to start the Grafana container(s) defined in the `docker-compose.yaml` file. The `-d` flag runs the containers in detached mode (in the background). This command is used after creating or modifying the `docker-compose.yaml` file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# start the grafana container\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Hubot External Scripts (JSON)\nDESCRIPTION: This JSON array represents the list of external scripts that Hubot should load upon startup. By adding `\"hubot-grafana\"` to this array within the `external-scripts.json` file, the newly installed Grafana plugin is activated and made available for use within Hubot. Other plugins like `hubot-pugme` and `hubot-shipit` might already be present.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"hubot-pugme\", \"hubot-shipit\", \"hubot-grafana\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring Storybook Metadata for CodeEditor Component - MDX\nDESCRIPTION: This snippet defines the metadata for the Storybook MDX page, setting the title and associating the CodeEditor component with the story. It requires the CodeEditor component and Meta from Storybook to be available in scope. This configuration enables Storybook to render the documentation for the component under the specified title, aiding discoverability and navigation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|CodeEditor\" component={CodeEditor} />\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Grafana Package Channel in Plugin Dependencies\nDESCRIPTION: Example snippet for a plugin's `package.json` file demonstrating how to depend on a Grafana package published to a local registry using a specific distribution channel tag like `dev` or `canary`, instead of a fixed version number. This is useful for testing local package changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// plugin's package.json\n\ndependencies: {\n  //... other dependencies\n  \"@grafana/data\": \"dev\" // or canary\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Box Component in MDX (JSX)\nDESCRIPTION: Defines the Storybook metadata for the Box component, specifying the title and component reference for story organization. Dependencies include Storybook's MDX/JSX integration and the Box React component. This configuration enables grouping and viewing of Box stories within the Storybook interface under the 'MDX|Box' section.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"MDX|Box\" component={Box} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Enterprise AWS License Validation via Environment Variable on ECS\nDESCRIPTION: Sets the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws` within an AWS ECS task definition. This instructs Grafana Enterprise (v8.3.0+) to use AWS License Manager for license validation instead of Grafana Labs servers, requiring an appropriate IAM task role with specific permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-ecs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGF_ENTERPRISE_LICENSE_VALIDATION_TYPE=aws\n```\n\n----------------------------------------\n\nTITLE: Example Response for Adding a User to an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) after adding a user to a Grafana organization. The JSON response body confirms the action and includes the `userId` of the added user.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User added to organization\", \"userId\": 1}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Job for Scraping Grafana Backend Plugin Metrics - YAML\nDESCRIPTION: This snippet shows how to configure Prometheus to scrape metrics from a Grafana backend plugin, using a custom metrics_path under /metrics/plugins/. Placed in prometheus.yml, it specifies job_name, intervals, the custom metrics_path, and static target settings. Inputs: job_name (plugin name or custom), scrape_interval, scrape_timeout, metrics_path, targets. Outputs: Prometheus collects plugin-specific metrics from designated Grafana endpoints. Ensure the plugin is enabled in Grafana and available at the noted endpoint before use.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'grafana_github_datasource'\\n\\n   scrape_interval: 15s\\n   scrape_timeout: 5s\\n   metrics_path: /metrics/plugins/grafana-test-datasource\\n\\n   static_configs:\\n     - targets: ['localhost:3000']\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana systemd Unit File - Shell\nDESCRIPTION: Creates an empty systemd service file for Grafana server. Prerequisite: Systemd-enabled system and root permissions. Output: Placeholder file at /etc/systemd/system/grafana-server.service, ready for configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/systemd/system/grafana-server.service\n```\n\n----------------------------------------\n\nTITLE: Triggering a Success Toast Notification via AppEvents in JavaScript/JSX\nDESCRIPTION: This snippet shows the standard method for triggering a Toast notification in Grafana. It uses the `getAppEvents` function from `@grafana/runtime` to access the application's event bus and then publishes an event using `appEvents.publish`. The event type (`AppEvents.alertSuccess.name`) determines the toast style (success in this case), and the `payload` array contains the message strings to be displayed. This approach is preferred over directly rendering the Alert component for toasts.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Alert/Alert.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nconst appEvents = getAppEvents();\nappEvents.publish({\n  type: AppEvents.alertSuccess.name,\n  payload: [text + ': ' + resp.status + ' (' + resp.statusText + ')'],\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Iframe Embed for Grafana Panel\nDESCRIPTION: HTML code snippet for embedding a Grafana panel snapshot on an external website using an iframe. The example includes width, height, and frameborder settings along with a URL pointing to the panel snapshot.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/share-dashboards-panels/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://snapshots.raintank.io/dashboard-solo/snapshot/y7zwi2bZ7FcoTlB93WN7yWO4aMiz3pZb?from=1493369923321&to=1493377123321&panelId=4\"\n  width=\"650\"\n  height=\"300\"\n  frameborder=\"0\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Security Context for EKS IAM Roles\nDESCRIPTION: YAML configuration for a Kubernetes security context that grants the Grafana user (ID 472) permission to access projected credentials. This is required when using EKS IAM roles for service accounts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  fsGroup: 472\n  runAsUser: 472\n  runAsGroup: 472\n```\n\n----------------------------------------\n\nTITLE: Starring a Dashboard for Actual User via Grafana API (HTTP)\nDESCRIPTION: Stars a specific dashboard (identified by its unique identifier `:uid`) for the currently authenticated user using a POST request to `/api/user/stars/dashboard/uid/:uid`. Requires authentication (Bearer Token shown). Returns a JSON success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/user/stars/dashboard/uid/BqokFhx7z HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Dashboard starred!\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Mixin Dependencies with Go - Bash\nDESCRIPTION: This Bash snippet installs the mixtool and jsonnetfmt tool binaries required for building and formatting Grafana Mixin configurations, using the Go tooling system. It relies on having a functional Go development environment and uses the 'go get' command to fetch and install the two required command-line tools. The primary parameters are the package import paths; upon completion, the corresponding executables will be available in the $GOPATH/bin or GOBIN directory. Limitations include dependency on Go being properly installed and $GOPATH/bin or GOBIN being in the system PATH.\nSOURCE: https://github.com/grafana/grafana/blob/main/grafana-mixin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/monitoring-mixins/mixtool/cmd/mixtool\n$ go get github.com/google/go-jsonnet/cmd/jsonnetfmt\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Enterprise via DNF in Bash\nDESCRIPTION: Installs the Grafana Enterprise edition using the `dnf` package manager. Requires `sudo` privileges and relies on the pre-configured Grafana repository. This installs the enterprise version, which includes additional features available with a license.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana on macOS via Homebrew\nDESCRIPTION: Updates the Homebrew package list and then installs the latest stable version of Grafana. This command assumes Homebrew is already installed on the macOS system. The installation paths differ for Intel (`/usr/local/Cellar`) and Apple Silicon (`/opt/homebrew/Cellar`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install grafana\n```\n\n----------------------------------------\n\nTITLE: MySQL Time Filter Macro Implementation\nDESCRIPTION: Demonstrates the usage of Grafana's built-in time filter macro with MySQL date columns for time-based filtering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n$__timeFilter\n```\n\n----------------------------------------\n\nTITLE: Provisioning InfluxDB 3.x Data Source with SQL in Grafana\nDESCRIPTION: This YAML snippet illustrates how to provision an InfluxDB 3.x data source using SQL in Grafana. It specifies the version, database name, HTTP mode, and includes a secure API token for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: InfluxDB_v3_InfluxQL\n    type: influxdb\n    access: proxy\n    url: http://localhost:8086\n    jsonData:\n      version: SQL\n      dbName: site\n      httpMode: POST\n      insecureGrpc: false\n    secureJsonData:\n      token: '<api-token>'\n```\n\n----------------------------------------\n\nTITLE: Setting Team Role Assignments (Bulk) - Grafana Access Control HTTP API - HTTP\nDESCRIPTION: Illustrates a PUT request to update a team's entire set of assigned roles in a single operation. The API call's JSON body includes a 'roleUids' array specifying the desired role UIDs for assignment. Optional parameters include updating hidden role assignments. Requires both 'teams.roles:add' and 'teams.roles:remove' with delegate permission scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/access-control/teams/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"roleUids\": [\n        \"ZiHQJq5nk\",\n        \"GzNQ1357k\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Grafana CLI Version (Bash)\nDESCRIPTION: An example command using the '-v' flag to print the currently installed version of the Grafana CLI executable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli -v\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Database Secrets with CLI in Grafana Enterprise (Shell)\nDESCRIPTION: This shell command uses the Grafana CLI to re-encrypt all secrets in the database with the new encryption key. It is typically run from the root directory of a Grafana Enterprise installation after configuring a new provider. Re-encryption updates previous secrets to use the new Azure Key Vault provider, ensuring consistent security.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-azure-key-vault/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrafana cli admin secrets-migration re-encrypt\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query for Template Variable\nDESCRIPTION: A simple SQL query to retrieve hostname values from a host table for use as a template variable dropdown in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM host\n```\n\n----------------------------------------\n\nTITLE: Setting Service Account Role Assignments (HTTP PUT)\nDESCRIPTION: Sends a PUT request to update the service account's role assignments to match the provided set of UIDs. It includes the required permissions and JSON body schema for the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/access-control/users/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"global\": false,\n    \"roleUids\": [\n        \"ZiHQJq5nk\",\n        \"GzNQ1357k\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Auth Tokens for Actual User via Grafana API (HTTP)\nDESCRIPTION: Retrieves a list of active and inactive authentication tokens (representing logged-in devices/sessions) for the currently authenticated user via a GET request to `/api/user/auth-tokens`. Requires authentication (Bearer Token shown). The response is a JSON array detailing each token's properties like ID, activity status, client IP, browser, OS, device type, and creation/last seen timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /api/user/auth-tokens HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\": 361,\n    \"isActive\": true,\n    \"clientIp\": \"127.0.0.1\",\n    \"browser\": \"Chrome\",\n    \"browserVersion\": \"72.0\",\n    \"os\": \"Linux\",\n    \"osVersion\": \"\",\n    \"device\": \"Other\",\n    \"createdAt\": \"2019-03-05T21:22:54+01:00\",\n    \"seenAt\": \"2019-03-06T19:41:06+01:00\"\n  },\n  {\n    \"id\": 364,\n    \"isActive\": false,\n    \"clientIp\": \"127.0.0.1\",\n    \"browser\": \"Mobile Safari\",\n    \"browserVersion\": \"11.0\",\n    \"os\": \"iOS\",\n    \"osVersion\": \"11.0\",\n    \"device\": \"iPhone\",\n    \"createdAt\": \"2019-03-06T19:41:19+01:00\",\n    \"seenAt\": \"2019-03-06T19:41:21+01:00\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Correlations in Grafana HTTP API\nDESCRIPTION: HTTP request for updating an existing correlation's properties. The request allows updating the label and description of the correlation identified by sourceUID and correlationUID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n{\n\t\"label\": \"My Label\",\n\t\"description\": \"Logs to Traces\",\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element Connections Request Example (HTTP)\nDESCRIPTION: Example HTTP GET request to fetch the connections (e.g., dashboards where the element is used) for a specific library element identified by its UID (`V--OrYHnz`) using the `/api/library-elements/:uid/connections` endpoint. Requires authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/library-elements/V--OrYHnz/connections HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level - JSON\nDESCRIPTION: Configures logging parameters for the rendering service using JSON. The level determines verbosity, with options such as 'debug'. The console subkeys control whether logs are in JSON format and if colored output is enabled. Used in configuration files for persistent setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"logging\": {\n      \"level\": \"debug\",\n      \"console\": {\n        \"json\": false,\n        \"colorize\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Error Response for Invalid Scope in Grafana Role Creation\nDESCRIPTION: Shows the HTTP 400 Bad Request response received when attempting to create a Grafana role with an invalid permission scope (e.g., `serviceaccounts:serviceaccount6`) for the specified action (`serviceaccounts.permissions:read`). The JSON body details the validation error, explaining why the scope is invalid and listing expected scope prefixes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n{\n\t\"extra\": {\n\t\t\"validationError\": \"unknown scope: serviceaccounts:serviceaccount6 for action: serviceaccounts.permissions:read provided, expected prefixes are [* serviceaccounts:* serviceaccounts:id:*]\"\n\t},\n\t\"message\": \"Invalid scope\",\n\t\"messageId\": \"accesscontrol.permission-invalid-scope\",\n\t\"statusCode\": 400,\n\t\"traceID\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule for Specific Namespace (Task 1)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 1. This rule grants access only to logs or metrics data points that have the label `namespace` with the value `prod`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_4\n\nLANGUAGE: logql\nCODE:\n```\n{namespace=\"prod\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Grafana Playlists via API in Shell\nDESCRIPTION: This shell script iterates through all JSON files within the `playlists` directory (created by the export script). For each file (`$playlist`), it uses `curl` to send an HTTP POST request to the `/api/playlists` endpoint of the destination Grafana Cloud instance (`$GRAFANA_CLOUD_INSTANCE_URL`). The request includes the playlist data from the file (`-d @$playlist`), sets the `Content-Type` header to `application/json`, and authenticates using the destination Bearer token (`$GRAFANA_DEST_TOKEN`). Output from `curl` is suppressed (`> /dev/null`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nfor playlist in playlists/*; do\n  curl -XPOST \"${GRAFANA_CLOUD_INSTANCE_URL}/api/playlists\" \\\n    -H \"Authorization: Bearer $GRAFANA_DEST_TOKEN\" \\\n    -H \"Content-Type: application/json\" \\\n    -d @$playlist > /dev/null;\ndone\n```\n\n----------------------------------------\n\nTITLE: Resulting Plaintext Output of Rendered Notification Template - Plaintext\nDESCRIPTION: This snippet shows a sample output generated after rendering the notification template for firing and resolved alerts. It demonstrates the aggregation and summarization of multiple alert statuses and their respective summaries, making it easier for recipients to understand the current state of monitored systems. The example output is meant to represent the type of alert notification a contact point (e.g., email or Slack) would receive after templating.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1 firing alert(s)\n- The database server db1 has exceeded 75% of available disk space. Disk space used is 76%, please resize the disk size within the next 24 hours.\n\n1 resolved alert(s)\n- The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Maintaining Go Module Files\nDESCRIPTION: Commands for tidying up Go module dependency files and updating the workspace. These commands help maintain clean dependency definitions in the project.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake update-workspace\n```\n\n----------------------------------------\n\nTITLE: Updating a Data Source by ID (Deprecated) via Grafana API - HTTP\nDESCRIPTION: This PUT request updates an existing data source by its numeric ID (deprecated API), sending the full data source configuration with optional secureJsonData containing sensitive fields such as basicAuthPassword. Requires a bearer authorization token and a full or partial JSON body specifying updated parameters. The response echoes back the updated data source configuration and confirms any secure fields. Use with caution; this method is deprecated in Grafana v9.0.0 and later.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/datasources/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"id\":1,\\n  \"orgId\":1,\\n  \"name\":\"test_datasource\",\\n  \"type\":\"graphite\",\\n  \"access\":\"proxy\",\\n  \"url\":\"http://mydatasource.com\",\\n  \"password\":\"\",\\n  \"user\":\"\",\\n  \"database\":\"\",\\n  \"basicAuth\":true,\\n  \"basicAuthUser\":\"basicuser\",\\n  \"secureJsonData\": {\\n    \"basicAuthPassword\": \"basicpassword\"\\n  },\\n  \"isDefault\":false,\\n  \"jsonData\":null\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n  \"datasource\": {\\n    \"id\": 1,\\n    \"uid\": \"kLtEtcRGk\",\\n    \"orgId\": 1,\\n    \"name\": \"test_datasource\",\\n    \"type\": \"graphite\",\\n    \"typeLogoUrl\": \"\",\\n    \"access\": \"proxy\",\\n    \"url\": \"http://mydatasource.com\",\\n    \"password\": \"\",\\n    \"user\": \"\",\\n    \"database\": \"\",\\n    \"basicAuth\": true,\\n    \"basicAuthUser\": \"basicuser\",\\n    \"basicAuthPassword\": \"\",\\n    \"withCredentials\": false,\\n    \"isDefault\": false,\\n    \"jsonData\": {},\\n    \"secureJsonFields\": {\\n      \"basicAuthPassword\": true\\n    },\\n    \"version\": 1,\\n    \"readOnly\": false\\n  },\\n  \"id\": 102,\\n  \"message\": \"Datasource updated\",\\n  \"name\": \"test_datasource\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy (CSP) in Grafana using TOML\nDESCRIPTION: Enables and configures the Content Security Policy (CSP) within the `[security]` section of `grafana.ini` using the `content_security_policy` flag and `content_security_policy_template`. CSP helps prevent Cross-Site Scripting (XSS) attacks by defining rules for resource loading in the browser. The provided template includes directives for scripts, objects, fonts, styles, images, base URI, connections, manifests, media, and forms, utilizing variables like `$NONCE` and `$ROOT_PATH`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[security]\n# Enable adding the Content-Security-Policy header to your requests.\n# CSP enables you to control the resources the user agent can load and helps prevent XSS attacks.\ncontent_security_policy = true\n\n# Set the Content Security Policy template that is used when the Content-Security-Policy header is added to your requests.\n# $NONCE in the template includes a random nonce.\n# $ROOT_PATH is server.root_url without the protocol.\ncontent_security_policy_template = \"\"\"script-src 'self' 'unsafe-eval' 'unsafe-inline' 'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline' blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com ws://$ROOT_PATH wss://$ROOT_PATH;manifest-src 'self';media-src 'none';form-action 'self';\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Provisioning with TLS and Skip Verification in Grafana\nDESCRIPTION: This YAML configuration sets up a MySQL datasource in Grafana using TLS but skipping certificate verification. It includes TLS settings with the skip verification flag, along with the basic connection details and pool settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/configuration/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    user: grafana\n    jsonData:\n      tlsAuth: true\n      tlsSkipVerify: true\n      database: grafana\n      maxOpenConns: 100\n      maxIdleConns: 100\n      maxIdleConnsAuto: true\n      connMaxLifetime: 14400\n    secureJsonData:\n      password: ${GRAFANA_MYSQL_PASSWORD}\n      tlsClientCert: ${GRAFANA_TLS_CLIENT_CERT}\n      tlsCACert: ${GRAFANA_TLS_CA_CERT}\n```\n\n----------------------------------------\n\nTITLE: Defining RelativeTimeRange Structure in Go\nDESCRIPTION: Defines the RelativeTimeRange structure with 'from' and 'to' properties of Duration type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_46\n\nLANGUAGE: go\nCODE:\n```\n**Properties**\n\n{{% responsive-table %}}\n\n| Name   | Type                  | Go type  | Required | Default | Description | Example |\n| ------ | --------------------- | -------- | :------: | ------- | ----------- | ------- |\n| `from` | [Duration](#duration) | Duration |          |         |             |         |\n| `to`   | [Duration](#duration) | Duration |          |         |             |         |\n\n{{% /responsive-table %}}\n```\n\n----------------------------------------\n\nTITLE: Using InlineLabel with Tooltip in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to implement the InlineLabel component from the current module, wrapping child content and providing both width and tooltip props. The 'width' parameter dictates the label's width style, while 'tooltip' displays a help icon with the given string on hover. The component is best used with form inputs requiring a short, accessible label. Dependencies include the InlineLabel component and React; the snippet outputs a labeled UI element suitable for query editor forms.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineLabel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<InlineLabel width=\\\"auto\\\" tooltip=\\\"Tooltip content\\\">\\n  Simple label\\n</InlineLabel>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of Shared Dashboards with Pagination in Grafana\nDESCRIPTION: This HTTP request retrieves a paginated list of all shared dashboards, specifying the number of results per page and the page number. It requires dashboard read permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/public-dashboards?perpage=2&page=3 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:library.panels:creator\nDESCRIPTION: Specifies the `fixed:library.panels:creator` role (ID: `fixed_6eX6ItfegCIY5zLmPqTDW8ZV7KY`) within Grafana. This role grants `library.panels:create` and `folders:read` permissions, allowing users to create library panels at the root level and read folders.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:library.panels:creator\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_6eX6ItfegCIY5zLmPqTDW8ZV7KY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- library.panels:create\n- folders:read\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Manually via YUM from RPM URL in Bash\nDESCRIPTION: Installs Grafana by directly providing the URL to a specific RPM package file to the `yum install` command. The `-y` flag automatically confirms the installation. Replace `<rpm package url>` with the actual download link obtained from the Grafana download page. This method requires manual updates for new versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y <rpm package url>\n```\n\n----------------------------------------\n\nTITLE: Importing TagList Component and Stories in JavaScript\nDESCRIPTION: This snippet imports the necessary components and stories for the TagList documentation. It includes imports from Storybook blocks, the TagList component, and its associated stories.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Canvas, ArgTypes } from '@storybook/blocks';\nimport { TagList } from './TagList';\nimport * as TagListStories from './TagList.story';\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in Namespace with Kubectl (Bash)\nDESCRIPTION: Uses `kubectl get all` with the `-o wide` flag to list all major Kubernetes resources (Pods, Services, Deployments, ReplicaSets, etc.) within the specified namespace ('my-grafana'). The `-o wide` option provides additional details like node assignments and IP addresses.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all --namespace=my-grafana -o wide\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Grafana Reporting Components\nDESCRIPTION: This configuration snippet enables debug-level logging for various Grafana reporting components (rendering, API, scheduler, sender, service). Add or modify the `filters` line under the `[log]` section in the Grafana configuration file to increase log verbosity, aiding in troubleshooting reporting issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/create-reports/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[log]\nfilters = rendering:debug,report.api:debug,report.render:debug,report.scheduler:debug,report.sender:debug,report.service:debug\n```\n\n----------------------------------------\n\nTITLE: Enabling Envelope Encryption Feature Toggle (Grafana v8.5)\nDESCRIPTION: In Grafana v8.5, envelope encryption was optional. To enable it, for instance, when planning a downgrade from v9.0+, add the `envelopeEncryption` feature toggle to the `[feature_toggles]` section in the Grafana configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nenvelopeEncryption\n```\n\n----------------------------------------\n\nTITLE: Adding Age Public Key to Grafana Configuration (INI)\nDESCRIPTION: This configuration snippet demonstrates how to add a generated 'age' public key to the `public_keys` setting within the `[support_bundles]` section of the Grafana configuration file. This enables automatic encryption of newly generated support bundles using the specified key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[support_bundles]\npublic_keys = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\"\n```\n\n----------------------------------------\n\nTITLE: Updating Ownership of Grafana Directory Post-Run using Shell\nDESCRIPTION: Recursively changes the owner and group of the Grafana installation directory (`/usr/local/grafana`) to the `grafana` user and `users` group using `chown`. This command is run again after the initial manual server start (during binary installation) to ensure that newly created directories (like the data directory) also have the correct ownership. Requires `sudo` privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R grafana:users /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure Monitor with Current User Authentication in YAML\nDESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Current User authentication. Requires oauthPassThru and disableGrafanaCache to ensure proper authentication and prevent caching of unauthorized resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1 # config file version\n\ndatasources:\n  - name: Azure Monitor\n    type: grafana-azure-monitor-datasource\n    access: proxy\n    jsonData:\n      azureAuthType: currentuser\n      oauthPassThru: true\n      disableGrafanaCache: true\n      subscriptionId: <subscription-id> # Optional, default subscription\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Dependency Issue in Go with Wire\nDESCRIPTION: This snippet shows an example of a common problem in dependency injection where multiple dependencies of the same type are needed. It demonstrates why Wire does not allow multiple providers for one type in the same injection scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct { /* ... */ }\ntype Bar struct { /* ... */ }\n\nfunc newFoo1() *Foo { /* ... */ }\nfunc newFoo2() *Foo { /* ... */ }\nfunc newBar(foo1 *Foo, foo2 *Foo) *Bar { /* ... */ }\n\nfunc inject() *Bar {\n\t// ERROR! Multiple providers for *Foo.\n\twire.Build(newFoo1, newFoo2, newBar)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Dashboard Annotation Retention Period - Grafana INI\nDESCRIPTION: Specifies `[annotations.dashboard]` section, defining retention (`max_age`) for dashboard-linked annotations. The value is a duration expression such as '6h', '10d', etc. Default is 0 (keep forever). Used for cleaning up dashboard-specific annotation history.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[annotations.dashboard]\n# How long to keep dashboard annotations\nmax_age = 30d\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana on Debian using dpkg (Bash)\nDESCRIPTION: Downloads the specified Grafana Debian package using wget, ensures the 'adduser' package is installed via apt-get, and then installs the downloaded Grafana package using dpkg. This is used for manual upgrades via downloaded .deb files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget <debian package url>\nsudo apt-get install -y adduser\nsudo dpkg -i grafana_<version>_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Prometheus Job Configuration for Scraping Grafana Metrics - YAML\nDESCRIPTION: This Prometheus scrape configuration should be added to prometheus.yml to collect Grafana's exposed metrics from the /metrics endpoint. It sets the job_name, scrape_interval, scrape_timeout, and specifies the static_targets to connect to the Grafana instance, typically on localhost:3000. Inputs: job_name (string), scrape_interval (duration), scrape_timeout (duration), static_configs (target address array). Outputs: Prometheus integrates and stores Grafana metrics. This job must be activated by restarting Prometheus.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-monitoring.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'grafana_metrics'\\n\\n   scrape_interval: 15s\\n   scrape_timeout: 5s\\n\\n   static_configs:\\n     - targets: ['localhost:3000']\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign-out Redirect URL with OpenID Connect (INI)\nDESCRIPTION: This configuration example sets the `signout_redirect_url` in Grafana's INI file. It specifies the URL users are redirected to upon logout, integrating with an OpenID Connect provider's logout endpoint (`http://localhost:8087/.../logout`) and providing the required `post_logout_redirect_uri` parameter (URL-encoded `http://localhost:3000/login`) to specify where the identity provider should redirect the user back to after logout.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nsignout_redirect_url = http://localhost:8087/realms/grafana/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Executable for Remote Rendering Service - Bash\nDESCRIPTION: Sets the CHROME_BIN environment variable to define the Chrome/Chromium executable used in remote rendering mode for the image rendering service. This command should be run in the shell or included in environment configuration before launching the rendering service process, and requires that the given path points to a valid Chrome/Chromium binary on the system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCHROME_BIN=\"/usr/bin/chromium-browser\"\n```\n\n----------------------------------------\n\nTITLE: Data Source Resources Response in HTTP\nDESCRIPTION: Example response for fetching resources from a CloudWatch data source, returning a list of dimension keys.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n\t{\n\t\t\"text\": \"AutoScalingGroupName\",\n\t\t\"value\": \"AutoScalingGroupName\",\n\t\t\"label\": \"AutoScalingGroupName\"\n\t},\n\t{\n\t\t\"text\": \"ImageId\",\n\t\t\"value\": \"ImageId\",\n\t\t\"label\": \"ImageId\"\n\t},\n\t{\n\t\t\"text\": \"InstanceId\",\n\t\t\"value\": \"InstanceId\",\n\t\t\"label\": \"InstanceId\"\n\t},\n\t{\n\t\t\"text\": \"InstanceType\",\n\t\t\"value\": \"InstanceType\",\n\t\t\"label\": \"InstanceType\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Dashboard in Grafana using HTTP POST\nDESCRIPTION: This HTTP request creates a new shared dashboard for a specific dashboard UID. It includes parameters for configuration like access token, time selection, annotations, and share mode settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/uid/xCpsVuc4z/public-dashboards/ HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n    \"uid\": \"cd56d9fd-f3d4-486d-afba-a21760e2acbe\",\n    \"accessToken\": \"5c948bf96e6a4b13bd91975f9a2028b7\",\n    \"timeSelectionEnabled\": false,\n    \"isEnabled\": true,\n    \"annotationsEnabled\": false,\n    \"share\": \"public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Admin Role Permission Removal via YAML (yaml)\nDESCRIPTION: This YAML snippet declaratively modifies the 'basic:grafana_admin' role, ensuring removal of user creation and organization invite permissions. The 'permissions' list specifies actions with 'state: absent' so that they are removed, and 'from' ensures base permissions are inherited. This configuration is for use with Grafana server provisioning and is necessary for environments with strict user management policies. Inputs are the provisioning file and existing roles; outputs are reduced admin capabilities.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 2\n\nroles:\n  - name: 'basic:grafana_admin'\n    global: true\n    version: 3\n    from:\n      - name: 'basic:grafana_admin'\n        global: true\n    permissions:\n      - action: 'users:create'\n        state: 'absent'\n      - action: 'org.users:add'\n        scope: 'users:*'\n        state: 'absent'\n```\n\n----------------------------------------\n\nTITLE: Configuring and Describing RefreshPicker in Storybook MDX (MDX)\nDESCRIPTION: This MDX block configures the metadata for the Storybook entry, describes the purpose and usage of the RefreshPicker component, and embeds example usages and argument types for interactive exploration. It requires Storybook's MDX environment, the loaded RefreshPicker component and its stories, and displays both user-facing documentation and interactive components. The snippet expects RefreshPickerStories.Examples and the RefreshPicker component to be available, with outputs rendering in Storybook's UI.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RefreshPicker/RefreshPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Meta title=\"MDX|RefreshPicker\" component={RefreshPicker} />\n\n# Refresh Picker\n\nThis component is used on dashboards to refresh visualizations. Grafana does not do this automatically, queries run on their own schedule according to the panel settings. Grafana cancels any pending requests when a new refresh is triggered.\n\n**The refresh icon:** will immediately run the query and refresh the visualizations.\n\n**The down arrow:** will display a list of refresh intervals. If one of them is selected the dashboard will regularly refresh according to that schedule.\n\n<Canvas of={RefreshPickerStories.Examples} />\n\n<ArgTypes of={RefreshPicker} />\n```\n\n----------------------------------------\n\nTITLE: Provisioning Prometheus Data Source in Grafana via YAML\nDESCRIPTION: This YAML configuration demonstrates how to provision a Prometheus data source in Grafana using the provisioning system. It includes settings for access mode, HTTP method, alert management, caching level, and exemplar trace configurations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    # Access mode - proxy (server in the UI) or direct (browser in the UI).\n    url: http://localhost:9090\n    jsonData:\n      httpMethod: POST\n      manageAlerts: true\n      prometheusType: Prometheus\n      prometheusVersion: 2.44.0\n      cacheLevel: 'High'\n      disableRecordingRules: false\n      incrementalQueryOverlapWindow: 10m\n      exemplarTraceIdDestinations:\n        # Field with internal link pointing to data source in Grafana.\n        # datasourceUid value can be anything, but it should be unique across all defined data source uids.\n        - datasourceUid: my_jaeger_uid\n          name: traceID\n\n        # Field with external link.\n        - name: traceID\n          url: 'http://localhost:3000/explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Jaeger%22,%7B%22query%22:%22$${__value.raw}%22%7D%5D'\n```\n\n----------------------------------------\n\nTITLE: Querying Vehicle Velocity Data with Flux for Grafana Alerts\nDESCRIPTION: This Flux query retrieves velocity data for a 1983 DeLorean from the 'vehicles' bucket. It filters the data by measurement, vehicle type, year, and field, then aggregates it using a specified window period before yielding the mean values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_2\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"vehicles\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r[\"_measurement\"] == \"VehicleData\")\n|> filter(fn: (r) => r[\"VehicleType\"] == \"DeLorean\")\n|> filter(fn: (r) => r[\"VehicleYear\"] == \"1983\")\n|> filter(fn: (r) => r[\"_field\"] == \"velocity\")\n|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n|> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Data Source by UID via Grafana API - HTTP\nDESCRIPTION: This DELETE request deletes a data source using its unique UID identifier. Only the UID is required in the URL; no request body is needed. Authorization is enforced via a Bearer token. The JSON response confirms deletion and provides the ID of the deleted data source. This modern endpoint should be preferred over deprecated ID-based APIs for future compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/datasources/uid/kLtEtcRGk HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n    \"message\": \"Data source deleted\",\\n    \"id\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Notification Policy Tree via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to `/api/v1/provisioning/policies` to retrieve the complete notification policy tree structure used in Grafana alerting. Expects a 200 OK response containing the policy tree data, typically conforming to the 'Route' schema.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/policies\n```\n\n----------------------------------------\n\nTITLE: Filtering Fields by Name in Grafana\nDESCRIPTION: This example shows how to use the 'Filter fields by name' transformation in Grafana. It demonstrates filtering fields using a regular expression to include only production environment data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | dev-eu-west | dev-eu-north | prod-eu-west | prod-eu-north |\n| ------------------- | ----------- | ------------ | ------------ | ------------- |\n| 2023-03-04 23:56:23 | 23.5        | 24.5         | 22.2         | 20.2          |\n| 2023-03-04 23:56:23 | 23.6        | 24.4         | 22.1         | 20.1          |\n\n| Time                | prod-eu-west | prod-eu-north |\n| ------------------- | ------------ | ------------- |\n| 2023-03-04 23:56:23 | 22.2         | 20.2          |\n| 2023-03-04 23:56:23 | 22.1         | 20.1          |\n```\n\n----------------------------------------\n\nTITLE: Mounting ConfigMap and Persistent Volume in Grafana Deployment - Kubernetes YAML\nDESCRIPTION: Shows a deployment snippet for mounting both a persistent volume (for data) and a ConfigMap (for configuration) into the Grafana pod. The 'ge-config' ConfigMap is mounted at '/etc/grafana', and the corresponding volume definition references the ConfigMap. Proper mounting is required for custom configuration (such as log level) to be active.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: grafana\n  name: grafana\n# the rest of the code remains the same.\n...\n....\n...\n            requests:\n            cpu: 250m\n            memory: 750Mi\n        volumeMounts:\n          - mountPath: /var/lib/grafana\n            name: grafana-pv\n          # This is to mount the volume for the custom configuration\n          - mountPath: /etc/grafana\n            name: ge-config\n    volumes:\n      - name: grafana-pv\n        persistentVolumeClaim:\n          claimName: grafana-pvc\n      # This is to provide the reference to the ConfigMap for the volume\n      - name: ge-config\n        configMap:\n          name: ge-config\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled scrollTop with CustomScrollbar in React (TypeScript)\nDESCRIPTION: This snippet demonstrates the legacy approach to controlling scroll position in a React component using the CustomScrollbar component's scrollTop prop. It manages scroll position via local state and directly binds the value to CustomScrollbar. Required dependencies are React and the legacy CustomScrollbar component. The component accepts the scrollTop value and the children to render within it, and returns a scrollable container pinned at the provided scrollTop offset. This method was replaced in newer implementations using refs and ScrollContainer.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ScrollContainer/ScrollContainer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst [scrollTop, setScrollTop] = useState(0);\n\nreturn <CustomScrollbar scrollTop={scrollTop}>// Your amazing scrolling content</CustomScrollbar>;\n```\n\n----------------------------------------\n\nTITLE: Structuring a Signed Grafana Plugin Manifest (PGP/JSON)\nDESCRIPTION: This snippet shows the complete structure of a PGP-signed message containing a Grafana plugin manifest. It includes the standard PGP headers, the JSON manifest payload defining plugin metadata and file hashes, and the concluding PGP signature block. This format ensures the authenticity and integrity of the plugin manifest.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"willbrowne\",\n  \"signedByOrgName\": \"Will Browne\",\n  \"rootUrls\": [\n    \"http://localhost:3000/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171417046,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmMDdtkAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm577/AgkBnbauM7s/8jLrdJvr+b9B2ZK7EipwI9GFClBdGfxhBzw/QcHS\nete9DAB0j9V5ilShlg3O4gmbiFUFUKGWByHt/VUCB3TXblS7cf5kJFjB9v0r\nfv5a8NfV8x8ao/WoKTmXRUB7HSScOvb/3KmkNqzcHtZPQS1T0P6l9EUA1QT1\nl+GB3Wdq\n=pe3h\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Secrets via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Requests a global re-encryption of all stored secrets in the Grafana database using an HTTP POST API call. No request body or concrete response body is used; a successful operation delivers HTTP 204 No Content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/encryption/reencrypt-secrets HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Cleaning Cache for All Data Sources via Grafana HTTP API (HTTP)\nDESCRIPTION: This snippet demonstrates using the `POST /api/datasources/:dataSourceUID/cache/clean` endpoint to clear cached data for *all* Grafana data sources that have caching enabled. Although a specific `dataSourceUID` is provided in the path, the operation affects all sources. The response includes the configuration of the specified data source. It requires the `datasources.caching:write` permission scoped to `datasources:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources/jZrmlLCGka/cache/clean HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n   \"message\": \"Data source cache cleaned\",\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": false,\n   \"ttlQueriesMs\": 300000,\n   \"ttlResourcesMs\": 300000,\n   \"useDefaultTTL\": true,\n   \"defaultTTLMs\": 0,\n   \"created\": \"2023-04-21T11:49:22-04:00\",\n   \"updated\": \"2023-04-24T16:30:31-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Concurrent Screenshot Limits in Grafana Alerting - Plaintext\nDESCRIPTION: This snippet specifies the maximum number of screenshots that can be concurrently generated for alert notifications by adjusting the max_concurrent_screenshots setting. This is distinct from concurrent_render_request_limit and controls the concurrency for alert screenshots only. Both parameters default to 5. These limits are critical for performance tuning on large deployments and must be set according to available resources and expected alert frequency.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# The maximum number of screenshots that can be taken at the same time. This option is different from\\n# concurrent_render_request_limit as max_concurrent_screenshots sets the number of concurrent screenshots\\n# that can be taken at the same time for all firing alerts where as concurrent_render_request_limit sets\\n# the total number of concurrent screenshots across all Grafana services.\\nmax_concurrent_screenshots = 5\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Annotation by ID (HTTP Response)\nDESCRIPTION: Example successful HTTP response (Status 200 OK) after deleting an annotation via the Grafana API. The response body contains a JSON object with a confirmation message indicating successful deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"message\":\"Annotation deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Headers in Grafana Announcement Banner using Markdown\nDESCRIPTION: Shows how to add headers to announcement banner messages using Markdown syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/announcement-banner/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Header\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props with Storybook ArgTypes\nDESCRIPTION: This MDX snippet utilizes the `ArgTypes` component imported from `@storybook/blocks`. It automatically generates and displays a table of the props accepted by the `RenderUserContentAsHTML` component, including their types, descriptions, and default values, based on the component's definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={RenderUserContentAsHTML} />\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Query for Google Cloud Monitoring\nDESCRIPTION: Configuration steps for creating a Prometheus query in Google Cloud Monitoring through Grafana. Includes project selection and min step interval setting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\n// Example Min Step interval\n$__interval\n$__rate_interval\n```\n\n----------------------------------------\n\nTITLE: Aligning InlineField Components in a Row with InlineFieldRow - React JSX\nDESCRIPTION: This snippet illustrates the use of the InlineFieldRow component to arrange multiple InlineField components in a horizontally aligned row, allowing them to wrap when necessary. It requires the InlineFieldRow, InlineField, and Input components to be available in the scope, typically imported from a UI library or local project files. Each InlineField component is given a label and wraps an Input element with a placeholder; this setup is ideal for building horizontally organized forms that stack vertically when multiple InlineFieldRows are used. Inputs receive and display user input values based on the defined placeholder text.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineFieldRow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<InlineFieldRow>\\n  <InlineField label=\\\"Label Row 1\\\">\\n    <Input placeholder=\\\"Label\\\" />\\n  </InlineField>\\n  <InlineField label=\\\"Label Row 1\\\">\\n    <Input placeholder=\\\"Label\\\" />\\n  </InlineField>\\n</InlineFieldRow>\n```\n\n----------------------------------------\n\nTITLE: Exporting an Alert Rule via Grafana Provisioning API (HTTP)\nDESCRIPTION: Defines the `GET` request endpoint `/api/v1/provisioning/alert-rules/:uid/export` to export a specific Grafana alert rule in a provisioning file format. The `UID` path parameter identifies the rule. Optional query parameters include `download` (boolean, to trigger a file download) and `format` (string, specifying `yaml`, `json`, or `hcl`, defaulting to `yaml`). A successful request returns 200 OK with the `AlertingFileExport`, while 404 Not Found is returned if the rule doesn't exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /api/v1/provisioning/alert-rules/:uid/export\n```\n\n----------------------------------------\n\nTITLE: User Permissions Response\nDESCRIPTION: Example response showing permissions assigned to a user including dashboard, datasource and organization access rights.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"dashboards:read\": [\"dashboards:uid:70KrY6IVz\"],\n  \"dashboards:write\": [\"dashboards:uid:70KrY6IVz\"],\n  \"datasources.id:read\": [\"datasources:*\"],\n  \"datasources:read\": [\"datasources:*\"],\n  \"datasources:explore\": [\"\"],\n  \"datasources:query\": [\"datasources:uid:grafana\"],\n  \"datasources:read\": [\"datasources:uid:grafana\"],\n  \"orgs:read\": [\"\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading LDAP Configuration via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Illustrates an HTTP POST request to reload the LDAP configuration for Grafana. No body is sent, but Basic Authentication is mandatory. The response is a JSON message signaling successful reload of config.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/ldap/reload HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"LDAP config reloaded\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Shared Dashboard by Dashboard UID in Grafana\nDESCRIPTION: This HTTP request retrieves information about a shared dashboard using the dashboard UID. It requires read permission for the specified dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/uid/xCpsVuc4z/public-dashboards/ HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Enterprise via RPM Repository - Bash\nDESCRIPTION: Installs the Enterprise edition of Grafana using zypper from the added RPM repository. Enterprise edition includes all open source features plus optional enterprise features if licensed. Requires: zypper, sudo, repository. No mandatory parameters; outputs: grafana-enterprise package installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Setting Login Background for White Labeling in Grafana Enterprise - Bash\nDESCRIPTION: This example demonstrates how to override the Grafana login background by specifying a CSS background property using the INI configuration format. The snippet should be inserted within the [white_labeling] section of your configuration file. Ensure you specify a valid image URL and that your Grafana instance has network access to the resource. This configuration only affects the appearance of the login page.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/enterprise-configuration/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[white_labeling]\nlogin_background = url(http://www.bhmpics.com/wallpapers/starfield-1920x1080.jpg)\n```\n\n----------------------------------------\n\nTITLE: Configuring DingDing Contact Point - YAML\nDESCRIPTION: Configures a DingDing integration for alert notifications in Grafana. Requires the API endpoint via the 'url' parameter and allows setting the message type and contents using templates. Parameters include 'msgType' for message formatting and 'message' for templated content. Outputs customized DingDing alerts. Requires no dependencies beyond Grafana and a valid DingDing webhook.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntype: dingding\\nsettings:\\n  # <string, required>\\n  url: https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxx\\n  # <string> options: link, actionCard\\n  msgType: link\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a new Grafana organization using cURL\nDESCRIPTION: This command creates a new organization named 'apiorg' using the Grafana API. It requires admin credentials and returns the new organization's ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"apiorg\"}' http://admin:admin@localhost:3000/api/orgs\n```\n\n----------------------------------------\n\nTITLE: Adding a Role Assignment to a Service Account (HTTP POST)\nDESCRIPTION: Sends a POST request to assign a role to a specific service account. It includes the required permissions and JSON body schema for the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/users/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"global\": false,\n    \"roleUid\": \"XvHQJq57z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Resources in Namespace using Bash\nDESCRIPTION: Retrieves status information for all major Kubernetes resources (pods, services, deployments, replicasets, etc.) within the 'my-grafana' namespace using `kubectl get all`. This provides a comprehensive overview of the deployed Grafana components and their current state. It's particularly useful for quickly finding the pod status and the service's EXTERNAL-IP for access. Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Single User Lookup Response Example (json)\nDESCRIPTION: Exhibits a JSON response containing detailed user information, including admin and status flags, for a given user ID. Useful for UI population or auditing purposes. Ensures field presence for integrations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\": \"1\",\\n  \"email\": \"user@mygraf.com\",\\n  \"name\": \"admin\",\\n  \"login\": \"admin\",\\n  \"theme\": \"light\",\\n  \"orgId\": 1,\\n  \"isGrafanaAdmin\": true,\\n  \"isDisabled\": true,\\n  \"isExternal\": false,\\n  \"authLabels\": [],\\n  \"updatedAt\": \"2019-09-09T11:31:26+01:00\",\\n  \"createdAt\": \"2019-09-09T11:31:26+01:00\",\\n  \"avatarUrl\": \"\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Sample Log Generation Script - Bash\nDESCRIPTION: Fetches a Python script that continuously generates web server-like log lines to simulate monitoring data. This requires wget and internet access; it stores the Python script file in the current directory. The downloaded script produces timestamped HTTP request logs as standard output. It is consumed in a later step to create realistic test data for Loki ingestion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/grafana/tutorial-environment/master/app/loki/web-server-logs-simulator.py\n```\n\n----------------------------------------\n\nTITLE: Switching User Context for Specific User via Grafana API (HTTP)\nDESCRIPTION: Allows a Grafana Admin to switch the user context for a specified user (identified by `:userId`) to a target organization (identified by `:organizationId`) using a POST request to `/api/users/:userId/using/:organizationId`. Requires Basic Authentication and Grafana Admin privileges for the authenticated user. Returns a JSON success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/users/7/using/2 HTTP/1.1\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Active organization changed\"}\n```\n\n----------------------------------------\n\nTITLE: Folder Creation API Response Example\nDESCRIPTION: Example HTTP response for the POST /api/folders endpoint, returning the created folder's details including its generated URL, permissions, metadata, and version information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"uid\": \"nErXDvCkzz\",\n  \"title\": \"Department ABC\",\n  \"url\": \"/dashboards/f/nErXDvCkzz/department-abc\",\n  \"hasAcl\": false,\n  \"canSave\": true,\n  \"canEdit\": true,\n  \"canAdmin\": true,\n  \"createdBy\": \"admin\",\n  \"created\": \"2018-01-31T17:43:12+01:00\",\n  \"updatedBy\": \"admin\",\n  \"updated\": \"2018-01-31T17:43:12+01:00\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Grafana Health Status Response - JSON\nDESCRIPTION: This JSON output provides system health details from Grafana, including the running commit ID, database connection status, and current software version. The response helps administrators and external tools monitor system integrity. There are no parameters, but consumers should handle varying status values and versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"commit\\\": \\\"087143285\\\",\\n  \\\"database\\\": \\\"ok\\\",\\n  \\\"version\\\": \\\"5.1.3\\\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting Port 80 to Grafana Using iptables\nDESCRIPTION: Command to set up iptables rule that redirects incoming traffic on port 80 to Grafana's default port 3000, allowing Grafana to be accessed via the standard HTTP port without running as root.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana with Docker Volume Persistence (YAML)\nDESCRIPTION: A `docker-compose.yaml` configuration for Grafana that utilizes a named Docker volume (`grafana-storage`) for persistent data storage. The volume is mounted at `/var/lib/grafana` inside the container, ensuring Grafana data (configs, dashboards) persists even if the container is removed and recreated. Docker manages the volume's lifecycle.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  grafana:\n    image: grafana/grafana-enterprise\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - '3000:3000'\n    volumes:\n      - grafana-storage:/var/lib/grafana\nvolumes:\n  grafana-storage: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Terraform Provider - Terraform\nDESCRIPTION: This Terraform snippet shows how to set up the required provider block and configure the Grafana provider for managing resources. It requires the 'grafana/grafana' Terraform provider version 1.29.0 or higher, with authentication credentials (service account token or equivalent). Key parameters include the provider version, Grafana URL, and the authentication token. Inputs: Grafana URL and authorization token. Outputs: An initialized provider for subsequent resource provisioning. The provider must support RBAC features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n    required_providers {\n        grafana = {\n            source = \"grafana/grafana\"\n            version = \">= 1.29.0\"\n        }\n    }\n}\n\nprovider \"grafana\" {\n    url = <YOUR_GRAFANA_URL>\n    auth = <YOUR_GRAFANA_SERVICE_ACCOUNT_TOKEN>\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching Grafana Server with Zanzana Target - Bash\nDESCRIPTION: Runs the Grafana server in Zanzana server mode, utilizing the previously defined INI configuration. This command must be executed after setting up the correct configuration so that the Grafana server process boots in the right mode for standalone Zanzana. Dependency: Configured INI file, built Grafana binary. The expected input is a correct binary for the system's architecture and prior configuration. The output is a running Grafana server supporting fine-grained authorization using the Zanzana feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/darwin-arm64/grafana server target\n```\n\n----------------------------------------\n\nTITLE: Creating MQL Query in Google Cloud Monitoring\nDESCRIPTION: Steps to create a Monitoring Query Language (MQL) query in Grafana for Google Cloud Monitoring. Requires selecting metrics query type, choosing a project, and entering the MQL query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/google-cloud-monitoring/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: mql\nCODE:\n```\n{{metric.type}} - {{metric.label.instance_name}}\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana ConfigMap - kubectl Bash\nDESCRIPTION: Removes the 'ge-config' ConfigMap from the 'my-grafana' namespace, cleaning up configuration resources that override default Grafana settings. Ensure the config is not referenced in any active deployments before deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete configmap ge-config --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for LetsEncrypt Certificates in Grafana (Bash)\nDESCRIPTION: Uses `ln -s` to create symbolic links named `grafana.key` and `grafana.crt` within the `/etc/grafana/` directory. These links point to the actual private key (`privkey.pem`) and full certificate chain (`fullchain.pem`) files managed by `certbot` in `/etc/letsencrypt/live/yourdomain.com/`. This allows Grafana to use the certificates while `certbot` handles renewals. Requires `sudo` privileges and successful certificate generation by `certbot`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo ln -s /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem /etc/grafana/grafana.key\n$ sudo ln -s /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem /etc/grafana/grafana.crt\n```\n\n----------------------------------------\n\nTITLE: Defining a Panel within Grafana Dashboard JSON\nDESCRIPTION: This JSON snippet shows an example of a panel definition within the 'panels' array of a dashboard JSON. It represents a text panel, specifying its 'type', 'title', position and dimensions ('gridPos' with x, y, width w, height h coordinates), unique panel 'id', display 'mode' (markdown), and the panel's 'content'. The structure and fields can vary depending on the panel type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"panels\": [\n  {\n    \"type\": \"text\",\n    \"title\": \"Panel Title\",\n    \"gridPos\": {\n      \"x\": 0,\n      \"y\": 0,\n      \"w\": 12,\n      \"h\": 9\n    },\n    \"id\": 4,\n    \"mode\": \"markdown\",\n    \"content\": \"# title\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Dropping Outgoing Headers and Cookies in Grafana Requests using TOML\nDESCRIPTION: This snippet demonstrates how to configure Grafana to remove specific HTTP headers and cookies from outgoing data source and alerting requests. The 'header_drop_list' specifies one or more header names to be stripped, and 'cookie_drop_list' indicates cookies to remove (case sensitive) from outgoing requests. Both fields are configured under '[security.egress]' in TOML. Input values are space-separated lists, and this removes potentially sensitive information from egress requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-request-security.md#2025-04-23_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[security.egress]\n# a list of headers that will be stripped from outgoing datasource and alerting requests\nheader_drop_list = user\n# a list of cookies that will be stripped from outgoing datasource requests (case sensitive)\ncookie_drop_list = session_id\n\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Dashboard Permissions (Plaintext)\nDESCRIPTION: Defines the `dashboards.permissions:read` permission action required to read permissions for one or more dashboards in Grafana. This is associated with dashboard and folder scopes like `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards.permissions:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Basic LDAP Group Mappings Configuration\nDESCRIPTION: Configuration for mapping LDAP groups to Grafana roles with different permission levels including admin, editor and viewer access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[[servers.group_mappings]]\ngroup_dn = \"cn=superadmins,dc=grafana,dc=org\"\norg_role = \"Admin\"\ngrafana_admin = true\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=admins,dc=grafana,dc=org\"\norg_role = \"Admin\"\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=users,dc=grafana,dc=org\"\norg_role = \"Editor\"\n\n[[servers.group_mappings]]\ngroup_dn = \"*\"\norg_role = \"Viewer\"\n```\n\n----------------------------------------\n\nTITLE: Updating LBAC Rules for a Data Source in HTTP\nDESCRIPTION: This HTTP PUT request updates LBAC rules for teams associated with a specific data source. It requires certain permissions and expects a JSON payload containing team UIDs and their updated rules. The request can also be used to remove rules for a team by omitting it from the payload.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/datasources/uid/my_datasource/lbac/teams\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"rules\": [\n    {\n      \"teamUId\": \"fdnd1pf4m9sxvc\",\n      \"rules\": [\n        \"{ service_name=\\\"bigquery-sync-mysql\\\" }\"\n      ]\n    },\n    {\n      \"teamUid\": \"dfed1p2m9sxvfc\",\n      \"rules\": [\n        \"{ service_name=\\\"api\\\" }\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Organization Metadata - JSON\nDESCRIPTION: This JSON snippet shows a typical HTTP 200 OK response from the /api/org/ endpoint, providing key fields such as id and name for the currently authenticated organization. This output is used to verify organization configuration and context for follow-up API actions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\":1,\\n  \"name\":\"Main Org.\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Grafana APT Repository Definition - Bash\nDESCRIPTION: Optionally deletes the Grafana repository list file from apt sources to prevent further updates or accidental reinstalls. Input: None. Output: /etc/apt/sources.list.d/grafana.list is deleted after prompting for confirmation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -i /etc/apt/sources.list.d/grafana.list\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of annotations. `annotations:*` applies to all annotations, while `annotations:type:dashboard` targets dashboard annotations and `annotations:type:organization` targets organization-level annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nannotations:*\n```\n\nLANGUAGE: text\nCODE:\n```\nannotations:type:*\n```\n\n----------------------------------------\n\nTITLE: Add License Response Example - Grafana Licensing API - HTTP\nDESCRIPTION: This HTTP response snippet illustrates what is received after successfully adding a license to Grafana via the API. The response is a JSON object returned with status 200, including license token details. The fields are subject to change and primarily intended for debugging.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: application/json\\nContent-Length: 357\\n\\n{\\n  \"jti\":\"2\",\\n  \"iss\":\"https://grafana.com\",\\n  \"sub\":\"https://play.grafana.org/\"\\n  \"lid\":\"1\",\\n  \"included_users\":15,\\n  \"lic_exp_warn_days\":30,\\n  \"tok_exp_warn_days\":2,\\n  \"update_days\":1,\\n  \"prod\":[\"grafana-enterprise\"],\\n  \"company\":\"Grafana Labs\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Applying ConfigMap to Kubernetes Cluster - Bash\nDESCRIPTION: This command applies the previously defined ConfigMap YAML to the Kubernetes cluster in the 'monitoring' namespace. It uses kubectl to upload configuration for making the CA certificate available to the Grafana deployment. Prerequisites: kubectl access and an active Kubernetes context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --filename grafana-ca-configmap.yaml --namespace monitoring\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of Grafana Directory - Shell\nDESCRIPTION: Recursively sets the owner and group of '/usr/local/grafana' and its contents to 'grafana:users'. Ensures correct permissions for running Grafana under a dedicated user. Requires: sudo, chown. Input: no parameters. Output: changed ownership of specified directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R grafana:users /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana System User using Shell\nDESCRIPTION: Creates a dedicated system user named `grafana` using the `useradd` command. The `-r` flag designates it as a system account, and `-s /bin/false` prevents this user from being used for shell logins. This is a prerequisite step for installing Grafana from standalone binaries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd -r -s /bin/false grafana\n```\n\n----------------------------------------\n\nTITLE: Displaying Top 10 Most Common Errors for Prometheus Usage Insights - loki-query\nDESCRIPTION: This query can be used in a Grafana dashboard table panel to display the ten most frequent errors users experienced in the 'gdev-prometheus' datasource. It uses Loki's log retrieval and JSON parsing features, counting errors over the dashboard interval. Requires logs ingested by Loki, and the 'gdev-prometheus' datasource label to match your configuration. Inputs are the datasource label and JSON log events; output is the top 10 aggregated error messages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_3\n\nLANGUAGE: loki-query\nCODE:\n```\ntopk(10, sum by (error) (count_over_time({kind=\\\"usage_insights\\\", datasource=\\\"gdev-prometheus\\\"} | json | error != \\\"\\\" [$__interval])))\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for Listing Roles Assigned to a User\nDESCRIPTION: Demonstrates an example HTTP GET request to the `/api/access-control/users/:userId/roles` endpoint to retrieve the list of roles directly assigned to a specific user (user ID 1 in this case). It includes an `Accept: application/json` header to specify the desired response format. This endpoint does not list basic roles or roles inherited from teams by default.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/users/1/roles\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Committing the Release using Git\nDESCRIPTION: Creates a Git commit with the message 'Release v0.1.0'. This commit includes the staged 'dist' directory, marking the state of the code and the built artifacts for version 0.1.0 of the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Release v0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Root URL via Environment Variable (INI)\nDESCRIPTION: Configures Grafana's public root URL via the GF_SERVER_ROOT_URL environment variable, equivalent to the root_url ini setting. Essential for deployments via containers or cloud services where environment variables control config. The value must be the external URL accessible to users. This variable is required for license checks and global URL resolution at runtime.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nGF_SERVER_ROOT_URL=https://grafana.example.com/\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Plugin with Version Pinning - Bash\nDESCRIPTION: Illustrates how to preinstall a specific version of a Grafana plugin during container startup. Requires specifying plugin ID and version (e.g., grafana-clock-panel@1.0.1) in the environment variable. Docker is required; ensures a specific plugin version is used for compatibility or stability.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana \\\n  -e \"GF_PLUGINS_PREINSTALL=grafana-clock-panel@1.0.1\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: API Interaction with Grafana's AuthProxy using cURL\nDESCRIPTION: Example of using cURL to interact with Grafana's API using the auth proxy mechanism. Shows how to list users and how Grafana automatically creates new users when they authenticate via the proxy.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-WEBAUTH-USER: admin\"  http://localhost:3000/api/users\n[\n    {\n        \"id\":1,\n        \"name\":\"\",\n        \"login\":\"admin\",\n        \"email\":\"admin@localhost\",\n        \"isAdmin\":true\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Memory Alert Notification for US-East Region (JSON)\nDESCRIPTION: This JSON object shows a notification payload sent by Grafana Alerting to the 'US-East-Alerts' receiver. It includes a firing alert specifically for 'High memory usage' from the 'us-east' region, further demonstrating the routing of alerts based on labels (region, alertname) and notification policies. The '...' indicates that the full alert details are truncated.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"US-East-Alerts\",\n  \"status\": \"firing\",\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High memory usage - Multi-region\",\n        \"grafana_folder\": \"Multi-region memory alerts\",\n        \"instance\": \"server-12\",\n        \"region\": \"us-east\"\n...}}}\n```\n\n----------------------------------------\n\nTITLE: Removing App Plugin Access with RBAC HTTP API in Bash\nDESCRIPTION: This bash script demonstrates how to remove a specific app plugin (kentik-connect-app) from the basic viewer role using the Grafana RBAC API. It fetches the current role configuration, removes the targeted permission, and updates the role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the role, modify it to remove permissions to kentik-connect-app and increment role version\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \\\n  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \\\n  jq 'del(.permissions[] | select (.action == \"plugins.app:access\" and .scope == \"plugins:id:kentik-connect-app\"))'\n\n# Update the role\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \\\n  -X PUT -d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Spinner Component\nDESCRIPTION: This JSX code sets up the Storybook metadata for the Spinner component, specifying its title and the component itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"MDX|Spinner\" component={Spinner} />\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for hubot-grafana (Bash)\nDESCRIPTION: These shell commands set the necessary environment variables for the `hubot-grafana` plugin. `HUBOT_GRAFANA_HOST` specifies the URL of the Grafana instance Hubot should connect to, and `HUBOT_GRAFANA_API_KEY` provides the API key needed for authentication to render graphs and fetch dashboard information. These variables must be accessible to the Hubot process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport HUBOT_GRAFANA_HOST=https://play.grafana.org\nexport HUBOT_GRAFANA_API_KEY=abcd01234deadbeef01234\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom TestData Version in Grafana\nDESCRIPTION: Example configuration for enabling the use of a custom TestData version in Grafana. This requires Grafana version 10.3.0 or later and involves enabling the 'externalCorePlugins' feature toggle and setting the 'as_external' field for the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/testdata/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nexternalCorePlugins = true\n\n[plugin.grafana-testdata-datasource]\nas_external = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Organization Role Sync from Azure AD in Grafana - INI\nDESCRIPTION: This INI block configures Grafana’s Azure AD authentication (auth.azuread) to skip synchronizing organization roles from Entra ID by setting skip_org_role_sync to true. It is intended for setups where organization roles are managed manually within Grafana or via a different provider. Place this option within the [auth.azuread] section; ensure that this section matches your Grafana authentication provider. No external dependencies aside from an operational Grafana instance are required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[auth.azuread]\n# ..\n# prevents the sync of org roles from AzureAD\nskip_org_role_sync = true\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Snapshot via Grafana HTTP API (HTTP)\nDESCRIPTION: Shows the typical HTTP response when a snapshot is successfully created via the POST /api/snapshots endpoint. The payload includes a unique delete key, deletion URL, sharing key, snapshot URL, and snapshot ID. This response is JSON-formatted for client handling and user reference.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n    HTTP/1.1 200\\n    Content-Type: application/json\\n    {\\n      \"deleteKey\":\"XXXXXXX\",\\n      \"deleteUrl\":\"myurl/api/snapshots-delete/XXXXXXX\",\\n      \"key\":\"YYYYYYY\",\\n      \"url\":\"myurl/dashboard/snapshot/YYYYYYY\",\\n      \"id\": 1\\n    }\n```\n\n----------------------------------------\n\nTITLE: Server Response for Home Dashboard Retrieval in HTTP/JSON\nDESCRIPTION: Example of a successful response from the server after retrieving the home dashboard. The response contains the home dashboard configuration and special metadata with isHome flag set to true and permissions information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"dashboard\": {\n    \"editable\":false,\n    \"nav\":[\n      {\n        \"enable\":false,\n        \"type\":\"timepicker\"\n      }\n    ],\n    \"style\":\"dark\",\n    \"tags\":[],\n    \"templating\":{\n      \"list\":[\n      ]\n    },\n    \"time\":{\n    },\n    \"timezone\":\"browser\",\n    \"title\":\"Home\",\n    \"version\":5\n  },\n  \"meta\":\t{\n    \"isHome\":true,\n    \"canSave\":false,\n    \"canEdit\":false,\n    \"canStar\":false,\n    \"url\":\"\",\n    \"expires\":\"0001-01-01T00:00:00Z\",\n    \"created\":\"0001-01-01T00:00:00Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Width - JSON\nDESCRIPTION: Configures rendering.width to specify the default viewport width for the browser during render. Integer value in pixels, used when no explicit width is provided in requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"width\": 1000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Image Storage Uploads for Screenshots in Grafana - Plaintext\nDESCRIPTION: This configuration option determines whether Grafana uploads alert panel screenshots to a local server or supported remote cloud storage services such as Azure, S3, or GCS. When upload_external_image_storage is set to true, screenshots will be forwarded per the external_image_storage configuration, otherwise they will be retained on disk with respect to the temp_data_lifetime setting. Cloud storage credentials and permissions must be in place if used.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/images-in-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Uploads screenshots to the local Grafana server or remote storage such as Azure, S3 and GCS. Please\\n# see [external_image_storage] for further configuration options. If this option is false, screenshots\\n# are persisted to disk for up to temp_data_lifetime.\\nupload_external_image_storage = false\n```\n\n----------------------------------------\n\nTITLE: Rendering TextLink with Default External Icon in React (JSX)\nDESCRIPTION: This example configures a TextLink to behave as an external hyperlink, which triggers opening a new tab/window and displays the default external icon. The main dependency is Grafana's TextLink React component. The href prop sets the target URL and external instructs the component to treat the destination as outside Grafana, showing the standard icon for clarity. The user sees a blue link styled per external, inline context, with icon appended by default.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TextLink href=\\\"https://google.es\\\" external>\\n  This an external with the default icon\\n</TextLink>\n```\n\n----------------------------------------\n\nTITLE: Configuring SCIM Connector Base URL for Okta Integration - Plaintext\nDESCRIPTION: This snippet illustrates the correct format for the SCIM Connector base URL required when setting up Okta provisioning for Grafana. The placeholder values ({resource_name} and {stack-id}) must be replaced with your specific Grafana Cloud resource and stack identifiers. This URL is used by Okta to communicate with the SCIM API in your Grafana instance. Ensure that any values are securely handled and entered exactly as formatted.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-scim-provisioning/configure-scim-with-okta/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{resource_name}/apis/scim.grafana.app/v0alpha1/namespaces/stacks-{stack-id}\n```\n\n----------------------------------------\n\nTITLE: Registering Inputs with Validation Rules (JavaScript/JSX)\nDESCRIPTION: Illustrates adding validation rules to input registration in the Form component's register function. Shows passing an options object with keys like required, minLength, and a custom validation function. This allows enforcing input constraints directly in JSX, requiring react-hook-form and compatible input components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Input\n  {...register(\"inputName\", {\n    required: true,\n    minLength: 10,\n    validate: v => { // custom validation rule }\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Destructive Button with React in Storybook (TSX)\nDESCRIPTION: This snippet presents Buttons with a Destructive variant in multiple sizes, meant for actions like deletions. The code, intended for Storybook documentation, demonstrates best practice by showing the dominant red styling and provides guidance on use for critical actions. Requires Button and ExampleFrame components; the variant and size props must be supported.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <Button variant=\\\"destructive\\\" size=\\\"sm\\\" style={{ margin: '5px' }}>\\n    {'Small'}\\n  </Button>\\n  <Button variant=\\\"destructive\\\" size=\\\"md\\\" style={{ margin: '5px' }}>\\n    {'Medium'}\\n  </Button>\\n  <Button variant=\\\"destructive\\\" size=\\\"lg\\\" style={{ margin: '5px' }}>\\n    {'Large'}\\n  </Button>\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for Grafana Anonymous Access using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode is used to embed a YouTube video (ID: B72X3_9e-ds) into the documentation page. The video likely showcases the new anonymous access monitoring features in Grafana, including viewing devices and setting limits. This depends on the Hugo static site generator and its 'youtube' shortcode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"B72X3_9e-ds\" >}}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Azure Monitor with Managed Identity in YAML\nDESCRIPTION: YAML configuration for provisioning Azure Monitor data source using Azure Managed Identity authentication. This method uses the identity of the service where Grafana is running to authenticate to Azure services.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1 # config file version\n\ndatasources:\n  - name: Azure Monitor\n    type: grafana-azure-monitor-datasource\n    access: proxy\n    jsonData:\n      azureAuthType: msi\n      subscriptionId: <subscription-id> # Optional, default subscription\n    version: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Grafana Dashboard Time Range to Last 5 Minutes via URL\nDESCRIPTION: This URL example demonstrates how to set the time range of a Grafana dashboard to the last five minutes using the `from=now-5m` and `to=now` query parameters. Replace `${your-domain}` and `/path/to/your/dashboard` with your specific Grafana domain and dashboard path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/dashboards/time-range-URLs.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard?from=now-5m&to=now\n```\n\n----------------------------------------\n\nTITLE: Manually Starting Grafana Server from Binary using Shell\nDESCRIPTION: Starts the Grafana server directly by executing its binary located at `/usr/local/grafana/bin/grafana-server`. The `--homepath` argument specifies the root directory for Grafana's files (config, plugins, data). This initial manual run is often needed during binary setup to create the necessary data directories before configuring it as a service.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Replacing Mute Timing - Grafana REST HTTP Endpoint - http\nDESCRIPTION: Defines the HTTP PUT endpoint for replacing an existing mute timing resource in Grafana. Requires the mute timing name as a path parameter and the updated mute time interval specification as the request body. Invoking this endpoint (`PUT /api/v1/provisioning/mute-timings/:name`) replaces any existing configuration for the given mute timing. Accepts the `X-Disable-Provenance` header optionally, and returns the updated mute timing (on success), ValidationError (on request error), or GenericPublicError (on conflict).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/provisioning/mute-timings/:name\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists with kubectl - Shell\nDESCRIPTION: This shell command fetches Playlist resources from the Kubernetes API using kubectl and a kubeconfig file configured for Grafana. It requires a valid kubeconfig and kubectl installed on the local system. Input parameter is the playlist resource type; output is a listing of discovered playlist objects, or confirmation of none found.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig=./grafana.kubeconfig get playlist\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Home Dashboard in HTTP/JSON\nDESCRIPTION: Example of retrieving the home dashboard configuration. This request sends a GET to /api/dashboards/home endpoint. The response includes the complete home dashboard definition and special metadata indicating it's the home dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/home HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Using Grafana CLI Plugin Command with Homebrew (Apple Silicon Path)\nDESCRIPTION: Executes a Grafana CLI plugins command (`install`) for a Homebrew installation on Apple Silicon. It specifies the paths for the CLI binary, configuration file (`grafana.ini`), homepath, and the plugins directory. Replace `<plugin-id>` with the ID of the plugin to install. Paths may differ on Intel-based Macs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --pluginsDir \"/opt/homebrew/var/lib/grafana/plugins\" plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Basic Notification Templates in Grafana with Go Templates - Go\nDESCRIPTION: This snippet defines a basic custom notification template using Go's template language for Grafana. It demonstrates conditionally displaying a message based on whether there are common labels by utilizing the `if` statement and `.CommonLabels` from the notification data. It requires configuration in Grafana alerting settings, and expects notification data structure; outputs are plain text messages for use in notifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_message\" -}}\n{{ if .CommonLabels }}\nAlerts have common labels\n{{ else }}\nThere are no common labels\n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Delete Team Response Example - JSON\nDESCRIPTION: Returns a JSON message specifying that the team has been deleted after a successful DELETE operation. Confirms to clients that the team resource is removed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Team deleted\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Manual RPM Installation of Grafana and Dependencies - Bash\nDESCRIPTION: Installs prerequisite packages, downloads a specified Grafana RPM package, and installs or upgrades it with rpm. wget fetches the RPM from a user-supplied URL, and rpm -Uvh installs/updates the local package. Dependencies: initscripts, urw-fonts, wget, rpm. Parameters: <rpm package url>, <local rpm package> must be replaced. Outputs: system packages installed/updated.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install initscripts urw-fonts wget\nwget <rpm package url>\nsudo rpm -Uvh <local rpm package>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Authentication Lifetimes and Email Lookup in Grafana (Config)\nDESCRIPTION: Provides default or placeholder configuration examples for `login_maximum_lifetime_duration`, `token_rotation_interval_minutes`, `api_key_max_seconds_to_live`, and `oauth_allow_insecure_email_lookup` in Grafana's configuration file. These settings control session lengths, token rotation frequency, API key validity, and the initial state of email-based user identification.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: Config\nCODE:\n```\n# The maximum lifetime (duration) an authenticated user can be logged in since login time before being required to login. Default is 30 days (30d). This setting should be expressed as a duration, e.g. 5m (minutes), 6h (hours), 10d (days), 2w (weeks), 1M (month).\nlogin_maximum_lifetime_duration =\n\n# How often should auth tokens be rotated for authenticated users when being active. The default is every 10 minutes.\ntoken_rotation_interval_minutes = 10\n\n# The maximum lifetime (seconds) an API key can be used. If it is set all the API keys should have limited lifetime that is lower than this value.\napi_key_max_seconds_to_live = -1\n\n# Enforce user lookup based on email instead of the unique ID provided by the IdP.\noauth_allow_insecure_email_lookup = false\n```\n\n----------------------------------------\n\nTITLE: Setting Page Zoom Level - JSON\nDESCRIPTION: Configures rendering.pageZoomLevel to a specific zoom ratio for rendered pages. The value (float) increases or decreases the size content is drawn during rendering. Input is a real number; default is 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"pageZoomLevel\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Team - HTTP\nDESCRIPTION: Performs a POST request to create a new team with a specified name and optionally email. Requires Bearer-token authentication. The JSON body must provide at least a unique team name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/teams HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\\n\\n{\\n  \\\"name\\\": \\\"MyTestTeam\\\",\\n  \\\"email\\\": \\\"email@test.com\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating PATCH Endpoint for Service Account Update in Go\nDESCRIPTION: This snippet demonstrates how to annotate a PATCH endpoint for updating a service account. It includes the route definition, HTTP method, path, tags, operation ID, and possible response codes.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// swagger:route PATCH /serviceaccounts/{serviceAccountId} service_accounts updateServiceAccount\n//\n// # Update service account\n//\n// Required permissions (See note in the [introduction](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api) for an explanation):\n// action: `serviceaccounts:write` scope: `serviceaccounts:id:1` (single service account)\n//\n// Responses:\n// 200: updateServiceAccountResponse\n// 400: badRequestError\n// 401: unauthorisedError\n// 403: forbiddenError\n// 404: notFoundError\n// 500: internalServerError\n```\n\n----------------------------------------\n\nTITLE: Confirmation of Organization User Deletion - JSON\nDESCRIPTION: This JSON object confirms a user has been removed from an organization, returned after a successful HTTP DELETE operation. The message field summarizes the result.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"User removed from organization\"}\n```\n\n----------------------------------------\n\nTITLE: Provisioning InfluxDB 2.x Data Source with InfluxQL in Grafana\nDESCRIPTION: This YAML configuration demonstrates provisioning an InfluxDB 2.x data source using InfluxQL in Grafana. It includes settings for database name and uses an HTTP header for token-based authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: InfluxDB_v2_InfluxQL\n    type: influxdb\n    access: proxy\n    url: http://localhost:8086\n    jsonData:\n      dbName: site\n      httpHeaderName1: 'Authorization'\n    secureJsonData:\n      httpHeaderValue1: 'Token <token>'\n```\n\n----------------------------------------\n\nTITLE: Adding a Team Member - HTTP\nDESCRIPTION: Makes a POST request to add a specified user to a team by user ID. A valid authorization header must be provided. The userId is specified in the JSON body. Only users with correct permissions may perform this operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/teams/1/members HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\\n\\n{\\n  \\\"userId\\\": 2\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Mute Timings via YAML Provisioning\nDESCRIPTION: This YAML configuration example shows how to delete specific mute timings in Grafana via provisioning. The `deleteMuteTimes` key lists the mute timings to be removed, identified by their organization ID (`orgId`) and unique name (`name`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 1\n\n# List of mute time intervals that should be deleted\ndeleteMuteTimes:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the mute time interval, must be unique\n    name: mti_1\n\n```\n\n----------------------------------------\n\nTITLE: Listing User Auth Tokens via Grafana Admin HTTP API - HTTP\nDESCRIPTION: This HTTP GET request fetches all authentication tokens (sessions/devices) for a specified user. Requires Basic Authentication with appropriate read scope. The JSON response includes a list of token metadata for user sessions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /api/admin/users/1/auth-tokens HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"id\": 361,\\n    \"isActive\": false,\\n    \"clientIp\": \"127.0.0.1\",\\n    \"browser\": \"Chrome\",\\n    \"browserVersion\": \"72.0\",\\n    \"os\": \"Linux\",\\n    \"osVersion\": \"\",\\n    \"device\": \"Other\",\\n    \"createdAt\": \"2019-03-05T21:22:54+01:00\",\\n    \"seenAt\": \"2019-03-06T19:41:06+01:00\"\\n  },\\n  {\\n    \"id\": 364,\\n    \"isActive\": false,\\n    \"clientIp\": \"127.0.0.1\",\\n    \"browser\": \"Mobile Safari\",\\n    \"browserVersion\": \"11.0\",\\n    \"os\": \"iOS\",\\n    \"osVersion\": \"11.0\",\\n    \"device\": \"iPhone\",\\n    \"createdAt\": \"2019-03-06T19:41:19+01:00\",\\n    \"seenAt\": \"2019-03-06T19:41:21+01:00\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Snapshots with Grafana HTTP API (HTTP)\nDESCRIPTION: Provides a GET HTTP request example to list all dashboard snapshots, supporting optional query parameters for filtering and limiting results. Requires proper authorization headers. The standard use returns a JSON array of snapshot metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboard/snapshots HTTP/1.1\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials File in Bash\nDESCRIPTION: Demonstrates the structure of an AWS credentials file that should be placed at ~/.aws/credentials. This file contains the AWS access key, secret access key, and region configuration for Grafana to authenticate with AWS services.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[default]\naws_access_key_id = asdsadasdasdasd\naws_secret_access_key = dasdasdsadasdasdasdsa\nregion = us-west-2\n```\n\n----------------------------------------\n\nTITLE: Connecting to Raspberry Pi via SSH (Bash)\nDESCRIPTION: Establishes an SSH connection to the Raspberry Pi using the default username 'pi' and the Pi's IP address. Requires the IP address of the Raspberry Pi on the network. The default password 'raspberry' will be prompted upon connection.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nssh pi@<ip address>\n```\n\n----------------------------------------\n\nTITLE: Displaying an Admonition Note in Documentation\nDESCRIPTION: This Hugo shortcode renders a styled note box within the documentation. The `type=\"note\"` specifies the style (e.g., information, warning). The content inside the shortcode provides context that the 'Show thresholds' option is specifically available for bar chart, candlestick, time series, and trend visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{< admonition type=\"note\" >}}\nThis option is supported for the bar chart, candlestick, time series, and trend visualizations.\n{{< /admonition>}}\n```\n\n----------------------------------------\n\nTITLE: Creating a CloudWatch Data Source via Grafana API - HTTP\nDESCRIPTION: This POST request shows creation of a CloudWatch data source for Grafana, including a JSON body with CloudWatch-specific properties (authType, defaultRegion) and AWS credentials in secureJsonData. Inputs are standard data source parameters and the secure AWS access and secret keys. The bearer token is required, and the response will provide confirmation and data source configuration details. SecureJsonData ensures sensitive keys are stored encrypted. Some parameters (like region and keys) must be valid for your AWS setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/datasources HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"name\": \"test_datasource\",\\n  \"type\": \"cloudwatch\",\\n  \"url\": \"http://monitoring.us-west-1.amazonaws.com\",\\n  \"access\": \"proxy\",\\n  \"jsonData\": {\\n    \"authType\": \"keys\",\\n    \"defaultRegion\": \"us-west-1\"\\n  },\\n  \"secureJsonData\": {\\n    \"accessKey\": \"Ol4pIDpeKSA6XikgOl4p\",\\n    \"secretKey\": \"dGVzdCBrZXkgYmxlYXNlIGRvbid0IHN0ZWFs\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zanzana Standalone Server - INI\nDESCRIPTION: Sets up the Zanzana server using an INI configuration file, enabling it as a standalone OpenFGA HTTP server. This configuration toggles features, sets the HTTP address for the server under [zanzana.server], and enables gRPC support. Required dependencies: Grafana build with Zanzana integration, standalone Zanzana implementation. Key parameters include 'app_mode', 'target', feature toggles for Zanzana, the server listening address, and gRPC settings. Used as a prerequisite for running the Grafana server in a specific mode for authorization debugging.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# ini\napp_mode = development\ntarget = zanzana-server\n\n[feature_toggles]\nzanzana = true\n\n[zanzana.server]\nhttp_addr = 127.0.0.1:8080\n\n[grpc_server]\nenabled = true\naddress = 127.0.0.1:10000\n```\n\n----------------------------------------\n\nTITLE: Nesting Queries with Reference Syntax\nDESCRIPTION: Reference a previous query using the letter syntax similar to a spreadsheet. This enables building compound queries by referencing the result of another query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: graphite\nCODE:\n```\n#A\n```\n\n----------------------------------------\n\nTITLE: Remove User Role Assignment Request\nDESCRIPTION: DELETE request to remove a role from a user. Requires users.roles:remove permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/access-control/users/1/roles/AFUXBHKnk\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Annotation with Dynamic Label Interpolation - Go Template - Markdown\nDESCRIPTION: This snippet shows how to include a specific label's value (e.g., 'instance') from the $labels object in a readable annotation template using Go templating within Grafana alerting. It requires the $labels object to be populated by the corresponding query, and Go templating support. The parameter $labels.instance provides the dynamic instance value; input is the label data and output is a filled sentence. This template assumes at least one matching label named 'instance'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_1\n\nLANGUAGE: Go Template\nCODE:\n```\nCPU usage for {{ $labels.instance }} has exceeded 80% for the last 5 minutes\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mounts for Grafana Data with Custom User - Bash\nDESCRIPTION: Demonstrates creating a host directory for persistent storage and running a Grafana container with that directory bind-mounted, using the current user ID for permissions. Requires that the user has permission for the target directory, and Docker must be present. Input is the path to the host data directory; persists Grafana data without Docker volumes, granting potential access to non-Docker processes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# create a directory for your data\nmkdir data\n\n# start grafana with your user id and using the data directory\ndocker run -d -p 3000:3000 --name=grafana \\\n  --user \"$(id -u)\" \\\n  --volume \"$PWD/data:/var/lib/grafana\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Mute Timings via YAML Provisioning\nDESCRIPTION: This YAML snippet illustrates how to provision mute timings in Grafana. It defines mute timing intervals using the `muteTimes` key, specifying the organization ID, a unique name for the timing (`name`), and the specific time intervals (`time_intervals`) during which notifications should be muted, following Prometheus configuration syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 1\n\n# List of mute time intervals to import or update\nmuteTimes:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string, required> name of the mute time interval, must be unique\n    name: mti_1\n    # <list> time intervals that should trigger the muting\n    #        refer to https://prometheus.io/docs/alerting/latest/configuration/#time_interval-0\n    time_intervals:\n      - times:\n          - start_time: '06:00'\n            end_time: '23:59'\n        location: 'UTC'\n        weekdays: ['monday:wednesday', 'saturday', 'sunday']\n        months: ['1:3', 'may:august', 'december']\n        years: ['2020:2022', '2030']\n        days_of_month: ['1:5', '-3:-1']\n\n```\n\n----------------------------------------\n\nTITLE: Defining Provisioner Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions related to provisioners. `provisioners:*` matches any provisioner, while `provisioners:accesscontrol` specifically targets the role-based access control provisioner.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_38\n\nLANGUAGE: text\nCODE:\n```\nprovisioners:*\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Server Authentication - INI\nDESCRIPTION: This INI configuration snippet sets up authentication for the GRPC storage-server. It specifies a URL for signing keys and selects authentication mode as 'on-prem'. This is required for secure API communications and must be appropriately adjusted for the deployment environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[grpc_server_authentication]\\n; http url to Grafana's signing keys to validate incoming id tokens\\nsigning_keys_url = http://localhost:3000/api/signing-keys/keys\\nmode = \\\"on-prem\\\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring HTTPS Errors - Bash\nDESCRIPTION: Enables ignoring HTTPS errors in headless browser navigation using IGNORE_HTTPS_ERRORS. When set to 'true', the renderer bypasses errors on invalid certificates, which is insecure and not recommended for production.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nIGNORE_HTTPS_ERRORS=true\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Region Annotations with Epoch Time Columns (SQL)\nDESCRIPTION: SQL query example for fetching Grafana region annotations, which require both a start and end time. It uses separate epoch timestamp columns for the start (`epoch_time`) and end (`epoch_timeend`) times. It utilizes the `$__unixEpochFilter` macro for time filtering based on the start time and maps database columns to Grafana annotation fields (`time`, `timeend`, `text`, `tags`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  epoch_time as time,\n  epoch_timeend as timeend,\n  metric1 as text,\n  CONCAT(tag1, ',', tag2) as tags\nFROM\n  public.test_data\nWHERE\n  $__unixEpochFilter(epoch_time)\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Secrets (Bash)\nDESCRIPTION: Executes the `docker secret ls` command to list all currently defined Docker secrets, showing their IDs, names, and creation/update timestamps. This is useful for verifying secret creation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker secret ls\n```\n\n----------------------------------------\n\nTITLE: Creating and Inspecting Docker Volumes for Grafana Persistence - Bash\nDESCRIPTION: Shows how to create a named Docker volume for persistent Grafana data storage and inspect its details. Requires Docker to be installed. 'docker volume create' creates a managed volume, and 'docker volume inspect' verifies its creation; ensure the volume name matches your usage in other commands.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create a persistent volume for your data\ndocker volume create grafana-storage\n\n# verify that the volume was created correctly\n# you should see some JSON output\ndocker volume inspect grafana-storage\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Properties\nDESCRIPTION: Authentication-related settings including cookie configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nlogin_cookie_name=grafana_session\n```\n\n----------------------------------------\n\nTITLE: Updating a Playlist via Grafana HTTP API\nDESCRIPTION: Sends a PUT request to `/api/playlists/:uid` to update an existing playlist identified by its UID. Requires `Authorization` and `Content-Type: application/json` headers. The request body must be a JSON object containing the updated `name`, `interval`, and `items` for the playlist. Returns a JSON object representing the updated playlist, including its items.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/playlists/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n  {\n    \"name\": \"my playlist\",\n    \"interval\": \"5m\",\n    \"items\": [\n      {\n        \"playlistUid\": \"1\",\n        \"type\": \"dashboard_by_uid\",\n        \"value\": \"3\",\n        \"order\": 1,\n        \"title\":\"my third dashboard\"\n      },\n      {\n        \"playlistUid\": \"1\",\n        \"type\": \"dashboard_by_tag\",\n        \"value\": \"myTag\",\n        \"order\": 2,\n        \"title\":\"my other dashboard\"\n      }\n    ]\n  }\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"uid\" : \"1\",\n  \"name\": \"my playlist\",\n  \"interval\": \"5m\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"playlistUid\": \"1\",\n      \"type\": \"dashboard_by_uid\",\n      \"value\": \"3\",\n      \"order\": 1,\n      \"title\":\"my third dashboard\"\n    },\n    {\n      \"id\": 2,\n      \"playlistUid\": \"1\",\n      \"type\": \"dashboard_by_tag\",\n      \"value\": \"myTag\",\n      \"order\": 2,\n      \"title\":\"my other dashboard\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Ports for HA in Kubernetes (YAML)\nDESCRIPTION: This Kubernetes YAML snippet configures the necessary network ports for a Grafana container within a deployment to support high availability. It exposes the standard Grafana port 3000 (TCP) and adds both TCP and UDP ports 9094, which are required for the Memberlist gossip protocol used for communication between HA peers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-high-availability/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - name: grafana\n    containerPort: 3000\n    protocol: TCP\n  - name: gossip-tcp\n    containerPort: 9094\n    protocol: TCP\n  - name: gossip-udp\n    containerPort: 9094\n    protocol: UDP\n```\n\n----------------------------------------\n\nTITLE: Checking Port Usage (Linux/macOS)\nDESCRIPTION: This command uses 'lsof' (List Open Files) to check if any process is listening on TCP port 9090, the default port for Prometheus. It helps identify port conflicts if Prometheus fails to start.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nlsof -i :9090\n```\n\n----------------------------------------\n\nTITLE: Overriding Grafana Configuration with Environment Variables\nDESCRIPTION: Example of using environment variables to override Grafana configuration settings from different sections, including default options, security settings, authentication, plugin configuration, and feature toggles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GF_DEFAULT_INSTANCE_NAME=my-instance\nexport GF_SECURITY_ADMIN_USER=owner\nexport GF_AUTH_GOOGLE_CLIENT_SECRET=newS3cretKey\nexport GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS=true\nexport GF_FEATURE_TOGGLES_ENABLE=newNavigation\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status of API Keys - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates how to check the status of API key migration to service accounts by sending a POST request to the migrationstatus endpoint. The response is a JSON object containing a boolean migrated property, indicating whether the migration has occurred.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts/migrationstatus HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"migrated\": true\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Query Comment in Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet shows a successful HTTP 200 OK response after updating a query's comment. The JSON body returns the complete, updated query history entry, including the new comment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"result\": {\n    \"uid\": \"P8zM2I1nz\",\n    \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n    \"createdBy\": 1,\n    \"createdAt\": 1643630762,\n    \"starred\": false,\n    \"comment\": \"Debugging query\",\n    \"queries\": [\n      {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PD8C576611E62080A\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Permissions Assigned to a Service Account (HTTP GET)\nDESCRIPTION: Sends a GET request to retrieve the list of permissions that a given service account has. It includes required permissions for the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/users/1/permissions\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Metadata in repo.json\nDESCRIPTION: Provides the JSON structure required to add a plugin entry to the 'repo.json' file within the 'grafana-plugin-repository'. This metadata includes the plugin's unique ID, type (e.g., 'panel', 'datasource'), source code URL, and an array of available versions, each specifying the version number, commit SHA of the release tag, and the repository URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<plugin id>\",\n  \"type\": \"<plugin type>\",\n  \"url\": \"https://github.com/<username>/my-plugin\",\n  \"versions\": [\n    {\n      \"version\": \"<version>\",\n      \"commit\": \"<git sha>\",\n      \"url\": \"https://github.com/<username>/my-plugin\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Full Example: Persistent Volume, Environment Variables, and Plugin Installation - Bash\nDESCRIPTION: Combines several concepts: creates a persistent Docker volume, then runs a Grafana container mapping the persistent storage, sets the server root URL, and pre-installs the clock panel plugin. Requires Docker; input parameters are the storage volume name, root URL, and plugin list. The output is a running, configured Grafana instance with custom base URL and plugins, persisting data in a Docker-managed volume.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# create a persistent volume for your data\ndocker volume create grafana-storage\n\n# start grafana by using the above persistent storage\n# and defining environment variables\n\ndocker run -d -p 3000:3000 --name=grafana \\\n  --volume grafana-storage:/var/lib/grafana \\\n  -e \"GF_SERVER_ROOT_URL=http://my.grafana.server/\" \\\n  -e \"GF_PLUGINS_PREINSTALL=grafana-clock-panel\" \\\n  grafana/grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Building a Grafana Docker Image with Pre-installed Plugins\nDESCRIPTION: An example of how to build a custom Grafana Docker image with specified plugin versions pre-installed to improve startup efficiency for multiple deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for RBAC in Grafana - Bash\nDESCRIPTION: This code snippet demonstrates how to enable debug log messages for RBAC modules by setting specific filters in the Grafana configuration file under the [log] section. It assumes access to and the ability to edit the Grafana server configuration (typically grafana.ini). The filters control debug output for access control, evaluator, and dashboard permission systems. This change is effective after Grafana is restarted and will increase log verbosity, aiding troubleshooting of RBAC operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[log]\nfilters = accesscontrol:debug accesscontrol.evaluator:debug dashboard.permissions:debug\n```\n\n----------------------------------------\n\nTITLE: Implementing EmptyState Call-to-Action Variant without Button in JSX\nDESCRIPTION: This snippet shows how to use the `EmptyState` component with the `call-to-action` variant when a direct action button is not suitable. Instead of a button, it provides textual instructions within the component's children, including a `TextLink`, to guide the user on how to create the required resource (library panels).\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptyState, TextLink } from '@grafana/ui';\n\n<EmptyState variant=\"call-to-action\" message=\"You haven't created any library panels yet\">\n  Create a library panel from any existing dashboard panel through the panel context menu.{' '}\n  <TextLink external href=\"<externalDocsLink>\">\n    Learn more.\n  </TextLink>\n</EmptyState>;\n```\n\n----------------------------------------\n\nTITLE: Migrating Grafana Plugin from Toolkit with Create-Plugin Command\nDESCRIPTION: Command-line instructions for migrating a Grafana plugin from the older toolkit to the newer plugin tools system. The command should be run from the root directory of your plugin project after navigating to the plugin directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-0.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./my-plugin\n\nnpx @grafana/create-plugin@latest migrate\n```\n\n----------------------------------------\n\nTITLE: Removing a Team Member - HTTP\nDESCRIPTION: Deletes a specified user from a team using their team ID and user ID. Requires appropriate permissions and an Authorization Bearer token. No request body is required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/teams/2/members/3 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Keyword Fields for Grafana Variable (JSON)\nDESCRIPTION: This JSON query, used in Grafana's template variable definition, fetches a list of field names from the configured Elasticsearch index that are explicitly mapped with the `keyword` type. This allows populating a variable with available keyword fields for dynamic selection in dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n`{\"find\": \"fields\", \"type\": \"keyword\"}`\n```\n\n----------------------------------------\n\nTITLE: Defining React State and Properties\nDESCRIPTION: Illustrates the correct naming convention for React state and properties using camelCase.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModalState {\n  // bad\n  IsActive: boolean;\n  // bad\n  is_active: boolean;\n\n  // good\n  isActive: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Default-Style Notification Title Template in Grafana\nDESCRIPTION: This snippet shows how to execute the template mimicking Grafana's default notification title by passing the context (dot) to the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"copy_of_default_title\" . }}\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana ConfigMap from Custom Conf File - kubectl Bash\nDESCRIPTION: Creates a Kubernetes ConfigMap named 'ge-config' from a local 'grafana.ini' file for use by the Grafana pod. This ensures custom configuration is available as a mounted volume. Specify full path to source file and namespace as needed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap ge-config --from-file=/path/to/file/grafana.ini --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Required Keycloak Client Scopes (Plaintext)\nDESCRIPTION: Lists the default client scopes that should be assigned in the Keycloak client configuration for Grafana integration. These scopes (`email`, `offline_access`, `profile`, `roles`) are necessary for basic user information retrieval and role mapping as defined in the example Grafana configuration. Note that these default scopes might not include group claims needed for teamsync.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nemail\noffline_access\nprofile\nroles\n```\n\n----------------------------------------\n\nTITLE: Humanizing Query Value as Percentage\nDESCRIPTION: This Go template utilizes the `humanizePercentage` function to format the value of query 'A' (assumed to be a ratio, e.g., 0.1) into a human-readable percentage string.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_12\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ humanizePercentage $values.A.Value }}\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Annotations (Plaintext)\nDESCRIPTION: Defines the `annotations:read` permission action needed to read annotations and annotation tags in Grafana. Access is related to scopes such as `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`annotations:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Templating Variables in Grafana Dashboard JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the templating field in a Grafana dashboard configuration. It includes two template variables with their metadata, options, and current values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/view-dashboard-json-model/index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"templating\": {\n    \"enable\": true,\n    \"list\": [\n      {\n        \"allFormat\": \"wildcard\",\n        \"current\": {\n          \"tags\": [],\n          \"text\": \"prod\",\n          \"value\": \"prod\"\n        },\n        \"datasource\": null,\n        \"includeAll\": true,\n        \"name\": \"env\",\n        \"options\": [\n          {\n            \"selected\": false,\n            \"text\": \"All\",\n            \"value\": \"*\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"stage\",\n            \"value\": \"stage\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"test\",\n            \"value\": \"test\"\n          }\n        ],\n        \"query\": \"tag_values(cpu.utilization.average,env)\",\n        \"refresh\": false,\n        \"type\": \"query\"\n      },\n      {\n        \"allFormat\": \"wildcard\",\n        \"current\": {\n          \"text\": \"apache\",\n          \"value\": \"apache\"\n        },\n        \"datasource\": null,\n        \"includeAll\": false,\n        \"multi\": false,\n        \"multiFormat\": \"glob\",\n        \"name\": \"app\",\n        \"options\": [\n          {\n            \"selected\": true,\n            \"text\": \"tomcat\",\n            \"value\": \"tomcat\"\n          },\n          {\n            \"selected\": false,\n            \"text\": \"cassandra\",\n            \"value\": \"cassandra\"\n          }\n        ],\n        \"query\": \"tag_values(cpu.utilization.average,app)\",\n        \"refresh\": false,\n        \"regex\": \"\",\n        \"type\": \"query\"\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Specifying Example Metrics Environment Info Section - INI\nDESCRIPTION: Provides an example of the format for setting environment info label-value pairs in the [metrics.environment_info] section of the Grafana configuration. No dependencies are required, and both lines are commented out by default as illustrations. This snippet helps users know how to format new metric dimensions. It does not affect configuration until the leading semicolon is removed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n; exampleLabel1 = exampleValue1\\n; exampleLabel2 = exampleValue2\n```\n\n----------------------------------------\n\nTITLE: Ensuring Strings are Marked for Translation in Components (React, TypeScript/JSX)\nDESCRIPTION: These snippets demonstrate how to correctly wrap UI text in translation tags/components within React (JSX, TypeScript). Bad examples display hardcoded strings, while good examples use the <Trans> component with i18nKey attributes or wrap variables for interpolation. Dependencies: React, @grafana/i18n (Trans), UI components (e.g., InlineToast). Inputs: components that need translation. Outputs: translated UI components. Ensures static and dynamic string content is marked for i18n compliance.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad ❌\n<InlineToast placement=\"top\" referenceElement={buttonRef.current}>\n  Copied\n</InlineToast>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅\n<InlineToast placement=\"top\" referenceElement={buttonRef.current}>\n  <Trans i18nKey=\"clipboard-button.inline-toast.success\">Copied</Trans>\n</InlineToast>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Panel with State in PanelChrome - TypeScript\nDESCRIPTION: Demonstrates a React functional component that manages the collapsed state of a PanelChrome panel using useState. The snippet covers passing title, width, height, collapsible, collapsed, and onToggleCollapse props, and renders content based on dynamically provided dimensions. Requires React, PanelChrome component, and assumes proper CSS/JSX rendering context. Inputs include panel title and dimensions; outputs are the rendered collapsible panel where content display is toggled by user interaction. Mutually exclusive props such as collapsible and hoverHeader are noted.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Container() {\n  const [isCollapsed, setCollapsed] = useState(true);\n\n  return (\n    <PanelChrome\n      title=\"My awesome panel title\"\n      width={400}\n      height={200}\n      collapsible={true}\n      collapsed={isCollapsed}\n      onToggleCollapse={(isCollapsed) => setCollapsed(isCollapsed)}\n    >\n      {(innerwidth, innerheight) => {\n        return (\n          <div\n            style={{\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            Content\n          </div>\n        );\n      }}\n    </PanelChrome>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Dashboard Insights (Plaintext)\nDESCRIPTION: Defines the `dashboards.insights:read` permission action allowing users to read dashboard insights data and see presence indicators. Viewing insights also requires the `dashboards:read` permission on the specific dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards.insights:read`\n```\n\n----------------------------------------\n\nTITLE: Updating Package List for New Grafana Repository - Bash\nDESCRIPTION: Refreshes the system's package cache to include packages from the newly added Grafana repository. Required after changing sources. Input: None. Output: Apt package index is updated with Grafana packages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Updates the list of available packages\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Response for Getting Specific Dashboard Version in Grafana HTTP API\nDESCRIPTION: This HTTP response returns complete information about a specific dashboard version, including metadata and the full dashboard configuration JSON in the 'data' field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 1300\n\n{\n  \"id\": 1,\n  \"dashboardId\": 1,\n  \"uid\": \"QA7wKklGz\",\n  \"parentVersion\": 0,\n  \"restoredFrom\": 0,\n  \"version\": 1,\n  \"created\": \"2017-04-26T17:18:38-04:00\",\n  \"message\": \"Initial save\",\n  \"data\": {\n    \"annotations\": {\n      \"list\": [\n\n      ]\n    },\n    \"editable\": true,\n    \"gnetId\": null,\n    \"graphTooltip\": 0,\n    \"id\": 1,\n    \"links\": [\n\n    ],\n    \"rows\": [\n      {\n        \"collapse\": false,\n        \"height\": \"250px\",\n        \"panels\": [\n\n        ],\n        \"repeat\": null,\n        \"repeatIteration\": null,\n        \"repeatRowId\": null,\n        \"showTitle\": false,\n        \"title\": \"Dashboard Row\",\n        \"titleSize\": \"h6\"\n      }\n    ],\n    \"schemaVersion\": 14,\n      \"tags\": [\n\n    ],\n    \"templating\": {\n      \"list\": [\n\n      ]\n    },\n    \"time\": {\n      \"from\": \"now-6h\",\n      \"to\": \"now\"\n    },\n    \"timepicker\": {},\n    \"timezone\": \"browser\",\n    \"title\": \"test\",\n    \"version\": 1\n  },\n  \"createdBy\": \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Spacing with Spacing Prop in @grafana/ui - TypeScript\nDESCRIPTION: This code snippet extends the vertical Divider example by passing a spacing prop (spacing={0.5}) to adjust the margin around the divider for layout tuning. Requires React and @grafana/ui libraries. Key parameters are direction=\\\"vertical\\\" and spacing=0.5. Input is JSX within a component; output is a vertically oriented divider with custom spacing. Intended for layout customization in React components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Divider } from '@grafana/ui';\n\n    <header>\n        <h1>My title here</h1>\n        <Divider direction=\"vertical\" spacing={0.5}/>\n        <img src=\"logo.png\" alt=\"logo\" />\n    </header>\n    <main>\n        <p>Main content goes here</p>\n    </main>\n\n```\n\n----------------------------------------\n\nTITLE: Complex Component Styling with Conditional Classes in Grafana\nDESCRIPTION: Shows how to create multiple style classes for a component using Emotion in Grafana. This example demonstrates conditional styling based on an 'isActive' prop, using cx function to compose multiple class names and organizing styles as an object with different named properties.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/styling.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface ComponentAProps {\n  isActive: boolean;\n}\n\nconst ComponentA = ({ isActive }: ComponentAProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(styles.wrapper, isActive && styles.active)}>\n      As red as you can get\n      <i className={styles.icon} />\n    </div>\n  );\n};\n\n// Mind, that you can pass multiple arguments, theme included\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      background: theme.colors.background.secondary,\n    }),\n    active: css({\n      background: theme.colors.primary.main,\n      text: theme.colors.primary.contrastText,\n    }),\n    icon: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Flame Graph Search Screenshot using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode renders an image figure within the documentation. It specifies the image source (`src`), sets a maximum width (`max-width`), and provides alternative text (`alt`) describing the image, which illustrates the search functionality in a Grafana flame graph.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/grafana/panels-visualizations/screenshot-flamegraph-search-v12.0.png\" max-width=\"700px\" alt=\"Searching for a function name in a flame graph visualization.\">}}\n```\n\n----------------------------------------\n\nTITLE: Testing AsyncSelect Component with Mocked Backend in Grafana\nDESCRIPTION: Complete test suite for the OrgPicker component that uses AsyncSelect with mocked backend data. It demonstrates how to mock the getBackendSrv for testing components that load options asynchronously and how to interact with the component to verify its behavior.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { screen, render } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { OrgPicker } from './OrgPicker';\n\njest.mock('@grafana/runtime', () => ({\n  ...jest.requireActual('@grafana/runtime'),\n  getBackendSrv: () => ({\n    get: () =>\n      Promise.resolve([\n        { name: 'Org 1', id: 0 },\n        { name: 'Org 2', id: 1 },\n      ]),\n  }),\n}));\n\nfunction setup(jsx: JSX.Element) {\n  return {\n    user: userEvent.setup(),\n    ...render(jsx),\n  };\n}\n\ndescribe('OrgPicker', () => {\n  it('should render', async () => {\n    render(\n      <>\n        <label htmlFor={'picker'}>Org picker</label>\n        <OrgPicker onSelected={() => {}} inputId={'picker'} />\n      </>\n    );\n\n    expect(await screen.findByRole('combobox', { name: 'Org picker' })).toBeInTheDocument();\n  });\n\n  it('should have the options', async () => {\n    const { user } = setup(\n      <>\n        <label htmlFor={'picker'}>Org picker</label>\n        <OrgPicker onSelected={() => {}} inputId={'picker'} />\n      </>\n    );\n    await user.click(await screen.findByRole('combobox', { name: 'Org picker' }));\n    expect(screen.getByText('Org 1')).toBeInTheDocument();\n    expect(screen.getByText('Org 2')).toBeInTheDocument();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Traefik File Provider Router/Service (Domain-based) - YAML\nDESCRIPTION: Example of a Traefik configuration via the file provider, defining a router and service to route domain-specific traffic to a Grafana instance. Place inside traefik.yml or as a snippet in the static configuration folder. The router matches grafana.example.com, and the backend is specified as a server URL. Traefik and a reachable Grafana backend are required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\\n  routers:\\n    grafana:\\n      rule: Host(`grafana.example.com`)\\n      service: grafana\\n  services:\\n    grafana:\\n      loadBalancer:\\n        servers:\\n          - url: http://192.168.30.10:3000\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Annotation Formatting in Go Template\nDESCRIPTION: Defines a template named '__default_alert_annotations' for formatting annotations of a single alert. It specifically handles 'summary', 'description', and 'runbook_url' annotations, displaying them individually and removing them from the set. If any other annotations remain, it uses the '__default_sorted_pairs' template to list them. Expects the alert object with an '.Annotations' map as context.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n[[- define \"__default_alert_annotations\" -]]\n[[- $annotations := .Annotations -]]\n[[- if index $annotations \"summary\" ]]\nSummary: [[ index .Annotations \"summary\" -]]\n[[- $annotations = $annotations.Remove (toStrings (list \"summary\")) ]]\n[[- end -]]\n[[- if index $annotations \"description\" ]]\nDescription: [[ index $annotations \"description\" -]]\n[[- $annotations = $annotations.Remove (toStrings (list \"description\")) ]]\n[[- end -]]\n[[- if index $annotations \"runbook_url\" ]]\nRunbook: [[ index $annotations \"runbook_url\" -]]\n[[- $annotations = $annotations.Remove (toStrings (list \"runbook_url\")) ]]\n[[- end -]]\n[[- if $annotations ]]\nAnnotations: [[ template \"__default_sorted_pairs\" $annotations ]]\n[[- end -]]\n[[- end -]]\n```\n\n----------------------------------------\n\nTITLE: Configuring LINE Contact Point - YAML\nDESCRIPTION: Configures a LINE contact point for sending notifications from Grafana. Requires only the authentication 'token'. Assumes valid token provided for proper delivery of alerts to LINE. Outputs are notifications sent to the associated LINE bot. No additional settings required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntype: line\\nsettings:\\n  # <string, required>\\n  token: xxx\\n\n```\n\n----------------------------------------\n\nTITLE: Get Organizations for User - Response Example (json)\nDESCRIPTION: Exemplifies the JSON array response listing organizations for the specified user, each with organization ID, name, and role. Assists in determining user privileges and organization membership within Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"orgId\":1,\\n    \"name\":\"Main Org.\",\\n    \"role\":\"Admin\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth with Terraform Provider\nDESCRIPTION: Terraform configuration to set up GitHub OAuth authentication in Grafana. This snippet defines SSO settings for GitHub including client credentials, permissions, and role attribute mapping.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"github_sso_settings\" {\n  provider_name = \"github\"\n  oauth2_settings {\n    name                  = \"Github\"\n    client_id             = \"YOUR_GITHUB_APP_CLIENT_ID\"\n    client_secret         = \"YOUR_GITHUB_APP_CLIENT_SECRET\"\n    allow_sign_up         = true\n    auto_login            = false\n    scopes                = \"user:email,read:org\"\n    team_ids              = \"150,300\"\n    allowed_organizations = \"[\\\"My Organization\\\", \\\"Octocats\\\"]\"\n    allowed_domains       = \"mycompany.com mycompany.org\"\n    role_attribute_path   = \"[login=='octocat'][0] && 'GrafanaAdmin' || 'Viewer'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Branding for Shared Dashboards\nDESCRIPTION: This configuration section shows how to customize the appearance of shared dashboards specifically. Options include hiding the footer, customizing footer text and logo, and hiding the Grafana logo in the header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-custom-branding/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[white_labeling.public_dashboards]\n\n# Hides the footer for the shared dashboards if set to `true`.\n# example: footer_hide = \"true\"\n;footer_hide =\n\n# Set to text shown in the footer\n;footer_text =\n\n# Set to complete url to override shared dashboard footer logo. Default is `grafana-logo` and will display the Grafana logo.\n# An empty value will hide the footer logo.\n;footer_logo =\n\n# Set to link for the footer\n;footer_link =\n\n# Set to `true` to hide the Grafana logo next to the title\n;header_logo_hide =\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Data Encryption Keys via Grafana Admin HTTP API - HTTP\nDESCRIPTION: This HTTP POST request triggers a global re-encryption of all data encryption keys on a Grafana instance. Expect no request payload and a 204 No Content response on success. Requires proper authentication and encryption management permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/encryption/reencrypt-data-keys HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Admin-Level Organization Details by ID - JSON\nDESCRIPTION: JSON object showing a full organization record, including address fields, as returned from the /api/orgs/:orgId endpoint by a server admin. Fields include id, name, and address details for administrative organization management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\":1,\\n  \"name\":\"Main Org.\",\\n  \"address\":{\\n    \"address1\":\"\",\\n    \"address2\":\"\",\\n    \"city\":\"\",\\n    \"zipCode\":\"\",\\n    \"state\":\"\",\\n    \"country\":\"\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Secret Encryption using Grafana Admin API\nDESCRIPTION: Triggers the rollback of secret encryption via the Grafana Admin API endpoint `/encryption/rollback-secrets`. This decrypts secrets from envelope encryption and re-encrypts them with legacy encryption, typically used for downgrading Grafana. It is recommended to perform this action during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/encryption/rollback-secrets\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Grafana\nDESCRIPTION: INI configuration for setting up JWT authentication in Grafana, including header settings, claim mappings, and role attribute paths.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth]\nsignout_redirect_url = http://env.grafana.local:8088/oauth2/sign_out\n\n[auth.jwt]\nenabled = true\nheader_name = X-Forwarded-Access-Token\nusername_claim = login\nemail_claim = email\njwk_set_file = devenv/docker/blocks/auth/oauth/jwks.json\ncache_ttl = 60m\nexpect_claims = {\"iss\": \"http://env.grafana.local:8087/realms/grafana\", \"azp\": \"grafana-oauth\"}\nauto_sign_up = true\nrole_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\nrole_attribute_strict = false\ngroups_attribute_path = groups[]\nallow_assign_grafana_admin = true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items for a Specific Playlist via Grafana HTTP API\nDESCRIPTION: Sends a GET request to `/api/playlists/:uid/items` to retrieve only the items (dashboards) associated with a specific playlist, identified by its UID. Requires an `Authorization` header with a bearer token. Returns a JSON array of playlist item objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/playlists/1/items HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"id\": 1,\n    \"playlistUid\": \"1\",\n    \"type\": \"dashboard_by_uid\",\n    \"value\": \"3\",\n    \"order\": 1,\n    \"title\":\"my third dashboard\"\n  },\n  {\n    \"id\": 2,\n    \"playlistUid\": \"1\",\n    \"type\": \"dashboard_by_tag\",\n    \"value\": \"myTag\",\n    \"order\": 2,\n    \"title\":\"my other dashboard\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Updating a Grafana Custom Role\nDESCRIPTION: Illustrates a successful HTTP 200 OK response after updating a Grafana custom role via the Access Control API. The JSON body contains the updated role details, including version, UID, name, description, group, display name, permissions, timestamps, and global status. This follows an update request where the role's version must be incremented.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"version\":3,\n    \"uid\":\"jZrmlLCGka\",\n    \"name\":\"custom:delete:write:roles\",\n    \"displayName\":\"custom delete write roles\",\n    \"description\":\"My custom role which gives users permissions to delete and write roles\",\n    \"group\":\"My Group\",\n    \"displayName\": \"My Custom Role\",\n    \"permissions\":[\n        {\n            \"action\":\"roles:delete\",\n            \"scope\":\"permissions:type:delegate\",\n            \"updated\":\"2021-08-06T18:27:40+02:00\",\n            \"created\":\"2021-08-06T18:27:40+02:00\"\n        },\n        {\n            \"action\":\"roles:write\",\n            \"scope\":\"permissions:type:delegate\",\n            \"updated\":\"2021-08-06T18:27:41+02:00\",\n            \"created\":\"2021-08-06T18:27:41+02:00\"\n        }\n    ],\n    \"updated\":\"2021-08-06T18:27:41+02:00\",\n    \"created\":\"2021-08-06T18:27:40+02:00\",\n    \"global\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys Response Example using HTTP/JSON\nDESCRIPTION: Example HTTP 200 OK response for listing API keys from the deprecated `GET /api/auth/keys` endpoint. The body contains a JSON array of API key objects, each including `id`, `name`, `role`, and optionally `expiration` if the key has one set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\": 3,\n    \"name\": \"API\",\n    \"role\": \"Admin\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"TestAdmin\",\n    \"role\": \"Admin\",\n    \"expiration\": \"2019-06-26T10:52:03+03:00\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Folder Permissions in Grafana HTTP API\nDESCRIPTION: This HTTP GET request retrieves all existing permissions for a folder with the given UID. It requires the 'folders.permissions:read' action with 'folders:*' scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/folders/nErXDvCkzz/permissions HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag Keys in InfluxDB for Template Variables\nDESCRIPTION: Query to retrieve all tag keys from a measurement, which can be used in Grafana template variables for dynamic grouping options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TAG KEYS [FROM <measurement_name>]\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on RHEL 8 (Bash)\nDESCRIPTION: Provides a list of library file names required on a minimal RHEL 8 system for Grafana image rendering. Note that this lists library files rather than package names, which might require cross-referencing with package management tools like `yum` or `dnf` to find the corresponding packages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nlinux-vdso.so.1 libdl.so.2 libpthread.so.0 libgobject-2.0.so.0 libglib-2.0.so.0 libnss3.so libnssutil3.so libsmime3.so libnspr4.so libatk-1.0.so.0 libatk-bridge-2.0.so.0 libcups.so.2 libgio-2.0.so.0 libdrm.so.2 libdbus-1.so.3 libexpat.so.1 libxcb.so.1 libxkbcommon.so.0 libm.so.6 libX11.so.6 libXcomposite.so.1 libXdamage.so.1 libXext.so.6 libXfixes.so.3 libXrandr.so.2 libgbm.so.1 libpango-1.0.so.0 libcairo.so.2 libasound.so.2 libatspi.so.0 libgcc_s.so.1 libc.so.6 /lib64/ld-linux-x86-64.so.2 libgnutls.so.30 libpcre.so.1 libffi.so.6 libplc4.so libplds4.so librt.so.1 libgmodule-2.0.so.0 libgssapi_krb5.so.2 libkrb5.so.3 libk5crypto.so.3 libcom_err.so.2 libavahi-common.so.3 libavahi-client.so.3 libcrypt.so.1 libz.so.1 libselinux.so.1 libresolv.so.2 libmount.so.1 libsystemd.so.0 libXau.so.6 libXrender.so.1 libthai.so.0 libfribidi.so.0 libpixman-1.so.0 libfontconfig.so.1 libpng16.so.16 libxcb-render.so.0 libidn2.so.0 libunistring.so.2 libtasn1.so.6 libnettle.so.6 libhogweed.so.4 libgmp.so.10 libkrb5support.so.0 libkeyutils.so.1 libpcre2-8.so.0 libuuid.so.1 liblz4.so.1 libgcrypt.so.20 libbz2.so.1\n```\n\n----------------------------------------\n\nTITLE: Adding Team Permission to Data Source in HTTP\nDESCRIPTION: Sends a POST request to set team permission for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/datasources/my_datasource/teams/1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"permission\": \"Edit\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Renderer Security Token - Bash\nDESCRIPTION: Sets the AUTH_TOKEN environment variable to '-' for the image renderer process, which is required to restrict access to the rendering endpoint. This variable is used in conjunction with both the Grafana and renderer configuration files for authentication. Requires image renderer version v3.6.1 or later and a compatible Grafana version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_TOKEN=-\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Templating Variable in PostgreSQL\nDESCRIPTION: Shows a SQL query that creates a nested templating variable by filtering hosts based on a previously selected region variable. This query demonstrates how to create interdependent variables in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM host WHERE region IN($region)\n```\n\n----------------------------------------\n\nTITLE: Disabling Alert Grouping in Grafana Notification Policies\nDESCRIPTION: This special label `...` is used in the 'Group by' option of a Grafana notification policy to disable grouping. When used (ensuring no other labels are present in the 'Group by' field), each alert instance triggers a separate notification instead of being batched together.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/group-alert-notifications.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n...\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobuf Files - Shell\nDESCRIPTION: This shell command compiles all protobuf definition files in the repository by running the Makefile target 'protobuf'. Run this in the top-level directory. Prerequisite tools include 'make' and protoc and relevant plugins.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmake protobuf\n```\n\n----------------------------------------\n\nTITLE: Retrieving Helm Chart Notes - Helm CLI - Bash\nDESCRIPTION: This snippet uses `helm get notes` to display the post-installation notes for the deployed Grafana Helm release. The notes include information on login, password retrieval, and access URLs. It requires the name of an existing Helm release and namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm get notes my-grafana -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.permissions:reader\nDESCRIPTION: Specifies the `fixed:datasources.permissions:reader` role (ID: `fixed_ErYA-cTN3yn4h4GxaVPcawRhiOY`) within Grafana. This role grants the `datasources.permissions:read` permission, allowing users to read data source permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.permissions:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_ErYA-cTN3yn4h4GxaVPcawRhiOY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- datasources.permissions:read\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:folders:creator\nDESCRIPTION: Specifies the `fixed:folders:creator` role (ID: `fixed_gGLRbZGAGB6n9uECqSh_W382RlQ`) within Grafana. This role grants the `folders:create` permission, allowing users to create folders at the root level.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:folders:creator\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_gGLRbZGAGB6n9uECqSh_W382RlQ\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- folders:create\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Grafana Secrets via CLI Admin Command using Bash\nDESCRIPTION: This command uses the Grafana CLI (`grafana cli`) to re-encrypt all existing secrets in the database using the currently configured primary encryption provider. This is typically run after switching to a new provider like Hashicorp Vault to ensure all secrets use the new key. Requires administrative privileges and is run from the Grafana root directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n   `grafana cli admin secrets-migration re-encrypt`\n```\n\n----------------------------------------\n\nTITLE: InfluxDB SQL Macro Examples with Interpolation\nDESCRIPTION: Examples of SQL queries using Grafana macros for time filtering and date binning, shown with their interpolated values. Demonstrates usage of $__timeFrom, $__timeTo, $__timeFilter, and $__dateBin macros.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n// with macro\n1. SELECT * FROM cpu WHERE time >= $__timeFrom AND time <= $__timeTo\n2. SELECT * FROM cpu WHERE $__timeFilter(time)\n3. SELECT $__dateBin(time) from cpu\n\n// interpolated\n1. SELECT * FROM iox.cpu WHERE time >= cast('2023-12-15T12:38:30Z' as timestamp) AND time <= cast('2023-12-15T18:38:30Z' as timestamp)\n2. SELECT * FROM cpu WHERE time >= '2023-12-15T12:41:28Z' AND time <= '2023-12-15T18:41:28Z'\n3. SELECT date_bin(interval '15 second', time, timestamp '1970-01-01T00:00:00Z') from cpu\n```\n\n----------------------------------------\n\nTITLE: Binding Values in Go with Wire\nDESCRIPTION: Demonstrates how to bind a basic value to a type using wire.Value in a provider set.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    X int\n}\n\nfunc injectFoo() Foo {\n    wire.Build(wire.Value(Foo{X: 42}))\n    return Foo{}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Plugin Repository URL (Bash)\nDESCRIPTION: Shows how to use the '--repo' global option to download and install or update plugins from a custom repository URL ('https://example.com/plugins') instead of the default Grafana repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --repo \\\"https://example.com/plugins\\\" plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Team Members List Response Example - JSON\nDESCRIPTION: Shows the array of team members as returned by the team members endpoint. Each member entry includes organization ID, team ID, user ID, email, login, and avatar URL. Useful for displaying list views of team participants.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \\\"orgId\\\": 1,\\n    \\\"teamId\\\": 1,\\n    \\\"userId\\\": 3,\\n    \\\"email\\\": \\\"user1@email.com\\\",\\n    \\\"login\\\": \\\"user1\\\",\\n    \\\"avatarUrl\\\": \\\"\\/avatar\\/1b3c32f6386b0185c40d359cdc733a79\\\"\\n  },\\n  {\\n    \\\"orgId\\\": 1,\\n    \\\"teamId\\\": 1,\\n    \\\"userId\\\": 2,\\n    \\\"email\\\": \\\"user2@email.com\\\",\\n    \\\"login\\\": \\\"user2\\\",\\n    \\\"avatarUrl\\\": \\\"\\/avatar\\/cad3c68da76e45d10269e8ef02f8e73e\\\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana System User - Shell\nDESCRIPTION: Creates a dedicated, non-login system user 'grafana' for secure running of the Grafana binary. Input: None. Output: System account with no shell access. Required for secure standalone deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo useradd -r -s /bin/false grafana\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Binary Placement (Linux/macOS)\nDESCRIPTION: This command uses 'ls' to check for the existence of the 'prometheus' and 'promtool' binaries in the '/usr/local/bin' directory, a common location for installed executables. It helps verify if Prometheus components are installed correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nls /usr/local/bin/prometheus /usr/local/bin/promtool\n```\n\n----------------------------------------\n\nTITLE: Fetching Loki Label Names with datasource.languageProvider - TypeScript\nDESCRIPTION: Demonstrates how to asynchronously fetch all available label keys from a connected Loki data source using the fetchLabels method. This method accepts optional parameters for stream selector and time range, returning a Promise that resolves to an array of label keys. The function is designed to be robust, supporting error handling and leveraging API caching, authentication management, and advanced instrumentation if enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Fetch label keys using the best applicable endpoint.\n *\n * This asynchronous function returns all available label keys from the data source.\n * It returns a promise that resolves to an array of strings containing the label keys.\n *\n * @param options - (Optional) An object containing additional options.\n * @param options.streamSelector - (Optional) The stream selector to filter label keys. If not provided, all label keys are fetched.\n * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.\n * @returns A promise containing an array of label keys.\n * @throws An error if the fetch operation fails.\n */\nasync function fetchLabels(options?: { streamSelector?: string; timeRange?: TimeRange }): Promise<string[]>;\n\n/**\n * Example usage:\n */\n\ntry {\n  const labelKeys = await fetchLabels();\n  console.log(labelKeys);\n} catch (error) {\n  console.error(`Error fetching label keys: ${error.message}`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Service Status via systemd (Linux)\nDESCRIPTION: This command uses 'systemctl', the systemd init system tool, to check the detailed status of the 'prometheus.service' unit. It's used to verify if Prometheus is correctly set up and running as a managed service on Linux distributions using systemd.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status prometheus.service\n```\n\n----------------------------------------\n\nTITLE: Extracting Host and Manipulating Domains with Go Templates - Go Template\nDESCRIPTION: Examples of using {{ stripPort }} and {{ stripDomain }} functions to extract the host (removing port), or strip the domain part of an FQDN, within Grafana's Go template context. Inputs are address strings; outputs are the hostname without port or the FQDN minus the domain. Useful for display or further processing in monitoring outputs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_9\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ stripPort \"example.com:8080\" }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ stripDomain \"example.com:8080\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployment Status using Bash\nDESCRIPTION: Checks the status of the Grafana Deployment within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides extra information, like the node where pods are running. This command verifies the desired number of replicas are ready, up-to-date, and available, indicating if the Grafana application pods are running correctly. Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get deployments --namespace=my-grafana -o wide\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials as Environment Variables for Grafana (Shell)\nDESCRIPTION: This snippet shows example environment variables (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`) that must be set on the host or container running Grafana. These variables provide the necessary AWS credentials for Grafana to authenticate with AWS License Manager and retrieve license information. Replace the example values with the actual access key ID, secret access key, and AWS region of the dedicated IAM user created previously.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nAWS_ACCESS_KEY_ID=ABCD5E75FGHIJKTM7\nAWS_SECRET_ACCESS_KEY=k8fhYAQVy+5NhCejhe6HeSjSphjRuy+12C06\nAWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Verifying Group Access on Certificate Symlinks - Bash\nDESCRIPTION: This bash snippet verifies that files and symlinks used by Grafana are readable by the 'grafana' group. It lists the current permissions and ownership for all matching files in the grafana directory, ensuring each is accessible as intended. The output confirms symlink targets and file permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -l /etc/grafana/grafana.*\n\nlrwxrwxrwx 1 root grafana    67 Mar 22 14:15 /etc/grafana/grafana.crt -> /etc/letsencrypt/live/subdomain.mysite.com/fullchain.pem\n-rw-r----- 1 root grafana 54554 Mar 22 14:13 /etc/grafana/grafana.ini\nlrwxrwxrwx 1 root grafana    65 Mar 22 14:15 /etc/grafana/grafana.key -> /etc/letsencrypt/live/subdomain.mysite.com/privkey.pem\n```\n\n----------------------------------------\n\nTITLE: Backing up and Restoring PostgreSQL Database for Grafana\nDESCRIPTION: Commands for backing up and restoring a PostgreSQL database used by Grafana. Uses pg_dump for backup and psql for restore operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/back-up/back-up-grafana.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbackup:\n> pg_dump grafana > grafana_backup\n\nrestore:\n> psql grafana < grafana_backup\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Team by ID - HTTP\nDESCRIPTION: Requests detailed information for a specific team using its numeric ID. The user must provide a valid Bearer token in the Authorization header. The response returns team details in JSON format, including creation and update timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/teams/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Including Query Labels and Values in Annotation\nDESCRIPTION: This Go template demonstrates combining both query labels (e.g., `instance`) and query values (e.g., `A.Value`) within a Grafana alert annotation. It accesses the label using the `$labels` variable and the value using the `$values` variable to provide richer context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_3\n\nLANGUAGE: gotemplate\nCODE:\n```\nCPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Implementing withTheme Higher-Order Component\nDESCRIPTION: Shows how to use the withTheme higher-order component to wrap a component and provide it with the current theme via the theme prop.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport  { ThemeContext, Themeable } from '@grafana/ui';\n\ninterface FooProps extends Themeable2 {}\n\nconst Foo: React.FunctionComponent<FooProps> = () => ...\n\nexport default withTheme2(Foo);\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Alert Label Set\nDESCRIPTION: Defines an example set of key-value labels (`foo=bar`, `baz=qux`, `id=12`) associated with a Grafana alert. This set is used as a basis for demonstrating how various label matchers work.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{ foo=bar, baz=qux, id=12 }\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server using Binary (Windows)\nDESCRIPTION: Executes the Grafana server binary (`grafana.exe`) directly from the command line on Windows. The binary is typically located in the `bin` subdirectory of the installation folder.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\ngrafana.exe server\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Grafana Role Creation API - JSON Example\nDESCRIPTION: This JSON code snippet illustrates the typical HTTP API response received upon successful creation of a custom role in Grafana. It includes all role attributes such as version, unique identifier, name, display name, description, and permissions with timestamps. No prerequisites beyond API access; output shows resource state and CRUD timestamps. The actual permission fields may vary as per Grafana version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 1,\n    \"uid\": \"jZrmlLCkGksdka\",\n    \"name\": \"custom:users:admin\",\n    \"displayName\": \"custom users admin\",\n    \"description\": \"My custom role which gives users permissions to create users\",\n    \"global\": true,\n    \"permissions\": [\n        {\n            \"action\": \"users:create\"\n            \"updated\": \"2021-05-17T22:07:31.569936+02:00\",\n            \"created\": \"2021-05-17T22:07:31.569935+02:00\"\n        }\n    ],\n    \"updated\": \"2021-05-17T22:07:31.564403+02:00\",\n    \"created\": \"2021-05-17T22:07:31.564403+02:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cell Rendering in InteractiveTable with TSX\nDESCRIPTION: This TSX snippet demonstrates how to customize the rendering of individual table cells within the `InteractiveTable`. It defines a `TableData` interface and a custom functional component `RepoCell` which receives cell properties (`CellProps`) and returns a `LinkButton` based on the row's data. The `columns` definition specifies this `RepoCell` component for the 'repo' column using the `cell` property. The `InteractiveTable` is then rendered with these custom columns and data.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface TableData {\n  datasource: string;\n  repo: string;\n}\n\nconst RepoCell = ({\n  row: {\n    original: { repo },\n  },\n}: CellProps<WithCustomCellData, void>) => {\n  return (\n    <LinkButton href={repo} size=\"sm\" icon=\"external-link-alt\">\n      Open on GitHub\n    </LinkButton>\n  );\n};\n\nconst tableData: WithCustomCellData[] = [\n  {\n    datasource: 'Prometheus',\n    repo: 'https://github.com/prometheus/prometheus',\n  },\n  {\n    datasource: 'Loki',\n    repo: 'https://github.com/grafana/loki',\n  },\n  {\n    datasource: 'Tempo',\n    repo: 'https://github.com/grafana/tempo',\n  },\n];\n\nconst columns: Array<Column<WithCustomCellData>> = [\n  { id: 'datasource', header: 'Data Source' },\n  { id: 'repo', header: 'Repo', cell: RepoCell },\n];\n\nexport const MyComponent = () => {\n  return <InteractiveTable columns={columns} data={tableData} getRowId={(r) => r.datasource} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Selection in Combobox\nDESCRIPTION: Test code showing how to test keyboard-based option selection in the Combobox component using React Testing Library.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(<Combobox options={options} value={null} onChange={onChangeHandler} />);\n\nconst input = screen.getByRole('combobox');\nawait userEvent.type(input, 'Option 3');\nawait userEvent.keyboard('{ArrowDown}{Enter}');\n\nexpect(screen.getByDisplayValue('Option 3')).toBeInTheDocument();\n```\n\n----------------------------------------\n\nTITLE: Response for Retrieving Snapshot by Key via Grafana HTTP API (HTTP)\nDESCRIPTION: Presents the typical JSON response received when fetching a dashboard snapshot by key. The response includes 'meta' fields indicating snapshot properties and a nested dashboard object defining its settings and state, suitable for UI consumption or further processing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n  \"meta\":{\\n    \"isSnapshot\":true,\\n    \"type\":\"snapshot\",\\n    \"canSave\":false,\\n    \"canEdit\":false,\\n    \"canStar\":false,\\n    \"slug\":\"\",\\n    \"expires\":\"2200-13-32T25:23:23+02:00\",\\n    \"created\":\"2200-13-32T28:24:23+02:00\"\\n  },\\n  \"dashboard\": {\\n    \"editable\":false,\\n    \"nav\": [\\n      {\\n        \"enable\":false,\\n        \"type\":\"timepicker\"\\n      }\\n    ],\\n    \"rows\": [\\n      {\\n\\n      }\\n    ],\\n    \"style\":\"dark\",\\n    \"tags\":[],\\n    \"templating\":{\\n      \"list\":[\\n      ]\\n    },\\n    \"time\":{\\n    },\\n    \"timezone\":\"browser\",\\n    \"title\":\"Home\",\\n    \"version\":5\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Usage Report Preview Request\nDESCRIPTION: Example response showing a preview of the Grafana usage report with metrics about active users, alerts, and other usage statistics.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n\t\"version\": \"8_4_0\",\n\t\"metrics\": {\n\t\t\"stats.active_admins.count\": 1,\n\t\t\"stats.active_editors.count\": 1,\n\t\t\"stats.active_sessions.count\": 0,\n\t\t\"stats.active_users.count\": 2,\n\t\t\"stats.active_viewers.count\": 0,\n\t\t\"stats.admins.count\": 1,\n\t\t\"stats.alert_rules.count\": 0,\n\t\t\"stats.alerting.ds.other.count\": 0,\n\t\t\"stats.alerts.count\": 5,\n\t\t\"stats.annotations.count\": 6,\n\t\t\"stats.api_keys.count\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Top-Level Use of t() Translation Function (React, TypeScript/JSX)\nDESCRIPTION: These code snippets illustrate the anti-pattern of invoking the t() translation function at file scope, which can cause translation issues in tests and lazy-loaded modules. The good examples ensure that translations are performed within React components or functions, preserving context. Dependencies: t() from @grafana/i18n, React for function components. Inputs: components or shared config data. Outputs: translated strings or config available at the appropriate time in the component lifecycle.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad ❌\nconst someTranslatedText = t('some.key', 'Some text');\nconst SomeComponent = () => {\n  return <div title={someTranslatedText} />;\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅\nconst SomeComponent = () => {\n  const someTranslatedText = t('some.key', 'Some text');\n  return <div title={someTranslatedText} />;\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad ❌\nconst someConfigThatHasToBeShared = [{ foo: t('some.key', 'Some text') }];\nconst SomeComponent = () => {\n  return (\n    <div>\n      {someConfigThatHasToBeShared.map((cfg) => {\n        return <div>{cfg.foo}</div>;\n      })}\n    </div>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅\nconst someConfigThatHasToBeShared = () => [{ foo: t('some.key', 'Some text') }];\nconst SomeComponent = () => {\n  const configs = someConfigThatHasToBeShared();\n  return (\n    <div>\n      {configs.map((cfg) => {\n        return <div>{cfg.foo}</div>;\n      })}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Uploading Zipkin Trace Data - Grafana (JSON)\nDESCRIPTION: This JSON snippet exemplifies a single Zipkin-formatted trace suitable for upload and visualization in Grafana’s Zipkin data source. It includes traceId, parentId, span id, service details, tags, and timing fields. Requires a valid Zipkin schema and is intended for viewing a single trace in the UI (only the first trace is displayed if multiple are present). Tags such as 'http.method' and operation names are used for filtering and timeline displays. Ensure numeric values for timestamps and durations, and that field names match Zipkin conventions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/zipkin/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"traceId\": \"efe9cb8857f68c8f\",\n    \"parentId\": \"efe9cb8857f68c8f\",\n    \"id\": \"8608dc6ce5cafe8e\",\n    \"kind\": \"SERVER\",\n    \"name\": \"get /api\",\n    \"timestamp\": 1627975249601797,\n    \"duration\": 23457,\n    \"localEndpoint\": { \"serviceName\": \"backend\", \"ipv4\": \"127.0.0.1\", \"port\": 9000 },\n    \"tags\": {\n      \"http.method\": \"GET\",\n      \"http.path\": \"/api\",\n      \"jaxrs.resource.class\": \"Resource\",\n      \"jaxrs.resource.method\": \"printDate\"\n    },\n    \"shared\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Sample Application Services with Docker Compose - Bash\nDESCRIPTION: This snippet shows how to launch all predefined services (Grafana, Prometheus, Loki, etc.) in detached mode using Docker Compose. It requires 'docker-compose.yml' to exist (typically in the current directory after changing to the cloned repo folder). All dependencies (Docker, Docker Compose, sample repo) must be installed, and any conflicting services occupying necessary ports must be stopped. Input: None (run from project directory). Output: Services start in the background; images are pulled if needed. This command can fail if ports are already in use or if Docker is not running.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarButton Components in React JSX\nDESCRIPTION: This snippet demonstrates how to use multiple ToolbarButton components within a ToolbarButtonRow. It shows different variants of the button, including default and primary, as well as how to use icons and group buttons together.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ToolbarButton/ToolbarButton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolbarButtonRow>\n  <ToolbarButton variant=\"default\" iconOnly={false} isOpen={false}>\n    Last 6 hours\n  </ToolbarButton>\n  <ButtonGroup>\n    <ToolbarButton icon=\"search-minus\" variant=\"default\" />\n    <ToolbarButton icon=\"search-plus\" variant=\"default\" />\n  </ButtonGroup>\n  <ToolbarButton icon=\"sync\" isOpen={false} variant=\"primary\" />\n</ToolbarButtonRow>\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Organizations with Spaces using JSON Syntax in Grafana INI\nDESCRIPTION: Shows how to specify the `allowed_organizations` setting within Grafana's configuration using JSON array syntax. This format is required when organization names contain spaces, ensuring only users belonging to \"org 1\" or \"second org\" can log in via SAML.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nallowed_organizations = [\"org 1\", \"second org\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Year using Go Template Functions\nDESCRIPTION: This Go template snippet calculates and displays the current year in the email footer. It uses the `now` function to get the current time and pipes the result to the `date` function with the format string \"2006\" (Go's reference time format for the year). Requires the Go templating engine and availability of `now` and `date` template functions.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_5\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{now | date \"2006\"}}\n```\n\n----------------------------------------\n\nTITLE: Including Grafana Backup Instructions using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds shared instructions for backing up Grafana before an upgrade. It points to 'back-up/back-up-grafana.md' and uses 'leveloffset=\"+1\"' to adjust the heading levels of the included content for proper document structure relative to the current page. The 'source' and 'version' parameters provide context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"back-up/back-up-grafana.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tag Component Example in Storybook Canvas\nDESCRIPTION: This snippet uses the Storybook Canvas component to render an example of the Tag component. It specifically renders the 'Single' story from the TagStories.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={TagStories.Single} />\n```\n\n----------------------------------------\n\nTITLE: Integrating FileDropzone Component in React - JSX\nDESCRIPTION: This snippet demonstrates how to import and render the FileDropzone component from the '@grafana/ui' package in a React application. The FileDropzone is provided with an onLoad callback prop, which receives the uploaded file's result and logs it to the console. To use this code, ensure that '@grafana/ui' is installed as a dependency in your project, and that you are working within a React environment supporting JSX syntax. The onLoad function parameter represents the result of the file upload, and proper error handling should be added for production scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileDropzone/FileDropzone.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileDropzone } from '@grafana/ui';\n\n<FileDropzone onLoad={(result) => console.log(result)} />;\n```\n\n----------------------------------------\n\nTITLE: Get Teams for User - Response Example (json)\nDESCRIPTION: Displays the JSON array structure of teams associated with a user, including properties such as team ID, organization ID, name, email, avatar URL, and member count. Useful for audit and access management features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"id\":1,\\n    \"orgId\":1,\\n    \"name\":\"team1\",\\n    \"email\":\"\",\\n    \"avatarUrl\":\"/avatar/3fcfe295eae3bcb67a49349377428a66\",\\n    \"memberCount\":1\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy to Proxy Grafana Under a Sub Path - Bash\nDESCRIPTION: Provides an example HAProxy configuration for routing traffic on path /grafana (or subpaths) to the Grafana backend. It demonstrates conditional backend switching with 'use_backend', path rewriting for versions 1.6+, and compatibility with older versions through the commented 'reqrep' line. Place this inside haproxy.cfg; restart HAProxy for changes. This setup is effective for sub path-based service segmentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfrontend http-in\\n  bind *:80\\n  use_backend grafana_backend if { path /grafana } or { path_beg /grafana/ }\\n\\nbackend grafana_backend\\n  server grafana localhost:3000\\n  # Requires haproxy >= 1.6\\n  http-request set-path %[path,regsub(^/grafana/?,/)]\\n  # Works for haproxy < 1.6\\n  # reqrep ^([\\\\^\\\\ ]*\\\\ /)grafana[/]?(.*) \\\\1\\\\2\\n\\n  server grafana localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Context Usage Example\nDESCRIPTION: Example demonstrating the use of context.Context as the first parameter in Go functions following best practices\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/recommended-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncontext.TODO\n```\n\n----------------------------------------\n\nTITLE: Updating All Installed Grafana Plugins (Bash)\nDESCRIPTION: Command 'plugins update-all' attempts to update all currently installed Grafana plugins to their latest compatible versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins update-all\n```\n\n----------------------------------------\n\nTITLE: Querying Production Memory Usage with PromQL\nDESCRIPTION: PromQL query used within a Grafana time series panel to retrieve the `flask_app_memory_usage` metric specifically for the 'prod' environment. This metric is used alongside CPU usage for visualization and defining alert rules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_5\n\nLANGUAGE: promql\nCODE:\n```\nflask_app_memory_usage{environment=\"prod\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite Attribute for Grafana Cookies in TOML\nDESCRIPTION: Configures the `cookie_samesite` setting within the `[security]` section of `grafana.ini`. Setting this to `strict` helps mitigate Cross-Site Request Forgery (CSRF) attacks by preventing the browser from sending the cookie with cross-site requests, although it may restrict certain user actions. Other valid values are \"lax\" (default), \"none\", and \"disabled\".\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-security-hardening/index.md#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[security]\n# set cookie SameSite attribute. defaults to `lax`. can be set to \"lax\", \"strict\", \"none\" and \"disabled\"\ncookie_samesite = strict\n```\n\n----------------------------------------\n\nTITLE: Retrieving Snapshot by Key via Grafana HTTP API (HTTP)\nDESCRIPTION: Depicts the GET request structure for retrieving a single snapshot using its unique key in the Grafana API. Requires valid bearer token authentication. The request pattern is usable in automation and external integrations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/snapshots/YYYYYYY HTTP/1.1\\nAccept: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Server Admin Role in Azure AD App Manifest (JSON)\nDESCRIPTION: This JSON snippet illustrates how to define a specific application role named 'GrafanaAdmin' within the Azure AD application manifest. When a user assigned this role logs into Grafana via Azure AD OAuth, and if Grafana's `allow_assign_grafana_admin` setting is enabled, the user will be granted Grafana server administrator privileges. The `SOME_UNIQUE_ID` placeholder must be replaced with a generated UUID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \\\"allowedMemberTypes\\\": [\\\"User\\\"],\n  \\\"description\\\": \\\"Grafana server admin Users\\\",\n  \\\"displayName\\\": \\\"Grafana Server Admin\\\",\n  \\\"id\\\": \\\"SOME_UNIQUE_ID\\\",\n  \\\"isEnabled\\\": true,\n  \\\"lang\\\": null,\n  \\\"origin\\\": \\\"Application\\\",\n  \\\"value\\\": \\\"GrafanaAdmin\\\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Grafana systemd Service Unit (Bash)\nDESCRIPTION: This command uses `systemctl edit` to open or create a systemd override file for the `grafana-server.service` in the default editor. This allows customization of the service unit without modifying the original. Requires `sudo` privileges. An alternative is manually creating a file at `/etc/systemd/system/grafana-server.service.d/override.conf`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/systemd/bind-net-capabilities.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Alternatively, create a file in /etc/systemd/system/grafana-server.service.d/override.conf\nsudo systemctl edit grafana-server.service\n```\n\n----------------------------------------\n\nTITLE: Listing Grafana CLI Commands and Options (Bash)\nDESCRIPTION: Displays the help message for the Grafana CLI, listing all available commands, global options, and potentially default path information. This is used to get an overview of the CLI's capabilities.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli -h\n```\n\n----------------------------------------\n\nTITLE: Importing Loki Alert Rules with Coretextool - Bash\nDESCRIPTION: A coretextool command-line example to list (and by implication, manage) alert rules targeting Loki as the backend. Set CORTEX_ADDRESS, CORTEX_AUTH_TOKEN, and CORTEX_TENANT_ID environment variables to point to your Grafana endpoint and provide your service account credentials. The --backend=loki argument specifies that the operation should use Loki for alert rule management. This command depends on coretextool >= 0.11.3.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCORTEX_ADDRESS=<grafana url>/api/convert/ CORTEX_AUTH_TOKEN=<your token> CORTEX_TENANT_ID=1 cortextool rules --backend=loki list\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations for Actual User via Grafana API (HTTP)\nDESCRIPTION: Retrieves a list of organizations the currently authenticated user belongs to via a GET request to `/api/user/orgs`. Requires Basic Authentication. The response is a JSON array of organization objects, each containing `orgId`, `name`, and the user's `role` within that organization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /api/user/orgs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"orgId\":1,\n    \"name\":\"Main Org.\",\n    \"role\":\"Admin\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Receiver Permissions in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to manage (create, update, delete) permissions for contact points (receivers) in Grafana. This action is typically associated with broader `receivers:*` or specific `receivers:uid:*` scopes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`receivers.permissions:write`\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of API keys. `apikeys:*` matches any API key, whereas `apikeys:id:1` targets the specific API key with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\napikeys:*\n```\n\nLANGUAGE: text\nCODE:\n```\napikeys:id:*\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Users in Current Organization via REST API - HTTP\nDESCRIPTION: This HTTP request fetches all users in the current organization through the /api/org/users endpoint, authenticated with a Bearer token. It should be used by users with org admin role. It expects and returns application/json format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/org/users HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Moving Grafana Binary to Install Location - Shell\nDESCRIPTION: Moves downloaded and unpacked Grafana binaries from a download path to '/usr/local/grafana'. Placeholders (<DOWNLOAD PATH>) must be replaced by actual file/directory path. Requires sudo, mv executable. No outputs except relocated files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv <DOWNLOAD PATH> /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Querying RBAC Status in Grafana API\nDESCRIPTION: Makes a GET request to check if role-based access control is enabled. Requires the 'status:accesscontrol' action on 'services:accesscontrol' scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/status\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Migrating All API Keys to Service Accounts - Grafana HTTP API - HTTP\nDESCRIPTION: This example demonstrates the migration of all existing API keys to service accounts by issuing a POST request to the dedicate endpoint. Proper authentication headers are needed. The simple JSON response confirms the migration was completed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts/migrate HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"message\": \"API keys migrated to service accounts\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Time Shift Overrides in Grafana Query Options\nDESCRIPTION: Provides examples of string values for the 'Time shift' query option in Grafana panels. These strings shift the panel's time range relative to the dashboard's time picker, allowing comparisons with past data like 'last entire week' or 'two entire weeks ago'. The `/w`, `/M`, `/y` specifiers align the shift to the start of the week, month, or year, respectively. This feature only functions when the dashboard's time range is relative.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Example              | Time shift field |\n| -------------------- | ---------------- |\n| Last entire week     | `1w/w`           |\n| Two entire weeks ago | `2w/w`           |\n| Last entire month    | `1M/M`           |\n| This entire year     | `1d/y`           |\n| Last entire year     | `1y/y`           |\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring LDAP User in FreeIPA\nDESCRIPTION: Commands to create a new LDAP user, set their password, and configure their LDAP password for Grafana authentication. This creates a user named 'ldap-viewer' with password 'grafana123'.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nipa user-add ldap-viewer --first ldap --last viewer\nipa passwd ldap-viewer\nldappasswd -D uid=ldap-viewer,cn=users,cn=accounts,dc=example,dc=org -w test -a test -s grafana123\n```\n\n----------------------------------------\n\nTITLE: Serving API Documentation Locally with Make\nDESCRIPTION: This command uses Make to regenerate the Swagger document and then hosts the rendered documentation locally. The API documentation becomes accessible via a web browser at http://localhost on port 80.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nmake serve\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample Data Table in PostgreSQL\nDESCRIPTION: Shows a sample data table structure with time, value, creation timestamp, and hostname columns. This table is used as a reference for the query examples in the document.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+---------------------+--------------+---------------------+----------+\n| time_date_time      | value_double | CreatedAt           | hostname |\n+---------------------+--------------+---------------------+----------+\n| 2020-01-02 03:05:00 | 3.0          | 2020-01-02 03:05:00 | 10.0.1.1 |\n| 2020-01-02 03:06:00 | 4.0          | 2020-01-02 03:06:00 | 10.0.1.2 |\n| 2020-01-02 03:10:00 | 6.0          | 2020-01-02 03:10:00 | 10.0.1.1 |\n| 2020-01-02 03:11:00 | 7.0          | 2020-01-02 03:11:00 | 10.0.1.2 |\n| 2020-01-02 03:20:00 | 5.0          | 2020-01-02 03:20:00 | 10.0.1.2 |\n+---------------------+--------------+---------------------+----------+\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Timing Metrics - Bash\nDESCRIPTION: Sets RENDERING_TIMING_METRICS environment variable to enable detailed stepwise rendering duration metrics in Grafana's remote rendering. Requires at least v3.9.0+. Used alongside Prometheus metrics for deeper performance visibility. No required parameters other than 'true'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_TIMING_METRICS=true\n```\n\n----------------------------------------\n\nTITLE: Accessing Index and Value with 'range' in Go Templates\nDESCRIPTION: Demonstrates how to retrieve both the index (`$index`) and the value (`$item`) while iterating over a collection (`$array`) using the `range` statement. It also shows pre-calculating the total number of items using `len` for context within the loop.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n{{ $num_items := len $array }}\n{{ range $index, $item := $array }}\nThis is item {{ $index }} out of {{ $num_items }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Database Connection via grafana.ini\nDESCRIPTION: Configures the database connection for Grafana High Availability by editing the `grafana.ini` file, typically managed via a Kubernetes ConfigMap (`kubectl edit configmap grafana`). Replace the bracketed placeholders with your actual database connection details (type, host/port, name, user, password). This is necessary for persistent storage in an HA setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[database]\ntype = [database type]\nhost = [database address and port]\nname = [database name]\nuser = [database username]\npassword = [database password]\n```\n\n----------------------------------------\n\nTITLE: Enabling Unified Storage Search - INI\nDESCRIPTION: This INI configuration enables search UI and backend for Unified Storage in Grafana and associated toggles for dashboard folder search and permission filtering. Options for enterprise features such as usage insights sorting are also shown. Proper placement within the [feature_toggles] section is required.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\\n; Used by the Grafana instance\\nunifiedStorageSearchUI = true\\nkubernetesClientDashboardsFolders = true\\n\\n; Used by unified storage\\nunifiedStorageSearch = true\\n; (optional) Allows you to sort dashboards by usage insights fields when using enterprise\\n; unifiedStorageSearchSprinkles = true\\n; (optional) Will skip search results filter based on user permissions\\n; unifiedStorageSearchPermissionFiltering = false\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana OSS via DNF in Bash\nDESCRIPTION: Installs the Grafana Open Source (OSS) edition using the `dnf` package manager. This command requires `sudo` privileges and assumes the Grafana repository has been previously configured (e.g., via the `grafana.repo` file).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install grafana\n```\n\n----------------------------------------\n\nTITLE: Source Correlations Retrieval Response in Grafana HTTP API\nDESCRIPTION: HTTP response containing an array of all correlations originating from a specific data source. Each correlation in the array includes complete details of the relationship.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"description\": \"Logs to Traces\",\n    \"label\": \"My Label\",\n    \"sourceUID\": \"uyBf2637k\",\n    \"targetUID\": \"PDDA8E780A17E7EF1\",\n    \"uid\": \"J6gn7d31L\",\n    \"provisioned\": false,\n    \"type\": \"query\",\n    \"config\": {\n      \"field\": \"message\",\n      \"target\": {},\n    }\n  },\n  {\n    \"description\": \"Logs to Metrics\",\n    \"label\": \"Another Label\",\n    \"sourceUID\": \"uyBf2637k\",\n    \"targetUID\": \"P15396BDD62B2BE29\",\n    \"uid\": \"uWCpURgVk\",\n    \"provisioned\": false,\n    \"type\": \"query\",\n    \"config\": {\n      \"field\": \"message\",\n      \"target\": {},\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Role Mapping from a Simple Attribute (Bash/INI)\nDESCRIPTION: Grafana configuration snippet setting the `role_attribute_path` to directly use the value of the 'role' field from the OAuth2 payload for determining the user's Grafana role. This corresponds to the simple JSON payload example.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = role\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Contact Point - YAML\nDESCRIPTION: Sets up MQTT integration for Grafana alerts, specifying broker URL, topic, clientId, authentication parameters, message format, and optional TLS configuration. Credentials, topic, and QoS/retain parameters can be adjusted for tailored delivery. Input fields require valid MQTT connection parameters. TLS settings allow for secure connections using PEM-formatted certificates and keys.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntype: mqtt\\nsettings:\\n  # <string, required>\\n  brokerUrl: tcp://127.0.0.1:1883\\n  # <string>\\n  clientId: grafana\\n  # <string, required>\\n  topic: grafana/alerts\\n  # <string>\\n  messageFormat: json\\n  # <string>\\n  username: grafana\\n  # <string>\\n  password: password1\\n  # <string>\\n  qos: 0\\n  # <bool>\\n  retain: false\\n  # <map>\\n  tlsConfig:\\n    # <bool>\\n    insecureSkipVerify: false\\n    # <string>\\n    clientCertificate: certificate in PEM format\\n    # <string>\\n    clientKey: key in PEM format\\n    # <string>\\n    caCertificate: CA certificate in PEM format\\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Correlations in Grafana HTTP API\nDESCRIPTION: HTTP request for deleting a specific correlation identified by both the source data source UID and the correlation UID. This permanently removes the correlation relationship.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/datasources/uid/uyBf2637k/correlations/J6gn7d31L HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Trace to Metrics Query Interpolation Example (Markdown)\nDESCRIPTION: Shows how to use the $__tags keyword for interpolating tags in metrics queries, with an example of how the query is transformed using configured tag mappings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFor example, when you configure the query `requests_total{$__tags}`with the tags `k8s.pod=pod` and `cluster`, the result looks like `requests_total{pod=\"nginx-554b9\", cluster=\"us-east-1\"}`.\n```\n\n----------------------------------------\n\nTITLE: Checking if Prometheus Process is Running (macOS)\nDESCRIPTION: This command uses 'pgrep' on macOS to search for running processes named 'prometheus'. If the Prometheus process is running, it will output its process ID (PID); otherwise, it will produce no output.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npgrep prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining Span Filters Options Table in Markdown\nDESCRIPTION: This snippet presents a markdown table that defines various span filter options available in Grafana's trace visualization. It includes options for initial filter state, service and span name filtering, duration thresholds, and tag-based filtering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/traces/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option | Description |\n| ------ | ----------- |\n| Find in trace | Set the initial value to focus on spans relevant to your query. |\n| Show matches only | Toggle the switch on to display only spans that match the defined filter criteria. This helps simplify trace interpretation. |\n| Show critical path only | Toggle the switch on to highlight only the spans in the critical path, which helps identify performance bottlenecks and their impact on overall latency. |\n| Service name | Along with the **Service name operator**, define a specific service or pattern to narrow analysis to spans related to particular services. |\n| Span name | Along with the **Span name operator**, filter spans by name or pattern to focus on specific span types or processes. |\n| Min duration | Set the minimum duration threshold to exclude spans outside the desired time range. |\n| Max duration | Set the maximum duration threshold to exclude spans outside the desired time range. |\n| Tags | Add one or more tags to further refine the filtering criteria so only relevant spans are displayed. |\n```\n\n----------------------------------------\n\nTITLE: Sending Test Email with Report in Grafana API (HTTP)\nDESCRIPTION: This HTTP request demonstrates how to send a test email with a report using the Grafana Reporting API. It includes a JSON body with report configuration details such as recipients, schedule, dashboard, and export formats.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/test-email HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{{\n\t\"name\": \"Report 4\",\n\t\"recipients\": \"example-report@grafana.com\",\n\t\"replyTo\": \"\",\n\t\"message\": \"Hello, please, find the report attached\",\n\t\"schedule\": {\n\t\t\"startDate\": \"2022-10-02T10:00:00+02:00\",\n\t\t\"endDate\": \"2022-11-02T20:00:00+02:00\",\n\t\t\"frequency\": \"daily\",\n\t\t\"intervalFrequency\": \"\",\n\t\t\"intervalAmount\": 0,\n\t\t\"workdaysOnly\": true,\n\t\t\"timeZone\": \"Europe/Warsaw\"\n\t},\n\t\"options\": {\n\t\t\"orientation\": \"landscape\",\n\t\t\"layout\": \"grid\"\n\t},\n\t\"enableDashboardUrl\": true,\n\t\"dashboards\": [\n\t\t{\n\t\t\t\"dashboard\": {\n\t\t\t\t\"uid\": \"7MeksYbmk\",\n\t\t\t},\n\t\t\t\"timeRange\": {\n\t\t\t\t\"from\": \"2022-08-08T15:00:00+02:00\",\n\t\t\t\t\"to\": \"2022-09-02T17:00:00+02:00\"\n\t\t\t},\n\t\t\t\"reportVariables\": {\n\t\t\t\t\"variable1\": \"Value1\"\n\t\t\t}\n\t\t}\n\t],\n\t\"formats\": [\n\t\t\"pdf\",\n\t\t\"csv\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Grafana Annotations with Epoch Time\nDESCRIPTION: This query retrieves data for Grafana annotations using a time column with epoch values. It selects time, description as text, and tags from an events table.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  time_sec as time,\n  description as [text],\n  tags\nFROM\n  [events]\nWHERE\n  $__unixEpochFilter(time_sec)\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Variable Interpolation using Object Child Syntax with Trans in JSX\nDESCRIPTION: Demonstrates the syntax for interpolating variables within the `<Trans>` component by including them as object children (e.g., `{{ name: user.name }}` or `{{ userName }}`). Requires `Trans` import from `app/core/internationalization`. Variables must be strings or support `.toString()`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\n\n<Trans i18nKey=\"page.greeting\">Hello {{ name: user.name }}!</Trans>;\n\nconst userName = user.name;\n<Trans i18nKey=\"page.greeting\">Hello {{ userName }}!</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Detecting Loki Parser and Log Stream Label Keys with datasource.languageProvider - TypeScript\nDESCRIPTION: Exemplifies fetching parsing capability and label keys for a given Loki stream via getParserAndLabelKeys. Returns an object describing extracted label keys, available parsing strategies (JSON, Logfmt, Pack), and unwrapping options based on sampled log lines. Offers precise control over sampling via maxLines and time range, aids in tailoring UI/log explorer features, and expects error handling for failed sampling operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Get parser and label keys for a selector\n *\n * This asynchronous function is used to fetch parsers and label keys for a selected log stream based on sampled lines.\n * It returns a promise that resolves to an object with the following properties:\n *\n * - `extractedLabelKeys`: An array of available label keys associated with the log stream.\n * - `hasJSON`: A boolean indicating whether JSON parsing is available for the stream.\n * - `hasLogfmt`: A boolean indicating whether Logfmt parsing is available for the stream.\n * - `hasPack`: A boolean indicating whether Pack parsing is available for the stream.\n * - `unwrapLabelKeys`: An array of label keys that can be used for unwrapping log data.\n *\n * @param streamSelector - The selector for the log stream you want to analyze.\n * @param options - (Optional) An object containing additional options.\n * @param options.maxLines - (Optional) The number of log lines requested when determining parsers and label keys.\n * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.\n * Smaller maxLines is recommended for improved query performance. The default count is 10.\n * @returns A promise containing an object with parser and label key information.\n * @throws An error if the fetch operation fails.\n */\nasync function getParserAndLabelKeys(\n  streamSelector: string,\n  options?: { maxLines?: number; timeRange?: TimeRange }\n): Promise<{\n  extractedLabelKeys: string[];\n  hasJSON: boolean;\n  hasLogfmt: boolean;\n  hasPack: boolean;\n  unwrapLabelKeys: string[];\n}>;\n\n/**\n * Example usage:\n */\nconst streamSelector = '{job=\"grafana\"}';\ntry {\n  const parserAndLabelKeys = await getParserAndLabelKeys(streamSelector, { maxLines: 5 });\n  console.log(parserAndLabelKeys);\n} catch (error) {\n  console.error(`Error fetching parser and label keys: ${error.message}`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CartoDB as Default Baselayer in Grafana via Provisioning (INI)\nDESCRIPTION: Example configuration for setting CartoDB as the default base map in Grafana using the provisioning system. This configuration sets the theme to auto and enables country labels on the map.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ngeomap_default_baselayer = `{\n  \"type\": \"carto\",\n  \"config\": {\n    \"theme\": \"auto\",\n    \"showLabels\": true\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Query with Metric Column for Grafana Time Series\nDESCRIPTION: This SQL query demonstrates how to use the 'metric' column for backward compatibility in Grafana. It groups time data, calculates the minimum value, and uses 'min' as the metric name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(time_date_time, '5m'),\n  min(\"value_double\"),\n  'min' as metric\nFROM test_data\nWHERE $__timeFilter(time_date_time)\nGROUP BY time\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Marking Strings as HTML-safe in Go Templates - Go Template\nDESCRIPTION: Shows how to use {{ safeHtml }} to output literal HTML from templates, bypassing the usual auto-escaping behavior in Grafana's templating engine. Requires being sure the HTML is safe to avoid XSS. Input is an HTML string, output is raw HTML passed to the output stream.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_14\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ safeHtml \"<b>Text</b>\"}}\n\n```\n\n----------------------------------------\n\nTITLE: Structuring Explore Query URLs in Grafana (JSON)\nDESCRIPTION: This snippet shows the structure of a URL used to open the Explore tool in Grafana with configured panes, schema version, and organization ID as URL query parameters. It provides an overview of the required parameters for building Explore links externally. The URL must substitute <grafana_url>, <panes>, <schema_version>, and <org_id> with actual values, and the 'panes' parameter is a URL-encoded JSON object matching the schema in the subsequent snippet.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/get-started-with-explore.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://<grafana_url>/explore?panes=<panes>&schemaVersion=<schema_version>&orgId=<org_id>\n```\n\n----------------------------------------\n\nTITLE: Building and Running Custom Grafana Docker Image with Plugins (Bash)\nDESCRIPTION: Builds a custom Grafana Docker image tagged 'grafana-custom' using the Dockerfile in 'packaging/docker/custom'. It includes specified plugins like 'grafana-clock-panel' and 'grafana-simple-json-datasource' via build arguments. Subsequently, it runs a container from this custom image, mapping port 3000.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# go to the custom directory\ncd packaging/docker/custom\n\n# running the build command\n# include the plugins you want e.g. clock planel etc\ndocker build \\\n  --build-arg \"GRAFANA_VERSION=latest\" \\\n  --build-arg \"GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource\" \\\n  -t grafana-custom .\n\n# running the custom Grafana container using the docker run command\ndocker run -d -p 3000:3000 --name=grafana grafana-custom\n```\n\n----------------------------------------\n\nTITLE: Defining a Template with Nested Iteration and Execution in Go Templates\nDESCRIPTION: Defines a template (`\"print_alerts\"`) that iterates over the data passed to it (`.`). Inside the loop, it executes another defined template (`\"print_labels\"`), passing a specific property (`.SortedLabels`) of the current item as the context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"print_alerts\" }}\n{{ range . }}\n{{ template \"print_labels\" .SortedLabels }}\n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Methods in TypeScript Classes\nDESCRIPTION: Illustrates the proper way to name methods using camelCase in TypeScript classes.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass DateCalculator {\n  // bad\n  CalculateTimeRange () {...}\n}\nclass DateCalculator {\n  // bad\n  calculate_time_range () {...}\n}\n\nclass DateCalculator {\n  // good\n  calculateTimeRange () {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roles Assigned to a Service Account (HTTP GET)\nDESCRIPTION: Sends a GET request to retrieve the list of roles directly assigned to a service account. It includes query parameters and required permissions for the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/users/1/roles\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Hiding the Sign-Out Menu via Grafana Configuration (Bash)\nDESCRIPTION: Demonstrates how to hide the sign-out link from the Grafana user interface by setting `disable_signout_menu` to `true` under the `[auth]` section in the configuration file. This is typically used when authentication is managed externally, such as via an authentication proxy or JWT.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n[auth]\ndisable_signout_menu = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Start method for Event in Go\nDESCRIPTION: Adds a Start method to the Event struct that calls the Greeter's Greet method and prints the resulting message.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (e Event) Start() {\n    msg := e.Greeter.Greet()\n    fmt.Println(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up RBAC Data Before Re-Upgrade in SQL\nDESCRIPTION: This SQL script is intended to be run directly against the Grafana database before re-upgrading Grafana, specifically after a sequence of upgrading, downgrading, and disabling RBAC. It prevents potential permission loss by deleting managed roles, associated assignments (builtin, team, user), permissions, and specific migration log entries to ensure synchronization between legacy access control and RBAC systems upon re-upgrade.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.0/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE\nFROM builtin_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\n\nDELETE\nFROM team_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\n\nDELETE\nFROM user_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\n\nDELETE\nFROM permission\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\n\nDELETE\nFROM role\nWHERE name LIKE 'managed:%';\n\nDELETE\nFROM migration_log\nWHERE migration_id IN ('teams permissions migration',\n                       'dashboard permissions',\n                       'dashboard permissions uid scopes',\n                       'data source permissions',\n                       'data source uid permissions',\n                       'managed permissions migration',\n                       'managed folder permissions alert actions repeated migration',\n                       'managed permissions migration enterprise');\n```\n\n----------------------------------------\n\nTITLE: Templating Notification Summaries with Go Template Syntax in Grafana (Go template)\nDESCRIPTION: This snippet demonstrates how to construct a summary annotation in a Grafana alert rule using Go template syntax. It leverages the built-in $labels and $values maps to dynamically pull the instance name and CPU usage for each alert, formatting them with tab and newline characters for readability. Dependencies include the Grafana alerting engine and the presence of specific label and value keys; inputs are provided automatically by Grafana's alert system, with output rendered as a formatted summary line for each alert instance. This approach is limited to the fields provided by the alerting engine and requires proper mapping in the alert rule configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_4\n\nLANGUAGE: Go template\nCODE:\n```\n{{- \"\\n\" -}}\nInstance: {{ index $labels \"instance\" }}\n{{- \"\\t\" -}} Usage: {{ index $values \"A\"}}%{{- \"\\n\" -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise License Path in Grafana INI (Bash)\nDESCRIPTION: Specifies the path to the Grafana Enterprise license JWT file directly in the Grafana INI configuration. Required for pointing Grafana to a license located outside the standard directory or when provisioning secrets. The license_path parameter must be an absolute path to a valid license.jwt token. No output is produced; Grafana loads this configuration at startup. Ensure file permissions allow Grafana to read this file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[enterprise]\\nlicense_path = /company/secrets/license.jwt\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Series Names with alias() in Graphite\nDESCRIPTION: The `alias()` function assigns a specific, custom string name to a time series returned by a Graphite query. This is useful for creating shorter, more descriptive legend entries in Grafana graphs instead of relying on the full metric path.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_0\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\nalias()\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on CentOS 8 (Bash)\nDESCRIPTION: Lists the package names required on a minimal CentOS 8 installation to enable Grafana's image rendering capabilities. These dependencies are crucial for the Chromium instance used by the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nlibXcomposite libXdamage libXtst cups libXScrnSaver pango atk adwaita-cursor-theme adwaita-icon-theme at at-spi2-atk at-spi2-core cairo-gobject colord-libs dconf desktop-file-utils ed emacs-filesystem gdk-pixbuf2 glib-networking gnutls gsettings-desktop-schemas gtk-update-icon-cache gtk3 hicolor-icon-theme jasper-libs json-glib libappindicator-gtk3 libdbusmenu libdbusmenu-gtk3 libepoxy liberation-fonts liberation-narrow-fonts liberation-sans-fonts liberation-serif-fonts libgusb libindicator-gtk3 libmodman libproxy libsoup libwayland-cursor libwayland-egl libxkbcommon m4 mailx nettle patch psmisc redhat-lsb-core redhat-lsb-submod-security rest spax time trousers xdg-utils xkeyboard-config alsa-lib libX11-xcb\n```\n\n----------------------------------------\n\nTITLE: Defining Legend Options Table in Markdown - Markdown\nDESCRIPTION: This snippet is a Markdown-formatted table outlining the legend options available in Grafana's visualization settings. It lists variant configuration parameters (Visibility, Mode, Placement, Width, Values), their types, and descriptions for how they alter the legend display. No external dependencies are required beyond standard Markdown support. Inputs are configuration descriptions; the output is a styled table in rendered Markdown, and the snippet is limited to documentation rather than program logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/legend-options-1.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Option     | Description                                                                                                                                                                                                |\n| ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Visibility | Toggle the switch to turn the legend on or off.                                                                                                                                                            |\n| Mode       | Use these settings to define how the legend appears in your visualization. **List** displays the legend as a list. This is a default display mode of the legend. **Table** displays the legend as a table. |\n| Placement  | Choose where to display the legend. **Bottom** places the legend below the graph. **Right** places the legend to the right of the graph.                                                                   |\n| Width      | Control how wide the legend is when placed on the right side of the visualization. This option is only displayed if you set the legend placement to **Right**.                                             |\n| Values     | Choose which of the [standard calculations](../../query-transform-data/calculation-types/) to show in the legend. You can have more than one.                                                              |\n```\n\n----------------------------------------\n\nTITLE: SQL Editor Props Interface\nDESCRIPTION: Defines the properties interface for the SQLEditor component, including query string, onChange handler and optional language definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SQLEditorProps {\n  query: string;\n  onChange: (q: string) => void;\n  language?: LanguageDefinition;\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Rendered Panel Image URL Example in Bash\nDESCRIPTION: Example URL structure for accessing a server-side rendered PNG image of a Grafana panel. This URL includes parameters for time range, panel ID, dimensions, and timezone settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/share-dashboards-panels/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://play.grafana.org/render/d-solo/ktMs4D6Mk?from=2024-09-03T11:55:44.442Z&to=2024-09-03T17:55:44.442Z&panelId=panel-13&__feature.dashboardSceneSolo&width=1000&height=500&tz=UTC\n```\n\n----------------------------------------\n\nTITLE: Basic SQL SELECT query for table visualization in Grafana\nDESCRIPTION: A simple SQL query that selects all columns from the mssql_types table. This query can be used with Grafana's Table panel to display the full result set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM [mssql_types]\n```\n\n----------------------------------------\n\nTITLE: Defining grafana.plugin Attributes for OpenTelemetry\nDESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana plugins. It includes `grafana.plugin.id` (string, e.g., 'prometheus') and `grafana.plugin.type` (string, e.g., 'datasource'). Both attributes are recommended and stable.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- semconv trace.grafana.plugin -->\n| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |\n|---|---|---|---|---|---|\n| `grafana.plugin.id` | string | The plugin ID. | `prometheus`; `loki`; `grafana-github-datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n| `grafana.plugin.type` | string | The plugin type. | `datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n<!-- endsemconv -->\n```\n\n----------------------------------------\n\nTITLE: Querying Time Series Data with Multiple Columns in PostgreSQL\nDESCRIPTION: Illustrates a SQL query that groups time series data by 5-minute intervals and calculates both minimum and maximum values. This query shows how to include multiple aggregated columns in a single time series query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(\"time_date_time\",'5m'),\n  min(\"value_double\") as \"min_value\",\n  max(\"value_double\") as \"max_value\"\nFROM test_data\nWHERE $__timeFilter(\"time_date_time\")\nGROUP BY time\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Importing MultiCombobox Story Documentation\nDESCRIPTION: Import statements for Storybook documentation blocks and the MultiCombobox component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Preview, ArgTypes } from '@storybook/blocks';\n\nimport { MultiCombobox } from './MultiCombobox';\n```\n\n----------------------------------------\n\nTITLE: Including Shared Data Link Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation part explaining how to configure data links within Grafana visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/datalink-options-1.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Plugin Development Commands\nDESCRIPTION: Commands for building and watching plugin development\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn plugin:build:dev\nyarn workspace <name_of_plugin> dev\n```\n\n----------------------------------------\n\nTITLE: Revoking User Auth Token via Grafana Admin HTTP API - HTTP\nDESCRIPTION: This snippet shows an HTTP POST request to revoke a particular auth token for a user by specifying the token ID in a JSON body. Requires authentication and appropriate write permission. The response returns a JSON message confirming the revocation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/users/1/revoke-auth-token HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\\n  \"authTokenId\": 364\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"User auth token revoked\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Including Shared Configuration Options Introduction (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation snippet explaining introductory configuration options applicable to various Grafana visualizations. The `lookup`, `source`, and `version` parameters specify the exact content to be included.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/config-options-intro.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Additional LogQL LBAC Rule for OR Logic\nDESCRIPTION: Example LogQL query used as a potential second LBAC rule for a team. When combined with another rule like `{namespace=\\\"dev\\\"}` for the *same team*, the user gains access to data matching `{namespace=\\\"dev\\\"}` OR `{cluster=\\\"us-west-0\\\"}`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_3\n\nLANGUAGE: logql\nCODE:\n```\n{cluster=\"us-west-0\"}\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana API with Basic Authentication\nDESCRIPTION: This example demonstrates how to make an API call to Grafana's search endpoint using cURL with basic authentication. It uses the default admin credentials for a local Grafana installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/curl-examples.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://admin:admin@localhost:3000/api/search\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Application Manifest for Group Claims (JSON)\nDESCRIPTION: This JSON snippet shows the required property for the Azure AD app manifest to ensure that groupMembershipClaims are included in tokens issued to Grafana. The property can be set to include ApplicationGroup and SecurityGroup claims. The manifest must be edited in the Azure portal.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"groupMembershipClaims\": \"ApplicationGroup, SecurityGroup\"\n```\n\n----------------------------------------\n\nTITLE: Removing Grafana Deployment and Associated Objects - kubectl Bash\nDESCRIPTION: Deletes all objects defined in the 'grafana.yaml' manifest from the specified namespace, including deployments, PVCs, and services. Essential for cleanup or when removing Grafana from the cluster. Run this before deleting ConfigMaps or secrets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f grafana.yaml --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule with Multiple AND Conditions\nDESCRIPTION: Example LogQL query used as an LBAC rule to filter logs. This rule matches log lines that contain *both* the label `namespace` with the value `dev` AND the label `cluster` with the value `us-west-0`. This demonstrates combining multiple label matchers with an implicit AND operator within a single rule.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_0\n\nLANGUAGE: logql\nCODE:\n```\n{namespace=\"dev\", cluster=\"us-west-0\"}\n```\n\n----------------------------------------\n\nTITLE: Searching Playlists via Grafana HTTP API\nDESCRIPTION: Sends a GET request to `/api/playlists` to retrieve a list of existing playlists for the current organization. Supports pagination and filtering via `query` and `limit` querystring parameters. Requires an `Authorization` header with a bearer token. Returns a JSON array of playlist objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/playlists HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"uid\": \"1\",\n    \"name\": \"my playlist\",\n    \"interval\": \"5m\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: HTTP 200 Success Response for Contact Points Retrieval (HTTP)\nDESCRIPTION: This HTTP response example shows the result of successfully querying contact points. It uses HTTP 200 and returns a JSON array of contact point objects, each including fields for uid, name, type, user-configured settings, and flags. Clients can use this data to display or further manage notification contact points through the API.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"uid\": \"\",\n    \"name\": \"email receiver\",\n    \"type\": \"email\",\n    \"settings\": {\n      \"addresses\": \"<example@email.com>\"\n    },\n    \"disableResolveMessage\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Server Response for Dashboard Tags Retrieval in HTTP/JSON\nDESCRIPTION: Example of a successful response from the server after retrieving dashboard tags. The response contains an array of tag objects, each with a term (tag name) and count (number of dashboards using that tag).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"term\":\"tag1\",\n    \"count\":1\n  },\n  {\n    \"term\":\"tag2\",\n    \"count\":4\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Data Keys using Grafana Admin API\nDESCRIPTION: Triggers the re-encryption of data encryption keys (DEKs) via the Grafana Admin API endpoint `/encryption/reencrypt-data-keys`. This uses a specified key encryption key (KEK) and is useful for updating KEK versions or switching KEKs. It is recommended to perform this action during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n/encryption/reencrypt-data-keys\n```\n\n----------------------------------------\n\nTITLE: Filtering Azure Resources by Tag using Kusto Query Language\nDESCRIPTION: This query filters Azure resources to return a list of resources with an 'environment' tag value of 'Internal'. It demonstrates case-insensitive filtering using '=~' and projection of specific properties.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_5\n\nLANGUAGE: kusto\nCODE:\n```\nResources\n| where tags.environment=~'internal'\n| project name\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Creating a Shared Dashboard in Grafana\nDESCRIPTION: This HTTP response shows the successful creation of a shared dashboard, returning the complete dashboard configuration including its UID, access token, creation details, and settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 78\n\n{\n    \"uid\": \"cd56d9fd-f3d4-486d-afba-a21760e2acbe\",\n    \"dashboardUid\": \"xCpsVuc4z\",\n    \"accessToken\": \"5c948bf96e6a4b13bd91975f9a2028b7\",\n    \"createdBy\": 1,\n    \"updatedBy\": 1,\n    \"createdAt\": \"2023-09-05T15:48:21-03:00\",\n    \"updatedAt\": \"2023-09-05T15:48:21-03:00\",\n    \"timeSelectionEnabled\": false,\n    \"isEnabled\": false,\n    \"annotationsEnabled\": false,\n    \"share\": \"public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Alert Rule with HTTP PUT - HTTP\nDESCRIPTION: This HTTP PUT request updates an alert rule identified by its UID in the request path. The request body must be a valid ProvisionedAlertRule object. If successful, the response is the updated resource with a 200 status code; on validation error, a 400 is returned. Header options and required path parameters are specified for proper resource targeting and provenance control.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_34\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /api/v1/provisioning/alert-rules/:uid\n```\n\n----------------------------------------\n\nTITLE: Using the is_inf Function in Grafana Expressions\nDESCRIPTION: Shows how to use the `is_inf` function to check if a value is positive or negative infinity. It returns 1 for Inf values and 0 otherwise, operating on numbers or series.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_6\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nis_inf($A)\n```\n\n----------------------------------------\n\nTITLE: Example CSV Data for XY Chart X-Field Selection\nDESCRIPTION: This snippet shows example tabular data, formatted like CSV content within a Markdown table, used to illustrate how the XY chart automatically selects the first numeric column ('a') as the default X-field when using 'Auto' series mapping. The columns 'b' and 'c' would then typically become Y-fields unless configured otherwise.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/xy-chart/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| a   | b   | c   |\n| --- | --- | --- |\n| 0   | 0   | 0   |\n| 1   | 1   | 9   |\n| 2   | 2   | 4   |\n```\n\n----------------------------------------\n\nTITLE: Sorting Labels in Graphite\nDESCRIPTION: The sortByName() function ensures consistent ordering of labels by name across multiple graphs, which helps maintain visual consistency in dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_3\n\nLANGUAGE: graphite\nCODE:\n```\nsortByName()\n```\n\n----------------------------------------\n\nTITLE: Listing Teams for a User via Grafana HTTP API (http)\nDESCRIPTION: Shows the HTTP GET request for fetching all teams associated with a user. Requires both user and team read permissions, with example showing standard headers for an authenticated Grafana admin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/1/teams HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling in Grafana (Bash)\nDESCRIPTION: Command to start Grafana server with profiling enabled, specifying the address and port for pprof debugging endpoints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./grafana server -profile -profile-addr=0.0.0.0 -profile-port=8080\n```\n\n----------------------------------------\n\nTITLE: Executing Defined Templates with 'template' in Go Templates\nDESCRIPTION: Shows how to execute a previously defined template using the `template` keyword, followed by the name of the template in double quotes (`\"print_labels\"`) and the data context (`.`) to be passed to it.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"print_labels\" . }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Reports via HTTP DELETE Request\nDESCRIPTION: Example of deleting a specific report by ID using the DELETE endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/6 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Engine for Grafana Live HA\nDESCRIPTION: Configuration example for setting up Redis as the high availability engine for Grafana Live. Specifies the engine type and connection address.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n[live]\nha_engine = redis\nha_engine_address = 127.0.0.1:6379\n```\n\n----------------------------------------\n\nTITLE: Executing Manual Grafana Package Release Steps\nDESCRIPTION: A sequence of shell commands executed from the project root to manually clean, prepare (test, version bump), build, pack, and publish Grafana frontend packages to an npm registry. The `publish-npm-packages.sh` script handles the actual publishing, accepting parameters for distribution tags (`next`, `latest`, `test`) and the target registry URL. Publishing to a local registry involves setting `NPM_TOKEN=NONE`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn packages:clean\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn packages:prepare\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn packages:build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn packages:pack\n```\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/publish-npm-packages.sh --dist-tag 'next' --registry 'https://registry.npmjs.org/'\n```\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/publish-npm-packages.sh --dist-tag 'latest' --registry 'https://registry.npmjs.org/'\n```\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/publish-npm-packages.sh --dist-tag 'test' --registry 'https://registry.npmjs.org/'\n```\n\nLANGUAGE: shell\nCODE:\n```\nNPM_TOKEN=NONE ./scripts/publish-npm-packages.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Explore Graph and Table Links in Grafana Templates - Go Template\nDESCRIPTION: Shows how to use {{ graphLink }} and {{ tableLink }} to generate Explore panel links in annotation or label templates. Requires a JSON-encoded expression referencing Prometheus or other data source. Inputs are JSON strings specifying the expression and data source, outputs are absolute or relative paths to Grafana Explore pages. Ensure input format matches the schema expected by Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_11\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ graphLink \"{\\\"expr\\\": \\\"up\\\", \\\"datasource\\\": \\\"gdev-prometheus\\\"}\" }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ tableLink \"{\\\"expr\\\": \\\"up\\\", \\\"datasource\\\": \\\"gdev-prometheus\\\"}\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics - Bash\nDESCRIPTION: Sets the ENABLE_METRICS environment variable to enable Prometheus metrics endpoint in Grafana. No external dependencies are required, but Grafana and its rendering service must support and read this variable. When set to 'true', the /metrics endpoint is exposed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_METRICS=true\n```\n\n----------------------------------------\n\nTITLE: Templating Labels Based on Query Results with Go Templating Language - Go\nDESCRIPTION: This snippet provides a Go template for dynamically assigning the 'env' label based on the value of $labels.instance in an alert. The template utilizes if-else statements to select between 'production', 'staging', and 'development' environments, allowing for more granular identification and grouping of alert instances. This should be used in the label definition of an alerting rule and requires the presence of $labels.instance in the template context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{- if eq $labels.instance \"prod-server-1\" -}}\nproduction\n{{- else if eq $labels.instance \"staging-server-1\" -}}\nstaging\n{{- else -}}\ndevelopment\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Examples of Relative Time Range Syntax in Grafana\nDESCRIPTION: Demonstrates various syntaxes for defining relative time ranges in Grafana dashboards using 'now', time units (m, d, w, M, Y, fy), the minus operator for past ranges, and the '/' operator for snapping to the start/end of a period. These strings are used in the time picker or URL parameters to dynamically set the dashboard's time window relative to the current time.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnow-5m    (From: now-5m, To: now)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/d     (From: now/d, To: now)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/w     (From: now/w, To: now/w)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/w     (From: now/w, To: now)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/M     (From: now/M, To: now/M)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/M     (From: now/M, To: now)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow-1M/M  (From: now-1M/M, To: now-1M/M)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/Y     (From: now/Y, To: now)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow/Y     (From: now/Y, To: now/Y)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow-1y/fy (From: now-1y/fy, To: now-1y/fy)\n```\n\n----------------------------------------\n\nTITLE: Defining Sorted Key-Value Pair Formatting in Go Template\nDESCRIPTION: Defines a helper template named '__default_sorted_pairs' used to format a collection of key-value pairs (like labels or annotations). It iterates over the '.SortedPairs' field of the input context (which should be a map or similar structure converted by Grafana) and prints each pair as ' - Name = Value'.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_4\n\nLANGUAGE: go-template\nCODE:\n```\n[[- define \"__default_sorted_pairs\" -]]\n[[ range .SortedPairs ]]\n - [[ .Name ]] = [[ .Value ]]\n[[- end ]]\n[[- end -]]\n```\n\n----------------------------------------\n\nTITLE: Example Output of `docker secret ls` Command\nDESCRIPTION: Provides sample output from the `docker secret ls` command, illustrating the format in which Docker displays the list of created secrets, including ID, Name, Driver, and timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nID                          NAME           DRIVER    CREATED              UPDATED\ni4g62kyuy80lnti5d05oqzgwh   aws_access_key_id             5 minutes ago        5 minutes ago\nuegit5plcwodp57fxbqbnke7h   aws_secret_access_key         3 minutes ago        3 minutes ago\nfxbqbnke7hplcwodp57fuegit   aws_region                    About a minute ago   About a minute ago\n```\n\n----------------------------------------\n\nTITLE: Unstarring a Dashboard for Actual User via Grafana API (HTTP)\nDESCRIPTION: Removes the star from a specific dashboard (identified by its unique identifier `:uid`) for the currently authenticated user using a DELETE request to `/api/user/stars/dashboard/uid/:uid`. Requires authentication (Bearer Token shown). Returns a JSON success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/user/stars/dashboard/uid/BqokFhx7z HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Dashboard unstarred\"}\n```\n\n----------------------------------------\n\nTITLE: Getting Data Source Cache Configuration via Grafana HTTP API (HTTP)\nDESCRIPTION: This snippet demonstrates how to retrieve the current cache configuration for a specific Grafana data source using a GET request to the `/api/datasources/:dataSourceUID/cache` endpoint. It requires the `datasources.caching:read` permission scoped to `datasources:*`. The example shows the request format and the expected JSON response containing the data source's cache settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_and_resource_caching.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/jZrmlLCGka/cache HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n   \"message\": \"Data source cache settings loaded\",\n   \"dataSourceID\": 1,\n   \"dataSourceUID\": \"jZrmlLCGka\",\n   \"enabled\": true,\n   \"useDefaultTTL\": false,\n   \"ttlQueriesMs\": 60000,\n   \"ttlResourcesMs\": 300000,\n   \"defaultTTLMs\": 300000,\n   \"created\": \"2023-04-21T11:49:22-04:00\",\n   \"updated\": \"2023-04-24T17:03:40-04:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching and Verifying PGP Signatures for Plugin Manifests (PGP)\nDESCRIPTION: This snippet shows a PGP signature block that is used to validate the integrity and authenticity of a Grafana plugin manifest. The signature is generated over the manifest content using OpenPGP, with comments indicating the generation tool and identification information. It is required to verify this signature against the manifest's hash before installing or executing the plugin to prevent tampering or unauthorized modifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/nested-plugins/parent/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661172777367,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"a029469ace740e9502bfb0d40924d1cccae73d0b18adcd8f1ceb7f17bf36beb8\",\n    \"nested/plugin.json\": \"e64abd35cd211e0e4682974ad5cdd1be7a0b7cd24951d302a16d9e2cb6cefea4\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmMDfCkAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm56w5AgkBeX3H13KSFfSs6i6aJLOIPyqYICT9EQWKxmZIz4vlgnOBOvdA\ncf5jtG/CFYikBAHN6PAH6/Jir+4017w1JNHNtxICBj5xERqPkjb3GqT1sNb3\nMJizG0LSveo6dRaap8uC4VPbubiUa7qGu6LTEi/8kpOemMNOLHBI+2/GlY3B\ni8zqeBLU\n=lRFr\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Creating htpasswd File for Apache Authentication\nDESCRIPTION: Command to create an htpasswd file with a user 'anthony' and password 'password' for use with Apache's BasicAuth authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhtpasswd -bc htpasswd anthony password\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Viewport Height - Bash\nDESCRIPTION: Uses RENDERING_VIEWPORT_MAX_HEIGHT to set an upper limit (in pixels) for browser viewport height during rendering. Prevents resource depletion from excessively large renders. Requires v3.9.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_MAX_HEIGHT=500\n```\n\n----------------------------------------\n\nTITLE: Renewing Session with Login Ping Endpoint - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet sends a GET request to the /api/login/ping endpoint in Grafana to validate or renew a user's login session. An Authorization header with a valid Bearer token is necessary, and headers specifying Accept and Content-Type as application/json are required. This is useful for ensuring the current session is still active without requiring user credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/login/ping HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\n```\n\n----------------------------------------\n\nTITLE: Installing and Refreshing snapd Core on Debian (Bash)\nDESCRIPTION: Uses `apt-get install` to install the `snapd` package and `snap install core; snap refresh core` to install/update the core snap environment on a Debian-based system. This is a prerequisite for installing `certbot` via snap. Requires `sudo` privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install snapd\nsudo snap install core; sudo snap refresh core\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana Enterprise - Shell\nDESCRIPTION: Removes the Grafana Enterprise package via zypper package manager on SUSE/openSUSE. Requires package installed, sudo access. No parameters. Output: grafana-enterprise package removed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo zypper remove grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Basic Grafana Dashboard URL Example\nDESCRIPTION: Illustrates a standard URL format for accessing a Grafana dashboard without any specific variable parameters. This serves as a baseline before demonstrating how to add context via URL variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: uri\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard\n```\n\n----------------------------------------\n\nTITLE: Replicating Grafana's Default Notification Title Template\nDESCRIPTION: This template duplicates Grafana's default title/subject template for alert notifications, displaying alert status, counts, and group labels in a structured format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"copy_of_default_title\" -}}\n[{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ if gt (.Alerts.Resolved | len) 0 }}, RESOLVED:{{ .Alerts.Resolved | len }}{{ end }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \" \" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \" \" }}{{ end }}){{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Hugo Figure Shortcode (Yugabyte Query Editor)\nDESCRIPTION: This Hugo shortcode embeds an image displaying the query editor for the new Yugabyte data source within Grafana's Explore view. It visually supports the announcement of the Yugabyte data source integration. The `src` parameter indicates the image file path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_4\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/yugabyte/yugabyte_explore_builder.png\" alt=\"Yugabyte query editor\" >}}\n```\n\n----------------------------------------\n\nTITLE: Generating Issue List Summary with EJS Template - JavaScript\nDESCRIPTION: This EJS code block iterates through each file in the 'files' array and generates a markdown task list, displaying the count of issues for each file. It relies on the existence of a 'files' array, where each object contains 'issueCount' and 'fileName', as well as a 'plural' helper function for proper pluralization. Inputs include the owner name, issue filters, and aggregated issue statistics, while the output is a markdown list for each file with unresolved issues. This snippet should be used in a Node.js environment with EJS installed. Limitation: requires all interpolated variables and helpers to be supplied in the EJS context.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/cli/bettererIssueTemplate.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<% files.forEach((file) => { %>\\n- [ ] <%= file.issueCount %> <%= plural('issue', file.issueCount) %> in `<%= file.fileName %>` <% }) %>\n```\n\n----------------------------------------\n\nTITLE: Updating a Query Comment in Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet illustrates an example HTTP PATCH request to update the comment associated with a specific query history entry, identified by its UID. The new comment is provided in the JSON request body. Authentication is required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/query-history/P8zM2I1nz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n{\n  \"comment\": \"Debugging query\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule for Specific Project ID (Task 6)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 6. This rule filters logs or metrics, granting access only to data points that have the label `project_id` with the value `project-dev`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_9\n\nLANGUAGE: logql\nCODE:\n```\n{ project_id=\"project-dev\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace\nDESCRIPTION: Command to update the Go workspace after creating a new module.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake update-workspace\n```\n\n----------------------------------------\n\nTITLE: Overriding Grafana Log Path with Command Line Argument\nDESCRIPTION: Command demonstrating how to override the default log path in Grafana using command line arguments, specifying a custom configuration file, home path, and log directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./grafana-server --config /custom/config.ini --homepath /custom/homepath cfg:default.paths.logs=/custom/path\n```\n\n----------------------------------------\n\nTITLE: Example Response for Deleting Grafana Library Element (HTTP/JSON)\nDESCRIPTION: This snippet illustrates a sample successful HTTP 200 response after deleting a Grafana library element. The JSON response body confirms the deletion with a message and includes the numeric ID of the deleted element.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"message\": \"Library element deleted\",\n    \"id\": 28\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Panel Options Documentation\nDESCRIPTION: Detailed markdown table showing configuration options for table panels including header settings, pagination, column widths and alignments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Option               | Description                                                                                                                                                                                                                                                                 |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Show table header    | Show or hide column names imported from your data source.                                                                                                                                                                                                                   |\n| Cell height          | Set the height of the cell. Choose from **Small**, **Medium**, or **Large**.                                                                                                                                                                                                |\n| Enable pagination    | Toggle the switch to control how many table rows are visible at once. When switched on, the page size automatically adjusts to the height of the table. This option doesn't affect queries.                                                                                 |\n| Minimum column width | Define the lower limit of the column width, in pixels. By default, the minimum width of the table column is 150 pixels. For small-screen devices, such as mobile phones or tablets, reduce the value to `50` to allow table-based panels to render correctly in dashboards. |\n| Column width         | Define a column width, in pixels, rather than allowing the width to be set automatically. By default, Grafana calculates the column width based on the table size and the minimum column width.                                                                             |\n| Column alignment     | Set how Grafana should align cell contents. Choose from: **Auto** (default), **Left**, **Center**, or **Right**.                                                                                                                                                            |\n| Column filter        | Temporarily change how column data is displayed. For example, show or hide specific values. For more information, refer to [Column filtering](#column-filtering).                                                                                                           |\n```\n\n----------------------------------------\n\nTITLE: Executing Alert Additional Details Template in Grafana\nDESCRIPTION: This snippet shows how to execute the template for displaying additional alert details by passing the context (dot) to the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom.alert_additional_details\" . }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Section using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode invokes the `docs/hero-simple` template to render a hero section. It utilizes data defined under the `hero` key in the page's frontmatter to populate the section's title, description, and dimensions. This approach separates content definition from presentation logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/hero-simple key=\"hero\" >}}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack with Docker Compose - Bash\nDESCRIPTION: Runs Docker Compose in detached mode to start Grafana, Loki, and Promtail services using the previously downloaded YAML configuration. Requires Docker and Docker Compose (either as a standalone command or integrated into Docker CLI). The command initializes all services defined in docker-compose.yaml, making them available for further configuration. Key requirement: No other processes should be binding to required ports (see note in tutorial).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Folder by UID API Response Example\nDESCRIPTION: Example HTTP response for the GET /api/folders/:uid endpoint, returning detailed information about a specific folder including permissions, metadata, and creation information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"uid\": \"nErXDvCkzz\",\n  \"title\": \"Department ABC\",\n  \"url\": \"/dashboards/f/nErXDvCkzz/department-abc\",\n  \"hasAcl\": false,\n  \"canSave\": true,\n  \"canEdit\": true,\n  \"canAdmin\": true,\n  \"createdBy\": \"admin\",\n  \"created\": \"2018-01-31T17:43:12+01:00\",\n  \"updatedBy\": \"admin\",\n  \"updated\": \"2018-01-31T17:43:12+01:00\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Result of 'Join by Labels' Transformation\nDESCRIPTION: This Markdown table shows the output after applying the 'Join by labels' transformation to the input series (series1, series2, series3). The join is configured to use the 'what' label as the value field, combining the series into a wider table.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n| cluster | job | Temp | Speed |\n| ------- | --- | ---- | ----- |\n| A       | J1  | 10   |       |\n| A       | J1  | 200  |       |\n| B       | J1  | 10   | 22    |\n| B       | J1  | 200  | 77    |\n```\n\n----------------------------------------\n\nTITLE: Creating Deprecation Notice in Markdown\nDESCRIPTION: Template for documenting deprecation notices in pull request descriptions that need to be included in the changelog.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/merge-pull-request.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Deprecation notice\n\n<Deprecation description>\n```\n\n----------------------------------------\n\nTITLE: Verifying Maximum Files Limit on macOS (Bash)\nDESCRIPTION: Executes the `sysctl kern.maxfiles` command on macOS to query and display the current value of the kernel's maximum allowed open files limit (`kern.maxfiles`). This is used to verify if changes made to this setting (e.g., increasing it to 524288) have been successfully applied.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsysctl kern.maxfiles\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element by UID Response Example (HTTP/JSON)\nDESCRIPTION: Example HTTP 200 OK response for the 'Get library element by UID' request. The JSON body contains the requested library element object, including its ID, UID, name, model, and metadata, nested within the `result` field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": {\n      \"id\": 25,\n      \"orgId\": 1,\n      \"folderId\": 0,\n      \"uid\": \"V--OrYHnz\",\n      \"name\": \"API docs Example\",\n      \"kind\": 1,\n      \"type\": \"text\",\n      \"description\": \"\",\n      \"model\": {...},\n      \"version\": 1,\n      \"meta\": {\n          \"folderName\": \"General\",\n          \"folderUid\": \"\",\n          \"connectedDashboards\": 1,\n          \"created\": \"2021-09-27T09:56:17+02:00\",\n          \"updated\": \"2021-09-27T09:56:17+02:00\",\n          \"createdBy\": {\n              \"id\": 1,\n              \"name\": \"admin\",\n              \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n          },\n          \"updatedBy\": {\n              \"id\": 1,\n              \"name\": \"admin\",\n              \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n          }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Hugo Figure Shortcode (SAML Sign Requests)\nDESCRIPTION: This Hugo shortcode embeds a screenshot illustrating the 'Sign requests' option within the SAML configuration form in Grafana 11.2. It highlights the UI change related to making private key and certificate fields optional when signed requests are disabled. The `src` parameter specifies the image location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_5\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/grafana/screenshot-grafana-11-2-saml-sign-requests.png\" alt=\"Sign requests in SAML config form\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting a Single Dashboard Variable via URL Parameter\nDESCRIPTION: Demonstrates how to set a dashboard variable named 'example' to the value 'value' by appending a query parameter prefixed with 'var-' to the dashboard URL. This allows pre-configuring dashboard state through the URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: uri\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard?var-example=value\n```\n\n----------------------------------------\n\nTITLE: Logging Out User (Revoke All Tokens) via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Makes an HTTP POST request to log out the user from all devices by revoking all associated auth tokens. No JSON body is required and a JSON message confirming successful logout is returned. Only users with proper logout permission can execute this request.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/users/1/logout HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"message\": \"User auth token revoked\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Time Range in rate Function with PromQL\nDESCRIPTION: Example of using a fixed time interval (5m) with the rate function to calculate the rate of change for HTTP requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(http_requests_total[5m])\n```\n\n----------------------------------------\n\nTITLE: Defining Custom String Type for MySQL Connection in Go\nDESCRIPTION: Demonstrates how to create a custom string type for MySQL connection strings to avoid conflicts with other string providers.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MySQLConnectionString string\n```\n\n----------------------------------------\n\nTITLE: Starting the Grafana Stack with Alternative Docker Compose Syntax - Bash\nDESCRIPTION: This Bash snippet provides an alternative, legacy-compatible syntax for starting Grafana, Loki, and Prometheus containers with Docker Compose in detached mode. It is meant for environments where the executable is 'docker-compose' rather than 'docker compose'. Dependencies include both Docker and the docker-compose CLI tool. The command will set up all declared services, running them in the background. Similar port conflicts and dependencies apply as with the modern syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Preferences - HTTP\nDESCRIPTION: Retrieves team UI/display preferences, such as theme and timezone, using an authenticated GET request specifying the team ID. The API key used here differs from previous examples.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nGET /api/teams/2/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Replacing SystemJS Usage with Standard Imports in Grafana Plugins\nDESCRIPTION: SystemJS is no longer exported from `@grafana/runtime`. Plugin developers must refactor their code to use standard ES module `import` syntax and manage dependencies via npm/yarn instead of relying on SystemJS for module loading.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Restricting Azure AD OAuth to Specific Email Domains (INI)\nDESCRIPTION: This configuration restricts Grafana Azure AD authentication to users from listed domains via the allowed_domains parameter. Domains must be separated by space or comma. Only users with emails in these domains are granted access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nallowed_domains = mycompany.com mycompany.org\n```\n\n----------------------------------------\n\nTITLE: Listing SSO Settings via HTTP API in HTTP\nDESCRIPTION: Demonstrates how to list all configured SSO providers and their settings using a HTTP GET request to the /api/v1/sso-settings endpoint. Requires proper authentication (Bearer token) and the 'settings:read' permission with the appropriate scope. The response is a JSON array of SSO configurations with minimal provider-specific details. Useful for fetching a summary of all single sign-on providers managed by the API.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/sso-settings HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n[\\n  {\\n    \"id\":        \"1\",\\n    \"provider\":  \"github\",\\n    \"settings\": {\\n      \"apiUrl\": \"https://api.github.com/user\",\\n      \"clientId\": \"my_github_client\",\\n      \"clientSecret\": \"*********\",\\n      \"enabled\": true,\\n      \"scopes\": \"user:email,read:org\"\\n      // rest of the settings\\n    },\\n    \"source\":    \"system\",\\n  },\\n  {\\n    \"id\":        \"2\",\\n    \"provider\":  \"azuread\",\\n    \"settings\": {\\n      \"authUrl\": \"https://login.microsoftonline.com/00000000-0000-0000-0000-000000000000/oauth2/v2.0/authorize\",\\n      \"clientId\": \"my_azuread_client\",\\n      \"clientSecret\": \"*********\",\\n      \"enabled\": true,\\n      \"scopes\": \"openid,email,profile\"\\n      // rest of the settings\\n    },\\n    \"source\":    \"system\",\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Code Mode with Time Filter Example\nDESCRIPTION: Example showing how to use the timeFilter macro with a date column in PostgreSQL queries. This is used for time-based filtering in Grafana dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n$__timeFilter(date_column)\n```\n\n----------------------------------------\n\nTITLE: Querying VM CPU Performance with KQL in Azure Monitor Logs\nDESCRIPTION: This query retrieves a virtual machine's CPU performance data using the Perf table, filtered by the dashboard's time range using the $__timeFilter macro. Results are averaged over 5-minute time grains and ordered chronologically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: kusto\nCODE:\n```\nPerf\n# $__timeFilter is a special Grafana macro that filters the results to the time span of the dashboard\n| where $__timeFilter(TimeGenerated)\n| where CounterName == \"% Processor Time\"\n| summarize avg(CounterValue) by bin(TimeGenerated, 5m), Computer\n| order by TimeGenerated asc\n```\n\n----------------------------------------\n\nTITLE: Response for Dashboard Search with Specific Criteria in HTTP\nDESCRIPTION: This HTTP response shows the format of the returned data when searching for dashboards with specific criteria. It includes detailed information about the matching dashboard, including folder information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\":1,\n    \"uid\": \"cIBgcSjkk\",\n    \"orgId\": 1,\n    \"title\":\"Production Overview\",\n    \"url\": \"/d/cIBgcSjkk/production-overview\",\n    \"type\":\"dash-db\",\n    \"tags\":[prod],\n    \"isStarred\":true,\n    \"folderId\": 2,\n    \"folderUid\": \"000000163\",\n    \"folderTitle\": \"Folder\",\n    \"folderUrl\": \"/dashboards/f/000000163/folder\",\n    \"uri\":\"db/production-overview\" // deprecated in Grafana v5.0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Deleting a Grafana Custom Role\nDESCRIPTION: Provides an example of a successful HTTP 200 OK response after deleting a Grafana custom role using the DELETE `/api/access-control/roles/:uid` endpoint. The JSON body contains a simple confirmation message: 'Role deleted'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"message\": \"Role deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Successful Grafana Report Creation\nDESCRIPTION: Demonstrates a typical HTTP 200 OK response received after successfully creating a Grafana report via the API. The JSON body includes the unique ID (`id`) of the newly created report and a confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 35\n\n{\n\t\"id\": 4,\n\t\"message\": \"Report created\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting All Mute Timings via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to `/api/v1/provisioning/mute-timings/export` to export all mute timings in a specified file format (YAML, JSON, or HCL). Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control the download behavior and file type respectively. Expects a 200 OK response with the exported data or a 403 Forbidden if permissions are insufficient.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/mute-timings/export\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Source Resources by ID in HTTP\nDESCRIPTION: Sends a GET request to fetch resources from a data source identified by ID. This endpoint is deprecated as of Grafana v9.0.0.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET api/datasources/112/resources/dimension-keys?region=us-east-2&namespace=AWS%2FEC2&dimensionFilters=%7B%7D&metricName=CPUUtilization HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: GenericPublicError Data Structure Definition - Go\nDESCRIPTION: Comprehensive error structure for public API errors. Includes HTTP status code, message ID for error tracking, optional message text, and additional error-specific data in the extra field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_52\n\nLANGUAGE: go\nCODE:\n```\ntype GenericPublicError struct {\n    StatusCode string         `json:\"statusCode\" binding:\"required\"`\n    MessageId  string         `json:\"messageId\" binding:\"required\"`\n    Message    string         `json:\"message\"`\n    Extra      map[string]any `json:\"extra\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Exporting All Contact Points - HTTP\nDESCRIPTION: Defines an HTTP GET endpoint for exporting all contact points in provisioning file formats (yaml, json, hcl), supporting optional decryption of secure values if privileges permit. Query parameters include 'decrypt', 'download', 'format', and 'name'. Responses include 200 OK for successful exports or 403 Forbidden when permission is denied.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/contact-points/export\n```\n\n----------------------------------------\n\nTITLE: Example Output Data Frame for Concatenate Fields Transformation\nDESCRIPTION: This table shows the resulting data frame after applying the 'Concatenate fields' transformation to Query A and Query B, combining all fields into a single view.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| Temp | Uptime  | AQI | Errors |\n| ---- | ------- | --- | ------ |\n| 15.4 | 1230233 | 3.2 | 5      |\n```\n\n----------------------------------------\n\nTITLE: Query Formatting for MySQL Tables with Special Characters\nDESCRIPTION: Example showing how table names containing prohibited characters or reserved words are automatically quoted with backticks in MySQL queries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n`table-name`\n```\n\n----------------------------------------\n\nTITLE: Executing a Notification Template - Go Templating - Go\nDESCRIPTION: This snippet demonstrates how to execute a previously defined Go template ('custom_template') by passing the notification context as dot (.). It applies the template to render notification contents using Grafana's alerting data. Dependencies include a valid Go template definition named 'custom_template' and a dot object matching Grafana's notification schema. The output is the notification message generated by the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{ template \"custom_template\" . }}\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Persistent Volume Claim Status using Bash\nDESCRIPTION: Checks the status of the PersistentVolumeClaim (PVC) named `grafana-pvc` within the 'my-grafana' namespace using `kubectl get`. The `-o wide` flag provides additional details, such as the actual volume bound and capacity. This verifies if the storage requested in the manifest has been successfully provisioned and bound. Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pvc --namespace=my-grafana -o wide\n```\n\n----------------------------------------\n\nTITLE: Controlling Data Point Consolidation with consolidateBy() in Graphite\nDESCRIPTION: The `consolidateBy()` Graphite function specifies the aggregation method (e.g., 'sum', 'average', 'max', 'min') used when Graphite needs to reduce the number of data points returned to match the `maxDataPoints` requested by Grafana. This overrides the default 'average' consolidation and can be crucial for preserving peaks or understanding totals correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_6\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\nconsolidateBy\n```\n\n----------------------------------------\n\nTITLE: Enabling Current User Authentication in Grafana Configuration\nDESCRIPTION: This code snippet shows how to enable Current User authentication for Azure in the Grafana server configuration file. It sets the 'user_identity_enabled' flag to true in the [azure] section.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[azure]\nuser_identity_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Deleting a Notification Template Group via Grafana Provisioning API (HTTP)\nDESCRIPTION: Defines the `DELETE` request endpoint `/api/v1/provisioning/templates/:name` to remove a specific Grafana notification template group. The `name` path parameter identifies the template group. An optional `version` query parameter enables optimistic concurrency validation. Successful deletion returns a 204 No Content status, while a conflict results in a 409 Conflict status.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nDELETE /api/v1/provisioning/templates/:name\n```\n\n----------------------------------------\n\nTITLE: Setting Prometheus Directory Permissions (Linux/macOS)\nDESCRIPTION: This command uses 'sudo' and 'chown' to recursively change the ownership of the Prometheus configuration ('/etc/prometheus') and data ('/var/lib/prometheus') directories to the 'prometheus' user and group. This is often required when running Prometheus as a dedicated user.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of dashboards. `dashboards:*` matches any dashboard, while `dashboards:uid:1` targets the specific dashboard with UID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\ndashboards:*\n```\n\nLANGUAGE: text\nCODE:\n```\ndashboards:uid:*\n```\n\n----------------------------------------\n\nTITLE: Setting Default Browser Language - Bash\nDESCRIPTION: Sets RENDERING_LANGUAGE to define Accept-Language for the headless browser, affecting the language of rendered content. The value should follow HTTP Accept-Language syntax. Requires at least v3.9.0+ of the renderer.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_LANGUAGE=\"fr-CH, fr;q=0.9, en;q=0.8, de;q=0.7, *;q=0.5\"\n```\n\n----------------------------------------\n\nTITLE: Complete SAML Settings Update Payload for Grafana Admin API\nDESCRIPTION: Complete JSON payload example combining both updates and removals of SAML settings. This demonstrates how to simultaneously enable SAML, disable single logout, and remove the allow_idp_initiated setting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"updates\": {\n    \"auth.saml\": {\n      \"enabled\": \"true\",\n      \"single_logout\": \"false\"\n    }\n  },\n  \"removals\": {\n    \"auth.saml\": [\"allow_idp_initiated\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Policy Tree - Grafana REST HTTP Endpoint - http\nDESCRIPTION: Specifies the HTTP PUT endpoint used to set or replace the whole notification routing policy (policy tree) in Grafana. Does not require a path parameter, but accepts a complete notification routing tree object as the request body. Endpoint: `PUT /api/v1/provisioning/policies`. Accepts the optional `X-Disable-Provenance` header for UI-level resource updates. Outputs an Ack object on acceptance or ValidationError if the input is not valid.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/provisioning/policies\n```\n\n----------------------------------------\n\nTITLE: Representing Labeled Time Series Input (Series 2)\nDESCRIPTION: This Markdown table displays sample time series data for 'series2' with labels (what=\"Temp\", cluster=\"B\", job=\"J1\"). It's part of the input for the 'Join by labels' transformation example.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n| Time | Value |\n| ---- | ----- |\n| 1    | 10    |\n| 2    | 200   |\n```\n\n----------------------------------------\n\nTITLE: Defining Wire Injector in Go\nDESCRIPTION: Shows how to declare an injector function using wire.Build to wire up providers.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build wireinject\n// The build tag makes sure the stub is not built in the final build.\n\npackage main\n\nimport (\n    \"context\"\n\n    \"github.com/google/wire\"\n    \"example.com/foobarbaz\"\n)\n\nfunc initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {\n    wire.Build(foobarbaz.MegaSet)\n    return foobarbaz.Baz{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Subject with Go HTML Templates - GoTemplate\nDESCRIPTION: This snippet utilizes the 'HiddenSubject' function from Go's HTML template package to dynamically render the email subject line, including the recipient's name. Dependencies include the availability of the 'HiddenSubject' function and the .Subject and .Name variables in the template context. Inputs are the subject text and recipient's name, with the output being a dynamically generated email subject.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{HiddenSubject .Subject \"Verify your email - {{.Name}}\"}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Grafana Service on Boot (Bash)\nDESCRIPTION: Uses `systemctl enable` to configure the `grafana-server` service to start automatically when the Raspberry Pi boots up. Requires `sudo` privileges and `systemd` (which is standard on Raspberry Pi OS Lite).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/systemctl enable grafana-server\n```\n\n----------------------------------------\n\nTITLE: Requesting All Mute Timings - HTTP\nDESCRIPTION: This snippet issues a GET request to the mute-timings endpoint, authenticating via Bearer token and setting JSON as both requested and provided content type. The endpoint serves as a means for clients to list all configured mute timing intervals used for silencing alerts during specific periods.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/mute-timings\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Generating Lezer Grammar Parser with Yarn (Shell)\nDESCRIPTION: This shell command uses yarn with dlx to invoke the @lezer/generator package. It takes a grammar specification in search.grammar and outputs a JavaScript parser file, search.js, regenerating the search grammar after modifications. Dependencies include yarn, the @lezer/generator package, and a valid search.grammar file in the current directory. Input is the grammar definition, and output is the regenerated search.js file (and search.terms.js), which are used for parsing alerting search queries.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/search/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx @lezer/generator search.grammar -o search.js\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Teams API with Auth Headers\nDESCRIPTION: Example of querying Grafana's API to search for teams using authentication headers. Shows how to retrieve team information including IDs, names, and member counts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-WEBAUTH-USER: admin\" -H \"X-WEBAUTH-GROUPS: lokiteamOnExternalSystem\" http://localhost:3000/api/teams/search\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version - JSON\nDESCRIPTION: Sets the minimum TLS version allowed for HTTPS connections in the image renderer's JSON configuration file. Options are 'TLSv1.2' (default) or 'TLSv1.3'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"minTLSVersion\": \"TLSv1.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output Data for Config from Query Results Transformation\nDESCRIPTION: This table shows the output after applying the 'Config from query results' transformation. It's the same data as Input[0] (Query A), but the 'Value' field now includes configuration (Max=100) derived from Input[1] (Query B).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| Time          | Value (config: Max=100) |\n| ------------- | ----------------------- |\n| 1626178119127 | 10                      |\n| 1626178119129 | 30                      |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Videos in Hugo/Grafana Documentation Markdown\nDESCRIPTION: This snippet shows how to incorporate YouTube videos directly into Grafana documentation pages using the Hugo shortcode format. The 'id' parameter provides the YouTube video ID, and the optional 'rel=0' disables related videos. This functionality requires the documentation site to support such shortcodes and is used to offer inline video demonstrations for new features. Only YouTube video IDs are supported; ensure videos are accessible.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< youtube id=\"XHwwRCdxHMg?rel=0\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example SAML Assertion for Group Membership\nDESCRIPTION: This XML snippet shows a partial SAML assertion containing a 'groups' attribute. It includes two `AttributeValue` elements, 'admins_group' and 'division_1', demonstrating how group information might be structured in the SAML response from an Identity Provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<saml2:Attribute\n    Name=\"groups\"\n    NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\">\n    <saml2:AttributeValue\n        xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:type=\"xs:string\">admins_group\n    </saml2:AttributeValue>\n    <saml2:AttributeValue\n        xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:type=\"xs:string\">division_1\n    </saml2:AttributeValue>\n</saml2:Attribute>\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server from Standalone Binary Installation\nDESCRIPTION: Starts the Grafana server directly from the binary executable. This command should be run from the root directory where the standalone Grafana binaries were extracted. It starts Grafana in the foreground of the current terminal session.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/grafana server\n```\n\n----------------------------------------\n\nTITLE: Examples of Absolute and Semi-Relative Time Range Syntax in Grafana\nDESCRIPTION: Illustrates how to define absolute time ranges using specific timestamps (YYYY-MM-DD HH:MM:SS format) or relative values like 'now-24h' within the absolute range fields ('From' and 'To'). Also shows examples of semi-relative ranges which combine an absolute start time with a relative end time ('now'), or a modified relative start time ('now/d+8h') with a relative end time ('now').\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n2020-05-14 00:00:00 to 2020-05-15 23:59:59\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nnow-24h\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nStart time: 2023-05-01 00:00:00\nEnd time: now\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nStart time: now/d+8h\nEnd time: now\n```\n\n----------------------------------------\n\nTITLE: Organizing App Plugin Sections - Grafana INI\nDESCRIPTION: This section header introduces configuration for organizing app plugins into navigation sections. Individual directives below this header will map a plugin ID to a navigation section ID and determine sort order, such as '<pluginId> = <sectionId> <sortWeight>'. This enables custom UI organization for app pages, with parameters required for each directive under this header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: ini\nCODE:\n```\n[navigation.app_sections]\n```\n\n----------------------------------------\n\nTITLE: Registering Authorization Service on Local GRPC Server in Grafana via INI\nDESCRIPTION: This snippet configures Grafana to register the authorization service on the local GRPC server using the [authorization] INI section, with listen=true and mode=\"grpc\". \"app_mode\" is set to development to indicate the environment context. The client connects via GRPC on localhost, making this suitable for local experimentation or internal service communication.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\napp_mode = development\n\n[authorization]\nremote_address = \"localhost:10000\"\nlisten = true\nmode = \"grpc\"\n\n```\n\n----------------------------------------\n\nTITLE: Rendering PluginSignatureBadge Status Variants - React/TypeScript\nDESCRIPTION: Each code snippet below demonstrates the usage of the PluginSignatureBadge React component, wrapped inside an ExampleFrame for isolated Storybook presentation. The main dependency is the @grafana/ui PluginSignatureBadge component. The key parameter for each usage is the status prop, which may take values such as \"internal\", \"valid\", \"invalid\", \"modified\", or \"unsigned\" to display distinct visual badges representing plugin signature state. These snippets are intended for use in Storybook MDX files, and showcase what the badge will look like in different signature verification scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PluginSignatureBadge/PluginSignatureBadge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <PluginSignatureBadge status=\\\"internal\\\" />\\n</ExampleFrame>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <PluginSignatureBadge status=\\\"valid\\\" />\\n</ExampleFrame>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <PluginSignatureBadge status=\\\"invalid\\\" />\\n</ExampleFrame>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <PluginSignatureBadge status=\\\"modified\\\" />\\n</ExampleFrame>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <PluginSignatureBadge status=\\\"unsigned\\\" />\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Removing an External Group from a Team Response Example in JSON\nDESCRIPTION: Returns a JSON object confirming that the group has been removed from the team after a successful DELETE request. A message key contains the operation result. The API grants this response only on valid, successful deletions with no error or permission issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\\"message\\\":\\\"Team Group removed\\\"}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML with Dynamic data-testid Attributes\nDESCRIPTION: HTML output example showing how dynamic data-testid values appear in the rendered DOM.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card-item-name\" data-testid=\"data-testid Data source list item A\">A</div>\n<div class=\"card-item-name\" data-testid=\"data-testid Data source list item B\">B</div>\n<div class=\"card-item-name\" data-testid=\"data-testid Data source list item C\">C</div>\n```\n\n----------------------------------------\n\nTITLE: Modifying Viewer Role Permissions with RBAC HTTP API in Bash\nDESCRIPTION: This bash script fetches the basic viewer role, removes general app plugin access, adds specific access to kentik-connect-app plugin, and updates the role using the Grafana RBAC API. It uses jq for JSON manipulation and requires a service account token for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the role, modify it to remove the undesired permissions, add the new permission and increment its version\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n  -X GET '<grafana_url>/api/access-control/roles/basic_viewer' | \\\n  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \\\n  jq 'del(.permissions[] | select (.action == \"plugins.app:access\" and .scope == \"plugins:*\"))' | \\\n  jq '.permissions += [{\"action\": \"plugins.app:access\", \"scope\": \"plugins:id:kentik-connect-app\"}]' > /tmp/basic_viewer.json\n\n# Update the role\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \\\n  -X PUT -d @/tmp/basic_viewer.json '<grafana_url>/api/access-control/roles/basic_viewer'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Browser Timezone - Bash\nDESCRIPTION: Sets BROWSER_TZ to specify the timezone for the headless browser during rendering when not provided by Grafana. Accepts IANA timezone IDs, falling back to the system TZ if unset. Used for consistent time-based rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nBROWSER_TZ=Europe/Stockholm\n```\n\n----------------------------------------\n\nTITLE: Using the is_nan Function in Grafana Expressions\nDESCRIPTION: Demonstrates the `is_nan` function, which checks if a value is NaN (Not a Number). It returns 1 for NaN values and 0 otherwise, needed because `NaN` is not equal to `NaN`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_8\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nis_nan($A)\n```\n\n----------------------------------------\n\nTITLE: Enabling Strong Password Policy in Grafana\nDESCRIPTION: Configuration to enable Grafana's enhanced password policy that enforces stronger password requirements including minimum length, character types, and complexity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auth.basic]\npassword_policy = true\n```\n\n----------------------------------------\n\nTITLE: Embedding Video using Custom Hugo Shortcode (OpenID Discovery URL)\nDESCRIPTION: This snippet employs the custom `video-embed` Hugo shortcode to embed a screen recording. The video shows how entering an OpenID Connect Discovery URL in the Generic OAuth configuration form automatically populates related fields like Auth URL, Token URL, and API URL. The `src` parameter specifies the video file path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_7\n\nLANGUAGE: hugo\nCODE:\n```\n{{< video-embed src=\"/media/docs/grafana/screen-recording-11-2-openid-discovery-url.mp4\" >}}\n```\n\n----------------------------------------\n\nTITLE: Updating All Grafana Plugins using CLI (Bash)\nDESCRIPTION: Uses the Grafana command-line interface (CLI) tool to update all installed Grafana plugins to their latest compatible versions. This is recommended after upgrading the main Grafana application to ensure plugin compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins update-all\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Support Bundle Settings (INI)\nDESCRIPTION: This snippet shows the configuration options available within the `[support_bundles]` section of the Grafana configuration file (`grafana.ini`). It allows enabling/disabling bundle creation (`enabled`), restricting generation to server admins (`server_admin_only`), and specifying public keys for encrypting bundles (`public_keys`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[support_bundles]\n# Enable support bundle creation (default: true)\nenabled = true\n# Only server admins can generate and view support bundles. When set to false, organization admins can generate and view support bundles (default: true)\nserver_admin_only = true\n# If set, bundles will be encrypted with the provided public keys separated by whitespace\npublic_keys = \"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Status of Docker Compose Services - Bash\nDESCRIPTION: This command lists the status of the services defined in the current docker-compose context. It shows a table view including each service's container name, command, state, and ports. Dependencies: Docker and Docker Compose must be running. Input: None. Output: The state ('Up' or otherwise) and network/port assignments for each service, which helps verify successful setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose ps\n\n```\n\n----------------------------------------\n\nTITLE: Changing Default Raspberry Pi Password (Bash)\nDESCRIPTION: Initiates the password change process for the currently logged-in user ('pi' in this context). It prompts the user to enter the current password ('raspberry' by default) and then the new password twice for security.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npasswd\n```\n\n----------------------------------------\n\nTITLE: Applying Text Transformation and Utility Functions in Grafana Go Templates\nDESCRIPTION: This template snippet uses various built-in and Grafana-specific transformation functions for string manipulation (title, toUpper, toLower, trimSpace, match, reReplaceAll, join, safeHtml, stringSlice) for notification content. Dependencies include function support in the Grafana templating engine. Key parameters are the specific string or list values to be transformed and formatted. Output includes altered strings, regex-matched values, concatenated lists, and HTML-safe text for output rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ title \"hello, world!\" }}\n  {{ toUpper \"Hello, world!\" }}\n  {{ toLower \"Hello, world!\" }}\n  {{ trimSpace \"Hello, world!\" }}\n  {{ match \"a.*\" \"abc\" }}\n  {{ reReplaceAll \"localhost:(.*)\" \"example.com:$1\" \"localhost:8080\" }}\n  {{ join \"-\" (stringSlice \"a\" \"b\" \"c\") }}\n  {{ safeHtml \"<b>Text</b>\"}}\n  {{ stringSlice \"a\" \"b\" \"c\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generating RTK API Clients - Bash\nDESCRIPTION: Command to generate RTK API clients using yarn. This processes the spec files and creates the API clients.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn generate-apis\n```\n\n----------------------------------------\n\nTITLE: Including Thresholds Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation for threshold options from `visualizations/thresholds-options-1.md`. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/thresholds-options-1.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Components within Trans for Variable Display in JSX\nDESCRIPTION: Demonstrates embedding a custom component (`SearchTerm`) inside the `<Trans>` component. This pattern is suitable when the nested component primarily serves to display or style the interpolated variable (`term`). Requires `Trans` and potentially UI components like `@grafana/ui/Text`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\nimport { Text } from '@grafana/ui';\n\nconst SearchTerm = ({ term }) => <Text color=\"success\">{term}</Text>;\n\nconst SearchTitle = ({ term }) => (\n  <Trans i18nKey=\"search-page.results-title\">\n    Results for <SearchTerm term={term} />\n  </Trans>\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Service Account Token Permissions with cURL and jq - Bash\nDESCRIPTION: This bash snippet performs an HTTP GET request to the Grafana API endpoint \"/api/access-control/user/permissions\" using a specific Bearer token for authentication. The response, piped to 'jq', is formatted as JSON, listing all permission keys and their corresponding resources for the token. Requires cURL, jq, network access to the Grafana instance, a valid service account token with appropriate API rights. Input: Token string and Grafana URL. Output: JSON structure displaying permissions. Limitation: Sensitive to correct token and endpoint; output may be truncated for brevity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer glsa_HOruNAb7SOiCdshU9algkrq7FDsNSLAa_54e2f8be\" -X GET '<grafana_url>/api/access-control/user/permissions' | jq\n```\n\n----------------------------------------\n\nTITLE: Enabling Panel Redesign via 'newPanelChromeUI' Feature Toggle (Plaintext)\nDESCRIPTION: This represents the 'newPanelChromeUI' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the redesigned dashboard panel UI, which improves accessibility and information layout for React-based panels in Grafana v9.4.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnewPanelChromeUI\n```\n\n----------------------------------------\n\nTITLE: Listing API Keys Request Example using HTTP\nDESCRIPTION: Example HTTP GET request to list API keys using the deprecated `/api/auth/keys` endpoint. Requires `apikeys:read` permission on `apikeys:*` scope. Includes standard HTTP headers like `Accept`, `Content-Type`, and `Authorization` with a bearer token. The optional `includeExpired` query parameter can be used.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/auth/keys HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes in Markdown\nDESCRIPTION: Template for documenting breaking changes in pull request descriptions that need to be included in the changelog.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/merge-pull-request.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Release notice breaking change\n\n<Breaking change description>\n```\n\n----------------------------------------\n\nTITLE: Updating User Details via Grafana HTTP API (http)\nDESCRIPTION: Shows a HTTP PUT request to update user details, including email, name, login, and theme, for a specified user ID. Includes JSON body with new values, requiring administrative credentials and proper JSON content headers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/users/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\\n\\n{\\n  \"email\":\"user@mygraf.com\",\\n  \"name\":\"User2\",\\n  \"login\":\"user\",\\n  \"theme\":\"light\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Email Lookup in Grafana OAuth Configuration - INI\nDESCRIPTION: This snippet allows administrators to enable the deprecated email-based identity lookup mechanism for OAuth providers in Grafana. Placing `oauth_allow_insecure_email_lookup = true` under the `[auth]` section of the main configuration file (`grafana.ini`) reverts to the previous behavior where user accounts across identity providers are matched on email address. This setting is only recommended as a last resort and especially discouraged when using multi-tenant Azure AD due to security risks, including the potential for account takeovers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-0.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth]\noauth_allow_insecure_email_lookup = true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT to Skip Org Role Sync in Grafana (INI)\nDESCRIPTION: This snippet shows how to configure the Grafana server to skip automatic organization role assignment when authenticating users via JWT. By setting skip_org_role_sync = true in the [auth.jwt] section of the Grafana configuration file, the organization role synchronization during login is bypassed, allowing user roles and permissions to be managed through alternative workflows such as the UI. This requires access to the Grafana.ini (or relevant config file), and is relevant for deployments managing roles outside the JWT claim processing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[auth.jwt]\n# ...\nskip_org_role_sync = true\n```\n\n----------------------------------------\n\nTITLE: Creating a Short URL via HTTP POST Request\nDESCRIPTION: This snippet demonstrates an example HTTP POST request to the `/api/short-urls` endpoint to create a shortened URL in Grafana. It requires `Accept` and `Content-Type` headers set to `application/json`, an `Authorization` header with a bearer token, and a JSON body containing the relative `path` to be shortened.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/short_url.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/short-urls HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"path\": \"d/TxKARsmGz/new-dashboard?orgId=1&from=1599389322894&to=1599410922894\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an event table schema in SQL\nDESCRIPTION: SQL definition for creating a simple event table with time_sec, description, and tags fields. This represents a basic schema for storing event data in a SQL database.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [event] (\n  time_sec bigint,\n  description nvarchar(100),\n  tags nvarchar(100),\n)\n```\n\n----------------------------------------\n\nTITLE: Error Response for Shared Dashboard Creation in Grafana\nDESCRIPTION: This HTTP response demonstrates an error when attempting to create a shared dashboard that is already public, returning a status code 400 with an error message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad request\nContent-Type: application/json; charset=UTF-8\nContent-Length: 107\n\n{\n    \"statusCode\": 400,\n    \"messageId\": \"publicdashboards.dashboardIsPublic\",\n    \"message\": \"Dashboard is already public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove User Role Assignment Response\nDESCRIPTION: Success response for role removal operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"message\": \"Role removed from user.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Confirmation Response for Organization Update - JSON\nDESCRIPTION: Typical JSON response for successfully updating the organization, confirming the change with a message key. A 200 HTTP status code accompanies this response.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Organization updated\"}\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating Series with groupByNode() in Graphite\nDESCRIPTION: The `groupByNode()` function aggregates multiple time series into fewer series based on common metric path nodes. It takes a node index (e.g., `2`) to group by and an aggregation function (e.g., `'sum'`) to apply (like sum, average, max). This is particularly useful when working with wildcard queries that return many related series.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_2\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\ngroupByNode(2, 'sum')\n```\n\n----------------------------------------\n\nTITLE: Obtaining External URL or Path Prefix in Grafana Templates - Go Template\nDESCRIPTION: Examples for {{ externalURL }} and {{ pathPrefix }}, which return, respectively, the configured external URL or path prefix for a Grafana instance. No arguments required; outputs are URL strings as specified in the server configuration. Useful for constructing links back to Grafana from within alerts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_15\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ externalURL }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ pathPrefix }}\n\n```\n\n----------------------------------------\n\nTITLE: Navigating into the Tutorial Environment Directory - Bash\nDESCRIPTION: This Bash snippet changes the current working directory to 'tutorial-environment', which should have been created by cloning the tutorial environment repository. There are no dependencies other than having previously run the 'git clone' command. This command prepares the shell environment for running subsequent Docker Compose commands necessary for bringing up the Grafana stack.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial-environment\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Notification Policy Tree via HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates how to issue a GET request to the Grafana provisioning API to export the notification policy tree in YAML format. Authentication is provided using a Bearer token in the Authorization header. The request and response specify content types for correct serialization. Required parameters include the 'format=yaml' query and proper headers. The output is a YAML document representing notification policies suitable for import/export operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/policies/export?format=yaml\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker Container with Experimental Layers Enabled\nDESCRIPTION: This bash command demonstrates how to run a Grafana Docker container with experimental layers enabled by setting the GF_PANELS_ENABLE_ALPHA environment variable to true.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:3000 -e \"GF_PANELS_ENABLE_ALPHA=true\" grafana/grafana:<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Resetting Basic Roles - Grafana Access Control HTTP API - HTTP\nDESCRIPTION: Demonstrates a POST request to reset permissions for basic roles using the dedicated hard-reset endpoint. The body must indicate with 'BasicRoles' boolean whether to reset basic roles. Requires 'roles:write' permission with an escalate scope. Used for restoring default permissions when necessary.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/roles/hard-reset\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"BasicRoles\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Folders API GET Response Example\nDESCRIPTION: Example HTTP response for the GET /api/folders endpoint, returning a JSON array of folders with their IDs, UIDs, and titles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\":1,\n    \"uid\": \"nErXDvCkzz\",\n    \"title\": \"Department ABC\"\n  },\n  {\n    \"id\":2,\n    \"uid\": \"k3S1cklGk\",\n    \"title\": \"Department RND\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics with Variable Interpolation - Prometheus - Markdown Example\nDESCRIPTION: This snippet demonstrates how to use a variable in a Prometheus query within a Grafana dashboard panel. The variable `$server` acts as a placeholder for different server instance values, allowing for dynamic querying. Prerequisites include a working Grafana setup with Prometheus as a data source and at least one dashboard variable named `server`. The expected input is that the variable gets replaced at runtime with the selected value(s), enabling interactive exploration of system threads for different servers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nwmi_system_threads{instance=~\"$server\"}\n```\n\n----------------------------------------\n\nTITLE: Printing Values with Go Templates in Grafana Alerting - Go Template\nDESCRIPTION: Demonstrates how to print the value of a variable, variable field, function output, and dot context using Go template syntax inside Grafana alerting templates. Dependencies include Grafana\\'s template processing context and the Go text/template language. $values and .Alerts are standard variables exposed in alert/notification contexts, and humanize is a custom or built-in function; outputs are rendered to the final notification or alert message. No external imports required, but context-specific variable availability may constrain usage.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/language.md#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $values }}\n{{ $values.A.Value }}\n{{ humanize 1000.0 }}\n{{ .Alerts }}\n```\n\n----------------------------------------\n\nTITLE: Using Ceil Function in Grafana Expressions\nDESCRIPTION: The ceil function rounds a number up to the nearest integer value. It works with numeric inputs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nceil(3.123)\n```\n\n----------------------------------------\n\nTITLE: Installing Grizzly CLI for Grafana Resource Migration - Shell\nDESCRIPTION: This script demonstrates how to download and install the Grizzly CLI tool from the official GitHub releases for use in automating migration of dashboards, folders, and other resources. The binary is fetched for a specified OS/architecture combination and set as executable for all users. Requires: curl, access to /usr/local/bin, and potentially adaptation for other platforms. This is intended as a prerequisite for subsequent migration operations via Grizzly, and will not overwrite existing binaries unless permissions allow.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# download the binary (adapt os and arch as needed)\n$ curl -fSL -o \"/usr/local/bin/grr\" \"https://github.com/grafana/grizzly/releases/download/v0.3.1/grr-linux-amd64\"\n\n# make it executable\n$ chmod a+x \"/usr/local/bin/grr\"\n```\n\n----------------------------------------\n\nTITLE: Grafana Permissions Table in Markdown\nDESCRIPTION: Markdown table documenting Grafana permissions, their associated scopes, and descriptions. Covers various system aspects including data sources, feature management, folders, LDAP configuration, library panels, licensing, and organization user management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| `datasources:write`                   | <ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>                                                       | Update data sources.                                                                                                                                                                                                      |\n| `featuremgmt.read`                    | None                                                                                                                | Read feature toggles.                                                                                                                                                                                                     |\n| `featuremgmt.write`                   | None                                                                                                                | Write feature toggles.                                                                                                                                                                                                    |\n| `folders.permissions:read`            | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Read permissions for one or more folders and their subfolders.                                                                                                                                                            |\n| `folders.permissions:write`           | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Update permissions for one or more folders and their subfolders.                                                                                                                                                          |\n| `folders:create`                      | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`folders:uid:general`</li></ul>                                 | Create folders or subfolders. If granted with scope `folders:uid:general`, it allows to create root level folders. Otherwise, it allows creating subfolders under the specified folders.                                  |\n| `folders:delete`                      | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Delete one or more folders and their subfolders.                                                                                                                                                                          |\n| `folders:read`                        | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Read one or more folders and their subfolders.                                                                                                                                                                            |\n| `folders:write`                       | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Update one or more folders and their subfolders.                                                                                                                                                                          |\n| `ldap.config:reload`                  | None                                                                                                                | Reload the LDAP configuration.                                                                                                                                                                                            |\n| `ldap.status:read`                    | None                                                                                                                | Verify the availability of the LDAP server or servers.                                                                                                                                                                    |\n| `ldap.user:read`                      | None                                                                                                                | Read users via LDAP.                                                                                                                                                                                                      |\n| `ldap.user:sync`                      | None                                                                                                                | Sync users via LDAP.                                                                                                                                                                                                      |\n| `library.panels:create`               | <ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>                                                               | Create a library panel in one or more folders and their subfolders.                                                                                                                                                       |\n| `library.panels:read`                 | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Read one or more library panels.                                                                                                                                                                                          |\n| `library.panels:write`                | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Update one or more library panels.                                                                                                                                                                                        |\n| `library.panels:delete`               | <ul><li>`folders:*`</li><li>`folders:uid:*`</li><li>`library.panels:*`</li><li>`library.panels:uid:*`</li></ul>     | Delete one or more library panels.                                                                                                                                                                                        |\n| `licensing.reports:read`              | None                                                                                                                | Get custom permission reports.                                                                                                                                                                                            |\n| `licensing:delete`                    | None                                                                                                                | Delete the license token.                                                                                                                                                                                                 |\n| `licensing:read`                      | None                                                                                                                | Read licensing information.                                                                                                                                                                                               |\n| `licensing:write`                     | None                                                                                                                | Update the license token.                                                                                                                                                                                                 |\n| `migrationassistant:migrate`          | None                                                                                                                | Execute on-prem to cloud migrations through the Migration Assistant.   |\n| `org.users:write`                     | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Update the organization role (`None`, `Viewer`, `Editor`, or `Admin`) of a user.                                                                                                                                          |\n| `org.users:add`                       | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Add a user to an organization or invite a new user to an organization.                                                                                                                                                    |\n| `org.users:read`                      | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Get user profiles within an organization.                                                                                                                                                                                 |\n| `org.users:remove`                    | <ul><li>`users:*`</li><li>`users:id:*`</li></ul>                                                                    | Remove a user from an organization.                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Editing Prometheus systemd Service File with nano (Linux/MacOS, Bash)\nDESCRIPTION: This snippet shows how to open and edit the Prometheus systemd service unit file using nano on Linux or MacOS. Admins must ensure the \\\"prometheus.service\\\" file is located in \\\"/etc/systemd/system/\\\". Editing this file allows you to set paths, configuration, and restart behaviors for the Prometheus service. Requires superuser privileges. No output is produced; changes are saved in the file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/systemd/system/prometheus.service\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Columns for Templating Variable in PostgreSQL\nDESCRIPTION: Shows a SQL query that joins two tables to retrieve hostnames from different sources. This query demonstrates how to create a templating variable with multiple columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT host.hostname, other_host.hostname2 FROM host JOIN other_host ON host.city = other_host.city\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Storage for Grafana API Server in INI\nDESCRIPTION: This INI configuration snippet, added to Grafana's configuration file, instructs the Grafana Kubernetes API server to use etcd as its storage backend. It sets the `storage_type` to `etcd` and specifies the network address(es) of the etcd server(s) via `etcd_servers`.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[grafana-apiserver]\nstorage_type = etcd\netcd_servers = 127.0.0.1:2379\n```\n\n----------------------------------------\n\nTITLE: Querying and Processing Tank Temperature Data with Flux for Grafana Alerting\nDESCRIPTION: This Flux query retrieves temperature data (actual and setpoint) for multiple specified tanks from an InfluxDB bucket ('HyperEncabulator'). It filters the data, aggregates it using a mean function over Grafana's window period, pivots it to align actual and setpoint values by timestamp, calculates the temperature difference (`setpoint - actual`), renames the calculated difference column from '_value' to 'difference', keeps only essential columns, and drops intermediate ones. The final result is yielded for use in Grafana multidimensional alerting, representing the temperature deviation for each tank. Requires an InfluxDB source named 'HyperEncabulator' with the specified data structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_9\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"HyperEncabulator\")\n |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n |> filter(fn: (r) => r[\"_measurement\"] == \"TemperatureData\")\n |> filter(fn: (r) => r[\"MeasType\"] == \"actual\" or r[\"MeasType\"] == \"setpoint\")\n |> filter(fn: (r) => r[\"Tank\"] == \"A5\" or r[\"Tank\"] == \"B4\" or r[\"Tank\"] == \"C3\" or r[\"Tank\"] == \"D2\" or r[\"Tank\"] == \"E1\")\n |> filter(fn: (r) => r[\"_field\"] == \"Temperature\")\n |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n |> pivot(rowKey:[\"_time\"], columnKey: [\"MeasType\"], valueColumn: \"_value\")\n |> map(fn: (r) => ({ r with _value: (r.setpoint - r.actual)}))\n |> rename(columns: {_value: \"difference\"})\n |> keep(columns: [\"_time\", \"difference\", \"Tank\"])\n |> drop(columns: [\"actual\", \"setpoint\"])\n |> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element by Name Request Example (HTTP)\nDESCRIPTION: Example HTTP GET request to fetch library elements matching a specific name using the `/api/library-elements/name/:name` endpoint. The name 'API docs Example' is provided in the path. Requires authentication via Bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/library-elements/name/API docs Example HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Ensuring Previous Regex Behavior in Rename Transformation (Regex)\nDESCRIPTION: This example demonstrates how to wrap a previous regex pattern, such as `(.*)`, within forward slashes (`/(.*)/`) in Grafana 9.0's \"rename by regex\" transformation. This explicitly avoids the new global flag interpretation and guarantees the same behavior as before the update.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_6\n\nLANGUAGE: regex\nCODE:\n```\n/(.*)/\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Moving a Grafana Folder\nDESCRIPTION: This snippet illustrates a successful (HTTP 200 OK) response after moving a Grafana folder. The response body is a JSON object containing the updated details of the moved folder, including its `id`, `uid`, `title`, `url`, permissions (`canSave`, `canEdit`, etc.), timestamps, the new `parentUid`, and an array `parents` listing the hierarchy of parent folders.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n\t\"id\": 4,\n\t\"uid\": \"a5393ec3-5568-4e88-8809-b866968ae8a6\",\n\t\"title\": \"just-testing\",\n\t\"url\": \"/dashboards/f/a5393ec3-5568-4e88-8809-b866968ae8a6/just-testing\",\n\t\"hasAcl\": false,\n\t\"canSave\": true,\n\t\"canEdit\": true,\n\t\"canAdmin\": true,\n\t\"canDelete\": true,\n\t\"createdBy\": \"Anonymous\",\n\t\"created\": \"2023-04-27T21:55:01.593741+03:00\",\n\t\"updatedBy\": \"Anonymous\",\n\t\"updated\": \"2023-04-27T21:55:15.747444+03:00\",\n\t\"parentUid\": \"d80b18c0-266a-4aa4-ad5d-5537a00cb8e8\",\n\t\"parents\": [\n\t\t{\n\t\t\t\"id\": 2,\n\t\t\t\"uid\": \"d80b18c0-266a-4aa4-ad5d-5537a00cb8e8\",\n\t\t\t\"title\": \"f0\",\n\t\t\t\"url\": \"\",\n\t\t\t\"hasAcl\": false,\n\t\t\t\"canSave\": true,\n\t\t\t\"canEdit\": true,\n\t\t\t\"canAdmin\": true,\n\t\t\t\"canDelete\": true,\n\t\t\t\"createdBy\": \"Anonymous\",\n\t\t\t\"created\": \"2023-04-27T21:53:46.070672+03:00\",\n\t\t\t\"updatedBy\": \"Anonymous\",\n\t\t\t\"updated\": \"2023-04-27T21:53:46.070673+03:00\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service (Bash)\nDESCRIPTION: Uses `systemctl start` to immediately start the `grafana-server` service. This makes Grafana accessible on port 3000 after execution. Requires `sudo` privileges and `systemd`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/systemctl start grafana-server\n```\n\n----------------------------------------\n\nTITLE: Notification Template Groups Response - JSON\nDESCRIPTION: This snippet provides an example HTTP 200 OK response for the notification template group request. The response body is JSON-formatted and contains an array of objects, each describing a template by name, content, and provenance. Templates leverage Go templating with definitions for message and subject customization, and their provenance field tracks source. This structure supports dynamic, reusable notification messages for alerting workflows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n[\\n  {\\n    \"name\": \"custom_email.message\",\\n    \"template\": \"{{ define \\\"custom_email.message\\\" }}\\n  Custom alert!\\n{{ end }}\",\\n    \"provenance\": \"file\"\\n  },\\n  {\\n    \"name\": \"custom_email.subject\",\\n    \"template\": \"{{ define \\\"custom_email.subject\\\" }}\\n{{ len .Alerts.Firing }} firing alert(s), {{ len .Alerts.Resolved }} resolved alert(s)\\n{{ end }}\",\\n    \"provenance\": \"file\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Representing Time Series Data for Inner Join (Query B)\nDESCRIPTION: This Markdown table displays example time series data from 'Query B', meant to be joined with 'Query A' using an inner join. It contains columns for Time, Server, and Errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Server   | Errors |\n| ------------------- | -------- | ------ |\n| 2020-07-07 11:34:20 | server 1 | 15     |\n| 2020-07-07 11:24:20 | server 2 | 5      |\n| 2020-07-07 11:04:20 | server 3 | 10     |\n```\n\n----------------------------------------\n\nTITLE: Querying Grafana Team Groups with Auth Headers\nDESCRIPTION: Example of querying specific team groups in Grafana using authentication headers. Demonstrates how to verify group mappings for a particular team.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-WEBAUTH-USER: admin\" -H \"X-WEBAUTH-GROUPS: lokiteamOnExternalSystem\" http://localhost:3000/api/teams/2/groups\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Environment Label Value using Go Template in Grafana\nDESCRIPTION: This Go template is used within Grafana's alert configuration to dynamically set the value of a custom `environment` label based on the value of the `environment` label present in the queried metric (`$labels.environment`). It maps 'prod' to 'production', 'staging' to 'staging', and defaults any other value to 'development'. This templated label is crucial for routing alert notifications to different teams or policies based on the originating environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n{{- if eq $labels.environment \"prod\" -}}\nproduction\n{{- else if eq $labels.environment \"staging\" -}}\nstaging\n{{- else -}}\ndevelopment\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating Host Directory for Bind Mount (Bash)\nDESCRIPTION: Bash command to create a directory named `data` in the current working directory (`$PWD`) on the host machine. This directory will be used as the target for a bind mount, allowing Grafana data to be stored directly on the host filesystem.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $PWD/data\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace IDs in Error Messages via Feature Flag (Configuration)\nDESCRIPTION: This feature flag, `tracing`, enables the inclusion of trace IDs in error alert messages within Grafana, aiding in debugging. This is part of an opt-in feature and should be enabled alongside `persistNotifications` for full functionality. Set this flag to true in Grafana configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_1\n\nLANGUAGE: configuration\nCODE:\n```\ntracing\n```\n\n----------------------------------------\n\nTITLE: Recompiling Protobuf Files in Grafana and Plugin SDK\nDESCRIPTION: Commands to recompile protobuf files after upgrading the protobuf library. This requires Buf CLI to be installed and available in your path. The commands navigate to the Grafana directory and plugin SDK directory to execute the necessary compilation commands.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/upgrade-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd $GRAFANA\nmake protobuf\ncd $GRAFANA_PLUGIN_SDK_GO\nmage protobuf\n```\n\n----------------------------------------\n\nTITLE: Example Annotation Output with Label and Value\nDESCRIPTION: This shows the rendered output of a Grafana alert annotation template that includes both a label (`instance`) and a query value. It demonstrates how dynamic data from the alert context is substituted into the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Validation in Form Field (JavaScript/JSX)\nDESCRIPTION: Provides a sample of using an asynchronous validator within a form, passing an async function as a validation rule in the react-hook-form register call. Highlights error message handling and dependency on validateAsync function. Integrates error indication and custom error messages for async form validation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Form ...>{\n  ({register, errors}) => (\n    <>\n      <Field invalid={!!errors.name} error={errors.name?.message}\n      <Input\n        defaultValue={default.name}\n        {...register(\"name\", {\n          required: 'Name is required',\n          validation: async v => {\n            return  await validateAsync(v);\n          },\n        )}\n      />\n    </>\n  )}\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Method-Level Release Tag Placement Example - TypeScript\nDESCRIPTION: This snippet shows a discouraged documentation style where each method within a class has its own release tag, rather than using a class-level release tag and overriding only where necessary. It serves as a negative example for TSDoc usage in TypeScript, promoting consistency and reducing redundant tagging. The context involves class-based APIs with methods of varying stability.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Helps to create DataFrame objects and handle\n * the heavy lifting of creating a complex object.\n *\n * @example\n * ```typescript\n * const dataFrame = factory.create();\n * ```\n **/\nexport class DataFrameFactory {\n  /**\n   * @public\n   **/\n  create(): DataFrame {}\n\n  /**\n   * @beta\n   **/\n  createMany(): DataFrame[] {}\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Service Account Token Creation in Grafana (HTTP)\nDESCRIPTION: The HTTP response from creating a service account token includes the token ID, name, and the actual token key that will be used for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n\t\"id\": 7,\n\t\"name\": \"grafana\",\n\t\"key\": \"eyJrIjoiVjFxTHZ6dGdPSjg5Um92MjN1RlhjMkNqYkZUbm9jYkwiLCJuIjoiZ3JhZmFuYSIsImlkIjoxfQ==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Device Scale Factor - Bash\nDESCRIPTION: Configures RENDERING_VIEWPORT_DEVICE_SCALE_FACTOR to specify the device pixel ratio for renders. Higher numbers yield higher-resolution images. Useful for print-quality output. Requires v3.9.0+; default is 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_DEVICE_SCALE_FACTOR=2\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Variables in Go Template\nDESCRIPTION: These Go template snippets demonstrate accessing and rendering context variables (`.InvitedBy`, `.OrgName`, `.LinkUrl`). They are used within the email template to insert dynamic data provided when the template is executed, such as the name of the person sending the invitation, the name of the Grafana organization, and the unique URL for accepting the invitation.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/new_user_invite.txt#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n[[.InvitedBy]]\n```\n\nLANGUAGE: go-template\nCODE:\n```\n[[.OrgName]]\n```\n\nLANGUAGE: go-template\nCODE:\n```\n[[.LinkUrl]]\n```\n\n----------------------------------------\n\nTITLE: Dashboard Permissions API Response\nDESCRIPTION: Example response from the GET permissions API endpoint showing the permission structure. The response includes details about user, team, and role permissions with their respective permission levels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 551\n\n[\n  {\n    \"id\": 1,\n    \"dashboardId\": -1,\n    \"created\": \"2017-06-20T02:00:00+02:00\",\n    \"updated\": \"2017-06-20T02:00:00+02:00\",\n    \"userId\": 0,\n    \"userLogin\": \"\",\n    \"userEmail\": \"\",\n    \"teamId\": 0,\n    \"team\": \"\",\n    \"role\": \"Viewer\",\n    \"permission\": 1,\n    \"permissionName\": \"View\",\n    \"uid\": \"dHEquNzGz\",\n    \"title\": \"\",\n    \"slug\": \"\",\n    \"isFolder\": false,\n    \"url\": \"\"\n  },\n  {\n    \"id\": 2,\n    \"dashboardId\": -1,\n    \"created\": \"2017-06-20T02:00:00+02:00\",\n    \"updated\": \"2017-06-20T02:00:00+02:00\",\n    \"userId\": 0,\n    \"userLogin\": \"\",\n    \"userEmail\": \"\",\n    \"teamId\": 0,\n    \"team\": \"\",\n    \"role\": \"Editor\",\n    \"permission\": 2,\n    \"permissionName\": \"Edit\",\n    \"uid\": \"dHEquNzGz\",\n    \"title\": \"\",\n    \"slug\": \"\",\n    \"isFolder\": false,\n    \"url\": \"\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Templates with 'define' in Go Templates\nDESCRIPTION: Illustrates how to define a named, reusable template block using the `define` keyword followed by the template name in double quotes (e.g., `\"print_labels\"`). The content of the reusable template goes between the `define` and `end` tags.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"print_labels\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Mapping Grafana Roles Based on User Email via JMESPath (INI)\nDESCRIPTION: This INI configuration uses a JMESPath expression in `role_attribute_path` to assign the 'Admin' role to the user with email 'admin@company.com' and the 'Viewer' role to all other users. The `skip_org_role_sync` setting must be set to `false` for this role mapping to take effect upon user login.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/google/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n```ini\nrole_attribute_path = email=='admin@company.com' && 'Admin' || 'Viewer'\nskip_org_role_sync = false\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Label based on Instance Label (Exact Match)\nDESCRIPTION: This Go template creates an `environment` label based on the exact value of the `instance` label provided by the query. It uses `if/else if/else` logic and the `eq` (equals) function to map specific instance names ('prod-server-1', 'staging-server-1') to environment names ('production', 'staging'), with a default of 'development'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_15\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- if eq $labels.instance \"prod-server-1\" -}}\nproduction\n{{- else if eq $labels.instance \"staging-server-1\" -}}\nstaging\n{{- else -}}\ndevelopment\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Wire-Generated Code with Error Handling in Go\nDESCRIPTION: Shows the updated initialization code generated by Wire that includes error checking and propagation.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc InitializeEvent() (Event, error) {\n    message := NewMessage()\n    greeter := NewGreeter(message)\n    event, err := NewEvent(greeter)\n    if err != nil {\n        return Event{}, err\n    }\n    return event, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Parsing in Grafana\nDESCRIPTION: This example shows how to parse JSON data in Grafana, extracting a specific field and renaming it. It transforms a dataset with timestamp and JSON data into a time series with a single value column.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### Dataset Example\n\n| Timestamp           | json_data     |\n| ------------------- | ------------- |\n| 1636678740000000000 | {\"value\": 1}  |\n| 1636678680000000000 | {\"value\": 5}  |\n| 1636678620000000000 | {\"value\": 12} |\n\n#### Transformed Data\n\n| Timestamp           | my_value |\n| ------------------- | -------- |\n| 1636678740000000000 | 1        |\n| 1636678680000000000 | 5        |\n| 1636678620000000000 | 12       |\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Sending Test Email in Grafana API (HTTP)\nDESCRIPTION: This HTTP response shows a successful result after sending a test email with a report using the Grafana Reporting API. It returns a 200 OK status code and a JSON body confirming that the test email was sent.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 29\n\n{\n\t\"message\": \"Test email sent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Summary Annotation with Dynamic Values in Grafana Alerting (Go Template)\nDESCRIPTION: This Go template snippet demonstrates how to create a dynamic `summary` annotation for a Grafana alert rule. It uses the `$labels.instance` variable to insert the specific instance identifier and `$values.A.Value` to include the actual metric value that triggered the alert, making the annotation more informative.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\nCPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Representing SQL-like Data for Outer Join (Enrollments Table)\nDESCRIPTION: This Markdown table presents sample data for an 'Enrollments' table, intended to be joined with the 'Students' table using an outer join based on 'StudentID'. It contains columns for StudentID, CourseID, and Grade.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | CourseID | Grade |\n| --------- | -------- | ----- |\n| 1         | CS101    | A     |\n| 1         | CS102    | B     |\n| 2         | MATH201  | A     |\n| 3         | PHYS101  | B     |\n| 5         | HIST101  | B     |\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest Metadata (JSON)\nDESCRIPTION: This JSON object, embedded within the PGP signed message, defines the manifest details for the 'test-datasource' Grafana plugin. It specifies the manifest version (2.0.0), signature type (private), signing organization details, root URLs (for development/testing), plugin ID ('test-datasource'), version (1.0.0), signing timestamp, the PGP key ID used for signing, and a SHA512 hash for the 'plugin.json' file to ensure its integrity.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"willbrowne\",\n  \"signedByOrgName\": \"Will Browne\",\n  \"rootUrls\": [\n    \"http://localhost:3000/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171417046,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Dashboard Versions in Grafana HTTP API\nDESCRIPTION: This HTTP request compares two different dashboard versions by calculating their JSON diff. It requires specifying base and new versions along with the diff type (json or basic).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/calculate-diff HTTP/1.1\nAccept: text/html\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"base\": {\n    \"dashboardId\": 1,\n    \"version\": 1\n  },\n  \"new\": {\n    \"dashboardId\": 1,\n    \"version\": 2\n  },\n  \"diffType\": \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Updating an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) after updating a Grafana organization. The response body is a JSON object confirming the update.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization updated\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Data Sources using Make and Docker (Bash)\nDESCRIPTION: Runs the `make devenv` command to automatically set up specified data sources (e.g., `influxdb`, `loki`) for the Grafana development environment. It leverages Docker and Docker Compose to generate a configuration and run the required database containers in the background. Requires Docker to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=influxdb,loki\n```\n\n----------------------------------------\n\nTITLE: Reverting Service Account Token to API Key in Grafana (HTTP)\nDESCRIPTION: This HTTP request converts a service account token back to a legacy API key. This operation deletes the service account and creates a legacy API Key for the given keyId.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/serviceaccounts/1/revert/glsa_VVQjot0nijQ59lun6pMZRtsdBXxnFQ9M_77c34a79 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Running Go Linters in Grafana\nDESCRIPTION: Command to run all configured linters on the Go codebase using the make command with the lint-go target.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake lint-go\n```\n\n----------------------------------------\n\nTITLE: Example Response for Querying Annotations - HTTP+JSON\nDESCRIPTION: Shows a sample HTTP 200 response body after querying the annotation endpoint. The response contains an array of annotation JSON objects detailing id, alertId, dashboardId, dashboardUID, panelId, userId, time, tags, and other metadata. Useful for understanding the structure of annotation objects returned by the API.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n[\\n    {\\n        \"id\": 1124,\\n        \"alertId\": 0,\\n        \"dashboardId\": 468,\\n        \"dashboardUID\": \"uGlb_lG7z\",\\n        \"panelId\": 2,\\n        \"userId\": 1,\\n        \"userName\": \"\",\\n        \"newState\": \"\",\\n        \"prevState\": \"\",\\n        \"time\": 1507266395000,\\n        \"timeEnd\": 1507266395000,\\n        \"text\": \"test\",\\n        \"metric\": \"\",\\n        \"tags\": [\\n            \"tag1\",\\n            \"tag2\"\\n        ],\\n        \"data\": {}\\n    },\\n    {\\n        \"id\": 1123,\\n        \"alertId\": 0,\\n        \"dashboardId\": 468,\\n        \"dashboardUID\": \"jcIIG-07z\",\\n        \"panelId\": 2,\\n        \"userId\": 1,\\n        \"userName\": \"\",\\n        \"newState\": \"\",\\n        \"prevState\": \"\",\\n        \"time\": 1507265111000,\\n        \"text\": \"test\",\\n        \"metric\": \"\",\\n        \"tags\": [\\n            \"tag1\",\\n            \"tag2\"\\n        ],\\n        \"data\": {}\\n    }\\n]\n```\n\n----------------------------------------\n\nTITLE: Searching for Dashboards with Specific Criteria in HTTP\nDESCRIPTION: This HTTP GET request searches for dashboards using specific criteria. It uses the /api/search endpoint with query parameters for a search query, starred status, and tag filter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/search?query=Production%20Overview&starred=true&tag=prod HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating with Metric Field for Wide Data Frames - SQL\nDESCRIPTION: Demonstrates using the $__timeGroupAlias macro to aggregate by 5-minute intervals, applying SQL MIN() aggregation to 'value_double', and adds a hard-coded 'metric' label. For use with test_data in Grafana panel with wide data frame formatting. Depends on Grafana SQL macros.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(time_date_time,'5m'),\n  min(value_double),\n  'min' as metric\nFROM test_data\nWHERE $__timeFilter(time_date_time)\nGROUP BY time\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Docker Command to Launch Apache Authentication Proxy\nDESCRIPTION: Docker command to run Apache HTTP server container with custom configuration and htpasswd file, linked to the Grafana container for authentication proxying.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -p 80:80 --link grafana:grafana -v $(pwd)/httpd.conf:/usr/local/apache2/conf/httpd.conf -v $(pwd)/htpasswd:/tmp/htpasswd httpd:2.4\n```\n\n----------------------------------------\n\nTITLE: Updating an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP PUT request to update an existing Grafana organization identified by `:orgId`. It sends a JSON payload containing the new organization name. This operation requires Basic Authentication and the `orgs:write` permission. Note that address fields are not currently implemented.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/orgs/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\":\"Main Org 2.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Plugins into Grafana Cloud via HTTP API - Shell\nDESCRIPTION: This shell loop reads the plugins.json file created previously and issues an authenticated HTTP POST request via curl for each plugin to the Grafana Cloud instance. It dynamically constructs the stack identifier from the provided Grafana Cloud instance URL, extracting name and version from JSON. The access token (<GRAFANA_CLOUD_ACCESS_TOKEN>) must be set prior to execution. Dependencies: jq, curl, populated plugins.json, and a valid Grafana Cloud API token. Each attempt's response is echoed to the console for confirmation. Make sure to use correct variable values and ensure that plugins.json matches expected structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCLOUD_INSTANCE=$GRAFANA_CLOUD_INSTANCE_URL\n\nstack_slug=\"${CLOUD_INSTANCE#*//}\"\nstack_slug=\"${stack_slug%%.*}\"\njq -c '.[]' plugins.json | while IFS= read -r plugin; do\n  name=$(echo \"$plugin\" | jq -r '.name')\n  version=$(echo \"$plugin\" | jq -r '.version')\n  echo \"Adding plugin $name with version $version to stack $stack_slug\"\n  response=$(curl -s -X POST \"https://grafana.com/api/instances/$stack_slug/plugins\" \\\n            -H \"Authorization: Bearer <GRAFANA_CLOUD_ACCESS_TOKEN>\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\\\"plugin\\\": \\\"$name\\\", \\\"version\\\": \\\"$version\\\"}\")\n  echo \"POST response for plugin $name version $version: $response\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Playlist Creation Manifest - YAML\nDESCRIPTION: This YAML manifest defines a Playlist custom resource for the Grafana app, with a metadata section using generateName, labels, annotations, and a detailed spec including title, interval, and items. Dependencies include the relevant CRD being available in the Kubernetes cluster. The spec's items array defines dashboard selection logic. Limitations: the generateName field must avoid boolean string values such as 'yes' or 'true' as they will be interpreted as booleans.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: playlist.grafana.app/v0alpha1\\nkind: Playlist\\nmetadata:\\n  generateName: x # anything is ok here... except yes or true -- they become boolean!\\n  labels:\\n    foo: bar\\n  annotations:\\n    grafana.app/slug: \\\"slugger\\\"\\n    grafana.app/updatedBy: \\\"updater\\\"\\nspec:\\n  title: Playlist with auto generated UID\\n  interval: 5m\\n  items:\\n  - type: dashboard_by_tag\\n    value: panel-tests\\n  - type: dashboard_by_uid\\n    value: vmie2cmWz # dashboard from devenv\n```\n\n----------------------------------------\n\nTITLE: Querying Time-Dependent Data for Templating Variable in PostgreSQL\nDESCRIPTION: Illustrates a SQL query that uses a time filter macro to retrieve time-dependent data for a templating variable. This query is useful for creating dynamic variables based on the current time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT event_name FROM event_log WHERE $__timeFilter(time_column)\n```\n\n----------------------------------------\n\nTITLE: Listing Organizations for a User via Grafana HTTP API (http)\nDESCRIPTION: Provides an authenticated HTTP GET request format for retrieving all organizations associated with a user ID. Useful for management tools or dashboards showing user-role relationships and organization membership.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/1/orgs HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\n----------------------------------------\n\nTITLE: Deleting SSO Settings for a Provider via HTTP API in HTTP\nDESCRIPTION: Illustrates how to remove SSO settings for a provider with a HTTP DELETE request to /api/v1/sso-settings/:provider. The request must be authorized using a bearer token and requires 'settings:write' permission. On success, the server responds with an empty 204 status. Useful for reverting provider settings to defaults or removing unwanted provider configurations. Ensure proper error handling for cases where the provider's settings do not exist.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/sso-settings.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/v1/sso-settings/azuread HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Granting Reset Permission to Grafana Admin via YAML Provisioning - YAML Example\nDESCRIPTION: This YAML snippet updates the 'basic:grafana_admin' basic role provisioning to grant the capability to reset basic roles by adding the 'roles:write' action with a specific escalation scope. Required prerequisites: access to configuration file, role versioning, understanding of RBAC scopes. Input is the YAML config; output is an updated role permission that can call the reset endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 2\nroles:\n  - name: 'basic:grafana_admin'\n    global: true\n    version: 3\n    from:\n      - name: 'basic:grafana_admin'\n        global: true\n    permissions:\n      # Permission allowing to reset basic roles\n      - action: 'roles:write'\n        scope: 'permissions:type:escalate'\n\n```\n\n----------------------------------------\n\nTITLE: Tagging Stable API Endpoints in Go Comments\nDESCRIPTION: This Go comment demonstrates how to mark an API endpoint as stable. By adding the `stable` tag to the `swagger:route` directive, the endpoint is included in the `api.json` definition, which represents the publicly documented stable API surface. Endpoints without this tag are considered unstable and are only included in the `post.json` file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// swagger:route GET /provisioning/contact-points provisioning stable RouteGetContactpoints\n```\n\n----------------------------------------\n\nTITLE: Using $<varname> Syntax in SQL Queries\nDESCRIPTION: SQL query example using the $<varname> syntax to incorporate a template variable named 'hostname' with the Grafana time filter macro.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  atimestamp time,\n  aint value\nFROM table\nWHERE $__timeFilter(atimestamp) and hostname in($hostname)\nORDER BY atimestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Plugin Application Settings using YAML\nDESCRIPTION: This YAML example illustrates the configuration file structure for provisioning Grafana plugin applications. It defines a list under `apps`, where each entry configures a specific installed plugin (identified by `type`). Key settings include the target organization (`org_id` or `org_name`), enabled/disabled status (`disabled`), custom configuration data (`jsonData`), and encrypted sensitive configuration (`secureJsonData`). This allows automating plugin setup across Grafana instances.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\napps:\n  # <string> the type of app, plugin identifier. Required\n  - type: raintank-worldping-app\n    # <int> Org ID. Default to 1, unless org_name is specified\n    org_id: 1\n    # <string> Org name. Overrides org_id unless org_id not specified\n    org_name: Main Org.\n    # <bool> disable the app. Default to false.\n    disabled: false\n    # <map> fields that will be converted to json and stored in jsonData. Custom per app.\n    jsonData:\n      # key/value pairs of string to object\n      key: value\n    # <map> fields that will be converted to json, encrypted and stored in secureJsonData. Custom per app.\n    secureJsonData:\n      # key/value pairs of string to string\n      key: value\n```\n\n----------------------------------------\n\nTITLE: Linking to Grafana Playground Example for Pie Charts\nDESCRIPTION: Uses a Hugo shortcode (`docs/play`) to embed a link to a pre-configured Grafana Play dashboard. This allows users to interactively explore an example featuring bar and pie charts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/play title=\"Grafana Bar Charts and Pie Charts\" url=\"https://play.grafana.org/d/ktMs4D6Mk/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Querying Graphite Apps for Chained Variables\nDESCRIPTION: This Graphite query returns all applications for use in a parent variable of a chained variable setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: graphite\nCODE:\n```\napps.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Attribute Paths for JWT Login\nDESCRIPTION: Configuration for accessing nested attributes in JWT structure using JMESPath syntax to extract username and email values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# [auth.jwt]\n# ...\n\n# Specify a nested attribute to use as a username to sign in.\nusername_attribute_path = user.username # user's login is johndoe\n\n# Specify a nested attribute to use as an email to sign in.\nemail_attribute_path = user.emails[1] # user's email is professional@email.com\n```\n\n----------------------------------------\n\nTITLE: Representing SQL-like Data for Outer Join (Students Table)\nDESCRIPTION: This Markdown table shows sample data representing a 'Students' table, used as input for an outer join example with SQL-like data. It includes columns for StudentID, Name, and Major.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | Name     | Major            |\n| --------- | -------- | ---------------- |\n| 1         | John     | Computer Science |\n| 2         | Emily    | Mathematics      |\n| 3         | Michael  | Physics          |\n| 4         | Jennifer | Chemistry        |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Issue Triage Process with ASCII Flowchart\nDESCRIPTION: ASCII flowchart diagram showing the complete issue triage workflow for Grafana, including decision points for information completeness, issue duplication, reproducibility, and priority assignment.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                         +-------------------+\n                        |                   |\n                        |  new issue/       |                                                                             +\n                        |  more info added  |\n                        |                   |\n                        +---------|---------+\n                                  |\n                    +-------------|-----------+\n                    |                         |\n        NO   +-------  all info needed to     ------+  YES\n             |      |  categorize the issue?  |     |\n             |      |                         |     |\n             |      +-------------------------+     |\n      +------|-----------+             +------------|----------+\n      |                  |             |                       |\n      | label:           |             |  label: type/*        |\n      | needs more info  |             |  label: area/*        |\n      |                  |             |  label: datasource/*  |\n      +------------------+             |            |          |\n                                       +------------|----------+\n                                                    |\n                                           +--------|-------+\n                                           |                |\n                             NO  +---------- is duplicate?  --------------------+ YES\n                                 |         |                |                   |\n                                 |         +----------------+                   |\n                                 |                             +----------------|---------------+\n                          +------|-----+                       |                                |\n                          |            |                       |  add comment:                  |\n          NO  +------------ can repro? ------------+  YES      |                                |\n              |           |            |           |           |  /duplicate of #<issue number> |\n              |           +------------+           |           |                                |\n              |                                    |           +--------------------------------+\n+-------------|-------------+                      |\n|                           |             +--------|---------+\n| label:                    |             |                  |\n| triage/needs-confirmation |  NO +-------- needs priority?  ------+ YES\n|                           |     |       |                  |     |\n+-------------|-------------+     |       +------------------+     |\n              |                   |                                |\n+-------------|------+    +-------|--------+            +----------|---------+\n|                    |    |                |            |                    |\n| Assign to project  ------     Done       -------------- label: priority/*  |\n|                    |    |                |            |                    |\n+--------------------+    +----------------+            +--------------------+\n```\n\n----------------------------------------\n\nTITLE: Receiving Success Response After PATCH User Preferences - JSON\nDESCRIPTION: HTTP response message indicating successful PATCH update of user preferences. Returns a simple JSON message confirming the operation, suitable for client-side acknowledgment or UI feedback.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Preferences updated\"}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in ldap.toml (Bash)\nDESCRIPTION: This snippet demonstrates how to use environment variable expansion within the `ldap.toml` file. By using the `${VAR_NAME}` syntax, sensitive information like the `bind_password` can be sourced from environment variables at runtime, improving security by avoiding hardcoded credentials in configuration files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbind_password = \"${LDAP_ADMIN_PASSWORD}\"\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RadioButtonGroup with Grafana UI (JSX)\nDESCRIPTION: Demonstrates how to import the RadioButtonList from @grafana/ui and use the RadioButtonGroup component with options, value, and onChange handler. Required dependency is the @grafana/ui package. Key props include options (list of choices), value (currently selected), and onChange (handler for selection changes). Input is an options array, output is a rendered group of radio buttons that allow single selection.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioButtonList } from '@grafana/ui';\n\n<RadioButtonGroup options={...} value={...} onChange={...} />\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in Grafana's custom.ini\nDESCRIPTION: This snippet shows the necessary changes to the custom.ini file to enable the Kubernetes Aggregator, Data Plane Aggregator, and API Server kubectl access features in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nkubernetesAggregator = true\ndataplaneAggregator = true\ngrafanaAPIServerEnsureKubectlAccess = true\n```\n\n----------------------------------------\n\nTITLE: Using InfluxDB Explore-Generated Flux Queries in Grafana\nDESCRIPTION: Demonstrates a Flux query structure typically generated by the InfluxDB UI's Data Explorer. Users build a query visually in InfluxDB, copy the generated Flux script from the Script Editor, and paste it into a Grafana panel's query editor associated with an InfluxDB-Flux data source. This allows leveraging InfluxDB's query building tools for visualization in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-influxdb.md#2025-04-23_snippet_1\n\nLANGUAGE: flux\nCODE:\n```\n// Example structure of Flux code generated by InfluxDB Explore\nfrom(bucket: \"your-bucket-name\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"your-measurement\")\n  |> filter(fn: (r) => r[\"_field\"] == \"your-field\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Defining Plugins with YAML in Grafana Helm values.yaml - YAML\nDESCRIPTION: This YAML snippet defines plugin installation in the Grafana Helm Chart by updating the plugins section in values.yaml. It lists plugin identifiers to be installed automatically upon deployment using Helm. Ensure correct indentation and use unique plugin IDs. Expected input is a list of plugin names. No explicit dependencies other than a functioning values.yaml and a proper Helm release.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n.......\n............\n......\nplugins:\n# here we are installing two plugins, make sure to keep the indentation correct as written here.\n\n- alexanderzobnin-zabbix-app\n- grafana-clock-panel\n.......\n............\n......\n```\n\n----------------------------------------\n\nTITLE: Using the is_number Function in Grafana Expressions\nDESCRIPTION: Demonstrates the `is_number` function, which checks if a value is a real number. It returns 1 for real numbers and 0 for non-real values like null, Inf+, Inf-, and NaN.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_10\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nis_number($A)\n```\n\n----------------------------------------\n\nTITLE: Initializing Greeter with Message in Go\nDESCRIPTION: Defines an initializer for the Greeter struct that takes a Message as a parameter and assigns it to the Greeter's Message field.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGreeter(m Message) Greeter {\n    return Greeter{Message: m}\n}\n\ntype Greeter struct {\n    Message Message // <- adding a Message field\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Age Public Keys to Grafana Configuration (INI)\nDESCRIPTION: This example configuration shows how to specify multiple 'age' public keys in the `public_keys` setting, separated by whitespace. When multiple keys are provided, the generated support bundle can be decrypted by the holder of any corresponding private key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[support_bundles]\npublic_keys = \"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p age1yu8vzu554pv3klw46yhdv4raz36k5w3vy30lpxn46923lqngudyqvxacer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Server Section for Loki Live Tailing\nDESCRIPTION: This NGINX server section configuration handles both WebSocket connections for Loki live tailing and standard HTTP requests to Grafana. It properly sets headers for WebSocket upgrades and forwards requests to a local Grafana instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n  location ~ /(api/datasources/proxy/\\d+/loki/api/v1/tail) {\n      proxy_pass          http://localhost:3000$request_uri;\n      proxy_set_header    Host              $host;\n      proxy_set_header    X-Real-IP         $remote_addr;\n      proxy_set_header    X-Forwarded-for   $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Proto \"https\";\n      proxy_set_header    Connection        $connection_upgrade;\n      proxy_set_header    Upgrade           $http_upgrade;\n  }\n\n  location / {\n      proxy_pass          http://localhost:3000/;\n      proxy_set_header    Host              $host;\n      proxy_set_header    X-Real-IP         $remote_addr;\n      proxy_set_header    X-Forwarded-for   $proxy_add_x_forwarded_for;\n      proxy_set_header    X-Forwarded-Proto \"https\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Representing SQL-like Data for Inner Join (Enrollments Table)\nDESCRIPTION: This Markdown table presents sample data for an 'Enrollments' table, intended to be joined with the 'Students' table using an inner join based on 'StudentID'. It contains columns for StudentID, CourseID, and Grade.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | CourseID | Grade |\n| --------- | -------- | ----- |\n| 1         | CS101    | A     |\n| 1         | CS102    | B     |\n| 2         | MATH201  | A     |\n| 3         | PHYS101  | B     |\n| 5         | HIST101  | B     |\n```\n\n----------------------------------------\n\nTITLE: Updating Grafana Library Element via API (HTTP)\nDESCRIPTION: This snippet demonstrates an example HTTP PATCH request to update an existing Grafana library element identified by its UID (`nErXDvCkzz`). It includes required headers like `Accept`, `Content-Type`, and `Authorization` (with a bearer token). The request body contains the fields to be updated, such as `name`, `kind`, and the current `version` for optimistic locking.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/library-elements/nErXDvCkzz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"name\": \"Renamed library panel\",\n  \"kind\": 1,\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Simplified Alert Data as JSON in Go Template\nDESCRIPTION: This Go template, named `webhook.custom.simple_alerts`, processes a slice of Grafana alerts provided as context (`.`). It iterates through the alerts using `range`, extracts key fields (Status, Labels, StartsAt, EndsAt) into a dictionary using `coll.Dict`, appends each dictionary to a slice using `coll.Append`, and finally formats the resulting slice into a JSON array string using `data.ToJSON`. This template is designed to be embedded within other Go templates using `tmpl.Exec`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/example-custom-json-payload.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{- /* Embed json templates in other json templates. */ -}}\n{{ define \"webhook.custom.simple_alerts\" -}}\n  {{- $alerts := coll.Slice -}}\n  {{- range . -}}\n    {{ $alerts = coll.Append (coll.Dict\n    \"status\" .Status\n    \"labels\" .Labels\n    \"startsAt\" .StartsAt\n    \"endsAt\" .EndsAt\n    ) $alerts}}\n  {{- end -}}\n  {{- $alerts | data.ToJSON -}}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Generating an Age Encryption Key Pair (Bash)\nDESCRIPTION: This command uses the 'age' tool to generate a new cryptographic key pair suitable for encrypting Grafana support bundles. The private key is saved to `key.txt`, and the corresponding public key is printed to standard output. The public key needs to be added to the Grafana configuration for encryption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ age-keygen -o key.txt\nPublic key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\n```\n\n----------------------------------------\n\nTITLE: Decrypting an Age-Encrypted Support Bundle (Bash)\nDESCRIPTION: This command uses the 'age' tool to decrypt a Grafana support bundle (`.tar.gz.age` file) that was previously encrypted. It requires the private key file (`-i keyfile`) corresponding to one of the public keys used for encryption and specifies the output file name (`-o output.tar.gz`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nage --decrypt -i keyfile -o output.tar.gz downloaded.tar.gz.age\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana License Validation via grafana.ini (INI)\nDESCRIPTION: This configuration snippet, placed within the `[enterprise]` section of the `grafana.ini` file, sets the `license_validation_type` parameter to `aws`. This instructs Grafana Enterprise to validate its license against AWS License Manager instead of the default Grafana Labs validation service. This is one of the two methods to configure the validation type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[enterprise]\nlicense_validation_type=aws\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic DatePicker in React/TSX\nDESCRIPTION: This example shows how to integrate the `DatePicker` component from `@grafana/ui` into a React application. It utilizes the `useState` hook to manage the selected date and the visibility state (`isOpen`) of the date picker. A `Button` component is used to toggle the date picker's display, and the `onChange` and `onClose` props are used to update the date state and close the picker, respectively.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DatePicker/DatePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePicker, Button } from '@grafana/ui';\n\nconst [date, setDate] = useState<Date>(new Date());\nconst [open, setOpen] = useState(false);\n\nreturn (\n  <>\n    <Button onClick={() => setOpen(true)}>Show Calendar</Button>\n    <DatePicker isOpen={open} value={date} onChange={(newDate) => setDate(newDate)} onClose={() => setOpen(false)} />\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying URLs for Runbooks and Alert Data in Grafana-Managed Alerts\nDESCRIPTION: This template displays URL links specific to Grafana-managed alerts, including dashboard URLs, panel URLs, alert generator URLs, silence URLs, and runbook URLs from annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.alert_additional_details\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.additional_details\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.additional_details\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.additional_details\" }}\n- Dashboard: {{ .DashboardURL }}\n- Panel: {{ .PanelURL }}\n- AlertGenerator: {{ .GeneratorURL }}\n- Silence: {{ .SilenceURL }}\n- RunbookURL: {{ .Annotations.runbook_url}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Bulk Updating Team Roles - Grafana Access Control - JSON\nDESCRIPTION: Depicts a successful JSON response after bulk updating a team's role assignments. Returns a confirmation message in a JSON object, sent with HTTP 200 OK and content type of JSON.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Team roles have been updated.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Button Type in Grafana UI Component (JSX)\nDESCRIPTION: Specifies the default `type` attribute for the `<Button>` component within the `grafana/ui` library as `\"button\"`. This change, referenced in pull request #48183, prevents buttons from unintentionally submitting forms by default when placed within a form element.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntype=\"button\"\n```\n\n----------------------------------------\n\nTITLE: Grafana Label Matcher Examples\nDESCRIPTION: Provides specific examples of Grafana label matchers using different operators (`=`, `!=`, `=~`, `!~`) applied to the example label set `{ foo=bar, baz=qux, id=12 }`. These demonstrate positive and negative equality matching as well as regular expression matching.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfoo=bar\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfoo!=bar\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nid=~[0-9]+\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nbaz!~[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Defining Role and Folder Relations in OpenFGA Schema\nDESCRIPTION: This code snippet presents an excerpt from the OpenFGA schema definition language. It defines the 'role' type with an 'assignee' relation (allowing roles to be assigned to users, team members, or other roles) and the 'folder' type with 'parent' and 'read' relations. The 'read' relation on a folder illustrates how access can be granted directly, inherited from a parent folder ('read from parent'), or granted via role assignment ('role#assignee').\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ntype role\n  relations\n    define assignee: [user, team#member, role#assignee]\n\ntype folder\n  relations\n    define parent: [folder]\n\n    define read: [user, team#member, role#assignee] or view or read from parent\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Service Port - JSON\nDESCRIPTION: Configures the listening port for the renderer's HTTP server in the JSON file. Setting to 0 will automatically pick an unused port, while the default is 8081.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"port\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Grafana Plugin Manifest in JSON\nDESCRIPTION: This JSON object serves as the manifest file within a PGP signed message for a Grafana plugin. It defines crucial metadata: `manifestVersion` (2.0.0), `signatureType` (grafana), signing organization details (`signedByOrg`, `signedByOrgName`), the unique plugin identifier (`plugin`: \"myorgid-simple-app\"), a version placeholder (`%VERSION%`), a timestamp (`time`), the signing key ID (`keyId`), and a `files` object mapping filenames to their SHA512 checksums. This manifest is essential for Grafana to validate and load the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/app-with-child/dist/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"rootUrls\": [],\n  \"plugin\": \"myorgid-simple-app\",\n  \"version\": \"%VERSION%\",\n  \"time\": 1642614241713,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"1abecfd0229814f6c284ff3c8dd744548f8d676ab3250cd7902c99dabf11480e\",\n    \"child/plugin.json\": \"66ba0dffaf3b1bfa17eb9a8672918fc66d1001f465b1061f4fc19c2f2c100f51\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana YUM/DNF Repository File in Bash\nDESCRIPTION: Defines the content for a YUM/DNF repository configuration file located at `/etc/yum.repos.d/grafana.repo`. This file configures the system's package manager to use the official Grafana RPM repository, enabling installation and updates via `dnf` or `yum`. It specifies the repository name, base URL, GPG check settings, and the location of the imported GPG key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[grafana]\nname=grafana\nbaseurl=https://rpm.grafana.com\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://rpm.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\n```\n\n----------------------------------------\n\nTITLE: Forwarding Port to Grafana Pod with Kubectl (Bash)\nDESCRIPTION: Establishes port forwarding using `kubectl port-forward`. It maps a local port (3000) to the target port (3000) on a specific Grafana pod (identified by name, e.g., 'grafana-58445b6986-dxrrw') within the 'my-grafana' namespace. The `--address 0.0.0.0` flag makes the forwarded port accessible on all local network interfaces.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward pod/grafana-58445b6986-dxrrw --namespace=my-grafana --address 0.0.0.0 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service with systemd (Linux)\nDESCRIPTION: Reloads the systemd daemon configuration and starts the Grafana server service. This is used on Linux systems configured with systemd after installation via APT or .deb package.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl start grafana-server\n```\n\n----------------------------------------\n\nTITLE: Listing External Groups for a Team Response Example in JSON\nDESCRIPTION: Shows the JSON array returned by the Team Sync GET endpoint, listing all external groups assigned to the team. Each object contains the organization ID, team ID, and LDAP-style groupId string. Output is returned on success (HTTP 200) and is limited to available groups for the team.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \\\"orgId\\\": 1,\\n    \\\"teamId\\\": 1,\\n    \\\"groupId\\\": \\\"cn=editors,ou=groups,dc=grafana,dc=org\\\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Project for MySQL Plugin Tests in TypeScript\nDESCRIPTION: This code snippet demonstrates how to add a new Playwright project configuration for MySQL plugin tests. It sets up the test directory, specifies Chrome as the testing browser, and configures authentication for admin access.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'mysql',\n  testDir: path.join(testDirRoot, '/mysql'),\n  use: {\n    ...devices['Desktop Chrome'],\n    storageState: 'playwright/.auth/admin.json',\n  },\n  dependencies: ['authenticate'],\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack with Docker Compose (Standard)\nDESCRIPTION: This shell command uses Docker Compose (modern syntax) to build, (re)create, start, and attach to containers for a service, running them in detached mode (`-d`). This command is intended for standard local setups but is marked to be ignored in the interactive tutorial environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Non-Real Number Values in Grafana Expressions\nDESCRIPTION: Lists the values considered non-real numbers by the `is_number` function: null, positive infinity, negative infinity, and NaN.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_11\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nnull\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nInf+\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nInf-\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nNaN\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server using Binary (macOS)\nDESCRIPTION: Executes the Grafana server binary directly on macOS. Requires navigating to the installation directory and running the command from the terminal. Used for standalone macOS binary installations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./bin/grafana server\n```\n\n----------------------------------------\n\nTITLE: Moving Unpacked Grafana Binary to Installation Directory - Shell\nDESCRIPTION: Moves the unpacked Grafana binary distribution to /usr/local/grafana for standard system-wide usage. Prerequisite: Extracted binary from tar.gz archive. Input: Path to extracted files. Output: Files located at /usr/local/grafana. Replace <DOWNLOAD PATH> as appropriate.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv <DOWNLOAD PATH> /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Searching TraceQL by Trace ID\nDESCRIPTION: Example of querying a specific trace using its trace ID in the TraceQL editor\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-editor-traceql.md#2025-04-23_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n41928b92edf1cdbe0ba6594baee5ae9\n```\n\n----------------------------------------\n\nTITLE: Including Shared Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes content from a separate shared file (`manage-users/view-server-org-list.md`) within the Grafana documentation source, potentially specific to a Grafana version (`<GRAFANA VERSION>`). This promotes content reuse and modularity in the documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"manage-users/view-server-org-list.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Distortion Handler Flow in Grafana Plugin Sandbox\nDESCRIPTION: Sequence diagram showing the interaction flow between Incubator Realm, Distortion Handler, and Child Window during a fetch request from a sandboxed plugin. Illustrates how distortions intercept and modify API calls.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/plugins/sandbox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant blue as Incubator Realm\n    participant proxy as DistortionHandler\n    participant red as Child Window\n    blue ->> red: Handle (onClick)\n    red ->> red: run handleClick\n    Note right of red: handleClick tries to<br> run a fetch() request\n    red ->> proxy: get fetch function\n    Note over red, proxy: This is not the fetch call itself, this is<br>\"give me the function object I'll use<br> when I call fetch\"\n    proxy ->> blue: should distord [fetch] ?\n    blue ->> proxy: use [distortedFetch]\n    proxy ->> red: use [distortedFetch] (modified object)\n    Note over red, proxy: Returns a function that will<br> be called as the \"fetch\" function\n    red ->> red: run fetch\n    Note right of red: Code runs a fetch() request<br> using the distorted fetch function\n```\n\n----------------------------------------\n\nTITLE: Checking Current Shell Resource Limits (Bash)\nDESCRIPTION: Executes the `ulimit -a` command to display all current resource limits applied to the shell session. This is particularly useful for diagnosing 'Too many open files' errors by checking the 'open files' limit reported.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nulimit -a\n```\n\n----------------------------------------\n\nTITLE: Tagging a promlib Version using Git Commands\nDESCRIPTION: This sequence of Git commands is used to tag a specific commit as a new version for the promlib package within the Grafana repository. First, it checks out the desired commit using its SHA. Then, it creates a lightweight tag following the pattern 'pkg/promlib/<VERSION>'. Finally, it pushes this specific tag to the 'origin' remote repository. No release action is needed; tagging is sufficient for the Go module registry.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/promlib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <COMMIT_SHA>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag pkg/promlib/<VERSION>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin pkg/promlib/<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Sorting in InteractiveTable with TSX\nDESCRIPTION: This TSX snippet illustrates how to implement controlled sorting (e.g., server-side sorting) in the `InteractiveTable`. It uses the `useState` hook to manage the table data and the `useCallback` hook to memoize the `fetchData` function. The `fetchData` function receives sorting arguments (`sortBy`) and is responsible for fetching or calculating the newly sorted data, then updating the state using `setData`. A `setTimeout` simulates an asynchronous operation like an API call. The `InteractiveTable` is configured with this `fetchData` prop to handle sorting externally.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface WithPaginationData {\n  id: string;\n  firstName: string;\n  lastName: string;\n  car: string;\n  age: number;\n}\n\nexport const WithControlledSort: StoryFn<typeof InteractiveTable> = (args) => {\n  const columns: Array<Column<WithPaginationData>> = [\n    { id: 'firstName', header: 'First name', sortType: 'string' },\n    { id: 'lastName', header: 'Last name', sortType: 'string' },\n    { id: 'car', header: 'Car', sortType: 'string' },\n    { id: 'age', header: 'Age' },\n  ];\n  const [data, setData] = useState(pageableData);\n\n  // In production the function will most likely make an API call to fetch the sorted data\n  const fetchData = useCallback(({ sortBy }: FetchDataArgs<WithPaginationData>) => {\n    if (!sortBy?.length) {\n      return setData(pageableData);\n    }\n\n    setTimeout(() => {\n      const newData = [...pageableData];\n      newData.sort((a, b) => {\n        const sort = sortBy[0];\n        const aData = a[sort.id as keyof Omit<WithPaginationData, 'age'>];\n        const bData = b[sort.id as keyof Omit<WithPaginationData, 'age'>];\n        if (sort.desc) {\n          return bData.localeCompare(aData);\n        }\n        return aData.localeCompare(bData);\n      });\n      setData(newData);\n    }, 300);\n  }, []);\n\n  return <InteractiveTable columns={columns} data={data} getRowId={(r) => r.id} pageSize={15} fetchData={fetchData} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Multi-Value Variables in Tag Queries with Regex Formatting\nDESCRIPTION: Example of using regex formatting with a multi-value variable in a tag query. This pattern uses the Equal Tilde operator with the advanced variable formatting syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nserver=~${servers:regex}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Proxy Headers in Grafana\nDESCRIPTION: Configuration setting for defining custom headers to sync user attributes in Grafana's auth proxy setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nheaders = \"Groups:X-WEBAUTH-GROUPS\"\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Grafana Plugins (Bash)\nDESCRIPTION: Uses the 'plugins ls' command to list all Grafana plugins currently installed in the configured plugins directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins ls\n```\n\n----------------------------------------\n\nTITLE: Creating Annotation Using Graphite-Compatible Format - HTTP+JSON\nDESCRIPTION: Demonstrates how to submit an annotation in Graphite's event format using a POST request. The JSON body requires 'what', 'tags', and optionally 'when' and 'data'. Tags can be an array or a string and the API will use the current time if 'when' is not provided. The endpoint confirms annotation creation with a message and generated id.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/annotations/graphite HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\\n  \"what\": \"Event - deploy\",\\n  \"tags\": [\"deploy\", \"production\"],\\n  \"when\": 1467844481,\\n  \"data\": \"deploy of main branch happened at Wed Jul 6 22:34:41 UTC 2016\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Dimension Time Series Data in SQL\nDESCRIPTION: This SQL query demonstrates retrieving time series data with a single dimension from a table 'T'. It aggregates 'Temperature' into hourly buckets ('BUCKET(StartTime, 1h)') and calculates the average ('AVG(Temperature)'), grouping the results by both the time bucket and the 'Location' column. The 'Location' column serves as the dimension, allowing Grafana to distinguish between time series for different locations (e.g., 'Temp {Location=LGA}', 'Temp {Location=BOS}'). The results are ordered by time.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries-dimensions/index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT BUCKET(StartTime, 1h), AVG(Temperature) AS Temp, Location FROM T\n  GROUP BY BUCKET(StartTime, 1h), Location\n  ORDER BY time asc\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest Schema - JSON\nDESCRIPTION: This JSON snippet defines the schema and metadata for a Grafana plugin, specifying version, signature details, plugin identity, timestamp, signing key, and checksums for constituent files. Dependencies include a valid JSON parser and OpenPGP-compliant tools to generate and verify signatures. The manifest input is a strict JSON object; output is used for validation processes or distribution checks.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-extra-file/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test\",\n  \"version\": \"1.0.0\",\n  \"time\": 1605807330546,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployment Rollout History with Kubectl (Bash)\nDESCRIPTION: Executes `kubectl rollout history` to display the revision history for the specified deployment ('grafana') within the given namespace ('my-grafana'). This command is used multiple times: initially to see the first deployment, after annotations to see change causes, before a rollback to list revisions, and after a rollback to verify the history.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout history deployment/grafana --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout history deployment/grafana --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout history deployment grafana --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout history deployment grafana --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout history deployment grafana --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Disabling Grafana Organization/Role Synchronization via SAML\nDESCRIPTION: This INI configuration snippet sets the `skip_org_role_sync` option to `true` within the `[auth.saml]` section. When enabled, Grafana will ignore role and organization membership information from the SAML assertion during login, preventing it from overwriting any manual changes made within Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nskip_org_role_sync = true\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack with Docker Compose (Interactive Environment)\nDESCRIPTION: This bash command uses docker-compose (legacy syntax) to start the Grafana stack services defined in a docker-compose.yml file in detached mode (`-d`). This specific command is intended for execution within the interactive Killercoda learning environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Example Variable Query Results for Different User Selections\nDESCRIPTION: Sample InfluxDB queries that would be generated based on different user selections of datacenter and host variables, showing how variable substitution works in practice.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"cpu\" WHERE \"datacenter\" =~ /^America/ AND \"host\" =~ /^server2/\nSHOW TAG VALUES WITH KEY = \"cpu\" WHERE \"datacenter\" =~ /^Africa/ AND \"host\" =~ /^server/7/\nSHOW TAG VALUES WITH KEY = \"cpu\" WHERE \"datacenter\" =~ /^Europe/ AND \"host\" =~ /^server3+server4/\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate using OpenSSL (Bash)\nDESCRIPTION: Uses the `openssl x509` command with the `-req`, `-days`, `-in`, `-signkey`, and `-out` flags to create a self-signed X.509 certificate file named `grafana.crt` in `/etc/grafana/`. The certificate is generated from the CSR (`grafana.csr`), signed with the private key (`grafana.key`), and is valid for 365 days. Requires `openssl`, the CSR file, and the private key file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl x509 -req -days 365 -in /etc/grafana/grafana.csr -signkey /etc/grafana/grafana.key -out /etc/grafana/grafana.crt\n```\n\n----------------------------------------\n\nTITLE: Including Shared Standard Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to embed a reusable documentation section covering standard options applicable to many Grafana visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/standard-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 for WebSocket Proxying for Loki Live Tailing\nDESCRIPTION: This configuration allows Apache2 to proxy WebSocket connections between the browser and Grafana server for Loki's live tailing feature. It uses ProxyPassMatch to route requests with the specific Loki tail API pattern to the Grafana server running on localhost:3000.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nProxyPassMatch \"^/(api/datasources/proxy/\\d+/loki/api/v1/tail)\" \"ws://127.0.0.1:3000/$1\"\n```\n\n----------------------------------------\n\nTITLE: Updating Playlist via kubectl patch - Shell\nDESCRIPTION: This shell command updates an existing Playlist custom resource. It uses the 'patch' subcommand with a patch file and target resource name. The correct playlist name must be provided, and the patch file should have the new desired resource definition. Requires access to the kubeconfig and appropriate RBAC permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig=./grafana.kubeconfig patch playlist <NAME> --patch-file playlist-generate.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Input Data Frame (Query A) for Concatenate Fields Transformation\nDESCRIPTION: This table represents example input data (Query A) containing temperature and uptime information, intended to be used with the 'Concatenate fields' transformation in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| Temp | Uptime  |\n| ---- | ------- |\n| 15.4 | 1230233 |\n```\n\n----------------------------------------\n\nTITLE: Example Field Mapping Configuration for Value Mappings\nDESCRIPTION: This table demonstrates how to configure the field mapping within the 'Config from query results' transformation to use the configuration query result (shown previously) for generating value mappings. It maps the 'Value', 'Text', and 'Color' fields from the config query to the corresponding value mapping properties.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n| Field | Use as                 | Select     |\n| ----- | ---------------------- | ---------- |\n| Value | Value mappings / Value | All values |\n| Text  | Value mappings / Text  | All values |\n| Color | Value mappings / Color | All values |\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Global Custom Roles in Grafana Provisioning - YAML\nDESCRIPTION: This YAML snippet creates a hidden global custom role in Grafana by setting the 'global' and 'hidden' fields to true. The role includes permissions for reading, writing, and creating users, and will not appear in the role picker UI. Dependencies are the Grafana provisioning system and correct configuration file placement. Input parameters specify global scope and hidden status; output is a hidden global role available across organizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 2\\n\\nroles:\\n  - name: custom:users:writer\\n    description: 'List, create, or update other users.'\\n    version: 1\\n    global: true\\n    hidden: true\\n    permissions:\\n      - action: 'users:read'\\n        scope: 'global.users:*'\\n      - action: 'users:write'\\n        scope: 'global.users:*'\\n      - action: 'users:create'\\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Reusable Rendering Mode - JSON\nDESCRIPTION: Configures the renderer's JSON file to use the 'reusable' mode. Only one browser instance is created and shared for all rendering requests. Each request opens a new incognito page. If the browser crashes, it will not restart automatically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"mode\": \"reusable\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Backend Service in Grafana Tests\nDESCRIPTION: Example of mocking the getBackendSrv function in Grafana tests. It uses jest.mock to replace the implementation of getBackendSrv with a mock function that returns the desired response.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\njest.mock('@grafana/runtime', () => ({\n  ...jest.requireActual('@grafana/runtime'),\n  getBackendSrv: () => ({\n    post: postMock,\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Deleting Mute Time Intervals in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to delete existing mute time intervals used in Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.time-intervals:delete`\n```\n\n----------------------------------------\n\nTITLE: Importing RadioButtonGroup in React (JSX)\nDESCRIPTION: This snippet shows how to import the RadioButtonGroup component from the @grafana/ui package for use within a React JSX file. It is intended as a first step before rendering the component in the application. The RadioButtonGroup dependency must be installed as part of @grafana/ui and used within a React project.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioButtonGroup } from '@grafana/ui';\n```\n\n----------------------------------------\n\nTITLE: Service Initialization Example\nDESCRIPTION: Example showing how to access settings by injecting setting.Cfg into services and components\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/recommended-practices.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCfg struct\nInjection\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for BasicAuth with Grafana\nDESCRIPTION: Apache virtual host configuration for implementing BasicAuth authentication and forwarding authenticated user information to Grafana via X-WEBAUTH-USER header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/auth-proxy/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n    <VirtualHost *:80>\n        ServerAdmin webmaster@authproxy\n        ServerName authproxy\n        ErrorLog \"logs/authproxy-error_log\"\n        CustomLog \"logs/authproxy-access_log\" common\n\n        <Proxy *>\n            AuthType Basic\n            AuthName GrafanaAuthProxy\n            AuthBasicProvider file\n            AuthUserFile /etc/apache2/grafana_htpasswd\n            Require valid-user\n\n            RewriteEngine On\n            RewriteRule .* - [E=PROXY_USER:%{LA-U:REMOTE_USER},NS]\n            RequestHeader set X-WEBAUTH-USER \"%{PROXY_USER}e\"\n        </Proxy>\n\n        RequestHeader unset Authorization\n\n        ProxyRequests Off\n        ProxyPass / http://localhost:3000/\n        ProxyPassReverse / http://localhost:3000/\n    </VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Selecting Hostname Column for Template Variable Dropdown - SQL\nDESCRIPTION: Retrieves all values from the 'hostname' column in 'my_host' table for use in a template variable dropdown in Grafana. Requires a MySQL-compatible database connection. Input: None, Output: a list of unique hostnames. Used to allow users to select hosts dynamically when displaying dashboard data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM my_host\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Trace Export Settings in Grafana\nDESCRIPTION: Configuration block for setting up OpenTelemetry OTLP trace export in Grafana. Specifies the destination address for sending traces to an OTLP collector running on localhost port 4317.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/tempo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tracing.opentelemetry.otlp]\n# otlp destination (ex localhost:4317)\naddress = localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Marking Duplicate Issues in GitHub\nDESCRIPTION: This command is used within a GitHub issue comment to mark it as a duplicate of another existing issue. Replace `<issue number>` with the actual number of the issue it duplicates. GitHub automatically recognizes this command and links the issues. The Grafana bot then adds the `type/duplicate` label and a closing comment.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/duplicate of #<issue number>\n```\n\n----------------------------------------\n\nTITLE: Querying Dashboard Read Permissions for a Token with cURL and jq - Bash\nDESCRIPTION: This snippet issues a cURL GET request to the Grafana API for a given service account token, then uses jq to filter and display only dashboard read permissions. It isolates the 'dashboards:read' array to show specific dashboard or folder UIDs the token can access. Prerequisites: Valid Bearer token, cURL, jq, and network connectivity. Input: Token and Grafana URL. Output: Filtered JSON array of dashboard resources. Limitation: Only displays 'dashboards:read' permissions; token must have at least one such permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Bearer glsa_HOruNAb7SOiCdshU9algkrq7FDsNSLAa_54e2f8be\" -X GET '<grafana_url>/api/access-control/user/permissions' | jq '.\"dashboards:read\"'\n```\n\n----------------------------------------\n\nTITLE: Resulting Plaintext Output of Rendered Annotation Template - Plaintext\nDESCRIPTION: This output illustrates the notification message a user would see after the annotation template is rendered with sample alert data. It shows a resolved template that specifies which instance was affected and the actual metric value that triggered the alert. It demonstrates how template variables translate into end-user facing alert details.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCPU usage for Instance 1 has exceeded 80% (81.2345) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: HTTP 201 Success Response for Alert Rule Creation (HTTP)\nDESCRIPTION: This HTTP response example is returned after a successful POST request to create a new alert rule. It confirms creation with HTTP 201, providing a JSON body containing all attributes of the new alert rule, such as id, uid, org details, rule group, condition, and the actual alert rule data structure. The response can be parsed by clients to confirm correct resource creation and obtain its identifiers for further operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"uid\": \"XXXXXXXXX\",\n  \"orgID\": 1,\n  \"folderUID\": \"SET_FOLDER_UID\",\n  \"ruleGroup\": \"API3\",\n  \"title\": \"TEST-API_1\",\n  \"condition\": \"B\",\n  \"data\": [\n    {\n      \"refId\": \"A\",\n      \"queryType\": \"\",\n      \"relativeTimeRange\": {\n        \"from\": 600,\n        \"to\": 0\n      },\n      \"datasourceUid\": \"XXXXXXXXX-XXXXXXXXX-XXXXXXXXXX\",\n      \"model\": {\n        \"expr\": \"up\",\n        \"hide\": false,\n        \"intervalMs\": 1000,\n        \"maxDataPoints\": 43200,\n        \"refId\": \"A\"\n      }\n    },\n    {\n      \"refId\": \"B\",\n      \"queryType\": \"\",\n      \"relativeTimeRange\": {\n        \"from\": 0,\n        \"to\": 0\n      },\n      \"datasourceUid\": \"-100\",\n      \"model\": {\n        \"conditions\": [\n          {\n            \"evaluator\": {\n              \"params\": [\n                6\n              ],\n              \"type\": \"gt\"\n            },\n            \"operator\": {\n              \"type\": \"and\"\n            },\n            \"query\": {\n              \"params\": [\n                \"A\"\n              ]\n            },\n            \"reducer\": {\n              \"params\": [],\n              \"type\": \"last\"\n            },\n            \"type\": \"query\"\n          }\n        ],\n        \"datasource\": {\n          \"type\": \"__expr__\",\n          \"uid\": \"-100\"\n        },\n        \"hide\": false,\n        \"intervalMs\": 1000,\n        \"maxDataPoints\": 43200,\n        \"refId\": \"B\",\n        \"type\": \"classic_conditions\"\n      }\n    }\n  ],\n  \"updated\": \"2024-08-02T13:19:32.609640048Z\",\n  \"noDataState\": \"OK\",\n  \"execErrState\": \"OK\",\n  \"for\": \"5m\",\n  \"annotations\": {\n    \"summary\": \"test_api_1\"\n  },\n  \"labels\": {\n    \"API\": \"test1\"\n  },\n  \"provenance\": \"api\",\n  \"isPaused\": false,\n  \"notification_settings\": null,\n  \"record\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Using the log Function in Grafana Expressions\nDESCRIPTION: Shows the usage of the `log` function, which calculates the natural logarithm of its argument (number or series). It returns NaN if the input value is less than 0.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_12\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nlog(-1)\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nlog($A)\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Constants in Grafana Expressions\nDESCRIPTION: Illustrates the supported formats for numeric constants in Grafana math expressions, including decimal, octal (leading zero), hexadecimal (leading 0x), and exponential notation with signs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_1\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n2.24\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n072\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n0x2A\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n-0.8e-2\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Data Source Permissions (Plaintext)\nDESCRIPTION: Defines the `datasources.permissions:read` permission action required to list permissions for data sources in Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.permissions:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for RenderUserContentAsHTML\nDESCRIPTION: This MDX snippet uses the imported `Meta` component to configure the Storybook metadata for the `RenderUserContentAsHTML` component documentation. It sets the title that appears in the Storybook navigation (`MDX|RenderUserContentAsHTML`) and specifies the component being documented (`RenderUserContentAsHTML`).\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|RenderUserContentAsHTML\" component={RenderUserContentAsHTML} />\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Notification Title Template in Grafana\nDESCRIPTION: This snippet demonstrates how to execute the custom title template by passing the context (dot) to the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom_title\" . }}\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Log File with LogQL in Grafana Explore\nDESCRIPTION: This LogQL query retrieves all log entries from the specified file `/var/log/tns-app.log` using the Loki data source within Grafana Explore. It requires a configured Loki data source with access to the target log file and is typically run by pressing Shift + Enter in the query editor.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_5\n\nLANGUAGE: logql\nCODE:\n```\n{filename=\"/var/log/tns-app.log\"}\n```\n\n----------------------------------------\n\nTITLE: Backing up Authentik Database\nDESCRIPTION: Command to dump Authentik's database for backup purposes using Docker Compose.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd devenv;\ndocker-compose exec -T authentikdb bash -c \"pg_dump -U authentik authentik\" > docker/blocks/auth/authentik/cloak.sql\n```\n\n----------------------------------------\n\nTITLE: Displaying Grafana CLI Help (Bash)\nDESCRIPTION: An example command to display the help information for the Grafana CLI using the '-h' flag. This output includes default paths and Docker configuration details.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli -h\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum TLS Version - Bash\nDESCRIPTION: Defines the minimum accepted TLS version for the image renderer's HTTPS server using the HTTP_MIN_TLS_VERSION environment variable. Accepts 'TLSv1.2' or 'TLSv1.3', defaulting to 'TLSv1.2'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_MIN_TLS_VERSION=TLSv1.2\n```\n\n----------------------------------------\n\nTITLE: DraggableManager Bounds Configuration\nDESCRIPTION: Implementation of the getBounds function required for DraggableManager initialization, showing how to set dragging boundaries.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n_getDraggingBounds = (): DraggableBounds => {\n  if (!this._realmElm) {\n    throw new Error('invalid state');\n  }\n  const { left: clientXLeft, width } = this._realmElm.getBoundingClientRect();\n  return {\n    clientXLeft,\n    width,\n    maxValue: 0.98,\n    minValue: 0.02,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Applying an Ad Hoc Filter via URL Parameter\nDESCRIPTION: Demonstrates how to apply an ad hoc filter using a URL parameter. The parameter 'var-adhoc' corresponds to the ad hoc filter variable name in the dashboard. The value 'example_key|=|example_value' specifies the filter key, operator, and value, separated by pipes. Note that pipes and other special characters must be URL-encoded.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: uri\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard?var-adhoc=example_key|=|example_value\n```\n\n----------------------------------------\n\nTITLE: Using Select Component with Portal Menu Behavior in Grafana UI (React/JSX)\nDESCRIPTION: Demonstrates how to use the Select component from @grafana/ui with the menuShouldPortal property in a React (JSX) environment. This feature allows the options menu to be rendered in a portal, potentially avoiding display and positioning issues in complex layouts. The menuShouldPortal property accepts a boolean value to toggle the behavior. Dependencies include the @grafana/ui package and a React setup. The snippet is intended for tests or components that may be affected by menu rendering changes in upcoming Grafana versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v8-1.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<Select menuShouldPortal {...otherProps} />\\n```\n```\n\n----------------------------------------\n\nTITLE: Representing Specific Subresource Permissions in OpenFGA\nDESCRIPTION: This tuple example grants a user ('user:1') 'read' access to a specific subresource (e.g., settings or public access) of a particular resource (e.g., a dashboard). The object string includes the subresource identifier, and the context specifies the subresource's group resource.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<subresource>/<resource_name>” }` with additional context `{ \"group_resource\": \"dashboard.grafana.app/dashboards/<subresource>\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Dependencies using Yarn (Shell)\nDESCRIPTION: Installs the project dependencies listed in the `package.json` file using the Yarn package manager. This command must be run inside the root directory of the newly created plugin (`my-plugin`). Requires Yarn to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds a YouTube video into the documentation page. It's used here to provide a visual demonstration or explanation related to the centralized alert history feature in Grafana. It requires a valid YouTube video ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"0fNtby8ieEw\" >}}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Pluralization Keys in Translation Catalog\nDESCRIPTION: Illustrates the expected structure within the `grafana.json` message catalog for handling pluralization. The base `i18nKey` (e.g., `inbox.heading`) is extended with suffixes like `_one` (for singular) and `_other` (for plural) according to i18next conventions. This structure needs to be manually created or adjusted after extraction.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inbox\": {\n    \"heading_one\": \"You got {{count}} message\",\n    \"heading_other\": \"You got {{count}} messages\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Math Expressions in Grafana Alerting\nDESCRIPTION: Illustrates basic math operations within Grafana alert expressions using variables representing query results (e.g., $A, $B, $C) and constants. These expressions allow arithmetic calculations and comparisons. They can transform data or define the final alert condition based on comparisons like greater than, less than, or involving multiplication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/queries-conditions.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$A + 1\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n$A * 100\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n$B > 70\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n$B < $C * 100\n```\n\n----------------------------------------\n\nTITLE: Defining UserView Interface for UsersIndicator Component\nDESCRIPTION: This snippet defines the UserView interface used by the UsersIndicator component. It specifies the structure of user data, including name, avatar URL, and last active timestamp.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UsersIndicator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTimeInput } from '@grafana/data';\n\nexport interface UserView {\n  user: {\n    /** User's name, containing first + last name */\n    name: string;\n    /** URL to the user's avatar */\n    avatarUrl?: string;\n  };\n  /** Datetime string when the user was last active */\n  lastActiveAt: DateTimeInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX WebSocket Mapping for Loki Live Tailing\nDESCRIPTION: This NGINX configuration creates a mapping for the HTTP upgrade header to properly handle WebSocket connections. This is required in the http section of the NGINX configuration to support Loki's live tailing feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/loki/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n  }\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Login with Azure AD OAuth (INI)\nDESCRIPTION: This snippet enables automatic login with Azure AD in Grafana by setting auto_login to true in the configuration. This feature allows bypassing the login screen if only one auth provider is using auto_login. If multiple providers enable this flag, the setting is ignored.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nauto_login = true\n```\n\n----------------------------------------\n\nTITLE: Annotating Deployment Change Cause with Kubectl (Bash)\nDESCRIPTION: Uses `kubectl annotate` to add or update the `kubernetes.io/change-cause` annotation on a deployment ('grafana') in a specific namespace ('my-grafana'). This annotation provides a human-readable description of the change associated with a deployment revision, which is displayed by `kubectl rollout history`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate deployment/grafana kubernetes.io/change-cause='deployed the default base yaml file' --namespace=my-grafana\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate deployment grafana --namespace=my-grafana kubernetes.io/change-cause='using grafana-oss-dev:10.1.0-124419pre for testing'\n```\n\n----------------------------------------\n\nTITLE: Tagging the Release Commit using Git\nDESCRIPTION: Creates an annotated Git tag named 'v0.1.0' pointing to the latest commit (the release commit just created). The tag includes a message describing its purpose, formally marking this commit as release version 0.1.0.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -a v0.1.0 -m \"Create release tag v0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Including Backup Instructions using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds the shared documentation content for backing up Grafana. It references the `back-up/back-up-grafana.md` file within the shared source (`grafana`), uses a version placeholder (`<GRAFANA_VERSION>`), and includes a `leveloffset=\"+1\"` parameter to adjust the heading levels within the included content for proper document structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"back-up/back-up-grafana.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Increasing Maximum Files Limit on macOS (Bash)\nDESCRIPTION: Uses the `sysctl` command with `sudo` privileges on macOS to increase the kernel's maximum allowed open files (`kern.maxfiles`) limit to 524288. This can help resolve errors related to reaching system limits for file watchers or open files during development tasks.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w kern.maxfiles=524288\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Service with init.d (Linux)\nDESCRIPTION: Restarts the Grafana server service using the init.d script. Apply configuration changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo service grafana-server restart\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and TagsInput Component in MDX\nDESCRIPTION: This snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks` and the `TagsInput` component from the relative path `./TagsInput`. These imports are necessary for defining the Storybook documentation page structure and content for the `TagsInput` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { TagsInput } from './TagsInput';\n```\n\n----------------------------------------\n\nTITLE: Migrating Plugin E2E Tests from `grafana/e2e` to `grafana/plugin-e2e`\nDESCRIPTION: The Cypress-based `@grafana/e2e` testing tool is deprecated. Plugin developers should migrate their end-to-end tests to the new Playwright-based `@grafana/plugin-e2e` package. A migration guide is available.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Grafana for Kubectl Development Access in INI\nDESCRIPTION: This INI configuration block prepares Grafana for development interaction using `kubectl`. It sets `app_mode` to `development`, enables feature toggles for kubectl access (`grafanaAPIServerEnsureKubectlAccess`) and Kubernetes playlists (`kubernetesPlaylists`), and configures dual-writing mode 2 with periodic data sync for playlists within the unified storage system. This setup generates a development kubeconfig and starts a parallel SSL listener.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\napp_mode = development\n\n[feature_toggles]\ngrafanaAPIServerEnsureKubectlAccess = true\nkubernetesPlaylists = true\n\n[unified_storage.playlists.playlist.grafana.app]\ndualWriterMode = 2\ndualWriterPeriodicDataSyncJobEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Identifying Comment Character in INI Configuration\nDESCRIPTION: Specifies that the semicolon (`;`) character is used to denote comments within Grafana's INI configuration files (`sample.ini`, `custom.ini`). Lines starting with a semicolon are ignored by Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Active LDAP Synchronization Schedule in Grafana (Bash/Config)\nDESCRIPTION: Details how to enable and schedule background LDAP synchronization in Grafana using the `sync_cron` setting within the `[auth.ldap]` configuration block. Explains the cron syntax options, predefined schedulers, and the `active_sync_enabled` flag. This feature requires Grafana Enterprise or Cloud.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/enhanced-ldap/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[auth.ldap]\n...\n\n# You can use the Cron syntax or several predefined schedulers -\n# @yearly (or @annually) | Run once a year, midnight, Jan. 1st        | 0 0 1 1 *\n# @monthly               | Run once a month, midnight, first of month | 0 0 1 * *\n# @weekly                | Run once a week, midnight between Sat/Sun  | 0 0 * * 0\n# @daily (or @midnight)  | Run once a day, midnight                   | 0 0 * * *\n# @hourly                | Run once an hour, beginning of hour        | 0 * * * *\nsync_cron = \"0 1 * * *\" # This is default value (At 1 am every day)\n# This cron expression format uses 5 space-separated fields, for example\n# sync_cron = \"*/10 * * * *\"\n# This will run the LDAP Synchronization every 10th minute, which is also the minimal interval between the Grafana sync times i.e. you cannot set it for every 9th minute\n\n# You can also disable active LDAP synchronization\nactive_sync_enabled = true # enabled by default\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Environment for Grafana Tutorial (Shell)\nDESCRIPTION: This shell command uses `docker-compose down -v` to stop and remove all containers, networks, and associated volumes defined in the `docker-compose.yml` file for the Grafana tutorial environment. The `-v` flag specifically ensures that volumes are removed along with the containers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down -v\n```\n\n----------------------------------------\n\nTITLE: Documenting TLS and OAuth Configuration Parameters - Markdown\nDESCRIPTION: This snippet is a Markdown table used for documenting configuration options in Grafana, focusing on TLS certificate parameters and OAuth settings. It provides details on whether a setting is mandatory, the type of value expected, and default values where applicable, as well as descriptive help text. Inputs are configuration keys (e.g., `tls_client_cert`), with textual descriptions and some include hyperlinks for additional context. No code execution is performed, and the output is intended for user reference in deployment or setup guides.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| `tls_client_cert`            | No       | No                 | The path to the certificate|                                      |\n| `tls_client_key`             | No       | No                 | The path to the key|                                      |\n| `tls_client_ca`              | No       | No                 | The path to the trusted certificate authority list|                                      |\n| `use_pkce`                   | No       | Yes                | Set to `true` to use [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636). Grafana uses the SHA256 based `S256` challenge method and a 128 bytes (base64url encoded) code verifier| `true`                               |\n| `use_refresh_token`          | No       | Yes                | Set to `true` to use refresh token and check access token expiration. The `accessTokenExpirationCheck` feature toggle should also be enabled to use refresh token| `true`                               |\n| `signout_redirect_url`       | No       | Yes                | URL to redirect to after the user logs out|                                      |\n```\n\n----------------------------------------\n\nTITLE: Folder Update API Response Example\nDESCRIPTION: Example HTTP response for the PUT /api/folders/:uid endpoint, returning the updated folder's details including its new title and updated metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"uid\": \"nErXDvCkzz\",\n  \"title\": \"Department DEF\",\n  \"url\": \"/dashboards/f/nErXDvCkzz/department-def\",\n  \"hasAcl\": false,\n  \"canSave\": true,\n  \"canEdit\": true,\n  \"canAdmin\": true,\n  \"createdBy\": \"admin\",\n  \"created\": \"2018-01-31T17:43:12+01:00\",\n  \"updatedBy\": \"admin\",\n  \"updated\": \"2018-01-31T17:43:12+01:00\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Azure AD SAML Attribute URLs for Group/Role Claims\nDESCRIPTION: Provides example URLs for `role`, `groups`, and `displayname` attributes required when mapping SAML assertions from Azure AD for group and role claims in Grafana. These specific URLs must be used exactly as shown due to Azure's interpretation and restrictions on these claims, as documented by Microsoft.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml-ui/index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://schemas.microsoft.com/ws/2008/06/identity/claims/role\nhttp://schemas.microsoft.com/ws/2008/06/identity/claims/groups\nhttp://schemas.microsoft.com/identity/claims/displayname\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest Metadata in JSON\nDESCRIPTION: This JSON object serves as a manifest file for a Grafana plugin, contained within a PGP signed message. It includes essential metadata such as the manifest version (`manifestVersion`), signature details (`signatureType`, `signedByOrg`, `signedByOrgName`, `keyId`), associated URLs (`rootUrls`), plugin identifier (`plugin`), version (`version`), timestamp (`time`), and file integrity checks (`files`). This structure is used by Grafana to verify and manage the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/non-pvt-with-root-url/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"rootUrls\": [\n    \"https://dev.grafana.com/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661173657946,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Hosts for Chained Variables\nDESCRIPTION: This InfluxDB query returns all hosts for a selected datacenter in a chained variable setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_6\n\nLANGUAGE: influxql\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"hostname\" WHERE \"datacenter\" =~ /^$datacenter$/\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with Invalid Action for Grafana Role Creation\nDESCRIPTION: Demonstrates an HTTP POST request to the `/api/access-control/roles` endpoint attempting to create a role with an invalid permission action (`serviceaccounts.permissions:reader`). This type of request triggers a validation error if permission validation is enabled (default since Grafana 10.2).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/roles HTTP/1.1\nContent-Type: application/json\n{\n\t\"Name\": \"Read Service Account with id 6\",\n\t\"Permissions\": [\n\t\t\t{\n\t\t\t\"action\": \"serviceaccounts.permissions:reader\",\n\t\t\t\"scope\": \"serviceaccounts:uid:6\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Groups in Regex to Extract and Modify Variable Options\nDESCRIPTION: A regular expression that both filters and extracts parts of variable options, returning only the captured groups ('01' or '02') instead of the full option names.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_10\n\nLANGUAGE: regex\nCODE:\n```\n/.*(01|02)/\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Docker Image with Custom URL Plugins (Bash)\nDESCRIPTION: Demonstrates building a custom Grafana Docker image that includes plugins specified via a URL, alongside standard plugins. The `GF_INSTALL_PLUGINS` build argument uses the format '<url to plugin zip>;<plugin install folder name>' for the custom plugin. The resulting image 'grafana-custom' is then used to start a container.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# go to the folder\ncd packaging/docker/custom\n\n# running the build command\ndocker build \\\n  --build-arg \"GRAFANA_VERSION=latest\" \\\n  --build-arg \"GF_INSTALL_PLUGINS=http://plugin-domain.com/my-custom-plugin.zip;my-custom-plugin,grafana-clock-panel,grafana-simple-json-datasource\" \\\n  -t grafana-custom .\n\n# running the docker run command\ndocker run -d -p 3000:3000 --name=grafana grafana-custom\n```\n\n----------------------------------------\n\nTITLE: Including Data Links and Actions Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation for data links and actions from `visualizations/datalink-options-2.md`. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/datalink-options-2.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Storage for Grafana API Server in INI\nDESCRIPTION: This INI configuration snippet sets the storage type for the Grafana Kubernetes API server to `file`. When this option is enabled, the API server will store its objects as JSON files on the local filesystem, typically within the `{data.path}/grafana-apiserver/` directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[grafana-apiserver]\nstorage_type = file\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Base Layers - Grafana INI\nDESCRIPTION: This configuration option toggles the ability to load custom map base layers in the Grafana UI. Set the value to \"false\" to disable loading other custom base maps and hide related options; default is \"true\". No additional dependencies are needed except for a valid Grafana deployment. Accepted values are boolean-like strings: \"true\" or \"false\".\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: ini\nCODE:\n```\nenable_custom_baselayers = true\n```\n\n----------------------------------------\n\nTITLE: Calling Templates with Notification Data in Grafana - Go\nDESCRIPTION: This snippet shows how to invoke a previously defined template (`custom_message`) in Grafana's Go templating system by passing it the full notification data context (dot). The input is notification data; the output depends on the logic defined in the referenced template. Use within notification message bodies to render formatted alert information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom_message\" . }}\n```\n\n----------------------------------------\n\nTITLE: Showing Result of Inner Join on Time Series Data\nDESCRIPTION: This Markdown table illustrates the output after applying an inner join transformation to the data from Query A and Query B. The join is performed on the 'Time' column, and only rows with matching timestamps in both queries are included.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Job     | Uptime    | Server   | Errors |\n| ------------------- | ------- | --------- | -------- | ------ |\n| 2020-07-07 11:34:20 | node    | 25260122  | server 1 | 15     |\n| 2020-07-07 11:24:20 | postgre | 123001233 | server 2 | 5      |\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana Enterprise via DNF using Shell\nDESCRIPTION: Removes the Grafana Enterprise package using the `dnf remove` command. Requires `sudo` privileges. This command uninstalls Grafana Enterprise that was previously installed using `dnf install grafana-enterprise`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf remove grafana-enterprise\n```\n\n----------------------------------------\n\nTITLE: Deleting a Query from Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet shows a successful HTTP 200 OK response after deleting a query history entry. The JSON body contains a confirmation message and the internal ID of the deleted query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"message\": \"Query deleted\",\n    \"id\": 28\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Configuration and Data Directories (Linux/macOS)\nDESCRIPTION: These commands use 'ls' to check for the existence of the default Prometheus configuration directory ('/etc/prometheus'), data directory ('/var/lib/prometheus'), and the primary configuration file ('prometheus.yml'). This helps ensure necessary files and directories are present.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nls /etc/prometheus /var/lib/prometheus\nls /etc/prometheus/prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Representing Labeled Time Series Input (Series 1)\nDESCRIPTION: This Markdown table shows sample time series data for 'series1' which includes labels (what=\"Temp\", cluster=\"A\", job=\"J1\"). This data serves as input for the 'Join by labels' transformation example.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n| Time | Value |\n| ---- | ----- |\n| 1    | 10    |\n| 2    | 200   |\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with ErrorBoundaryAlert - React & Grafana UI - JSX\nDESCRIPTION: Illustrates the use of ErrorBoundaryAlert from Grafana UI to automatically render a pre-configured alert when a child component throws an error. Requires '@grafana/ui' and React. Expects a React component as its child. Outputs either the child component or an alert UI in case of errors. Suitable for rapid error notification integration in React applications.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ErrorBoundaryAlert } from '@grafana/ui';\\n\\n<ErrorBoundaryAlert>\\n  <Component />\\n</ErrorBoundaryAlert>;\n```\n\n----------------------------------------\n\nTITLE: Increasing File Watcher Limit on Linux (Bash)\nDESCRIPTION: Increases the `inotify` file watcher limit on Linux systems to prevent `ENOSPC: System limit for number of file watchers reached` errors, often seen during frontend development (`yarn start`). It appends the setting `fs.inotify.max_user_watches=524288` to `/etc/sysctl.conf` using `sudo tee -a` and applies the change immediately with `sudo sysctl -p`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Adjusting Permissions for SSL Certificates - Bash\nDESCRIPTION: This snippet provides bash commands to ensure the 'grafana' Linux group has the necessary read permissions on SSL certificate and key files used by Grafana. By updating file ownership and access levels, these commands guarantee that the Grafana process can access cryptographic materials at runtime. Dependencies include sudo privileges and existing certificate files in the specified locations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Adjust group ownership and permissions for LetsEncrypt and Grafana certificate files\n$ sudo chgrp -R grafana /etc/letsencrypt/*\n$ sudo chmod -R g+rx /etc/letsencrypt/*\n$ sudo chgrp -R grafana /etc/grafana/grafana.crt /etc/grafana/grafana.key\n$ sudo chmod 440 /etc/grafana/grafana.crt /etc/grafana/grafana.key\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources:writer\nDESCRIPTION: Specifies the `fixed:datasources:writer` role (ID: `fixed_q8HXq8kjjA5IlHHgBJlKlUyaNik`) within Grafana. This role encompasses permissions inherited from `fixed:datasources:reader` along with specific write capabilities (`datasources:create`, `datasources:write`, `datasources:delete`), enabling users to fully manage data sources (read, query, create, delete, update).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_q8HXq8kjjA5IlHHgBJlKlUyaNik\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- fixed:datasources:reader\n- datasources:create\n- datasources:write\n- datasources:delete\n```\n\n----------------------------------------\n\nTITLE: Formatting Alert Time with 'date' Function in Grafana Go Templates\nDESCRIPTION: This snippet demonstrates the use of the 'date' function to format alert times within a template loop, producing a custom string such as '15:04:05 MST' per alert. Requires alerts with a .StartsAt Time field, and the template engine must support the 'date' filter. The input is the .StartsAt time object and the desired date format string; output is a formatted string per alert entry.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ range .Alerts }}\n    {{ .StartsAt | date \"15:04:05 MST\" }}\n  {{ end}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Wire via Go\nDESCRIPTION: This command installs the latest version of Wire using Go's package management system. It adds the Wire binary to the user's GOPATH.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/google/wire/cmd/wire@latest\n```\n\n----------------------------------------\n\nTITLE: Using Round Function in Grafana Expressions\nDESCRIPTION: The round function returns a rounded integer value from a numeric input. It can be used with literal values or variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nround(3.123)\n```\n\nLANGUAGE: text\nCODE:\n```\nround($A)\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus Service with Specific Configuration (Bash)\nDESCRIPTION: This shell command starts the Prometheus server executable ('./prometheus') using a specific configuration file located at './prometheus.yml'. The '--config.file' flag overrides the default configuration file location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./prometheus --config.file=./prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.id:reader\nDESCRIPTION: Specifies the `fixed:datasources.id:reader` role (ID: `fixed_entg--fHmDqWY2-69N0ocawK0Os`) within Grafana. This role grants the `datasources.id:read` permission, allowing users to read the ID of a data source based on its name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.id:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_entg--fHmDqWY2-69N0ocawK0Os\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- datasources.id:read\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Props using Storybook ArgTypes in MDX\nDESCRIPTION: Utilizes the Storybook `ArgTypes` component within MDX to automatically generate and display a table of properties (props) for the specified component (`Space`). This table includes details like prop names, types, default values, and descriptions, based on the component's definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={Space} />\n```\n\n----------------------------------------\n\nTITLE: Receiving Success Response After PATCH Org Preferences - JSON\nDESCRIPTION: Sample HTTP response showing success after a PATCH update to organization preferences. Returns a JSON message confirming completion, to be handled by administrative scripts or dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Preferences updated\"}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Template Group Deletion - YAML\nDESCRIPTION: Shows how to delete notification template groups in Grafana's provisioning system. Identifies each template group by organization ID and unique template group name under the 'deleteTemplates' key. Inputs are the API version and list of template names/organization IDs. Outputs result in permanent removal of specified template groups from provisioned alerting resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of alert rule UIDs that should be deleted\\ndeleteTemplates:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> name of the template group, must be unique\\n    name: my_first_template\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with TextLink in JSX\nDESCRIPTION: Demonstrates how to use the Text component with a nested TextLink component for creating linked text.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"primary\" element=\"p\">\n  If you need more help of how to write in Grafana you can go to our\n  <TextLink href=\"https://grafana.com/docs/writers-toolkit/\" external>\n    Writer's Toolkit\n  </TextLink>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Device Scale Factor - JSON\nDESCRIPTION: Sets rendering.deviceScaleFactor to alter the device pixel density for rendered images. Values greater than 1 yield higher DPI renders at greater resource cost. Input as integer.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"deviceScaleFactor\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Insecurely from a Specific URL (Bash)\nDESCRIPTION: Demonstrates using the '--insecure' flag along with '--pluginUrl' to install a plugin from a custom URL while disabling TLS verification. This is discouraged due to security risks.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --insecure --pluginUrl https://company.com/grafana/plugins/<plugin-id>-<plugin-version>.zip plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Listing Roles Assigned to a User\nDESCRIPTION: Illustrates a successful HTTP 200 OK response containing a JSON array of roles assigned to a user, retrieved via the GET `/api/access-control/users/:userId/roles` endpoint. Each role object in the array includes details like version, UID, name, display name, description, group, timestamps, and global status.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n[\n    {\n        \"version\": 4,\n        \"uid\": \"6dNwJq57z\",\n        \"name\": \"fixed:reports:writer\",\n        \"displayName\": \"Report writer\",\n        \"description\": \"Create, read, update, or delete all reports and shared report settings.\",\n        \"group\": \"Reports\",\n        \"updated\": \"2021-11-19T10:48:00+01:00\",\n        \"created\": \"2021-11-19T10:48:00+01:00\",\n        \"global\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Custom or Default Alert Message in Go Template\nDESCRIPTION: This Go template code block implements the logic for selecting the final alert message content. It checks if a custom message is provided in the '.Message' context variable. If '.Message' exists and is non-empty, its content is rendered. Otherwise, it falls back to rendering the default alert message structure by invoking the '__default_message' template with the current context.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_5\n\nLANGUAGE: go-template\nCODE:\n```\n[[- if .Message -]]\n    [[ .Message ]]\n[[- else -]]\n    [[ template \"__default_message\" . ]]\n[[- end ]]\n```\n\n----------------------------------------\n\nTITLE: Fetching Actual User Details via Grafana API (HTTP)\nDESCRIPTION: Retrieves details for the currently authenticated user using a GET request to `/api/user`. Requires Basic Authentication. The response is a JSON object containing user attributes like ID, email, login, theme, organization ID, admin status, creation/update timestamps, and avatar URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /api/user HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"id\":1,\n  \"email\":\"admin@mygraf.com\",\n  \"name\":\"Admin\",\n  \"login\":\"admin\",\n  \"theme\":\"light\",\n  \"orgId\":1,\n  \"isGrafanaAdmin\":true,\n  \"isDisabled\":false\n  \"isExternal\": false,\n  \"authLabels\": [],\n  \"updatedAt\": \"2019-09-09T11:31:26+01:00\",\n  \"createdAt\": \"2019-09-09T11:31:26+01:00\",\n  \"avatarUrl\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of Grafana Installation Directory - Shell\nDESCRIPTION: Recursively changes ownership of the Grafana installation directory to the 'grafana' user and 'users' group. Ensures correct permissions and prevents access issues. Run after installing or after directory creation events.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R grafana:users /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Docker Container\nDESCRIPTION: Commands to build a Grafana docker container from the current branch and tag it as grafana/grafana:dev\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <grafana repo>\n$ make build-docker-full\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana Service via systemd using Shell\nDESCRIPTION: Stops the Grafana server service using the `systemctl stop` command. This command is used when Grafana is managed by systemd, typically after installation via RPM or after setting up the systemd unit file for a binary install. Requires `sudo` privileges and is part of the uninstallation process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop grafana-server\n```\n\n----------------------------------------\n\nTITLE: Truncating Text with Nested Components in JSX\nDESCRIPTION: Illustrates how to truncate text using the Text component with nested elements and the truncate prop.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"primary\" element=\"p\" truncate>\n  And Forrest Gump said:\n  <Text italic>Life is like a box of chocolates. You never know what you are gonna get.</Text>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Context Scoping with 'with' in Go Templates\nDESCRIPTION: Illustrates the `with` statement in Go templates, which is similar to `if` but updates the dot (`.`) context to the value of the expression (`$array`). It checks if `$array` exists and then uses `len .` to access its length within the scoped context. An `else` block handles the case where `$array` is empty or false.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ with $array }}\nThere are {{ len . }} item(s)\n{{ else }}\nThere are no alerts\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic OAuth Authentication Using Terraform Provider\nDESCRIPTION: This Terraform configuration sets up Generic OAuth authentication for Grafana. It specifies the OAuth2 settings including authorization endpoints, client credentials, and token handling options for integration with an Auth0 provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_sso_settings\" \"generic_sso_settings\" {\n  provider_name = \"generic_oauth\"\n  oauth2_settings {\n    name              = \"Auth0\"\n    auth_url          = \"https://<domain>/authorize\"\n    token_url         = \"https://<domain>/oauth/token\"\n    api_url           = \"https://<domain>/userinfo\"\n    client_id         = \"<client id>\"\n    client_secret     = \"<client secret>\"\n    allow_sign_up     = true\n    auto_login        = false\n    scopes            = \"openid profile email offline_access\"\n    use_pkce          = true\n    use_refresh_token = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Go Generate for Mock Generation in Grafana\nDESCRIPTION: Example of adding a go:generate comment directive to automatically generate mock implementations using mockery. This allows IDE integration for mock generation.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage <package>\n\nimport (\n\t...\n)\n\n//go:generate mockery --name InterfaceName --structname MockImplementationName --inpackage --filename my_implementation_mock.go\n```\n\n----------------------------------------\n\nTITLE: Humanizing Query Value (Index Function)\nDESCRIPTION: This Go template demonstrates an alternative way to format a query value using the `humanize` function. It retrieves the value of query 'A' using the `index` function before passing it to `humanize`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_10\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ humanize (index $values \"A\").Value }}\n```\n\n----------------------------------------\n\nTITLE: Reading Notification Templates in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to read templates used for formatting Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.templates:read`\n```\n\n----------------------------------------\n\nTITLE: Including Grafana Upgrade Introduction using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared introductory content for Grafana upgrades from a central file. It references the 'upgrade/intro.md' file, ensuring consistent upgrade information across documentation versions. The 'source' and 'version' parameters specify the origin and version context for the included content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"upgrade/intro.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Mapping Grafana Server Administrator Role Based on User Email (Bash/INI)\nDESCRIPTION: This configuration snippet, shown in a Bash context but applicable to Grafana's INI file, uses a JMESPath expression to assign the Grafana server admin role. If the user's email is 'admin@company.com', they receive the 'GrafanaAdmin' role (granting server-wide administrative privileges). All other users are assigned the 'Viewer' organization role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/gitlab/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = email=='admin@company.com' && 'GrafanaAdmin' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Folder Creation Manifest - YAML\nDESCRIPTION: This YAML manifest defines a Folder custom resource for use with Grafana's app platform using Unified Storage, specifying generateName and a spec containing the title. Designed for use in environments with Unified Storage enabled and requires the Folder CRD to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: folder.grafana.app/v1beta1\\nkind: Folder\\nmetadata:\\n  generateName: x # anything is ok here... except yes or true -- they become boolean!\\nspec:\\n  title: Example folder\n```\n\n----------------------------------------\n\nTITLE: Rendering the LoadingBar Story and Argument Types in Storybook (MDX)\nDESCRIPTION: These snippets render the LoadingBar documentation within Storybook's MDX context. <Canvas of={LoadingBarStories.Basic} /> displays the Basic variation of LoadingBar with live interactivity, while <ArgTypes of={LoadingBar} /> lists the props available for the component. These blocks require defined stories and appropriate Storybook configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<Canvas of={LoadingBarStories.Basic} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={LoadingBar} />\n```\n\n----------------------------------------\n\nTITLE: Hiding the API Keys Tab - Grafana HTTP API - HTTP\nDESCRIPTION: This code sample shows how to hide the API keys tab from the Grafana UI by calling a specific POST endpoint with authentication. The operation is confirmed by a JSON response with a message indicating that the API keys are now hidden.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/serviceaccounts/hideApiKeys HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"message\": \"API keys hidden\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the Switch component from the Grafana UI library. It shows the basic usage with common props like disabled, value, and onChange.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Switch/Switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Switch } from '@grafana/ui';\n\n<Switch disabled={...} value={...} onChange={...} />\n```\n\n----------------------------------------\n\nTITLE: Installing Fonts for Server-Side Image Rendering - Bash\nDESCRIPTION: These bash commands install necessary font packages on RPM-based Linux systems to resolve missing text issues when using server-side image (PNG) rendering in Grafana. Dependencies include having sudo privileges and the yum package manager. The commands install fontconfig, freetype fonts, and urw-fonts to ensure proper rendering of text in generated images. Execute all commands in sequence to apply the fix.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install fontconfig\\nsudo yum install freetype*\\nsudo yum install urw-fonts\n```\n\n----------------------------------------\n\nTITLE: Initializing Flamegraph Component in React TSX\nDESCRIPTION: Example showing how to import and use the Flamegraph component with basic props configuration. The component is initialized with dark theme, custom data frame, additional header elements, sticky header, and vertical layout settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-flamegraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Flamegraph } from '@grafana/flamegraph';\n\n<FlameGraph\n  getTheme={() => createTheme({ colors: { mode: 'dark' } })}\n  data={dataFrame}\n  extraHeaderElements={\n    <Button onClick={() => {}} variant=\"secondary\">\n      Download\n    />\n  }\n  stickyHeader\n  vertical\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ordered List Content Template in Markdown\nDESCRIPTION: Example of integrating shared content within a numbered list structure using docs/list and docs/shared shortcodes. Shows how to combine static list items with shared content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/example.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/list >}}\n  {{< docs/shared lookup=\"manage-users/view-server-user-list.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n  1. Click the user account that you want to edit. If necessary, use the search field to find the account.\n{{< /docs/list >}}\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Listing Alert Rules - HTTP\nDESCRIPTION: Specifies an HTTP GET endpoint used to retrieve all alert rules currently provisioned in Grafana. This endpoint returns a collection of alert rules and does not require parameters. The expected response schema is ProvisionedAlertRules, with a 200 OK indicating successful retrieval.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/alert-rules\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Development Server using Make Bash\nDESCRIPTION: This Bash command executes the `run` target defined in the project's Makefile. It compiles and starts the Grafana development server, incorporating any configuration changes made, such as enabling feature toggles.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Exporter for Grafana Audit Logs\nDESCRIPTION: This snippet shows the configuration options for the Loki exporter, which sends audit logs to a Loki service. It includes settings for the communication protocol, URL, TLS, and tenant ID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[auditing.logs.loki]\n# Set the communication protocol to use with Loki (can be grpc or http)\ntype = grpc\n# Set the address for writing logs to Loki\nurl = localhost:9095\n# Defaults to true. If true, it establishes a secure connection to Loki\ntls = true\n# Set the tenant ID for Loki communication, which is disabled by default.\n# The tenant ID is required to interact with Loki running in multi-tenant mode.\ntenant_id =\n```\n\n----------------------------------------\n\nTITLE: Response for Deleting Snapshot via Grafana HTTP API (HTTP)\nDESCRIPTION: Exhibits the JSON response for a successful snapshot deletion, confirming the operation with a message and the snapshot ID. This payload is useful for user notification and error handling in client tools.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\"message\":\"Snapshot deleted. It might take an hour before it's cleared from any CDN caches.\", \"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Starring a Query in Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet presents an example HTTP POST request to mark a specific query history entry (identified by UID) as starred. No request body is needed. Requires authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/query-history/star/P8zM2I1nz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Provisioning Microsoft SQL Server Data Source in Grafana Using YAML\nDESCRIPTION: Example YAML configuration for provisioning a Microsoft SQL Server data source in Grafana, including connection parameters, pool settings, and security credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: MSSQL\n    type: mssql\n    url: localhost:1433\n    user: grafana\n    jsonData:\n      database: grafana\n      maxOpenConns: 100\n      maxIdleConns: 100\n      maxIdleConnsAuto: true\n      connMaxLifetime: 14400\n      connectionTimeout: 0\n      encrypt: 'false'\n    secureJsonData:\n      password: 'Password!'\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache Proxy Modules for Grafana - Bash\nDESCRIPTION: These bash commands activate Apache proxy modules mod_proxy and mod_proxy_http. Run these on your system with Apache installed, typically using sudo. Both modules must be enabled for Apache to forward HTTP connections to Grafana. After enabling, restart Apache as instructed in the documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\na2enmod proxy\\na2enmod proxy_http\n```\n\n----------------------------------------\n\nTITLE: Managing Notification Policies (Routes) in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to create new, update, and modify existing notification policies (routes) within Grafana alerting. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.routes:write`\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule to Exclude Label Value (Task 2)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team A in Task 2. This rule filters logs or metrics, granting access only to data points where the label `secret` does *not* have the value `true`. It demonstrates using the 'not equal' operator for exclusion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_5\n\nLANGUAGE: logql\nCODE:\n```\n{secret!=\"true\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch using Git\nDESCRIPTION: Creates and switches to a new Git branch named 'release-0.1.x'. This is the first step in preparing a specific version (0.1.0 in this example) of the Grafana plugin for release. Requires Git to be installed and initialized in the project directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b release-0.1.x\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Alerts Summary Template in Grafana - Go\nDESCRIPTION: This code shows how to invoke the 'custom.alerts' template with the whole notification data context. The resulting output depends on the logic defined in the template, typically summarizing all alerts in the notification. Input is the notification data object.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom.alerts\" . }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Timing Metrics - JSON\nDESCRIPTION: Enables timingMetrics in rendering JSON configuration to provide breakdown of render step durations for Prometheus. This is useful for performance debugging when fine-grained metrics are required, and must be supported by the remote renderer version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"timingMetrics\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshots Configuration Properties\nDESCRIPTION: Settings controlling Grafana's snapshot functionality including external snapshot publishing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nenabled=true\nexternal_enabled=true\nexternal_snapshot_url=https://snapshots.raintank.io\nexternal_snapshot_name=\"Publish to snapshots.raintank.io\"\npublic_mode=false\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule Excluding Specific Namespace (Task 4)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team B in Task 4. This rule filters logs or metrics, granting access only to data points where the `namespace` label does *not* have the value `dev`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_8\n\nLANGUAGE: logql\nCODE:\n```\n{namespace!=\"dev\"}\n```\n\n----------------------------------------\n\nTITLE: Finding Grafana Annotation Tags (HTTP Response)\nDESCRIPTION: Example successful HTTP response (Status 200 OK) after requesting annotation tags via the Grafana API. The response body contains a JSON object with a `result` field, which includes an array of `tags` found, each with its name (`tag`) and occurrence count (`count`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": {\n        \"tags\": [\n            {\n                \"tag\": \"outage\",\n                \"count\": 1\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Current User Preferences via HTTP API - HTTP\nDESCRIPTION: Sends a GET request to retrieve the current user preferences in Grafana, requiring Bearer authentication. The operation does not accept a body and responds with a JSON object of preference fields. Useful for automation or inspection of per-user settings; requires access to the HTTP API. Inputs are HTTP headers including Authorization, and output is a JSON payload representing user preference state.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/user/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Documenting Node Graph Data Structures in Grafana Visualizations (Markdown)\nDESCRIPTION: This snippet uses Markdown to communicate required and optional field names and types for node and edge data frames that power Grafana node graph visualizations. It provides detailed API documentation and table formats, includes inline admonition calls, and embeds links to shared documentation and external sources. Inputs include Markdown tables and admonitions; outputs are formatted visual documentation consumed by users or developers referencing Grafana visualization requirements. Limitations include dependency on correct embedding syntax (e.g., Hugo shortcodes), and is intended for inclusion in user-facing docs rather than direct code execution.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/node-graph/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Field overrides\n\n{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n\n## Data API\n\nThis visualization needs a specific shape of the data to be returned from the data source in order to correctly display it.\n\nNode graphs, at minimum, require a data frame describing the edges of the graph. By default, node graphs will compute the nodes and any stats based on this data frame. Optionally a second data frame describing the nodes can be sent in case there is need to show more node specific metadata. You have to set `frame.meta.preferredVisualisationType = 'nodeGraph'` on both data frames or name them `nodes` and `edges` respectively for the node graph to render.\n\n### Edges data frame structure\n\nRequired fields:\n\n| Field name | Type   | Description                    |\n| ---------- | ------ | ------------------------------ |\n| id         | string | Unique identifier of the edge. |\n| source     | string | Id of the source node.         |\n| target     | string | Id of the target.              |\n\nOptional fields:\n\n| Field name      | Type          | Description                                                                                                                                                                                                                                                               |\n| --------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| mainstat        | string/number | First stat shown in the overlay when hovering over the edge. It can be a string showing the value as is or it can be a number. If it is a number, any unit associated with that field is also shown                                                                       |\n| secondarystat   | string/number | Same as mainStat, but shown right under it.                                                                                                                                                                                                                               |\n| detail__*    | string/number | Any field prefixed with `detail__` will be shown in the header of context menu when clicked on the edge. Use `config.displayName` for more human readable label.                                                                                                          |\n| thickness       | number        | The thickness of the edge. Default: `1`                                                                                                                                                                                                                                   |\n| highlighted     | boolean       | Sets whether the edge should be highlighted. Useful, for example, to represent a specific path in the graph by highlighting several nodes and edges. Default: `false`                                                                                                     |\n| color           | string        | Sets the default color of the edge. It can be an acceptable HTML color string. Default: `#999`                                                                                                                                                                            |\n| strokeDasharray | string        | Sets the pattern of dashes and gaps used to render the edge. If unset, a solid line is used as edge. For more information and examples, refer to the [`stroke-dasharray` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray). |\n\n{{< admonition type=\"caution\" >}}\nStarting with 10.5, `highlighted` is deprecated.\nIt will be removed in a future release.\nUse `color` to indicate a highlighted edge state instead.\n{{< /admonition >}}\n\n### Nodes data frame structure\n\nRequired fields:\n\n| Field name | Type   | Description                                                                                  |\n| ---------- | ------ | -------------------------------------------------------------------------------------------- |\n| id         | string | Unique identifier of the node. This ID is referenced by edge in its source and target field. |\n\nOptional fields:\n\n| Field name    | Type          | Description                                                                                                                                                                                                                                                                                                                                                              |\n| ------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| title         | string        | Name of the node visible in just under the node.                                                                                                                                                                                                                                                                                                                         |\n| subtitle      | string        | Additional, name, type or other identifier shown under the title.                                                                                                                                                                                                                                                                                                        |\n| mainstat      | string/number | First stat shown inside the node itself. It can either be a string showing the value as is or a number. If it is a number, any unit associated with that field is also shown.                                                                                                                                                                                            |\n| secondarystat | string/number | Same as mainStat, but shown under it inside the node.                                                                                                                                                                                                                                                                                                                    |\n| arc__*     | number        | Any field prefixed with `arc__` will be used to create the color circle around the node. All values in these fields should add up to 1. You can specify color using `config.color.fixedColor`.                                                                                                                                                                           |\n| detail__*  | string/number | Any field prefixed with `detail__` will be shown in the header of context menu when clicked on the node. Use `config.displayName` for more human readable label.                                                                                                                                                                                                         |\n| color         | string/number | Can be used to specify a single color instead of using the `arc__` fields to specify color sections. It can be either a string which should then be an acceptable HTML color string or it can be a number in which case the behavior depends on `field.config.color.mode` setting. This can be for example used to create gradient colors controlled by the field value. |\n| icon          | string        | Name of the icon to show inside the node instead of the default stats. Only Grafana [built in icons](https://developers.grafana.com/ui/latest/index.html?path=/story/docs-overview-icon--icons-overview)) are allowed.                                                                                                                                                   |\n| nodeRadius    | number        | Radius value in pixels. Used to manage node size.                                                                                                                                                                                                                                                                                                                        |\n| highlighted   | boolean       | Sets whether the node should be highlighted. Useful for example to represent a specific path in the graph by highlighting several nodes and edges. Default: `false`                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Annotation by ID (HTTP Request)\nDESCRIPTION: Example HTTP DELETE request to the `/api/annotations/:id` endpoint to remove a specific annotation in Grafana. It requires a valid `Authorization` header (Bearer token shown) and the ID of the annotation to be deleted (e.g., `1`). The `Accept` and `Content-Type` headers are set to `application/json`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/annotations/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Viewport Height - JSON\nDESCRIPTION: Establishes rendering.maxHeight in JSON as the upper bound for the rendering viewport height, measured in pixels. Used to validate and constrain rendering requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"maxHeight\": 500\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Basic Role to Multiple Users - Terraform\nDESCRIPTION: This Terraform example shows how to create multiple user resources and assign a basic role to all of them at once using a single 'grafana_role_assignment'. It requires defined users and a valid basic role UID, such as 'basic_editor'. The 'users' parameter allows assigning a role to several users simultaneously by passing their IDs. Inputs: user resource definitions and the targeted role UID. Outputs: all listed users with the specified Grafana role. Passwords and user parameters must be configured according to organization policies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_user\" \"editor_user_2\" {\n  email    = \"terraform_editor_2@example.com\"\n  login    = \"terraform_editor_2_user\"\n  password = <TEST_PASSWORD>\n}\nresource \"grafana_user\" \"editor_user_3\" {\n  email    = \"terraform_editor_3@example.com\"\n  login    = \"terraform_editor_3_user\"\n  password = <TEST_PASSWORD>\n}\n\n# Assign Editor role to multiply users\nresource \"grafana_role_assignment\" \"editor_role_assignment\" {\n  role_uid = \"basic_editor\"\n  users    = [grafana_user.editor_user_2.id, grafana_user.editor_user_3.id]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Increasing Open File Limit for Current Session (Bash)\nDESCRIPTION: Sets the maximum number of open files (soft limit, `-S`) to 4096 (`-n 4096`) using the `ulimit` command. This temporary change applies only to the current shell session and can help resolve 'Too many open files' errors encountered during operations like `make run`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nulimit -S -n 4096\n```\n\n----------------------------------------\n\nTITLE: Migrating Register Syntax in react-hook-form v7+ (JavaScript/JSX)\nDESCRIPTION: Contrasts deprecated (ref-based) vs. updated (spread-based) registration for form inputs when migrating to react-hook-form v7. Demonstrates required field registration inline in input and clarifies library's API breaking change. Relies on react-hook-form version awareness and JSX inputs.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n-(<input ref={register({ required: true })} name=\"test\" />) + <input {...register('test', { required: true })} />;\n```\n\n----------------------------------------\n\nTITLE: STARTTLS Connection Configuration\nDESCRIPTION: Configuration settings for LDAP with STARTTLS connection\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nport = 389\nuse_ssl = true\nstart_tls = true\n```\n\n----------------------------------------\n\nTITLE: Managing Notification Templates in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to create new or update existing templates used for Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.templates:write`\n```\n\n----------------------------------------\n\nTITLE: Managing Mute Time Intervals in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to create new or update existing mute time intervals for Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.time-intervals:write`\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration - Bash\nDESCRIPTION: Downloads the official Docker Compose YAML file for running Grafana, Loki, and Promtail from the Loki repository. This snippet requires wget to be installed and internet access. The downloaded configuration sets up the necessary containers for the tutorial environment, saving the file as docker-compose.yaml. The main output is the docker-compose.yaml file in the current directory. This is the foundational step for initializing the monitoring stack.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/docker-compose.yaml -O docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Exporting Alert Rule Group - HTTP\nDESCRIPTION: Defines an HTTP GET endpoint used to export an alert rule group in provisioning file formats such as yaml, json, or hcl within Grafana. It supports both path and query parameters (e.g., specifying format and download options), allowing clients to initiate a file download or receive the export contents directly. This endpoint requires valid path parameters :folderUid and :group to identify the resource to export; returns success (200) or not found (404) responses.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/folder/:folderUid/rule-groups/:group/export\n```\n\n----------------------------------------\n\nTITLE: Adding an admin user to a Grafana organization\nDESCRIPTION: This optional step adds the admin user to a previously created organization. It's useful if the organization was created earlier or if subsequent steps fail.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"loginOrEmail\":\"admin\", \"role\": \"Admin\"}' http://admin:admin@localhost:3000/api/orgs/<org id of new org>/users\n```\n\n----------------------------------------\n\nTITLE: Referencing Query Value by Ref ID in Go Templates - Go Template - Markdown\nDESCRIPTION: This snippet demonstrates how to reference a floating point value from a specific alert query (using its Ref ID, here 'A') in a Grafana alert rule template using the Go templating language. Dependencies include Grafana's alerting system with instant query results available, and knowledge of Go template syntax. The input is the values object with properties per Ref ID, and the output is the inserted value within the rendered annotation or label. Constraints are that this only works for instant queries and the Ref ID must match an available query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $values.A.Value }}\n```\n\n----------------------------------------\n\nTITLE: Querying Recorded Query Data in Prometheus (PromQL)\nDESCRIPTION: This PromQL query example demonstrates how Grafana retrieves historical data points for a specific recorded query from the configured Prometheus remote write target. Grafana automatically generates this query, including the metric name and labels (`id`, `name`), when a recorded query is added to a dashboard panel. The panel's data source becomes '-- Mixed --' as it combines the original panel queries with this Prometheus query.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/recorded-queries/index.md#2025-04-23_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\ngenerated_recorded_query_name{id=\"generated_id\", name=\"recorded query name\"}\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Block for Grafana Manifest (Text)\nDESCRIPTION: This block contains the PGP signature corresponding to the preceding JSON manifest data within the signed message. Generated using OpenPGP.js v4.10.1 (as indicated by the comment), it allows verification of the manifest's origin (Grafana Labs) and integrity using the public key identified by `keyId: \\\"7e4d0c6a708866e7\\\"` found in the manifest itself. The signature is applied to the canonical form of the JSON data prepended by the PGP headers.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/installer/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqEEARMKAAYFAl+2rOIACgkQfk0ManCIZudNOwIJAT8FTzwnRFCSLTOaR3F3\n2Fh96eRbghokXcQG9WqpQAg8ZiVfGXeWWRNtV+nuQ9VOZOTO0BovWLuMkym2\nci8ABpWOAgd46LkGn3Dd8XVnGmLI6UPqHAXflItOrCMRiGcYJn5PxP1aCz8h\nD0JoNI9TIKrhMtM4voU3Qhf3mIOTHueuDNS48w==\n=mu2j\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Getting LBAC Rules for a Data Source in HTTP\nDESCRIPTION: This HTTP GET request retrieves all existing LBAC rules for a data source identified by its UID. It requires specific permissions and returns a JSON response with team UIDs and their associated rules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/uid/my_datasource/lbac/teams HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Querying Graphite Servers for Chained Variables\nDESCRIPTION: This Graphite query returns all servers for a selected application in a chained variable setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: graphite\nCODE:\n```\napps.$app.*\n```\n\n----------------------------------------\n\nTITLE: Creating New Alert Rule with HTTP POST - HTTP\nDESCRIPTION: This HTTP POST request creates a new alert rule by submitting a ProvisionedAlertRule in the request body. Optional header 'X-Disable-Provenance' can enable editing provisioned resources via the Grafana UI. Upon success, the endpoint returns the created alert rule with a 201 status code; validation errors result in a 400 error. Input must conform to the ProvisionedAlertRule schema, and authorization may be needed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_31\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/v1/provisioning/alert-rules\n```\n\n----------------------------------------\n\nTITLE: Displaying Invitation Link in Go Template\nDESCRIPTION: This Go template snippet inserts the unique invitation URL (`.LinkUrl`) from the context data into the email body. This link allows the recipient to accept the invitation and join the Grafana organization. Requires the Go templating engine and the `.LinkUrl` variable in the context.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_3\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{.LinkUrl}}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Grafana Release Notes\nDESCRIPTION: YAML configuration block defining build settings and product labels for Grafana release notes documentation. Specifies that the page should not be listed and applies product tags for cloud, enterprise and open source versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-0-0-beta1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.0.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Grid using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode renders a grid of cards. The content for the cards is sourced from the page's front matter under the key specified (`cards`). The `type=\"simple\"` parameter defines the visual layout style of the grid. This is used here to display links to the detailed pages for each Drilldown app (Metrics, Logs, Traces, Profiles).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< card-grid key=\"cards\" type=\"simple\" >}}\n```\n\n----------------------------------------\n\nTITLE: Basic Load Test Execution\nDESCRIPTION: Runs the default load test for 15 minutes using 2 virtual users\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana OSS via RPM Repository - Bash\nDESCRIPTION: Installs the open-source (OSS) version of Grafana using zypper on SUSE/openSUSE from the previously added RPM repository. Requires: zypper, sudo privileges, repository configured. No parameters; output: grafana installed as system package.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install grafana\n```\n\n----------------------------------------\n\nTITLE: LBAC Rules Update API Response Example in HTTP\nDESCRIPTION: This is an example HTTP response for a successful PUT request to update LBAC rules. It returns a JSON object confirming the update, including the data source ID, name, UID, and the updated rules for each team.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 35\n\n{\n  \"id\": 1,\n  \"message\": \"Data source LBAC rules updated\",\n  \"name\": \"loki\",\n  \"rules\": [\n    {\n      \"teamUId\": \"fdnd1pf4m9sxvc\",\n      \"rules\": [\n        \"{ service_name=\\\"bigquery-sync-mysql\\\" }\"\n      ]\n    },\n    {\n      \"teamUid\": \"dfed1p2m9sxvfc\",\n      \"rules\": [\n        \"{ service_name=\\\"api\\\" }\"\n      ]\n    }\n  ],\n  \"uid\": \"ee1nm1t7spog0e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Grafana's Interval Variable in Prometheus Queries\nDESCRIPTION: This Prometheus query demonstrates the use of the `$__interval` variable within the `rate()` function. Grafana automatically calculates this variable based on the panel width and selected time range, providing an adaptive time interval for aggregations suitable for the current zoom level.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nrate(http_requests_total[$__interval])\n```\n\n----------------------------------------\n\nTITLE: Reading Receiver Permissions in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to read permissions associated with contact points (receivers) in Grafana. This action is typically associated with broader `receivers:*` or specific `receivers:uid:*` scopes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`receivers.permissions:read`\n```\n\n----------------------------------------\n\nTITLE: Resetting Grafana Notification Policies via YAML Provisioning\nDESCRIPTION: This YAML configuration example demonstrates how to reset the notification policy tree for specified organization IDs back to the Grafana default settings using provisioning. The `resetPolicies` key contains a list of organization IDs whose policies should be reset upon Grafana restart or provision reload.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 1\n\n# List of orgIds that should be reset to the default policy\nresetPolicies:\n  - 1\n\n```\n\n----------------------------------------\n\nTITLE: Building Grafana E2E Test Plugin (Shell)\nDESCRIPTION: This shell command uses yarn to build the end-to-end test plugin. It compiles the necessary frontend assets for the plugin described in the document for production or testing deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn e2e:plugin:build\n```\n\n----------------------------------------\n\nTITLE: Declaring Storybook Meta and ArgTypes in MDX for FeatureBadge (MDX)\nDESCRIPTION: This snippet defines Storybook metadata and automatically generates a property table for the FeatureBadge component using MDX. The <Meta /> tag specifies the component to document along with its title, while <ArgTypes /> displays all props. Required environment includes Storybook with MDX support, and the FeatureBadge component properly exported. Input is the component reference; outputs are the Storybook documentation blocks for metadata and argument display.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FeatureBadge/FeatureBadge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\\\"MDX|FeatureBadge\\\" component={FeatureBadge} />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={FeatureBadge} />\n```\n\n----------------------------------------\n\nTITLE: Forcing License Token Refresh via HTTP - Grafana Licensing API - HTTP\nDESCRIPTION: This HTTP POST request is issued to /api/licensing/token/renew to manually request a new licensing token for Grafana Enterprise. The request requires a Bearer token and an empty JSON object as the body. The operation requires licensing:write permission. Proper headers must be set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/licensing/token/renew\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{}\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals with Trans Component using 'count' Prop in JSX\nDESCRIPTION: Example of using the `<Trans>` component for handling pluralization. The `count` prop is provided with the numerical value (`messages.length`), and the variable `{{ count }}` is used in the default string. The `i18nKey` base (`inbox.heading`) will be used by i18next to find appropriate plural forms (_one, _other, etc.). Requires `Trans` import.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\n\n<Trans i18nKey=\"inbox.heading\" count={messages.length}>\n  You got {{ count: messages.length }} messages\n</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Team Creation Response Example - JSON\nDESCRIPTION: Displays the JSON payload returned on successful creation of a Grafana team. The response includes a success message, the team's numeric ID, and a unique identifier (uid).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Team created\\\",\\n  \\\"teamId\\\":2,\\n  \\\"uid\\\":\\\"ceaulqadfoav4e\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Year using Go Template Functions\nDESCRIPTION: This Go template snippet uses the built-in `now` function to get the current timestamp and pipes it (|) to the `date` function. The `date` function formats the timestamp using Go's reference layout string \"2006\" to display only the current year. It's used for copyright information in the email footer.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n{{now | date \"2006\"}}\n```\n\n----------------------------------------\n\nTITLE: Importing the Grafana GPG Key - Bash\nDESCRIPTION: Downloads the Grafana repository GPG signing key and installs it to the keyring, which is necessary for verifying package authenticity. Dependencies: wget, gpg, sudo. Input: None. Output: Places grafana.gpg in /etc/apt/keyrings/ for apt use. Required before adding a Grafana repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings/\nwget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Stack using docker-compose (Shell)\nDESCRIPTION: Starts the containers defined in the `docker-compose.yml` file in detached mode (`-d`) using the `docker-compose up` command. This brings up the full Grafana stack (Grafana, Prometheus, etc.) required for the tutorial as part of the interactive setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Using FileUpload Component (React, JSX)\nDESCRIPTION: This snippet demonstrates how to import and use the FileUpload component from the @grafana/ui library in a React JSX context. The FileUpload component provides a button to trigger a file selection dialog, with the 'onFileUpload' prop handling file input events. Users can further customize the button label and accepted file types through respective props. The example shows logging the first uploaded file to the console when a file is selected.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FileUpload/FileUpload.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileUpload } from '@grafana/ui';\n\n<FileUpload\n  onFileUpload={({ currentTarget }) => console.log('file', currentTarget?.files && currentTarget.files[0])}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Group Configuration in JSX\nDESCRIPTION: Configuration object specifying the API group and version for OpenAPI snapshot generation.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  Group:   \"dashboard.grafana.app\",\n  Version: \"v0alpha1\",\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Result of 'Labels to Fields' (Columns Mode)\nDESCRIPTION: This Markdown table illustrates the output of the 'Labels to fields' transformation when used in 'Columns' mode. It converts time series labels (Server, Datacenter) into distinct columns alongside Time and Value.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Server   | Datacenter | Value |\n| ------------------- | -------- | ---------- | ----- |\n| 2020-07-07 11:34:20 | Server A | EU         | 1     |\n| 2020-07-07 11:34:20 | Server B | EU         | 2     |\n```\n\n----------------------------------------\n\nTITLE: Wire-Generated Code with Custom Message in Go\nDESCRIPTION: Shows the updated initialization code generated by Wire that includes passing the custom phrase to NewMessage.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc InitializeEvent(phrase string) (Event, error) {\n    message := NewMessage(phrase)\n    greeter := NewGreeter(message)\n    event, err := NewEvent(greeter)\n    if err != nil {\n        return Event{}, err\n    }\n    return event, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Workload Identity in Grafana Server Configuration\nDESCRIPTION: INI configuration for enabling Workload Identity in Grafana's server configuration. This setting allows Grafana running in a Kubernetes environment to use Azure Workload Identity for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[azure]\nworkload_identity_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Presenting a PGP-Signed JSON Manifest for Grafana Plugin (JSON & PGP) - JSON\nDESCRIPTION: This snippet demonstrates a plugin manifest containing essential metadata (such as manifest version, plugin version, signing organization, keyId, and hash of related files) in JSON, wrapped within PGP signed message delimiters. The manifest is used to verify the integrity and authenticity of plugin files by validating the signature. No direct dependencies are required to read this file, but PGP software or a compatible library such as OpenPGP.js is needed for signature verification. The content allows end-users or automation tools to check whether the plugin files they receive originate from Grafana and have not been tampered with.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/nested/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA512\\n\\n{\\n  \"manifestVersion\": \"2.0.0\",\\n  \"signatureType\": \"grafana\",\\n  \"signedByOrg\": \"grafana\",\\n  \"signedByOrgName\": \"Grafana Labs\",\\n  \"plugin\": \"test-app\",\\n  \"version\": \"1.0.0\",\\n  \"time\": 1621411638406,\\n  \"keyId\": \"7e4d0c6a708866e7\",\\n  \"files\": {\\n    \"plugin.json\": \"d4aee2052f5f9aaa3eecc90e5c5d9568efcd2d97595cd77fdcd1de0ada922638\"\\n  }\\n}\\n-----BEGIN PGP SIGNATURE-----\\nVersion: OpenPGP.js v4.10.1\\nComment: https://openpgpjs.org\\n\\nwqIEARMKAAYFAmCkxzYACgkQfk0ManCIZucKRAIJAUqsvNDA1GaHdMSQ4h+3\\nlOXkvN7xMbzOpRvC3Wu7agfsNgmaQtctL/502jUpH94J6aItg7Wmx+mtvVGj\\n5i456DitAgkBWDQU7KMAYRhAPNToRZhAdIBr0UXEOS6P9sM+xDuQ/gjZ2J+/\\nIy8j85zhl//0hC/RLspYVxgbZFIHmEto/y+3bbs=\\n=1s40\\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IAM Policy for Grafana SNS Publishing (JSON)\nDESCRIPTION: This JSON snippet defines an AWS IAM policy granting permissions necessary for Grafana to publish messages to a specific Amazon SNS topic. It allows the 'sns:Publish' and 'sns:GetTopicAttributes' actions on the specified SNS topic resource ARN, which needs to be replaced with the actual ARN. This policy is attached to an IAM user or role whose credentials Grafana will use for authentication with AWS SNS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/manage-contact-points/integrations/configure-amazon-sns.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"sns:Publish\", \"sns:GetTopicAttributes\"],\n      \"Resource\": \"arn:aws:sns:<region>:<account_id>:<topic_name>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Deleting Snapshot by deleteKey via Grafana HTTP API (HTTP)\nDESCRIPTION: Shows the JSON HTTP response upon successful deletion via the deleteKey mechanism, echoing a message and the deleted resource's ID, similar to authorized deletion responses for consistency.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\"message\":\"Snapshot deleted. It might take an hour before it's cleared from any CDN caches.\", \"id\": 1}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Plugin Installation (Bash)\nDESCRIPTION: Shows how to use the '--debug' or '-d' global option to enable verbose debug logging during a plugin installation. The debug output will be displayed in the terminal.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --debug plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Fetching Usage Report Preview with HTTP GET Request\nDESCRIPTION: Example HTTP GET request to preview the usage report that would be sent to the vendor.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/admin/usage-report-preview\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Claims for JWT Authentication\nDESCRIPTION: Configuration for specifying which JWT claims should be used for username and email identification during login, with option to auto-create users.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# [auth.jwt]\n# ...\n\n# Specify a claim to use as a username to sign in.\nusername_claim = sub\n\n# Specify a claim to use as an email to sign in.\nemail_claim = sub\n\n# auto-create users if they are not already matched\n# auto_sign_up = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Loki Logging Driver in Docker Compose\nDESCRIPTION: This snippet shows how to configure a Docker service to use the Loki logging driver. It requires installing the Loki Docker driver plugin first and specifies the Loki server URL for log pushing.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/loki-promtail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# For this to work you need to install the logging driver see https://github.com/grafana/loki/tree/master/cmd/docker-driver#plugin-installation\nlogging:\n  driver: loki\n  options:\n    loki-url: \"http://loki:3100/loki/api/v1/push\"\n```\n\n----------------------------------------\n\nTITLE: Example Grouped Grafana Alert Notification for US-West Region (JSON)\nDESCRIPTION: This JSON object shows an example of a grouped alert notification payload sent by Grafana Alerting to the 'US-West-Alerts' receiver. It combines firing alerts for both 'High CPU usage' and 'High Memory usage' from the 'us-west' region into a single notification, demonstrating the grouping functionality based on notification policies and labels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"receiver\": \"US-West-Alerts\",\n  \"status\": \"firing\",\n  \"alerts\": [\n    {\n      \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High CPU usage - Multi-region\",\n        \"grafana_folder\": \"Multi-region alerts\",\n        \"instance\": \"server-05\",\n...\n  {\n    \"status\": \"firing\",\n      \"labels\": {\n        \"alertname\": \"High Memory usage - Multi-region\",\n        \"grafana_folder\": \"Multi-region alerts\",\n        \"instance\": \"server-10\",\n      },\n\n...}\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana server via init.d - Shell\nDESCRIPTION: Stops the Grafana server if managed via legacy init.d scripts. Requires service management compatibility and sudo access. No parameters. Output: service process stopped.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo service grafana-server stop\n```\n\n----------------------------------------\n\nTITLE: Disabling Presence Indicator in Grafana (INI)\nDESCRIPTION: This INI configuration snippet disables the dashboard presence indicator feature in Grafana Enterprise or Cloud. Setting `recent_users_age` to 0 under the `[analytics.views]` section in the Grafana configuration file turns off the display of user avatars indicating recent activity. Requires Grafana Enterprise or Cloud.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/assess-dashboard-usage/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[analytics.views]\n\n\n# Disables the presence indicator\nrecent_users_age = 0\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service with init.d (Linux)\nDESCRIPTION: Starts the Grafana server service using the init.d script. Used on older Linux systems or those configured with init.d.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo service grafana-server start\n```\n\n----------------------------------------\n\nTITLE: Enabling Anonymous Stats Display Feature Toggle in Grafana\nDESCRIPTION: Configuration snippet to enable the displayAnonymousStats feature toggle, which allows viewing anonymous users and devices statistics in Grafana versions 10.2, 10.3, and 10.4.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/anonymous-auth/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[feature_toggles]\nenable = displayAnonymousStats\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Certificate and Key for Caddy TLS\nDESCRIPTION: These commands retrieve the client certificate and key from the Caddy TLS container, which are required for configuring TLS in Grafana Alerting webhook contact points.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-caddy_tls-1 cat /etc/caddy/client.pem\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-caddy_tls-1 cat /etc/caddy/client.key\n```\n\n----------------------------------------\n\nTITLE: Provisioning Custom Grafana Role with Permissions - Terraform\nDESCRIPTION: This Terraform snippet illustrates how to define a custom Grafana role with specific permissions using the 'grafana_role' resource. Required dependencies include the Grafana Terraform provider and an adequately permissioned authentication token. The configuration covers the role's name, description, version, UID, and global availability, as well as a set of permission blocks specifying actions (like 'org.users:add', 'teams:create', etc.) and their scopes. Inputs: role metadata and permission settings. Outputs: a new custom role in your Grafana instance. Limitations: all action and scope strings must align with Grafana's RBAC model.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-terraform-provisioning/index.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"grafana_role\" \"my_new_role\" {\n  name  = \"my_new_role\"\n  description = \"My test role\"\n  version = 1\n  uid = \"newroleuid\"\n  global = true\n\n  permissions {\n    action = \"org.users:add\"\n    scope = \"users:*\"\n  }\n  permissions {\n    action = \"org.users:write\"\n    scope = \"users:*\"\n  }\n  permissions {\n    action = \"org.users:read\"\n    scope = \"users:*\"\n  }\n  permissions {\n\t  action = \"teams:create\"\n  }\n  permissions {\n\t  action = \"teams:read\"\n\t  scope = \"teams:*\"\n  }\n  permissions {\n\t  action = \"teams:write\"\n\t  scope = \"teams:*\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Frontend Settings via Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates how to retrieve current frontend configuration settings from a Grafana instance using a GET HTTP request. The request should include an Authorization header with a valid Bearer token and appropriate Accept and Content-Type headers set to application/json. The endpoint returns a JSON object detailing active datasources, build info, features, and default datasource settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/frontend/settings HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Links in Grafana Announcement Banner using Markdown\nDESCRIPTION: Demonstrates how to add hyperlinks to announcement banner messages using Markdown syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/announcement-banner/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[link text](https://www.example.com)\n```\n\n----------------------------------------\n\nTITLE: Correlation Deletion Response in Grafana HTTP API\nDESCRIPTION: HTTP response returned when a correlation is successfully deleted. The response indicates the operation was successful.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"message\": \"Correlation deleted\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Standard Options Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to standard visualization options. It references a specific markdown file (`visualizations/standard-options.md`) from the `grafana` source, ensuring consistency across documentation by reusing common content. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/standard-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Mute Timing using Terraform\nDESCRIPTION: Creates a Grafana mute timing named 'No weekends' that prevents alert notifications from being sent during the specified intervals, in this case, Saturdays and Sundays. Requires replacing the placeholder Terraform resource name (`<terraform_mute_timing_name>`). This resource can be associated with notification policies to pause alerting during specific times.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\n resource \"grafana_mute_timing\" \"<terraform_mute_timing_name>\" {\n     name = \"No weekends\"\n\n     intervals {\n         weekdays = [\"saturday\", \"sunday\"]\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Checking Actual Dependencies of Grafana Server\nDESCRIPTION: Command to view the actual compiled dependencies of grafana-server using the verbose flag. This can be useful for understanding what modules are actually included in the executable.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrafana-server -vv\n```\n\n----------------------------------------\n\nTITLE: Controlling Time Range via URL Query Parameters\nDESCRIPTION: Example URL query parameters `time` and `time.window` used to define a specific time range in Grafana. Both parameters should be specified in milliseconds. This example sets a 10-second range centered around the epoch timestamp 1500000000000 (from 1499999995000 to 1500000005000).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\n?time=1500000000000&time.window=10000\n```\n\n----------------------------------------\n\nTITLE: Retrieving CA Certificate from MQTT Container\nDESCRIPTION: Command to display the contents of the CA certificate from the MQTT container. This certificate is needed when configuring TLS for MQTT contact points in Grafana Alerting.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-mqtt-1 cat /etc/certs/ca.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling Persistent Notifications Page via Feature Flag (Configuration)\nDESCRIPTION: This feature flag, `persistNotifications`, enables the display of error alerts (potentially including trace IDs if `tracing` is also enabled) on a dedicated page accessible under the user's Profile in Grafana. Set this flag to true in Grafana configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_2\n\nLANGUAGE: configuration\nCODE:\n```\npersistNotifications\n```\n\n----------------------------------------\n\nTITLE: Checking Port Usage (Windows/PowerShell)\nDESCRIPTION: This PowerShell command uses 'netstat' to list active network connections and listening ports, then filters the output using 'findstr' to show any usage of port 9090. This helps identify potential port conflicts on Windows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nnetstat -ano | findstr :9090\n```\n\n----------------------------------------\n\nTITLE: Including Shared Documentation for Connect Null Values using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content about connecting null values from a separate file ('visualizations/connect-null-values.md'). It uses parameters like 'source', 'version', and 'leveloffset' to fetch the correct content for the specific Grafana version and adjust heading levels for proper integration into the current document structure. This promotes content reuse across the documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_2\n\nLANGUAGE: Hugo Shortcode\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/connect-null-values.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Set User Role Assignments Request\nDESCRIPTION: PUT request to update multiple role assignments for a user. Requires both users.roles:add and users.roles:remove permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/access-control/users/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"global\": false,\n    \"roleUids\": [\n        \"ZiHQJq5nk\",\n        \"GzNQ1357k\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Data Source Caching Settings (Plaintext)\nDESCRIPTION: Defines the `datasources.caching:read` permission action needed to read data source query caching settings in Grafana. Access is related to data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.caching:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Switching user context to a new Grafana organization\nDESCRIPTION: This command switches the context for the admin user to the newly created organization, allowing further operations within that org's context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://admin:admin@localhost:3000/api/user/using/<id of new org>\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert Labels and Annotations in Go Templates for Grafana Alerts\nDESCRIPTION: This template iterates through firing and resolved alerts, displaying all labels and annotations for each alert. It shows the structure of both labels and annotations in a formatted list.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.alert_labels_and_annotations\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.labels_and_annotations\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.labels_and_annotations\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.labels_and_annotations\" }}\nAlert labels: {{ len .Labels.SortedPairs }}\n{{ range .Labels.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end -}}\nAlert annotations: {{ len .Annotations.SortedPairs }}\n{{ range .Annotations.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Logs Query for Alerting\nDESCRIPTION: Example CloudWatch Logs Insights query that can be used for alerting. This query counts exceptions per hour, which returns numeric data suitable for alerts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nfilter @message like /Exception/\n    | stats count(*) as exceptionCount by bin(1h)\n    | sort exceptionCount desc\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables for Graphite Glob Pattern\nDESCRIPTION: Demonstrates the `:glob` format option, often used for Graphite queries. It formats multi-value variables into a glob pattern enclosed in curly braces `{value1,value2}`. The example shows `['test1', 'test2']` interpolated as `'{test1,test2}'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:glob}'\nInterpolation result: '{test1,test2}'\n```\n\n----------------------------------------\n\nTITLE: Defining and Signing a Plugin Manifest with PGP - JSON\nDESCRIPTION: This snippet shows a JSON object describing plugin metadata for Grafana, including versioning, organizational metadata, referenced root URLs, and cryptographic hashes for the plugin files. The manifest is enclosed by a PGP signature block that ensures data authenticity and integrity using OpenPGP.js. Required dependencies are tools supporting PGP signature generation and verification, like OpenPGP.js. Key fields like 'manifestVersion' and 'plugin' must match Grafana plugin requirements. The expected input is a well-formed JSON, and the output is a signed message for plugin verification. Limitations include the need to update the signature if any content changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/test-app-with-roles/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA512\\n\\n{\\n  \\\"manifestVersion\\\": \\\"2.0.0\\\",\\n  \\\"signatureType\\\": \\\"private\\\",\\n  \\\"signedByOrg\\\": \\\"gabrielmabille\\\",\\n  \\\"signedByOrgName\\\": \\\"gabrielmabille\\\",\\n  \\\"rootUrls\\\": [\\n    \\\"http://localhost:3000/\\\"\\n  ],\\n  \\\"plugin\\\": \\\"test-app\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"time\\\": 1667484928676,\\n  \\\"keyId\\\": \\\"7e4d0c6a708866e7\\\",\\n  \\\"files\\\": {\\n    \\\"plugin.json\\\": \\\"3348335ec100392b325f3eeb882a07c729e9cbf0f1ae331239f46840bb1a01eb\\\"\\n  }\\n}\\n-----BEGIN PGP SIGNATURE-----\\nVersion: OpenPGP.js v4.10.10\\nComment: https://openpgpjs.org\\n\\nwrgEARMKAAYFAmNjzQAAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\\ncIhm509bAgiY3ZHrA6i95x6vef1z2cS6Q6+zzeLrfZ31AFtxq2Y/OYIQKBZC\\nBZIp9LufCLCEDnwp+ocMGtDQV7yk1vUKM/zz/QIJAYs8d8pVnao31eqUB5Hy\\n8WdkLFYa3V6rx1Da3iM24A5JgJwpTgudVYRQFRH6XR/HZt/EBRckAeQPxsN6\\nqodkjllo\\n=TMGo\\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Updating Organization User Details via PATCH - HTTP\nDESCRIPTION: This HTTP PATCH request modifies properties (such as role) for a specific user in the current organization, using targeted authentication and a JSON payload identifying the new role. Only available to authorized admins. User ID is specified in the path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/org/users/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"role\": \"Viewer\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Release Notes with Markdown - Markdown\nDESCRIPTION: This snippet consists of markdown content for the release notes of Grafana 7.4.5, including a generated notification and a bulleted list of significant security bug fixes with references to relevant CVEs and affected product tiers. It is intended for user-facing changelogs or documentation pages. The formatting uses standard Markdown headers, comments, and lists. No code dependencies are needed, but markdown rendering tools or platforms are expected to consume this block.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-4-5.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- Auto generated by update changelog github action -->\\n\\n# Release notes for Grafana 7.4.5\\n\\n### Bug fixes\\n\\n- **Security**: Fix API permissions issues related to team-sync CVE-2021-28146, CVE-2021-28147. (Enterprise)\\n- **Security**: Usage insights requires signed in users CVE-2021-28148. (Enterprise)\\n- **Security**: Do not allow editors to incorrectly bypass permissions on the default data source. CVE-2021-27962. (Enterprise)\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging - Bash\nDESCRIPTION: Enables verbose logging during image rendering in remote rendering services by setting RENDERING_VERBOSE_LOGGING to 'true'. When enabled with appropriate log level, debug-level messages are output for troubleshooting. No dependencies except log level must also be set to 'debug'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_VERBOSE_LOGGING=true\n```\n\n----------------------------------------\n\nTITLE: Exporting a Specific Mute Timing via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to `/api/v1/provisioning/mute-timings/:name/export` to export a single mute timing specified by its 'name' in the path parameter. Optional query parameters 'download' (boolean) and 'format' (string, default 'yaml') control download behavior and file type. Requires the mute timing 'name' as a path parameter and appropriate permissions. Expects a 200 OK response with the exported data or a 403 Forbidden.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/mute-timings/:name/export\n```\n\n----------------------------------------\n\nTITLE: Updating Grafana Contact Point with Message Template using Terraform\nDESCRIPTION: Modifies the 'My contact point email' contact point (referenced by `<terraform_contact_point_name>`) to use the 'custom_email.message' template defined previously. The `email.message` property is set to invoke the template (`{{ template \"custom_email.message\" .}}`), thus customizing the content of email notifications sent via this contact point. Requires replacing the placeholder names.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\n resource \"grafana_contact_point\" \"<terraform_contact_point_name>\" {\n     name = \"My contact point email\"\n\n     email {\n         addresses               = [\"<email_address>\"]\n         message                 = \"{{ template \\\"custom_email.message\\\" .}}\"\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Remove Team Member Response Example - JSON\nDESCRIPTION: Reply in JSON confirming that the team member has been removed. Contains a status message only. No content about the deleted user is included.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Team Member removed\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User from Organization - HTTP\nDESCRIPTION: This HTTP DELETE command removes a user from the organization by specifying the userId in the URL. The operation is restricted to users with the proper org.users:remove permission. Requires Bearer token authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/org/users/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Validating Go Modfile Ownership - Bash CLI Example\nDESCRIPTION: This snippet demonstrates how to invoke the Modowners tool's 'check' command to validate a go.mod file. The command checks that every Go dependency in the specified modfile is assigned an owner. It requires Go installed and accessibility to the modowners.go script. The command returns no output if the file is valid or an error if unowned dependencies are found.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run scripts/modowners/modowners.go check go.mod\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana using YUM Repository (Bash)\nDESCRIPTION: Updates the Grafana package specifically using the YUM package manager. This command assumes Grafana was installed using the Grafana YUM repository and is suitable for Red Hat-based systems like RHEL, CentOS, or Fedora.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum update grafana\n```\n\n----------------------------------------\n\nTITLE: Adding User Permission to Data Source in HTTP\nDESCRIPTION: Sends a POST request to set user permission for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/datasources/my_datasource/users/1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"permission\": \"Query\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Chat Contact Point - YAML\nDESCRIPTION: Sets up Grafana alert notifications to be sent to a Google Chat room via webhook. The essential parameter is the webhook 'url', with optional support for templated message content. Output is a formatted alert message posted on the specified Google Chat webhook endpoint. Requires a valid Google Chat webhook URL and no extra dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntype: googlechat\\nsettings:\\n  # <string, required>\\n  url: https://google/webhook\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Terms Filtered by Another Variable (JSON)\nDESCRIPTION: This JSON query is used within Grafana's template variable settings to define a variable (e.g., `$host`). It queries Elasticsearch for terms in the `hostname` field, but filters the results based on the current value of another variable named `$source`. This allows for dynamic, dependent variable updates in a Grafana dashboard.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```\n{\"find\": \"terms\", \"field\": \"hostname\", \"query\": \"source:$source\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Team Preferences Response Example - JSON\nDESCRIPTION: The JSON object returned includes presentation-related settings for the referenced team, such as theme, default dashboard, and timezone. All fields are returned as strings or numbers, with empty values if not set.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"theme\\\": \\\"\\\",\\n  \\\"homeDashboardId\\\": 0,\\n  \\\"timezone\\\": \\\"\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Region Test Data in CSV Format for Grafana Alerts\nDESCRIPTION: This CSV data simulates CPU usage across different regions, services, and instances. It's used to create test data for demonstrating alert rules in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\nregion,cpu-usage,service,instance\nus-west,35,web-server-1,server-01\nus-west,81,web-server-1,server-02\nus-east,79,web-server-2,server-03\nus-east,52,web-server-2,server-04\nus-west,45,db-server-1,server-05\nus-east,77,db-server-2,server-06\nus-west,82,db-server-1,server-07\nus-east,93,db-server-2,server-08\n```\n\n----------------------------------------\n\nTITLE: Enabling SAML Debug Logging in Grafana INI\nDESCRIPTION: Shows how to enable debug level logging specifically for the SAML authentication module (`saml.auth`) in Grafana. This is configured within the `[log]` section of the Grafana configuration file using the `filters` option, aiding in troubleshooting SAML issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nfilters = saml.auth:debug\n```\n\n----------------------------------------\n\nTITLE: Kubectl Edit Confirmation Output (Bash)\nDESCRIPTION: This text represents the standard output message from `kubectl` confirming that edits made to a deployment (e.g., 'grafana') using the `kubectl edit` command have been successfully saved and applied to the Kubernetes cluster.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndeployment.apps/grafana edited\n```\n\n----------------------------------------\n\nTITLE: Querying User Permissions\nDESCRIPTION: GET request to retrieve permissions for the current user. Optional reloadcache parameter to refresh permission cache.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/user/permissions\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Example Response for Updating Annotation - HTTP+JSON\nDESCRIPTION: Sample HTTP response showing a successful full update of an annotation. The JSON response includes a confirmation message indicating completion of the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n    \"message\":\"Annotation updated\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Common Labels/Annotations Template in Grafana - Go\nDESCRIPTION: This snippet calls the 'custom.common_labels_and_annotations' template, passing in the notification data to generate a summary message containing shared metadata. Intended for use in notification channels needing group-level alert context. Input is the notification data object.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom.common_labels_and_annotations\" . }}\n```\n\n----------------------------------------\n\nTITLE: Setting KUBECONFIG and Querying API Resources using Kubectl Bash\nDESCRIPTION: This Bash script demonstrates how to interact with the Grafana Kubernetes API server using `kubectl` during development. It first exports the `KUBECONFIG` environment variable, pointing it to the auto-generated development kubeconfig file located within the Grafana data directory. Then, it runs `kubectl api-resources` to list the resources available via the Grafana API server, confirming connectivity.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig\nkubectl api-resources\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification Policy Component Diagram using Hugo Figure Shortcode\nDESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram showing the components and workflow within a notification policy, illustrating how it determines contact points, timings, and grouping. The snippet specifies the image source path, maximum display width, and alternative text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/alerting/alerting-notification-policy-diagram-v5.png\" max-width=\"750px\" alt=\"A diagram of the notification policy component\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tempo Backend Server in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the HTTP listen port for a Tempo backend server in Grafana v7.5. To use Tempo as a backend data source, specify the desired port under the 'server' configuration block in your Tempo configuration file. The 'http_listen_port' parameter determines which port Tempo listens for HTTP requests, and the snippet assumes no other dependencies are required within this block. The expected outcome is that Tempo will be reachable over HTTP on port 3101 as configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-5.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\\n  http_listen_port: 3101\\n\n```\n\n----------------------------------------\n\nTITLE: Slow Auth Token Test\nDESCRIPTION: Executes auth token test with random query latency between 1 and 30 seconds\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -c auth_token_slow_test -s 30\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and UI Component in TypeScript\nDESCRIPTION: This snippet imports the Meta and ArgTypes utilities from the Storybook blocks package and the Label component for documentation purposes. Dependencies include '@storybook/blocks' and the local './Label' module. These imports are foundational for setting up Storybook documentation, allowing the metadata and prop tables to be generated and rendered.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Label } from './Label';\n```\n\n----------------------------------------\n\nTITLE: Variable Syntax Example with [[ ]] Format in PromQL\nDESCRIPTION: Example of using the [[varname]] syntax in Prometheus queries, which allows using variables in the middle of words.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_6\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(http_requests_total{job=~\"[[job]]\"}[$_rate_interval])\n```\n\n----------------------------------------\n\nTITLE: Querying Flask App CPU Usage in Prometheus\nDESCRIPTION: This PromQL query selects the `flask_app_cpu_usage` metric from a configured Prometheus data source within Grafana. It is used as the input for an alert rule to monitor the CPU usage of a Flask application. The surrounding text indicates this query is entered in the query editor and used to set an alert threshold (e.g., 75%).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\nflask_app_cpu_usage{}\n```\n\n----------------------------------------\n\nTITLE: Debugging Wire Dependency Injection Error in Go\nDESCRIPTION: An error message from Google Wire showing that a Struct function received an incorrect first argument. The error indicates that the function expects a pointer to a named struct but received a double pointer (**example.com/foo.A) instead.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/StructNotAStruct/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: first argument to Struct must be a pointer to a named struct; found **example.com/foo.A\n```\n\n----------------------------------------\n\nTITLE: Printing All Values from Classic Alert Conditions in Grafana (Go Template)\nDESCRIPTION: This Go template snippet is used to print the numerical values from all firing time series in a Grafana classic alert condition. It uses the same match-based filtering on keys within $values, but prints $v.Value rather than $v.Labels. Dependencies include Grafana alert templating context and a properly structured $values object. Change 'B' in the match regex to your classic condition's Ref ID if needed. Outputs formatted lines like 'B0: 81.2345'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n{{ range $k, $v := $values -}}\\n{{ if (match \"B[0-9]+\" $k) -}}\\n{{ $k }}: {{ $v.Value }}{{ end }}\\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: JSON Diff Response for Dashboard Comparison in Grafana HTTP API\nDESCRIPTION: This HTTP response returns an HTML representation of the JSON diff between two dashboard versions, similar to diffs seen on GitHub or GitLab.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n\n<p id=\"l1\" class=\"diff-line diff-json-same\">\n  <!-- Diff omitted -->\n</p>\n```\n\n----------------------------------------\n\nTITLE: Add User Role Assignment Response\nDESCRIPTION: Success response for role assignment operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"message\": \"Role added to the user.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining grafana.datasource Attributes for OpenTelemetry\nDESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana datasources. It includes `grafana.datasource.type` (string, e.g., 'prometheus') and `grafana.datasource.uid` (string, e.g., 'abcdefg-123456'). Both attributes are recommended and stable.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- semconv trace.grafana.datasource -->\n| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |\n|---|---|---|---|---|---|\n| `grafana.datasource.type` | string | The datasource type. | `prometheus`; `loki`; `grafana-github-datasource` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n| `grafana.datasource.uid` | string | The datasource unique identifier. | `abcdefg-123456` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n<!-- endsemconv -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Query Offset for Unified Alerting - INI - Markdown Block\nDESCRIPTION: Sets the rule_query_offset used when converting alert rules with unified alerting. This configuration should be included in the Grafana OSS or Enterprise configuration file under the [unified_alerting.prometheus_conversion] section. The rule_query_offset parameter determines the default offset time for rule queries during conversion unless overridden by a rule group setting. Requires knowledge of Grafana INI configuration syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/alerting-migration/migration-api.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting.prometheus_conversion]\\nrule_query_offset = 1m\\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Series to Rows Transformation in Markdown\nDESCRIPTION: This code snippet demonstrates how to represent tabular data in Markdown, showing the input and output of the 'Series to rows' transformation in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n**Query A:**\n\n| Time                | Temperature |\n| ------------------- | ----------- |\n| 2020-07-07 11:34:20 | 25          |\n| 2020-07-07 10:31:22 | 22          |\n| 2020-07-07 09:30:05 | 19          |\n\n**Query B:**\n\n| Time                | Humidity |\n| ------------------- | -------- |\n| 2020-07-07 11:34:20 | 24       |\n| 2020-07-07 10:32:20 | 29       |\n| 2020-07-07 09:30:57 | 33       |\n\nHere is the result after applying the Series to rows transformation.\n\n| Time                | Metric      | Value |\n| ------------------- | ----------- | ----- |\n| 2020-07-07 11:34:20 | Temperature | 25    |\n| 2020-07-07 11:34:20 | Humidity    | 22    |\n| 2020-07-07 10:32:20 | Humidity    | 29    |\n| 2020-07-07 10:31:22 | Temperature | 22    |\n| 2020-07-07 09:30:57 | Humidity    | 33    |\n| 2020-07-07 09:30:05 | Temperature | 19    |\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Query Result for Value Mappings\nDESCRIPTION: This table represents the data returned by a configuration query, intended to be used for creating value mappings via the 'Config from query results' transformation. Each row defines a mapping from a value to text and color.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n| Value | Text   | Color |\n| ----- | ------ | ----- |\n| L     | Low    | blue  |\n| M     | Medium | green |\n| H     | High   | red   |\n```\n\n----------------------------------------\n\nTITLE: Handling BackendSrv Fetch Errors for Invalid JSON in JavaScript\nDESCRIPTION: Illustrates a breaking change in Grafana's `backendSrv.fetch()` behavior. Previously, API calls like `getBackendSrv().post()` returning invalid JSON would resolve with an empty object (`{}`). Starting from this version, such responses will throw an error if the response is expected to be JSON (based on Content-Type header or request options). Developers must now wrap calls to `backendSrv` methods in error handling logic (e.g., try/catch) to manage potential JSON parsing errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta2.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// PREVIOUSLY: this was returning with an empty object {} - in case the response is an invalid JSON\nreturn await getBackendSrv().post(`${API_ROOT}/${id}/install`);\n\n// AFTER THIS CHANGE: the following will throw an error - in case the response is an invalid JSON\nreturn await getBackendSrv().post(`${API_ROOT}/${id}/install`);\n```\n\n----------------------------------------\n\nTITLE: Sample Trust Relationship for IAM Role with Grafana Assume Role\nDESCRIPTION: JSON configuration for the trust relationship policy document needed when setting up Grafana Assume Role. This policy allows Grafana's AWS account to assume the role using STS with a specific external ID for security.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/aws-authentication/index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": {Grafana's AWS Account}\n            },\n            \"Action\": \"sts:AssumeRole\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"sts:ExternalId\": {External ID unique to your account}\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Plugin Directory Path in INI\nDESCRIPTION: This INI configuration snippet shows how to set the `plugins` property within the `[paths]` section of the Grafana configuration file. This property specifies the directory where Grafana should look for custom plugins. Replace `/path/to/grafana-plugins` with the actual absolute path to your plugin development directory. Grafana must be restarted for this change to take effect.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\nplugins = \"/path/to/grafana-plugins\"\n```\n\n----------------------------------------\n\nTITLE: Building the Plugin for Production using Yarn\nDESCRIPTION: Executes the production build process for the plugin using Yarn. This command typically compiles source code, bundles assets, and places the distributable files into a 'dist' directory, ready for packaging. Requires Yarn and the necessary build toolchain (e.g., Node.js) to be installed, along with project dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Expiration for Passwordless Auth in Grafana (INI)\nDESCRIPTION: This configuration sets the validity duration for the one-time password (OTP) or magic link sent via email for passwordless authentication. The `code_expiration` option under `[auth.passwordless]` defines how long the code remains valid. The example sets it to 20 minutes (`20m`). Passwordless authentication must be enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/passwordless/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[auth.passwordless]\nenabled = true\ncode_expiration = 20m\n```\n\n----------------------------------------\n\nTITLE: Iterating Alerts and Accessing Labels via Dot Notation in Grafana Templates - Go\nDESCRIPTION: This snippet demonstrates accessing a label using dot notation within a Go template definition in Grafana. It iterates over `.Alerts` and prints each alert's name using `.Labels.alertname`. It requires each alert to define an `alertname` label; intended output is a set of alert names formatted for notification.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_message\" -}}\n{{ range .Alerts }}\nThe name of the alert is {{ .Labels.alertname }}\n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Second Part of Multi-Series Graph in Grafana\nDESCRIPTION: This query is the second part of a two-query set for a multi-series graph in Grafana. It's similar to the first query but calculates the average of valueTwo instead.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroup(time, '5m') as time,\n  measurement + ' - value two' as metric,\n  avg(valueTwo) as valueTwo\nFROM\n  metric_values\nGROUP BY\n  $__timeGroup(time, '5m'),\n  measurement\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Receiving Success Response After Org Preferences Update - JSON\nDESCRIPTION: Simple JSON response indicating successful update of organization preferences. Returned after a valid PUT or PATCH request to the org preferences endpoint. Message is always \"Preferences updated\" upon success.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Preferences updated\"}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Release Notes\nDESCRIPTION: YAML configuration block defining build settings and product labels for Grafana 7.5.3 release notes documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-3.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.3\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Component withErrorBoundary for Error Wrapping - React & Grafana UI - TypeScript\nDESCRIPTION: Demonstrates creating a higher-order component with withErrorBoundary, enabling any component to be wrapped in an error boundary declaratively. Requires '@grafana/ui', TypeScript, and React. Accepts a functional component and error boundary options, returning a new component with built-in error protection. Useful for consistently handling errors across reusable components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withErrorBoundary } from '@grafana/ui';\\n\\ninterface MyCompProps {}\\n\\nconst MyComp = withErrorBoundary(\\n  (props: MyCompProps) => {\\n    return <>...</>;\\n  },\\n  { style: 'page' }\\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Story in JSX\nDESCRIPTION: Shows how to create a basic story for a component using a named export.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const someStory = () => <MyComponent />;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values for a Dashboard Variable via URL\nDESCRIPTION: Shows how to pass multiple values ('value1', 'value2') for a single dashboard variable ('example') by repeating the 'var-example' query parameter for each value. This is useful for variables that support multiple selections.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_3\n\nLANGUAGE: uri\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard?var-example=value1&var-example=value2\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS using dnsmasq\nDESCRIPTION: Commands to install and configure dnsmasq for local domain resolution with .loc TLD\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install dnsmasq\n$ echo 'address=/loc/127.0.0.1' | sudo tee /etc/dnsmasq.d/dnsmasq-loc.conf > /dev/null\n$ sudo /etc/init.d/dnsmasq restart\n$ ping whatever.loc\n```\n\n----------------------------------------\n\nTITLE: Removing an External Group from a Team with HTTP API in HTTP\nDESCRIPTION: Shows a DELETE request to remove an external group from a given Grafana team. The 'groupId' is provided as a URL query parameter, and valid bearer authentication is required with 'teams.permissions:write'. The request and response both use JSON, and error codes handle issues such as invalid authorization or references.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/teams/1/groups?groupId=cn%3Deditors%2Cou%3Dgroups%2Cdc%3Dgrafana%2Cdc%3Dorg HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Embedding Image of Pie Chart Labels (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`figure`) to embed an image illustrating how labels (Name and Percent) appear on a Grafana pie chart. Attributes like `src`, `alt`, and `max-width` configure the image display.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure src=\"/static/img/docs/pie-chart-panel/pie-chart-labels-7-5.png\" alt=\"Pie chart labels\" max-width=\"350px\" >}}\n```\n\n----------------------------------------\n\nTITLE: Including Body Partial with Go Template\nDESCRIPTION: Uses the Go template directive `{{> body }}` to include or render a partial template named 'body'. This is a common technique for modularizing templates, allowing the main content area to be defined separately and injected dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/partials/layout/default.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{> body }}\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart Data with Multiple Rows and Columns (Markdown Table)\nDESCRIPTION: Presents a data format with multiple numeric columns and multiple rows using a Markdown table. This example demonstrates that by default, only the values from the last row are summed for the pie chart unless configured to show 'All values'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Value1 | Value2 | Value3 | Optional |\n| ------ | ------ | ------ | -------- |\n| 5      | 3      | 2      | Sums10   |\n| 10     | 6      | 4      | Sums20   |\n| 20     | 8      | 2      | Sums30   |\n```\n\n----------------------------------------\n\nTITLE: Example Output Data after Convert Field Type Transformation\nDESCRIPTION: This table displays the result after applying the 'Convert field type' transformation to the 'Time' field from the sample query. The transformation converted the year strings to full timestamp representations, setting the time to the beginning of each year (00:00:00). This example likely used 'Time' as the target type and 'YYYY' as the DateFormat.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n| Time                | Mark  | Value |\n| ------------------- | ----- | ----- |\n| 2017-01-01 00:00:00 | above | 25    |\n| 2018-01-01 00:00:00 | below | 22    |\n| 2019-01-01 00:00:00 | below | 29    |\n| 2020-01-01 00:00:00 | above | 22    |\n```\n\n----------------------------------------\n\nTITLE: Skipping OAuth Provider Role Sync via 'skip_org_role_sync' (Plaintext)\nDESCRIPTION: This represents the 'skip_org_role_sync' configuration option used within an individual OAuth provider's settings in Grafana v9.4. Setting this allows Grafana administrators to manage organization roles within Grafana itself, bypassing role synchronization specifically for that configured OAuth provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nskip_org_role_sync\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Log Level in Grafana Configuration - YAML\nDESCRIPTION: This YAML snippet modifies the logging configuration in grafana.ini (as embedded in values.yaml), changing the log level to 'debug' under the mode: console section. It ensures verbose logging for troubleshooting. Requires correct indentation. Necessary when detailed logs are essential.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the values.yaml file\n   .....\n.......\n....\ngrafana.ini:\npaths:\n   data: /var/lib/grafana/\n   .....\n.......\n....\n   mode: console\n   level: debug\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables for Elasticsearch Lucene Queries\nDESCRIPTION: Shows the `:lucene` format option, designed for Elasticsearch Lucene queries. It formats multi-value variables into a Lucene OR query string `(\"value1\" OR \"value2\")`. The example shows `['test1', 'test2']` interpolated as `'(\"test1\" OR \"test2\")'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:lucene}'\nInterpolation result: '(\"test1\" OR \"test2\")'\n```\n\n----------------------------------------\n\nTITLE: Example Error Log for Invalid Certificate Authority (Log)\nDESCRIPTION: Illustrates Grafana server log entries showing a rendering failure due to an `ERR_CERT_AUTHORITY_INVALID` error. This typically occurs when the Grafana instance uses HTTPS with a certificate signed by an internal or custom CA that is not trusted by the Chromium instance used for rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_9\n\nLANGUAGE: log\nCODE:\n```\nt=2019-12-04T12:39:22+0000 lvl=error msg=\"Render request failed\" logger=rendering error=map[] url=\"https://192.168.106.101:3443/d-solo/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m&from=1575438321300&to=1575459921300&var-Host=master1&panelId=4&width=1000&height=500&tz=Europe%2FBerlin&render=1\" timestamp=0001-01-01T00:00:00.000Z\nt=2019-12-04T12:39:22+0000 lvl=error msg=\"Rendering failed.\" logger=context userId=1 orgId=1 uname=admin error=\"Rendering failed: Error: net::ERR_CERT_AUTHORITY_INVALID at https://192.168.106.101:3443/d-solo/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m&from=1575438321300&to=1575459921300&var-Host=master1&panelId=4&width=1000&height=500&tz=Europe%2FBerlin&render=1\"\nt=2019-12-04T12:39:22+0000 lvl=error msg=\"Request Completed\" logger=context userId=1 orgId=1 uname=admin method=GET path=/render/d-solo/zxDJxNaZk/graphite-metrics status=500 remote_addr=192.168.106.101 time_ms=310 size=1722 referer=\"https://grafana.xxx-xxx/d/zxDJxNaZk/graphite-metrics?orgId=1&refresh=1m\"\n```\n\n----------------------------------------\n\nTITLE: Response for Root Level Folder and Dashboard Retrieval in HTTP\nDESCRIPTION: This HTTP response demonstrates the format of the returned data when retrieving folders and dashboards at the root level. It includes details such as ID, UID, title, URL, type, tags, and starred status for each item.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n[\n  {\n    \"id\": 163,\n    \"uid\": \"000000163\",\n    \"orgId\": 1,\n    \"title\": \"Folder\",\n    \"url\": \"/dashboards/f/000000163/folder\",\n    \"type\": \"dash-folder\",\n    \"tags\": [],\n    \"isStarred\": false,\n    \"uri\":\"db/folder\" // deprecated in Grafana v5.0\n  },\n  {\n    \"id\":1,\n    \"uid\": \"cIBgcSjkk\",\n    \"orgId\": 1,\n    \"title\":\"Production Overview\",\n    \"url\": \"/d/cIBgcSjkk/production-overview\",\n    \"type\":\"dash-db\",\n    \"tags\":[prod],\n    \"isStarred\":true,\n    \"uri\":\"db/production-overview\" // deprecated in Grafana v5.0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS Certificate and Key Files - Bash\nDESCRIPTION: Specifies the file paths for the HTTPS certificate and key using HTTP_CERT_FILE and HTTP_CERT_KEY environment variables. Used to start the renderer's HTTPS server. Paths must be accessible within the container or host running the process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_CERT_FILE=./path/to/cert\nHTTP_CERT_KEY=./path/to/key\n```\n\n----------------------------------------\n\nTITLE: Restoring Dashboard to Previous Version in Grafana HTTP API\nDESCRIPTION: This HTTP request restores a dashboard to a specific previous version by providing the dashboard UID and the version number to restore to.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/dashboards/uid/QA7wKklGz/restore\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for Deleting a Grafana Custom Role\nDESCRIPTION: Shows an example HTTP DELETE request to the `/api/access-control/roles/:uid` endpoint to delete a specific Grafana custom role identified by its UID. It includes query parameters `force=true` to delete assignments even if the role is assigned, and `global=false` to specify the role is not global (using the default org ID). An `Accept: application/json` header indicates the expected response format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/access-control/roles/jZrmlLCGka?force=true&global=false\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Expiration Time in Grafana Template (Go Template)\nDESCRIPTION: This template placeholder inserts the duration (in minutes) for which the confirmation code remains valid. The `.Expire` variable, containing the time limit, must be available during template rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{ .Expire }}\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies Owned by Teams - Bash CLI Example\nDESCRIPTION: This example uses the Modowners 'modules' command to list all direct Go module dependencies owned by specified teams. The command targets owners provided as a comma-separated list. Requires Go, the modowners.go script, and a populated go.mod. Output lists each dependency@version owned by the given teams.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo run scripts/modowners/modowners.go modules -o @grafana/grafana-release-guild,@grafana/identity-access-team go.mod\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioButtonGroup with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a RadioButtonGroup component for automatic option selection saving.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <RadioButtonGroup\n      options={radioButtonOptions}\n      value={currentOption}\n      onChange={(value) => {\n        onChange(value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Granting CAP_NET_BIND_SERVICE via systemd Override (INI)\nDESCRIPTION: These INI-formatted configuration lines are added to the systemd service override file (e.g., `/etc/systemd/system/grafana-server.service.d/override.conf`). They grant the `CAP_NET_BIND_SERVICE` capability, allowing the Grafana process to bind to ports below 1024. `PrivateUsers=false` is required as capabilities cannot be granted within a private user namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/systemd/bind-net-capabilities.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\n# Give the CAP_NET_BIND_SERVICE capability\nCapabilityBoundingSet=CAP_NET_BIND_SERVICE\nAmbientCapabilities=CAP_NET_BIND_SERVICE\n\n# A private user cannot have process capabilities on the host's user\n# namespace and thus CAP_NET_BIND_SERVICE has no effect.\nPrivateUsers=false\n```\n\n----------------------------------------\n\nTITLE: LDAP TLS Configuration\nDESCRIPTION: TLS configuration settings for LDAP server connection in the TOML configuration file\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ntls_ciphers = [\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\"]\nmin_tls_version = \"TLS1.2\"\nssl_skip_verify = true\nroot_ca_cert = \"devenv/docker/blocks/auth/openldap/certs/default-ca.pem\"\nclient_cert = \"devenv/docker/blocks/auth/openldap/certs/ldap.crt\"\nclient_key = \"devenv/docker/blocks/auth/openldap/certs/ldap.key\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Mute Timing with HTTP POST - HTTP\nDESCRIPTION: This HTTP POST snippet is used to create a mute timing, requiring a MuteTimeInterval object in the request body. The endpoint returns the created entity with status 201 or a validation error with 400. Headers can include 'X-Disable-Provenance' for enabling resource editing within Grafana UI. The request body must match the MuteTimeInterval schema, and results are in JSON.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_33\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/v1/provisioning/mute-timings\n```\n\n----------------------------------------\n\nTITLE: Update Team Response Example - JSON\nDESCRIPTION: A simple JSON response indicating successful update of a team. Contains only a status message confirming the operation. Does not return the modified team object.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Team updated\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Teamsync Configuration for Nested Keycloak Groups (INI)\nDESCRIPTION: Example Grafana configuration for teamsync when using nested Keycloak groups that might contain special characters. It uses the `reverse` function in the JMESPath expression for `groups_attribute_path` to handle potentially complex group names like `Global:department`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\ngroups_attribute_path = reverse(\"Global:department\")\n```\n\n----------------------------------------\n\nTITLE: Providing Cryptographic Signature for Plugin Manifest (PGP SIGNATURE)\nDESCRIPTION: This PGP SIGNATURE block supplies the cryptographic signature for the plugin's JSON manifest, enabling verification of the manifest's integrity and authenticity using the specified key. Dependencies include an OpenPGP implementation for verification (e.g., GnuPG or OpenPGP.js), and the validity of the original manifest as input; the output is a boolean verification result. The signature is ASCII-armored, must be kept alongside the manifest, and is only usable if the manifest content remains unchanged.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/plugin-with-dist/plugin/dist/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: PGP SIGNATURE\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171059101,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmMDdXMAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm54zLAgdfVimeut6Gw9MrIACBZUSH0ht9p9j+iG6MDjpmEFIpqVJrem6f\n8wBv0/kmYU3LV9MWyPuUeRfBdccjQKSjEXlfEAIJAVmut9LcSKIykhWuQA+7\nVMVvJPXzlPkeoYsGYvzAlxh8i2UomCU15UChe62Gzq5V5HgGYkX5layIb5XX\ny2Pio0lc\n=/TR0\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Node Metrics Data in InfluxDB Line Protocol\nDESCRIPTION: Time series data points containing various system metrics exported by node_exporter. Includes measurements for disk performance, memory utilization, system load, and other node statistics formatted in InfluxDB line protocol with nanosecond precision timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_2\n\nLANGUAGE: influxdb\nCODE:\n```\nnode_disk,device=nvme0n1 discard_time_seconds_total=0 1625842606119350390\nnode_disk,device=dm-0 discard_time_seconds_total=0 1625842606119387469\nnode_disk,device=dm-1 discard_time_seconds_total=0 1625842606119408059\nnode_disk,device=dm-2 discard_time_seconds_total=0 1625842606119427965\nnode_disk,device=nvme0n1 flush_requests_total=8.2776030773264636e-305 1625842606119351194\nnode_disk,device=dm-0 flush_requests_total=0 1625842606119388383\nnode_disk,device=dm-1 flush_requests_total=0 1625842606119408727\nnode_disk,device=dm-2 flush_requests_total=0 1625842606119428731\nnode_disk,device=nvme0n1 flush_requests_time_seconds_total=112.684 1625842606119352392\nnode_disk,device=dm-0 flush_requests_time_seconds_total=0 1625842606119389100\nnode_disk,device=dm-1 flush_requests_time_seconds_total=0 1625842606119409394\nnode_disk,device=dm-2 flush_requests_time_seconds_total=0 1625842606119429446\nnode intr_total=384262117 1625842606119685058\nnode context_switches_total=605111048 1625842606119685058\nnode forks_total=515402 1625842606119685058\nnode_memory MemTotal_bytes=16445845504 1625842606118926829\nnode_memory MemFree_bytes=3914833920 1625842606118926829\nnode_memory MemAvailable_bytes=10026749952 1625842606118926829\n```\n\n----------------------------------------\n\nTITLE: Displaying Alerting Architecture Diagram using Hugo Figure Shortcode\nDESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram illustrating the Grafana Alerting architecture, highlighting the decoupled nature of the alert generator and the Alertmanager. The snippet specifies the image source path, maximum display width, and alternative text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/alerting/alerting-alertmanager-architecture.png\" max-width=\"750px\" alt=\"A diagram with the alert generator and alert manager architecture\" >}}\n```\n\n----------------------------------------\n\nTITLE: Attaching OpenPGP Signature Block to Plugin Manifest - Plaintext\nDESCRIPTION: This plaintext snippet represents an ASCII-armored OpenPGP signature block that signs the preceding JSON manifest. The block includes signature version, hash algorithm, OpenPGP.js comments, and the digital signature body, which must be parsed via OpenPGP verification tools. The block is bounded by 'BEGIN PGP SIGNATURE' and 'END PGP SIGNATURE', and is required for cryptographically verifying the manifest's authenticity.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-extra-file/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqEEARMKAAYFAl+2rOIACgkQfk0ManCIZudNOwIJAT8FTzwnRFCSLTOaR3F3\n2Fh96eRbghokXcQG9WqpQAg8ZiVfGXeWWRNtV+nuQ9VOZOTO0BovWLuMkym2\nci8ABpWOAgd46LkGn3Dd8XVnGmLI6UPqHAXflItOrCMRiGcYJn5PxP1aCz8h\nD0JoNI9TIKrhMtM4voU3Qhf3mIOTHueuDNS48w==\n=mu2j\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies and Running Kubernetes Code Generation - Shell\nDESCRIPTION: Provides shell script commands to update the k8s.io/code-generator Go package and execute the update-codegen.sh script. The first command ensures all Go module dependencies are downloaded, while the second command runs a script that deletes existing generated code and regenerates Kubernetes OpenAPI Go code in place. Prerequisites: Go installed, code-generator dependency in go.mod, executable update-codegen.sh script in the hack directory. Input: none (commands are run from the shell). Output: Updated/generate Go code files.\nSOURCE: https://github.com/grafana/grafana/blob/main/hack/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# ensure k8s.io/code-generator pkg is up to date\ngo mod download\n\n# the happy path\n./hack/update-codegen.sh\n```\n\n----------------------------------------\n\nTITLE: New Access Control API Endpoints for Data Source Permissions in Grafana v10.3*\nDESCRIPTION: Specifies the replacement API endpoints for managing data source permissions introduced in Grafana v10.3 (backported from v10.2.3*). These endpoints leverage the Access Control feature for listing, adding, or removing permissions for users, teams, and built-in roles on specific data sources identified by their UID.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- `GET /api/access-control/datasources/:uid` for listing data source permissions\n- `POST /api/access-control/datasources/:uid/users/:id`, `POST /api/access-control/datasources/:uid/teams/:id`, and `POST /api/access-control/datasources/:uid/buildInRoles/:id` for adding or removing data source permissions\n```\n\n----------------------------------------\n\nTITLE: Unstarring a Query in Grafana Query History (HTTP Response)\nDESCRIPTION: This snippet illustrates a successful HTTP 200 OK response after unstarring a query. The JSON response body contains the complete query history entry, reflecting its updated starred status (typically `starred: false` after this operation).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"result\": {\n    \"uid\": \"P8zM2I1nz\",\n    \"datasourceUid\": \"PE1C5CBDA0504A6A3\",\n    \"createdBy\": 1,\n    \"createdAt\": 1643630762,\n    \"starred\": false,\n    \"comment\": \"Debugging query\",\n    \"queries\": [\n      {\n        \"refId\": \"A\",\n        \"key\": \"Q-87fed8e3-62ba-4eb2-8d2a-4129979bb4de-0\",\n        \"scenarioId\": \"csv_content\",\n        \"datasource\": {\n            \"type\": \"testdata\",\n            \"uid\": \"PD8C576611E62080A\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Summary Annotation using 'index' Function in Grafana Alerting (Go Template)\nDESCRIPTION: This Go template snippet provides an alternative method for creating a dynamic `summary` annotation in Grafana alerting. It uses the `index` function to access specific labels (`index $labels \\\"instance\\\"`) and values (`index $values \\\"A\\\"`), achieving the same result as direct variable access.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\nCPU usage for {{ index $labels \"instance\" }} has exceeded 80% ({{ index $values \"A\" }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Displaying TagsInput Props Documentation using ArgTypes Component\nDESCRIPTION: This JSX snippet uses the `ArgTypes` component from Storybook. It automatically generates and displays a table detailing the props (properties), their types, default values, and descriptions for the specified `TagsInput` component, based on its definition and associated JSDoc/TypeScript types.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={TagsInput} />\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secret for AWS Region (Bash)\nDESCRIPTION: Creates a Docker secret named `aws_region` containing the specified AWS region ('us-east-1'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\necho \"us-east-1\" | docker secret create aws_region -\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Database Connection via Kubernetes Environment Variables\nDESCRIPTION: Configures the database connection for Grafana High Availability by setting environment variables within the Grafana pod definition, typically edited using `kubectl edit deployment my-release`. Replace the bracketed placeholders in the `value` fields with your actual database connection details. This is an alternative method to using `grafana.ini` for database configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: GF_DATABASE_TYPE\n  value: [database type]\n- name: GF_DATABASE_HOST\n  value: [database address and port]\n- name: GF_DATABASE_NAME\n  value: [database name]\n- name: GF_DATABASE_USER\n  value: [database username]\n- name: GF_DATABASE_PASSWORD\n  value: [database password]\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Correlation Content for Grafana - CSV\nDESCRIPTION: This snippet defines the structure and templated variables for a CSV table used in Grafana's correlation feature. It references extracted fields such as time, msg, hostNumber, and status, which are populated at runtime using previously configured transformations (logfmt and regex). Required dependencies are a configured Grafana Explore environment, enabled correlation mode, and proper extraction of referenced variables in previous steps. Inputs are dynamically substituted variables; the output is a table row per correlated log entry. This format assumes variable names match those set up in earlier steps and is intended for direct use in Grafana's correlation scenario.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\ntime,msg,hostNumber,status\\n${time},${msg},${hostNumber},${status}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated `ArrayVector` with Plain Arrays in Grafana Plugins\nDESCRIPTION: The `Vector` interface, specifically `ArrayVector`, deprecated in v10, now generates TypeScript build errors. Usage should be replaced with standard JavaScript/TypeScript arrays. While runtime compatibility exists temporarily for older compiled plugins using `get`/`set`, this mechanism will be removed in the future.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Wire Error: Missing Provider for Injector Output Type\nDESCRIPTION: This error message indicates that the Wire dependency injection tool could not find a provider function or value for the type 'example.com/foo.Foo', which is the expected output type of the injector function 'injectMissingOutputType' defined in 'example.com/foo/wire.go'. A provider for 'Foo' needs to be included in the Wire set used by this injector.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMissingOutputType: no provider found for example.com/foo.Foo, output of injector\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS License Validation via Kubernetes Environment Variable\nDESCRIPTION: Configures Grafana Enterprise to validate its license against AWS License Manager by setting the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws` within the Grafana pod definition (edited via `kubectl edit deployment my-release`). This is an alternative to modifying `grafana.ini`. Appropriate IAM permissions must be granted to the EKS node or pod execution role.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: GF_ENTERPRISE_LICENSE_VALIDATION_TYPE\nvalue: aws\n```\n\n----------------------------------------\n\nTITLE: Combined Grafana Label Matchers Example\nDESCRIPTION: Illustrates that multiple label matchers are combined using the AND logical operator. Both `foo=bar` and `id=~[0-9]+` must match for the rule to apply to the example label set `{ foo=bar, baz=qux, id=12 }`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/how_label_matching_works.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfoo=bar\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nid=~[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Percent-Encoding Grafana Variables for URL Parameters\nDESCRIPTION: Demonstrates the `:percentencode` format option. This formats single or multi-value variables for safe inclusion in URL parameters by percent-encoding reserved characters. Multi-value variables are comma-separated before encoding. The example shows `['foo()bar BAZ', 'test2']` interpolated as `'foo%28%29bar%20BAZ%2Ctest2'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['foo()bar BAZ', 'test2']\nString to interpolate: '${servers:percentencode}'\nInterpolation result: 'foo%28%29bar%20BAZ%2Ctest2'\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Label Formatting in Go Template\nDESCRIPTION: Defines a template named '__default_alert_labels' responsible for formatting the labels of a single alert. It specifically extracts and displays the 'alertname' label if present, then removes it from the label set and uses the '__default_sorted_pairs' template to display the remaining labels in a sorted list format. Expects the alert object with a '.Labels' map as context.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n[[- define \"__default_alert_labels\" -]]\n[[- $labels := .Labels -]]\n[[- if index $labels \"alertname\" ]]\nAlertname: [[ index .Labels \"alertname\" -]]\n[[ $labels = $labels.Remove (toStrings (list \"alertname\")) ]]\n[[- end ]]\nLabels: [[ template \"__default_sorted_pairs\" $labels ]]\n[[- end -]]\n```\n\n----------------------------------------\n\nTITLE: Launching Grafana Auth Environment with Docker Compose\nDESCRIPTION: Command to spin up a service for authentication testing in Grafana. This make command adds the specified authentication provider's docker-compose configuration to the main docker-compose file used by the devenv target.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv=auth/oauth\n```\n\n----------------------------------------\n\nTITLE: Filtering Events by Time Range for Template Variable - SQL\nDESCRIPTION: Fetches 'event_name' values from the 'event_log' table, applying Grafana's $__timeFilter macro for dynamic date filtering, which refreshes based on dashboard time range. Aka, outputs events relevant to the selected dashboard window. Useful for time-dependent variable drop-downs; requires Grafana macros.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT event_name FROM event_log WHERE $__timeFilter(time_column)\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated API Hooks and Types\nDESCRIPTION: Index file that exports the generated API hooks and types for use in the application.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { generatedAPI } from './endpoints.gen';\n\nexport const dashboardAPI = generatedAPI;\nexport const { useCreateDashboardMutation, useUpdateDashboardMutation} = dashboardAPI;\n// eslint-disable-next-line no-barrel-files/no-barrel-files\nexport { type Dashboard } from './endpoints.gen';\n```\n\n----------------------------------------\n\nTITLE: Deleting an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP DELETE request to remove a Grafana organization identified by `:orgId`. This operation requires Basic Authentication and the `orgs:delete` permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/orgs/1 HTTP/1.1\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Structuring Content with Hugo Section Shortcode\nDESCRIPTION: This Hugo shortcode is likely used to define a structural section within the Grafana documentation page, potentially for layout, grouping related content (like the subsequent topics), or navigation purposes within the documentation framework.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/user-management/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< section >}}\n```\n\n----------------------------------------\n\nTITLE: Extracting Prometheus Archive and Changing Directory (Bash)\nDESCRIPTION: This shell command first extracts a Prometheus archive file (matching the pattern 'prometheus-*.tar.gz') using 'tar' and then changes the current working directory to the extracted directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar xvfz prometheus-*.tar.gz\ncd prometheus-*\n```\n\n----------------------------------------\n\nTITLE: Running Grafana in Docker for Plugin Development\nDESCRIPTION: This shell command uses Docker to run Grafana version 7.0.0 in a detached container (`-d`). It maps the host's port 3000 to the container's port 3000 (`-p 3000:3000`), mounts a local directory named `grafana-plugins` (relative to the current working directory `$(pwd)`) to the container's standard plugin path (`/var/lib/grafana/plugins`) using a volume mount (`-v`), and names the container `grafana`. This setup allows plugin development without a local Grafana installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3000:3000 -v \"$(pwd)\"/grafana-plugins:/var/lib/grafana/plugins --name=grafana grafana/grafana:7.0.0\n```\n\n----------------------------------------\n\nTITLE: Generating Prop Documentation with ArgTypes in MDX\nDESCRIPTION: This MDX snippet employs the `ArgTypes` component from Storybook to automatically generate and display a documentation table for the component's properties. It references the imported `SliderProps` type via the `of` prop, allowing Storybook to introspect the type and present details about each prop, such as its name, type, default value, and description, directly within the documentation page.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={SliderProps} />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Text Button with React in Storybook (TSX)\nDESCRIPTION: This snippet exhibits how to use the 'fill=\"text\"' prop on the Button component to produce a text-styled button (no visible background or border) in combination with different sizes. This is rendered inside ExampleFrame in a Storybook MDX. Designers or developers can use this to document and interact with the visual style of text-only buttons in a React design system.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <Button fill=\\\"text\\\" size=\\\"sm\\\" style={{ margin: '5px' }}>\\n    {'Small'}\\n  </Button>\\n  <Button fill=\\\"text\\\" size=\\\"md\\\" style={{ margin: '5px' }}>\\n    {'Medium'}\\n  </Button>\\n  <Button fill=\\\"text\\\" size=\\\"lg\\\" style={{ margin: '5px' }}>\\n    {'Large'}\\n  </Button>\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Dashboard Version by UID in Grafana HTTP API\nDESCRIPTION: This HTTP request retrieves a specific version of a dashboard using both the dashboard UID and version number. It returns complete dashboard configuration data for that version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/id/1/versions/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Using JSON Web Key Set from HTTPS Endpoint\nDESCRIPTION: Configuration for verifying JWT tokens using a JSON Web Key Set loaded from a remote HTTPS endpoint with caching options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n# [auth.jwt]\n# ...\n\njwk_set_url = https://your-auth-provider.example.com/.well-known/jwks.json\n\n# Cache TTL for data loaded from http endpoint.\ncache_ttl = 60m\n```\n\n----------------------------------------\n\nTITLE: Response for Creating Global User\nDESCRIPTION: Example response after successfully creating a new Grafana user, returning the user ID and a success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"id\":5,\"message\":\"User created\"}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Certificate and Key Files for Grafana Configuration (Shell)\nDESCRIPTION: Shows shell commands using `base64` to encode the certificate (`cert.pem`) and private key (`key.pem`) files into Base64 format, saving them as `.base64` files. The `-w0` switch prevents line wrapping, which is typically needed on Linux systems but not macOS. These Base64 strings might be used in certain configuration scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ base64 -w0 key.pem > key.pem.base64\n$ base64 -w0 cert.pem > cert.pem.base64\n```\n\n----------------------------------------\n\nTITLE: Search Users with Paging Response Example (json)\nDESCRIPTION: Depicts the JSON response for a paged user search, including a total count, result users array, and page information. Each user contains properties similar to those from the regular search endpoint, facilitating navigation and pagination in client applications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"totalCount\": 2,\\n  \"users\": [\\n    {\\n      \"id\": 1,\\n      \"name\": \"Admin\",\\n      \"login\": \"admin\",\\n      \"email\": \"admin@mygraf.com\",\\n      \"isAdmin\": true,\\n      \"isDisabled\": false,\\n      \"lastSeenAt\": \"2020-04-10T20:29:27+03:00\",\\n      \"lastSeenAtAge': \"2m\",\\n      \"authLabels\": [\"OAuth\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"name\": \"User\",\\n      \"login\": \"user\",\\n      \"email\": \"user@mygraf.com\",\\n      \"isAdmin\": false,\\n      \"isDisabled\": false,\\n      \"lastSeenAt\": \"2020-01-24T12:38:47+02:00\",\\n      \"lastSeenAtAge\": \"2M\",\\n      \"authLabels\": []\\n    }\\n  ],\\n  \"page\": 1,\\n  \"perPage\": 10\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Humanized Percentage Output\nDESCRIPTION: This shows the example output of applying the `humanizePercentage` function to a query value (e.g., 0.1) within a Grafana alert template, rendering it as a percentage.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n10%\n```\n\n----------------------------------------\n\nTITLE: Representing SQL-like Data for Inner Join (Students Table)\nDESCRIPTION: This Markdown table shows sample data representing a 'Students' table, used as input for an inner join example with SQL-like data. It includes columns for StudentID, Name, and Major.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | Name     | Major            |\n| --------- | -------- | ---------------- |\n| 1         | John     | Computer Science |\n| 2         | Emily    | Mathematics      |\n| 3         | Michael  | Physics          |\n| 4         | Jennifer | Chemistry        |\n```\n\n----------------------------------------\n\nTITLE: Auth Proxy Test\nDESCRIPTION: Runs authentication proxy test scenario\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -c auth_proxy_test\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secret for AWS Secret Access Key (Bash)\nDESCRIPTION: Creates a Docker secret named `aws_secret_access_key` containing the specified AWS Secret Access Key ('topsecret9b78c6'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"topsecret9b78c6\" | docker secret create aws_secret_access_key -\n```\n\n----------------------------------------\n\nTITLE: Including Shared Field Override Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a standard documentation block explaining how to use field overrides to customize settings for specific fields within Grafana visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Email Verification Template with Dynamic Variables - Go Template\nDESCRIPTION: This code snippet is a Go Template used for generating email content for user signup verification in Grafana. It utilizes dynamic variables (e.g., .ConfirmationCode, .Expire, .AppUrl, .Code) that are replaced with actual user-specific values at runtime. Inputs include the confirmation code and expiry time, and output is a message body with these fields substituted. Dependencies: template rendering infrastructure, likely in a Go application or service; it assumes these variables are present in the data context.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/passwordless_verify_new_user.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n[[HiddenSubject .Subject \"Welcome to Grafana, please complete your signup!\"]]\n\nHi,\n\nCopy and paste the email verification code:\n[[.ConfirmationCode]]\ninto the sign up form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. \nAlternatively, you can use the button below to verify your email address. \n\n[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]\n```\n\n----------------------------------------\n\nTITLE: Humanizing Query Value (Dot Notation)\nDESCRIPTION: This Go template uses the `humanize` function to format the numeric value of query 'A' into a more human-readable string (e.g., applying metric prefixes like k, M, G). The value is accessed using dot notation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_9\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ humanize $values.A.Value }}\n```\n\n----------------------------------------\n\nTITLE: Showing Result of 'Labels to Fields' (Rows Mode - Series 1)\nDESCRIPTION: This Markdown table shows the partial output for the first time series when using the 'Labels to fields' transformation in 'Rows' mode. Each label (Server, Datacenter) and its corresponding value are presented as separate rows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n| label      | value    |\n| ---------- | -------- |\n| Server     | Server A |\n| Datacenter | EU       |\n```\n\n----------------------------------------\n\nTITLE: Including Value Mappings Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to value mapping options. It references a specific markdown file (`visualizations/value-mappings-options.md`) from the `grafana` source, ensuring consistency across documentation. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/value-mappings-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dot Context in Go Templates for Grafana - Go Template\nDESCRIPTION: Shows how to print the full context available via dot (\\'.\\') in a Go template, which refers to Notification Data at the start of notification templates or to alert data in annotation/label templates. This snippet depends on the current template context in Grafana; outputs will be the JSON/object exposed at dot. Context-specific interpretation of dot applies when inside constructs like range, with, or included templates.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/language.md#2025-04-23_snippet_1\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ .Alerts }}\n```\n\n----------------------------------------\n\nTITLE: Querying InfluxDB Datacenters for Chained Variables\nDESCRIPTION: This InfluxDB query returns all datacenters for use in a parent variable of a chained variable setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_5\n\nLANGUAGE: influxql\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"datacenter\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboards Section in Grafana Config File - INI\nDESCRIPTION: This snippet shows how to begin a new section for dashboards configuration in the Grafana server's configuration file using INI syntax. The '[dashboards]' section can be used to specify settings such as default home dashboard paths or other dashboard-related server-wide preferences. Ensure this section header is placed appropriately in the main Grafana config file ('grafana.ini'), and adjust indentation as needed for any properties to follow. No parameters appear in this snippet; it is a section header required for specifying subsequent dashboard configuration entries. If present, any entries under this section must be valid according to Grafana's configuration documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/organization-preferences/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[dashboards]\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Notification Message Template using Terraform\nDESCRIPTION: Creates a Grafana notification template group named 'custom_emails' containing a single template named 'custom_email.message'. This template uses Go's templating language (`{{ define ... }}`) to provide custom content ('Lorem ipsum - Custom alert!') for email notifications. Requires replacing the placeholder Terraform resource name (`<terraform_message_template_name>`). Contact points can reference this template to customize their messages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n resource \"grafana_message_template\" \"<terraform_message_template_name>\" {\n     name = \"custom_emails\"\n\n     template = <<EOT\n {{ define \"custom_email.message\" }}\n Lorem ipsum - Custom alert!\n {{ end }}\n EOT\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana UI Library with Yarn\nDESCRIPTION: Command to install the @grafana/ui package using Yarn package manager.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/Intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @grafana/ui\n```\n\n----------------------------------------\n\nTITLE: Fetching Grafana Stats with HTTP GET Request\nDESCRIPTION: Example HTTP GET request to retrieve Grafana statistics including counts of users, organizations, dashboards and other entities.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /api/admin/stats\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Service Account by ID - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet illustrates retrieving a service account via its ID using a GET request. The request must include proper authentication and accept headers. The expected output is a JSON object with detailed service account properties, such as login, orgId, timestamps, avatar URL, and assigned teams.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/serviceaccounts/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"id\": 1,\\n\\t\"name\": \"test\",\\n\\t\"login\": \"sa-test\",\\n\\t\"orgId\": 1,\\n\\t\"isDisabled\": false,\\n\\t\"createdAt\": \"2022-03-21T14:35:33Z\",\\n\\t\"updatedAt\": \"2022-03-21T14:35:33Z\",\\n\\t\"avatarUrl\": \"/avatar/8ea890a677d6a223c591a1beea6ea9d2\",\\n\\t\"role\": \"Viewer\",\\n\\t\"teams\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an External Group to a Team Response Example in JSON\nDESCRIPTION: The JSON response for a successful POST request to add a group, confirming association with the team. Returns a message indicating a successful addition or an error if the group already exists for that team. Only available if the user possesses adequate write permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team_sync.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\\"message\\\":\\\"Group added to Team\\\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Dashboards (Plaintext)\nDESCRIPTION: Defines the `dashboards:create` permission action required to create dashboards within specific folders and their subfolders in Grafana. This action depends on folder-related scopes like `folders:*` and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards:create`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Alternate Wire Injector Syntax Using Panic\nDESCRIPTION: Shows a more concise way to write Wire injectors using panic instead of explicit return statements. This approach reduces boilerplate code while maintaining the same functionality.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc injectFoo() Foo {\n    panic(wire.Build(/* ... */))\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Verification URL Base using Go Template\nDESCRIPTION: This Go template snippet outputs the base URL of the Grafana application (`.AppUrl`). This is used as the prefix for constructing the full email verification link. The `.AppUrl` variable is expected from the Grafana backend context.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_3\n\nLANGUAGE: Go Template\nCODE:\n```\n[[.AppUrl]]\n```\n\n----------------------------------------\n\nTITLE: Wire Injector Function in Go\nDESCRIPTION: Defines an injector function for Wire to use in generating the initialization code for the Event.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//+build wireinject\n\nfunc InitializeEvent() Event {\n    wire.Build(NewEvent, NewGreeter, NewMessage)\n    return Event{}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the EmptyState Component in JSX\nDESCRIPTION: This snippet shows how to customize the `EmptyState` component, specifically the `not-found` variant. It demonstrates adding a secondary action `Button` (e.g., to clear a search), providing a custom `image` (represented by `<AnyReactNode />`), setting a message, and including additional information and a `TextLink` as children.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, EmptyState, TextLink } from '@grafana/ui';\n\n<EmptyState\n  variant=\"not-found\"\n  button={<Button variant=\"secondary\" onClick={clearSearchQuery} />}\n  image={<AnyReactNode />}\n  message=\"No playlists found\"\n  variant=\"not-found\" // Note: Duplicate variant prop in original example\n>\n  Optionally provide some additional information here. Maybe even a link to{' '}\n  <TextLink href=\"<externalDocsLink>\" external>\n    documentation.\n  </TextLink>\n</EmptyState>;\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on Debian 9 (Bash)\nDESCRIPTION: Provides a list of package names that need to be installed on a Debian 9 (Stretch) system to satisfy the dependencies for the Grafana image rendering plugin. These packages supply the required shared libraries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nlibx11 libcairo libcairo2 libxtst6 libxcomposite1 libx11-xcb1 libxcursor1 libxdamage1 libnss3 libcups libcups2 libxss libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libgtk-3-0 libgbm1 libxshmfence1\n```\n\n----------------------------------------\n\nTITLE: Key/Value SQL Query for Template Variables\nDESCRIPTION: SQL query that creates a key/value template variable by returning two columns named __text and __value, allowing for friendly display names with underlying ID values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname __text, id __value FROM host\n```\n\n----------------------------------------\n\nTITLE: Mapping a Static User Role in Grafana Configuration File (.ini)\nDESCRIPTION: This ini code sets the same 'Viewer' role to all users by defining the role_attribute_path. Set skip_org_role_sync to false to ensure organization role mappings are not skipped. No dependencies are required apart from access to modify Grafana's configuration file; changes affect all users regardless of identity provider attributes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = \"'Viewer'\"\nskip_org_role_sync = false\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSourceHttpSettings in a Plugin's ConfigEditor (React/JSX)\nDESCRIPTION: This JSX code demonstrates how to use the DataSourceHttpSettings component within a custom ConfigEditor for a Grafana data source plugin. It passes properties including a default URL, the plugin's configuration, access options visibility, an options change handler, and whether SigV4 authentication is enabled. Dependencies include React, the DataSourceHttpSettings component, and appropriate type definitions for props. The snippet requires the options and onOptionsChange props to be provided, representing the data source configuration and change handler respectively. Inputs are the component props and outputs are the rendered configuration panel. Limitations include the need for Grafana's plugin development context and potentially additional config settings within the editor.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DataSourceSettings/DataSourceHttpSettings.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9090\"\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n        sigV4AuthEnabled={false}\n      />\n\n      {/* Additional configuration settings for your data source plugin.*/}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Grafana Development Environment Directory (Bash)\nDESCRIPTION: This command changes the current working directory to `devenv`. This directory, located within the Grafana repository, contains scripts and configurations for setting up Grafana data sources required for development purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd devenv\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Output Load Test\nDESCRIPTION: Runs load test and sends results to a specified InfluxDB instance\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh  -o influxdb=http://localhost:8086/myDb\n```\n\n----------------------------------------\n\nTITLE: Representing Group Resource Permissions in OpenFGA\nDESCRIPTION: This snippet shows an example OpenFGA tuple granting a specific user ('user:1') the 'read' relation to all resources belonging to the 'dashboard.grafana.app/dashboards' group resource within a namespace. This provides broad access to a category of resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “read”, object:”group_resource:dashboard.grafana.app/dashboards” }\n```\n\n----------------------------------------\n\nTITLE: Generating Props Table in MDX\nDESCRIPTION: Shows how to automatically generate a props table for a component in an MDX file.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Props } from '@storybook/addon-docs/blocks';\nimport { MyComponent } from './MyComponent';\n\n<Props of={MyComponent} />;\n```\n\n----------------------------------------\n\nTITLE: Listing Apache-2.0 Licensed Directories in Grafana Project\nDESCRIPTION: This code block enumerates the directories and their subdirectories that are licensed under Apache-2.0 within the Grafana project. It includes various packages, components, and specific plugin directories.\nSOURCE: https://github.com/grafana/grafana/blob/main/LICENSING.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npackages/grafana-data/\npackages/grafana-e2e-selectors/\npackages/grafana-runtime/\npackages/grafana-ui/\npackaging/\nkinds/\npkg/kinds/\npkg/kindsys/\npkg/registry/schemas/\ngrafana-mixin/\npublic/app/plugins/datasource/tempo\npublic/app/features/explore/TraceView/components\npublic/img/icons/solid/\npublic/img/icons/unicons/\n```\n\n----------------------------------------\n\nTITLE: Defining and Displaying a System Data Frame - Plaintext\nDESCRIPTION: This snippet provides a tabular plaintext representation of a system frame used for storing time-aligned sensor metric data. Columns include labels, timestamp, sensor reading values, and state, each annotated with type and label metadata. This format is leveraged for debugging, documentation, and validation of data structure assumptions during telemetry pipeline development. Inputs are statically defined rows/columns; expected output is an easy-to-read tabular display; no runtime dependencies are required; limitations include absence of dynamic data generation.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.golden.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------------+-------------------------------+------------------+------------------+-----------------+\\n| Name: labels   | Name: time                    | Name: sensor     | Name: sensor2    | Name: state     |\\n| Labels:        | Labels:                       | Labels:          | Labels:          | Labels:         |\\n| Type: []string | Type: []time.Time             | Type: []*float64 | Type: []*float64 | Type: []*string |\\n+----------------+-------------------------------+------------------+------------------+-----------------+\\n| host=A         | 2021-03-22 11:51:30 +0300 MSK | 0                | null             | aaa             |\\n| host=B         | 2021-03-22 11:51:30 +0300 MSK | null             | 0                | bbb             |\\n| host=A         | 2021-03-22 11:51:31 +0300 MSK | null             | 0                | ccc             |\\n| host=B         | 2021-03-22 11:51:31 +0300 MSK | 0                | null             | 1               |\\n+----------------+-------------------------------+------------------+------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Manual Mouse Position Calculation Example\nDESCRIPTION: Shows how to manually calculate mouse position relative to a div element without DraggableManager, demonstrating the convenience that DraggableManager provides.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"DividerDemo--realm\">\n  <div\n    className=\"DividerDemo--divider\"\n    onMouseDown={(event) => {\n      const { clientX, target } = event;\n      const { left, width } = target.getBoundingClientRect();\n      const localX = clientX - left;\n      console.log('within the client area, x:', clientX);\n      console.log('within the div, x:        ', localX);\n      console.log('position along the width: ', localX / width);\n    }}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Escaping Folder Titles in Grafana Alert Provisioning (Markdown)\nDESCRIPTION: This markdown snippet demonstrates how to escape slashes in folder titles within alerting configuration files for Grafana. No external dependencies are needed; it is intended as usage guidance embedded in release note documentation. The section showcases before-and-after examples for folder title formatting, helping users avoid misinterpretation of slashes as folder separators. Inputs are configuration folder titles; outputs are the correctly escaped forms as expected by newer versions of Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\neg. if an alert group contains:\n`folder: folder_with_/_in_title`\nit should become:\n`folder: folder_with_\\/_in_title` Issue [#77450](https://github.com/grafana/grafana/issues/77450)\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics - JSON\nDESCRIPTION: Specifies JSON configuration to enable metrics collection for the Grafana remote rendering service. The metrics.enabled and collectDefaultMetrics booleans control default metrics collection, and requestDurationBuckets lists histogram buckets for Prometheus latency metrics. Requires compatible Grafana service version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"metrics\": {\n      \"enabled\": true,\n      \"collectDefaultMetrics\": true,\n      \"requestDurationBuckets\": [1, 5, 7, 9, 11, 13, 15, 20, 30]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Grafana Plugin Manifest with File Hashes (JSON)\nDESCRIPTION: This JSON snippet defines the metadata for a Grafana data source plugin, including plugin identifier, version, signing info, and SHA256 hashes for associated files. The manifest is intended to be cryptographically signed and verified during plugin installation. Key parameters such as 'signedByOrg', 'plugin', and the files' map must be provided to allow secure management and validation of plugin components.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/nested-plugins/parent/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661172777367,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"a029469ace740e9502bfb0d40924d1cccae73d0b18adcd8f1ceb7f17bf36beb8\",\n    \"nested/plugin.json\": \"e64abd35cd211e0e4682974ad5cdd1be7a0b7cd24951d302a16d9e2cb6cefea4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Codegen Files for Secret API in Grafana\nDESCRIPTION: This command regenerates the codegen files (those prefixed by 'zz_') for the Secret API. These files are not currently using grafana-app-sdk and lack a CUE schema definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/apis/secret/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./hack/update-codegen.sh secret\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Snapshot with Grafana API - Bash\nDESCRIPTION: This curl command triggers the creation of a snapshot in an existing migration session in Grafana. It sends a POST request to the /api/cloudmigration/migration/{sessionUid}/snapshot endpoint, where {sessionUid} must be replaced by an active session ID. Dependencies include curl, valid admin authentication, and an existing migration session. The command does not require body data, and the API returns a snapshot creation result.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \\\"Content-Type: application/json\\\" \\\\\n  http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot\n```\n\n----------------------------------------\n\nTITLE: Defining Provider with Dependencies in Go\nDESCRIPTION: Shows how to create a provider function (ProvideBar) that depends on another type (Foo).\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\n// ...\n\ntype Bar struct {\n    X int\n}\n\n// ProvideBar returns a Bar: a negative Foo.\nfunc ProvideBar(foo Foo) Bar {\n    return Bar{X: -foo.X}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grizzly Contexts for Grafana Instances in Shell\nDESCRIPTION: These shell commands configure two separate Grizzly contexts: `grafana-onprem` for the source Grafana instance and `grafana-cloud` for the destination Grafana Cloud instance. For each context, it sets the output format to JSON, the Grafana instance URL, and the authentication token using environment variables (`$GRAFANA_ENT_INSTANCE_URL`, `$GRAFANA_SOURCE_TOKEN`, `$GRAFANA_CLOUD_INSTANCE_URL`, `$GRAFANA_DEST_TOKEN`). The `grr config use-context` command switches the active context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngrr config create-context grafana-onprem\ngrr config use-context grafana-onprem\ngrr config set output-format json\ngrr config set grafana.url $GRAFANA_ENT_INSTANCE_URL\ngrr config set grafana.token $GRAFANA_SOURCE_TOKEN\n\ngrr config create-context grafana-cloud\ngrr config use-context grafana-cloud\ngrr config set output-format json\ngrr config set grafana.url $GRAFANA_CLOUD_INSTANCE_URL\ngrr config set grafana.token $GRAFANA_DEST_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Field Validation Function (JavaScript)\nDESCRIPTION: Implements an asynchronous validation function simulating backend or service calls for validating field values with react-hook-form. Uses a Promise with setTimeout to mock delay and failure, with error handling reflecting real-world async validation. Requires ValidateResult type/context, and compatibility with field-level async validation in react-hook-form.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nvalidateAsync = (newValue: string) => {\n  try {\n    (await new Promise()) <\n      ValidateResult >\n      ((resolve, reject) => {\n        setTimeout(() => {\n          reject('Something went wrong...');\n        }, 2000);\n      });\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Folders with kubectl - Shell\nDESCRIPTION: This shell command lists Folder custom resources in the current namespace using the configured kubeconfig. The command assumes that the Folder CRD exists in the cluster and that the kubeconfig is properly authenticated.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig=./grafana.kubeconfig get folder\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana E2E Test Server (Shell)\nDESCRIPTION: This shell command starts the Grafana server specifically configured for end-to-end testing. It sets the HTTP listening port to 3000 using an environment variable and executes the 'start-server' script located in './scripts/grafana-server/'. This server instance likely includes the provisioned test plugin needed for the tests.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nPORT=3000 ./scripts/grafana-server/start-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component\nDESCRIPTION: Sets up the Storybook documentation metadata for the Badge component using MDX format.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"MDX|Badge\" component={Badge} />\n```\n\n----------------------------------------\n\nTITLE: Custom URL Load Test\nDESCRIPTION: Runs load test against a custom target URL\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -u http://grafana.loc\n```\n\n----------------------------------------\n\nTITLE: Example URL Link with Time Range Parameters\nDESCRIPTION: An example URL for a Grafana dashboard link that includes the `from` and `to` query parameters to specify a fixed time range (`now-3h` to `now`). This ensures the linked dashboard opens with the desired time context when the link is clicked. This functionality is typically enabled via the 'Include current time range' option when configuring links.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttps://play.grafana.org/d/000000010/annotations?orgId=1&from=now-3h&to=now\n```\n\n----------------------------------------\n\nTITLE: Grafana HTTPS Permission Denied Error - Log\nDESCRIPTION: This log snippet shows a typical Grafana error message when the process fails to access the SSL certificate due to insufficient permissions. It indicates the background HTTP server service stopping and provides the file path and specific error encountered. Ensuring correct group and file permissions resolves this issue.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-https.md#2025-04-23_snippet_11\n\nLANGUAGE: log\nCODE:\n```\nlevel=error msg=\"Stopped background service\" service=*api.HTTPServer reason=\"open /etc/grafana/grafana.crt: permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Grafana Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Grafana documentation page, including description, keywords, labels, title, and cross-reference links.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/query-profile-data.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Explore your profiling data using Profiles Drilldown or the Pyroscope query editor.\nkeywords:\n  - query\n  - profiling\n  - pyroscope\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Query profile data\nmenuTitle: Query profile data\nweight: 400\nrefs:\n  configure-tempo-data-source:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/datasources/tempo/configure-tempo-data-source/\n    - pattern: /docs/grafana-cloud/\n      destination: docs/grafana-cloud/connect-externally-hosted/data-sources/tempo/configure-tempo-data-source/\n  flame-graph:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/\n  explore:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/explore/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/explore/\n  explore-profiles:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/explore/simplified-exploration/profiles/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/simplified-exploration/profiles/\n  explore-profiles-install:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/explore/simplified-exploration/profiles/access/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/simplified-exploration/profiles/access/\n  provisioning-data-sources:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#datasources\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#datasources\n  flame-graph-panel:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/flame-graph/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/flame-graph/\n```\n\n----------------------------------------\n\nTITLE: Checking if Prometheus is in System PATH (Linux/macOS)\nDESCRIPTION: These commands use 'which' to determine the full path of the 'prometheus' and 'promtool' executables if they are found within the directories listed in the system's PATH environment variable. No output indicates they are not in the PATH.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwhich prometheus\nwhich promtool\n```\n\n----------------------------------------\n\nTITLE: Example Static Summary Annotation in Grafana Alerting\nDESCRIPTION: This snippet shows a basic, static text example for the `summary` annotation in a Grafana alert rule. It describes the alert condition without using any dynamic data or templating.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCPU usage has exceeded 80% for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Reading Mute Time Intervals in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to read mute time intervals configured for Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.time-intervals:read`\n```\n\n----------------------------------------\n\nTITLE: Example Response for Updating Grafana Library Element (HTTP/JSON)\nDESCRIPTION: This snippet shows a sample successful HTTP 200 response after updating a Grafana library element. The response body is in JSON format and contains the full details of the updated library element, including its ID, orgId, folder details, UID, updated name, kind, model, incremented version, and metadata like timestamps and creator/updater information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": {\n        \"id\": 28,\n        \"orgId\": 1,\n        \"folderId\": 0,\n        \"folderUid\": \"\",\n        \"uid\": \"nErXDvCkzz\",\n        \"name\": \"Renamed library panel\",\n        \"kind\": 1,\n        \"type\": \"\",\n        \"description\": \"\",\n        \"model\": {\n            \"description\": \"\",\n            \"type\": \"\"\n        },\n        \"version\": 2,\n        \"meta\": {\n            \"folderName\": \"General\",\n            \"folderUid\": \"\",\n            \"connectedDashboards\": 0,\n            \"created\": \"2021-09-30T09:14:22+02:00\",\n            \"updated\": \"2021-09-30T09:25:57.697214+02:00\",\n            \"createdBy\": {\n                \"id\": 1,\n                \"name\": \"admin\",\n                \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n            },\n            \"updatedBy\": {\n                \"id\": 1,\n                \"name\": \"admin\",\n                \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Correlations in Grafana HTTP API\nDESCRIPTION: HTTP request for retrieving all correlations across all data sources. This endpoint supports pagination and filtering by source data source UIDs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /api/datasources/correlations HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Example TraceQL Filter Query\nDESCRIPTION: Example TraceQL query showing duration filter and span name matching using regex operator\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/datasources/tempo-search-traceql.md#2025-04-23_snippet_0\n\nLANGUAGE: traceql\nCODE:\n```\n{duration>5ms && duration<10ms && name=~\"get|log_results_cache\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Lookup User Results - JSON\nDESCRIPTION: This JSON snippet is returned from the /api/org/users/lookup endpoint, containing an array with limited details per user. Fields include userId, login, and avatarUrl, primarily for display in UI selection widgets or permission setting dialogs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"userId\": 1,\\n    \"login\": \"admin\",\\n    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Grafana Container Image on EKS using Kubectl\nDESCRIPTION: Updates the Grafana container image within a Kubernetes deployment named 'my-release' to a specific Grafana Enterprise version. This command requires `kubectl` access to the EKS cluster. Replace `<version>` with the desired Grafana Enterprise version (e.g., 11.3.0). Only Grafana Enterprise versions 8.3.0 and later support AWS Marketplace licenses.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-eks/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl set image deployment/my-release grafana=grafana/grafana-enterprise:<version>\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Service Status (Windows/PowerShell)\nDESCRIPTION: This PowerShell command uses 'sc query' to check the status of the Windows service named 'prometheus'. It helps determine if the Prometheus service is running, stopped, or paused on a Windows system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nsc query prometheus\n```\n\n----------------------------------------\n\nTITLE: Importing CollapsableSection Component\nDESCRIPTION: Import statements for the Storybook documentation and the CollapsableSection component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { CollapsableSection } from './CollapsableSection';\n```\n\n----------------------------------------\n\nTITLE: Representing Time Series Data for Outer Join (Query A)\nDESCRIPTION: This Markdown table shows example time series data from 'Query A', intended as input for an outer join transformation. It includes columns for Time, Job, and Uptime.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Job     | Uptime    |\n| ------------------- | ------- | --------- |\n| 2020-07-07 11:34:20 | node    | 25260122  |\n| 2020-07-07 11:24:20 | postgre | 123001233 |\n| 2020-07-07 11:14:20 | postgre | 345001233 |\n```\n\n----------------------------------------\n\nTITLE: Querying Owner for a Specific Dependency - Bash CLI Example\nDESCRIPTION: This command fetches the assigned owner of a specific dependency and version from go.mod using the Modowners tool. It requires including the dependency in the format 'dependency@version'. Dependencies are the modowners.go script, Go, and a properly formatted go.mod. Output is a single owner team identifier, or empty if unassigned.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run scripts/modowners/modowners.go owners -d cloud.google.com/go/storage@v1.30.1 go.mod\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Grafana Trace Custom Queries (Markdown)\nDESCRIPTION: Demonstrates the syntax for using variables in custom queries by wrapping them in ${} notation, with examples showing how to access span properties and tags.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo use a variable you need to wrap it in `${}`. For example: `${__span.name}`.\n```\n\n----------------------------------------\n\nTITLE: Representing Labeled Time Series Input (Series 3)\nDESCRIPTION: This Markdown table presents sample time series data for 'series3' including labels (what=\"Speed\", cluster=\"B\", job=\"J1\"). This data is used as input in the 'Join by labels' transformation example.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n| Time | Value |\n| ---- | ----- |\n| 22   | 22    |\n| 28   | 77    |\n```\n\n----------------------------------------\n\nTITLE: Managing Precommit Hooks with Lefthook\nDESCRIPTION: Commands for installing and uninstalling precommit hooks using Lefthook\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake lefthook-install\nmake lefthook-uninstall\n```\n\n----------------------------------------\n\nTITLE: Checking Symbolic Link Setup - Shell\nDESCRIPTION: Demonstrates verifying the correct setup of the GOROOT/src directory for the grafana repository using shell commands. It lists the current working directory and displays symbolic links to ensure the project points to the proper location. This is necessary for ensuring the code generation scripts locate files correctly. The commands expect the user to have the correct filesystem structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/hack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n❯ pwd\n/Users/ryan/go/src/github.com/grafana\n❯ ls -l\ntotal 0\nlrwxr-xr-x  1 ryan  staff  37 Oct  5 09:34 grafana -> /Users/ryan/workspace/grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Special Value Functions in Grafana Expressions\nDESCRIPTION: Illustrates functions that return single special values: `inf` (positive infinity), `infn` (negative infinity), `nan` (Not a Number), and `null`. Primarily used for testing purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_13\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\ninf()\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\ninfn()\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nnan()\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nnull()\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on CentOS 7 (Bash)\nDESCRIPTION: Lists the package names needed on a minimal CentOS 7 installation for the Grafana image rendering plugin to function correctly. These packages provide essential libraries for the embedded Chromium browser.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlibXcomposite libXdamage libXtst cups libXScrnSaver pango atk adwaita-cursor-theme adwaita-icon-theme at at-spi2-atk at-spi2-core cairo-gobject colord-libs dconf desktop-file-utils ed emacs-filesystem gdk-pixbuf2 glib-networking gnutls gsettings-desktop-schemas gtk-update-icon-cache gtk3 hicolor-icon-theme jasper-libs json-glib libappindicator-gtk3 libdbusmenu libdbusmenu-gtk3 libepoxy liberation-fonts liberation-narrow-fonts liberation-sans-fonts liberation-serif-fonts libgusb libindicator-gtk3 libmodman libproxy libsoup libwayland-cursor libwayland-egl libxkbcommon m4 mailx nettle patch psmisc redhat-lsb-core redhat-lsb-submod-security rest spax time trousers xdg-utils xkeyboard-config alsa-lib\n```\n\n----------------------------------------\n\nTITLE: Extracting Instance Names from Prometheus Metrics with Regex\nDESCRIPTION: A regular expression for Prometheus metrics that extracts only the instance names from the full metric string, making the variable options cleaner and more readable.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_11\n\nLANGUAGE: regex\nCODE:\n```\n/.*instance=\"([^\"]*).*/\n\n```\n\n----------------------------------------\n\nTITLE: Importing Grafana Enterprise Reports via API in Shell\nDESCRIPTION: This shell command processes the `reports.json` file (containing exported reports) using `jq` to extract each report object individually. It then iterates through each JSON object (`while read -r json`), using `curl` to send an HTTP POST request for each report to the `/api/reports` endpoint of the destination Grafana Cloud instance (`$GRAFANA_CLOUD_INSTANCE_URL`). Authentication is done via a Bearer token (`$GRAFANA_DEST_TOKEN`), and the content type is set to `application/json`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njq -M -r -c '.[]' < reports.json | while read -r json; do curl -XPOST ${GRAFANA_CLOUD_INSTANCE_URL}/api/reports -H\"Authorization: Bearer $GRAFANA_DEST_TOKEN\" -d\"$json\" -H 'Content-Type: application/json'; done\n```\n\n----------------------------------------\n\nTITLE: Disabling Basic Authentication in Grafana\nDESCRIPTION: Configuration snippet to disable Grafana's built-in basic authentication system. This setting can be used when implementing alternative authentication methods.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[auth.basic]\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: Example Response for Updating a User in an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) after updating a user's role within a Grafana organization. The JSON response body confirms the update.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization user updated\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting Snapshot by deleteKey via Grafana HTTP API (HTTP)\nDESCRIPTION: Describes the unauthenticated GET request for deleting a snapshot using the secret deleteKey. Used for public or external deletion scenarios where bearer token is not available. Ensures snapshot can be removed if the delete key is known.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/snapshot.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /api/snapshots-delete/XXXXXXX HTTP/1.1\\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Receiving Current User Preferences Response - JSON\nDESCRIPTION: This is a sample JSON HTTP response returned after querying user preferences. The response includes theme, dashboard, timezone, and other settings, with some fields allowed to be null or empty depending on the user's configuration. Expected input is a corresponding successful HTTP GET; output is structured JSON suitable for client consumption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"theme\": \"\",\\n    \"homeDashboardId\": 217,\\n    \"homeDashboardUID\": \"jcIIG-07z\",\\n    \"timezone\": \"utc\",\\n    \"weekStart\": \"\",\\n    \"navbar\": {\\n        \"bookmarkUrls\": null\\n    },\\n    \"queryHistory\": {\\n        \"homeTab\": \"\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Monitor Legend Pattern Examples\nDESCRIPTION: Examples of how to format dimension values in Azure Monitor legend aliases.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndimension: {{dimensionvalue}}\n```\n\n----------------------------------------\n\nTITLE: Example Annotation Output with Query Value\nDESCRIPTION: This shows the rendered output of the previous Go template examples for alert annotations. It displays a static message combined with the dynamic query value (81.2345) that triggered the alert.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCPU usage has exceeded 80% (81.2345) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Displaying TextArea Props Documentation in JSX\nDESCRIPTION: This code renders the documentation for the TextArea component's props using Storybook's ArgTypes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={TextArea} />\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom CA Certificate to Trust Store on Windows (Shell)\nDESCRIPTION: Demonstrates using the `certutil` command on Windows to add a custom root CA certificate (`internal-root-ca.crt.pem`) to the system's Root Certification Authorities store. This makes the certificate trusted by applications like Chromium that use the Windows certificate store.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncertutil –addstore \"Root\" <path>/internal-root-ca.crt.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the project's dependencies, which are typically defined in a `package.json` file. Running this command is a prerequisite before executing build tasks.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Uninstalling the Grafana Deployment via Helm - Bash\nDESCRIPTION: This command uninstalls the specified Grafana Helm release ('my-grafana') from the 'monitoring' namespace, removing associated Kubernetes objects. Assumes Helm 3 and proper access rights. Release and namespace names must be matched to the actual deployment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall my-grafana -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Root URL in Grafana INI (INI)\nDESCRIPTION: Sets the public root URL for the Grafana instance, ensuring license validation works by matching the license URL to the server root. This property must reflect the actual external URL used by clients. It accepts full URLs with protocol and trailing slash. The setting is required for correct license verification and should not use localhost or contain wildcards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[server]\\nroot_url = https://grafana.example.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block defines metadata for the documentation page. It includes aliases for redirects, a description, search keywords, product applicability labels (cloud, enterprise, oss), menu and page titles, display weight, and internal reference link mappings for 'heatmap' and 'histogram' documentation sections, ensuring links adapt based on the Grafana version context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-histograms/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - ../basics/intro-histograms/\n  - ../getting-started/intro-histograms/\ndescription: An introduction to histograms and heatmaps\nkeywords:\n  - grafana\n  - heatmap\n  - panel\n  - documentation\n  - histogram\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\nmenuTitle: Histograms and heatmaps\ntitle: Introduction to histograms and heatmaps\nweight: 650\nrefs:\n  heatmap:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/heatmap/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/heatmap/\n  histogram:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/\n---\n```\n\n----------------------------------------\n\nTITLE: Representing Typed Resource Subresource Permissions using Context Filter in OpenFGA\nDESCRIPTION: This example shows how to grant access to subresources of typed resources (like folders) which only have an ID, not a name. It uses the 'resource_read' relation on the typed resource object (e.g., 'folder:<uid>') and specifies the target subresource within the 'context' using a 'subresource_filter'. This distinguishes subresource access from direct resource access.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “resource_read”, object:”folder:<uid>” }\ncontext: { \"subresource_filter\": [\"folder.grafana.app/folders/<subresource>\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana UI Library with NPM\nDESCRIPTION: Command to install the @grafana/ui package using NPM package manager.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/Intro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @grafana/ui\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and FeatureBadge Dependencies in React (TypeScript)\nDESCRIPTION: This snippet imports the Meta and ArgTypes utilities from Storybook\\'s blocks module, as well as the FeatureBadge React component for documentation setup. Dependencies required are @storybook/blocks and the local FeatureBadge module. These imports are prerequisites for rendering component documentation and argument tables in Storybook.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FeatureBadge/FeatureBadge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { FeatureBadge } from './FeatureBadge';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Service URL with Minikube (Bash)\nDESCRIPTION: Uses the `minikube service` command to obtain the accessible URL for the 'grafana' service within the 'my-grafana' namespace. This command automatically opens the URL in a browser and prints the URL, assuming the service is configured with `type: LoadBalancer`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nminikube service grafana --namespace=my-grafana\n```\n\n----------------------------------------\n\nTITLE: Example Output of Basic Alert Name List in Grafana Templates - template_output\nDESCRIPTION: This snippet is the rendered output when the custom message template is executed with alert data. It displays the list of alert names as plain text, suitable for Slack, Email, or other notification channels. It assumes at least two alerts (\"InstanceDown\" and \"CpuOverload\") in the notification.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_4\n\nLANGUAGE: template_output\nCODE:\n```\nThe name of the alert is InstanceDown\n\nThe name of the alert is CpuOverload\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Visualizations for Grafana Actions using Hugo Shortcode\nDESCRIPTION: This snippet utilizes the Hugo `column-list` shortcode to present a list of Grafana visualization types that support the Actions feature for triggering API calls. Each list item includes a reference link (`ref:`) to the corresponding visualization documentation. This relies on the Hugo static site generator and the availability of the `column-list` shortcode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-data-links/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< column-list >}}\n\n- [Bar chart](ref:bar-chart)\n- [Candlestick](ref:candlestick)\n- [State timeline](ref:state-timeline)\n- [Status history](ref:status-history)\n- [Table](ref:table)\n- [Time series](ref:time-series)\n- [Trend](ref:trend)\n- [XY chart](ref:xy-chart)\n\n{{< /column-list >}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metric Encyclopedia Experimental Feature\nDESCRIPTION: This feature toggle, `prometheusMetricEncyclopedia`, when enabled, activates an experimental Prometheus metric encyclopedia within the query builder. This feature replaces the standard metric dropdown with a paginated, searchable, and filterable interface, enhancing the experience of browsing large numbers of Prometheus metrics.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-5.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprometheusMetricEncyclopedia\n```\n\n----------------------------------------\n\nTITLE: nginx Rewrite Rule for Sub Path - Nginx\nDESCRIPTION: A simple rewrite directive for use in nginx location blocks to strip the /grafana/ prefix from URLs before forwarding to the backend. Add this line inside the relevant nginx location sections to ensure correct path mapping when serving Grafana from a sub path. Critical for proper resource and API routing in proxied sub path deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n rewrite  ^/grafana/(.*)  /$1 break;\n```\n\n----------------------------------------\n\nTITLE: Example Test Output\nDESCRIPTION: Sample output showing test execution metrics and results\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n          /\\      |‾‾|  /‾‾/  /‾/\n     /\\  /  \\     |  |_/  /  / /\n    /  \\/    \\    |      |  /  ‾‾\\\n   /          \\   |  |‾\\  \\ | (_) |\n  / __________ \\  |__|  \\__\\ \\___/ .io\n\n  execution: local\n     output: -\n     script: src/auth_token_test.js\n\n    duration: 15m0s, iterations: -\n         vus: 2,     max: 2\n\n    done [==========================================================] 15m0s / 15m0s\n\n    █ user auth token test\n\n      █ user authenticates through ui with username and password\n\n        ✓ response status is 200\n        ✓ response has cookie 'grafana_session' with 32 characters\n\n      █ batch tsdb requests\n\n        ✓ response status is 200\n\n    checks.....................: 100.00% ✓ 32844 ✗ 0\n    data_received..............: 411 MB  457 kB/s\n    data_sent..................: 12 MB   14 kB/s\n    group_duration.............: avg=95.64ms  min=16.42ms  med=94.35ms  max=307.52ms p(90)=137.78ms p(95)=146.75ms\n    http_req_blocked...........: avg=1.27ms   min=942ns    med=610.08µs max=48.32ms  p(90)=2.92ms   p(95)=4.25ms\n    http_req_connecting........: avg=1.06ms   min=0s       med=456.79µs max=47.19ms  p(90)=2.55ms   p(95)=3.78ms\n    http_req_duration..........: avg=58.16ms  min=1ms      med=52.59ms  max=293.35ms p(90)=109.53ms p(95)=120.19ms\n    http_req_receiving.........: avg=38.98µs  min=6.43µs   med=32.55µs  max=16.2ms   p(90)=64.63µs  p(95)=78.8µs\n    http_req_sending...........: avg=328.66µs min=8.09µs   med=110.77µs max=44.13ms  p(90)=552.65µs p(95)=1.09ms\n    http_req_tls_handshaking...: avg=0s       min=0s       med=0s       max=0s       p(90)=0s       p(95)=0s\n    http_req_waiting...........: avg=57.79ms  min=935.02µs med=52.15ms  max=293.06ms p(90)=109.04ms p(95)=119.71ms\n    http_reqs..................: 34486   38.317775/s\n    iteration_duration.........: avg=1.09s    min=1.81µs   med=1.09s    max=1.3s     p(90)=1.13s    p(95)=1.14s\n    iterations.................: 1642    1.824444/s\n    vus........................: 2       min=2   max=2\n    vus_max....................: 2       min=2   max=2\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UsersIndicator Component in React\nDESCRIPTION: This snippet demonstrates how to import the UsersIndicator component from @grafana/ui and use it in a React component. It shows how to pass user data and set a limit for displayed users.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UsersIndicator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { UsersIndicator } from '@grafana/ui';\n\nconst users = [\n  {\n    user: {\n      name: 'John Smith',\n      avatarUrl: 'https://example.com/avatar.png',\n    },\n    lastActiveAt: '2023-04-18T15:00:00.000Z',\n  },\n  {\n    user: {\n      name: 'Jane Doe',\n      avatarUrl: 'https://example.com/avatar.png',\n    },\n    lastActiveAt: '2023-04-17T10:00:00.000Z',\n  },\n  {\n    user: {\n      name: 'Bob Johnson',\n      avatarUrl: 'https://example.com/avatar.png',\n    },\n    lastActiveAt: '2023-04-16T08:00:00.000Z',\n  },\n];\n\nconst ExampleComponent = () => {\n  return (\n    <div>\n      <UsersIndicator users={users} limit={2} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Swagger Version with Bingo\nDESCRIPTION: These bash commands show how to update the Swagger version using Bingo, which is recommended if there are issues generating the specifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/bwplotka/bingo@latest\nbingo get github.com/go-swagger/go-swagger/cmd/swagger@v0.30.2\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Directory in Shell\nDESCRIPTION: These shell commands create a new directory named `grafana-migration` and then change the current working directory into the newly created folder. This is done to organize the files generated during the migration process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir grafana-migration\ncd grafana-migration\n```\n\n----------------------------------------\n\nTITLE: Enabling Preserve Host Header in IIS Proxy via Windows CMD\nDESCRIPTION: Sets the preserveHostHeader flag in the IIS proxy settings to true using the appcmd.exe tool from a Windows command prompt. This is required for Grafana versions greater than 8.3.5, so IIS forwards the original host header to the backend, enabling proper CSRF and CORS validation. Requires administrative privileges. Input: None. Output: Updated IIS configuration for correct reverse proxy behavior. Dependency: IIS with Application Request Routing installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n%windir%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/proxy -preserveHostHeader:true /commit:apphost\n```\n\n----------------------------------------\n\nTITLE: Checking for Invalid Data Source UIDs in Grafana with curl and jq\nDESCRIPTION: A curl command that fetches all data sources from the Grafana API and uses jq to filter those with invalid UIDs. This helps identify data sources that will be affected by the new UID format enforcement in Grafana v11.2 and later.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.2/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/api/datasources | jq '.[] | select((.uid | test(\"^[a-zA-Z0-9\\\\-_]+$\") | not) or (.uid | length > 40)) | {id, uid, name, type}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Instance CPU Usage Test Dataset (CSV within Markdown)\nDESCRIPTION: This snippet defines sample CSV content used as a test data source within Grafana's TestData plugin, simulating multiple server instances and associated CPU usage metrics. The CSV is intended for use in a test alert rule configuration, with each row representing an alert instance based on the region, service, and instance fields. The data must be pasted into Grafana's 'CSV Content' scenario of the TestData data source; it outputs four distinct time series to drive alert evaluation, and is a prerequisite for testing the notification templating features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_5\n\nLANGUAGE: CSV\nCODE:\n```\nregion,cpu-usage,service,instance\nus-west,88,web-server-1,server-01\nus-west,81,web-server-1,server-02\nus-east,79,web-server-2,server-03\nus-east,52,web-server-2,server-04\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack with Docker Compose - Bash\nDESCRIPTION: This snippet launches the Grafana stack in detached mode using the Docker Compose plugin for Docker CLI (v2+). You must have Docker and Docker Compose installed and configured. It downloads necessary images and starts required services (Grafana, Prometheus, Loki) in the background. Input: None; Output: Containers running in detached mode; any port conflicts result in errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Metadata using MDX\nDESCRIPTION: Uses the Storybook `Meta` component within an MDX file to configure the documentation page. It sets the title that appears in the Storybook navigation ('MDX|Space') and associates the documentation with the imported `Space` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|Space\" component={Space} />\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds a YouTube video into the Grafana documentation page. The 'id' parameter specifies the unique YouTube video identifier ('59uCGJN5hPI') to be displayed. This is used to provide supplementary video content related to user and permission management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/user-management/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"59uCGJN5hPI\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example: Decrypting an Age-Encrypted Support Bundle (Bash)\nDESCRIPTION: This is a specific example command for decrypting an encrypted Grafana support bundle using the 'age' tool. It uses the private key stored in `key.txt` to decrypt the file `af6684b4-d613-4b31-9fc3-7cb579199bea.tar.gz.age` and saves the decrypted archive as `data.tar.gz`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/troubleshooting/support-bundles/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nage --decrypt -i key.txt -o data.tar.gz af6684b4-d613-4b31-9fc3-7cb579199bea.tar.gz.age\n```\n\n----------------------------------------\n\nTITLE: Error Message for InterfaceValue Usage in Go Wire Framework\nDESCRIPTION: Error message from the Google Wire dependency injection framework indicating incorrect usage of the InterfaceValue function. The error specifies that the first argument to InterfaceValue must be a pointer to an interface type, but a string was provided instead.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceValueInvalidArg0/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: first argument to InterfaceValue must be a pointer to an interface type; found string\n```\n\n----------------------------------------\n\nTITLE: Including Shared Panel Options Documentation via Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds shared content related to Grafana panel options into the current document. It specifies the lookup path (`visualizations/panel-options.md`), the source project (`grafana`), and includes a version placeholder (`<GRAFANA_VERSION>`) for context-specific documentation inclusion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/panel-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapse Component in React JSX\nDESCRIPTION: Example showing how to use the Collapse component with React useState hook for managing the open/closed state. The component accepts label, isOpen, and onToggle props, with the ability to wrap child content that can be shown or hidden.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/Collapse.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [isOpen, setIsOpen] = useState(false);\n\n<Collapse label=\"Collapse panel\" isOpen={isOpen} onToggle={() => setIsOpen(!isOpen)}>\n  <p>Panel data</p>\n</Collapse>;\n```\n\n----------------------------------------\n\nTITLE: Using Grafana Variables in TestData CSV Metric Values\nDESCRIPTION: This snippet demonstrates using Grafana's variable syntax within the 'String Input' field for the TestData data source's 'CSV Metric Values' scenario. It dynamically inserts values from the columns '1980', '2000', and '2020' of the selected source data row into the target query, typically for generating graph data points.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${1980},${2000},${2020}\n```\n\n----------------------------------------\n\nTITLE: Rendering TagList Example in JSX\nDESCRIPTION: This snippet demonstrates how to render an example of the TagList component using Storybook's Canvas component. It references the 'List' story from TagListStories.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={TagListStories.List} />\n```\n\n----------------------------------------\n\nTITLE: Receiving Success Response After User Preferences Update - JSON\nDESCRIPTION: Sample HTTP response confirming that the user preferences have been updated successfully. The message is returned as JSON and is typically expected after a valid PUT or PATCH operation. Response is succinct and indicates success without additional fields.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Preferences updated\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Playlist via Grafana HTTP API\nDESCRIPTION: Sends a GET request to `/api/playlists/:uid` to retrieve a specific playlist identified by its unique ID (UID). Requires an `Authorization` header with a bearer token. Returns a JSON object containing the playlist details, including its items.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/playlists/1 HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"uid\" : \"1\",\n  \"name\": \"my playlist\",\n  \"interval\": \"5m\",\n  \"items\": [\n    {\n      \"id\": 1,\n      \"playlistUid\": \"1\",\n      \"type\": \"dashboard_by_uid\",\n      \"value\": \"3\",\n      \"order\": 1,\n      \"title\":\"my third dashboard\"\n    },\n    {\n      \"id\": 2,\n      \"playlistUid\": \"1\",\n      \"type\": \"dashboard_by_tag\",\n      \"value\": \"myTag\",\n      \"order\": 2,\n      \"title\":\"my other dashboard\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Notification Routing Diagram using Hugo Figure Shortcode\nDESCRIPTION: Uses the Hugo 'figure' shortcode to embed a diagram illustrating how the notification policy tree routes alerts by matching alert labels to the appropriate notification policy. The snippet specifies the image source path, maximum display width, and alternative text for accessibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/alerting/notification-routing.png\" max-width=\"750px\" alt=\"A diagram displaying how the notification policy tree routes alerts\" >}}\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Using a PEM-Encoded Key File\nDESCRIPTION: Configuration for verifying JWT tokens using a single cryptographic key loaded from a PEM-encoded file with optional Key ID specification.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nkey_file = /path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Adding or Updating Go Dependencies with Go Modules\nDESCRIPTION: Commands for adding or updating Go dependencies using Go modules. The example shows how to update to the latest or a specific version of a package and mentions the importance of committing dependency files.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get example.com/some/module/pkg\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana systemd Unit File - Shell\nDESCRIPTION: Creates an empty file for the Grafana systemd service unit at '/etc/systemd/system/grafana-server.service' using 'touch'. Prepares for manual entry of service configuration. Requires: sudo, touch installed. Output: empty file created at target location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/systemd/system/grafana-server.service\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Grafana 8.2.0-beta1 Release Notes\nDESCRIPTION: YAML configuration at the top of the Markdown file that defines build settings, labels for product editions, and the title of the release notes document.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-0-beta1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.2.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Device Scale Factor - JSON\nDESCRIPTION: Defines rendering.maxDeviceScaleFactor to cap the maximum DPI (device scale factor) for renders. This ensures requests do not overload the renderer with very high-resolution requirements.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"maxDeviceScaleFactor\": 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering LoadingPlaceholder in React with JSX\nDESCRIPTION: This code snippet demonstrates how to render the LoadingPlaceholder React component with the 'text' prop set to display a custom loading message. The component is intended to alert users that an operation is in progress, and can be configured with various text values as required. No additional dependencies are needed beyond the LoadingPlaceholder component itself; the expected input is a 'text' string prop. The output is a loading UI element rendered in a React application.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingPlaceholder/LoadingPlaceholder.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LoadingPlaceholder text=\\\"Loading...\\\" />\n```\n\n----------------------------------------\n\nTITLE: Displaying Grafana Version and Year in Footer using Go Template\nDESCRIPTION: Renders a footer line using Go template syntax within Grafana. It accesses the `.BuildVersion` variable (presumably available in the template's execution context) to display the specific Grafana build version. It also uses the built-in `now` variable piped to the `date` function with the Go layout '2006' to display the current year.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/partials/layout/default.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go Template\nCODE:\n```\nSent by Grafana v[[.BuildVersion]] (c) [[now | date \"2006\"]] Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Browser Arguments - JSON\nDESCRIPTION: Lists extra browser launch arguments in JSON configuration under rendering.args. Each string in the array represents a command-line switch to alter headless browser startup for rendering tasks. Useful for advanced tuning or working around containerization restrictions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"args\": [\n      \"--no-sandbox\",\n      \"--disable-setuid-sandbox\",\n      \"--disable-dev-shm-usage\",\n      \"--disable-accelerated-2d-canvas\",\n      \"--disable-gpu\",\n      \"--window-size=1280x758\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana E2E Test Server\nDESCRIPTION: Starts the Grafana end-to-end (e2e) test server, specifically configured to load provisioned test plugins. It runs the server on port 3000 by setting the PORT environment variable and executing the start script located at `./scripts/grafana-server/start-server`.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nPORT=3000 ./scripts/grafana-server/start-server\n```\n\n----------------------------------------\n\nTITLE: Importing TextArea Component and Related Stories in JavaScript\nDESCRIPTION: This snippet shows the import statements for the TextArea component, related stories, and other necessary components for documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas } from '@storybook/blocks';\nimport { Field } from '../Forms/Field';\nimport { TextArea } from './TextArea';\nimport * as TextAreaStories from './TextArea.story';\nimport { ExampleFrame } from '../../utils/storybook/ExampleFrame';\n```\n\n----------------------------------------\n\nTITLE: Grafana Documentation Frontmatter Configuration\nDESCRIPTION: This YAML block defines metadata for the documentation page, including aliases for redirection, a brief description, product labels (cloud, enterprise, oss), menu title, page title, display weight, and reference links (`refs`) for various visualization types. The `refs` section maps short names (like 'table', 'histogram') to actual documentation paths, potentially varying based on Grafana version or deployment type (oss vs cloud).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - ../panels/\n  - ../panels/configure-thresholds/\n  - ../panels/specify-thresholds/about-thresholds/\n  - ../panels/specify-thresholds/add-a-threshold/\n  - ../panels/specify-thresholds/add-threshold-to-graph/\n  - ../panels/specify-thresholds/delete-a-threshold/\n  - ../panels/thresholds/\ndescription: Configure thresholds in your visualizations\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\nmenuTitle: Configure thresholds\ntitle: Configure thresholds\nweight: 100\nrefs:\n  table:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/table/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/table/\n  histogram:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/histogram/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/histogram/\n  bar-chart:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/bar-chart/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/bar-chart/\n  time-series:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/time-series/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/time-series/\n  trend:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/trend/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/trend/\n  geomap:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/geomap/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/geomap/\n  stat:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/stat/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/stat/\n  state-timeline:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/state-timeline/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/state-timeline/\n  gauge:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/gauge/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/gauge/\n  bar-gauge:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/bar-gauge/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/bar-gauge/\n  canvas:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/canvas/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/canvas/\n  candlestick:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/candlestick/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/candlestick/\n  status-history:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/panels-visualizations/visualizations/status-history/\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana-cloud/visualizations/panels-visualizations/visualizations/status-history/\n---\n```\n\n----------------------------------------\n\nTITLE: Selecting All Fields in InfluxQL\nDESCRIPTION: SQL query to select all fields from a specified measurement in InfluxQL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM <measurement_name>\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables for OpenTSDB Distributed Queries\nDESCRIPTION: Illustrates the `:distributed` format option, specifically for OpenTSDB. It formats multi-value variables by joining them with the variable name, like `'value1,variable_name=value2'`. The example shows `['test1', 'test2']` interpolated as `'test1,servers=test2'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:distributed}'\nInterpolation result: 'test1,servers=test2'\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server Using Binary - Shell\nDESCRIPTION: Starts the Grafana server manually with a specified homepath using the standalone binary. Useful for initial setup and to auto-create required directories. Requires: extracted Grafana binaries, executable permission, shell access. No inputs; this command blocks until interrupted. Output: Grafana process runs until stopped (e.g., with CTRL+C).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/grafana/bin/grafana-server --homepath /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana License Validation via Environment Variable (Shell)\nDESCRIPTION: This snippet demonstrates setting the `GF_ENTERPRISE_LICENSE_VALIDATION_TYPE` environment variable to `aws`. This serves as an alternative to modifying the `grafana.ini` file, instructing Grafana Enterprise to use AWS License Manager for license validation. This method is commonly preferred in containerized or orchestrated deployments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/activate-aws-marketplace-license/activate-license-on-instance-outside-aws/index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nGF_ENTERPRISE_LICENSE_VALIDATION_TYPE=aws\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response for Grafana Role Creation/Update\nDESCRIPTION: Illustrates a successful HTTP 200 OK response from the Grafana Access Control API after creating or updating a custom role. The JSON body includes details like the role's UID, version, name, description, permissions, and timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"version\": 2,\n    \"uid\": \"jZrmlLCGka\",\n    \"name\": \"custom:delete:create:roles\",\n    \"displayName\": \"custom delete create roles\",\n    \"description\": \"My custom role which gives users permissions to delete and create roles\",\n    \"group\":\"My Group\",\n    \"displayName\": \"My Custom Role\",\n    \"global\": false,\n    \"permissions\": [\n        {\n            \"action\": \"roles:delete\",\n            \"scope\": \"permissions:type:delegate\",\n            \"updated\": \"2021-05-13T23:19:46+02:00\",\n            \"created\": \"2021-05-13T23:19:46+02:00\"\n        }\n    ],\n    \"updated\": \"2021-05-13T23:20:51.416518+02:00\",\n    \"created\": \"2021-05-13T23:19:46+02:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching E2E Tests with Custom Backend URL using Shell\nDESCRIPTION: Demonstrates how to run end-to-end tests against a specific Grafana instance by setting the BASE_URL environment variable before invoking the yarn e2e command. Requires a running Grafana instance at the specified URL and yarn installed in the development environment. The BASE_URL parameter directs tests to the remote instance, and the command runs all E2E scripts as defined in the project's configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e-core.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nBASE_URL=http://172.0.10.2:3333 yarn e2e\n```\n\n----------------------------------------\n\nTITLE: Viewing Grafana Log Warning for Running Allowed Unsigned Plugins (Bash)\nDESCRIPTION: This log message appears when Grafana successfully loads an unsigned plugin because the configuration explicitly permits it via the `allow_loading_unsigned_plugins` setting. It serves as a warning that a potentially risky operation is occurring.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nWARN[06-01|16:45:59] Running an unsigned plugin   pluginID=<plugin id>\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers and Frontmatter Configuration\nDESCRIPTION: Markdown frontmatter configuration specifying page metadata including title, menu title, description, weight and keywords for the traces to profiles documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/pyroscope/configure-traces-to-profiles.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Configure traces to profiles\nmenuTitle: Configure traces to profiles\ndescription: Learn how to configure the traces to profiles integration in Grafana and Grafana Cloud.\nweight: 300\nkeywords:\n  - continuous profiling\n  - tracing\n---\n```\n\n----------------------------------------\n\nTITLE: Folder Update Version Mismatch Error Response\nDESCRIPTION: Example HTTP error response (412 Precondition Failed) when attempting to update a folder that has been modified by someone else, indicated by a version mismatch.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 412 Precondition Failed\nContent-Type: application/json; charset=UTF-8\nContent-Length: 97\n\n{\n  \"message\": \"The folder has been changed by someone else\",\n  \"status\": \"version-mismatch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing User Password using cURL Script (Bash)\nDESCRIPTION: Provides a Bash script example using cURL to change a user's password (specifically the Admin user) via the Grafana API. It sends a PUT request with Basic Authentication embedded in the URL and a JSON payload containing `oldPassword`, `newPassword`, and `confirmNew` fields to the `/api/user/password` endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\n  \"oldPassword\": \"oldpass\",\n  \"newPassword\": \"newpass\",\n  \"confirmNew\": \"newpass\"\n}' http://admin:oldpass@<your_grafana_host>:3000/api/user/password\n```\n\n----------------------------------------\n\nTITLE: Exporting Grafana Playlists via API in Shell\nDESCRIPTION: This shell script first creates a directory named `playlists`. It then uses `curl` to fetch a list of all playlist UIDs from the source Grafana instance's `/api/playlists` endpoint, authenticating with `$GRAFANA_SOURCE_TOKEN`. The `jq` command extracts each UID. A `while` loop then iterates through each UID, using `curl` again to fetch the full details for that specific playlist (`/api/playlists/$uid`) and saves the JSON response to a file named after the UID within the `playlists` directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmkdir playlists\ncurl \"${GRAFANA_ONPREM_INSTANCE_URL}/api/playlists\" \\\n -H \"Authorization: Bearer $GRAFANA_SOURCE_TOKEN\" \\\n | jq -M -r -c '.[] | .uid' \\\n | while read -r uid; do \\\n curl \"${GRAFANA_ONPREM_INSTANCE_URL}/api/playlists/$uid\" \\\n     -H \"Authorization: Bearer $GRAFANA_SOURCE_TOKEN\" \\\n     > playlists/$uid.json; \\\n done\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Role in Grafana RBAC API\nDESCRIPTION: Makes a GET request to retrieve details of a specific role by its UID. Requires the 'roles:read' action on 'roles:*' scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/roles/PYnDO3rMk\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing Reduced Range Query Value\nDESCRIPTION: This Go template snippet demonstrates accessing the result of a reduce expression (with Ref ID 'B') applied to a range query. The `$values` variable holds the output of the reduction.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_8\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $values.B.Value }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Stack Component Prop Types in Storybook MDX\nDESCRIPTION: This snippet injects an auto-generated table of the Stack component’s accepted props into the Storybook documentation. <ArgTypes of={Stack} /> parses the Stack component and renders a list of its properties, enhancing discoverability and usability for developers. This requires Storybook configured for MDX and the Stack component to have proper PropTypes or TypeScript type annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Stack/Stack.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={Stack} />\n```\n\n----------------------------------------\n\nTITLE: Deleting Grafana Data Sources (Plaintext)\nDESCRIPTION: Defines the `datasources:delete` permission action required to delete data sources in Grafana. Access is associated with data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources:delete`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as Plain Text Representation\nDESCRIPTION: Demonstrates the `:text` format option. It formats variables into their text representation. For single-value variables, it returns the value as text. For multi-value variables, it returns a string with values joined by ` + `. The example shows `[\"test1\", \"test2\"]` interpolated as `\"test1 + test2\"`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nservers = [\"test1\", \"test2\"]\nString to interpolate: '${servers:text}'\nInterpolation result: \"test1 + test2\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Grafana Plugin Signature Manifest - JSON\nDESCRIPTION: This JSON snippet represents the digital signature manifest for a Grafana plugin. It declares metadata such as manifest and plugin versions, signature type, signing organization, file hashes, and signing key ID. This structure is consumed by Grafana to authenticate and verify the integrity of plugin files using the checksum and associated cryptographic information. Key fields include 'manifestVersion', 'signatureType', 'signedByOrg', 'plugin', 'files', and 'keyId', where 'files' maps plugin filenames to their hashed checksums.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-signature/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171059101,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Metadata and Checksums in Manifest (JSON)\nDESCRIPTION: This JSON snippet specifies metadata for a Grafana plugin, including manifest version, signature type, organizational details, plugin identity, version, timestamp, a signing key ID, and a mapping of included files with their cryptographic checksums. It is essential for validating plugin provenance and is a required dependency when distributing or installing plugins in Grafana environments. Inputs include organizational signing details, plugin information, and SHA checksums; outputs are JSON objects used for signature verification. No programming logic is present; the file is intended for programmatic consumption.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/plugin-with-dist/plugin/dist/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171059101,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as Regex String\nDESCRIPTION: Demonstrates the `:regex` format option. This formats multi-value variables into a single regex string where values are treated as alternatives, separated by `|` and enclosed in parentheses `(value1|value2)`. Regex special characters within values are escaped. The example shows `['test1.', 'test2']` interpolated as `'(test1\\.|test2)'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1.', 'test2']\nString to interpolate: '${servers:regex}'\nInterpolation result: '(test1\\.|test2)'\n```\n\n----------------------------------------\n\nTITLE: Implementing Greet method for Greeter in Go\nDESCRIPTION: Adds a Greet method to the Greeter struct that returns the stored Message.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (g Greeter) Greet() Message {\n    return g.Message\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Key Generation Output\nDESCRIPTION: Example output from the API key generation command. The string after '/api/core/v2/apikeys/' is the actual API key to be used in the Grafana notification channel configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCreated: /api/core/v2/apikeys/0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d\n```\n\n----------------------------------------\n\nTITLE: Wire Framework Error Message in Go\nDESCRIPTION: An error message generated by Google's Wire dependency injection framework. The error occurs when attempting to use the Value function with an interface type (io.Reader) instead of using the InterfaceValue function as required by Wire.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueIsInterfaceValue/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: argument to Value may not be an interface value (found io.Reader); use InterfaceValue instead\n```\n\n----------------------------------------\n\nTITLE: Including Shared Field Overrides Documentation via Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation concerning field overrides in Grafana visualizations. It uses the `docs/shared` shortcode, specifying the content path via `lookup` (`visualizations/overrides-options.md`), the `source` as 'grafana', and a dynamic `version` placeholder (`<GRAFANA_VERSION>`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_4\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Using JSONFormatter Component within Tooltip (JSX)\nDESCRIPTION: Illustrates the usage of a hypothetical `JSONFormatter` component. The surrounding text indicates this component might be used inside the `Tooltip` component, specifically mentioning its relevance for the 'Info alternative' theme, suggesting the Tooltip can render complex React elements.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<JSONFormatter />\n```\n\n----------------------------------------\n\nTITLE: Listing Directories with Original Upstream Licenses in Grafana Project\nDESCRIPTION: This code block specifies the directories and their subdirectories that maintain their original upstream licenses within the Grafana project. Currently, it only lists the 'public/vendor/' directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/LICENSING.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npublic/vendor/\n```\n\n----------------------------------------\n\nTITLE: Displaying Note Admonition in Hugo/Markdown\nDESCRIPTION: This Hugo shortcode generates a 'note' type admonition block within the Markdown content. It is used here to highlight that Data source management features are specific to Grafana Enterprise and Grafana Cloud, providing relevant documentation links within the note. This snippet requires a Markdown processor that supports Hugo shortcodes, like Hugo itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% admonition type=\"note\" %}}\n[Data source management](https://grafana.com/docs/grafana/<GRAFANA_VERSION>/administration/data-source-management/) is only available in [Grafana Enterprise](https://grafana.com/docs/grafana/<GRAFANA_VERSION>/introduction/grafana-enterprise/) and [Grafana Cloud](https://grafana.com/docs/grafana-cloud/).\n{{% /admonition %}}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Go Templates\nDESCRIPTION: Shows the standard syntax for adding comments within Go templates using `{{/*` and `*/}}`. The content inside these delimiters is ignored during template execution.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n{{/* This is a comment */}}\n```\n\n----------------------------------------\n\nTITLE: Migrating Test Helper Usage in Grafana Frontend (JavaScript)\nDESCRIPTION: These JavaScript code snippets show how to update frontend test cases following the removal of the selectOptionInTest utility from the @grafana/ui package. Developers should replace selectOptionInTest with the select helper from react-select-event. The new syntax requires importing from react-select-event and passing an additional options object, such as specifying the container. This migration ensures code does not bundle testing libraries into production and that tests correctly simulate option selection in Select components.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// before\nimport { selectOptionInTest } from '@grafana/ui';\n// ...test usage\nawait selectOptionInTest(selectEl, 'Option 2');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// after\nimport { select } from 'react-select-event';\n// ...test usage\nawait select(selectEl, 'Option 2', { container: document.body });\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Docker Container\nDESCRIPTION: Restarts a specific Docker container named 'grafana'. Assumes a container with this name is already running.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart grafana\n```\n\n----------------------------------------\n\nTITLE: Sample Dashboards Read Permissions Array - JSON\nDESCRIPTION: This JSON array exemplifies the filtered output from the API showing the unique identifiers (UIDs) of dashboards and folders a token can read. Each entry is a UID for a Grafana dashboard or folder. There are no dependencies or inputs; it's a static example for documentation. Output: UID array. Limitation: Trailing comma may not be valid in strict JSON parsing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/service-accounts/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"dashboards:uid:70KrY6IVz\",\n  \"dashboards:uid:d61be733D\",\n  \"folders:uid:dBS87Axw2\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using FormattedValueDisplay with Custom Value in React (JSX)\nDESCRIPTION: Demonstrates usage of the FormattedValueDisplay component in a React JSX context, passing a 'value' prop containing a text object and a 'style' prop to customize the font size. This example requires React, the FormattedValueDisplay component, and assumes correct prop shaping. The key input is the value object, while output is a formatted displayed element. Suitable for customizable UI views requiring formatted numeric or string display.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FormattedValueDisplay/FormattedValueDisplay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedValueDisplay value={{ text: 'Test value' }} style={{ fontSize: 12 }} />\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Notification Template Groups with HTTP GET - HTTP\nDESCRIPTION: This HTTP request lists all notification template groups using the GET method. The endpoint responds with NotificationTemplates upon success with status code 200. No parameters, headers, or request body are required, and the response is expected to be in a standardized JSON schema.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_30\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /api/v1/provisioning/templates\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Docker Container (Bash)\nDESCRIPTION: Pulls the latest official Grafana image, stops the currently running Grafana container, removes the old container, and then starts a new container using the latest image. It mounts a volume (`/var/lib/grafana`) to persist data and configures the container to restart automatically. Container name (`my-grafana-container`) and volume path are examples and should be adjusted.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull grafana/grafana\ndocker stop my-grafana-container\ndocker rm my-grafana-container\ndocker run -d --name=my-grafana-container --restart=always -v /var/lib/grafana:/var/lib/grafana grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Adding API Reducer to Redux Store\nDESCRIPTION: Integration of the generated API reducer into the Redux store configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { dashboardAPI } from '<pathToYourAPI>';\n  const rootReducers = {\n    ...,\n    [dashboardAPI.reducerPath]: dashboardAPI.reducer,\n  };\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenLDAP Container\nDESCRIPTION: Command to build and deploy the OpenLDAP container using make\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=auth/openldap\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:ldap:reader\nDESCRIPTION: Specifies the `fixed:ldap:reader` role (ID: `fixed_lMcOPwSkxKY-qCK8NMJc5k6izLE`) within Grafana. This role grants `ldap.user:read` and `ldap.status:read` permissions, allowing users to read the LDAP configuration and LDAP status information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:ldap:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_lMcOPwSkxKY-qCK8NMJc5k6izLE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- ldap.user:read\n- ldap.status:read\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Operations with SQLStore in Go\nDESCRIPTION: Demonstrates how to implement database operations using SQLStore within a service, showing dashboard deletion as an example.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *MyService) DeleteDashboard(ctx context.Context, cmd *models.DeleteDashboardCommand) error {\n    if err := s.SQLStore.WithDbSession(ctx, func(sess *db.Session) error {\n        _, err := sess.Exec(\"DELETE FROM dashboards WHERE dashboard_id=?\", cmd.DashboardID)\n        return err\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start all services defined in the docker-compose configuration\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Error with Stack Trace using ErrorWithStack - React & Grafana UI - JSX\nDESCRIPTION: Shows how to display both an error message and its stack trace using the ErrorWithStack component from Grafana UI. Requires an 'error' object, an optional 'title', and 'errorInfo' as props. Depends on '@grafana/ui' and React. Useful for debugging, as it consolidates error details for developers or users. Outputs a formatted error display.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ErrorBoundary/ErrorBoundary.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ErrorWithStack } from '@grafana/ui';\\n\\n<ErrorWithStack error={new Error('Test error')} title={'Unexpected error'} errorInfo={null} />;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic Supported Data Format for Grafana Table (CSV)\nDESCRIPTION: This CSV snippet shows an example of a well-structured dataset with data present in every cell, which is the ideal format for the Grafana Table visualization. It demonstrates the expected column-row structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n```csv\nColumn1, Column2, Column3\nvalue1 , value2 , value3\nvalue4 , value5 , value6\nvalue7 , value8 , value9\n```\n```\n\n----------------------------------------\n\nTITLE: Sharing Panel Snapshot - Markdown\nDESCRIPTION: Shows 'ps' as the keyboard shortcut for sharing a snapshot of the current panel in Grafana. This is intended for quick sharing or exporting of panel state and requires no special dependencies other than permissions to share snapshots.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`ps`\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Tests for Combobox Virtualization\nDESCRIPTION: Setup code for mocking getBoundingClientRect in Jest tests to support virtualization testing of the Combobox component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n  const mockGetBoundingClientRect = jest.fn(() => ({\n    width: 120,\n    height: 120,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  }));\n\n  Object.defineProperty(Element.prototype, 'getBoundingClientRect', {\n    value: mockGetBoundingClientRect,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Representing Time Series Data for Outer Join (Query B)\nDESCRIPTION: This Markdown table displays example time series data from 'Query B', meant to be joined with 'Query A' using an outer join. It contains columns for Time, Server, and Errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Server   | Errors |\n| ------------------- | -------- | ------ |\n| 2020-07-07 11:34:20 | server 1 | 15     |\n| 2020-07-07 11:24:20 | server 2 | 5      |\n| 2020-07-07 11:04:20 | server 3 | 10     |\n```\n\n----------------------------------------\n\nTITLE: Updating SAML Settings via Grafana Admin API\nDESCRIPTION: JSON payload example for enabling SAML authentication and disabling single logout through the Grafana Admin API. The updates parameter specifies settings to change.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/settings-updates-at-runtime/index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"updates\": {\n    \"auth.saml\": {\n      \"enabled\": \"true\",\n      \"single_logout\": \"false\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service with Homebrew (macOS)\nDESCRIPTION: Starts the Grafana service managed by Homebrew on macOS. Assumes Grafana was installed using `brew install grafana`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start grafana\n```\n\n----------------------------------------\n\nTITLE: Generating Cloud API Endpoints for Grafana\nDESCRIPTION: Commands to regenerate the machine-generated endpoints.gen.ts file. Involves cleaning swagger files, generating OpenAPI3 specifications, and running the API generation script. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/migrate-to-cloud/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake swagger-clean && make openapi3-gen\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn generate-apis\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Graphite Queries\nDESCRIPTION: Example of using wildcards to retrieve multiple time series in a single query, showing how to efficiently query CPU utilization metrics across different categories.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_2\n\nLANGUAGE: graphite\nCODE:\n```\ncpu.percent.*.g\n```\n\n----------------------------------------\n\nTITLE: Embedding Video Files with Video-Embed Shortcode in Hugo/Grafana Documentation Markdown\nDESCRIPTION: This snippet utilizes the video-embed shortcode to directly display local MP4 video demos on documentation pages. The 'src' parameter references the video file, 'max-width' sets the display width, and 'caption' describes the video content. This is intended for hosting demo or explanatory videos without dependence on external platforms. Videos must be uploaded to the correct location, and descriptive captions should be supplied.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< video-embed src=\"/media/docs/grafana/screen-recording-10-2-y-axis-zoom-demo.mp4\" max-width=\"750px\" caption=\"Y-axis zooming demo\" >}}\n```\n\n----------------------------------------\n\nTITLE: Confirmation Response for Updating Organization User - JSON\nDESCRIPTION: This JSON response signals successful update of a user's attributes within the organization following a PATCH request. Typical responses contain a message field with confirmation text. A 200 status indicates successful operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"Organization user updated\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a Select component for automatic dropdown selection saving.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <Select\n      loadOptions={optionsList}\n      value={option}\n      onChange={(value) => {\n        onChange(value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Representing Direct Generic Resource Permissions in OpenFGA\nDESCRIPTION: This example shows an OpenFGA tuple granting a user ('user:1') direct 'read' access to a specific generic resource. The object identifies the resource by its type and name (e.g., a specific dashboard). Context is required to specify the 'group_resource' for filtering purposes in list requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<name>” }` with additional context. This context store the GroupResource. `{ \"group_resource\": \"dashboard.grafana.app/dashboards\" }\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Collections with 'range' and 'else' in Go Templates\nDESCRIPTION: Extends the `range` statement by adding an `else` block. This allows rendering alternative content when the collection being iterated over (`$array`) is empty or nil.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{ range $array }}\n  {{ .itemPropertyName }}\n{{ else }}\n  Empty array\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments with Whitespace Control in Go Templates\nDESCRIPTION: Demonstrates adding comments while simultaneously removing potential leading or trailing whitespace (like newlines) around the comment using the `{{-` and `-}}` syntax variants: `{{- /* ... */ -}}`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n{{- /* This is a comment with no leading or trailing line breaks */ -}}\n```\n\n----------------------------------------\n\nTITLE: Sharing Link for Panel - Markdown\nDESCRIPTION: Uses the 'pu' keyboard shortcut when hovering over a panel in Grafana to open the share link dialog. The shortcut triggers the UI for copying or sharing the panel's direct link. No configuration is required other than having panel keyboard shortcuts enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`pu`\n```\n\n----------------------------------------\n\nTITLE: Using Alias Patterns in Grafana for InfluxDB\nDESCRIPTION: These placeholders are used within Grafana's alias field for InfluxDB queries to dynamically name the time series in visualizations. `$measurement` uses the measurement name, `$1`-`$9` use parts of a dot-separated measurement name, `$col` uses the column name, and `$tag_exampletag` or `[[tag_exampletag]]` uses the value of the specified tag.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- $measurement = replaced with measurement name\n- $1 - $9 = replaced with part of measurement name (if you separate your measurement name with dots)\n- $col = replaced with column name\n- $tag_exampletag = replaced with the value of the <i>exampletag</i> tag\n- You can also use [[tag_exampletag]] pattern replacement syntax\n```\n\n----------------------------------------\n\nTITLE: Implementing EmptyState Completed Variant in JSX\nDESCRIPTION: This snippet illustrates the usage of the `EmptyState` component with the `completed` variant. This is suitable for situations where the user has finished all available tasks, such as clearing notifications, displaying a confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptyState } from '@grafana/ui';\n\n<EmptyState variant=\"completed\" message=\"You're all caught up\" />;\n```\n\n----------------------------------------\n\nTITLE: Representing Time Series Data for Inner Join (Query A)\nDESCRIPTION: This Markdown table shows example time series data from 'Query A', intended as input for an inner join transformation. It includes columns for Time, Job, and Uptime.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Job     | Uptime    |\n| ------------------- | ------- | --------- |\n| 2020-07-07 11:34:20 | node    | 25260122  |\n| 2020-07-07 11:24:20 | postgre | 123001233 |\n| 2020-07-07 11:14:20 | postgre | 345001233 |\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Stack with Legacy Docker Compose Command - Bash\nDESCRIPTION: This snippet starts the Grafana stack using the legacy \"docker-compose\" binary (used for Docker Compose v1). It is functionally similar to the previous command, launching all services defined in the local \"docker-compose.yml\" file in detached mode. This uses the legacy hyphenated command, which is still available on some systems. Input: None; Output: Containers running in background, ready for Grafana tutorial use.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Resetting Basic Roles - Grafana Access Control - JSON\nDESCRIPTION: Gives the HTTP/1.1 200 OK response for a reset operation on basic roles. The returned JSON object includes a message confirming the reset has occurred.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Reset performed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Timezone Support Image using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds an image illustrating the new time zone support feature in Grafana Alerting mute timings. It specifies the image source path (`/media/docs/alerting/timezone-support.png`), maximum display width (`600px`), and a caption (`Time zone support`). This shortcode is likely used within Grafana's documentation build process (Hugo).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/alerting/timezone-support.png\" max-width=\"600px\" caption=\"Time zone support\" >}}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unsupported Incomplete Data Format for Grafana Table (CSV)\nDESCRIPTION: This CSV snippet demonstrates an incomplete dataset where some rows lack data for all columns (e.g., the 'gap1, gap2' row). The Grafana Table visualization requires a complete column-row structure and will not display data with such gaps.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n```csv\nColumn1, Column2, Column3\nvalue1 , value2 , value3\ngap1   , gap2\nvalue4 , value5 , value6\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Annotations with Epoch Time in SQL for Grafana\nDESCRIPTION: SQL query example for fetching Grafana annotations where the time column (`epoch_time`) stores epoch values. It selects the epoch time as `time`, a metric as `text`, and concatenates two metrics for `tags`. The `$__unixEpochFilter` macro is used to filter data based on the Grafana dashboard's time range. Requires a table `public.test_data` with `epoch_time`, `metric1`, and `metric2` columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  epoch_time as time,\n  metric1 as text,\n  concat_ws(', ', metric1::text, metric2::text) as tags\nFROM\n  public.test_data\nWHERE\n  $__unixEpochFilter(epoch_time)\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Name - HTTP\nDESCRIPTION: This HTTP PUT request updates the organization's name with a JSON payload. It must include a Bearer token and proper permissions (orgs:write). Used to change organization metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/org HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"name\":\"Main Org.\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Example with data-testid Attribute\nDESCRIPTION: A simple JSX example showing how to add the data-testid attribute to an input field for E2E testing identification.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<input data-testid=\"Username input field\" className=\"gf-form-input login-form-input\" type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Protocol to HTTPS - JSON\nDESCRIPTION: Sets the service protocol to 'https' within the JSON configuration file. Renderer v3.11.0 or later is required. Default is 'http'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"protocol\": \"https\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and Component Modules in TypeScript\nDESCRIPTION: This code snippet imports essential modules from Storybook (@storybook/blocks) as well as the RefreshPicker component and its related story definitions. These imports are foundational for rendering and documenting the component in Storybook. Dependencies include @storybook/blocks and the project's local RefreshPicker and story files; there are no parameters or outputs as this code only facilitates module availability.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RefreshPicker/RefreshPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, Canvas, ArgTypes } from '@storybook/blocks';\nimport { RefreshPicker } from './RefreshPicker';\nimport * as RefreshPickerStories from './RefreshPicker.story';\n```\n\n----------------------------------------\n\nTITLE: Stopping the Grafana Docker Container - Bash\nDESCRIPTION: Demonstrates listing running Docker containers and stopping the Grafana container by name. These commands require Docker installed and the Grafana container already running. Outputs the list of containers and stops the specified one; only containers running with the specified name or ID will be affected.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/docker/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# The `docker ps` command shows the processes running in Docker\ndocker ps\n\n# This will display a list of containers that looks like the following:\nCONTAINER ID   IMAGE  COMMAND   CREATED  STATUS   PORTS    NAMES\ncd48d3994968   grafana/grafana-enterprise   \"/run.sh\"   8 seconds ago   Up 7 seconds   0.0.0.0:3000->3000/tcp   grafana\n\n# To stop the grafana container run the command\n# docker stop CONTAINER-ID or use\n# docker stop NAME, which is `grafana` as previously defined\ndocker stop grafana\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Homebrew on macOS\nDESCRIPTION: Commands for installing required development dependencies using Homebrew package manager on macOS\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\nbrew install go\nbrew install node@22\n```\n\n----------------------------------------\n\nTITLE: Application Insights Legend Pattern Example\nDESCRIPTION: Example of how to format server values in Application Insights legend aliases.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nserver: {{groupbyvalue}}\n```\n\n----------------------------------------\n\nTITLE: SQL Stored Procedure for Multi-Series Time Data in Grafana\nDESCRIPTION: This stored procedure combines multiple queries to return data for a multi-series graph in Grafana. It uses epoch time parameters and complex time calculations to group and format the data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE sp_test_epoch(\n  @from int,\n  @to \tint\n)\tAS\nBEGIN\n  SELECT\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int) as time,\n    measurement + ' - value one' as metric,\n    avg(valueOne) as value\n  FROM\n    metric_values\n  WHERE\n    time >= DATEADD(s, @from, '1970-01-01') AND time <= DATEADD(s, @to, '1970-01-01')\n  GROUP BY\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int),\n    measurement\n  UNION ALL\n  SELECT\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int) as time,\n    measurement + ' - value two' as metric,\n    avg(valueTwo) as value\n  FROM\n    metric_values\n  WHERE\n    time >= DATEADD(s, @from, '1970-01-01') AND time <= DATEADD(s, @to, '1970-01-01')\n  GROUP BY\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, DATEADD(second, DATEDIFF(second,GETDATE(),GETUTCDATE()), time))/600 as int)*600 as int),\n    measurement\n  ORDER BY 1\nEND\n```\n\n----------------------------------------\n\nTITLE: Handling wire.Bind Function Argument Error in Go\nDESCRIPTION: This snippet demonstrates a sample error message generated when the wire.Bind function from the Google Wire dependency injection library is invoked with an incorrect number of arguments. The error shows that the function was called with only one argument (*Fooer), while it requires two interfaces. Developers using Wire must ensure both arguments are provided to avoid this compile-time error. Inputs are the function arguments, and the output is a diagnostic error to aid in debugging.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingNotEnoughArgs/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nexample.com/foo/wire.go:x:y: not enough arguments in call to wire.Bind\n\thave (*Fooer)\n\twant (interface{}, interface{})\n```\n\n----------------------------------------\n\nTITLE: Enhancing Generated Endpoints\nDESCRIPTION: Example of modifying generated endpoints using enhanceEndpoints to customize behavior.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const dashboardsAPI = generatedApi.enhanceEndpoints({\n  endpoints: {\n    // Need to mutate the generated query to set the Content-Type header correctly\n    updateDashboard: (endpointDefinition) => {\n      const originalQuery = endpointDefinition.query;\n      if (originalQuery) {\n        endpointDefinition.query = (requestOptions) => ({\n          ...originalQuery(requestOptions),\n          headers: {\n            'Content-Type': 'application/merge-patch+json',\n          },\n        });\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Representing Folder Sub-Resource Permissions in OpenFGA\nDESCRIPTION: This snippet demonstrates granting a user ('user:1') access to specific types of sub-resources within a folder. It uses the 'resource_read' relation on the folder object (identified by UID) and includes a context object specifying the allowed subresource types (e.g., dashboards, alerting rules).\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “resource_read”, object:”folder:<uid>”}` with additional context. This context holds all GroupResources in a list e.g. `{ \"subresources\": [\"dashboard.grafana.app/dashboards\", \"alerting.grafana.app/rules\" ] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for Self-Instrumentation\nDESCRIPTION: INI configuration that needs to be added to Grafana to enable logging to file in JSON format, frontend logging, and OpenTelemetry tracing with Jaeger. This configuration is necessary for the self-instrumentation tools to collect data.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[log.file]\nformat = json\n\n[log.frontend]\nenabled = true\ncustom_endpoint=http://localhost:12347/collect\n\n[tracing.opentelemetry.jaeger]\naddress = http://localhost:14268/api/traces\n```\n\n----------------------------------------\n\nTITLE: Sample Log Line Format\nDESCRIPTION: Example of a log line format that matches the pattern used in the Loki query. Shows timestamp, log level, HTTP method, URL, status code, and request duration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n2023-04-22T02:49:32.562825+00:00 level=info method=GET url=test.com status=200 duration=171ms\n```\n\n----------------------------------------\n\nTITLE: Defining Relative Time Overrides in Grafana Query Options\nDESCRIPTION: Provides examples of string values for the 'Relative time' query option in Grafana panels. These strings allow overriding the dashboard's time picker with specific relative time ranges like 'Last 5 minutes' or 'This week so far'. This feature enables displaying metrics from different time periods on the same dashboard but only functions when the dashboard's time range is relative.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Example          | Relative time field |\n| ---------------- | ------------------- |\n| Last 5 minutes   | `now-5m`            |\n| The day so far   | `now/d`             |\n| Last 5 days      | `now-5d/d`          |\n| This week so far | `now/w`             |\n| Last 2 years     | `now-2y/y`          |\n```\n\n----------------------------------------\n\nTITLE: Installing @grafana/prometheus with npm (Shell)\nDESCRIPTION: This command uses the npm package manager to download and install the `@grafana/prometheus` library and add it as a dependency to the current project's `package.json` file. It requires npm (Node Package Manager), typically installed with Node.js, to be present on the system.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-prometheus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @grafana/prometheus\n```\n\n----------------------------------------\n\nTITLE: Using the InfoBox Component in React/TypeScript\nDESCRIPTION: This React/TypeScript snippet demonstrates the usage of the `InfoBox` component. It shows how to instantiate the component with properties like `title` for the box title, `severity` to control the visual style ('info' in this case), an optional `url` linking to documentation, and an `onDismiss` callback function (`dissmisInfoBox`) to handle user dismissal.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InfoBox/InfoBox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<InfoBox title=\"Example info box\" severity=\"info\" url=\"http://url.to.some.documentation\" onDismiss={dissmisInfoBox} />\n```\n\n----------------------------------------\n\nTITLE: LDAPS Connection Configuration\nDESCRIPTION: Configuration settings for LDAPS (LDAP over SSL) connection\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nport = 636\nuse_ssl = true\nstart_tls = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Alerting Upgrade Dry-Run in Grafana Configuration (TOML)\nDESCRIPTION: This TOML configuration snippet shows how to disable the automatic dry-run of the legacy alerting to Grafana Alerting upgrade feature on Grafana startup. By setting `alertingUpgradeDryrunOnStart` to `false` under the `[feature_toggles]` section in the Grafana configuration file, the dry-run process that normally occurs on each start-up is prevented. This is relevant for users preparing for the removal of legacy alerting in v11.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.4/index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[feature_toggles]\nalertingUpgradeDryrunOnStart=false\n```\n\n----------------------------------------\n\nTITLE: Setting Annotation Cleanup and Tag Constraints - Grafana INI\nDESCRIPTION: Documents `[annotations]` section. `cleanupjob_batchsize` configures the batch size for annotation cleanup jobs; `tags_length` limits the number of tags per annotation (between 500 and 4096, default 500, higher values may decrease performance). Used for dashboard, API, and alert annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n[annotations]\n# Batch size for cleanup jobs\ncleanupjob_batchsize = 100\n# Max number of tags allowed per annotation; range 500-4096\ntags_length = 500\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Chained Variable Query in InfluxDB\nDESCRIPTION: Query that filters hostname tag values based on a previously selected region variable, demonstrating chained variables functionality.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"hostname\"  WHERE region = '$region'\n```\n\n----------------------------------------\n\nTITLE: Using ClickOutsideWrapper Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `ClickOutsideWrapper` component. It wraps a simple `div` element. The `onClick` prop is assigned a function that logs 'Clicked outside' to the console whenever a click event occurs outside the boundaries of the wrapped `div`. This requires React and the imported `ClickOutsideWrapper` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ClickOutsideWrapper/ClickOutsideWrapper.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ClickOutsideWrapper onClick={() => console.log('Clicked outside')}>\n  <div style={{ width: '300px' }}>Container</div>\n</ClickOutsideWrapper>\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Account in Grafana\nDESCRIPTION: This command creates a new Service Account named 'test' with Admin role in the current organization context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"test\", \"role\": \"Admin\"}' http://admin:admin@localhost:3000/api/serviceaccounts\n```\n\n----------------------------------------\n\nTITLE: Displaying User Name in Go Template\nDESCRIPTION: This Go template snippet inserts the value of the `.Name` variable from the template data into the email body. It's used to personalize the welcome message greeting for the recipient. Requires the `.Name` variable to be present in the data passed to the template execution.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{.Name}}\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Time Range Value Object in JavaScript\nDESCRIPTION: This snippet demonstrates the structure of the value returned by the TimeRangeInput component when the input is cleared, using the dateTime(null) method to represent an empty state for both 'from' and 'to' fields. The example is useful for understanding the required object shape and handling empty input scenarios in forms utilizing Grafana's time range picker. Dependencies include the dateTime function from Grafana's data libraries, and the expected output is an object representing an empty time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/TimeRangeInput.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  from: dateTime(null),\\n  to: dateTime(null),\\n  raw: {\\n    from: dateTime(null),\\n    to: dateTime(null),\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: ValidationError Data Structure Definition - Go\nDESCRIPTION: Simple error structure containing a message field for validation errors. Used for returning validation-related error messages in the API.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_51\n\nLANGUAGE: go\nCODE:\n```\ntype ValidationError struct {\n    Msg string `json:\"msg\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Aggregator in custom.ini (INI)\nDESCRIPTION: This INI configuration snippet modifies Grafana's settings in `custom.ini`. It enables `kubectl` access (`grafanaAPIServerEnsureKubectlAccess`), disables experimental APIs (`grafanaAPIServerWithExperimentalAPIs`) to prevent conflicts with the test service, explicitly enables the `kubernetesAggregator` feature toggle, and configures the `[grafana-apiserver]` section with paths to the client certificate and key files needed for the aggregator to securely communicate with backend services. These settings are essential for local testing.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\ngrafanaAPIServerEnsureKubectlAccess = true\n; disable the experimental APIs flag to disable bundling of the example service locally\ngrafanaAPIServerWithExperimentalAPIs = false\nkubernetesAggregator = true\n\n[grafana-apiserver]\nproxy_client_cert_file = ./data/grafana-aggregator/client.crt\nproxy_client_key_file = ./data/grafana-aggregator/client.key\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Provider in Go\nDESCRIPTION: Demonstrates how to define a simple provider function that returns a Foo struct.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\ntype Foo struct {\n    X int\n}\n\n// ProvideFoo returns a Foo.\nfunc ProvideFoo() Foo {\n    return Foo{X: 42}\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Management Commands\nDESCRIPTION: Various commands for managing alerts including setup, Slack configuration, and provisioning\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./alerts.sh setup\n$ ./alerts.sh slack -d\n$ ./alerts.sh slack -u https://hooks.slack.com/services/...\n$ ./alerts.sh slack -u https://hooks.slack.com/services/... -r -e 10m\n$ ./alerts.sh provision\n$ ./alerts.sh provision -a 10\n$ ./alerts.sh provision -a 10 -c 100\n$ ./alerts.sh pause\n$ ./alerts.sh unpause\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder - Bash\nDESCRIPTION: This snippet demonstrates changing the current shell directory to the repo directory just cloned. It assumes the previous 'git clone' operation was successful and the 'tutorial-environment' folder exists. Input: Existing directory name. Output: Updates the shell's current working directory, which is required for executing subsequent Docker and docker-compose commands on the project files.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial-environment\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Editor Custom Role for Alert Rules in a Specific Folder via Grafana RBAC API\nDESCRIPTION: This JSON payload defines a custom role (`custom:alert_rules_updater`) for the Grafana RBAC API (`PUT access-control/roles`). It grants comprehensive write access (read, write, create actions) to alert rules within a specific folder (`folders:uid:UID_F`). It also includes permissions (`alert.notifications.receivers:list`, `alert.notifications.time-intervals:read`) required for simplified notification routing, which should be removed if not using that feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/access-roles/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPUT access-control/roles\n{\n\t\"name\": \"custom:alert_rules_updater\",\n\t\"displayName\": \"Alert rules editor in folder F\",\n\t\"description\": \"Edit access to rules in folder F that use DS1 and DS2\",\n\t\"permissions\": [\n    \t{\n        \t\"action\": \"alert.rules:read\",\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t},\n    \t{\n        \t\"action\": \"alert.rules:read\", // Note: Duplicate read permission in original example\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t},\n    \t{\n        \t\"action\": \"alert.rules:write\",\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t},\n    \t{\n        \t\"action\": \"alert.rules:create\",\n        \t\"scope\": \"folders:uid:UID_F\"\n    \t},\n    \t{\n        \t\"action\": \"alert.notifications.receivers:list\",\n    \t},\n{\n        \t\"action\": \"alert.notifications.time-intervals:read\",\n    \t},\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Shared Introduction for Grafana Upgrade - Markdown\nDESCRIPTION: This snippet uses a Hugo shortcode to insert shared introductory documentation for upgrading Grafana. It requires the Hugo static site generator and access to the configured documentation partial templates. The key parameters are 'lookup', specifying the partial, 'source', designating the source application, and 'version', indicating the target Grafana version. The output is dynamically rendered Markdown documentation content. Limitations include requiring the template infrastructure to be present and correct for rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\\\"upgrade/intro.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Database Secrets via Grafana CLI (Command Line Invocation - shell)\nDESCRIPTION: This command allows administrators to re-encrypt all existing secrets in the Grafana database using the configured Google Cloud KMS key. The grafana cli admin secrets-migration re-encrypt command must be run from the root directory of Grafana Enterprise and will migrate any secrets encrypted with older keys to use the new provider. No parameters are required beyond appropriate grafana.ini configuration, and the operation may take several minutes depending on the database size.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-google-cloud-kms/index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrafana cli admin secrets-migration re-encrypt\n```\n\n----------------------------------------\n\nTITLE: Generating Password Reset Email Template - Golang Templates - Text\nDESCRIPTION: This snippet constructs an email template with placeholder expressions compatible with the Go language's text/template package. It requires variables such as .Subject, .Name, .EmailCodeValidHours, .AppUrl, and .Code to be supplied at render time. The template generates a subject and email body that provides a personalized reset link, used within the password reset process; expected inputs are user-specific data injected via server-side code, and the output is a fully formed email with a functional reset URL. No constraints are imposed by the template itself, but the containing application must ensure timely and accurate variable substitution.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/reset_password.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[[HiddenSubject .Subject \"Reset your Grafana password - [[.Name]]\"]]\n\nHi [[.Name]],\n\nCopy and paste the following link directly in your browser to reset your password within [[.EmailCodeValidHours]] hours.\n[[.AppUrl]]user/password/reset?code=[[.Code]]\n```\n\n----------------------------------------\n\nTITLE: Data Source Query Response in JSON\nDESCRIPTION: Example response for a successful query to the Test data source, returning time series data in JSON format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": {\n    \"A\": {\n      \"frames\": [\n        {\n          \"schema\": {\n            \"refId\": \"A\",\n            \"fields\": [\n              {\n                \"name\": \"time\",\n                \"type\": \"time\",\n                \"typeInfo\": {\n                  \"frame\": \"time.Time\"\n                }\n              },\n              {\n                \"name\": \"A-series\",\n                \"type\": \"number\",\n                \"typeInfo\": {\n                  \"frame\": \"int64\",\n                  \"nullable\": true\n                }\n              }\n            ]\n          },\n          \"data\": {\n            \"values\": [\n              [1644488152084, 1644488212084, 1644488272084, 1644488332084, 1644488392084, 1644488452084],\n              [1, 20, 90, 30, 5, 0]\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing hubot-grafana Plugin using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `hubot-grafana` plugin within the Hubot project's directory. The `--save` flag ensures that the plugin is added to the project's dependencies in the `package.json` file. This step is necessary before the plugin can be activated in Hubot.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hubot-grafana --save\n```\n\n----------------------------------------\n\nTITLE: Integrating DatePickerWithInput Component in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import, initialize, and use the DatePickerWithInput component from @grafana/ui in a React TypeScript application. It uses the useState hook to manage the selected date and attaches handlers to update the state when a new date is picked. Required dependencies are React and @grafana/ui. The key input props are width (specifies input width in rem), value (the current selected date, as Date or string), and onChange (callback fired when the date changes). The component returns a rendered DatePickerWithInput tied to local state; it expects valid Date or string values and updates accordingly. Limitations include ensuring proper imports and that the value and setDate types align with expectations.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DatePickerWithInput/DatePickerWithInput.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useState } from 'react';\nimport { DatePickerWithInput } from '@grafana/ui';\n\nconst [date, setDate] = useState<Date | string>(new Date());\nreturn <DatePickerWithInput width={40} value={date} onChange={(newDate) => setDate(newDate)} />;\n```\n\n----------------------------------------\n\nTITLE: Constructing a Grafana Silence Form URL with Pre-filled Parameters\nDESCRIPTION: Provides an example URL demonstrating how to link to the Grafana silence creation form with pre-filled label matchers and a comment. It uses the `matcher` query parameter (format: `[label][operator][value]`, operators: `=`, `!=`, `=~`, `!~`) and the `comment` query parameter. Multiple `matcher` parameters can be specified. An optional `alertmanager` query parameter can be added to target an external Alertmanager.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/create-silence.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://mygrafana/alerting/silence/new?matcher=severity%3Dcritical&matcher=cluster!~europe-*&comment=Silence%20critical%20EU%20alert\n```\n\n----------------------------------------\n\nTITLE: Embedding Grafana Play Dashboard Link using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode is used within the Grafana documentation framework to embed an interactive link or preview related to a Grafana Play dashboard. It specifically links to a dashboard demonstrating 'The Four Golden Signals' observability strategy. The `title` parameter provides the display text, and the `url` parameter points to the specific dashboard on play.grafana.org.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/best-practices/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/play title=\"The Four Golden Signals\" url=\"https://play.grafana.org/d/000000109/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Including Shared Tooltip Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a common documentation snippet describing tooltip configuration options for Grafana visualizations. The `leveloffset` parameter adjusts heading levels for proper nesting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/tooltip-options-1.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Legacy PanelChrome Loading Indicator Implementation (Pre-v9.4.0) in React\nDESCRIPTION: Illustrates the deprecated method for displaying a loading indicator in `PanelChrome` versions prior to Grafana 9.4.0. This approach involved passing a `PanelChrome.LoadingIndicator` component within an array to the `leftItems` prop.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  leftItems={[<PanelChrome.LoadingIndicator loading={isRefreshing} onCancel={onCancelQuery} key=\"loading-indicator\" />]}\n  width={400}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'white',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        New panel with old API\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Folders with HTTP GET Request\nDESCRIPTION: Example HTTP GET request to retrieve all folders the authenticated user has permission to view. The request includes authorization via Bearer token and can be limited by the 'limit' query parameter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/folders?limit=10 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Querying Electricity Power Data with Flux for Grafana Alerts\nDESCRIPTION: This Flux query fetches electricity data from the 'HillValley' bucket, specifically power readings from a lightning strike at the clocktower. It filters by measurement, location, source, and field before aggregating and yielding the mean values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_3\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"HillValley\")\n|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n|> filter(fn: (r) => r[\"_measurement\"] == \"ElectricityData\")\n|> filter(fn: (r) => r[\"Location\"] == \"clocktower\")\n|> filter(fn: (r) => r[\"Source\"] == \"lightning\")\n|> filter(fn: (r) => r[\"_field\"] == \"power\")\n|> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n|> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Hugo\nDESCRIPTION: This Hugo shortcode embeds a YouTube video into the page using the specified video ID ('RGiktzfhRd0'). It relies on Hugo's built-in or custom 'youtube' shortcode definition to render the video player. The purpose is to provide a visual overview of the Grafana v11.5 release.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-5.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"RGiktzfhRd0\" >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic TextArea Example in JSX\nDESCRIPTION: This code demonstrates how to render a basic example of the TextArea component using Storybook's Canvas.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TextArea/TextArea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas of={TextAreaStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Variable Syntax Example with $ Format in PromQL\nDESCRIPTION: Example of using the $varname syntax in Prometheus queries, which is easier to read but doesn't allow using variables in the middle of a word.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_5\n\nLANGUAGE: PromQL\nCODE:\n```\nrate(http_requests_total{job=~\"$job\"}[$_rate_interval])\n```\n\n----------------------------------------\n\nTITLE: Displaying Tag Component Props in Storybook\nDESCRIPTION: This snippet uses the Storybook ArgTypes component to automatically generate documentation for the props of the Tag component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes of={Tag} />\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Upgrade Task Documentation - Markdown\nDESCRIPTION: This snippet provides a modular inclusion of common upgrade task instructions through a Hugo shortcode. Prerequisites include having a partial named 'upgrade-common-tasks.md' and the correct provision of the 'source' and 'version' variables. Its key functionality is to streamline upgrade instruction consistency. The output integrates task documentation into the page, with substitution happening during site compilation. Dependencies are the Hugo generator and properly maintained docs partials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\\\"upgrade/upgrade-common-tasks.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorial Environment Repository using Git\nDESCRIPTION: This command clones the 'tutorial-environment' repository from GitHub using the Git command-line tool. This repository contains the configuration files and resources needed to follow the Grafana Alerting Part 2 tutorial. Requires Git to be installed on the system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/grafana/tutorial-environment.git\n```\n\n----------------------------------------\n\nTITLE: License Token Refresh Response Example - Grafana Licensing API - HTTP\nDESCRIPTION: This snippet presents the typical HTTP response to a token renewal request, showing the detailed JSON payload for debugging. The status code is 200 if successful, and the response format may change over time.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: application/json\\nContent-Length: 357\\n\\n{\\n  \"jti\":\"2\",\\n  \"iss\":\"https://grafana.com\",\\n  \"sub\":\"https://play.grafana.org/\"\\n  \"lid\":\"1\",\\n  \"included_users\":15,\\n  \"lic_exp_warn_days\":30,\\n  \"tok_exp_warn_days\":2,\\n  \"update_days\":1,\\n  \"prod\":[\"grafana-enterprise\"],\\n  \"company\":\"Grafana Labs\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Path for Evaluation\nDESCRIPTION: API endpoint path used by AlertingQueryRunner for evaluation requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napi/v1/eval\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Systemd Service File using Shell\nDESCRIPTION: Creates an empty systemd unit file for the Grafana server at `/etc/systemd/system/grafana-server.service` using the `touch` command. Requires `sudo` privileges. This file will be populated with service definition details for managing the Grafana server process via systemd when installed from binaries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/systemd/system/grafana-server.service\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Point - Grafana REST HTTP Endpoint - http\nDESCRIPTION: Specifies the HTTP PUT route used for updating an existing contact point resource in Grafana provisioning. The endpoint requires a valid contact point UID as a path parameter and accepts a request body with the updated contact point definition. Requires: `PUT /api/v1/provisioning/contact-points/:uid` endpoint, UID (path), request body, and optionally the `X-Disable-Provenance` header to enable UI editing. Outputs an Ack response on acceptance or ValidationError on a bad request.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/v1/provisioning/contact-points/:uid\n```\n\n----------------------------------------\n\nTITLE: Fetching Loki Label Values with datasource.languageProvider - TypeScript\nDESCRIPTION: Illustrates how to obtain possible values for a specific Loki label using fetchLabelValues. The API call can be customized with a stream selector and a time range, returning a Promise of string arrays. Example scenarios demonstrate usage with and without selector filtering, employing standard async/await error handling and supporting secure, cached requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Fetch label values\n *\n * This asynchronous function fetches values associated with a specified label name.\n * It returns a promise that resolves to an array of strings containing the label values.\n *\n * @param labelName - The name of the label for which you want to retrieve values.\n * @param options - (Optional) An object containing additional options.\n * @param options.streamSelector - (Optional) The stream selector to filter label values. If not provided, all label values are fetched.\n * @param options.timeRange - (Optional) The time range for which you want to retrieve label values. If not provided, the default time range is used.\n * @returns A promise containing an array of label values.\n * @throws An error if the fetch operation fails.\n */\nasync function fetchLabelValues(\n  labelName: string,\n  options?: { streamSelector?: string; timeRange?: TimeRange }\n): Promise<string[]>;\n\n/**\n * Example usage without stream selector:\n */\n\nconst labelName = 'job';\ntry {\n  const values = await fetchLabelValues(labelName);\n  console.log(values);\n} catch (error) {\n  console.error(`Error fetching label values: ${error.message}`);\n}\n\n/**\n * Example usage with stream selector:\n */\n\nconst labelName = 'job';\nconst streamSelector = '{app=\"grafana\"}';\ntry {\n  const values = await fetchLabelValues(labelName, { streamSelector });\n  console.log(values);\n} catch (error) {\n  console.error(`Error fetching label values: ${error.message}`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting a Notification Template Group via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to `/api/v1/provisioning/templates/:name` to retrieve a specific notification template group identified by its 'name' in the path. Requires the template group 'name' as a mandatory path parameter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/templates/:name\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook and Importing InlineToast - TypeScript\nDESCRIPTION: This snippet imports the Meta and ArgTypes components from the Storybook Blocks library, as well as the InlineToast component itself. These imports are prerequisites for configuring the Storybook MDX documentation and exposing the target component. Required dependencies: '@storybook/blocks' for Storybook components and './InlineToast' for the source component. No parameters or outputs are defined directly in this snippet, and it is intended to be used within a Storybook MDX documentation file.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InlineToast/InlineToast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { InlineToast } from './InlineToast';\n```\n\n----------------------------------------\n\nTITLE: CPU Usage Metrics in InfluxDB Line Protocol\nDESCRIPTION: CPU usage metrics data showing various measurements for different CPU cores including system, user, idle, nice, irq, iowait, steal, guest usage percentages. Each line represents metrics for a different CPU core with timestamp in nanoseconds precision.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/same_metrics_different_labels_same_time.txt#2025-04-23_snippet_0\n\nLANGUAGE: influxdb\nCODE:\n```\ncpu,cpu=cpu0,host=MacBook-Pro-Alexander.local usage_system=6.000000000005457,usage_idle=82.00000000012005,usage_nice=0,usage_irq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=12.000000000033651,usage_iowait=0,usage_softirq=0 1616403090000000000\ncpu,cpu=cpu1,host=MacBook-Pro-Alexander.local usage_user=0,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_guest=0 1616403090000000000\ncpu,cpu=cpu2,host=MacBook-Pro-Alexander.local usage_system=4.901960784315911,usage_idle=88.23529411773097,usage_iowait=0,usage_guest=0,usage_user=6.862745098042275,usage_nice=0,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0 1616403090000000000\ncpu,cpu=cpu3,host=MacBook-Pro-Alexander.local usage_user=0,usage_iowait=0,usage_steal=0,usage_guest_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_idle=100,usage_nice=0,usage_irq=0 1616403090000000000\ncpu,cpu=cpu4,host=MacBook-Pro-Alexander.local usage_idle=91.91919191902859,usage_nice=0,usage_iowait=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_system=3.0303030303011163,usage_irq=0,usage_softirq=0,usage_user=5.0505050504922915 1616403090000000000\ncpu,cpu=cpu5,host=MacBook-Pro-Alexander.local usage_softirq=0,usage_guest_nice=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_steal=0,usage_guest=0,usage_user=0,usage_system=0,usage_irq=0 1616403090000000000\ncpu,cpu=cpu6,host=MacBook-Pro-Alexander.local usage_idle=93.0000000000291,usage_irq=0,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_user=5.000000000006821,usage_system=2.000000000001023,usage_guest=0,usage_nice=0,usage_iowait=0 1616403090000000000\ncpu,cpu=cpu7,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_system=0,usage_idle=100,usage_iowait=0,usage_guest=0,usage_nice=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403090000000000\ncpu,cpu=cpu8,host=MacBook-Pro-Alexander.local usage_system=1.9801980198033176,usage_idle=95.04950495055924,usage_softirq=0,usage_steal=0,usage_guest_nice=0,usage_user=2.970297029704976,usage_nice=0,usage_iowait=0,usage_irq=0,usage_guest=0 1616403090000000000\ncpu,cpu=cpu9,host=MacBook-Pro-Alexander.local usage_guest=0,usage_user=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_softirq=0,usage_irq=0,usage_steal=0,usage_guest_nice=0 1616403090000000000\ncpu,cpu=cpu10,host=MacBook-Pro-Alexander.local usage_system=0,usage_idle=100,usage_nice=0,usage_guest=0,usage_guest_nice=0,usage_user=0,usage_iowait=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403090000000000\ncpu,cpu=cpu11,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_idle=100,usage_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_iowait=0,usage_irq=0,usage_steal=0 1616403090000000000\ncpu,cpu=cpu-total,host=MacBook-Pro-Alexander.local usage_nice=0,usage_iowait=0,usage_irq=0,usage_idle=95.8368026645606,usage_system=1.4987510408004405,usage_softirq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=2.6644462947563388 1616403090000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Width - Bash\nDESCRIPTION: Sets RENDERING_VIEWPORT_WIDTH for default browser viewport width during rendering. Value is in pixels. Applies only when width not set in request. Requires v3.9.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_WIDTH=1000\n```\n\n----------------------------------------\n\nTITLE: Ignoring HTTPS Errors - JSON\nDESCRIPTION: Configures the rendering JSON with ignoresHttpsErrors set to true, instructing the renderer to ignore HTTPS errors on navigation. Suitable only for debugging or non-production environments due to security risks.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"ignoresHttpsErrors\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Storybook Blocks - JavaScript\nDESCRIPTION: This code snippet imports the Meta block from Storybook and the CodeEditor component from the project.\nThe Meta block is used for configuring stories in Storybook MDX, while the CodeEditor import makes the custom component available for documentation and stories. Both dependencies must be installed and correctly referenced in the project configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport { CodeEditor } from './CodeEditor';\n```\n\n----------------------------------------\n\nTITLE: Protecting User Roles from Auth Scheme Adoption (Grafana Enterprise/Cloud) (Bash)\nDESCRIPTION: Configures Grafana Enterprise/Cloud to prevent users with specified roles from having their authentication method automatically changed when a new external provider (like SAML or OAuth) is configured. This is done by setting `protected_roles` under the `[auth.security]` section with a space-separated list of roles (e.g., `server_admins`, `org_admins`). Valid roles are `viewers`, `editors`, `org_admins`, `server_admins`, and `all`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n[auth.security]\nprotected_roles = server_admins org_admins\n```\n\n----------------------------------------\n\nTITLE: Add Team Member Response Example - JSON\nDESCRIPTION: Returns a confirmation message in JSON format upon successful addition of a team member. Indicates that the membership has been created.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Member added to Team\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Contact Point with HTTP POST - HTTP\nDESCRIPTION: This HTTP POST request adds a new embedded contact point by sending an EmbeddedContactPoint object in the request body. The 'EmbeddedContactPoint.name' field determines whether it is grouped with an existing contact point. Optionally, the 'X-Disable-Provenance' header can be provided. Successful responses have status 202 with the new contact point, while a 400 indicates validation failure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_32\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /api/v1/provisioning/contact-points\n```\n\n----------------------------------------\n\nTITLE: Linking Grafana UI for Local Development with Yarn - Shell\nDESCRIPTION: These commands illustrate how to set up local development with @grafana/ui using Yarn linking. The process requires Yarn and assumes @grafana/ui is present in your local packages. First, change directory to packages/grafana-ui. The first command creates a Yarn link, allowing local packages to share dependencies via a symlink. The second command links this package into your target project. YARN_IGNORE_PATH is set to ensure proper path handling during linking.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nYARN_IGNORE_PATH=1 yarn link\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn link \"@grafana/ui\"\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject with HiddenSubject in Go Template\nDESCRIPTION: This Go template snippet utilizes a `HiddenSubject` directive or function, likely specific to Grafana's templating system. It aims to set the email subject line, possibly using the value of the `.Subject` variable passed during template execution, or falling back to a default subject string that includes the inviter's name (`[[.InvitedBy]]`).\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/new_user_invite.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n[[HiddenSubject .Subject \"[[.InvitedBy]] has invited you to join Grafana\"]]\n```\n\n----------------------------------------\n\nTITLE: Mute Timings List Response - JSON\nDESCRIPTION: An example HTTP 200 OK response representing the list of mute timings. The payload is a JSON array, where each object includes the name, configured weekdays, version, and provenance for each mute timing. These intervals can be used in alert routing to suppress notifications during recurring events, e.g., weekends.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n[\\n  {\\n    \"name\": \"weekends\",\\n    \"time_intervals\": [\\n      {\\n        \"weekdays\": [\\n          \"saturday\",\\n          \"sunday\"\\n        ]\\n      }\\n    ],\\n    \"version\": \"\",\\n    \"provenance\": \"file\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Grafana Annotations with Native Date/Time Type\nDESCRIPTION: This query demonstrates how to retrieve annotation data using a time column with a native SQL date/time data type. It combines multiple values into a single tags string.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  time,\n  measurement as text,\n  convert(varchar, valueOne) + ',' + convert(varchar, valueTwo) as tags\nFROM\n  metric_values\nWHERE\n  $__timeFilter(time_column)\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Listing Owners and Dependency Count - Bash CLI Example\nDESCRIPTION: This command lists all owners of Go dependencies as parsed from go.mod along with the number of dependencies each owns. It uses the Modowners 'owners' command with options for aggregating and counting (-a -c). Prerequisites include Go and access to the modowners.go script. Output presents one owner per line with the dependency count.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run scripts/modowners/modowners.go owners -a -c go.mod\n```\n\n----------------------------------------\n\nTITLE: Setting Up TestMain for Package Tests in Grafana\nDESCRIPTION: Implementation of TestMain that uses the Grafana testsuite for proper test setup and teardown. Required for tests that use the database to ensure proper cleanup.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage mypkg\n\nimport (\n\t\"testing\"\n\n\t\"github.com/grafana/grafana/pkg/tests/testsuite\"\n)\n\nfunc TestMain(m *testing.M) {\n\ttestsuite.Run(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Graphite CPU Metrics for Chained Variables\nDESCRIPTION: This theoretical Graphite query would return CPU metrics for selected servers in a multi-level chained variable setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_4\n\nLANGUAGE: graphite\nCODE:\n```\napps.$app.$server.cpu.*\n```\n\n----------------------------------------\n\nTITLE: Including What's New Content Section in Hugo\nDESCRIPTION: This Hugo shortcode likely includes or renders content related to 'what's new' features, potentially pulling information dynamically or from another template/file associated with 'docs/whats-new'. It structures the release notes page by delegating the generation of a specific documentation section, likely containing detailed links or summaries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-5.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/whats-new  >}}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontend Matter Configuration for Release Notes\nDESCRIPTION: YAML configuration block defining build settings, product labels and title for the Grafana 7.5.5 release notes page.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-5.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Table Data in Markdown\nDESCRIPTION: This code snippet shows how to create a table in Markdown format, representing data before and after applying the 'Rows to fields' transformation in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n| Name    | Value | Max |\n| ------- | ----- | --- |\n| ServerA | 10    | 100 |\n| ServerB | 20    | 200 |\n| ServerC | 30    | 300 |\n\n**Output:**\n\n| ServerA (config: max=100) | ServerB (config: max=200) | ServerC (config: max=300) |\n| ------------------------- | ------------------------- | ------------------------- |\n| 10                        | 20                        | 30                        |\n```\n\n----------------------------------------\n\nTITLE: Using Time Range Variables with query_result in PromQL\nDESCRIPTION: Example of using query_result with $__range_s to populate a variable with instances having a certain state over the dashboard's time range.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/prometheus/template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: PromQL\nCODE:\n```\nQuery: query_result(max_over_time(<metric>[${__range_s}s]) != <state>)\nRegex:\n```\n\n----------------------------------------\n\nTITLE: SQL Query to Execute Stored Procedure for Grafana Graph\nDESCRIPTION: This query executes the stored procedure 'sp_test_epoch' with Grafana time range macros as parameters. It's used to retrieve data for a multi-series graph panel in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nDECLARE\n  @from int = $__unixEpochFrom(),\n  @to int = $__unixEpochTo()\n\nEXEC dbo.sp_test_epoch @from, @to\n```\n\n----------------------------------------\n\nTITLE: Generating API Key for Sensu Go\nDESCRIPTION: Command to generate an API key for the admin user in Sensu Go. This key is required for configuring the Grafana notification channel to communicate with Sensu Go.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsensuctl api-key grant admin\n```\n\n----------------------------------------\n\nTITLE: Generating Password Reset Email Templates using Go HTML Templates - Go Template\nDESCRIPTION: This snippet defines a password reset email using Go HTML templates for the Grafana application. It requires Go's 'html/template' package and expects variables such as .Name, .AppUrl, .Code, .EmailCodeValidHours, .BuildVersion, and .Subject for correct rendering. The key functionality includes dynamically constructing the subject line and body, inserting personalized content, and providing a time-limited password reset link; output is an HTML-formatted email-ready template for sending password reset instructions. No external libraries are used beyond Go standard templates; variables must be sufficiently defined for proper rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/reset_password.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{HiddenSubject .Subject \"Reset your Grafana password - {{.Name}}\"}}\n\nHi {{.Name}},\n\nCopy and paste the following link directly in your browser to reset your password within {{.EmailCodeValidHours}} hours.\n{{.AppUrl}}user/password/reset?code={{.Code}}\n\n\nSent by Grafana v{{.BuildVersion}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a basic Input component for automatic text saving. The component accepts a custom request handler and onChange event handler.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <Input\n      value={inputTextValue}\n      onChange={(e) => {\n        onChange(e.currentTarget.value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Providing PGP Signature for Grafana Plugin Manifest Verification\nDESCRIPTION: This block contains the OpenPGP signature corresponding to the signed message containing the JSON manifest. Generated using OpenPGP.js v4.10.10, it allows verification of the manifest's origin (Grafana Labs, key ID '7e4d0c6a708866e7') and integrity using PGP verification tools.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/renderer-added-file/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmN8tEAAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm576UAgiedgIhpOgTi/ypYgg8AtGQqKAwnDuDRDrYOc6LUDuskbSsR+J7\nf2QjcPGpPk3alaqiTYMxixkTgmD01hltaTJ0AwIJAS9XkKHKxC9/ZhSHYemw\n7wUeKs6AEvKR6amYZ+TF2pVyiJ9cEnl9J55MmDikqKFrIqC9J0V9r9wFkPAF\nkOKVOY+y\n=gqF+\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling with Pyroscope in Grafana\nDESCRIPTION: Environment variables and command required to enable profiling with Pyroscope. Sets the diagnostics profiling to enabled and configures the address for the profiling service before running Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GF_DIAGNOSTICS_PROFILING_ENABLED=true\nexport GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0\nmake run\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependabot for Module Updates\nDESCRIPTION: YAML configuration for Dependabot to include the new module in dependency updates.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/dependabot.yml\nupdates:\n  - package-ecosystem: 'github-actions'\n    directory: '/'\n    schedule:\n      interval: 'daily'\n  - package-ecosystem: 'gomod'\n    directories:\n      - '/'\n      - '/pkg/your/new/module' # Add your new module here\n```\n\n----------------------------------------\n\nTITLE: Authenticating as Admin in FreeIPA\nDESCRIPTION: Command to authenticate as the admin user in FreeIPA using Kerberos. This requires entering the admin password (Secret123) when prompted.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkinit admin\n```\n\n----------------------------------------\n\nTITLE: Starting Storage-Server via Shell - Shell\nDESCRIPTION: This shell command starts the standalone GRPC storage-server for Grafana Unified Storage. It sets the GF_DEFAULT_TARGET environment variable and runs the server binary. Requires the built Grafana executable and associated configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nGF_DEFAULT_TARGET=storage-server ./bin/grafana server target\n```\n\n----------------------------------------\n\nTITLE: Consolidating Data Points\nDESCRIPTION: The consolidateBy() function controls how Graphite consolidates metrics when there are more data points than pixels. This affects how data points are aggregated for display.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_4\n\nLANGUAGE: graphite\nCODE:\n```\nconsolidateBy()\n```\n\n----------------------------------------\n\nTITLE: Including Upgrade Introduction using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes the shared introduction content specific to Grafana upgrades. It uses the `docs/shared` shortcode, specifying the content file (`upgrade/intro.md`), the source (`grafana`), and uses a placeholder (`<GRAFANA_VERSION>`) to potentially fetch version-specific content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"upgrade/intro.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Listing Added Helm Repositories - Helm CLI - Bash\nDESCRIPTION: This snippet lists all Helm repositories currently added to the Helm client. It requires Helm to be installed and outputs the repository names and URLs. This is typically used for verification after adding a new repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo list\n```\n\nLANGUAGE: bash\nCODE:\n```\nNAME    URL\ngrafana https://grafana.github.io/helm-charts\n```\n\n----------------------------------------\n\nTITLE: All Correlations Retrieval Response in Grafana HTTP API\nDESCRIPTION: HTTP response containing an array of all correlations across all data sources. The response includes complete details for each correlation relationship in the system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/correlations.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"description\": \"Prometheus to Loki\",\n    \"label\": \"My Label\",\n    \"sourceUID\": \"uyBf2637k\",\n    \"targetUID\": \"PDDA8E780A17E7EF1\",\n    \"uid\": \"J6gn7d31L\",\n    \"provisioned\": false,\n    \"type\": \"query\",\n    \"config\": {\n      \"field\": \"message\",\n      \"target\": {},\n    }\n  },\n  {\n    \"description\": \"Loki to Tempo\",\n    \"label\": \"Another Label\",\n    \"sourceUID\": \"PDDA8E780A17E7EF1\",\n    \"targetUID\": \"P15396BDD62B2BE29\",\n    \"uid\": \"uWCpURgVk\",\n    \"provisioned\": false,\n    \"type\": \"query\",\n    \"config\": {\n      \"field\": \"message\",\n      \"target\": {},\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Alert Summary Annotation Text\nDESCRIPTION: Provides an example text string for the 'summary' annotation in a Grafana alert rule. This concise summary explains the condition that triggered the alert, such as CPU usage exceeding a threshold.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rules/annotation-label.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCPU usage has exceeded 80% for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Verifying File Watcher Limit on Linux (Bash)\nDESCRIPTION: Reads and prints the current value of the kernel parameter `fs.inotify.max_user_watches` directly from the proc filesystem (`/proc/sys/fs/inotify/max_user_watches`). This command is used on Linux systems to confirm if the file watcher limit was successfully updated, expecting output like `524288` after applying the increase.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/sys/fs/inotify/max_user_watches\n```\n\n----------------------------------------\n\nTITLE: Displaying Grizzly Help in Shell\nDESCRIPTION: This command executes the Grizzly (`grr`) CLI tool with the `--help` flag. Its purpose is to display the available commands, options, and general usage instructions for the Grizzly tool.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ grr --help\n```\n\n----------------------------------------\n\nTITLE: Adding the Stable Grafana APT Repository - Bash\nDESCRIPTION: Appends the stable Grafana repository to the system's sources list using the signed key for package verification. Requires prior GPG key installation. Inputs: None. Outputs: Updates /etc/apt/sources.list.d/grafana.list for stable releases.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main\" | sudo tee -a /etc/apt/sources.list.d/grafana.list\n```\n\n----------------------------------------\n\nTITLE: Defining Alert Summarization Logic in Go Template\nDESCRIPTION: Defines a template named '__default_alerts_summarize' that iterates over a collection of alerts (passed as context). For each alert in the collection, it invokes the '__default_alert_labels' and '__default_alert_annotations' templates to display the alert's details.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n[[- define \"__default_alerts_summarize\" -]]\n[[- range . ]]\n[[- template \"__default_alert_labels\" . ]]\n[[- template \"__default_alert_annotations\" . ]]\n[[ end ]]\n[[- end -]]\n```\n\n----------------------------------------\n\nTITLE: Including Field Overrides Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation for field override options from `visualizations/overrides-options.md`. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Basic Required Field Validation in Form (JavaScript/JSX)\nDESCRIPTION: Details how to perform simple required-field validation in a form using react-hook-form. The snippet shows indicating an invalid state, displaying an error, and providing a default value, with references to default state and error mapping. Dependencies include Form, Field, Input from @grafana/ui, and react-hook-form registration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Form ...>{\n  ({register, errors}) => (\n    <>\n      <Field invalid={!!errors.name} error={errors.name && 'Name is required'}\n      <Input\n        {...register(\"name\", { required: true })}\n        defaultValue={default.name}\n      />\n    </>\n  )}\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Referencing Grafana Queries as Parameters using #[A-Z]\nDESCRIPTION: Grafana allows referencing the results of other queries within the same panel using the `#[A-Z]` syntax (e.g., `#A`, `#B`, `#C`). This enables using the output of one query (e.g., a specific metric series) as an input parameter to a Graphite function in another query line.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_3\n\nLANGUAGE: Grafana Query Reference Syntax\nCODE:\n```\n#[A-Z]\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Updating a Shared Dashboard in Grafana\nDESCRIPTION: This HTTP response shows the successful update of a shared dashboard, returning the complete updated dashboard configuration including its UID, access token, and modified settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 78\n\n{\n    \"uid\": \"cd56d9fd-f3d4-486d-afba-a21760e2acbe\",\n    \"dashboardUid\": \"xCpsVuc4z\",\n    \"accessToken\": \"5c948bf96e6a4b13bd91975f9a2028b7\",\n    \"createdBy\": 1,\n    \"updatedBy\": 1,\n    \"createdAt\": \"2023-09-05T15:48:21-03:00\",\n    \"updatedAt\": \"2023-09-05T15:48:21-03:00\",\n    \"timeSelectionEnabled\": false,\n    \"isEnabled\": false,\n    \"annotationsEnabled\": false,\n    \"share\": \"public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Avatar component from Grafana UI. It shows setting up a user object and rendering the Avatar with custom props.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/Avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar } from '@grafana/ui';\n\nconst user = {\n  id: 5,\n  name: 'Admin',\n  email: 'admin@org.com',\n  avatarUrl: 'https://secure.gravatar.com/avatar',\n};\n\nconst Example = () => {\n  return <Avatar src={user.avatarUrl} alt={`Avatar for the user ${user.name}`} width={4} height={4} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Bulk Update Team Members Response Example - JSON\nDESCRIPTION: Returns a JSON message stating that team memberships have been updated. This confirms bulk addition or removal of members and administrators has been applied.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"message\\\":\\\"Team memberships have been updated\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Selectors for Components in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the structure of a versioned selector object used in Grafana's E2E testing framework. Keys are semantic version strings (e.g., '11.1.0', '9.5.0') representing the minimum Grafana version for which the associated selector value is valid. The value is typically a string selector (like a data-testid attribute) used to target UI elements. This mechanism allows tests to adapt to UI changes across different Grafana versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-e2e-selectors/src/selectors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst components = {\n PanelEditor: {\n   content: {\n        '11.1.0': 'data-testid Panel editor content', // resolved for Grafana >= 11.1.0\n        '9.5.0': 'Panel editor content', // resolved for Grafana >= 9.5.0 <11.1.0\n   },\n }\n ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata and Props Table in MDX\nDESCRIPTION: This snippet utilizes Storybook MDX syntax to register metadata for the Label component and display its prop types. The <Meta> tag specifies the story's title and the targeted component, while <ArgTypes of={Label} /> generates a prop table. This allows Storybook to automatically document all supported properties and conveys essential usage information for developers.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Label.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|Label\" component={Label} />\n\n# Label\n\nThe label component can be used to label form inputs with a heading/\"Option name\" and a description. To automatically have the right arrangement of this component with a form input, use the `Field` component. There is also a categorised variant of the label, where the heading shows nested categories before the actual option name.\n\nThis label component is used in full-page forms in Grafana, for example in the datasource settings. In some parts of Grafana, there are inline forms which do not use this type of label.\n\n### Props\n\n<ArgTypes of={Label} />\n```\n\n----------------------------------------\n\nTITLE: Showing Result of Outer Join on SQL-like Data\nDESCRIPTION: This Markdown table displays the outcome of applying an outer join transformation to the 'Students' and 'Enrollments' tables using 'StudentID'. It includes all rows from both tables, showing matched data and indicating unmatched rows with NULL values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n| StudentID | Name     | Major            | CourseID | Grade |\n| --------- | -------- | ---------------- | -------- | ----- |\n| 1         | John     | Computer Science | CS101    | A     |\n| 1         | John     | Computer Science | CS102    | B     |\n| 2         | Emily    | Mathematics      | MATH201  | A     |\n| 3         | Michael  | Physics          | PHYS101  | B     |\n| 4         | Jennifer | Chemistry        | NULL     | NULL  |\n| 5         | NULL     | NULL             | HIST101  | B     |\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Daemon Status - Bash\nDESCRIPTION: This snippet executes 'docker ps' to list all running Docker containers, confirming that the Docker daemon/service is active. Docker must be installed and running for this command to succeed. Input: None. Output: A tabular list of running containers, or an error if Docker is not active; used as a verification step before starting containers for the tutorial. No container is started or modified by this command.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/grafana-fundamentals/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n\n```\n\n----------------------------------------\n\nTITLE: PGP Signature Block for Manifest Verification\nDESCRIPTION: This block contains an ASCII-armored OpenPGP signature corresponding to the preceding JSON manifest data. Generated using OpenPGP.js v4.10.1 and signed by Grafana Labs (keyId: 7e4d0c6a708866e7), this signature allows verification of the manifest's integrity and authenticity using the Grafana Labs public PGP key. The hash algorithm used is SHA512, as indicated in the signed message header.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqIEARMKAAYFAmCkyjYACgkQfk0ManCIZufMrgIJAWouS5oNJixNsold48Jw\nBuCFtAT7cP0rqxiyu/Z1c06IIVcmEJg/KngcUDhP8bEN4xAunP7KfZktmGp9\n+8OqVbd/AgkBg9tWWgnMWln8XENca0ou1PTd/y24embsK3UNweqBAJPDL9el\nnnmA5UWS7pFiHQTLp/daE08o2FGclRbgHcOtFBI=\n=cSQ0\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorial Environment Repository with Git - Bash\nDESCRIPTION: This Bash snippet clones the tutorial environment repository from GitHub using Git. Git must be installed and available in your system's PATH. The cloned repository contains configuration files and assets required to set up Grafana, Loki, and Prometheus using Docker Compose. The only required parameter is the repository URL, and the output will be a directory named 'tutorial-environment' in the current directory. Run this command before setting up the environment with Docker.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/tutorial-environment.git\n\n```\n\n----------------------------------------\n\nTITLE: Querying Total Disk Bytes Written with PromQL\nDESCRIPTION: This PromQL query retrieves the time series data for the `node_disk_written_bytes_total` metric from a Prometheus data source. It filters the results to include only metrics associated with the job labeled `integrations/macos-node` and where the `device` label is not empty. This is typically used in Grafana's Metrics browser to visualize cumulative disk writes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-to-prometheus/index.md#2025-04-23_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nnode_disk_written_bytes_total{job=\"integrations/macos-node\", device!=\"\"}\n```\n\n----------------------------------------\n\nTITLE: Getting All Mute Timings via Grafana Provisioning API (HTTP Request)\nDESCRIPTION: Makes a GET request to the `/api/v1/provisioning/mute-timings` endpoint to retrieve all defined mute timings within Grafana's alerting provisioning system. Expects a 200 OK response containing the mute timings data, typically conforming to a 'MuteTimings' schema.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/mute-timings\n```\n\n----------------------------------------\n\nTITLE: Matching All Alerts with a Specific Label using Regex in Grafana\nDESCRIPTION: This regex pattern `team=~.+` is used within a Grafana notification policy's matching criteria. It selects all alert instances that have the label 'team' present with any non-empty value. This is demonstrated in an example where alerts are grouped based on the value of the 'team' label.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/group-alert-notifications.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nteam=~.+\n```\n\n----------------------------------------\n\nTITLE: RBAC Configuration Section - Grafana INI\nDESCRIPTION: This section header indicates the beginning of settings controlling Role-based Access Control in Grafana. It does not itself enable RBAC, but groups relevant options underneath. Dependencies include Grafana's enterprise features; further directive keys would be defined below this header. This is a namespace for settings and does not accept parameters on its own.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: ini\nCODE:\n```\n[rbac]\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Protocol to HTTPS - Bash\nDESCRIPTION: Enables HTTPS protocol for the image renderer's HTTP server using the HTTP_PROTOCOL environment variable. Effective from renderer version v3.11.0 and later. Possible values are 'http' and 'https', with default as 'http'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PROTOCOL=https\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Types for RangeSlider Documentation (TypeScript)\nDESCRIPTION: This snippet imports the `Meta` and `ArgTypes` components from `@storybook/blocks` to configure the Storybook documentation page and automatically generate controls for component props. It also imports the `RangeSliderProps` type definition from a relative path (`./types`), which is used by `ArgTypes` to document the component's interface.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { RangeSliderProps } from './types';\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Plugin Installation via Helm Chart (YAML)\nDESCRIPTION: This YAML snippet shows how to configure the Grafana Helm chart to automatically install specific plugins during deployment. It uses the `plugins` field within the Helm `values.yaml` file. The example lists two plugins: `grafana-oncall-app` version `v1.9.0`, fetched directly via its download URL, and `redis-datasource`, likely fetched by name from the default Grafana plugin repository. This method ensures plugins are consistently installed as part of the Grafana deployment managed by Helm.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - https://grafana.com/api/plugins/grafana-oncall-app/versions/v1.9.0/download;grafana-oncall-app\n  - redis-datasource\n```\n\n----------------------------------------\n\nTITLE: Checking Grafana Service Status with init.d (Linux)\nDESCRIPTION: Verifies the current status of the Grafana server service using the init.d script.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo service grafana-server status\n```\n\n----------------------------------------\n\nTITLE: Querying Hostnames for Templating Variable in PostgreSQL\nDESCRIPTION: Demonstrates a simple SQL query to retrieve all unique hostnames from a table. This query is used to populate a Grafana templating variable with hostname options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM host\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Including Shared Documentation in Grafana Docs\nDESCRIPTION: This snippet shows a Hugo shortcode used within the Grafana documentation source files (likely Markdown). It dynamically includes content from a shared markdown file ('dashboards/time-range-URLs.md') based on the specified source ('grafana') and version ('<GRAFANA_VERSION>'). This templating mechanism helps maintain consistency and reuse content across different parts or versions of the documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"dashboards/time-range-URLs.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Migrating ClipboardButton Component Callbacks in React\nDESCRIPTION: Example showing how to migrate from deprecated ClipboardButton component callbacks to the new simplified API. The new implementation accepts the copied text directly as the callback argument rather than a ClipboardEvent object.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta3.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ClipboardButton\n  {/*other props... */}\n  onClipboardCopy={(e) => {\n    console.log(`Text \"${e.text}\" was copied!`);\n  }}\n/>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<ClipboardButton\n  {/* other props... */}\n  onClipboardCopy={(copiedText) => {\n    console.log(`Text \"${copiedText}\" was copied!`);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Grafana E2E Test Plugin (Shell)\nDESCRIPTION: This shell command uses yarn to build the end-to-end test plugin in development mode. It watches for file changes within the plugin source directory and rebuilds the plugin automatically, useful during plugin development.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn e2e:plugin:build:dev\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Editor API Call Caching Experimental Feature\nDESCRIPTION: This feature toggle, `prometheusResourceBrowserCache`, activates experimental caching for Prometheus editor API calls directly within the Prometheus data source configuration. Enabling this cache is intended to improve the performance of the Prometheus query editor, particularly beneficial for users dealing with high-cardinality Prometheus instances.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-5.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nprometheusResourceBrowserCache\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Toggles in Grafana via INI Configuration\nDESCRIPTION: This INI configuration snippet shows how to enable feature toggles in the Grafana configuration file, specifically the 'panelTitleSearch' feature. The snippet should be added to the 'feature_toggles' section to enable new features, with each enabled feature separated by spaces. No additional dependencies are required, but changes will only take effect after saving the configuration and restarting the Grafana server. Only features compatible with the current Grafana version can be enabled this way.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/search-dashboards/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\n# enable features, separated by spaces\nenable = panelTitleSearch\n```\n\n----------------------------------------\n\nTITLE: Updated Message Initializer with Custom Phrase in Go\nDESCRIPTION: Modifies the NewMessage function to accept a custom phrase as an argument.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc NewMessage(phrase string) Message {\n    return Message(phrase)\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Request Count Evolution by Host in Grafana (Loki Query) - loki-query\nDESCRIPTION: This snippet comprises two Loki queries for use in a graph panel to visualize the number of successful and erroneous data requests over time, grouped by host. Use both queries in the same panel for comparison; each 'host' label represents a distinct Grafana server (high-availability scenarios). Inputs are the kind ('usage_insights'), eventName, and error status. Outputs are aggregated counts by host, split by success and error; outputs depend on the log fields present.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/export-logs.md#2025-04-23_snippet_4\n\nLANGUAGE: loki-query\nCODE:\n```\nsum by(host) (count_over_time({kind=\\\"usage_insights\\\"} | json | eventName=\\\"data-request\\\" | error != \\\"\\\" [$__interval]))\n```\n\nLANGUAGE: loki-query\nCODE:\n```\nsum by(host) (count_over_time({kind=\\\"usage_insights\\\"} | json | eventName=\\\"data-request\\\" | error = \\\"\\\" [$__interval]))\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart Data with Multiple Rows (Markdown Table)\nDESCRIPTION: Shows a data format using multiple rows with one value and one label column using a Markdown table. By default, the pie chart shows only the last row's value unless configured otherwise.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Label  |\n| ----- | ------ |\n| 5     | Value1 |\n| 3     | Value2 |\n| 2     | Value3 |\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds a YouTube video directly into the documentation page. The `id` parameter specifies the unique identifier of the YouTube video (`MSHeWWsHaIA`) to be displayed, providing a visual aid or tutorial related to the simplified exploration features.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"MSHeWWsHaIA\" >}}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorial for Grafana Pie Charts\nDESCRIPTION: Uses a Hugo shortcode (`youtube`) to embed a YouTube video tutorial directly into the documentation page. The video guides users through creating and customizing Grafana pie chart visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< youtube id=\"A_lDhM9w4_g\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:folders:reader\nDESCRIPTION: Specifies the `fixed:folders:reader` role (ID: `fixed_yeW-5QPeo-i5PZUIUXMlAA97GnQ`) within Grafana. This role grants `folders:read` and `dashboards:read` permissions, allowing users to read all folders and dashboards.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:folders:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_yeW-5QPeo-i5PZUIUXMlAA97GnQ\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- folders:read\n- dashboards:read\n```\n\n----------------------------------------\n\nTITLE: Creating Extended Variable Queries for CPU Metrics in InfluxDB\nDESCRIPTION: A query to retrieve CPU metrics for selected hosts, extending the variable chaining pattern by filtering CPU metrics based on previously selected datacenter and host variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_7\n\nLANGUAGE: influxql\nCODE:\n```\nSHOW TAG VALUES WITH KEY = \"cpu\" WHERE \"datacenter\" =~ /^$datacenter$/ AND \"host\" =~ /^$host$/\n```\n\n----------------------------------------\n\nTITLE: Displaying Confirmation Code in Grafana Template (Go Template)\nDESCRIPTION: This template placeholder inserts the unique confirmation code required for email verification into the email body. The `.ConfirmationCode` variable must be provided when rendering the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n[[.ConfirmationCode]]\n```\n\n----------------------------------------\n\nTITLE: MultiCombobox Props Documentation\nDESCRIPTION: Storybook ArgTypes component for displaying MultiCombobox props documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={MultiCombobox} />\n```\n\n----------------------------------------\n\nTITLE: CPU Time Series Metrics in Prometheus Format\nDESCRIPTION: CPU usage metrics broken down by CPU cores (0-7) and different modes (idle, iowait, irq, nice, etc). Each metric includes seconds_total as the counter and a millisecond-precision timestamp.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nnode_cpu,cpu=0,mode=idle seconds_total=99081.979999999996 1625842606118404128\nnode_cpu,cpu=0,mode=iowait seconds_total=53.490000000000002 1625842606118404128\nnode_cpu,cpu=0,mode=irq seconds_total=0 1625842606118404128\n```\n\n----------------------------------------\n\nTITLE: Capturing Browser Output - Bash\nDESCRIPTION: Sets RENDERING_DUMPIO to 'true', directing the headless browser's debug and error output to the main remote rendering process. Useful for troubleshooting rendering problems by capturing low-level browser errors. No other dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_DUMPIO=true\n```\n\n----------------------------------------\n\nTITLE: Customizing RadioButtonList Layout with CSS Grid (JSX)\nDESCRIPTION: Illustrates how to change the RadioButtonList/RadiobuttonGroup layout using a CSS-in-JS class via the className prop. The grid-template-columns style creates a multi-column display. Prerequisite is a CSS-in-JS solution (like Emotion) in the build. The component takes options, value, onChange, and className; the output is a visually distributed list of radio buttons.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonList/RadioButtonList.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioButtonList } from '@grafana/ui';\n\n<RadioButtonGroup\n  options={...}\n  value={...}\n  onChange={...}\n  className={css`\n    grid-template-columns: 1fr 1fr 1fr;\n  `}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Injection in Go Main Function\nDESCRIPTION: Demonstrates how to manually initialize and connect all components of the greeter program without using Wire.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    message := NewMessage()\n    greeter := NewGreeter(message)\n    event := NewEvent(greeter)\n\n    event.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Playlist via kubectl - Shell\nDESCRIPTION: This shell command submits a Playlist manifest to the Kubernetes API using a custom kubeconfig and the 'create' subcommand. It assumes that the playlist-generate.yaml file contains a valid Playlist resource definition. Success output will acknowledge creation.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig=./grafana.kubeconfig create -f playlist-generate.yaml\n```\n\n----------------------------------------\n\nTITLE: Resynchronizing Permissions after Access Control Migration in Grafana - SQL\nDESCRIPTION: This sequence of SQL DELETE statements resets dashboard, folder, and data source permissions by removing all roles and permissions with names matching 'managed:%' in the database, as well as relevant migration logs. This is necessary if RBAC and legacy access controls become out of sync due to version changes. Prerequisites include a full database backup prior to running these queries. After execution, all dashboard, folder, and data source permissions are realigned with those from the legacy access control, erasing any updates made under RBAC. These queries should be executed with caution on the Grafana database backend.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/troubleshooting/index.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDELETE\nFROM builtin_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\nDELETE\nFROM team_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\nDELETE\nFROM user_role\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\nDELETE\nFROM permission\nwhere role_id IN (SELECT id\n                  FROM role\n                  WHERE name LIKE 'managed:%');\nDELETE\nFROM role\nWHERE name LIKE 'managed:%';\nDELETE\nFROM migration_log\nWHERE migration_id IN ('teams permissions migration',\n                       'dashboard permissions',\n                       'dashboard permissions uid scopes',\n                       'data source permissions',\n                       'data source uid permissions',\n                       'managed permissions migration',\n                       'managed folder permissions alert actions repeated migration',\n                       'managed permissions migration enterprise');\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Specific Dependency Owner - Plaintext\nDESCRIPTION: This output shows the owner of the specified Go dependency as determined by the Modowners 'owners -d' command. The result is a single line with the owning team's identifier for reporting or verification.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n@grafana/grafana-backend-group\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Plugin Folder (Shell)\nDESCRIPTION: Changes the current working directory in the terminal to the newly created plugin directory, assumed to be named `my-plugin`. This step is necessary to run subsequent commands like dependency installation and building within the context of the plugin project.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd my-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating a Shared Dashboard in Grafana using HTTP PATCH\nDESCRIPTION: This HTTP request updates an existing shared dashboard by specifying the dashboard UID and public dashboard UID. It allows modification of settings like time selection, enabled status, annotations, and share mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/dashboards/uid/xCpsVuc4z/public-dashboards/cd56d9fd-f3d4-486d-afba-a21760e2acbe HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n    \"timeSelectionEnabled\": false,\n    \"isEnabled\": true,\n    \"annotationsEnabled\": false,\n    \"share\": \"public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Alert Annotations with Go Templating Language - Go\nDESCRIPTION: This snippet demonstrates how to use Go templating syntax within an annotation to display dynamic values such as the affected instance and the measured CPU usage. It incorporates variables like $labels.instance and $values.A.Value, which are contextually provided by Grafana's alerting system. This template should be applied to an annotation field (e.g., summary) in an alert rule definition and outputs descriptive plain text contextualizing why an alert was triggered.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/templates.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCPU usage for {{ $labels.instance }} has exceeded 80% ({{ $values.A.Value }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Executing Grafana Backend - Shell\nDESCRIPTION: These shell commands start the Grafana backend for Unified Storage development/demonstration. The 'bra run' and 'make run' commands launch Grafana in-process with relevant configurations; they require the correct working directory and the presence of an appropriate configuration file. It is assumed that the tool 'bra' and Makefile targets are available.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbra run\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Including Value Mappings Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation for value mapping options from `visualizations/value-mappings-options.md`. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/value-mappings-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Creating Graphite Annotation - HTTP+JSON\nDESCRIPTION: A sample server response after successfully creating an annotation using the Graphite endpoint. Returns a 'message' string and the generated annotation id. The response is in JSON format and confirms completion of the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n    \"message\":\"Graphite annotation added\",\\n    \"id\": 1\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Visualizations for Grafana Data Links using Hugo Shortcode\nDESCRIPTION: This snippet uses the Hugo `column-list` shortcode to display a list of Grafana visualization types where data links can be configured. Each item links to the respective visualization's documentation using reference links (`ref:`). This requires the Hugo static site generator with the custom `column-list` shortcode defined.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-data-links/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< column-list >}}\n\n- [Bar chart](ref:bar-chart)\n- [Bar gauge](ref:bar-gauge)\n- [Candlestick](ref:candlestick)\n- [Canvas](ref:canvas)\n- [Gauge](ref:gauge)\n- [Geomap](ref:geomap)\n- [Heatmap](ref:heatmap)\n- [Histogram](ref:histogram)\n- [Pie chart](ref:pie-chart)\n- [Stat](ref:stat)\n- [State timeline](ref:state-timeline)\n- [Status history](ref:status-history)\n- [Table](ref:table)\n- [Time series](ref:time-series)\n- [Trend](ref:trend)\n- [XY chart](ref:xy-chart)\n\n{{< /column-list >}}\n```\n\n----------------------------------------\n\nTITLE: Copying LDAP CA Certificate\nDESCRIPTION: Commands to retrieve the container ID and copy the CA certificate from the OpenLDAP container\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# get the container ID\ndocker ps\n\ndocker cp CONTAINER-ID:\"/container/service/:ssl-tools/assets/default-ca/default-ca.pem\" devenv/docker/blocks/auth/openldap/certs\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Divider with Direction Prop in @grafana/ui - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates importing the Divider component from @grafana/ui and configuring it to render vertically by passing the direction=\\\"vertical\\\" prop. It visually separates elements within a header, such as splitting a title from a logo. The dependencies are React and @grafana/ui. Key parameter is direction with the value \\\"vertical\\\". Should be used within a React component or JSX file.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Divider } from '@grafana/ui';\n\n    <header>\n        <h1>My title here</h1>\n        <Divider direction=\"vertical\" />\n        <img src=\"logo.png\" alt=\"logo\" />\n    </header>\n    <main>\n        <p>Main content goes here</p>\n    </main>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Functions in TypeScript\nDESCRIPTION: Demonstrates the proper way to name functions using camelCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconst CalculatePercentage = () => { ... }\n// bad\nconst calculate_percentage = () => { ... }\n\n// good\nconst calculatePercentage = () => { ... }\n```\n\n----------------------------------------\n\nTITLE: Receiving Success Response After Team Preferences Update - HTTP\nDESCRIPTION: This snippet demonstrates the expected HTTP response when team preferences are successfully updated via the Grafana API. The response contains a status code of 200 and a plain text JSON message confirming the update. No dependencies or parameters are involved at this stage—this is the result of a valid update request.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: text/plain; charset=utf-8\\n\\n{\\n  \"message\":\"Preferences updated\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Regexp Structure in Go\nDESCRIPTION: Defines the Regexp type as an interface{} with a comment about its thread-safety.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_45\n\nLANGUAGE: go\nCODE:\n```\n> A Regexp is safe for concurrent use by multiple goroutines,\n> except for configuration methods, such as Longest.\n\n[interface{}](#interface)\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Diagram using Hugo Figure Shortcode\nDESCRIPTION: Uses the Hugo 'figure' shortcode to embed an image visualizing how alert rules forward firing alerts either directly to a contact point or through notification policies. The snippet specifies the image source path, maximum display width, alternative text for accessibility, and a descriptive caption.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/notifications/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/alerting/alerting-configure-notifications-v2.png\" max-width=\"750px\" alt=\"Configure alert rules to forward firing alerts directly to a contact point or through notification policies\" caption=\"Configure alert rules to forward firing alerts directly to a contact point or through notification policies\" >}}\n```\n\n----------------------------------------\n\nTITLE: Translating Prop Values in Components (React, TypeScript/JSX)\nDESCRIPTION: This set of code snippets demonstrates how to ensure that string props, such as placeholder, are properly localized using the t() translation function from Grafana's i18n utilities. The bad example hardcodes the placeholder, while the good example first translates it. Dependencies: React, t() function from @grafana/i18n, corresponding UI components. Inputs: string props in JSX. Outputs: properly internationalized components that display locale-aware placeholder text or attribute values.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Bad ❌\n<input type=\"value\" placeholder={'Username'} />;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Good ✅\nconst placeholder = t('form.username-placeholder', 'Username');\nreturn <input type=\"value\" placeholder={placeholder} />;\n```\n\n----------------------------------------\n\nTITLE: Grafana MSSQL Connection Parameters\nDESCRIPTION: Connection parameters for configuring Grafana's MSSQL datasource to connect to the Azure SQL Edge instance. These credentials are used for local development and testing.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mssql_arm64/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHost: localhost\nDatabase: master\nUser: sa\nPassword: Password! (or MSSQL_SA_PASSWORD value from docker-compose.yaml)\n```\n\n----------------------------------------\n\nTITLE: Toggling Panel Legend Visibility - Markdown\nDESCRIPTION: Defines 'pl' as the keyboard shortcut for hiding or showing the legend on the selected panel. It works when hovering over a panel with no dependencies other than standard keyboard shortcut availability.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n`pl`\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Tutorial Environment - Bash\nDESCRIPTION: This snippet changes the current working directory to the cloned \"tutorial-environment\" repository. It assumes that the repository was successfully cloned in the previous step and exists in the local directory structure. Input: None; Output: Shell working directory changed to \"tutorial-environment\".\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tutorial-environment\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana using Zypper (Bash)\nDESCRIPTION: Updates all installed packages, including Grafana, using the Zypper package manager. This command is intended for openSUSE or SUSE Linux Enterprise systems where Grafana was installed via repositories managed by Zypper.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper update\n```\n\n----------------------------------------\n\nTITLE: Opening Panel in Explore Mode - Markdown\nDESCRIPTION: Denotes 'px' as the keyboard shortcut to open a hovered Grafana panel in Explore mode. Explore mode enables deeper investigation of data. Prerequisite is a hovered panel and the shortcut's activation is dependent on user's Explore permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`px`\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta for Tag Component in JSX\nDESCRIPTION: This snippet sets up the Storybook Meta component for the Tag. It specifies the title for the documentation and associates it with the Tag component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"MDX|Tag\" component={Tag} />\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image Figure using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode (`figure`) embeds an image illustrating a histogram example into the documentation. It specifies the image source path (`src`), sets a maximum display width (`max-width`) for responsiveness, and provides a descriptive caption (`caption`). Hugo processes this shortcode to generate the appropriate HTML figure element.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/intro-histograms/index.md#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{< figure src=\"/static/img/docs/histogram-panel/histogram-example-v8-0.png\" max-width=\"625px\" caption=\"Bar chart example\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control Service Scope in Grafana RBAC\nDESCRIPTION: The `services:accesscontrol` scope restricts an action specifically to the role-based access control service itself. This is often used in conjunction with `status:accesscontrol` actions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_41\n\nLANGUAGE: text\nCODE:\n```\nservices:accesscontrol\n```\n\n----------------------------------------\n\nTITLE: Configuring Local NPM Registry for @grafana Scope in .npmrc\nDESCRIPTION: This configuration line, when added to an `.npmrc` file in a project (like a plugin), directs the package manager (npm or yarn) to fetch packages belonging to the `@grafana` scope from the specified local registry URL (typically a Verdaccio instance running locally) instead of the default public npm registry.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n@grafana:registry=http://localhost:4873/\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Annotation Query Example\nDESCRIPTION: SQL query example for creating annotations in Grafana dashboards. Demonstrates how to select title and description from events table with time filtering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT title, description\nfrom events\nWHERE $timeFilter\nORDER BY time ASC\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Jaeger Tracing Endpoint (INI)\nDESCRIPTION: An INI configuration snippet for Grafana's `config.ini` file. It specifies the Jaeger collector's API endpoint address (`http://localhost:14268/api/traces`) under the `[tracing.opentelemetry.jaeger]` section, enabling Grafana to send traces to a local Jaeger instance started via `make devenv`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[tracing.opentelemetry.jaeger]\naddress = http://localhost:14268/api/traces\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Browser Arguments - Bash\nDESCRIPTION: Configures headless browser startup options using RENDERING_ARGS. Accepts a comma-separated list of Chromium command-line flags, such as '--no-sandbox' or '--window-size=1280x758', to modify browser runtime behavior for rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_ARGS=--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage,--disable-accelerated-2d-canvas,--disable-gpu,--window-size=1280x758\n```\n\n----------------------------------------\n\nTITLE: Registering PanelContainer with Storybook Meta (TSX/MDX)\nDESCRIPTION: This snippet uses the Storybook Meta component to register the PanelContainer for documentation and preview within the Storybook UI. The title sets the documentation section to 'MDX|PanelContainer' and links the component prop to the imported PanelContainer instance, making it visible and interactive in Storybook. This requires Storybook and the related blocks package to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelContainer/PanelContainer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Meta title=\\\"MDX|PanelContainer\\\" component={PanelContainer} />\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces in TypeScript\nDESCRIPTION: Shows the correct way to define interfaces using PascalCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\ninterface buttonProps {\n  //...\n}\n// bad\ninterface button_props {\n  //...\n}\n// bad\ninterface IButtonProps {\n  //...\n}\n\n// good\ninterface ButtonProps {\n  //...\n}\n\n// bad\ntype requestInfo = ...\n// bad\ntype request_info = ...\n\n// good\ntype RequestInfo = ...\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart Data with a Single Row (Markdown Table)\nDESCRIPTION: Illustrates the simplest data format for a pie chart using a Markdown table. A single row containing multiple numeric columns is shown, where each column represents a slice in the pie chart by default.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Value1 | Value2 | Value3 | Optional |\n| ------ | ------ | ------ | -------- |\n| 5      | 3      | 2      | Sums10   |\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Service Host - JSON\nDESCRIPTION: Configures the renderer's JSON file to set the service's host property, specifying the network interface for the HTTP server. Default behavior without this setting is to use the local host.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"host\": \"localhost\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Title Items and Actions to PanelChrome in React\nDESCRIPTION: Shows how to enhance the `PanelChrome` header by adding custom React elements. The `titleItems` prop is used to insert components (like `IconButton`s) next to the title, while the `actions` prop allows adding elements (like a `Button`) to the right side of the header, enabling more complex panel interactions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  titleItems={\n    <>\n      <IconButton\n        className={css`\n          margin-right: 10px;\n        `}\n        name=\"github\"\n        variant=\"secondary\"\n        tooltip=\"extra content to render\"\n      />\n      <IconButton name=\"sliders-v-alt\" variant=\"secondary\" tooltip=\"extra content2 to render\" />\n    </>\n  }\n  actions={\n    <Button size=\"sm\" variant=\"secondary\" key=\"A\">\n      Breakdown\n    </Button>\n  }\n  width={500}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'rgba(230,0,0,0.05)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        New panel with old API\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Data Source Health Check Response in HTTP\nDESCRIPTION: Example response for a successful health check of a CloudWatch data source, indicating successful API queries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"message\": \"1. Successfully queried the CloudWatch metrics API.\\n2. Successfully queried the CloudWatch logs API.\",\n  \"status\": \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Variable Passing with Trans Component using 'values' Prop in JSX\nDESCRIPTION: Shows how to use the `values` prop on the `<Trans>` component to explicitly pass variables (like `term` mapped to `myVariable`). This allows referencing the variable using `{{ myVariable }}` within nested components (`Text`) that also contain translatable text. Requires `Trans` and potentially UI components.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\nimport { Text } from '@grafana/ui';\n\nconst SearchTitle = ({ term }) => (\n  <Trans i18nKey=\"search-page.results-title\" values={{ myVariable: term }}>\n    Results for <Text color=\"success\">{'{{ myVariable }}'} and this translated text is also in green</Text>\n  </Trans>\n);\n```\n\n----------------------------------------\n\nTITLE: Presenting Arrow Base64 Encoded Test Data Response - Plaintext\nDESCRIPTION: This snippet contains an Arrow-encoded base64 string representing the equivalent of the system data frame tabular information. It serves for interoperability and allows for performance and schema validation workflows in Grafana. There are no external runtime dependencies for reading the string, but decoding and interpreting the Arrow format requires the Arrow library stack in supported languages. Key parameters are the base64 string and its mapping to row/field data, with the output being deserialized frames matching the in-memory schema. Limitations: Manual editing is discouraged as corruption is possible; usage is primarily for automated test ingestion.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.golden.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFRAME=QVJST1cxAAD/////mAIAABAAAAAAAAoADgAMAAsABAAKAAAAFAAAAAAAAAEDAAoADAAAAAgABAAKAAAACAAAAFQAAAACAAAAKAAAAAQAAADs/p...Snipped for brevity...AAABBUlJPVzE=\n```\n\n----------------------------------------\n\nTITLE: Using __searchFilter with Query Variables in Graphite\nDESCRIPTION: Example using the __searchFilter placeholder in a query to filter results based on user input in the dropdown select box.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/template-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napps.$app.servers.$__searchFilter\n```\n\n----------------------------------------\n\nTITLE: Rendering ArgTypes Table for Cascader Props - Markdown/JSX\nDESCRIPTION: Renders an interactive table using Storybook's ArgTypes block, displaying all configurable properties of the Cascader component. This enables users to review and understand available props and their expected types directly within the documentation. The component must be imported, and the ArgTypes block must be supplied with the correct component reference as shown.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ArgTypes of={Cascader} />\n```\n\n----------------------------------------\n\nTITLE: Handling JSX/HTML within Trans Component Interpolation in JSX\nDESCRIPTION: Illustrates that directly interpolating JSX elements as variables (`{{ userName }}`) within `<Trans>` does not work. Instead, embed the JSX tags directly within the `<Trans>` component's children and interpolate the string variable inside the tags. Requires `Trans` import.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\n\n// This will not work\nconst userName = <strong>user.name</strong>;\n<Trans i18nKey=\"page.greeting\">Hello {{ userName }}!</Trans>;\n\n// Instead, put the JSX inside the phrase directly\nconst userName = user.name;\n<Trans i18nKey=\"page.greeting\">\n  Hello <strong>{{ userName }}</strong>!\n</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as CSV String\nDESCRIPTION: Demonstrates the `:csv` format option for Grafana variables. This formats variables with multiple values into a single comma-separated string without quotes. The example shows an array `['test1', 'test2']` interpolated as `'test1,test2'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1', 'test2']\nString to interpolate: '${servers:csv}'\nInterpolation result: 'test1,test2'\n```\n\n----------------------------------------\n\nTITLE: Including Shared Configuration Options Introduction via Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation content from a specified file (`lookup`). It targets the introduction to visualization configuration options (`config-options-intro.md`) for the 'grafana' source, using a placeholder (`<GRAFANA_VERSION>`) for the Grafana version to ensure version-specific content is displayed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/config-options-intro.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Custom Role via YAML Provisioning - YAML Example\nDESCRIPTION: This YAML snippet shows how to mark a custom role ('custom:reports:editor') for deletion in Grafana's provisioning config by setting its state to 'absent' and force to true. After updating the config file, reloading provisioning removes the role and all its assignments. Inputs: role name/uid, organization id, 'absent' state and force flag; outputs: custom role removal. Requires access to configuration and reload privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 2\n\nroles:\n  - name: 'custom:reports:editor'\n    orgId: 1\n    state: 'absent'\n    force: true\n\n```\n\n----------------------------------------\n\nTITLE: Estimating Required Open File Count for Grafana Build (Bash)\nDESCRIPTION: This command uses `find` to list files in key Grafana directories (`./conf`, `./pkg`, `./public/views`) that are typically watched for changes during development builds (`make run`). The output is piped to `wc -l` to count the number of files, providing an estimate for setting an appropriate open files limit (`ulimit -n`).\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfind ./conf ./pkg ./public/views | wc -l\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in Grafana Expressions\nDESCRIPTION: The floor function rounds a number down to the nearest integer value. It works with numeric inputs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nfloor(3.123)\n```\n\n----------------------------------------\n\nTITLE: Interpolating Variables with Trans Component in JSX\nDESCRIPTION: Illustrates using the `<Trans>` component within a React functional component (`SearchTitle`) to translate text containing a dynamic variable (`term`). The variable is interpolated using double curly braces. Requires importing `Trans` from `app/core/internationalization`.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\n\nconst SearchTitle = ({ term }) => <Trans i18nKey=\"search-page.results-title\">Results for {{ term }}</Trans>;\n```\n\n----------------------------------------\n\nTITLE: CPU Usage Metrics in InfluxDB Line Protocol\nDESCRIPTION: InfluxDB line protocol data showing CPU usage metrics across multiple cores with various metrics including user, system, idle, nice, iowait, irq, softirq, steal, guest, and guest_nice percentages. Data is collected from a MacBook Pro with measurements taken at timestamps 1616403089000000000 and 1616403090000000000.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/part_metrics_different_labels_different_time.txt#2025-04-23_snippet_0\n\nLANGUAGE: influxdb\nCODE:\n```\ncpu,cpu=cpu9,host=MacBook-Pro-Alexander.local usage_guest=0,usage_user=0,usage_system=0,usage_idle=100,usage_nice=0,usage_iowait=0,usage_softirq=0,usage_irq=0,usage_steal=0,usage_guest_nice=0 1616403089000000000\ncpu,cpu=cpu10,host=MacBook-Pro-Alexander.local usage_system=0,usage_idle=100,usage_nice=0,usage_guest=0,usage_guest_nice=0,usage_user=0,usage_iowait=0,usage_irq=0,usage_softirq=0,usage_steal=0 1616403089000000000\ncpu,cpu=cpu11,host=MacBook-Pro-Alexander.local usage_guest_nice=0,usage_user=0,usage_idle=100,usage_nice=0,usage_softirq=0,usage_guest=0,usage_system=0,usage_iowait=0,usage_irq=0,usage_steal=0 1616403089000000000\ncpu,cpu=cpu-total,host=MacBook-Pro-Alexander.local usage_nice=0,usage_iowait=0,usage_irq=0,usage_idle=95.8368026645606,usage_system=1.4987510408004405,usage_softirq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=2.6644462947563388 1616403089000000000\ncpu,cpu=cpu0,host=MacBook-Pro-Alexander.local usage_system=6.000000000005457,usage_idle=82.00000000012005,usage_nice=0,usage_irq=0,usage_steal=0,usage_guest=0,usage_guest_nice=0,usage_user=12.000000000033651,usage_iowait=0,usage_softirq=0 1616403090000000000\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Device Scale Factor - Bash\nDESCRIPTION: Uses RENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR to restrict the device scale factor parameter for rendering. Prevents excessive memory/cpu usage for extremely high-resolution renders. Default max is 4. Requires v3.9.0+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n# Available from v3.9.0+\nRENDERING_VIEWPORT_MAX_DEVICE_SCALE_FACTOR=4\n```\n\n----------------------------------------\n\nTITLE: Complex reducerTester Usage with Predicates in TypeScript\nDESCRIPTION: Shows advanced usage of reducerTester when dealing with complex states containing properties difficult to compare directly (like Date objects). Uses a predicate function to evaluate individual properties in the resulting state.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreducerTester()\n  .givenReducer(someReducer, initialState)\n  .whenActionIsDispatched(someAction('reducer tests'))\n  .thenStatePredicateShouldEqual((resultingState) => {\n    expect(resultingState.data).toEqual('reducer tests');\n    return true;\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for RangeSlider Documentation (MDX)\nDESCRIPTION: This MDX/JSX snippet utilizes the `Meta` component imported from Storybook to set the title of the documentation page to \"MDX|RangeSlider\". This title organizes the component within the Storybook UI sidebar, indicating it's part of the MDX documentation section.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/RangeSlider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|RangeSlider\" />\n```\n\n----------------------------------------\n\nTITLE: Querying List of Migration Snapshots with Grafana API - Bash\nDESCRIPTION: This curl command retrieves the list of migration snapshots for a session from the Grafana API. It sends a GET request to /api/cloudmigration/migration/{sessionUid}/snapshots with pagination parameters limit and page. Dependencies: curl and admin access to a Grafana instance. Replace {sessionUid} as required; the output lists up to 100 snapshots per page.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshots?limit=100&page=1\n```\n\n----------------------------------------\n\nTITLE: Defining ReceiverExport Structure in Go\nDESCRIPTION: Defines the ReceiverExport structure with properties for configuring alert receivers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_44\n\nLANGUAGE: go\nCODE:\n```\n**Properties**\n\n| Name                    | Type                       | Go type    | Required | Default | Description | Example |\n| ----------------------- | -------------------------- | ---------- | :------: | ------- | ----------- | ------- |\n| `disableResolveMessage` | boolean                    | `bool`     |          |         |             |         |\n| `settings`              | [RawMessage](#raw-message) | RawMessage |          |         |             |         |\n| `type`                  | string                     | string     |          |         |             |         |\n| `uid`                   | string                     | string     |          |         |             |         |\n```\n\n----------------------------------------\n\nTITLE: Discouraged Use of Returns Tag for Obvious Functions - TypeScript\nDESCRIPTION: This code snippet exemplifies a discouraged TSDoc practice where a @returns tag describes the output of a simple, self-evident function. The isEqual function returns a boolean indicating equality between two numbers, which is already evident from context and TypeScript types. The comment demonstrates over-documentation for elementary logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Compares two numbers to see if they are equal to each other.\n *\n * @returns true if values are equal\n * @public\n **/\nexport const isEqual = (x: number, y: number): boolean => {\n  return x === y;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring grafana-server systemd Unit - INI\nDESCRIPTION: Provides the complete contents for a systemd unit file to manage Grafana server as a service on Linux. Requires editing /etc/systemd/system/grafana-server.service with these directives after installation. Sets up service start order, user/group security, restart on failure, and systemd integration. Inputs: None. Outputs: Grafana is launched via systemd under the appropriate user and directory layout.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Grafana Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=grafana\nGroup=users\nExecStart=/usr/local/grafana/bin/grafana server --config=/usr/local/grafana/conf/grafana.ini --homepath=/usr/local/grafana\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Example Response for Getting Users in an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) containing a JSON array of users within the specified Grafana organization. Each object in the array includes the user's `orgId`, `userId`, `email`, `login`, and `role`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"orgId\":1,\n    \"userId\":1,\n    \"email\":\"admin@mygraf.com\",\n    \"login\":\"admin\",\n    \"role\":\"Admin\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider for Grafana - Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Terraform provider for Grafana by specifying the required provider (with minimum version) and authentication details. It includes the definition of provider block with placeholders for Grafana instance URL and API key, which are prerequisites for connecting Terraform to Grafana. Inputs to replace: \\u003cgrafana-url\\u003e (the URL of your Grafana instance) and \\u003capi-key\\u003e (a valid API token). Provider version must be 2.9.0 or higher. Output: successful authentication and ability to manage resources in the specified Grafana instance. Note: Actual values must NOT be hardcoded in production.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform {\n    required_providers {\n        grafana = {\n            source = \"grafana/grafana\"\n            version = \">= 2.9.0\"\n        }\n    }\n}\n\nprovider \"grafana\" {\n    url = \\u003cgrafana-url\\u003e\n    auth = \\u003capi-key\\u003e\n}\n\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger Locally using Grafana Devenv (Bash)\nDESCRIPTION: A bash command using `make` to start the Jaeger tracing backend via the Grafana development environment (`devenv`). This command is the first step in setting up a local environment for collecting and visualizing traces generated by Grafana during development.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nmake devenv sources=jaeger\n```\n```\n\n----------------------------------------\n\nTITLE: Blocking All Web Crawlers in robots.txt\nDESCRIPTION: This configuration snippet is part of a `robots.txt` file. The `User-agent: *` line indicates that the following rules apply to all web crawlers. The `Disallow: /` line instructs these crawlers not to access any part of the website, starting from the root directory. This effectively prevents the site from being indexed by search engines or other automated bots.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Rendering Badge Component Props Documentation\nDESCRIPTION: Displays the automatically generated documentation for all props available on the Badge component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={Badge} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Permitted Provisioning Paths for File-Based Sync in Grafana - INI\nDESCRIPTION: This snippet defines which local file system paths are allowed for file provisioning in Grafana. By editing the '[paths]' section of grafana.ini or custom.ini, administrators specify directories that Grafana can use for provisioning synced dashboards and folders. Multiple paths can be listed using a pipe ('|') separator, and the paths must not have empty values or trailing pipes. These paths restrict local path selection from the UI when setting up file provisioning and need to match the working directory structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/file-path-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[paths]\n; This is devenv/dev-dashboards and conf/provisioning by default.\npermitted_provisioning_paths = grafana/ | /etc/grafana/provisioning/\n\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests for Grafana Plugin (Shell)\nDESCRIPTION: This shell command uses yarn to execute Playwright tests. The '--project extensions-test-app' argument specifies that only the tests associated with the 'extensions-test-app' project configuration should be run. This command runs the end-to-end test suite against the running Grafana instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn playwright test --project extensions-test-app\n```\n\n----------------------------------------\n\nTITLE: Displaying Grid Component Properties with ArgTypes in MDX\nDESCRIPTION: This snippet utilizes the `ArgTypes` component imported from Storybook blocks. By passing the `Grid` component to the `of` prop (`<ArgTypes of={Grid} />`), it automatically introspects the component's properties (props) and generates an interactive table displaying their names, types, default values, and descriptions. This relies on the component having well-defined prop types or being written in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<ArgTypes of={Grid} />\n```\n\n----------------------------------------\n\nTITLE: System Metrics in InfluxDB Line Protocol\nDESCRIPTION: Line protocol metric data capturing system statistics including CPU load averages (1, 5, 15 min), number of CPUs, and active users. Tags include host information and a custom label. Timestamp is in nanosecond precision.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/single_metric.txt#2025-04-23_snippet_0\n\nLANGUAGE: influx\nCODE:\n```\nsystem,host=MacBook-Pro-Alexander.local,mylabel=boom load15=2.00341796875,n_cpus=12i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403089000000000\n```\n\n----------------------------------------\n\nTITLE: Confirmation of Organization Creation (Admin API) - JSON\nDESCRIPTION: JSON response for successful organization creation in admin mode, returning the orgId of the created entity and a message indicating success. This allows programmatic verification and further processing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"orgId\":\"1\",\\n  \"message\":\"Organization created\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Section Menu with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically generates a menu listing related documentation sections or pages based on the site structure. The `menuTitle=\"true\"` parameter configures the shortcode to use the titles of the linked pages as the menu item text, effectively creating a navigation list for specific upgrade guides. This requires the Hugo static site generator environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< section menuTitle=\"true\">}}\n```\n\n----------------------------------------\n\nTITLE: Adjusting and Formatting Alert Timezones with 'tz' and 'date' in Grafana Go Templates\nDESCRIPTION: This snippet uses the 'tz' function to shift the .StartsAt time for each alert into a specific timezone (e.g., Europe/Paris), then pipes the result through 'date' for formatted output (such as '21:01:45 CET'). Requires .Alerts as input and timezone string as a parameter. Outputs are timezone-adjusted and formatted date strings, supporting local display of alert events.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ range .Alerts }}\n    {{ .StartsAt | tz \"Europe/Paris\" }}\n    {{ .StartsAt | tz \"Europe/Paris\" | date \"15:04:05 MST\" }}\n  {{ end}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Appending Verification Code to URL using Go Template\nDESCRIPTION: This Go template snippet retrieves and appends the unique verification code (`.Code`) as a query parameter to the verification URL. The `.Code` variable is provided by the Grafana backend during template rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_4\n\nLANGUAGE: Go Template\nCODE:\n```\n[[.Code]]\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in Grafana (Bash)\nDESCRIPTION: Command to start Grafana server with tracing enabled and specifying a custom trace file location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./grafana server -tracing -tracing-file=/tmp/trace.out\n```\n\n----------------------------------------\n\nTITLE: Toggling Panel Edit Mode - Markdown\nDESCRIPTION: This snippet highlights the keyboard shortcut for toggling the panel's edit mode in Grafana using the 'e' key. The context is when a user hovers over a Grafana panel. No code dependencies exist; the shortcut simply opens or closes the edit view for the hovered panel. This requires that keyboard shortcuts be active in the user session.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`e`\n```\n\n----------------------------------------\n\nTITLE: Retrieving CA Certificate for Caddy TLS\nDESCRIPTION: This command retrieves the CA certificate from the Caddy TLS container, which may be needed for configuring Grafana Alerting.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-caddy_tls-1 cat /etc/caddy/ca.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring App Plugin Access with YAML Provisioning\nDESCRIPTION: This YAML configuration demonstrates how to modify the basic viewer role using Grafana's provisioning system. It removes general app plugin access and grants specific access to the kentik-connect-app plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: 2\n\nroles:\n  - name: 'basic:viewer'\n    version: 8\n    global: true\n    from:\n      - name: 'basic:viewer'\n        global: true\n    permissions:\n      - action: 'plugins.app:access'\n        scope: 'plugins:*'\n        state: 'absent'\n      - action: 'plugins.app:access'\n        scope: 'plugins:id:kentik-connect-app'\n        state: 'present'\n```\n\n----------------------------------------\n\nTITLE: Announced Deprecations Table in Markdown\nDESCRIPTION: This table lists the currently announced deprecations in Grafana, including the feature name, announcement date, disabling date, removal date, description, and current status.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/deprecation-policy.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                     | Announcement Date | Disabling date | Removal Date | Description                                                                                                             | Status  |\n| ------------------------------------------------------------------------ | ----------------- | -------------- | ------------ | ----------------------------------------------------------------------------------------------------------------------- | ------- |\n| [Support for Mysql 5.7](https://github.com/grafana/grafana/issues/68446) | 2023-05-15        | October 2023   |              | MySQL 5.7 is being deprecated in October 2023 and Grafana's policy is to test against the officially supported version. | Planned |\n```\n\n----------------------------------------\n\nTITLE: StatementPosition Resolver Type Definition\nDESCRIPTION: Defines the type signature for resolvers that determine the cursor position context within a SQL query. Takes token context parameters and returns a boolean.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StatementPositionResolver = (\n  currentToken: LinkedToken | null,\n  previousKeyword: LinkedToken | null,\n  previousNonWhiteSpace: LinkedToken | null,\n  previousIsSlash: Boolean // To be removed as it's CloudWatch specific\n) => Boolean;\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana API Keys (Plaintext)\nDESCRIPTION: Defines the `apikeys:read` permission action necessary to read API keys within Grafana. Access is associated with the scopes `apikeys:*` and `apikeys:id:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`apikeys:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`apikeys:*`</li><li>`apikeys:id:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Writing a Test with Parameterized Selectors\nDESCRIPTION: TypeScript test example demonstrating how to use parameterized selectors to click on a specific data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('List test', () => {\n  it('clicks on data source named B', () => {\n    e2e.pages.DataSources.visit();\n    // To prevent flaky tests, always do a .should on any selector that you expect to be in the DOM.\n    // Read more here: https://docs.cypress.io/guides/core-concepts/retry-ability.html#Commands-vs-assertions\n    e2e.pages.DataSources.dataSources('B').should('be.visible').click();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Image for Scheme Gradient Mode with Thresholds using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds an image illustrating how the 'Scheme' gradient mode appears when the color scheme is set to 'From thresholds (by value)'. It renders an HTML figure element containing the specified image, setting its source, maximum width, and alternative text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_0\n\nLANGUAGE: Hugo Shortcode\nCODE:\n```\n{{< figure src=\"/static/img/docs/time-series-panel/gradient_mode_scheme_thresholds_line.png\" max-width=\"1200px\" alt=\"Colors scheme: From thresholds\" >}}\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Owners with Dependency Counts - Plaintext\nDESCRIPTION: This snippet showcases a sample output from running the 'owners -a -c' command with Modowners. The output lists teams and the number of dependencies they own, each on its own line. This provides insight into ownership distribution across teams for audit or reporting purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n@grafana/grafana-release-guild 5\\n@grafana/grafana-bi-squad 2\\n@grafana/grafana-app-platform-squad 13\\n@grafana/observability-metrics 4\\n@grafana/observability-traces-and-profiling 6\\n@grafana/aws-datasources 2\\n@grafana/alerting-squad-backend 22\\n@grafana/plugins-platform-backend 7\\n@grafana/grafana-operator-experience-squad 3\\n@grafana/dataviz-squad 1\\n@grafana/grafana-backend-group 75\\n@grafana/grafana-as-code 11\\n@grafana/identity-access-team 6\\n@grafana/partner-datasources 4\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request for Updating a Grafana Role\nDESCRIPTION: Illustrates an HTTP PUT request to the `/api/access-control/roles/:uid` endpoint to update an existing Grafana role identified by its UID (`jZrmlLCGka`). The request body must include an incremented `version` number and the complete updated role definition (name, description, permissions, etc.), which replaces the existing role configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/access-control/roles/jZrmlLCGka\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"version\": 3,\n    \"name\": \"custom:delete:write:roles\",\n    \"displayName\": \"custom delete write roles\",\n    \"description\": \"My custom role which gives users permissions to delete and write roles\",\n    \"group\":\"My Group\",\n    \"displayName\": \"My Custom Role\",\n    \"global\": false,\n    \"permissions\": [\n        {\n            \"action\": \"roles:delete\",\n            \"scope\": \"permissions:type:delegate\"\n        },\n        {\n            \"action\": \"roles:write\",\n            \"scope\": \"permissions:type:delegate\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Current Organization Preferences via HTTP API - HTTP\nDESCRIPTION: GET request to the organization preferences endpoint, returning the organization-wide default preferences. Uses Bearer authentication and expects/returns JSON payload. Suitable for administrators needing to audit or manage org-level defaults.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/org/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FilterPill Component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to import the `FilterPill` component from `@grafana/ui` and render it within a React application. It shows the basic usage with a `label` prop to set the text displayed on the pill and an `onClick` prop to define the action (logging to console in this example) performed when the pill is clicked.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/FilterPill/FilterPill.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FilterPill } from '@grafana/ui';\n\n<FilterPill label={'Test'} onClick={() => console.log('toggle')} />;\n```\n\n----------------------------------------\n\nTITLE: Generating Interface Mocks with Mockery in Go\nDESCRIPTION: Command to generate mock implementations using the mockery library, which automates creating mocks for large interfaces. Includes explanation of key parameters.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/style-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmockery --name InterfaceName --structname MockImplementationName --inpackage --filename my_implementation_mock.go\n```\n\n----------------------------------------\n\nTITLE: Overriding License Path in Grafana Configuration File (INI)\nDESCRIPTION: Specifies a custom path to the Grafana Enterprise license JWT file for license updates, overriding standard defaults. This is used when renewing or replacing a license to ensure Grafana loads the new file. The license_path property should match the location of the current (possibly replaced) license file. No output is produced, but incorrect path can prevent license acceptance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/enterprise-licensing/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[enterprise]\\nlicense_path = /path/to/your/license.jwt\n```\n\n----------------------------------------\n\nTITLE: Comparing Span Attributes with TraceQL (TraceQL)\nDESCRIPTION: Demonstrates a TraceQL query to match traces where span attributes meet specific values, using logical operators to combine conditions. Requires a configured multi-stack Tempo data source in Grafana with appropriate X-Scope-OrgID header for cross-tenant access. The example illustrates that condition satisfaction in separate tenants will not return a matching trace, as TraceQL considers traces within contiguous storage. Input includes span attributes/value checks; outputs are matching trace results or an empty set if distributed across tenants. Limitation: Conditions must be met within the same tenant for a trace to be returned.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/query-editor/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: TraceQL\nCODE:\n```\n{ span.attr1 = \\\"bar\\\" } && { span.attr2 = \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Dependency Issue in Go with Wire\nDESCRIPTION: This snippet demonstrates how to resolve the multiple dependency issue by creating a new type to differentiate between dependencies of the same underlying type. It shows wrapping and unwrapping techniques to work with Wire's injection system.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype OtherFoo Foo\n\nfunc newOtherFoo() *OtherFoo {\n\t// Call the original provider...\n\tfoo := newFoo2()\n\t// ...then convert it to the new type.\n\treturn (*OtherFoo)(foo)\n}\n\nfunc provideBar(foo1 *Foo, otherFoo *OtherFoo) *Bar {\n\t// Convert the new type into the unwrapped type...\n\tfoo2 := (*Foo)(otherFoo)\n\t// ...then use it to call the original provider.\n\treturn newBar(foo1, foo2)\n}\n\nfunc inject() *Bar {\n\twire.Build(newFoo1, newOtherFoo, provideBar)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Aggregation for Prometheus Data Source\nDESCRIPTION: This bash script sets the KUBECONFIG environment variable and applies a Kubernetes configuration file to enable aggregation for a Prometheus data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport KUBECONFIG=./data/grafana-apiserver/grafana.kubeconfig\nkubectl apply -f pkg/aggregator/examples/datasource.yml --validate=false\n```\n\n----------------------------------------\n\nTITLE: Sharing Embed Link for Panel - Markdown\nDESCRIPTION: Documents 'pe' as the keyboard shortcut for opening the share embed dialog on a hovered Grafana panel. This allows users to retrieve embeddable code for the selected panel. No additional context or dependencies beyond enabled keyboard shortcuts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`pe`\n```\n\n----------------------------------------\n\nTITLE: Illustrating Grafana's Variable Parameter Interpretation\nDESCRIPTION: This snippet explicitly shows the query parameter format Grafana recognizes for setting dashboard variables. The 'var-example=value' parameter sets the dashboard variable 'example' to 'value'. The 'var-' prefix signals Grafana to interpret the parameter as a variable assignment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/create-dashboard-url-variables/index.md#2025-04-23_snippet_2\n\nLANGUAGE: uri\nCODE:\n```\nhttps://${your-domain}/path/to/your/dashboard?var-example=value\n```\n\n----------------------------------------\n\nTITLE: Toggling Panel Fullscreen - Markdown\nDESCRIPTION: This snippet documents the use of the 'v' key to toggle fullscreen mode for a Grafana panel. The user must first hover over the target panel. There's no programmatic dependency; the input is the keyboard shortcut and the output is the panel entering or exiting fullscreen mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`v`\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Session with Grafana API - Bash\nDESCRIPTION: This curl command creates a new migration session via the Grafana API. It sends a POST request with a JSON body containing an authentication token to the /api/cloudmigration/migration endpoint. Dependencies: Requires curl, access to a running Grafana instance, and proper admin credentials. The AuthToken field should carry a valid token, and the output will be a session object if successful.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \\\"Content-Type: application/json\\\" \\\\\n  http://admin:admin@localhost:3000/api/cloudmigration/migration \\\\\n  -d '{\"AuthToken\":\"eyJUb2tlbiI6ImNvbXBsZXRlbHlfZmFrZV90b2tlbl9jZG9peTFhYzdwdXlwZCIsIkluc3RhbmNlIjp7IlN0YWNrSUQiOiAzODYzLCJTbHVnIjoic3R1Ymluc3RhbmNlIiwiUmVnaW9uU2x1ZyI6ImZha2UtcmVnaW9uIiwiQ2x1c3RlclNsdWciOiJmYWtlLWNsdXNlciJ9fQo=\"}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Alert Rules with YAML Provisioning in Grafana\nDESCRIPTION: Specifies the alert rule UIDs for deletion within a Grafana instance using YAML configuration. This snippet requires Grafana provisioning and file access to the appropriate configuration directory. Each entry must include the organization ID and the unique rule UID that should be deleted. When the file is applied (on startup or via reload), the listed rules are removed. The file must be edited and Grafana reloaded for future deletions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of alert rule UIDs that should be deleted\\ndeleteRules:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> unique identifier for the rule\\n    uid: my_id_1\n```\n\n----------------------------------------\n\nTITLE: Checking Provisioning Validity with --dry-run - kubectl Bash\nDESCRIPTION: Runs a 'kubectl apply' dry-run against 'grafana.yaml' to validate manifest correctness on the API server without making changes. Useful for syntax and conflict checks before applying changes in production. Shows typical success output structure for unchanged objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f grafana.yaml --dry-run=server --namespace=grafana\n\n```\n\n----------------------------------------\n\nTITLE: Label Examples for Joining in Grafana Expressions\nDESCRIPTION: Illustrates examples of labels used to identify individual series or numbers. These labels are used for joining data in binary operations, including exact matches and subset matching.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_4\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n{host=web01}\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n{host=A,dc=MIA}\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n{host=A}\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace with '-}}' in Go Templates\nDESCRIPTION: Demonstrates how to remove unwanted leading/trailing whitespace and line breaks caused by template formatting. By replacing the closing delimiter `}}` with `-}}` (specifically `{{ range ... -}}`), the whitespace adjacent to the tag is trimmed from the output.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n{{ range .Alerts -}}\n  {{ range .Labels.SortedPairs -}}\n    {{ .Name }} = {{ .Value }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Including Field Overrides Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to field override options. It references a specific markdown file (`visualizations/overrides-options.md`) from the `grafana` source, promoting documentation reuse. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/overrides-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Language Definition Interface\nDESCRIPTION: Defines the interface for customizing SQL language behavior including language loading and completion provider configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LanguageDefinition extends monacoTypes.languages.ILanguageExtensionPoint {\n  // TODO: Will allow providing a custom language definition.\n  loadLanguage?: (module: any) => Promise<void>;\n  // Provides API for customizing the autocomplete\n  completionProvider?: (m: Monaco) => SQLCompletionItemProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Expansion in InteractiveTable with TSX\nDESCRIPTION: This TSX snippet shows how to enable row expansion in the `InteractiveTable`. It defines a `TableData` interface, sample data, and column definitions. An `ExpandedCell` component is created to render the content of the expanded row area. The `InteractiveTable` component is configured with the `renderExpandedRow` prop pointing to the `ExpandedCell` component and `showExpandAll` to optionally display a button to expand all rows. The `getRowId` prop is used to uniquely identify each row.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface TableData {\n  datasource: string;\n  repo: string;\n  description: string;\n}\n\nconst tableData: TableData[] = [\n  //...\n];\n\nconst columns: Array<Column<TableData>> = [\n  //...\n];\n\nconst ExpandedCell = ({ description }: TableData) => {\n  return <p>{description}</p>;\n};\n\nexport const MyComponent = () => {\n  return (\n    <InteractiveTable\n      columns={columns}\n      data={tableData}\n      getRowId={(r) => r.datasource}\n      renderExpandedRow={ExpandedCell}\n      showExpandAll\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Select Component Rendering in Grafana\nDESCRIPTION: Example test for verifying that a Select component (OrgRolePicker) renders correctly. It demonstrates the recommended practice of querying Select components by using a label and checking for the presence of the combobox role.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndescribe('OrgRolePicker', () => {\n  it('should render the picker', () => {\n    setup(\n      <>\n        <label htmlFor={'role-picker'}>Role picker</label>\n        <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={() => {}} />\n      </>\n    );\n    expect(screen.getByRole('combobox', { name: 'Role picker' })).toBeInTheDocument();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Inviter Name in Go Template\nDESCRIPTION: This Go template snippet inserts the value of the `.InvitedBy` variable from the provided context data into the email body. It identifies the person who sent the Grafana organization invitation. Requires the Go templating engine and the `.InvitedBy` variable in the context.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{.InvitedBy}}\n```\n\n----------------------------------------\n\nTITLE: Grafana Plugin Manifest JSON Configuration\nDESCRIPTION: A manifest file that defines the plugin metadata, version, signing information, and file hashes for integrity verification. The manifest includes hashes for module.js files and plugin.json configurations across different directories.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid-deeply-nested/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1726234125061,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"datasource/module.js\": \"04d70db091d96c4775fb32ba5a8f84cc22893eb43afdb649726661d4425c6711\",\n    \"datasource/plugin.json\": \"3fd712717a21617cc76f9043efcd43d4ebf5564dd155a28e4e3c736739f6931e\",\n    \"datasource/panels/one/module.js\": \"cbd1ac2284645a0e1e9a8722a729f5bcdd2b831222728709c6360beecdd6143f\",\n    \"datasource/panels/one/plugin.json\": \"b9b4556a7220ea77650ffd228da6d441e68df3405d50dab5773c10f4afae5ad3\",\n    \"module.js\": \"266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a\",\n    \"plugin.json\": \"31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing User Password via Grafana API (HTTP/JSON)\nDESCRIPTION: Updates the password for the authenticated user via a PUT request to `/api/user/password`. Requires Basic Authentication and a JSON payload containing `oldPassword` and `newPassword`. Returns a JSON success message upon completion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/user/password HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic YWRtaW46YWRtaW4=\n\n{\n  \"oldPassword\": \"old_password\",\n  \"newPassword\": \"new_password\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User password changed\"}\n```\n\n----------------------------------------\n\nTITLE: LBAC Rules API Response Example in HTTP\nDESCRIPTION: This is an example HTTP response for a successful GET request to retrieve LBAC rules. It returns a JSON object containing an array of rules, each associating a team UID with specific LBAC rules.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_lbac_rules.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 131\n\n{\n  \"rules\": [\n    {\n      \"teamUId\": \"fdnd1pf4m9sxvc\",\n      \"rules\": [\n        \"{ service_name=\\\"bigquery-sync-mysql\\\" }\"\n      ]\n    },\n    {\n      \"teamUid\": \"dfed1p2m9sxvfc\",\n      \"rules\": [\n        \"{ service_name=\\\"api\\\" }\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Hugo Figure Shortcode (Loki Forward Search)\nDESCRIPTION: This Hugo shortcode embeds an image with an optional caption into the documentation. This specific instance displays a screenshot illustrating the 'Forward' direction search option for Loki logs within Grafana's Explore interface. The `src` parameter points to the image file path, and `alt` provides alternative text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/static/img/logs/forward_search.png\" alt=\"Explore logs with the Direction option selected\" caption-align=\"left\" >}}\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Docker Container\nDESCRIPTION: Commands to build a Grafana docker container from the current branch and tag it as grafana/grafana:dev\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <grafana repo>\n$ make build-docker-full\n```\n\n----------------------------------------\n\nTITLE: Using AutoSizeInput with Prefix Icon in React JSX\nDESCRIPTION: This snippet demonstrates how to add a prefix element, specifically an `Icon` component with the name \"search\", to the `AutoSizeInput` component using the `prefix` prop. This is useful for adding visual context or indicators to the input field. It requires the `AutoSizeInput` and `Icon` components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/AutoSizeInput.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSizeInput prefix={<Icon name=\"search\" />} />\n```\n\n----------------------------------------\n\nTITLE: Defining a Wire Provider Set for Greeters in Go\nDESCRIPTION: Illustrates how to create a Wire provider set for greeters, including multiple greeter implementations and their dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar GreeterSet = wire.NewSet(NewStdoutGreeter)\n\nfunc DefaultGreeter(ctx context.Context) *Greeter {\n    // ...\n}\n\nfunc NewStdoutGreeter(ctx context.Context, msgs []Message) *Greeter {\n    // ...\n}\n\nfunc NewGreeter(ctx context.Context, w io.Writer, msgs []Message) (*Greeter, error) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Directory Structure for Grafana - Directory Layout\nDESCRIPTION: This pseudo-code snippet shows the expected directory layout for storing provisioning manifests. The 'provisioning/' folder contains subfolders for 'datasources/' and 'dashboards/', each holding YAML files defining resources to be provisioned. The correct directory structure is required for Grafana to automatically discover and apply configuration files at startup or runtime. No dependencies are required for this layout, but the file content formats must match Grafana's provisioning specifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nprovisioning/\\n  datasources/\\n    <yaml files>\\n  dashboards/\\n    <yaml files>\\n\n```\n\n----------------------------------------\n\nTITLE: Starting Example Aggregated Microservice (Shell)\nDESCRIPTION: This command uses `go run` to start an instance of the Grafana API server configured specifically to act as the example microservice (`example.grafana.app/v0alpha1`). It specifies the secure port (7443), provides the necessary TLS server certificate and key (`server.crt`, `server.key`), configures request header authentication using the CA certificate (`ca.crt`) and specific header names for user/group information, and sets verbosity to 10. This service runs independently and will be discovered and proxied by the main Grafana aggregator.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./pkg/cmd/grafana apiserver \\\n  --runtime-config=example.grafana.app/v0alpha1=true \\\n  --secure-port 7443 \\\n  --tls-cert-file $PWD/data/grafana-aggregator/server.crt \\\n  --tls-private-key-file $PWD/data/grafana-aggregator/server.key \\ \n  --requestheader-client-ca-file=$PWD/data/grafana-aggregator/ca.crt \\\n  --requestheader-extra-headers-prefix=X-Remote-Extra- \\\n  --requestheader-group-headers=X-Remote-Group \\\n  --requestheader-username-headers=X-Remote-User \\\n  -v 10\n```\n\n----------------------------------------\n\nTITLE: Storybook Args Documentation\nDESCRIPTION: JSX component for displaying the CollapsableSection component's props documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={CollapsableSection} />\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of a Plugin (Bash)\nDESCRIPTION: Command to install a particular version of a Grafana plugin, specified by both '<plugin-id>' and '<version>'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli plugins install <plugin-id> <version>\n```\n\n----------------------------------------\n\nTITLE: Getting Report Settings via HTTP GET Request\nDESCRIPTION: Example of retrieving global reports branding settings including logos and email footer configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports/settings HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Reporting Multiple Provider Bindings with Wire (Go)\nDESCRIPTION: This snippet generates a diagnostic message when the Wire dependency injection tool detects multiple conflicting bindings for a specific type (e.g., example.com/foo.Foo or example.com/foo.Bar) in Go source files. It lists the current active provider chain and all previous providers or provider sets that contributed the same dependency, referencing their source locations and kinds (provider, provider set, value, bind). These messages assist developers in troubleshooting and resolving ambiguous dependency graph setups. There are no third-party dependencies besides Wire itself; expected input is the result of running Wire's diagnostic routines, and output is verbose, human-readable diagnostic text. Limitations: Not intended for programmatic parsing, but for human investigation of dependency wiring errors.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleBindings/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFooAgain\" (example.com/foo/foo.go:x:y)\nprevious:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\nprevious:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\nprevious:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\n<- provider set \"SuperSet\" (example.com/foo/foo.go:x:y)\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/foo.go:x:y: SetWithDuplicateBindings has multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\n<- provider set \"SuperSet\" (example.com/foo/foo.go:x:y)\nprevious:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- wire.Value (example.com/foo/wire.go:x:y)\nprevious:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Bar\ncurrent:\n<- wire.Bind (example.com/foo/wire.go:x:y)\nprevious:\n<- provider \"provideBar\" (example.com/foo/foo.go:x:y)\n\n```\n\n----------------------------------------\n\nTITLE: Select Component with Custom Value - After\nDESCRIPTION: Updated implementation requiring onCreateOption handler for custom value support\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Select } from '@grafana/ui';\n...\n<Select\n...\nallowCustomValue\nonCreateOption={(customValue) => {\n    // Do things with the customValue\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Manual hosts file configuration\nDESCRIPTION: Example of /etc/hosts entries for local Grafana and Prometheus access\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /etc/hosts\n127.0.0.1       grafana.loc\n127.0.0.1       prometheus.loc\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Email Contact Point using Terraform\nDESCRIPTION: Creates a Grafana contact point named 'My contact point email' configured to send alert notifications via email. Requires replacing the placeholder Terraform resource name (`<terraform_contact_point_name>`) and the recipient email address (`<email_address>`). This resource defines a target for alert notifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n resource \"grafana_contact_point\" \"<terraform_contact_point_name>\" {\n     name = \"My contact point email\"\n\n     email {\n         addresses               = [\"<email_address>\"]\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Converting Time with Go Template Function - Go Template\nDESCRIPTION: Illustrates use of the {{ toTime }} function to convert a Unix timestamp (in seconds) into a Go time object, formatted as a date-time string. Requires Grafana Go template context. Input is a numerical Unix timestamp, output is a time string (RFC3339 displayed). Function is specific to Grafana's implementation of Go templates.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_7\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ toTime 1727802106 }}\n\n```\n\n----------------------------------------\n\nTITLE: Building Keycloak Docker Image for Mac M1\nDESCRIPTION: Commands to remove existing Keycloak images and build a new one compatible with Mac M1 architecture.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ docker rmi $(docker images | grep 'keycloak')\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ ./docker-build-keycloak-m1-image.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for Iframe Embedding\nDESCRIPTION: Additional INI configuration to allow embedding Grafana dashboards in iframes.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[security]\nallow_embedding = true\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Core Grafana Frontend\nDESCRIPTION: Starts the development process for the core Grafana frontend. This command typically builds the frontend assets and watches for file changes, enabling live reloading during development, making the development feedback loop faster.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Naming Series by Metric Path Node with aliasByNode() in Graphite\nDESCRIPTION: The `aliasByNode()` function dynamically generates a series alias based on a specified node (part) of the metric path. The integer argument (e.g., `2`) indicates the zero-indexed node position to use for the alias, simplifying legend management for metrics with structured naming conventions.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_1\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\naliasByNode(2)\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:folders:writer\nDESCRIPTION: Specifies the `fixed:folders:writer` role (ID: `fixed_wJXLoTzgE7jVuz90dryYoiogL0o`) within Grafana. This role includes all permissions from `fixed:dashboards:writer` and adds folder management capabilities (`folders:read`, `folders:write`, `folders:create`, `folders:delete`) and folder permission management (`folders.permissions:read`, `folders.permissions:write`). It allows users to read, update, and delete all folders and dashboards, create folders and subfolders, and manage folder permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:folders:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_wJXLoTzgE7jVuz90dryYoiogL0o\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- fixed:dashboards:writer\n- folders:read\n- folders:write\n- folders:create\n- folders:delete\n- folders.permissions:read\n- folders.permissions:write\n```\n\n----------------------------------------\n\nTITLE: Syntax Example for Accessing Vault Database Secrets\nDESCRIPTION: Demonstrates the Grafana variable expansion syntax (`$__vault{<argument>}`) for retrieving dynamic credentials from a Vault database secrets engine. The argument specifies the engine (`database`), the credential path (`database/creds/grafana`), and the field name (`username`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n$__vault{database:database/creds/grafana:username}\n```\n\n----------------------------------------\n\nTITLE: Removed Data Source Permission API Endpoints in Grafana v10.3*\nDESCRIPTION: Lists the specific data source permission API endpoints that have been removed in Grafana v10.3 (backported from v10.2.3*). Automation or integrations relying on these endpoints will break and need to be updated to use the new access control endpoints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- `GET /datasources/:datasourceId/permissions`\n- `POST /api/datasources/:datasourceId/permissions`\n- `DELETE /datasources/:datasourceId/permissions`\n- `POST /datasources/:datasourceId/enable-permissions`\n- `POST /datasources/:datasourceId/disable-permissions`\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Visualizations using Column List Shortcode\nDESCRIPTION: This Hugo shortcode block creates a multi-column list. Inside the block, standard Markdown list items are used, referencing other documentation pages using the `ref:` syntax defined in the YAML frontmatter. This snippet lists Grafana visualizations that support threshold configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< column-list >}}\n\n- [Bar chart](ref:bar-chart)\n- [Bar gauge](ref:bar-gauge)\n- [Candlestick](ref:candlestick)\n- [Canvas](ref:canvas)\n- [Gauge](ref:gauge)\n- [Geomap](ref:geomap)\n- [Histogram](ref:histogram)\n- [Stat](ref:stat)\n- [State timeline](ref:state-timeline)\n- [Status history](ref:status-history)\n- [Table](ref:table)\n- [Time series](ref:time-series)\n- [Trend](ref:trend)\n\n{{< /column-list >}}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Stack using docker-compose (Shell)\nDESCRIPTION: Builds the Docker images defined in the `docker-compose.yml` file within the repository using the `docker-compose build` command. This prepares the Grafana, Prometheus, and other necessary services for the tutorial environment as part of the interactive setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose build\n```\n\n----------------------------------------\n\nTITLE: Button with data-testid for Testing Only\nDESCRIPTION: Example of a button using data-testid attribute for testing identification without affecting screen readers.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"modal-close-button\">Close<button>\n```\n\n----------------------------------------\n\nTITLE: Adding Client-Side Pagination to InteractiveTable in TSX\nDESCRIPTION: This TSX example shows how to enable client-side pagination for the `InteractiveTable`. It defines an interface `WithPaginationData`, provides sample data (`pageableData`), and defines the table columns. Pagination is enabled by passing the `pageSize` prop to the `InteractiveTable` component, specifying the number of rows per page. All data must be provided upfront as only client-side pagination is supported.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface WithPaginationData {\n  id: string;\n  firstName: string;\n  lastName: string;\n  car: string;\n  age: number;\n}\n\nexport const MyComponent = () => {\n  const pageableData: WithPaginationData[] = [\n    { id: '48a3926a-e82c-4c26-b959-3a5f473e186e', firstName: 'Brynne', lastName: 'Denisevich', car: 'Cougar', age: 47 },\n    {\n      id: 'cf281390-adbf-4407-8cf3-a52e012f63e6',\n      firstName: 'Aldridge',\n      lastName: 'Shirer',\n      car: 'Viper RT/10',\n      age: 74,\n    },\n    // ...\n    {\n      id: 'b9b0b559-acc1-4bd8-b052-160ecf3e4f68',\n      firstName: 'Ermanno',\n      lastName: 'Sinott',\n      car: 'Thunderbird',\n      age: 26,\n    },\n  ];\n  const columns: Array<Column<WithPaginationData>> = [\n    { id: 'firstName', header: 'First name' },\n    { id: 'lastName', header: 'Last name' },\n    { id: 'car', header: 'Car', sortType: 'string' },\n    { id: 'age', header: 'Age', sortType: 'number' },\n  ];\n  return <InteractiveTable columns={columns} data={pageableData} getRowId={(r) => r.id} pageSize={15} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating a Data Source by UID via Grafana API - HTTP\nDESCRIPTION: This API call updates an existing data source identified by its unique UID string using the modern endpoint. The PUT request includes new or updated fields in JSON form, with sensitive data placed under secureJsonData for encryption. Requires bearer authentication. Response echoes most recent config, lists encrypted fields, and confirms the update. Only available in recent versions of Grafana, preferable to the deprecated ID method.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/datasources/uid/kLtEtcRGk HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"id\":1,\\n  \"uid\": \"updated UID\",\\n  \"orgId\":1,\\n  \"name\":\"test_datasource\",\\n  \"type\":\"graphite\",\\n  \"access\":\"proxy\",\\n  \"url\":\"http://mydatasource.com\",\\n  \"password\":\"\",\\n  \"user\":\"\",\\n  \"database\":\"\",\\n  \"basicAuth\":true,\\n  \"basicAuthUser\":\"basicuser\",\\n  \"secureJsonData\": {\\n    \"basicAuthPassword\": \"basicpassword\"\\n  },\\n  \"isDefault\":false,\\n  \"jsonData\":null\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n  \"datasource\": {\\n    \"id\": 1,\\n    \"uid\": \"updated UID\",\\n    \"orgId\": 1,\\n    \"name\": \"test_datasource\",\\n    \"type\": \"graphite\",\\n    \"typeLogoUrl\": \"\",\\n    \"access\": \"proxy\",\\n    \"url\": \"http://mydatasource.com\",\\n    \"password\": \"\",\\n    \"user\": \"\",\\n    \"database\": \"\",\\n    \"basicAuth\": true,\\n    \"basicAuthUser\": \"basicuser\",\\n    \"basicAuthPassword\": \"\",\\n    \"withCredentials\": false,\\n    \"isDefault\": false,\\n    \"jsonData\": {},\\n    \"secureJsonFields\": {\\n      \"basicAuthPassword\": true\\n    },\\n    \"version\": 1,\\n    \"readOnly\": false\\n  },\\n  \"id\": 102,\\n  \"message\": \"Datasource updated\",\\n  \"name\": \"test_datasource\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using useStyles2 Hook for Theming in React Components\nDESCRIPTION: Demonstrates how to use the useStyles2 hook to apply themed styles in a React component. The hook memoizes the styling function and provides access to the theme object.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FC } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nfunction Foo(props: FooProps) {\n  const styles = useStyles2(getStyles);\n  // Use styles with className\n}\n\nconst getStyles = (theme: GrafanaTheme2) =>\n  css({\n    padding: theme.spacing(1, 2),\n  });\n```\n\n----------------------------------------\n\nTITLE: Launching JWT Proxy Block in Grafana Devenv\nDESCRIPTION: Command to start the Grafana development environment with JWT proxy authentication using the oauth source.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=\"auth/jwt_proxy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Draggable Manager Options in TypeScript\nDESCRIPTION: Specifies the configuration type for initializing a draggable manager, listing the required bounds-mapping function and several optional event callbacks for handling drag and mouse events. It also allows specifying behavioral flags such as whether bounds reset on resize and a string tag for distinguishing manager instances. Callbacks use a shared update type and the object ensures type safety when setting up draggable interaction logic.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DraggableManagerOptions = {\n  getBounds: (?string) => DraggableBounds,\n  onMouseEnter?: DraggingUpdate => void,\n  onMouseLeave?: DraggingUpdate => void,\n  onMouseMove?: DraggingUpdate => void,\n  onDragStart?: DraggingUpdate => void,\n  onDragMove?: DraggingUpdate => void,\n  onDragEnd?: DraggingUpdate => void,\n  resetBoundsOnResize?: boolean,\n  tag?: string,\n};\n```\n\n----------------------------------------\n\nTITLE: Range Query with Reduce Expression Value Interpolation - Go Template - Markdown\nDESCRIPTION: This snippet is similar to the previous, but uses $values.B.Value, which may refer to a reduce expression result in Grafana alerting. The context is when a query in Ref ID 'A' is a range query, so a reduce expression (Ref ID 'B') is used for a single float value. Required dependencies are alerting rule setup in Grafana with both range and reduce instant queries. Both $values.B.Value and $labels.instance must be available for the template to work.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_3\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $values.B.Value }} CPU usage for {{ $labels.instance }} over the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana UI via npm - Bash\nDESCRIPTION: This snippet shows how to install the @grafana/ui package using npm. Make sure npm is installed. This command adds @grafana/ui to your node_modules and records it in your package.json dependencies. No parameters are required. The input is the package name and the output is an updated package.json and installed files.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @grafana/ui\n```\n\n----------------------------------------\n\nTITLE: Creating Alert Message Templates for Grafana Alerts\nDESCRIPTION: This code snippet demonstrates how to format alert messages using Grafana's templating syntax. It retrieves label values and formats numeric values to a specific number of decimal places for improved readability in alert notifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n{{  $values.D.Labels.Source }} at the {{  $values.D.Labels.Location }} has generated {{ printf \"%.2f\"  $values.D.Value }} jigowatts.\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:folders.permissions:reader\nDESCRIPTION: Specifies the `fixed:folders.permissions:reader` role (ID: `fixed_E06l4cx0JFm47EeLBE4nmv3pnSo`) within Grafana. This role grants the `folders.permissions:read` permission, allowing users to read all folder permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:folders.permissions:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_E06l4cx0JFm47EeLBE4nmv3pnSo\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- folders.permissions:read\n```\n\n----------------------------------------\n\nTITLE: Binary Operations in Grafana Expressions\nDESCRIPTION: Examples of binary operations between variables in Grafana expressions. The behavior depends on the data types (number, time series) of the operands and involves a union based on labels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_3\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n$A + $B\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n$A || $B\n```\n\n----------------------------------------\n\nTITLE: Example Humanized Output\nDESCRIPTION: This shows the example output of applying the `humanize` function to a query value (like 554900) within a Grafana alert template, resulting in a more readable format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n554.9k\n```\n\n----------------------------------------\n\nTITLE: Using 't' Function for Simple String Translation in JavaScript\nDESCRIPTION: Shows the usage of the `t` function imported from `app/core/internationalization` to translate simple strings in JavaScript code, often used for element props like `placeholder`. It takes the translation key and the default English text as arguments.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { t } from \"app/core/internationalization\"\n\nconst placeholder = t('form.username-placeholder','Username');\n\nreturn <input type=\"value\" placeholder={placeholder}>\n```\n\n----------------------------------------\n\nTITLE: Using the is_null Function in Grafana Expressions\nDESCRIPTION: Shows the usage of the `is_null` function to check if a value is null. It returns 1 for null values and 0 otherwise, applicable to numbers or time series.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_9\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\nis_null($A)\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject with Default in Go Template\nDESCRIPTION: This Go template snippet uses a custom `HiddenSubject` function to set the email's subject line. It attempts to use the value of the `.Subject` variable passed in the template data, falling back to the default string \"Welcome to Grafana\" if `.Subject` is not available or empty. This is typically placed at the beginning of the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{HiddenSubject .Subject \"Welcome to Grafana\"}}\n```\n\n----------------------------------------\n\nTITLE: Implementing EmptyState with Call-to-Action Variant and Button in JSX\nDESCRIPTION: This snippet demonstrates how to use the `EmptyState` component from `@grafana/ui` with the `call-to-action` variant. It includes a custom message and a `LinkButton` to prompt the user to create a new playlist. Additional context is provided via children, including a `TextLink` for more information.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptyState, LinkButton, TextLink } from '@grafana/ui';\n\n<EmptyState\n  variant=\"call-to-action\"\n  message=\"You haven't created any playlists yet\"\n  button={\n    <LinkButton icon=\"plus\" href=\"playlists/new\" size=\"lg\">\n      Create playlist\n    </LinkButton>\n  }\n>\n  You can use playlists to cycle dashboards on TVs without user control.{' '}\n  <TextLink external href=\"<externalDocsLink>\">\n    Learn more.\n  </TextLink>\n</EmptyState>;\n```\n\n----------------------------------------\n\nTITLE: Displaying Spinner Component Example in Storybook\nDESCRIPTION: This JSX code renders a canvas in Storybook to display the basic example of the Spinner component from the SpinnerStories.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas of={SpinnerStories.Basic} />\n```\n\n----------------------------------------\n\nTITLE: Adding Header Tooltips to InteractiveTable Columns in TSX\nDESCRIPTION: This TSX code demonstrates how to add tooltips to the headers of `InteractiveTable` columns. It defines the data interface, sample data, and columns similar to the pagination example. A `headerToolTips` object is created, mapping column IDs (`age`, `lastName`) to tooltip configuration objects. These configurations can include simple text content or a function returning JSX for more complex tooltips, as well as an optional `iconName`. The `InteractiveTable` is rendered with this `headerToolTips` prop.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InteractiveTable/InteractiveTable.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ninterface WithPaginationData {\n  id: string;\n  firstName: string;\n  lastName: string;\n  car: string;\n  age: number;\n}\n\nexport const MyComponent = () => {\n  const pageableData: WithPaginationData[] = [\n    { id: '48a3926a-e82c-4c26-b959-3a5f473e186e', firstName: 'Brynne', lastName: 'Denisevich', car: 'Cougar', age: 47 },\n    {\n      id: 'cf281390-adbf-4407-8cf3-a52e012f63e6',\n      firstName: 'Aldridge',\n      lastName: 'Shirer',\n      car: 'Viper RT/10',\n      age: 74,\n    },\n    // ...\n    {\n      id: 'b9b0b559-acc1-4bd8-b052-160ecf3e4f68',\n      firstName: 'Ermanno',\n      lastName: 'Sinott',\n      car: 'Thunderbird',\n      age: 26,\n    },\n  ];\n  const columns: Array<Column<WithPaginationData>> = [\n    { id: 'firstName', header: 'First name' },\n    { id: 'lastName', header: 'Last name' },\n    { id: 'car', header: 'Car', sortType: 'string' },\n    { id: 'age', header: 'Age', sortType: 'number' },\n  ];\n\n  const headerToolTips = {\n    age: { content: 'The number of years since the person was born' },\n    lastName: {\n      content: () => {\n        return (\n          <>\n            <h4>Here is an h4</h4>\n            <div>Some content</div>\n            <div>Some more content</div>\n          </>\n        );\n      },\n      iconName: 'plus-square',\n    },\n  };\n  return (\n    <InteractiveTable columns={columns} data={pageableData} getRowId={(r) => r.id} headerToolTips={headerToolTips} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Example Response for Patching Annotation - HTTP+JSON\nDESCRIPTION: Shows the confirmation message in the HTTP response after partially updating an annotation using PATCH. The JSON object contains only a 'message' key indicating a successful operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/annotations.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n    \"message\":\"Annotation patched\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject via Go Template Directive\nDESCRIPTION: This Go template directive, potentially custom to Grafana's email system, sets the subject line for the email. The `HiddenSubject` likely indicates a special handling mechanism, assigning the string \"Welcome to Grafana\" to the `.Subject` variable in the template's data context, which is then used as the email subject.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/welcome_on_signup.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n[[HiddenSubject .Subject \"Welcome to Grafana\"]]\n```\n\n----------------------------------------\n\nTITLE: Examining Wire Dependency Injection Error Message in Go\nDESCRIPTION: This error occurs when using Wire for dependency injection in Go and a provider function returns an error type, but the injection site doesn't allow for error handling. The error message indicates that a provider for 'example.com/foo.Foo' returns an error that cannot be properly managed in the injection context.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectorMissingError/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns error but injection not allowed to fail\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment and ConfigMap Status - kubectl Bash\nDESCRIPTION: Checks the rollout status of the Grafana deployment, then lists all objects (pods, services, etc.) and ConfigMaps in the 'my-grafana' namespace. Useful to ensure proper deployment status and configuration propagation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n# first check the rollout status\nkubectl rollout status deployment grafana --namespace=my-grafana\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n# then check the deployment and configMap information\nkubectl get all --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Receiving Current Organization Preferences Response - JSON\nDESCRIPTION: Sample JSON response for a successful GET to the organization preferences endpoint, containing theme, dashboard, and timezone settings. Response may have empty or default values indicating lack of overrides at the org level. Intended for administrative tools or inspection GUIs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"theme\": \"\",\\n    \"homeDashboardId\": 0,\\n    \"timezone\": \"\",\\n    \"weekStart\": \"\",\\n    \"navbar\": {\\n        \"bookmarkUrls\": null\\n    },\\n    \"queryHistory\": {\\n        \"homeTab\": \"\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Page Object to Pages Export\nDESCRIPTION: Shows how to add a Login page object to the Pages export in the selectors file for accessibility in tests.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Pages = {\n  Login,\n  …,\n  …,\n  …,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specifications using Make Commands\nDESCRIPTION: This bash command demonstrates how to regenerate the OpenAPI v2 and v3 specifications for Grafana. It cleans the existing swagger files and generates new OpenAPI 3 specifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake swagger-clean && make openapi3-gen\n```\n\n----------------------------------------\n\nTITLE: Enabling Shared Dashboard Feature - Grafana INI\nDESCRIPTION: This setting enables or disables the shared dashboards feature in Grafana when placed under the '[public_dashboards]' section. Setting 'enabled = false' prevents users from creating or accessing shared dashboards. The key accepts boolean-like values and only applies if placed within the correct section of the configuration file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: ini\nCODE:\n```\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Service with Homebrew on macOS\nDESCRIPTION: Starts the Grafana service using Homebrew's services management. This command should be run after successfully installing Grafana via Homebrew. It ensures Grafana runs as a background service.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start grafana\n```\n\n----------------------------------------\n\nTITLE: Configuring skip_org_role_sync for OAuth Provider in Grafana (INI)\nDESCRIPTION: Demonstrates how to enable the skip_org_role_sync option in the Grafana configuration for a Generic OAuth2 provider to prevent the synchronization and overriding of manually assigned organization roles during login. No additional dependencies are required beyond a standard Grafana configuration file. The relevant section is [auth.generic_oauth], where skip_org_role_sync is set to true; this is particularly important prior to upgrading to Grafana v10.1 to retain user role assignments. The configuration takes effect on all logins via the specified OAuth provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.1/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\n...\nskip_org_role_sync = true\n```\n\n----------------------------------------\n\nTITLE: Running Grafana with Unified Storage GRPC - Shell\nDESCRIPTION: This shell command runs the Grafana server using Unified Storage with a GRPC backend by overriding the storage_type environment variable. This is required when you want Grafana to communicate with an externally running storage-server.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nGF_GRAFANA_APISERVER_STORAGE_TYPE=unified-grpc ./bin/grafana server\n```\n\n----------------------------------------\n\nTITLE: Generating PKI for Grafana Aggregator Local Testing (Shell)\nDESCRIPTION: Executes the `make-aggregator-pki.sh` script located in the `hack` directory. This script uses `openssl` to generate the required certificates and keys (CA, server, client) for secure communication between the Grafana aggregator and the example aggregated API servers during local development testing. The generated files are typically placed in the `data/grafana-aggregator` directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./hack/make-aggregator-pki.sh\n```\n\n----------------------------------------\n\nTITLE: Dividing Series Element-wise with divideSeries() in Graphite\nDESCRIPTION: The `divideSeries()` Graphite function performs element-wise division between two time series. The example shows how to use Grafana's query references (`#A`, `#B`) to pass the results of two separate queries as the dividend and divisor series for the function.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_5\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\ndivideSeries(#A, #B)\n```\n\n----------------------------------------\n\nTITLE: Updated Greet Method with Grumpy Check in Go\nDESCRIPTION: Modifies the Greet method to return a different message if the Greeter is grumpy.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (g Greeter) Greet() Message {\n    if g.Grumpy {\n        return Message(\"Go away!\")\n    }\n    return g.Message\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Grafana Runtime Library\nDESCRIPTION: Documentation header and beta notice for the @grafana/runtime package, explaining its basic requirements and purpose.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-runtime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Grafana Runtime library\n\n> **@grafana/runtime is currently in BETA**.\n\nThis package allows access to grafana services. It requires Grafana to be running already and the functions to be imported as externals.\n```\n\n----------------------------------------\n\nTITLE: Using UserIcon Component with Custom Children in React\nDESCRIPTION: This example shows how to use the UserIcon component with custom children. It demonstrates passing a string as children to display additional information about extra users.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UserIcon } from '@grafana/ui';\n\nconst ExampleComponent = () => {\n  const userView = {\n    user: { id: 1, name: 'John Smith', avatarUrl: 'https://example.com/avatar.png' },\n    lastActiveAt: '2023-04-18T15:00:00.000Z',\n  };\n\n  return (\n    <div>\n      <UserIcon userView={userView} showTooltip={false}>\n        +10\n      </UserIcon>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning Demo Repository using Git (Bash)\nDESCRIPTION: Clones the Grafana Prometheus alerting demo repository from GitHub using the `git clone` command. This is the first step in setting up the local tutorial environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tonypowa/grafana-prometheus-alerting-demo.git\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Notification Policies via YAML Provisioning\nDESCRIPTION: This YAML snippet demonstrates the structure for provisioning Grafana notification policies. It includes defining the organization ID, the receiver contact point, grouping logic (`group_by`), matching rules (`matchers`, `object_matchers`), mute time intervals, and timing configurations (`group_wait`, `group_interval`, `repeat_interval`). Nested routes can also be defined within the `routes` key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 1\n\n# List of notification policies\npolicies:\n  # <int> organization ID, default = 1\n  - orgId: 1\n    # <string> name of the contact point that should be used for this route\n    receiver: grafana-default-email\n    # <list> The labels by which incoming alerts are grouped together. For example,\n    #        multiple alerts coming in for cluster=A and alertname=LatencyHigh would\n    #        be batched into a single group.\n    #\n    #        To aggregate by all possible labels use the special value '...' as\n    #        the sole label name, for example:\n    #        group_by: ['...']\n    #        This effectively disables aggregation entirely, passing through all\n    #        alerts as-is. This is unlikely to be what you want, unless you have\n    #        a very low alert volume or your upstream notification system performs\n    #        its own grouping.\n    group_by: ['...']\n    # <list> a list of prometheus-like matchers that an alert rule has to fulfill to match the node (allowed chars\n    #        [a-zA-Z_:])\n    matchers:\n      - alertname = Watchdog\n      - service_id_X = serviceX\n      - severity =~ \"warning|critical\"\n    # <list> a list of grafana-like matchers that an alert rule has to fulfill to match the node\n    object_matchers:\n      - ['alertname', '=', 'CPUUsage']\n      - ['service_id-X', '=', 'serviceX']\n      - ['severity', '=~', 'warning|critical']\n    # <list> Times when the route should be muted. These must match the name of a\n    #        mute time interval.\n    #        Additionally, the root node cannot have any mute times.\n    #        When a route is muted it will not send any notifications, but\n    #        otherwise acts normally (including ending the route-matching process\n    #        if the `continue` option is not set)\n    mute_time_intervals:\n      - abc\n    # <duration> How long to initially wait to send a notification for a group\n    #            of alerts. Allows to collect more initial alerts for the same group.\n    #            (Usually ~0s to few minutes), default = 30s\n    group_wait: 30s\n    # <duration> How long to wait before sending a notification about new alerts that\n    #            are added to a group of alerts for which an initial notification has\n    #            already been sent. (Usually ~5m or more), default = 5m\n    group_interval: 5m\n    # <duration>  How long to wait before sending a notification again if it has already\n    #             been sent successfully for an alert. (Usually ~3h or more), default = 4h\n    repeat_interval: 4h\n    # <list> Zero or more child policies. The schema is the same as the root policy.\n    # routes:\n    #   # Another recursively nested policy...\n    #   - receiver: another-receiver\n    #     matchers:\n    #       - ...\n    #     ...\n\n```\n\n----------------------------------------\n\nTITLE: Reading Grafana Data Source IDs (Plaintext)\nDESCRIPTION: Defines the `datasources.id:read` permission action needed to read data source IDs in Grafana. This is related to data source scopes `datasources:*` and `datasources:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources.id:read`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`datasources:*`</li><li>`datasources:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Setting up Self-Instrumentation Environment in Grafana\nDESCRIPTION: Command to initialize the development environment with required self-instrumentation monitoring tools. This sets up Prometheus, Loki, Tempo, and Pyroscope for monitoring Grafana itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/self-instrumentation/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=self-instrumentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth HD Parameter Validation\nDESCRIPTION: A new security validation checks the ID token's HD parameter against allowed domains. If using legacy Google OAuth configurations via `api_url` that lack the HD parameter, login may fail. This validation can be disabled by setting the configuration toggle `validate_hd` to false.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Outputting Real-time Greeting Message in Plaintext\nDESCRIPTION: A simple plaintext greeting that displays the current time in a standardized format. The time is displayed in UTC format with complete date and time information.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nReal time greeting: Good day! It is [current time elided]\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Body with Go HTML Templates - GoTemplate\nDESCRIPTION: This snippet uses Go template placeholders to create a personalized body for a verification email. Variables such as .Name, .VerificationEmailLifetimeHours, .AppUrl, and .Code are required for rendering full content, and are supplied by the backend. Inputs are the relevant context variables, and the output is a plain-text email of instructions and a verification link specific to each user.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\nHi {{.Name}},\n\nCopy and paste the following link directly in your browser to verify your email within {{.VerificationEmailLifetimeHours}} hour(s).\n{{.AppUrl}}user/email/update?code={{.Code}}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:ldap:writer\nDESCRIPTION: Specifies the `fixed:ldap:writer` role (ID: `fixed_p6AvnU4GCQyIh7-hbwI-bk3GYnU`) within Grafana. This role includes all permissions from `fixed:ldap:reader` and adds `ldap.user:sync` and `ldap.config:reload`. It allows users to read and update the LDAP configuration, read LDAP status information, sync users, and reload the configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:ldap:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_p6AvnU4GCQyIh7-hbwI-bk3GYnU\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- fixed:ldap:reader\n- ldap.user:sync\n- ldap.config:reload\n```\n\n----------------------------------------\n\nTITLE: Suggestion Registry Item Interface\nDESCRIPTION: Defines the interface for registry items that map statement positions to suggestion kinds for SQL autocomplete functionality.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SuggestionKindRegistyItem extends RegistryItem {\n  id: StatementPosition;\n  kind: SuggestionKind[];\n}\n```\n\n----------------------------------------\n\nTITLE: License Status Response Example - Grafana Licensing API - HTTP\nDESCRIPTION: This snippet shows the HTTP response to a successful license check against Grafana's licensing API. The response code is 200 and the body contains the boolean value true. Output indicates a valid license.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nContent-Type: application/json\\nContent-Length: 4\\n\\ntrue\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as SQL String Literals\nDESCRIPTION: Shows the `:sqlstring` format option. This formats single or multi-valued variables into a comma-separated string suitable for SQL queries. Each value is enclosed in single quotes (`'`) and internal single quotes are escaped by doubling them (`''`). The example shows `[\"test'1\", \"test2\"]` interpolated as `\"'test''1','test2'\"`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nservers = [\"test'1\", \"test2\"]\nString to interpolate: '${servers:sqlstring}'\nInterpolation result: \"'test''1','test2'\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component Selectors with Mixed Attributes\nDESCRIPTION: TypeScript example showing how to define selectors for both aria-label and data-testid attributes in a component object.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Components = {\n  Login: {\n    openButton: 'open-button', // this looks for an aria-label\n    closeButton: 'data-testid modal-close-button', // this  looks for a data-testid\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Interval Variable in Graphite Function\nDESCRIPTION: This snippet demonstrates how to use an interval variable named 'myinterval' in a Graphite summarize function. The interval variable is used to specify the time range for summarization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_0\n\nLANGUAGE: graphite\nCODE:\n```\nsummarize($myinterval, sum, false)\n```\n\n----------------------------------------\n\nTITLE: Setting Hidden Email Subject in Go Template\nDESCRIPTION: This snippet utilizes a custom Go template function `HiddenSubject` to set a potentially hidden or programmatic subject line for the email. It dynamically includes the inviter's name (`.InvitedBy`) within the subject text. Requires the Go templating engine and context variables `.Subject` and `.InvitedBy`.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{HiddenSubject .Subject \"{{.InvitedBy}} has invited you to join Grafana\"}}\n```\n\n----------------------------------------\n\nTITLE: Using the Grafana UI Carousel Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the Carousel component from `@grafana/ui`. It shows how to import the component and pass an array of image objects (each with 'path' and 'name') to the 'images' prop to render an interactive image carousel. This example assumes a React environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Carousel/Carousel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Carousel } from '@grafana/ui';\n\nconst images = [\n  { path: '/path/to/image1.jpg', name: 'First Image' },\n  { path: '/path/to/image2.jpg', name: 'Second Image' },\n  { path: '/path/to/image3.jpg', name: 'Third Image' },\n];\n\n// Basic usage\n<Carousel images={images} />;\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion and Manipulation - Go Template\nDESCRIPTION: Shows how to use Go template functions {{ title }}, {{ toUpper }}, and {{ toLower }} for basic string case conversion in Grafana annotation and label templates. Requires Grafana Go templates. The input is a string, output is the manipulated string (converted case or title-cased). Best used for formatting user-facing strings or labels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/reference.md#2025-04-23_snippet_8\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ title \"hello, world!\" }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ toUpper \"Hello, world!\" }}\n\n```\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ toLower \"Hello, world!\" }}\n\n```\n\n----------------------------------------\n\nTITLE: Time Formatting with Approach A in Plaintext\nDESCRIPTION: Approach A for formatting time-based greetings showing two different timestamps. It displays dates in UTC format with years 0001 and 2000.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nApproach A\nGood day! It is 0001-01-01 00:00:00 +0000 UTC\nGood day! It is 2000-01-01 00:00:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Example Input Data (Query A) for Config from Query Results Transformation\nDESCRIPTION: This table represents example input data (Input[0], from Query A named ServerA) used in the 'Config from query results' transformation example. This data will have configuration applied to its 'Value' field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| Time          | Value |\n| ------------- | ----- |\n| 1626178119127 | 10    |\n| 1626178119129 | 30    |\n```\n\n----------------------------------------\n\nTITLE: Provisioning Viewer Role for Reporter Permissions via YAML (yaml)\nDESCRIPTION: This YAML configuration snippet provisions the Grafana Viewer role to inherit the permissions of both 'basic:viewer' and 'fixed:reports:writer', thereby granting the ability to manage reports. The 'from' list specifies permission inheritance, and the global and version fields track the deployment scope and configuration versioning. This snippet must be placed within a supported Grafana provisioning file and is ideal for infrastructure-as-code scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 2\n\nroles:\n  - name: 'basic:viewer'\n    global: true\n    version: 3\n    from:\n      - name: 'basic:viewer'\n        global: true\n      - name: 'fixed:reports:writer'\n        global: true\n```\n\n----------------------------------------\n\nTITLE: Using Named Capture Groups for Display Names and Values in Variables\nDESCRIPTION: A regular expression with named capture groups that separates the display text and actual values for variable options, creating a more user-friendly dropdown while maintaining the correct values for queries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_12\n\nLANGUAGE: regex\nCODE:\n```\n/chip_name=\"(?<text>[^\"]+)|chip=\"(?<value>[^\"]+)/g\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Read Timeout in Grafana Configuration\nDESCRIPTION: This configuration snippet sets the `read_timeout` option within the `[server]` section of the Grafana configuration file. It specifies the maximum duration (e.g., '5s', '5m', '5ms') Grafana waits for reading an incoming request before timing out and closing idle connections. Setting the value to `0` disables the timeout entirely.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v7-5.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[server]\nread_timeout = 0\n```\n\n----------------------------------------\n\nTITLE: Defining Role Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of roles. `roles:*` matches any role, while `roles:uid:randomuid` targets only the role with the specific UID 'randomuid'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_40\n\nLANGUAGE: text\nCODE:\n```\nroles:*\n```\n\nLANGUAGE: text\nCODE:\n```\nroles:uid:*\n```\n\n----------------------------------------\n\nTITLE: Showing Result of 'Labels to Fields' (Rows Mode - Series 2)\nDESCRIPTION: This Markdown table shows the partial output for the second time series when using the 'Labels to fields' transformation in 'Rows' mode. Similar to the first series, labels and their values are displayed in rows.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n| label      | value    |\n| ---------- | -------- |\n| Server     | Server B |\n| Datacenter | EU       |\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Core Frontend Development Server (Shell)\nDESCRIPTION: This shell command uses yarn to start the development server for the core Grafana frontend. It typically watches for file changes in the Grafana core source code and rebuilds the frontend automatically, facilitating rapid development.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana Service via init.d using Shell\nDESCRIPTION: Stops the Grafana server service using the legacy `service` command for init.d systems. This might be relevant on older systems or if Grafana was configured to use init.d instead of systemd. Requires `sudo` privileges and is part of the uninstallation process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo service grafana-server stop\n```\n\n----------------------------------------\n\nTITLE: Declaring Storybook Meta and ArgTypes for InlineToast - MDX\nDESCRIPTION: This snippet sets up Storybook metadata for the InlineToast component in MDX, indicating its documentation section and component reference. It also documents the intended use of InlineToast, which signals temporary states near other UI elements, and exposes its argument types (properties) for interactive controls. Dependencies include the imported InlineToast component and recognised MDX Storybook components. Inputs include component references and titles, and outputs are rendered documentation and controls within Storybook. Must be placed in an MDX documentation file processed by Storybook.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/InlineToast/InlineToast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|InlineToast\" component={InlineToast} />\n\n# InlineToast\n\nUsed to indicate temporal status near fields/components, such as a _Saved_ indicator next to a field, or a little _Copied!_ indicator above a button\n\n<ArgTypes of={InlineToast} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Cascader Component - Markdown/JSX\nDESCRIPTION: Defines the Storybook Meta configuration block, setting the title as 'MDX|Cascader' and specifying the imported Cascader component. This ensures Storybook properly recognizes and categorizes the Cascader documentation and stories. It should be placed at the top of the MDX file and expects the Cascader component and its props to be imported in the file's JavaScript context.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Meta title=\"MDX|Cascader\" component={Cascader} />\n```\n\n----------------------------------------\n\nTITLE: Deleting API Key Request Example using HTTP\nDESCRIPTION: Example HTTP DELETE request to delete a specific API key using the deprecated `/api/auth/keys/:id` endpoint (e.g., `/api/auth/keys/3`). Requires `apikeys:delete` permission on `apikeys:*` scope. Includes standard HTTP headers and an `Authorization` bearer token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/auth/keys/3 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Implementing TextArea with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a TextArea component for automatic multi-line text saving.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <TextArea\n      value={textAreaValue}\n      onChange={(e) => {\n        onChange(e.currentTarget.value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Wire Tool Error Message for Invalid Provider\nDESCRIPTION: An error message from Google's Wire dependency injection tool indicating that a struct variable named 'myFakeSet' is neither a provider nor a provider set. This typically occurs during compilation when Wire attempts to resolve dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/EmptyVar/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: var example.com/foo.myFakeSet struct{} is not a provider or a provider set\n```\n\n----------------------------------------\n\nTITLE: Viewing Grafana Log Warning for Unsigned/Invalid Plugins (Bash)\nDESCRIPTION: This log message indicates that Grafana found unsigned plugins or plugins with invalid signatures during startup scanning. By default, Grafana will not load or start these plugins. The specific plugin IDs involved are mentioned in the log.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/plugin-management/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nWARN[05-26|12:00:00] Some plugin scanning errors were found   errors=\"plugin '<plugin id>' is unsigned, plugin '<plugin id>' has an invalid signature\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Query History Database Migration via Config (INI)\nDESCRIPTION: This configuration entry, `query_history`, located in the `custom.ini` file (or equivalent Grafana configuration source), allows disabling the automatic migration of Explore query history from browser local storage to the Grafana database, introduced in Grafana 9.0. Set appropriately to prevent the migration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nquery_history\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Transformation Documentation (Shell)\nDESCRIPTION: Provides shell commands to navigate to the documentation directory within the Grafana repository and build the specific transformation documentation Markdown file (`index.md`) and potentially all documentation using `make`. These commands are part of the instructions for developers contributing to Grafana documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd /docs (from the root of the repository)\n$ make sources/panels-visualizations/query-transform-data/transform-data/index.md\n$ make docs\n```\n\n----------------------------------------\n\nTITLE: Rendering Modern PanelChrome Loading State (v9.4.0+) in React\nDESCRIPTION: Shows a rendered example of the modern approach to indicating a loading state in `PanelChrome` (v9.4.0+). It uses the `loadingState` prop set to `LoadingState.Loading` and demonstrates handling query cancellation through the `onCancelQuery` prop.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<PanelChrome\n  title=\"My awesome panel title\"\n  loadingState={LoadingState.Loading}\n  onCancelQuery={action('CancelQuery: onClick fired')}\n  width={400}\n  height={200}\n>\n  {(innerwidth, innerheight) => {\n    return (\n      <div\n        style={{\n          width: innerwidth,\n          height: innerheight,\n          background: 'rgba(230,0,0,0.05)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Content\n      </div>\n    );\n  }}\n</PanelChrome>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana using APT Repository (Bash)\nDESCRIPTION: Updates the local package list using 'apt-get update' and then upgrades all installed packages, including Grafana if installed from the official APT repository, using 'apt-get upgrade'. This method relies on the system's package manager to handle the upgrade process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/upgrade-common-tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n----------------------------------------\n\nTITLE: Managing User Conflicts with Grafana CLI (Bash)\nDESCRIPTION: This snippet shows Bash commands using `grafana-cli user-manager conflicts` to manage user identity conflicts that could arise from case-sensitivity issues in older Grafana versions. It covers listing conflicts, generating a patch file for resolution, validating the file, and ingesting the changes into the database. This tool is not needed for Grafana Cloud or instances using MySQL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-3.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# lists all the conflicting users\n$ grafana-cli user-manager conflicts list\n\n# creates a conflict patch file to edit\n$ grafana-cli user-manager conflicts generate-file\n\n# reads edited conflict patch file for validation\n$ grafana-cli user-manager conflicts validate-file <filepath>\n\n# ingests the conflict users file. Can be executed once per file and will change the state of the database.\n$ grafana-cli user-manager conflicts ingest-file <filepath>\n```\n\n----------------------------------------\n\nTITLE: Displaying User Name in Email Body using Go Template\nDESCRIPTION: This Go template snippet retrieves and displays the recipient's name (`.Name`) in the email's greeting. It assumes the `.Name` variable is passed into the template context by the Grafana backend.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_1\n\nLANGUAGE: Go Template\nCODE:\n```\n[[.Name]]\n```\n\n----------------------------------------\n\nTITLE: Sample InfluxDB Line Protocol Data\nDESCRIPTION: Sample data entries in InfluxDB line protocol format showing measurements for a system with two hosts (A and B). Each entry includes sensor readings, states, and timestamps in nanosecond precision.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/changing_types_NaN.txt#2025-04-23_snippet_0\n\nLANGUAGE: influxdb\nCODE:\n```\nsystem,host=A sensor=0,sensor2=\"NaN\",state=\"aaa\" 1616403090000000000\nsystem,host=B sensor=\"NaN\",sensor2=0,state=\"bbb\" 1616403090000000000\nsystem,host=A sensor=\"NaN\",sensor2=0,state=\"ccc\" 1616403091000000000\nsystem,host=B sensor=0,sensor2=\"NaN\",state=1 1616403091000000000\n```\n\n----------------------------------------\n\nTITLE: Admin-Level Organization Details by Name - JSON\nDESCRIPTION: This JSON snippet returns organization and address details for the organization identified by name. It is used after an admin-level lookup to verify existence and inspect organization metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"id\":1,\\n  \"name\":\"Main Org.\",\\n  \"address\":{\\n    \"address1\":\"\",\\n    \"address2\":\"\",\\n    \"city\":\"\",\\n    \"zipCode\":\"\",\\n    \"state\":\"\",\\n    \"country\":\"\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Event with Greeter in Go\nDESCRIPTION: Creates an initializer for the Event struct that takes a Greeter as a parameter and assigns it to the Event's Greeter field.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEvent(g Greeter) Event {\n    return Event{Greeter: g}\n}\n\ntype Event struct {\n    Greeter Greeter // <- adding a Greeter field\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting the Grafana Pod Name - kubectl - Bash\nDESCRIPTION: This command sets the `POD_NAME` shell variable to the name of the first Grafana pod, filtered by specific labels. It requires access to the Kubernetes cluster and a running Grafana deployment. The exported variable is useful for subsequent port-forward commands.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace monitoring -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n```\n\n----------------------------------------\n\nTITLE: Overriding Grafana Log Level via grafana.ini - INI Configuration in Bash Block\nDESCRIPTION: Provides a '[log]' section of 'grafana.ini' for setting log level to 'debug'. Needed to collect verbose logs for troubleshooting. To be placed in a ConfigMap and mounted into the Grafana pod. Presented here in a bash block, but contents are INI format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n[log]\n; # Either \"debug\", \"info\", \"warn\", \"error\", \"critical\", default is \"info\"\n; # we change from info to debug level\nlevel = debug\n\n```\n\n----------------------------------------\n\nTITLE: Adding a License Token via HTTP - Grafana Licensing API - HTTP\nDESCRIPTION: This HTTP POST request example illustrates sending a JSON license token to apply a license with the /licensing/token endpoint. Requires a Bearer token and Content-Type set to application/json. The payload includes a 'token' field with the JWT license. Ensure proper permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /licensing/token\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aGlzIjoiaXMiLCJub3QiOiJhIiwidmFsaWQiOiJsaWNlbnNlIn0.bxDzxIoJlYMwiEYKYT_l2s42z0Y30tY-6KKoyz9RuLE\"}\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Announcement Banners (Plaintext)\nDESCRIPTION: Defines the `banners:write` permission action allowing the creation of announcement banners in Grafana. This action does not list specific scope dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`banners:write`\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for LoadingBar in MDX\nDESCRIPTION: This snippet defines the Storybook metadata for the LoadingBar component using the <Meta> tag in MDX. The 'title' prop organizes the component in Storybook, while the 'component' prop registers the LoadingBar for interactive documentation. This requires Storybook MDX support and ensures the LoadingBar is documented as part of the Storybook UI.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|LoadingBar\" component={LoadingBar} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Unified Storage Playlists - INI\nDESCRIPTION: This snippet configures Grafana's Unified Storage playlist backend using an INI file. It specifies storage targets, enables HTTPS protocol for the server, toggles features such as Kubernetes-based playlist storage, and selects the unified storage type for the API server. The dualWriterMode setting under unified_storage controls how data is read/written across legacy and unified storage backends. Required dependency is Grafana running with a compatible backend; configuration must be placed in the appropriate config file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; need to specify target here for override to work later\\ntarget = all\\n\\n[server]\\n; https is required for kubectl\\nprotocol = https\\n\\n[feature_toggles]\\n; store playlists in k8s\\nkubernetesPlaylists = true\\n\\n[grafana-apiserver]\\n; use unified storage for k8s apiserver\\nstorage_type = unified\\n\\n# Dualwriter modes\\n# 0: disabled (default mode)\\n# 1: read from legacy, write to legacy, write to unified best-effort\\n# 2: read from legacy, write to both\\n# 3: read from unified, write to both\\n# 4: read from unified, write to unified\\n# 5: read from unified, write to unified, ignore background sync state\\n[unified_storage.playlists.playlist.grafana.app]\\ndualWriterMode = 0\n```\n\n----------------------------------------\n\nTITLE: Time Formatting with Approach B in Plaintext\nDESCRIPTION: Approach B for formatting time-based greetings showing two different timestamps. It displays dates in UTC format with years 0001 and 1000.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ExampleWithMocks/want/program_out.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nApproach B\nGood day! It is 0001-01-01 00:00:00 +0000 UTC\nGood day! It is 1000-01-01 00:00:00 +0000 UTC\n```\n\n----------------------------------------\n\nTITLE: Wire Error: Missing Provider for Recursive Dependency (Foo)\nDESCRIPTION: This complex Wire error message shows that a provider for 'example.com/foo.Foo' is missing. The dependency trace indicates 'Foo' is needed by 'example.com/foo.Zip' (via 'provideZip'), which is needed by 'example.com/foo.Zap' (via 'provideZap'), which is needed by 'example.com/foo.Zop' (via 'provideZop'). This chain originates from the requirements of the injector 'injectMissingRecursiveType' defined in 'example.com/foo/wire.go'. A provider for 'Foo' must be accessible within the Wire set used by this injector.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMissingRecursiveType: no provider found for example.com/foo.Foo\nneeded by example.com/foo.Zip in provider \"provideZip\" (example.com/foo/foo.go:x:y)\nneeded by example.com/foo.Zap in provider \"provideZap\" (example.com/foo/foo.go:x:y)\nneeded by example.com/foo.Zop in provider \"provideZop\" (example.com/foo/foo.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Migrating Grafana App Plugins from React Router v5 to v6\nDESCRIPTION: React Router v5 is deprecated in Grafana v11. App plugin developers are advised to migrate their plugins to use React Router v6. Refer to the official Grafana and React Router migration guides for detailed instructions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: YAML Build Configuration for Grafana Release Notes\nDESCRIPTION: YAML configuration for build settings and product labels specifying cloud, enterprise and open source distributions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-13.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.13\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folders and Dashboards at Root Level in HTTP\nDESCRIPTION: This HTTP GET request retrieves folders and dashboards at the root level. It uses the /api/search endpoint with query parameters for an empty search query and non-starred items.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder_dashboard_search.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/search?query=&starred=false HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Deleting a License Token via HTTP - Grafana Licensing API - HTTP\nDESCRIPTION: This example demonstrates sending a DELETE request to /api/licensing/token to remove the stored license from the Grafana database. Requires Bearer token authentication and a JSON body containing the 'instance' root URL. The operation mandates proper admin privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/licensing/token\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\"instance\": \"http://play.grafana.org/\"}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Azure Security Resources using Kusto Query Language\nDESCRIPTION: This query aggregates security resources, extending various properties and then summarizing the count of resources by recommendation name and state. It demonstrates the use of 'extend', 'summarize', and 'count' for complex data transformation and aggregation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/azure-monitor/query-editor/index.md#2025-04-23_snippet_6\n\nLANGUAGE: kusto\nCODE:\n```\nsecurityresources\n| where type == 'microsoft.security/assessments'\n| extend resourceId=id,\n    recommendationId=name,\n    resourceType=type,\n    recommendationName=properties.displayName,\n    source=properties.resourceDetails.Source,\n    recommendationState=properties.status.code,\n    description=properties.metadata.description,\n    assessmentType=properties.metadata.assessmentType,\n    remediationDescription=properties.metadata.remediationDescription,\n    policyDefinitionId=properties.metadata.policyDefinitionId,\n    implementationEffort=properties.metadata.implementationEffort,\n    recommendationSeverity=properties.metadata.severity,\n    category=properties.metadata.categories,\n    userImpact=properties.metadata.userImpact,\n    threats=properties.metadata.threats,\n    portalLink=properties.links.azurePortal\n| summarize numberOfResources=count(resourceId) by tostring(recommendationName), tostring(recommendationState)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Certificates from MQTT Container\nDESCRIPTION: Commands to display the contents of client certificate and key from the MQTT container. These certificates are required for mutual TLS authentication when configuring secure MQTT connections.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-mqtt-1 cat /etc/certs/client.pem\ndocker exec devenv-mqtt-1 cat /etc/certs/client.key\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Listing Contact Points - HTTP\nDESCRIPTION: Specifies a GET endpoint to list all configured contact points in provisioning within Grafana. It supports optional filtering by the 'name' query parameter. The endpoint returns a 200 OK response and a ContactPoints schema with the available resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/contact-points\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Authentication in Grafana\nDESCRIPTION: OAuth configuration settings for Grafana including client credentials, endpoints, and role mapping for Authentik integration.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nname = authentik\nenabled = true\nclient_id = 43e8d2746fe2e508325a23cdf816d6ddd12e94f1\nclient_secret = e50440f14a010fd69dfed85bc6c071653f22c73e2c6c8d7ba96a936937d92040936b7e5a4bcc1bf40d5cf1dc019b1db327a1a00e2183c53471fb7530d4a09d7e\nscopes = openid email profile\nauth_url = http://localhost:9000/application/o/authorize/\ntoken_url = http://localhost:9000/application/o/token/\napi_url = http://localhost:9000/application/o/userinfo/\nrole_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'\nsignout_redirect_url = http://localhost:9000/application/o/grafana-oidc/end-session/\n```\n\n----------------------------------------\n\nTITLE: Grafana Plugin Manifest Definition (JSON)\nDESCRIPTION: This JSON object, found within a PGP signed message, serves as the manifest for a Grafana plugin (\"test\", version \"1.0.0\"). It specifies the manifest version (2.0.0), signature details (type: grafana, organization: Grafana Labs), plugin metadata, timestamp, signing key ID, and a SHA256 hash for the `plugin.json` file, ensuring integrity when verified against the accompanying PGP signature.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/installer/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test\",\n  \"version\": \"1.0.0\",\n  \"time\": 1605807330546,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"2bb467c0bfd6c454551419efe475b8bf8573734e73c7bab52b14842adb62886f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using createTheme in Tests\nDESCRIPTION: Demonstrates how to use the createTheme function to generate a theme object for testing purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTheme } from '@grafana/data';\n\ndescribe('MyComponent', () => {\n  it('should work', () => {\n    result = functionThatNeedsTheme(createTheme());\n    expect(result).toBe(true);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic EmptyState Not-Found Variant in JSX\nDESCRIPTION: This snippet demonstrates the simplest use case for the `EmptyState` component with the `not-found` variant. It's used when a search or filter yields no results, providing only a relevant message. Default image and styling for this variant are used.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/EmptyState/EmptyState.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmptyState } from '@grafana/ui';\n\n<EmptyState variant=\"not-found\" message=\"No playlists found\" />;\n```\n\n----------------------------------------\n\nTITLE: Printing Common Labels and Annotations in Grafana Notification Templates - Go\nDESCRIPTION: This Go template example prints the count and values of resolved and firing alerts, then lists labels and annotations common to all alerts using '.CommonLabels.SortedPairs' and '.CommonAnnotations.SortedPairs'. It expects notification data with these structures supplied by Grafana alerting. Useful for summarizing alert groups with shared context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.common_labels_and_annotations\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ len .Alerts.Firing }} firing alert(s)\nCommon labels: {{ len .CommonLabels.SortedPairs }}\n{{ range .CommonLabels.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end }}\nCommon annotations: {{ len .CommonAnnotations.SortedPairs }}\n{{ range .CommonAnnotations.SortedPairs }}\n- {{ .Name }} = {{ .Value }}\n{{ end }}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Account token in Grafana\nDESCRIPTION: This command generates a new token for the previously created Service Account. The returned key should be securely stored as it cannot be retrieved later.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"test-token\"}' http://admin:admin@localhost:3000/api/serviceaccounts/<service account id>/tokens\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Kubeconfig with Default Grafana Credentials - YAML\nDESCRIPTION: This YAML fragment shows the user section with basic authentication for kubeconfig, using Grafana's default credentials. This fragment is to be substituted for the username and password fields in the full kubeconfig above. The primary limitation is the hardcoded secret keys, which is intended for local development and not production.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    username: admin\\n    password: admin\n```\n\n----------------------------------------\n\nTITLE: Defining Library Panel Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of library panels. `library.panels:*` matches any library panel, whereas `library.panels:uid:1` targets the specific library panel with UID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nlibrary.panels:*\n```\n\nLANGUAGE: text\nCODE:\n```\nlibrary.panels:uid:*\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Grafana Settings in INI Format\nDESCRIPTION: Sample configuration sections from a Grafana INI file showing default settings, security options, authentication settings, plugin configuration, and feature toggles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# default section\ninstance_name = ${HOSTNAME}\n\n[security]\nadmin_user = admin\n\n[auth.google]\nclient_secret = 0ldS3cretKey\n\n[plugin.grafana-image-renderer]\nrendering_ignore_https_errors = true\n\n[feature_toggles]\nenable = newNavigation\n```\n\n----------------------------------------\n\nTITLE: Defining Route Structure in Go\nDESCRIPTION: Defines the Route structure with various properties for handling alerts, including matchers, receivers, and nested routes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_47\n\nLANGUAGE: go\nCODE:\n```\n**Properties**\n\n{{% responsive-table %}}\n\n| Name                  | Type                               | Go type             | Required | Default | Description                             | Example |\n| --------------------- | ---------------------------------- | ------------------- | :------: | ------- | --------------------------------------- | ------- |\n| `continue`            | boolean                            | `bool`              |          |         |                                         |         |\n| `group_by`            | []string                           | `[]string`          |          |         |                                         |         |\n| `group_interval`      | string                             | string              |          |         |                                         |         |\n| `group_wait`          | string                             | string              |          |         |                                         |         |\n| `match`               | map of string                      | `map[string]string` |          |         | Deprecated. Remove before v1.0 release. |         |\n| `match_re`            | [MatchRegexps](#match-regexps)     | `MatchRegexps`      |          |         |                                         |         |\n| `matchers`            | [Matchers](#matchers)              | `Matchers`          |          |         |                                         |         |\n| `mute_time_intervals` | []string                           | `[]string`          |          |         |                                         |         |\n| `object_matchers`     | [ObjectMatchers](#object-matchers) | `ObjectMatchers`    |          |         |                                         |         |\n| `provenance`          | [Provenance](#provenance)          | Provenance          |          |         |                                         |         |\n| `receiver`            | string                             | string              |          |         |                                         |         |\n| `repeat_interval`     | string                             | string              |          |         |                                         |         |\n| `routes`              | [][Route](#route)                  | `[]*Route`          |          |         |                                         |         |\n\n{{% /responsive-table %}}\n```\n\n----------------------------------------\n\nTITLE: Documenting OAuth Organization Role Sync Settings - Markdown\nDESCRIPTION: This snippet demonstrates the use of markdown syntax to structure technical documentation about OAuth configuration options within Grafana. It explains `skip_org_role_sync` and `oauth_skip_org_role_update_sync`, provides their default values, describes their effects, and supplies behavior matrices for various auth providers using markdown tables. Dependencies are a markdown renderer, and the input is configuration setting behaviors; the output is marked-up documentation suitable for Grafana's community or internal use. There are no executable sections, only documentation structures and special admonition shortcodes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n#### `skip_org_role_sync`\n\n`skip_org_role_sync` prevents the synchronization of organization roles for a specific OAuth integration, while the deprecated setting `oauth_skip_org_role_update_sync` affects all configured OAuth providers.\n\nThe default value for `skip_org_role_sync` is `false`.\n\nWith `skip_org_role_sync` set to `false`, the users' organization and role is reset on every new login, based on the external provider's role. See your provider in the tables below.\n\nWith `skip_org_role_sync` set to `true`, when a user logs in for the first time, Grafana sets the organization role based on the value specified in `auto_assign_org_role` and forces the organization to `auto_assign_org_id` when specified, otherwise it falls back to OrgID `1`.\n\n{{< admonition type=\"note\" >}}\nEnabling `skip_org_role_sync` also disables the synchronization of Grafana Admins from the external provider, as such `allow_assign_grafana_admin` is ignored.\n{{< /admonition >}}\n\nUse this setting when you want to manage the organization roles of your users from within Grafana and be able to manually assign them to multiple organizations, or to prevent synchronization conflicts when they can be synchronized from another provider.\n\nThe behavior of `oauth_skip_org_role_update_sync` and `skip_org_role_sync`, can be seen in the tables below:\n\n`[auth.grafana_com]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                  | Modifiable |\n| --------------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| false                             | false                | Synchronize user organization role with Grafana.com role. If no role is provided, `auto_assign_org_role` is set.                    | false      |\n| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                      | true       |\n| false                             | true                 | Skips organization role synchronization for Grafana.com users. Role is set to `auto_assign_org_role`.                               | true       |\n| true                              | true                 | Skips organization role synchronization for Grafana.com users and all other OAuth providers. Role is set to `auto_assign_org_role`. | true       |\n\n`[auth.azuread]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                              | Modifiable |\n| --------------------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| false                             | false                | Synchronize user organization role with AzureAD role. If no role is provided, `auto_assign_org_role` is set.                    | false      |\n| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                  | true       |\n| false                             | true                 | Skips organization role synchronization for AzureAD users. Role is set to `auto_assign_org_role`.                               | true       |\n| true                              | true                 | Skips organization role synchronization for AzureAD users and all other OAuth providers. Role is set to `auto_assign_org_role`. | true       |\n\n`[auth.google]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                     | Modifiable |\n| --------------------------------- | -------------------- | -------------------------------------------------------------------------------------- | ---------- |\n| false                             | false                | User organization role is set to `auto_assign_org_role` and cannot be changed.         | false      |\n| true                              | false                | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |\n| false                             | true                 | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |\n| true                              | true                 | User organization role is set to `auto_assign_org_role` and can be changed in Grafana. | true       |\n\n{{< admonition type=\"note\" >}}\nFor GitLab, GitHub, Okta, Generic OAuth providers, Grafana synchronizes organization roles and sets Grafana Admins. The `allow_assign_grafana_admin` setting is also accounted for, to allow or not setting the Grafana Admin role from the external provider.\n{{< /admonition >}}\n\n`[auth.github]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                               | Modifiable |\n| --------------------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| false                             | false                | Synchronize user organization role with GitHub role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |\n| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                   | true       |\n| false                             | true                 | Skips organization role and Grafana Admin synchronization for GitHub users. Role is set to `auto_assign_org_role`.                                               | true       |\n| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for GitHub users. Role is set to `auto_assign_org_role`. | true       |\n\n`[auth.gitlab]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                               | Modifiable |\n| --------------------------------- | -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------- |\n| false                             | false                | Synchronize user organization role with GitLab role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |\n| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                   | true       |\n| false                             | true                 | Skips organization role and Grafana Admin synchronization for GitLab users. Role is set to `auto_assign_org_role`.                                               | true       |\n| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for GitLab users. Role is set to `auto_assign_org_role`. | true       |\n\n`[auth.generic_oauth]`\n\n| `oauth_skip_org_role_update_sync` | `skip_org_role_sync` | Resulting Org Role                                                                                                                                                       | Modifiable |\n| --------------------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------- |\n| false                             | false                | Synchronize user organization role with the provider's role. If no role is provided, `auto_assign_org_role` is set.                                                      | false      |\n| true                              | false                | Skips organization role synchronization for all OAuth providers' users. Role is set to `auto_assign_org_role`.                                                           | true       |\n| false                             | true                 | Skips organization role and Grafana Admin synchronization for the provider's users. Role is set to `auto_assign_org_role`.                                               | true       |\n| true                              | true                 | Skips organization role synchronization for all OAuth providers and skips Grafana Admin synchronization for the provider's users. Role is set to `auto_assign_org_role`. | true       |\n```\n\n----------------------------------------\n\nTITLE: Writing Public Grafana Dashboard Configuration (Plaintext)\nDESCRIPTION: Defines the `dashboards.public:write` permission action required to write shared (public) dashboard configurations in Grafana. This is linked to dashboard scopes `dashboards:*` and `dashboards:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n`dashboards.public:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`dashboards:*`</li><li>`dashboards:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing Message in Go\nDESCRIPTION: Creates a simple initializer function for the Message type that returns a hard-coded message.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewMessage() Message {\n    return Message(\"Hi there!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Grafana Service at Boot with init.d (Linux)\nDESCRIPTION: Configures the Grafana server service to start automatically at boot using init.d mechanisms (update-rc.d).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-rc.d grafana-server defaults\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Blocks and LoadingBar in JavaScript\nDESCRIPTION: This snippet imports core Storybook blocks including Meta, Canvas, and ArgTypes, as well as the LoadingBar component and its associated stories. Dependencies include '@storybook/blocks' and local LoadingBar components and stories. This setup is required for leveraging Storybook's MDX documentation features and creating interactive examples for the LoadingBar component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/LoadingBar/LoadingBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Canvas, ArgTypes } from '@storybook/blocks';\nimport { LoadingBar } from './LoadingBar';\nimport * as LoadingBarStories from './LoadingBar.story';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Meta and Cascader Component - TypeScript\nDESCRIPTION: This snippet imports the Meta and ArgTypes utilities from Storybook blocks and the Cascader component from the local module. These imports are required to define component metadata and property descriptions in the Storybook documentation. This is a prerequisite for configuring Storybook stories and ensuring the correct component context is available.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Cascader/Cascader.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Cascader } from './Cascader';\n```\n\n----------------------------------------\n\nTITLE: Response for Grafana Stats Request\nDESCRIPTION: Example response showing Grafana statistics with counts of various entities like users, organizations, dashboards, and alerts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"users\":2,\n  \"orgs\":1,\n  \"dashboards\":4,\n  \"snapshots\":2,\n  \"tags\":6,\n  \"datasources\":1,\n  \"playlists\":1,\n  \"stars\":2,\n  \"alerts\":2,\n  \"activeUsers\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TagList Props in JSX\nDESCRIPTION: This snippet shows how to display the props of the TagList component using Storybook's ArgTypes component. It provides a detailed view of the component's properties and their descriptions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/TagList.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes of={TagList} />\n```\n\n----------------------------------------\n\nTITLE: User Management Configuration Properties\nDESCRIPTION: Settings for user management including signup, organization assignment, and permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\nallow_sign_up=false\nallow_org_create=false\nauto_assign_org=true\nauto_assign_org_id=1\nauto_assign_org_role=Viewer\nverify_email_enabled=false\nlogin_default_org_id=-1\ndefault_theme=dark\ndefault_language=en-US\nviewers_can_edit=false\neditors_can_admin=false\nuser_invite_max_lifetime_duration=24h\nverification_email_max_lifetime_duration=1h\nlast_seen_update_interval=15m\n```\n\n----------------------------------------\n\nTITLE: Displaying Keyboard Shortcuts Reference - Markdown\nDESCRIPTION: This snippet demonstrates how pressing the question mark key ('?') on the keyboard opens the Grafana keyboard shortcuts reference overlay. It is documented for end-users and requires that the user be in a Grafana dashboard context. No external dependencies are required, and the input is the keyboard shortcut itself while the output is a UI overlay displaying available shortcuts. Usage is limited to environments where Grafana keyboard shortcuts are enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`?`\n```\n\n----------------------------------------\n\nTITLE: Defining a Dashboard Provider in Grafana - YAML\nDESCRIPTION: This YAML manifest defines a dashboard provider for Grafana. It specifies the provider's name, target folder, type ('file'), and a path to the dashboard definitions. Place this content in 'default.yaml' under 'provisioning/dashboards/'. You must set the 'options.path' value to the directory containing JSON dashboard definitions. Default paths for Windows and Linux are provided in the comments. Restart Grafana or wait for the refresh interval after placing the file. This configuration requires careful folder and path management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/provision-dashboards-and-data-sources/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\\n\\nproviders:\\n  - name: Default # A uniquely identifiable name for the provider\\n    folder: Services # The folder where to place the dashboards\\n    type: file\\n    options:\\n      path:\\n        <path to dashboard definitions>\\n        # Default path for Windows: C:/Program Files/GrafanaLabs/grafana/public/dashboards\\n        # Default path for Linux is: /var/lib/grafana/dashboards\\n\n```\n\n----------------------------------------\n\nTITLE: Representing Time Series Timestamps Efficiently (Plaintext Example)\nDESCRIPTION: This snippet demonstrates a sequence of Unix timestamps, showing both a naïve full storage format and an optimized delta (difference) encoding for storage efficiency. It visually illustrates how a time series database (TSDB) can reduce redundant data when storing regular measurements. Inputs are timestamp values, and outputs are arrays of original and delta-encoded timestamps. No dependencies are required, and this example is language-agnostic for demonstration purposes only.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/fundamentals/timeseries/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1572524345, 1572524375, 1572524404, 1572524434, 1572524464\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n1572524345, +30, +29, +30, +30\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n1572524345, +30, -1, +1, +0\n```\n\n----------------------------------------\n\nTITLE: Visualizing Alert Instance State Transitions using Mermaid\nDESCRIPTION: A Mermaid state diagram illustrating the lifecycle of a Grafana alert instance. It shows transitions between Normal, Pending, and Alerting states, including the 'Resolved' transition back to Normal. Notes indicate when 'Resolved' and 'Alerting' instances trigger notifications. This diagram visually supports the explanation of alert evaluation and state changes provided in the surrounding text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/fundamentals/alert-rule-evaluation/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    direction LR\n        Normal --///> Pending\n        note right of Normal\n            Route \"Resolved\" alert instances\n            for notifications\n        end note\n        Pending --///> Alerting\n        Alerting --///> Normal: Resolved\n        note right of Alerting\n            Route \"Alerting\" alert instances\n            for notifications\n        end note\n```\n\n----------------------------------------\n\nTITLE: Filtering Query Variable Results with __searchFilter - SQL\nDESCRIPTION: Filters hostname query results interactively using the $__searchFilter variable, which adapts to user's input in the dashboard's dropdown selection. The filter is enclosed in quotes as required by Grafana. Useful for responsive searching in large datasets.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mysql/query-editor/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT hostname FROM my_host  WHERE hostname LIKE '$__searchFilter'\n```\n\n----------------------------------------\n\nTITLE: Disabling Organization Role Sync from Grafana Cloud\nDESCRIPTION: Configuration to prevent Grafana Cloud from overriding user organization roles in the Grafana instance, allowing local role management.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/grafana-cloud/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auth.grafana_com]\n# ..\n# prevents the sync of org roles from Grafana.com\nskip_org_role_sync = true\n```\n\n----------------------------------------\n\nTITLE: Defining Update Service Account Parameters in Go\nDESCRIPTION: This snippet shows how to define the parameters for the updateServiceAccount endpoint. It includes a path parameter for the service account ID and a body parameter for the update form.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// swagger:parameters updateServiceAccount\ntype UpdateServiceAccountParams struct {\n\t// in:path\n\tServiceAccountId int64 `json:\"serviceAccountId\"`\n\t// in:body\n\tBody serviceaccounts.UpdateServiceAccountForm\n}\n```\n\n----------------------------------------\n\nTITLE: CPU Usage Metrics in Prometheus Format\nDESCRIPTION: Time-series metrics showing CPU usage statistics including total user seconds and guest seconds across different CPU cores and modes. Each line represents a distinct metric with labels for CPU number and mode, followed by the metric value and timestamp in nanoseconds.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields.txt#2025-04-23_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nnode_cpu,cpu=7,mode=user seconds_total=6410.4799999999996 1625783151607273176\nnode_cpu,cpu=0,mode=user guest_seconds_total=0 1625783151607273176\nnode_cpu,cpu=0,mode=nice guest_seconds_total=0 1625783151607273176\nnode_cpu,cpu=1,mode=user guest_seconds_total=0 1625783151607273176\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Unassigning Role from Team - Grafana Access Control - JSON\nDESCRIPTION: Example JSON response for successful removal of a role from a team, with a message confirming the unassignment. HTTP/1.1 200 OK and Content-Type: application/json are used.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Role removed from team.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Multiple Bindings Error in Google Wire Dependency Injection\nDESCRIPTION: An error message from the Google Wire dependency injection tool showing that there are multiple bindings for the 'Foo' type. The type is provided both by a provider function 'provideFoo' and through a provider set 'Set', while also being passed as an argument to an injector function 'injectBar'.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectInputConflict/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: multiple bindings for example.com/foo.Foo\ncurrent:\n<- provider \"provideFoo\" (example.com/foo/foo.go:x:y)\n<- provider set \"Set\" (example.com/foo/foo.go:x:y)\nprevious:\n<- argument foo to injector function injectBar (example.com/foo/wire.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Defining Provider with Error Handling in Go\nDESCRIPTION: Illustrates a provider function (ProvideBaz) that can return an error along with the value.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\nimport (\n    \"context\"\n    \"errors\"\n)\n\n// ...\n\ntype Baz struct {\n    X int\n}\n\n// ProvideBaz returns a value if Bar is not zero.\nfunc ProvideBaz(ctx context.Context, bar Bar) (Baz, error) {\n    if bar.X == 0 {\n        return Baz{}, errors.New(\"cannot provide baz when bar is zero\")\n    }\n    return Baz{X: bar.X}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Key ID for JWT Verification\nDESCRIPTION: Configuration for specifying the Key ID when verifying JWT tokens with a specific key.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nkey_id = my-key-id\n```\n\n----------------------------------------\n\nTITLE: Scaling Grafana Instances\nDESCRIPTION: Commands to scale the number of Grafana instances using Docker Compose\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --scale grafana=<instances> -d\n# for example 3 instances\n$ docker-compose up --scale grafana=3 -d\n```\n\n----------------------------------------\n\nTITLE: Including Shared Value Mapping Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to embed a reusable documentation section detailing value mapping options used for customizing how values are displayed in Grafana visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/value-mappings-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component and Storybook Dependencies\nDESCRIPTION: Imports the necessary Storybook documentation components and the Badge component for documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Badge/Badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Badge } from './Badge';\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dependency Injection Error in Go\nDESCRIPTION: This error message indicates a problem with dependency injection using Wire in a Go file. The provider for 'example.com/foo.Foo' returns a cleanup function, but the injection point does not handle this cleanup function.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InjectorMissingCleanup/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectFoo: provider for example.com/foo.Foo returns cleanup but injection does not return cleanup function\n```\n\n----------------------------------------\n\nTITLE: Importing Toggletip Component in TypeScript\nDESCRIPTION: This code snippet shows how to import the Toggletip component and its types for use in a TypeScript environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Toggletip/Toggletip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ArgTypes } from '@storybook/blocks';\nimport { Toggletip } from './Toggletip';\n```\n\n----------------------------------------\n\nTITLE: Using Animation with and without Reduced Motion Handling (Styled Components, TypeScript)\nDESCRIPTION: This set of code snippets demonstrates correct and incorrect usage of animation properties within the Grafana CSS-in-JS framework. The bad example applies CSS animation unconditionally, while the good examples show how to wrap animations in a media query or use the theme.transitions.handleMotion utility for accessibility and motion sensitivity. Dependencies: GrafanaTheme2, css from styled-components/emotion, and a defined rotate and pulse animation. Input: theme object. Output: style object for a 'loading' class. The pattern must avoid applying motion for users with reduced-motion preferences.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-eslint-rules/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Bad ❌\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loading: css({\n    animationName: rotate,\n    animationDuration: '2s',\n    animationIterationCount: 'infinite',\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Good ✅\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loading: css({\n    [theme.transitions.handleMotion('no-preference')]: {\n      animationName: rotate,\n      animationDuration: '2s',\n      animationIterationCount: 'infinite',\n    },\n    [theme.transitions.handleMotion('reduce')]: {\n      animationName: pulse,\n      animationDuration: '2s',\n      animationIterationCount: 'infinite',\n    },\n  }),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Good ✅\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loading: css({\n    '@media (prefers-reduced-motion: no-preference)': {\n      animationName: rotate,\n      animationDuration: '2s',\n      animationIterationCount: 'infinite',\n    },\n    '@media (prefers-reduced-motion: reduce)': {\n      animationName: pulse,\n      animationDuration: '2s',\n      animationIterationCount: 'infinite',\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video for InfluxDB SQL Support using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds a YouTube video with the ID 'jGclGsv5PBA' into the documentation. The video likely demonstrates or explains the new native SQL support feature for InfluxDB within Grafana. Requires the Hugo static site generator and its 'youtube' shortcode definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-3.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"jGclGsv5PBA\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of data sources. `datasources:*` matches any data source, whereas `datasources:uid:1` targets the specific data source with UID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\ndatasources:*\n```\n\nLANGUAGE: text\nCODE:\n```\ndatasources:uid:*\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana with JWT Authentication\nDESCRIPTION: Command to access the Grafana instance configured with JWT authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttp://env.grafana.local:8088\n```\n\n----------------------------------------\n\nTITLE: Querying Log Groups with OpenSearch SQL in CloudWatch\nDESCRIPTION: Demonstrates how to query a single log group using OpenSearch SQL syntax in CloudWatch. The query counts exceptions within a specified time window.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/aws-cloudwatch/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT window.start, COUNT(*) AS exceptionCount\nFROM `log_group`\nWHERE `@message` LIKE '%Exception%'\n```\n\n----------------------------------------\n\nTITLE: Representing Permissions for All Subresources of a Type in OpenFGA\nDESCRIPTION: This tuple format allows granting a user ('user:1') 'read' access to all subresources of a specific type under a given resource group (e.g., all dashboard subresources). The object identifier targets the subresource type directly.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “read”, object:”resource:dashboard.grafana.app/dashboards/<subresource>” }\n```\n\n----------------------------------------\n\nTITLE: Creating Folder via kubectl - Shell\nDESCRIPTION: This shell command creates a Folder custom resource in Kubernetes by applying the specified manifest file using a Grafana-authenticated kubeconfig. This requires proper cluster setup and the existence of the folder-generate.yaml file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig=./grafana.kubeconfig create -f folder-generate.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Grafana Icons\nDESCRIPTION: Commands for setting up the development environment and generating icon components. Includes instructions for installing dependencies and regenerating components after changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn generate\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Line Protocol - Actuator Commands Data Point 1\nDESCRIPTION: InfluxDB line protocol data point containing measurements for aircraft actuator states including angles, currents and brake positions. Timestamp: 1618400059121931000\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/mixed_number_types.txt#2025-04-23_snippet_0\n\nLANGUAGE: influxdb\nCODE:\n```\navionics_actuator_ActuatorCommands,host=MacBook-Pro-Alexander.local tilt_deg_2=-17.7650375,surface_angle_deg_3=11.6852818,tilt_deg_0=-1.15918803,surface_angle_deg_8=-9.71168709,pitch_deg_4=-15.3900461,motor_current_A_6=12.0532084,pitch_brake_3=true,surface_angle_deg_1=-12.3403225,surface_angle_deg_7=29.6087742,tilt_brake_1=true,motor_current_A_11=15.4619112,motor_current_A_5=-5.99128914,pitch_brake_1=true,motor_current_A_2=9.32099056,tilt_brake_0=true,tilt_brake_4=false,tailno=\"GHIL\",motor_current_A_1=2.68936205,pitch_brake_5=false,tilt_deg_3=47.3740387,surface_angle_deg_2=15.5803757,motor_current_A_4=24.7537708,tilt_deg_4=-32.8259926,pitch_brake_2=false,surface_angle_deg_0=-13.7655039,pitch_brake_0=true,tilt_deg_1=-20.9695129,motor_current_A_3=9.7648468,pitch_deg_5=9.11340141,motor_current_A_10=43.7951317,pitch_deg_1=8.13307095,surface_angle_deg_4=16.7721748,surface_angle_deg_6=-0.672622204,tilt_brake_2=true,motor_current_A_7=-15.5444078,surface_angle_deg_9=-27.5968456,tilt_brake_5=true,pitch_deg_2=-3.20253587,pitch_brake_4=true,tilt_deg_5=7.48156977,motor_current_A_8=37.8594284,pitch_deg_0=-29.9564457,tilt_brake_3=true,motor_current_A_0=1.99507976,surface_angle_deg_5=-16.7661037,pitch_deg_3=-20.904705,recorder=\"fcc1\",motor_current_A_9=-19.5889759 1618400059121931000\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in JSX Components\nDESCRIPTION: JSX example demonstrating how to import and use selectors from the E2E framework in component markup.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { selectors } from '@grafana/e2e-selectors';\n\n<input data-testid={selectors.pages.Login.username} className=\"gf-form-input login-form-input\" type=\"text\" />;\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Library Elements Response Example (HTTP/JSON)\nDESCRIPTION: Example HTTP 200 OK response for the 'Get all library elements' request. The JSON body includes pagination details (`totalCount`, `page`, `perPage`) and an array of library element objects (`elements`) with their properties like ID, UID, name, kind, model, and metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"result\": {\n     \"totalCount\": 15,\n     \"page\": 1,\n     \"perPage\": 10\n     \"elements\": [\n        {\n            \"id\": 25,\n            \"orgId\": 1,\n            \"folderId\": 0,\n            \"uid\": \"V--OrYHnz\",\n            \"name\": \"API docs Example\",\n            \"kind\": 1,\n            \"type\": \"text\",\n            \"description\": \"\",\n            \"model\": {...},\n            \"version\": 1,\n            \"meta\": {\n                \"folderName\": \"General\",\n                \"folderUid\": \"\",\n                \"connectedDashboards\": 1,\n                \"created\": \"2021-09-27T09:56:17+02:00\",\n                \"updated\": \"2021-09-27T09:56:17+02:00\",\n                \"createdBy\": {\n                    \"id\": 1,\n                    \"name\": \"admin\",\n                    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n                },\n                \"updatedBy\": {\n                    \"id\": 1,\n                    \"name\": \"admin\",\n                    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n                }\n            }\n        },\n        {...}\n        {...}\n     ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.insights:reader\nDESCRIPTION: Specifies the `fixed:datasources.insights:reader` role (ID: `fixed_EBZ3NwlfecNPp2p0XcZRC1nfEYk`) within Grafana. This role grants the `datasources.insights:read` permission, allowing users to read data source insights data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.insights:reader\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_EBZ3NwlfecNPp2p0XcZRC1nfEYk\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- datasources.insights:read\n```\n\n----------------------------------------\n\nTITLE: Building and Watching Grafana Test Plugins\nDESCRIPTION: Builds the test plugins located in the designated directory (likely `plugins-repo/` or similar) and watches for file changes. This allows developers to see updates to test plugins reflected during local development without manual rebuilds.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn e2e:plugin:build:dev\n```\n\n----------------------------------------\n\nTITLE: Listing TLS Certificates in MQTT Container\nDESCRIPTION: Command to list available TLS certificates in the /etc/certs directory of the MQTT container. Used for verifying available certificate files for TLS configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/mqtt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-mqtt-1 ls /etc/certs/\n```\n\n----------------------------------------\n\nTITLE: Rendering Spinner Component Properties in Storybook\nDESCRIPTION: This JSX code displays the properties (ArgTypes) of the Spinner component in the Storybook documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<ArgTypes of={Spinner} />\n```\n\n----------------------------------------\n\nTITLE: Data Source Configuration Properties\nDESCRIPTION: Configuration for data source defaults and SQL connection settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\ndefault_manage_alerts_ui_toggle=\nmax_open_conns_default=100\nmax_idle_conns_default=100\nmax_conn_lifetime_default=14400\n```\n\n----------------------------------------\n\nTITLE: Defining grafana.datasource.request Attributes for OpenTelemetry\nDESCRIPTION: Defines OpenTelemetry semantic convention attributes for Grafana datasource requests. It includes `grafana.datasource.request.query_count` (int, e.g., '3'), representing the number of queries in the request. This attribute is recommended and stable.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- semconv trace.grafana.datasource.request -->\n| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |\n|---|---|---|---|---|---|\n| `grafana.datasource.request.query_count` | int | The number of queries in the request. | `3` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n<!-- endsemconv -->\n```\n\n----------------------------------------\n\nTITLE: Showing Result of Outer Join on Time Series Data\nDESCRIPTION: This Markdown table illustrates the output after applying an outer join transformation to the data from Query A and Query B. The join includes all rows from both queries based on the 'Time' column, filling in missing values with nulls where timestamps don't match.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Job     | Uptime    | Server   | Errors |\n| ------------------- | ------- | --------- | -------- | ------ |\n| 2020-07-07 11:04:20 |         |           | server 3 | 10     |\n| 2020-07-07 11:14:20 | postgre | 345001233 |          |        |\n| 2020-07-07 11:34:20 | node    | 25260122  | server 1 | 15     |\n| 2020-07-07 11:24:20 | postgre | 123001233 | server 2 | 5      |\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Log Entry for Plugin Registration (Text)\nDESCRIPTION: Illustrates a typical informational log message produced by the Grafana server when it successfully detects and registers a plugin upon startup. This specific example shows the registration of a plugin with the ID `my-plugin`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nINFO[01-01|12:00:00] Plugin registered       logger=plugin.loader pluginID=my-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Service Account Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of service accounts within an organization. `serviceaccounts:*` matches any service account, while `serviceaccounts:id:1` targets the specific service account with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_42\n\nLANGUAGE: text\nCODE:\n```\nserviceaccounts:*\n```\n\nLANGUAGE: text\nCODE:\n```\nserviceaccounts:id:*\n```\n\n----------------------------------------\n\nTITLE: Tooltip Options Table in Markdown\nDESCRIPTION: Markdown table defining tooltip configuration options for Grafana visualizations, including tooltip mode and maximum width settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/xy-chart/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option       | Description |\n| ------------ | ----------- |\n| Tooltip mode | When you hover your cursor over the visualization, Grafana can display tooltips. Choose how they behave:<ul><li>**Single** - The hover tooltip shows only a single series, the one that you are hovering over on the visualization.</li><li>**Hidden** - Do not display the tooltip when you interact with the visualization.</li></ul> |\n| Max width    | Set the maximum width of the tooltip box. |\n```\n\n----------------------------------------\n\nTITLE: Creating a Hubot Alias for a Grafana Command (Hubot Command/Bash)\nDESCRIPTION: This is an example command sent to a running Hubot instance that has the `hubot-alias` plugin installed. It creates an alias named `graf-lb`. When a user types `hubot graf-lb`, Hubot will execute the longer command `graf db loadbalancers:2 now-20m`, which retrieves panel 2 from the 'loadbalancers' dashboard for the last 20 minutes. This demonstrates how to simplify complex Grafana queries via Hubot.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhubot alias graf-lb=graf db loadbalancers:2 now-20m\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: JSX configuration for Storybook documentation, setting up the component metadata.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Collapse/CollapsableSection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"MDX|CollapsableSection\" component={CollapsableSection} />\n```\n\n----------------------------------------\n\nTITLE: Building Individual Grafana Packages using Yarn Scope\nDESCRIPTION: This command uses Yarn workspaces and the `--scope` flag to build specific individual packages within the `@grafana` namespace (e.g., data, ui, runtime). It runs the `packages:build` script defined in the root `package.json`.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn packages:build --scope=@grafana/<data|e2e|e2e-selectors|runtime|schema|ui>\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Retrieving a Shared Dashboard in Grafana\nDESCRIPTION: This HTTP response returns details of the shared dashboard including its UID, access token, creation information, and configuration settings like time selection, enabled status, and annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_public.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"uid\": \"e71950f3-e7dd-4d1e-aa8a-a857bc5e7d64\",\n    \"dashboardUid\": \"xCpsVuc4z\",\n    \"accessToken\": \"dab10f3a4fbb4342a602b03079c7ed64\",\n    \"createdBy\": 1,\n    \"updatedBy\": 1,\n    \"createdAt\": \"2023-09-05T15:48:21-03:00\",\n    \"updatedAt\": \"2023-09-05T15:48:21-03:00\",\n    \"timeSelectionEnabled\": false,\n    \"isEnabled\": false,\n    \"annotationsEnabled\": false,\n    \"share\": \"public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Meta configuration for the MultiCombobox Storybook documentation using JSX syntax.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/MultiCombobox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"MDX|MultiCombobox\" component={MultiCombobox} />\n```\n\n----------------------------------------\n\nTITLE: Grafana Plugin Manifest Content in JSON\nDESCRIPTION: This JSON object represents the signed content within the PGP message, acting as a manifest for a Grafana plugin. It specifies the manifest version, signature details (type, organization), plugin identifier ('test-app'), version ('1.0.0'), signing timestamp, the PGP Key ID used for signing, and a mapping of file paths within the plugin to their SHA512 checksums. This structure is used by Grafana to verify the integrity of plugin files upon installation or loading.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/includes-symlinks/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1622547655175,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"symlink_to_txt\": \"9f32c171bf78a85d5cb77a48ab44f85578ee2942a1fc9f9ec4fde194ae4ff048\",\n    \"plugin.json\": \"c59a51bf6d7ecd7a99608ccb99353390c8b973672a938a0247164324005c0caf\",\n    \"dashboards/connections.json\": \"bea86da4be970b98dc4681802ab55cdef3441dc3eb3c654cb207948d17b25303\",\n    \"dashboards/extra/memory.json\": \"7c042464941084caa91d0a9a2f188b05315a9796308a652ccdee31ca4fbcbfee\",\n    \"text.txt\": \"9f32c171bf78a85d5cb77a48ab44f85578ee2942a1fc9f9ec4fde194ae4ff048\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication in Grafana\nDESCRIPTION: LDAP configuration settings for Grafana's config file to enable Authentik LDAP authentication with active sync.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.ldap]\nenabled = true\nconfig_file = devenv/docker/blocks/auth/authentik/ldap_authentik.toml\n\nsync_cron = \"* * * * 1\"\nactive_sync_enabled = true\n```\n\n----------------------------------------\n\nTITLE: Example Vault Configuration for Development Server in Grafana INI\nDESCRIPTION: Provides a concrete example of configuring the `[keystore.vault]` section in `grafana.ini` to connect to a local Vault development server (`vault server -dev`). It sets the URL, specifies 'token' as the authentication method, and provides a placeholder token.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/integrate-with-hashicorp-vault/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[keystore.vault]\nurl = http://127.0.0.1:8200 # HTTP should only be used for local testing\nauth_method = token\ntoken = s.sAZLyI0r7sFLMPq6MWtoOhAN # replace with your key\n```\n\n----------------------------------------\n\nTITLE: Embedding Back Up Steps for Grafana Data - Markdown\nDESCRIPTION: This snippet embeds shared backup instructions relevant to Grafana upgrades using a Hugo shortcode. Dependencies include the Hugo documentation infrastructure and prepared backup guidance in 'back-up-grafana.md'. The 'leveloffset' parameter controls heading levels for proper document structure. Inputs include the version placeholder, which should be substituted during the build. Output is contextually integrated backup documentation, but requires the static site generator's cooperation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v10.3/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\\\"back-up/back-up-grafana.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" leveloffset=\\\"+1\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Using Grafana CLI Admin Command with Homebrew (Apple Silicon Path)\nDESCRIPTION: Executes a Grafana CLI admin command (`reset-admin-password`) for a Homebrew installation on Apple Silicon. It specifies the paths for the CLI binary, configuration file (`grafana.ini`), homepath, and overrides the data path. Replace `<new password>` with the desired new administrator password. Paths may differ on Intel-based Macs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/mac/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/opt/homebrew/opt/grafana/bin/grafana cli --config /opt/homebrew/etc/grafana/grafana.ini --homepath /opt/homebrew/opt/grafana/share/grafana --configOverrides cfg:default.paths.data=/opt/homebrew/var/lib/grafana admin reset-admin-password <new password>\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Alert Labels and Annotations Template in Grafana\nDESCRIPTION: This snippet demonstrates how to execute the custom template for displaying alert labels and annotations by passing the context (dot) to the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"custom.alert_labels_and_annotations\" . }}\n```\n\n----------------------------------------\n\nTITLE: Rendering RadioButtonGroup with Required Props in React (JSX)\nDESCRIPTION: This snippet illustrates rendering the RadioButtonGroup component with options, value, and onChange properties. \"options\" should be an array of option objects, \"value\" the current selected value, and \"onChange\" a callback for value changes. Inputs and outputs must adhere to component expectations, and the options must be mutually exclusive. This example assumes RadioButtonGroup is correctly imported.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RadioButtonGroup options={...} value={...} onChange={...} />\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Schema Package\nDESCRIPTION: Commands to install the @grafana/schema package using either yarn or npm package managers\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-schema/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @grafana/schema\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @grafana/schema\n```\n\n----------------------------------------\n\nTITLE: Structuring a PGP Signed Message for Grafana Plugin Manifest\nDESCRIPTION: This text represents a complete PGP signed message containing a Grafana plugin manifest (JSON payload). The structure includes the signed message content enclosed between '-----BEGIN PGP SIGNED MESSAGE-----' and '-----BEGIN PGP SIGNATURE-----', specifying the hash algorithm used (SHA512). The block concludes with the ASCII-armored PGP signature itself, providing verification of the message's origin and integrity.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/non-pvt-with-root-url/plugin/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"rootUrls\": [\n    \"https://dev.grafana.com/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661173657946,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.10\nComment: https://openpgpjs.org\n\nwrgEARMKAAYFAmMDf5oAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm54/fAgkBVr9FXILsku+PsG86pZbxSbB/5/OeDsoqq9vJ30R3yaBYJC0N\ntcS1PtWPzc3yMqJY1zi5pem0WfmYdH3j++NqB3QCCIUz1eAjgbilvIvoyj/j\nIa9Vcje1c3xApMFAeD4DdUBgFljAUFzz48IjZacjSNFm+gaNPhWJzYmo83wz\nVqEbGL1A\n=SzNa\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Referencing Mock API Module Path in TypeScript\nDESCRIPTION: File path reference for mock API helper functions used in Grafana alerting tests.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic/app/features/alerting/unified/mockApi.ts\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Local Aggregation Test Resources (Shell)\nDESCRIPTION: This command uses `kubectl delete` with the `-f` flag pointing to the example directory (`./pkg/services/apiserver/aggregator/examples/`) containing the manifest files. It removes the `APIService` and `ExternalName` resources previously created using `kubectl apply`, effectively unregistering the example service from the Grafana aggregator and cleaning up the test setup. Requires `KUBECONFIG` to be set correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f ./pkg/services/apiserver/aggregator/examples/\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Number Provider in Go\nDESCRIPTION: Example showing an unused provider function that returns an event number, demonstrating Wire's error detection for unused providers.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEventNumber() int  {\n    return 1\n}\n\nfunc InitializeEvent(phrase string) (Event, error) {\n     // woops! NewEventNumber is unused.\n    wire.Build(NewEvent, NewGreeter, NewMessage, NewEventNumber)\n    return Event{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure Example for JWT Claims\nDESCRIPTION: Example of a JWT structure with nested user attributes that can be accessed using JMESPath syntax for username and email claims.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"user\": {\n    \"UID\": \"1234567890\",\n    \"name\": \"John Doe\",\n    \"username\": \"johndoe\",\n    \"emails\": [\"personal@email.com\", \"professional@email.com\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flux Query with Macro Usage\nDESCRIPTION: Example of a Flux query using Grafana macros for time range, bucket, and window period. Shows both the original query with macros and the interpolated version with actual values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_3\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: v.defaultBucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\" or r[\"_measurement\"] == \"swap\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_system\" or r[\"_field\"] == \"free\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean)\n  |> yield(name: \"mean\")\n```\n\nLANGUAGE: flux\nCODE:\n```\nfrom(bucket: \"grafana\")\n  |> range(start: 2020-06-11T13:59:07Z, stop: 2020-06-11T14:59:07Z)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"cpu\" or r[\"_measurement\"] == \"swap\")\n  |> filter(fn: (r) => r[\"_field\"] == \"usage_system\" or r[\"_field\"] == \"free\")\n  |> aggregateWindow(every: 2s, fn: mean)\n  |> yield(name: \"mean\")\n```\n\n----------------------------------------\n\nTITLE: Sample Trace JSON Structure\nDESCRIPTION: Example JSON structure showing a single trace with span details, including trace ID, span ID, operation name, timestamps, tags, and process information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"traceID\": \"2ee9739529395e31\",\n      \"spans\": [\n        {\n          \"traceID\": \"2ee9739529395e31\",\n          \"spanID\": \"2ee9739529395e31\",\n          \"flags\": 1,\n          \"operationName\": \"CAS\",\n          \"references\": [],\n          \"startTime\": 1616095319593196,\n          \"duration\": 1004,\n          \"tags\": [\n            {\n              \"key\": \"sampler.type\",\n              \"type\": \"string\",\n              \"value\": \"const\"\n            }\n          ],\n          \"logs\": [],\n          \"processID\": \"p1\",\n          \"warnings\": null\n        }\n      ],\n      \"processes\": {\n        \"p1\": {\n          \"serviceName\": \"loki-all\",\n          \"tags\": [\n            {\n              \"key\": \"jaeger.version\",\n              \"type\": \"string\",\n              \"value\": \"Go-2.25.0\"\n            }\n          ]\n        }\n      },\n      \"warnings\": null\n    }\n  ],\n  \"total\": 0,\n  \"limit\": 0,\n  \"offset\": 0,\n  \"errors\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Horizontal Divider Usage with @grafana/ui - TypeScript\nDESCRIPTION: This snippet imports the Divider component from @grafana/ui and shows how to insert a horizontal divider between a page header and main content in a React component. Dependencies required are React and the @grafana/ui library. No special props are passed, so the Divider defaults to horizontal mode. Inputs are typical JSX; output is a visual separation within the page layout. The snippet must be used within a React rendering context.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Divider/Divider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Divider } from '@grafana/ui';\n\n    <header>\n        <h1>My title here</h1>\n        <img src=\"logo.png\" alt=\"logo\" />\n    </header>\n    <Divider />\n    <main>\n        <p>Main content goes here</p>\n    </main>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Instant Query Value\nDESCRIPTION: This Go template snippet shows how to access the value of an instant query result, identified by Ref ID 'A', using the `$values` variable within a Grafana alert template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_7\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $values.A.Value }}\n```\n\n----------------------------------------\n\nTITLE: Release Notes Configuration in YAML\nDESCRIPTION: YAML configuration file for Grafana 7.5.10 release notes specifying build settings, product labels and title information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-10.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.10\n```\n\n----------------------------------------\n\nTITLE: Testing Accessibility with React Testing Library\nDESCRIPTION: Demonstrates how to write tests with accessibility in mind using React Testing Library. The example tests whether an input field has the correct value by querying it by its role and accessible name.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nit('has username set', () => {\n  expect(screen.getByRole('textbox', { name: 'Username' })).toHaveValue('Test');\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Grid using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode calls the `card-grid` template to generate a grid of navigational cards. The `key=\\\"cards\\\"` parameter specifies that the card data should be sourced from the `cards` object (specifically its `items` array) in the frontmatter. The `type=\\\"simple\\\"` attribute likely controls the visual layout or style of the card grid.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< card-grid key=\"cards\" type=\"simple\" >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering TextLink with Standalone External Link in React (JSX)\nDESCRIPTION: This snippet shows how to render an external, standalone TextLink component using the href, color, inline, and external props. It demonstrates changing the link color to the 'primary' palette, setting the link as non-inline (standalone), and opening an external URL. Dependencies: React, Grafana UI's TextLink component. The main prop parameters are href (destination URL), color (link color, such as 'primary'), inline (boolean for inline/standalone), and external (opens link externally, shows icon). The output is an anchor element styled based on the props, with appearance adapting to dark/light theme settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextLink href=\\\"https://google.es\\\" color=\\\"primary\\\" inline={false} external>\\n  This an external standalone link example\\n</TextLink>\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Configuration Settings via CLI (Bash)\nDESCRIPTION: Provides an example of using the '--configOverrides' global option to temporarily override a specific Grafana configuration setting. This example redirects log output to '/dev/null' during a plugin installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --configOverrides cfg:default.paths.log=/dev/null plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Grafana LDAP Authentication Configuration\nDESCRIPTION: Basic LDAP authentication configuration for Grafana's configuration file\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.ldap]\nenabled = true\nconfig_file = conf/ldap.toml\n```\n\n----------------------------------------\n\nTITLE: Defining Tabbed Content for Data Links and Actions using Hugo Shortcodes\nDESCRIPTION: This snippet utilizes Hugo shortcodes (`{{< tabs >}}`, `{{< tab-content >}}`, `{{< /tab-content >}}`, `{{< /tabs >}}`) to create a tabbed interface within the documentation page. It separates the instructions for adding data links and adding actions to Grafana Canvas elements into distinct, user-selectable tabs.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< tabs >}}\n{{< tab-content name=\"Add data links\" >}}\nTo add a data link, follow these steps:\n\n1. Enable inline editing.\n1. Click the element to which you want to add the data link.\n1. In either the inline editor or panel editor, expand the **Selected element** editor.\n1. Scroll down to the **Data links and actions** section and expand it.\n1. Click **+ Add link**.\n1. In the dialog box that opens, enter a **Title**.\n\n   This is a human-readable label for the link displayed in the UI. This is a required field.\n\n1. Enter the **URL** or variable to which you want to link.\n\n   To add a data link variable, click in the **URL** field and enter `$` or press Ctrl+Space or Cmd+Space to see a list of available variables. This is a required field.\n\n1. If you want the link to open in a new tab, toggle the **Open in a new tab** switch.\n1. If you want the data link to open with a single click on the element, toggle the **One click** switch.\n\n   Only one data link or action can have **One click** enabled at a time.\n\n1. Click **Save** to save changes and close the dialog box.\n1. Disable inline editing.\n   {{< /tab-content >}}\n   {{< tab-content name=\"Add actions\" >}}\n   To add an action, by follow these steps:\n\n1. Enable inline editing.\n1. Click the element to which you want to add the data link.\n1. In either the inline editor or panel editor, expand the **Selected element** editor.\n1. Scroll down to the **Data links and actions** section and expand it.\n1. Click **+ Add action**.\n1. In the dialog box that opens, set the action options:\n\n   | Option               | Description                                                                                                                                                                                     |\n   | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n   | Title                | A human-readable label for the action that's displayed in the UI.                                                                                                                               |\n   | Confirmation message | A descriptive prompt to confirm or cancel the action.                                                                                                                                           |\n   | One click            | If you want the action to be triggered by a single click on the element, toggle the switch.</p><p>Only one data link or action can have **One click** enabled at a time.                        |\n   | Method               | Select from **POST**, **PUT**, or **GET**.                                                                                                                                                      |\n   | URL                  | The request URL or variable to which you want to link.</p><p>To add a variable, click in the **URL** field and enter `$` or press Ctrl+Space or Cmd+Space to see a list of available variables. |\n   | Query parameters     | **Key** and **Value** pairs. Click the **+** icon to add as many key/value pairs as you need.                                                                                                   |\n   | Headers              | Comprised of **Key** and **Value** pairs and a **Content-Type**.</p><p>Click the **+** icon to add as many key/value pairs as you need.                                                         |\n   | Content-Type         | Select from the following: **application/json**, **text/plain**, **application/XML**, and **application/x-www-form-urlencoded**.                                                                |\n   | Body                 | The body of the request.                                                                                                                                                                        |\n\n1. Click **Save** to save changes and close the dialog box.\n1. Disable inline editing.\n   {{< /tab-content >}}\n   {{< /tabs >}}\n```\n\n----------------------------------------\n\nTITLE: Invalid Dynamic i18nKey Usage with Trans Component in JSX\nDESCRIPTION: Provides an example of incorrect usage where the `i18nKey` prop for the `<Trans>` component is constructed dynamically using template literals. This approach is invalid because the tooling requires static analysis to extract translation keys.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst ErrorMessage = ({ id, message }) => <Trans i18nKey={`errors.${id}`}>There was an error: {{ message }}</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Release to Update Admin Credentials - Bash\nDESCRIPTION: This Helm upgrade command applies new admin credentials defined in values.yaml to the Grafana deployment. This redeploys the Helm release using the latest configuration. Ensure only intended personnel have access to these new static credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-grafana grafana/grafana -f values.yaml -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose with Specific Database Sources for Grafana\nDESCRIPTION: This Make command generates a docker-compose file with specified database sources (influxdb, prometheus, elastic5) configured and ready to use with fake data for development.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=influxdb,prometheus,elastic5\n```\n\n----------------------------------------\n\nTITLE: Configuring sensuctl in Sensu Go Docker Container\nDESCRIPTION: Command to configure sensuctl with pre-set credentials. This step is necessary before generating an API key. It sets the URL, username, password, and namespace for the Sensu Go instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsensuctl configure -n --url http://127.0.0.1:8080 --username admin --password 'Password123' --namespace default\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging - JSON\nDESCRIPTION: Sets verboseLogging to true in rendering JSON configuration to capture debug-level logs during rendering. Used for obtaining detailed output useful when diagnosing rendering issues. Works in conjunction with high log level settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"verboseLogging\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest in JSON\nDESCRIPTION: This JSON object serves as the manifest for the 'test-app' Grafana plugin, version 1.0.0. It specifies metadata including the manifest version (2.0.0), signature details (type: grafana, organization: grafana, key ID: 7e4d0c6a708866e7), timestamp, and a list of plugin files ('plugin.json', 'nested/plugin.json') with their corresponding SHA512 hashes for integrity verification. This manifest is designed to be cryptographically signed, as indicated by the surrounding PGP message structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/duplicate-plugins/nested/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1621412405893,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"e2c9f711796252bdde63b19691b248aaabea361f521fff6de8ded8d95a333609\",\n    \"nested/plugin.json\": \"d4aee2052f5f9aaa3eecc90e5c5d9568efcd2d97595cd77fdcd1de0ada922638\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Dashboard Link to External GitHub Issue\nDESCRIPTION: An example URL demonstrating how to create a dashboard link that directs users to create a new GitHub issue. The URL includes query parameters to pre-fill the issue title, incorporating the current dashboard name (URL encoded). This can be used in both general dashboard links and specific URL links.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/build-dashboards/manage-dashboard-links/index.md#2025-04-23_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://github.com/grafana/grafana/issues/new?title=Dashboard%3A%20HTTP%20Requests\n```\n\n----------------------------------------\n\nTITLE: Expected Format for PKCS#8 Private Key (Text)\nDESCRIPTION: Illustrates the expected format of a PEM-encoded PKCS#8 private key file. Grafana requires the private key in this format when configured for SAML request signing. The content of the key is represented by '...'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\n...\n...\n-----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Backend\nDESCRIPTION: Compiles the Grafana backend code written in Go using the project's Makefile. This step is necessary to create the executable binary for the Grafana server before it can be run.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake build-go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw UID for Grafana Datasource Variables\nDESCRIPTION: Shows the `:raw` format option, specifically for datasource variables. It returns the unique identifier (UID) of the selected data source instead of its user-friendly name. The example shows a variable holding a datasource UID being interpolated as the same UID string.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndatasourceVariable = 'd7bbe725-9e48-4af8-a0cb-6cb255d873a3'\nString to interpolate: '${datasourceVariable:raw}'\nInterpolation result: 'd7bbe725-9e48-4af8-a0cb-6cb255d873a3'\n```\n\n----------------------------------------\n\nTITLE: New Forms Migration - Switch Component Example\nDESCRIPTION: Example showing how to use the new Switch component directly from @grafana/ui in Grafana 7\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Switch} from '@grafana/ui';\n…\n<Switch ... />\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana with Docker Compose\nDESCRIPTION: Starts the Grafana service (and any other services defined in `docker-compose.yml`) in detached mode (`-d`). Pulls the image if necessary and creates the container.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/start-restart-grafana.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Ending a List using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode closes the list element previously opened by `{{< docs/list >}}`. It signifies the end of the list structure within the rendered documentation page.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< /docs/list >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block at the beginning of the file defines metadata for the documentation page using Hugo front matter. 'headless: true' likely prevents the page from being included in certain site structures or lists. The 'labels' section assigns product categories ('enterprise', 'oss') to the page. 'title' sets the displayed title of the page to 'Upgrade guide introduction'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/upgrade/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nheadless: true\nlabels:\n  products:\n    - enterprise\n    - oss\ntitle: Upgrade guide introduction\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:folders.permissions:writer\nDESCRIPTION: Specifies the `fixed:folders.permissions:writer` role (ID: `fixed_3GAgpQ_hWG8o7-lwNb86_VB37eI`) within Grafana. This role includes all permissions from `fixed:folders.permissions:reader` and adds `folders.permissions:write`, allowing users to read and update all folder permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:folders.permissions:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_3GAgpQ_hWG8o7-lwNb86_VB37eI\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- fixed:folders.permissions:reader\n- folders.permissions:write\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Grafana Release Notes\nDESCRIPTION: YAML configuration block at the beginning of the document that sets build parameters, product labels, and document title for Grafana release notes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-1-0-beta1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.1.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Deleting the Monitoring Namespace via kubectl - Bash\nDESCRIPTION: This command deletes the 'monitoring' namespace from the Kubernetes cluster, removing all resources within it (including Grafana). Use with caution as all objects in the namespace will be destroyed. Requires cluster-admin or namespace-delete permissions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete namespace monitoring\n```\n\n----------------------------------------\n\nTITLE: Mocking Window Object in Jest Tests for Grafana\nDESCRIPTION: Example of mocking the window object in Jest tests using spies. It demonstrates how to mock the window.location property and ensure proper cleanup after the tests to prevent leakage between test cases.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nlet windowSpy: jest.SpyInstance;\n\nbeforeAll(() => {\n  windowSpy = jest.spyOn(window, 'location', 'get');\n});\n\nafterAll(() => {\n  windowSpy.mockRestore();\n});\n\nit('should test with window', function () {\n  windowSpy.mockImplementation(() => ({\n    href: 'www.example.com',\n  }));\n  expect(window.location.href).toBe('www.example.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Suggestions Registry Item Interface\nDESCRIPTION: Defines the interface for registry items that provide completion suggestions for specific suggestion kinds. Links suggestion kinds to async functions that return completion items.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-sql/src/components/query-editor-raw/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SuggestionsRegistyItem extends RegistryItem {\n  id: SuggestionKind;\n  suggestions: (position: PositionContext, m: typeof monacoTypes) => Promise<CustomSuggestion[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Notification Templates in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to delete existing templates used for Grafana alerting notifications. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.templates:delete`\n```\n\n----------------------------------------\n\nTITLE: Defining React Components with TypeScript\nDESCRIPTION: Shows the proper way to define React components using TypeScript with generic types.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// bad\nexport class YourClass extends PureComponent { ... }\n\n// good\nexport class YourClass extends PureComponent<{},{}> { ... }\n```\n\n----------------------------------------\n\nTITLE: General Grafana CLI Command Syntax (Bash)\nDESCRIPTION: Illustrates the general structure for executing Grafana CLI commands. It shows the order of global options, the specific command, command-specific options, and any required arguments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli [global options] command [command options] [arguments...]\n```\n\n----------------------------------------\n\nTITLE: Updating Basic Editor Role Permissions with Bash, cURL, and jq (bash)\nDESCRIPTION: This bash script fetches the existing 'basic_editor' role configuration via a GET request, uses jq to remove metadata, increment the version, and append new permissions allowing roles read, write, and delete. The modified JSON is saved to a temporary file, then uploaded via a PUT request to the Grafana API. Requires 'jq', valid Bearer token, and access to the correct Grafana endpoint. Script inputs are API endpoints and existing role data; expected output is a successfully updated role. Use with care—incorrect jq filtering can corrupt the role structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Fetch the role, modify it to add the desired permissions and increment its version\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' \\\n  -X GET '<grafana_url>/api/access-control/roles/basic_editor' | \\\n  jq 'del(.created)| del(.updated) | del(.permissions[].created) | del(.permissions[].updated) | .version += 1' | \\\n  jq '.permissions += [{\"action\": \"roles:read\", \"scope\": \"roles:*\"}, {\"action\": \"roles:write\", \"scope\": \"permissions:type:delegate\"}, {\"action\": \"roles:delete\", \"scope\": \"permissions:type:delegate\"}]' > /tmp/basic_editor.json\n\n# Update the role\ncurl -H 'Authorization: Bearer glsa_kcVxDhZtu5ISOZIEt' -H 'Content-Type: application/json' \\\n  -X PUT-d @/tmp/basic_editor.json '<grafana_url>/api/access-control/roles/basic_editor'\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Organization Mapping with Spaces using JSON Syntax in Grafana INI\nDESCRIPTION: Shows how to use JSON array syntax for the `org_mapping` option in Grafana's SAML configuration. This is necessary when mapping organization names or external identifiers that contain spaces, mapping \"Org 1\" to Org ID 2 as Editor and \"ExternalOrg\" to the Grafana organization named \"ACME Corp.\" as Admin.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\norg_mapping = [\"Org 1:2:Editor\", \"ExternalOrg:ACME Corp.:Admin\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Static Collapsible Panel in PanelChrome - TypeScript\nDESCRIPTION: Shows a static usage of the PanelChrome component within a JSX frame, demonstrating how to define a collapsible panel with specific title, width, and height. The content is rendered dynamically using provided innerwidth and innerheight props for styling. Prerequisites include React and the PanelChrome component, with all key props supplied directly. No internal state or event handling is present; output is a collapsible panel rendered with fixed configuration. Limitations include static behavior without state feedback or interactivity beyond basic collapse/expand.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelChrome/PanelChrome.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ExampleFrame>\n  <PanelChrome title=\"My awesome panel title\" width={400} height={200} collapsible={true}>\n    {(innerwidth, innerheight) => {\n      return (\n        <div\n          style={{\n            width: innerwidth,\n            height: innerheight,\n            background: 'rgba(230,0,0,0.05)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          Content\n        </div>\n      );\n    }}\n  </PanelChrome>\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Executing an Alert Iteration Template - Go Templating - Go\nDESCRIPTION: This snippet runs the previously defined alert iteration template ('custom_template') by passing the notification context as the dot (.) data object. The dependencies and context are identical to the alert iteration template, requiring a template definition and a notification object populated according to Grafana's specification. The result is a detailed notification message with all alert details rendered as specified in the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{ template \"custom_template\" . }}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing RenderUserContentAsHTML Component and Storybook Utilities\nDESCRIPTION: This snippet imports the necessary components and utilities for the Storybook MDX documentation page. It imports `Meta` and `ArgTypes` from `@storybook/blocks` for defining Storybook metadata and displaying component props, and it imports the `RenderUserContentAsHTML` component itself from its local file path.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/RenderUserContentAsHTML/RenderUserContentAsHTML.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { RenderUserContentAsHTML } from './RenderUserContentAsHTML';\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable Interpolation in Grafana YAML Provisioning\nDESCRIPTION: This YAML snippet exemplifies the use of environment variable interpolation in Grafana provisioning configuration. It shows how a variable like `$EMAIL` within the `addresses` setting for an email contact point receiver will be replaced by the value of the corresponding environment variable during provisioning. Escaping with `$$variable` prevents interpolation if the dollar sign is intended literally.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ncontactPoints:\n  - orgId: 1\n    name: My Contact Email Point\n    receivers:\n      - uid: 1\n        type: email\n        settings:\n          addresses: $EMAIL\n\n```\n\n----------------------------------------\n\nTITLE: Installing @grafana/prometheus with Yarn (Shell)\nDESCRIPTION: This command uses the yarn package manager to download and install the `@grafana/prometheus` library and add it as a dependency to the current project. It requires yarn to be installed on the system.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-prometheus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @grafana/prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Manifest v2.0.0 (JSON)\nDESCRIPTION: This JSON object represents a Grafana plugin manifest (version 2.0.0). It specifies the plugin ID ('test-renderer'), version ('1.0.0'), signing organization ('grafana' / 'Grafana Labs'), timestamp, signing key ID, and includes a SHA256 hash for the 'plugin.json' file to ensure its integrity. This manifest is used by Grafana to load and verify the plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/renderer-added-file/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-renderer\",\n  \"version\": \"1.0.0\",\n  \"time\": 1669116992691,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"2f8fc554d0a080b9719ba43c0a8df366a88500eb129dfd4aedd9e3d147178273\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Organization by ID (Admin API) - HTTP\nDESCRIPTION: This HTTP GET demonstrates how to retrieve organization details by organization ID via the admin API endpoint /api/orgs/:orgId. Requires Basic authentication using username and password, only available to Grafana server administrators.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /api/orgs/1 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Using Grafana Form Component with react-hook-form (TypeScript/TSX)\nDESCRIPTION: Demonstrates basic integration of the deprecated Form component from @grafana/ui using react-hook-form concepts in a TypeScript (TSX) environment. Illustrates default values, type-safe DTO definition, input registration, error handling, and form submission logic. Requires @grafana/ui, react-hook-form, and relevant React components (Field, Input, Button), accepting defaultValues and onSubmit parameters and yielding form UI elements and submission handling.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Forms } from '@grafana/ui';\n\ninterface UserDTO {\n  name: string;\n  email: string;\n  //...\n}\n\nconst defaultUser: Partial<UserDTO> = {\n  name: 'Roger Waters',\n  // ...\n}\n\n<Form\n  defaultValues={defaultUser}\n  onSubmit={async (user: UserDTO) => await createUser(user)}\n>{({register, errors}) => {\n  return (\n    <Field>\n      <Input {...register(\"name\")}/>\n      <Input {...register(\"email\", {required: true})} type=\"email\" />\n      <Button type=\"submit\">Create User</Button>\n    </Field>\n  )\n}}</Form>\n```\n\n----------------------------------------\n\nTITLE: Wire Error Output for Unused Provider\nDESCRIPTION: Shell output showing Wire's error message when detecting an unused provider in the dependency injection configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$GOPATH/src/github.com/google/wire/_tutorial/wire.go:24:1:\ninject InitializeEvent: unused provider \"NewEventNumber\"\nwire: generate failed\n```\n\n----------------------------------------\n\nTITLE: Including Shared Documentation Content using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared content from another file (`plugins/rename-note.md`) located within the `grafana` source directory. It substitutes the placeholder `<GRAFANA_VERSION>` with the actual Grafana version during site generation. This specific shortcode is used to display a note regarding potential plugin renaming based on the Grafana version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/simplified-exploration/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared source=\"grafana\" lookup=\"plugins/rename-note.md\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Locating Grafana Translation File Path in Crowdin\nDESCRIPTION: This snippet represents the file path structure within the Grafana OSS project on Crowdin where translation strings are located. Users navigate this path, replacing `'language denomination'` with the specific language code (e.g., 'fr', 'de'), to access the `grafana.json` file containing the translatable strings for that language. Access requires proofreader permissions on the Grafana OSS Crowdin project.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ngrafana/main > public > locales > 'language denomination' > grafana.json\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for InfluxDB Configuration Guide\nDESCRIPTION: YAML configuration defining metadata for the InfluxDB configuration guide, including aliases, description, keywords, and menu information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/configure-influxdb-data-source/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - ../data-sources/influxdb/\n  - ../data-sources/influxdb/provision-influxdb/\n  - ../features/datasources/influxdb/\n  - provision-influxdb/\ndescription: Guide for using InfluxDB in Grafana\nkeywords:\n  - grafana\n  - influxdb\n  - guide\n  - flux\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\nmenuTitle: Configure the InfluxDB data source\ntitle: Configure the InfluxDB data source\nweight: 300\nrefs:\n  provision-grafana:\n    - pattern: /docs/grafana/\n      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#provision-grafana\n    - pattern: /docs/grafana-cloud/\n      destination: /docs/grafana/<GRAFANA_VERSION>/administration/provisioning/#provision-grafana\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Draggable Bounds Type in TypeScript\nDESCRIPTION: Defines the structure of the draggable bounds object, specifying required and optional fields such as left boundary offset, width, and optional minimum/maximum values for constraining the drag region. This type is meant to be returned by a bounds calculation function and ensures that draggable UI logic receives consistent and precise layout data. Input values like client offsets and width are expected as numbers, and min/max constraints (if provided) operate in normalized ranges.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DraggableBounds = {\n  clientXLeft: number,\n  maxValue?: number,\n  minValue?: number,\n  width: number,\n};\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana server systemd Service - Shell\nDESCRIPTION: Stops the Grafana server if it is running as a systemd service. Requires systemd, Grafana previously configured as a service, sudo access. No parameters required. Output: service stopped.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop grafana-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Threema Gateway Contact Point - YAML\nDESCRIPTION: Creates a Threema Gateway integration for Grafana alerts. Requires API secret, gateway ID, and recipient ID, all of which must be provided. Sends notifications through Threema's infrastructure to defined recipients. Outputs Threema push notifications as per Grafana alert triggers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ntype: threema\\nsettings:\\n  # <string, required>\\n  api_secret: xxx\\n  # <string, required>\\n  gateway_id: A5K94S9\\n  # <string, required>\\n  recipient_id: A9R4KL4S\\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with 'if' in Go Templates\nDESCRIPTION: Demonstrates using the `if` statement in Go templates to conditionally render content. If the variable `$element` is not empty or false, its value is printed; otherwise, a message indicating it's empty is shown.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ if $element }}\nElement value: {{$element}}\n{{ else }}\nElement is empty\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Embedding Grafana Play Dashboard Example\nDESCRIPTION: This Hugo shortcode embeds an interactive Grafana dashboard example from play.grafana.org. The `title` parameter provides hover text or a caption, and the `url` parameter specifies the dashboard to be embedded.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/play title=\"Threshold example\" url=\"https://play.grafana.org/d/000000167/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Dry Run Output Examples - kubectl Output\nDESCRIPTION: Illustrates sample output from a successful dry-run of a 'kubectl apply' command. Reflects objects (persistentvolumeclaim, deployment, service) that are unchanged in server-side dry-run. Use output to verify intended effects before actual changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\npersistentvolumeclaim/grafana-pvc unchanged (server dry run)\ndeployment.apps/grafana unchanged (server dry run)\nservice/grafana unchanged (server dry run)\n\n```\n\n----------------------------------------\n\nTITLE: TimeRange Data Structure Definition - Go\nDESCRIPTION: Defines a time range structure with start and end times specified in 24-hour format. Times are represented as strings, with examples showing format like '18:00' for 6:00 PM.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntype TimeRange struct {\n    EndTime   string `json:\"end_time\"`\n    StartTime string `json:\"start_time\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact Points with YAML Provisioning in Grafana\nDESCRIPTION: Lists receivers to be deleted from a Grafana instance using YAML provisioning files. Grafana must have provisioning enabled, and this file must be placed in the 'provisioning/alerting' directory. Each entry provides the organization ID and the receiver's UID for deletion. The file is processed during startup or on request via the Admin API; updates require editing the YAML and triggering a reload.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 1\\n\\n# List of receivers that should be deleted\\ndeleteContactPoints:\\n  # <int> organization ID, default = 1\\n  - orgId: 1\\n    # <string, required> unique identifier for the receiver\\n    uid: first_uid\n```\n\n----------------------------------------\n\nTITLE: Displaying Grafana Build Version in Go Template\nDESCRIPTION: This Go template snippet inserts the value of the `.BuildVersion` variable from the template data into the email footer. It's used to indicate which version of Grafana sent the email. Requires the `.BuildVersion` variable to be present in the template data.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/welcome_on_signup.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{.BuildVersion}}\n```\n\n----------------------------------------\n\nTITLE: Writing Grafana Annotations (Plaintext)\nDESCRIPTION: Defines the `annotations:write` permission action required to update annotations in Grafana. This capability is linked to scopes including `annotations:*`, `annotations:type:*`, `dashboards:*`, `dashboards:uid:*`, `folders:*`, and `folders:uid:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`annotations:write`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n<ul><li>`annotations:*`</li><li>`annotations:type:*`</li><li>`dashboards:*`</li><li>`dashboards:uid:*`</li><li>`folders:*`</li><li>`folders:uid:*`</li></ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Generation Settings\nDESCRIPTION: Configuration object for the RTK Query API generation script, specifying output file, API definition, schema, and endpoint filters.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n'../public/app/api/clients/dashboard/endpoints.gen.ts': {\n    apiFile: '../public/app/api/clients/dashboard/baseAPI.ts',\n    schemaFile: '../data/openapi/dashboard.grafana.app-v0alpha1.json',\n    filterEndpoints: ['createDashboard', 'updateDashboard'],\n    tag: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Error Response for Invalid Action in Grafana Role Creation\nDESCRIPTION: Shows the HTTP 400 Bad Request response received when attempting to create a Grafana role with an invalid permission action (e.g., `serviceaccounts.permissions:reader`). The JSON body contains details about the validation error, indicating the specific action that was not found.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n{\n\t\"extra\": {\n\t\t\"validationError\": \"the provided action was not found in the list of valid actions: serviceaccounts.permissions:reader\"\n\t},\n\t\"message\": \"Permission contains an invalid action\",\n\t\"messageId\": \"accesscontrol.permission-invalid-action\",\n\t\"statusCode\": 400,\n\t\"traceID\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Grafana OSS - Shell\nDESCRIPTION: Removes the open-source Grafana package from the system using zypper. Requires repository/package present, sudo, zypper. No arguments. Output: grafana package and related files removed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo zypper remove grafana\n```\n\n----------------------------------------\n\nTITLE: Error Response for Dashboard Restoration in Grafana HTTP API\nDESCRIPTION: This HTTP error response is returned when a dashboard version is not found during a restoration attempt. It includes a message explaining the failure reason.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 404 Not Found\nContent-Type: application/json; charset=UTF-8\nContent-Length: 46\n\n{\n  \"message\": \"Dashboard version not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service in a Subpackage (Alphabetical Service Example)\nDESCRIPTION: Demonstrates implementation of a service in a subpackage, including service constructor, method implementations, and storage interface pattern. This follows the principle of keeping implementation details in subpackages while interfaces remain in the root package.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/package-hierarchy.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage alphabeticalimpl\n\n// this name can be whatever, it's not supposed to be used from outside\n// the service except for in Wire.\ntype Svc struct { … }\n\nfunc ProviceSvc(numbers numerical.Numerical, db db.DB) Svc { … }\n\nfunc (s *Svc) GetLetter(ctx context.Context, q root.GetLetterQuery) (root.Letter, error) { … }\nfunc (s *Svc) ListCachedLetters(ctx context.Context, q root.ListCachedLettersQuery) root.Letters { … }\nfunc (s *Svc) DeleteLetter(ctx context.Context, q root.DeleteLetterCommand) error { … }\n\ntype letterStore interface {\n  Get(ctx.Context, id int) (root.Letter, error)\n  Delete(ctx.Context, root.DeleteLetterCommand) error\n}\n\ntype sqlLetterStore struct {\n  db.DB\n}\n\nfunc (s *sqlStore) Get(ctx.Context, id int) (root.Letter, error) { … }\nfunc (s *sqlStore) Delete(ctx.Context, root.DeleteLetterCommand) error { … }\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack 5 Fallbacks for Grafana Plugin Development in JavaScript\nDESCRIPTION: Provides a sample Webpack configuration modification (`webpack.config.js`) for Grafana plugin developers migrating to Webpack 5. Due to Webpack 5 no longer including polyfills for Node.js core modules by default, this snippet demonstrates how to add necessary fallbacks (e.g., for 'os', 'stream', 'timers') using browser-compatible libraries like 'os-browserify' and 'stream-browserify' to prevent build failures. This configuration should be added to the plugin's custom Webpack setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0-beta2.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.js\n\nmodule.exports.getWebpackConfig = (config, options) => ({\n  ...config,\n  resolve: {\n    ...config.resolve,\n    fallback: {\n      os: require.resolve('os-browserify/browser'),\n      stream: require.resolve('stream-browserify'),\n      timers: require.resolve('timers-browserify'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: List User Permissions Response\nDESCRIPTION: Example response showing LDAP-related permissions assigned to a specific user.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n[\n    {\n        \"action\": \"ldap.status:read\",\n        \"scope\": \"\"\n    },\n    {\n        \"action\": \"ldap.user:read\",\n        \"scope\": \"\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Previous Global OAuth Role Sync Skip Option (Plaintext)\nDESCRIPTION: This represents the 'oauth_skip_org_role_sync_update' configuration option mentioned for historical context in Grafana v9.4 release notes. It previously controlled skipping organization role synchronization globally for *all* configured OAuth providers, unlike the newer provider-specific 'skip_org_role_sync' option.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\noauth_skip_org_role_sync_update\n```\n\n----------------------------------------\n\nTITLE: Example Legacy Regex Pattern for Rename Transformation (Regex)\nDESCRIPTION: This shows an example of a simple regex pattern `(.*)` that might have been used in the \"rename by regex\" transformation prior to Grafana 9.0. Due to changes allowing global patterns (`/.../g`), transformations using such patterns might behave differently in v9.0 without modification.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_5\n\nLANGUAGE: regex\nCODE:\n```\n(.*)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration YAML for Grafana Release Notes\nDESCRIPTION: YAML configuration block specifying build settings and product labels for Grafana 7.5.12 release notes documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-12.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.12\n```\n\n----------------------------------------\n\nTITLE: Embedding Figures in Documentation using Shortcodes\nDESCRIPTION: These Hugo shortcode examples demonstrate how to embed images (figures) within the documentation, specifically showing different ways thresholds can be visualized (lines, dashed lines, regions, etc.). Each `figure` shortcode specifies parameters like `max-width`, the image source (`src`), and alternative text (`alt`) for accessibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/configure-thresholds/index.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure max-width=\"500px\" src=\"/media/docs/grafana/panels-visualizations/screenshot-thresholds-lines-v10.4.png\" alt=\"Visualization with threshold as a line\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure max-width=\"500px\" src=\"/media/docs/grafana/panels-visualizations/screenshot-thresholds-dashed-lines-v10.4.png\" alt=\"Visualization with threshold as a dashed line\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure max-width=\"500px\" src=\"/media/docs/grafana/panels-visualizations/screenshot-thresholds-regions-v10.4.png\" alt=\"Visualization with threshold as a region\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure max-width=\"500px\" src=\"/media/docs/grafana/panels-visualizations/screenshot-thresholds-lines-regions-v10.4.png\" alt=\"Visualization with threshold as a region and line\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure max-width=\"500px\" src=\"/media/docs/grafana/panels-visualizations/screenshot-thresholds-dashed-lines-regions-v10.4.png\" alt=\"Visualization with threshold as a region and dashed line\" >}}\n```\n\n----------------------------------------\n\nTITLE: Duplicating a Panel - Markdown\nDESCRIPTION: Lists 'pd' as the shortcut for duplicating the current hovered panel in Grafana. Requires panel keyboard shortcuts to be active and is intended to quickly create a copy of a panel for further editing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`pd`\n```\n\n----------------------------------------\n\nTITLE: Creating Accessible Form Fields in Grafana UI\nDESCRIPTION: Demonstrates how to properly associate labels with form controls using Grafana's Field component. The example shows an Input element being wrapped in a Field component with a label, which automatically associates the label with the input via the id attribute.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Field label=\"Name\">\n  <Input id=\"name\" placeholder=\"Enter a name\" />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Staging the Distribution Directory using Git\nDESCRIPTION: Adds the 'dist' directory, containing the production build output, to the Git staging area. The '-f' flag forces the addition, which might be necessary if the 'dist' directory is listed in the project's '.gitignore' file. This prepares the built plugin artifacts for committing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add -f dist\n```\n\n----------------------------------------\n\nTITLE: Embedding HTML/Components in Trans and JSON Representation\nDESCRIPTION: Demonstrates embedding standard HTML tags (`<button>`, `<a>`) or React components within the `<Trans>` component. The description also shows the corresponding representation in the `grafana.json` file, where embedded elements are replaced with indexed placeholders like `<0>` and `<1>`. Requires `Trans` import.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { Trans } from \"app/core/internationalization\"\n\n<Trans i18nKey=\"page.explainer\">\n  Click <button>here</button> to <a href=\"https://grafana.com\">learn more.</a>\n</Trans>\n\n// ↓ is in the grafana.json file like ↓\n{\n  \"page\": {\n    \"explainer\": \"Click <0>here</0> to <1>learn more</1>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Tutorial Environment using cd\nDESCRIPTION: This command changes the current working directory in the shell to the 'tutorial-environment' directory. This directory should have been created by the preceding 'git clone' command. Subsequent commands related to the tutorial setup are expected to be run from within this directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd tutorial-environment\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Mode in Grafana Configuration (INI)\nDESCRIPTION: Sets the `app_mode` to `development` within the `custom.ini` file, located in the `conf` directory. This overrides the default settings from `defaults.ini` and enables features useful during Grafana development.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\napp_mode = development\n```\n\n----------------------------------------\n\nTITLE: Utilizing KV Methods (SortedPairs, Names, Values, Remove) in Grafana Go Templates\nDESCRIPTION: This snippet shows how to use advanced methods available on the KV object within Go-based Grafana templates, including getting sorted pairs, names, values, and removing keys with string slices. Dependencies include the presence of a KV-like object (e.g., .CommonLabels) with attached methods. Key parameters: none for most, but Remove expects a string slice like (stringSlice \"grafana_folder\"). Outputs include lists, arrays, and mutated KVs for use inside the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom_template\" }}\n  {{ .CommonLabels.SortedPairs }}\n  {{ .CommonLabels.Names }}\n  {{ .CommonLabels.Values }}\n  {{ .CommonLabels.Remove (stringSlice \"grafana_folder\") }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Appending Footer with Dynamic Build Information - GoTemplate\nDESCRIPTION: This snippet appends a footer to the email including the Grafana build version, copyright, and the current year. It leverages Go's template functions for value substitution (e.g., .BuildVersion and now) and string formatting. Inputs are .BuildVersion and the result of 'now | date' with output as a completed footer line.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/verify_email.txt#2025-04-23_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\nSent by Grafana v{{.BuildVersion}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants in TypeScript\nDESCRIPTION: Shows the proper way to declare constants using ALL_CAPS in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconst constantValue = \"This string won't change\";\n// bad\nconst constant_value = \"This string won't change\";\n\n// good\nconst CONSTANT_VALUE = \"This string won't change\";\n```\n\n----------------------------------------\n\nTITLE: Including Common Grafana Upgrade Tasks using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode incorporates shared content detailing common tasks performed during a Grafana upgrade. It references 'upgrade/upgrade-common-tasks.md', ensuring standardized procedures are presented across different upgrade guides. The 'source' and 'version' parameters specify the content origin and version context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v9.1/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"upgrade/upgrade-common-tasks.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Alternative Grafana Port Number (Example)\nDESCRIPTION: Provides `8080` as an example value for the `http_port` setting in `custom.ini`. This port is suggested as an alternative to the default port `3000`, particularly on Windows systems where port `3000` might require extra privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n8080\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana UI via Yarn - Bash\nDESCRIPTION: This snippet demonstrates how to install the @grafana/ui package using Yarn. It requires Yarn to be installed on your system. Running this command will add the @grafana/ui library to your project's dependencies as defined in package.json. No parameters are required. The input is the package name and the output is the installed dependency.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @grafana/ui\n```\n\n----------------------------------------\n\nTITLE: Defining a Signed Plugin Manifest - Grafana - JSON\nDESCRIPTION: This snippet provides the manifest JSON object for a Grafana plugin, specifying metadata such as manifest version, signature details, root URLs, plugin identifier, version, and file checksums. Dependencies include a PGP tool for signature verification and an environment where the plugin will be loaded (Grafana). Critical keys include 'plugin', 'version', and the 'files' map which ties file names to their hash values. The expected input is a parsed JSON block; the output guides plugin installation and verification processes. Use this as part of a signed plugin package, ensuring the metadata matches actual file contents.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"giuseppeguerra\",\n  \"signedByOrgName\": \"giuseppeguerra\",\n  \"rootUrls\": [\n    \"http://127.0.0.1:3000/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1725959570435,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"module.js\": \"5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03\",\n    \"plugin.json\": \"129fab4e0584d18c778ebdfa5fe1a68edf2e5c5aeb8290b2c68182c857cb59f8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Files for Grafana\nDESCRIPTION: This command regenerates the Protobuf files for the Grafana project using the make system.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/apis/secret/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake protobuf\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Metadata for TagsInput using Meta Component\nDESCRIPTION: This JSX snippet utilizes the `Meta` component from Storybook to configure the documentation page. It sets the title displayed in the Storybook sidebar to \"MDX|TagsInput\" and links the documentation to the `TagsInput` component, enabling features like controls and auto-generated docs.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/TagsInput/TagsInput.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|TagsInput\" component={TagsInput} />\n```\n\n----------------------------------------\n\nTITLE: Wire Error: Missing Provider for Indirect Dependency (Bar)\nDESCRIPTION: This Wire error indicates that a provider for the type 'example.com/foo.Bar' is missing. 'Bar' is required as a dependency by 'example.com/foo.Baz', which is created by the 'provideBaz' provider function (in 'example.com/foo/foo.go'). The error was encountered during the analysis of the 'injectMultipleMissingTypes' injector in 'example.com/foo/wire.go'. Ensure a provider for 'Bar' is included in the relevant Wire set.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Bar\nneeded by example.com/foo.Baz in provider \"provideBaz\" (example.com/foo/foo.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Enabling Teamsync in Grafana for Keycloak (INI)\nDESCRIPTION: Grafana configuration setting required to enable teamsync with Keycloak. The `groups_attribute_path` specifies the JMESPath expression to extract group information (expected to be named 'groups') from the ID token provided by Keycloak. This requires a corresponding 'groups' mapper to be configured in the Keycloak client.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\ngroups_attribute_path = groups\n```\n\n----------------------------------------\n\nTITLE: Updating a Service Account - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates updating an existing service account using the PATCH endpoint. The request specifies the changes in a JSON body; only the fields to be updated must be provided (e.g., name, role). Authentication is enforced. The response returns the updated service account object with all relevant details, enabling confirmation of the update operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/serviceaccounts/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\\n\\n{\\n  \"name\": \"test\",\\n\\t\"role\": \"Editor\"\\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"id\": 2,\\n\\t\"name\": \"test\",\\n\\t\"login\": \"sa-grafana\",\\n\\t\"orgId\": 1,\\n\\t\"isDisabled\": false,\\n\\t\"createdAt\": \"2022-03-21T14:35:44Z\",\\n\\t\"updatedAt\": \"2022-03-21T14:35:44Z\",\\n\\t\"avatarUrl\": \"/avatar/8ea890a677d6a223c591a1beea6ea9d2\",\\n\\t\"role\": \"Editor\",\\n\\t\"teams\": []\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Selectors in JSX Components\nDESCRIPTION: JSX example showing how to use parameterized selectors when rendering a list of data sources.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  {dataSources.map(({ id, name }) => (\n    <li className=\"card-item-wrapper\" key={id}>\n      <a className=\"card-item\" href={`datasources/edit/${id}`}>\n        <div className=\"card-item-name\" data-testid={selectors.pages.DataSources.dataSources(name)}>\n          {name}\n        </div>\n      </a>\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Dumping Grafana Pod Logs via kubectl for Single-Container Deployment - Bash\nDESCRIPTION: This bash command retrieves logs from the Grafana deployment pod in the monitoring namespace using kubectl. It's useful for troubleshooting single-container deployments. Requires kubectl installed, appropriate permissions, and a running deployment. Outputs standard logs from the Pod.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# dump Pod logs for a Deployment (single-container case)\nkubectl logs --namespace=monitoring deploy/my-grafana\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Dependencies in TypeScript\nDESCRIPTION: Imports necessary modules from Storybook and the local Box component to prepare for component story setup in TypeScript. No external dependencies beyond Storybook and local project modules are required. This snippet sets up the foundation for building Storybook documentation and interactive demos for the Box component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Box/Box.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Box } from './Box';\n```\n\n----------------------------------------\n\nTITLE: Defining Message, Greeter, and Event structs in Go\nDESCRIPTION: Defines the basic structure for a Message type, Greeter struct, and Event struct, which form the components of the greeter program.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Message string\n\ntype Greeter struct {\n    // ... TBD\n}\n\ntype Event struct {\n    // ... TBD\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ConfigMaps in Namespace - kubectl Bash\nDESCRIPTION: Retrieves the list of all ConfigMap objects present in the specified Kubernetes namespace. Useful for validating ConfigMap creation and troubleshooting configuration mounting issues.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get configmap --namespace=my-grafana\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Stacking and Fill in Grafana for InfluxDB\nDESCRIPTION: To correctly stack time series data from InfluxDB in Grafana, points must align. Missing points can cause visual gaps. Use `fill(0)` in the InfluxDB query and set a `group by time` interval (e.g., `10s`) matching the metric write frequency. This inserts zero values for missing data, ensuring proper stacking.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_1\n\nLANGUAGE: influxql\nCODE:\n```\nfill(0)\n```\n\nLANGUAGE: influxql\nCODE:\n```\ngroup by time ... 10s\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenLDAP Containers with Make\nDESCRIPTION: Command to build and deploy the OpenLDAP containers using make command with the auth/openldap-multiple source\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap-multiple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=auth/openldap-multiple\n```\n\n----------------------------------------\n\nTITLE: Truncating Text with Tooltip in JSX\nDESCRIPTION: Demonstrates how to truncate text using a parent container and add a tooltip for displaying the full content on hover.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip content=\"This is a example of a span element truncated by its parent container\">\n  <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n    <Text color=\"primary\" variant=\"body\">\n      {'This is a example of a span element truncated by its parent container.'}\n    </Text>\n  </div>\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Migration Snapshot with Grafana API - Bash\nDESCRIPTION: This curl command fetches details for a specific snapshot within a migration session via Grafana API. It sends a GET request to /api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}, allowing for paged output using resultLimit and resultPage parameters. Dependencies: curl, valid sessionUid and snapshotUid values, and Grafana admin access. Returns detailed information about the target snapshot.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}?resultLimit=100&resultPage=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Local Domain Resolution\nDESCRIPTION: Example hosts file configuration for mapping local domains to localhost\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /etc/hosts\n127.0.0.1       grafana.loc\n127.0.0.1       prometheus.loc\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Call to Grafana\nDESCRIPTION: Example curl command demonstrating how to make an authenticated API call to Grafana using a JWT token.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET \\\n  --url http://127.0.0.1:3000/api/folders \\\n  --header 'Accept: application/json' \\\n  --header 'X-JWT-Assertion: eyJ......'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom XYZ Tile Server as Default Baselayer in Grafana (INI)\nDESCRIPTION: Example for setting a custom XYZ tile server as the default base map in Grafana. This requires specifying a URL template with {z}/{x}/{y} placeholders and attribution information.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\ndefault_baselayer_config = `{\n  \"type\": \"xyz\",\n  \"config\": {\n    \"attribution\": \"Open street map\",\n    \"url\": \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Showing Grafana Admin Commands (Bash)\nDESCRIPTION: Displays help information specifically for the 'admin' subcommand group in the Grafana CLI, listing all available administrative commands. Available in Grafana 4.1+.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli admin\n```\n\n----------------------------------------\n\nTITLE: Getting Data Source Permissions in HTTP\nDESCRIPTION: Sends a GET request to retrieve all existing permissions for a data source with the given UID. Requires specific permissions and returns a JSON array of permission objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/access-control/datasources/my_datasource HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Defining k8s Attributes for OpenTelemetry in Grafana Context\nDESCRIPTION: Defines OpenTelemetry semantic convention attributes related to Kubernetes within the Grafana context. It includes `k8s.dataplaneservice.name` (string, e.g., 'v0alpha1.prometheus.grafana.app'), specifying the name of the DataPlaneService. This attribute is recommended and stable.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/semconv/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- semconv trace.k8s -->\n| Attribute  | Type | Description  | Examples  | [Requirement Level](https://opentelemetry.io/docs/specs/semconv/general/attribute-requirement-level/) | Stability |\n|---|---|---|---|---|---|\n| `k8s.dataplaneservice.name` | string | The name of the DataPlaneService. | `v0alpha1.prometheus.grafana.app` | `Recommended` | ![Stable](https://img.shields.io/badge/-stable-lightgreen) |\n<!-- endsemconv -->\n```\n\n----------------------------------------\n\nTITLE: Opening a Documentation List Block (Hugo)\nDESCRIPTION: This Hugo shortcode `docs/list` initiates a formatted list block within the Grafana documentation. It's used to structure sequential steps or items.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/list >}}\n```\n\n----------------------------------------\n\nTITLE: Importing GPG Key and Repository for Grafana Installation - Bash\nDESCRIPTION: This snippet demonstrates how to import the Grafana RPM GPG public key required for package verification on SUSE/openSUSE Linux. The wget command downloads the key, while rpm --import adds the key to the system. Required commands: wget, rpm. Inputs: no parameters needed; commands are as written. Outputs: gpg.key file is created and key is imported for rpm trust. Ensure you have network connectivity and sudo privileges.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -q -O gpg.key https://rpm.grafana.com/gpg.key\nsudo rpm --import gpg.key\n```\n\n----------------------------------------\n\nTITLE: Importing Local Tooltip Component (TypeScript)\nDESCRIPTION: Imports the `Tooltip` component from a relative path './Tooltip'. This is the component whose documentation is being generated in this file.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tooltip } from './Tooltip';\n```\n\n----------------------------------------\n\nTITLE: Improved Query Method Return Pattern in Go\nDESCRIPTION: The refactored version of the previous query pattern, showing how to properly return results from a service method instead of mutating an input struct. This is the recommended approach.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GetQuery struct {\n  Something int\n}\n\nfunc (s *Service) Get(ctx context.Context, cmd GetQuery) (ResultType, error) {\n  // ...do something\n  return result, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorial Repository using Git\nDESCRIPTION: This shell command clones the 'tutorial-environment' repository from GitHub, which contains the necessary files and configurations for the Grafana Alerting tutorial.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/grafana/tutorial-environment.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Forwarding for Docker on Windows with WSL 2\nDESCRIPTION: PowerShell commands to set up port forwarding between WSL 2 VM and Windows host for Grafana access.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwsl --list # Find the default\nwsl -s Ubuntu # Change the default\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$hostAddr = '0.0.0.0';\n$wslHostAddr = wsl hostname -I;\niex \"netsh interface portproxy delete v4tov4 listenport=3000 listenaddress=$hostAddr\"\niex \"netsh interface portproxy add v4tov4 listenport=3000 listenaddress=$hostAddr connectport=3000 connectaddress=$wslHostAddr\"\n```\n\n----------------------------------------\n\nTITLE: Using DateTimePicker in React with TypeScript\nDESCRIPTION: Demonstrates basic usage of the DateTimePicker component in a React (TypeScript) environment by managing a DateTime state with useState, and updating it via the onChange handler. Requires the @grafana/data and @grafana/ui packages; expects a DateTime object as the value. The rendered DateTimePicker receives its label, current date, and an updater callback. Inputs: label string, DateTime value, onChange function. Outputs: a rendered DateTimePicker component reflecting the passed value. No disabled values or validation constraints are applied.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/DateTimePickers/DateTimePicker/DateTimePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\\nimport { DateTime, dateTime } from '@grafana/data';\\nimport { DateTimePicker } from '@grafana/ui';\\n\\nconst [date, setDate] = useState<DateTime>(dateTime('2021-05-05 12:00:00'));\\nreturn <DateTimePicker label=\\\"Date\\\" date={date} onChange={setDate} />;\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Hugo Figure Shortcode (Zendesk Query Editor)\nDESCRIPTION: This Hugo shortcode embeds an image, specifically showing the query editor for the new Zendesk data source in Grafana. It serves as a visual aid accompanying the announcement of the Zendesk data source integration. The `src` parameter specifies the image location.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/zendesk/zendesk_query_editor.png\" alt=\"Zendesk Query Editor\" >}}\n```\n\n----------------------------------------\n\nTITLE: Binding Interfaces in Go with Wire\nDESCRIPTION: Demonstrates how to bind a concrete implementation to an interface using wire.Bind in a provider set.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Fooer interface {\n    Foo() string\n}\n\ntype MyFooer string\n\nfunc (b *MyFooer) Foo() string {\n    return string(*b)\n}\n\nfunc provideMyFooer() *MyFooer {\n    b := new(MyFooer)\n    *b = \"Hello, World!\"\n    return b\n}\n\ntype Bar string\n\nfunc provideBar(f Fooer) string {\n    // f will be a *MyFooer.\n    return f.Foo()\n}\n\nvar Set = wire.NewSet(\n    provideMyFooer,\n    wire.Bind(new(Fooer), new(*MyFooer)),\n    provideBar)\n```\n\n----------------------------------------\n\nTITLE: Defining Email Content with Grafana/Go Template Placeholders\nDESCRIPTION: This template defines the structure and content of the email verification message sent by Grafana. It uses placeholders like `[[HiddenSubject .Subject ...]]` (likely for setting the email subject), `[[.ConfirmationCode]]` (for the verification code), `{{ .Expire }}` (for the code's expiration time), and constructs a verification URL using `[[.AppUrl]]` and other parameters. These placeholders are dynamically replaced with actual values when Grafana generates and sends the email.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_existing_user.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n[[HiddenSubject .Subject \"Verify your email\"]]\n\nHi,\n\nCopy and paste the confirmation code in the login form to verify your email address. \n\nCopy and paste the email verification code:\n[[.ConfirmationCode]]\nin the in the login form to verify your email address. This confirmation code will expire in {{ .Expire }} minutes. \nAlternatively, you can use the button below to verify your email address. \n\n[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]\n```\n\n----------------------------------------\n\nTITLE: Including Standard Options Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation for standard visualization options from `visualizations/standard-options.md`. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/standard-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone MDX Documentation\nDESCRIPTION: Demonstrates how to create an MDX file without a direct relationship to a component story.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Docs Overview/Color Palettes\"/>\n\n# Guidelines for using colors\n\n...\n```\n\n----------------------------------------\n\nTITLE: Response for Service Account Token Reversion in Grafana (HTTP)\nDESCRIPTION: The HTTP response after successfully reverting a service account to an API key provides a confirmation message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n\t\"message\": \"Reverted service account to API key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessible Form Example for Testing\nDESCRIPTION: Example of a form field setup that will be used in accessibility testing. Shows a username input field with a label and default value.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/accessibility.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Field label=\"Username\">\n  <Input id=\"username\" placeholder=\"Enter a name\" value={'Test'} />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Using ThemeContext.Consumer for Theme Access\nDESCRIPTION: Demonstrates how to use ThemeContext.Consumer to provide the current theme to a component directly.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeContext } from '@grafana/data';\n\n<ThemeContext.Consumer>{(theme) => <Foo theme={theme} />}</ThemeContext.Consumer>;\n```\n\n----------------------------------------\n\nTITLE: Example Response for Deleting an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) after deleting a Grafana organization. The response body is a JSON object confirming the deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"Organization deleted\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Base Layer for Geomap Plugin\nDESCRIPTION: JSON configuration example for setting the default base map layer in the Geomap Plugin using OpenStreetMap tiles.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\ndefault_baselayer_config = `{\n  \"type\": \"xyz\",\n  \"config\": {\n    \"attribution\": \"Open street map\",\n    \"url\": \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Using Struct Fields as Providers in Go with Wire\nDESCRIPTION: Illustrates how to use wire.FieldsOf to promote struct fields into provided types without writing separate provider functions.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Foo struct {\n    S string\n    N int\n    F float64\n}\n\nfunc provideFoo() Foo {\n    return Foo{ S: \"Hello, World!\", N: 1, F: 3.14 }\n}\n\nfunc injectedMessage() string {\n    wire.Build(\n        provideFoo,\n        wire.FieldsOf(new(Foo), \"S\"))\n    return \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Successful Response for Short URL Creation\nDESCRIPTION: This snippet shows an example of a successful HTTP 200 response after creating a short URL. The response body is JSON and includes the unique identifier (`uid`) of the short URL and the full `url` that redirects to the original path, including the necessary `orgId`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/short_url.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"uid\": AT76wBvGk,\n  \"url\": http://localhost:3000/goto/AT76wBvGk?orgId=1\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PGP Signed Message Block\nDESCRIPTION: Marks the beginning of a PGP signed message section, indicating the content that follows is signed for integrity and authenticity verification using the specified hash algorithm (SHA512). This header is part of the standard PGP message format.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n```\n\n----------------------------------------\n\nTITLE: Updating Grafana Notification Route Matchers for Subfolders with Slashes\nDESCRIPTION: Provides an example of how to update Grafana notification route matchers when upgrading to v11.0 if a folder name previously contained a forward slash ('/'). The matcher key `grafanafolder` needs to be changed to `grafana_folder`, and the value part corresponding to the folder name might also need adjustment (replacing '/' with '_') to ensure correct notification routing after the subfolder feature is enabled. This adjustment is necessary for specific cases involving alert rules in folders with slashes in their names where notification policies match the folder name.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-0.md#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\n// Original matcher (before v11.0 upgrade)\ngrafanafolder=folder_with/in_title\n\n// Updated matcher (for v11.0+ with subfolders enabled)\ngrafana_folder=folder_with/_in_title\n```\n\n----------------------------------------\n\nTITLE: Using reducerTester for Redux Reducer Testing in TypeScript\nDESCRIPTION: Demonstrates basic usage of the Fluent API reducerTester to test Redux reducers. The example shows how to initialize the test with a reducer and initial state, dispatch an action, and verify the resulting state.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreducerTester()\n  .givenReducer(someReducer, initialState)\n  .whenActionIsDispatched(someAction('reducer tests'))\n  .thenStateShouldEqual({ ...initialState, data: 'reducer tests' });\n```\n\n----------------------------------------\n\nTITLE: Changing Directory using cd (Bash)\nDESCRIPTION: Changes the current working directory to the newly cloned `grafana-prometheus-alerting-demo` repository folder using the `cd` command. This is necessary before running subsequent setup commands.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt5/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd grafana-prometheus-alerting-demo\n```\n\n----------------------------------------\n\nTITLE: Response for Getting All Dashboard Versions in Grafana HTTP API\nDESCRIPTION: This HTTP response returns an array of dashboard versions with metadata including version numbers, creation timestamps, and change messages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 428\n\n[\n  {\n    \"id\": 2,\n    \"dashboardId\": 1,\n    \"uid\": \"QA7wKklGz\",\n    \"parentVersion\": 1,\n    \"restoredFrom\": 0,\n    \"version\": 2,\n    \"created\": \"2017-06-08T17:24:33-04:00\",\n    \"createdBy\": \"admin\",\n    \"message\": \"Updated panel title\"\n  },\n  {\n    \"id\": 1,\n    \"dashboardId\": 1,\n    \"uid\": \"QA7wKklGz\",\n    \"parentVersion\": 0,\n    \"restoredFrom\": 0,\n    \"version\": 1,\n    \"created\": \"2017-06-08T17:23:33-04:00\",\n    \"createdBy\": \"admin\",\n    \"message\": \"Initial save\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Verification Link Lifetime using Go Template\nDESCRIPTION: This Go template snippet inserts the duration, in hours, for which the email verification link remains valid (`.VerificationEmailLifetimeHours`). This value is expected to be provided by the Grafana backend when rendering the template.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_2\n\nLANGUAGE: Go Template\nCODE:\n```\n[[.VerificationEmailLifetimeHours]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Wire Dependencies for Grafana Services\nDESCRIPTION: Shows how to set up Wire dependency injection for Grafana services, including defining wire sets and initialization functions for both production and test environments.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/services.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build wireinject\n\npackage server\n\nimport (\n\t\"github.com/google/wire\"\n\t\"github.com/grafana/grafana/pkg/example\"\n    \"github.com/grafana/grafana/pkg/infra/db\"\n)\n\nvar wireBasicSet = wire.NewSet(\n\texample.ProvideService,\n\n)\n\nvar wireSet = wire.NewSet(\n\twireBasicSet,\n\tsqlstore.ProvideService,\n)\n\nvar wireTestSet = wire.NewSet(\n\twireBasicSet,\n)\n\nfunc Initialize(cla setting.CommandLineArgs, opts Options, apiOpts api.ServerOptions) (*Server, error) {\n\twire.Build(wireExtsSet)\n\treturn &Server{}, nil\n}\n\nfunc InitializeForTest(cla setting.CommandLineArgs, opts Options, apiOpts api.ServerOptions, sqlStore db.DB) (*Server, error) {\n\twire.Build(wireExtsTestSet)\n\treturn &Server{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Corepack for Yarn\nDESCRIPTION: Commands to enable and install Yarn package manager via Corepack\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\ncorepack install\n```\n\n----------------------------------------\n\nTITLE: Embedding Video using Custom Hugo Shortcode (SAML Certificate Generation)\nDESCRIPTION: This snippet utilizes the custom `video-embed` Hugo shortcode to display a screen recording. The video demonstrates the process of generating a new SAML certificate and private key directly within the Grafana UI form, a feature introduced for easier SAML setup. The `src` parameter points to the video file path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_6\n\nLANGUAGE: hugo\nCODE:\n```\n{{< video-embed src=\"/media/docs/grafana/screen-recording-11-2-generate-saml-certificate.mp4\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a DataSources Page with Parameterized Selectors\nDESCRIPTION: TypeScript example showing how to create a Page object with a function that returns a formatted selector string.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DataSources = {\n  url: '/datasources',\n  dataSources: (dataSourceName: string) => `data-testid Data source list item ${dataSourceName}`,\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Indentation Effects in Go Templates\nDESCRIPTION: Shows a Go template with nested `range` loops and indentation for readability. This example highlights that indentation and line breaks within the template source are preserved in the final rendered output by default.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n{{ range .Alerts }}\n  {{ range .Labels.SortedPairs }}\n    {{ .Name }} = {{ .Value }}\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sensu Go Docker Container\nDESCRIPTION: Command to access the Sensu Go backend container's shell. This is required to run sensuctl commands for configuration and API key generation.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/sensugo/notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it sensu-backend /bin/ash\n```\n\n----------------------------------------\n\nTITLE: Basic Fixed Phrase Translation using Trans Component in JSX\nDESCRIPTION: A minimal example demonstrating the `<Trans>` component from `app/core/internationalization` for translating a static string. The `i18nKey` attribute specifies the unique identifier for this phrase in the translation catalog.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from 'app/core/internationalization';\n\n<Trans i18nKey=\"page.greeting\">Hello user!</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Representing Direct User Managed Permissions in OpenFGA\nDESCRIPTION: This snippet shows a simplified OpenFGA tuple format used for representing managed permissions assigned directly to a user. It directly links the user ('user:<user_uid>') with the permission ('read') and the object ('folder:<folder_uid>').\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nuser:<user_uid> read folder:<folder_uid>\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment Include Template\nDESCRIPTION: Shared markdown content inclusion template for best practices documentation related to trace structures. Uses a docs/shared import pattern to include common content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/tempo/query-editor/traceql-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # 'Shared content for best practices for traces'\n[//]: # 'This content is located in /tempo/docs/sources/shared/trace-structure.md'\n\n{{< docs/shared source=\"tempo\" lookup=\"traceql-query-structure.md\" version=\"<TEMPO_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker Components in TypeScript/React\nDESCRIPTION: Import statements for ColorPicker components and Storybook documentation utilities\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ColorPicker/ColorPicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { ColorPicker, SeriesColorPicker } from './ColorPicker';\nimport { ColorPickerInput } from './ColorPickerInput';\n```\n\n----------------------------------------\n\nTITLE: Data Source Deletion Response in HTTP\nDESCRIPTION: Example response for a successful data source deletion, returning a success message and the ID of the deleted data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/data_source.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"message\":\"Data source deleted\",\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Series Labels for Loki Stream Selector with datasource.languageProvider - TypeScript\nDESCRIPTION: Presents a method to fetch all label names and their possible values for a specific Loki stream selector using fetchSeriesLabels. Returns a Promise resolving to a record of label name/value arrays, with options to specify time range. This snippet is essential for discovering available metadata in a given log stream and supports robust error handling in plugin development.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/loki/docs/app_plugin_developer_documentation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Fetch series labels for a selector\n *\n * This method fetches labels for a given stream selector, such as `{job=\"grafana\"}`.\n * It returns a promise that resolves to a record mapping label names to their corresponding values.\n *\n * @param streamSelector - The stream selector for which you want to retrieve labels.\n * @param options - (Optional) An object containing additional options - currently only time range.\n * @param options.timeRange - (Optional) The time range for which you want to retrieve label keys. If not provided, the default time range is used.\n * @returns A promise containing a record of label names and their values.\n * @throws An error if the fetch operation fails.\n */\nasync function fetchSeriesLabels(\n  streamSelector: string,\n  options?: { timeRange?: TimeRange }\n): Promise<Record<string, string[]>>;\n\n/**\n * Example usage:\n */\nconst streamSelector = '{job=\"grafana\"}';\ntry {\n  const labels = await fetchSeriesLabels(streamSelector);\n  console.log(labels);\n} catch (error) {\n  console.error(`Error fetching labels: ${error.message}`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Authentik Container with Make\nDESCRIPTION: Command to build and deploy the Authentik container using Make with authentication sources.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=auth/authentik\n```\n\n----------------------------------------\n\nTITLE: Declaring AGPL-3.0 License via SPDX Comment\nDESCRIPTION: This comment utilizes the Software Package Data Exchange (SPDX) standard format to specify the license governing the file's content. It explicitly declares the license as the GNU Affero General Public License version 3.0 only (AGPL-3.0-only). This convention aids automated tools and developers in understanding the licensing terms.\nSOURCE: https://github.com/grafana/grafana/blob/main/hack/boilerplate.go.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// SPDX-License-Identifier: AGPL-3.0-only\n```\n\n----------------------------------------\n\nTITLE: System Metrics in InfluxDB Line Protocol\nDESCRIPTION: Two data points in InfluxDB line protocol format showing system metrics like CPU load, number of CPUs, and users. Each point includes tags (host, mylabel) and fields (load metrics, cpu count, user count) with nanosecond precision timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/same_metrics_different_labels_different_time.txt#2025-04-23_snippet_0\n\nLANGUAGE: influxdb\nCODE:\n```\nsystem,host=MacBook-Pro-Alexander.local,mylabel=boom1 load15=2.00341796875,n_cpus=12i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403089000000000\nsystem,host=MacBook-Pro-Alexander.local,mylabel=boom2 load15=2.00341796875,n_cpus=11i,n_users=6i,load1=3.15966796875,load5=2.3837890625 1616403090000000000\n```\n\n----------------------------------------\n\nTITLE: Signing and Structuring a Plugin Manifest File in Grafana (JSON)\nDESCRIPTION: This snippet demonstrates a JSON-based manifest for a Grafana plugin, encapsulated within a PGP-signed message. It includes metadata such as manifest version, plugin name, keyId, version, signing organizational info, and integrity hashes for plugin files. Intended for secure plugin distribution, the JSON must be paired with its PGP signature to enable signature verification by consumers. No external dependencies are required beyond PGP verification tools and consumer compatibility with JSON manifest format.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/valid-v2-pvt-signature-root-url-uri/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"willbrowne\",\n  \"signedByOrgName\": \"Will Browne\",\n  \"rootUrls\": [\n    \"http://localhost:3000/grafana\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1661171981629,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"203ef4a613c5693c437a665cd67f95e2756a0f71b336b2ffb265db7c180d0b19\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Grafana Plugins to React 18\nDESCRIPTION: React 17 has been removed as a peer dependency from Grafana packages. Plugins utilizing newer versions of these packages must ensure they are compatible with and upgraded to React 18.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Removing Grafana zypper Repository - Shell\nDESCRIPTION: Removes the Grafana repository from zypper repositories, cleaning package management configuration. Requires sudo, zypper. Parameter: repository named 'grafana' must exist. Output: repository removed from system.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/suse-opensuse/index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo zypper removerepo grafana\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Span Attributes in Go\nDESCRIPTION: Compares two Go syntax styles for setting OpenTelemetry span attributes using the `attribute` package. The preferred method `attribute.<Type>(\\\"key\\\", value)` is recommended over `attribute.Key(\\\"key\\\").<Type>(value)` for improved readability and conciseness when adding attributes like datasource name or organization ID to spans.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nattribute.String(\"datasource_name\", proxy.ds.Name)\n// vs\nattribute.Key(\"datasource_name\").String(proxy.ds.Name)\n\nattribute.Int64(\"org_id\", proxy.ctx.SignedInUser.OrgID)\n// vs\nattribute.Key(\"org_id\").Int64(proxy.ctx.SignedInUser.OrgID)\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Spinner for Documentation\nDESCRIPTION: This code snippet imports necessary components from Storybook and the Spinner component along with its stories for documentation purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Spinner/Spinner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas, ArgTypes } from '@storybook/blocks';\nimport { Spinner } from './Spinner';\nimport * as SpinnerStories from './Spinner.story';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Go Dependencies\nDESCRIPTION: Command for upgrading a specific Go module dependency. This updates the module to its latest version and requires running go mod tidy afterward to ensure dependency files are consistent.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/UPGRADING_DEPENDENCIES.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u <MODULE>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Frontend Build Commands\nDESCRIPTION: Commands for installing dependencies and starting the frontend build process\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --immutable\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Reverse Proxy for JWK Set URL\nDESCRIPTION: Command to run a reverse proxy using localtunnel for the JWK set URL in the JWT authentication setup.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx localtunnel --port 8087\n```\n\n----------------------------------------\n\nTITLE: Rendering ValuePicker React Component in Storybook (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to use the ValuePicker component within a React (TypeScript) application, providing it with a label, options array, change handler, and style props. The component requires dependencies on React, Storybook, and the ValuePicker implementation itself. Key parameters include an array of options (each with value and label), an onChange callback, and styling options like variant and size. On interaction, the ValuePicker displays a button that reveals a dropdown menu for selection, returning the selected value via the handler.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ValuePicker/ValuePicker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ValuePicker\n  label=\"Choose an option\"\n  options={[\n    {\n      value: 'option1',\n      label: 'Option 1',\n    },\n    {\n      value: 'option2',\n      label: 'Option 2',\n    },\n    {\n      value: 'option3',\n      label: 'Option 3',\n    },\n  ]}\n  onChange={(value) => doThings}\n  variant=\"primary\"\n  size=\"md\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Controller as to render Prop Pattern in react-hook-form v7+ (JavaScript/JSX)\nDESCRIPTION: Shows migration of Controller component usage from the as prop to the render prop, conforming to react-hook-form v7's API updates. Offers two variants: one using only field, and one with both field and fieldState. This facilitates integration with React components expecting to be controlled via field state.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n- <Controller as={<input />} />\n+ <Controller render={({ field }) => <input {...field} />}\n// or\n+ <Controller render={({ field, fieldState }) => <input {...field} />} />\n```\n\n----------------------------------------\n\nTITLE: Collectd Environment Variables Configuration\nDESCRIPTION: Lists the required and optional environment variables for configuring the collectd monitoring system. Includes settings for Graphite connection, host identification, metric collection intervals and reporting preferences.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/collectd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `HOST_NAME`\n  - Will be sent to Graphite\n  - Required\n- `GRAPHITE_HOST`\n  - Graphite IP or hostname\n  - Required\n- `GRAPHITE_PORT`\n  - Graphite port\n  - Optional, defaults to 2003\n- `GRAPHITE_PREFIX`\n  - Graphite prefix\n  - Optional, defaults to collectd.\n- `REPORT_BY_CPU`\n  - Report per-CPU metrics if true, global sum of CPU metrics if false\n  - Optional, defaults to false.\n- `COLLECT_INTERVAL`\n  - Collection interval and thus resolution of metrics\n  - Optional, defaults to 10\n```\n\n----------------------------------------\n\nTITLE: Defining Default Alert Message Structure in Go Template\nDESCRIPTION: Defines the main structure for a default Grafana alert notification message. It displays counts of firing and resolved alerts, group labels, calls '__default_alerts_summarize' to list details for each state, and includes a link to the Grafana alerts page. Expects context variables like '.Alerts.Firing', '.Alerts.Resolved', '.GroupLabels', and '.AlertPageUrl'.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/ng_alert_notification.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n[[- define \"__default_message\" -]]\nYou have [[ len .Alerts.Firing ]] firing alert(s), and [[ len .Alerts.Resolved ]] resolved alert(s) for [[ .GroupLabels ]]\n\n[[ if .Alerts.Firing -]]\n([[ len .Alerts.Firing ]]) FIRING\n-----------\n[[ template \"__default_alerts_summarize\" .Alerts.Firing ]]\n[[- end ]]\n\n[[- if .Alerts.Resolved ]]\n([[ len .Alerts.Resolved ]]) RESOLVED\n-------------\n[[ template \"__default_alerts_summarize\" .Alerts.Resolved ]]\n[[- end ]]\nGo to the Alerts page: [[ .AlertPageUrl ]]\n[[- end -]]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Panel Data or Settings - Markdown\nDESCRIPTION: Specifies the use of 'i' as the shortcut to open inspection options for a hovered Grafana panel. This allows users to examine raw data, query, or panel configuration. Only dependency is session with keyboard shortcuts enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n`i`\n```\n\n----------------------------------------\n\nTITLE: Including Graph Styles Options Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation content for graph styles options from `visualizations/graph-styles-options.md`. The `leveloffset=\"+1\"` parameter likely adjusts heading levels within the included content. Dependencies include the Hugo static site generator and the referenced markdown file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/graph-styles-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for New Module\nDESCRIPTION: Docker configuration to include the new module in the build process.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Dockerfile\nCOPY pkg/your/new/module ./pkg/your/new/module\n```\n\n----------------------------------------\n\nTITLE: Appending PGP Signed Message and Signature - Grafana Plugin Manifest - Plaintext\nDESCRIPTION: This snippet illustrates a plaintext wrapper around the JSON manifest using PGP-signed message formatting, concluding with a base64-encoded PGP signature. The section beginning with '-----BEGIN PGP SIGNED MESSAGE-----' and ending with '-----END PGP SIGNATURE-----' enables digital signature verification of the manifest block. The expected prerequisite is the use of OpenPGP-compatible software for validating the integrity and authorship of the JSON manifest. The input block is a signed message, and the output is usually a verified status or the recovered data; non-alteration of format is essential for successful verification.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"private\",\n  \"signedByOrg\": \"giuseppeguerra\",\n  \"signedByOrgName\": \"giuseppeguerra\",\n  \"rootUrls\": [\n    \"http://127.0.0.1:3000/\"\n  ],\n  \"plugin\": \"test-datasource\",\n  \"version\": \"1.0.0\",\n  \"time\": 1725959570435,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"module.js\": \"5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03\",\n    \"plugin.json\": \"129fab4e0584d18c778ebdfa5fe1a68edf2e5c5aeb8290b2c68182c857cb59f8\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.11\nComment: https://openpgpjs.org\n\nwrkEARMKAAYFAmbgDZIAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm5wbfAgkAXmKJcM8uAKb3TepYW/oyGhRLR8L6eM9mCoYwKkatITKJ6bRe\nWnz37AMcPx0DahgfCzCXRLo4CspPJylr2JV8DagCCQCfCjHgLFhKGpBP71Y1\nmgcQ1/CJefb6B2H45G25MwUFTlSTGLDqW4QMi2kQvXnnUMjXquv2+iVd6qyz\n0Rqvpou/QQ==\n=QNmr\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Basic DraggableManager Mouse Event Handler Implementation\nDESCRIPTION: Demonstrates how to implement basic mouse event handling with DraggableManager for a draggable divider component.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"DividerDemo--realm\">\n  <div className=\"DividerDemo--divider\" onMouseDown={this._dragManager.handleMouseDown} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Grafana Local Domain to Hosts File\nDESCRIPTION: Instructions for adding the 'env.grafana.local' domain to the hosts file on Mac/Linux and Windows systems.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n127.0.0.1   env.grafana.local\n::1         env.grafana.local\n```\n\n----------------------------------------\n\nTITLE: Embedding Logs Panel Correlation Figure using Hugo Shortcode\nDESCRIPTION: Utilizes a Hugo 'figure' shortcode to embed an image visualizing correlation links within the Grafana Logs Panel. The 'src' parameter defines the image path relative to the static directory, 'max-width' controls the display size, and 'caption' provides descriptive text below the image. This snippet requires a Hugo static site generator environment for processing and rendering the figure.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-correlations-in-visualizations/index.md#2025-04-23_snippet_0\n\nLANGUAGE: shortcode\nCODE:\n```\n{{< figure src=\"/static/img/docs/correlations/correlations-in-logs-panel-10-0.png\" max-width=\"600px\" caption=\"Correlation links in Logs panel\" >}}\n```\n\n----------------------------------------\n\nTITLE: Querying Time Series Data with Fill Parameter in PostgreSQL\nDESCRIPTION: Shows a SQL query that groups time series data by 5-minute intervals, sums values, includes hostname, and uses the fill parameter to convert null values to zero. This query demonstrates how to handle null values in time series data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(\"createdAt\",'5m',0),\n  sum(value) as value,\n  hostname\nFROM test_data\nWHERE\n  $__timeFilter(\"createdAt\")\nGROUP BY time, hostname\nORDER BY time\n```\n\n----------------------------------------\n\nTITLE: Region Demo Mouse Event Implementation\nDESCRIPTION: Shows how to implement mouse event handling for a region-based drag interaction, including move and leave events.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/explore/TraceView/components/utils/DraggableManager/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  className=\"RegionDemo--realm\"\n  onMouseDown={this._dragManager.handleMouseDown}\n  onMouseMove={this._dragManager.handleMouseMove}\n  onMouseLeave={this._dragManager.handleMouseMove}\n>\n  {/* Draw visuals for the currently dragged range, otherwise empty */}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Raspberry Pi WiFi Connection (Bash/Config)\nDESCRIPTION: Creates a `wpa_supplicant.conf` file in the boot directory to automatically connect the Raspberry Pi to a specified WiFi network upon startup. Requires replacing placeholders with the actual country code, WiFi SSID, and password. This step is optional if using a wired network connection.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/install-grafana-on-raspberry-pi/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nctrl_interface=/var/run/wpa_supplicant\nupdate_config=1\ncountry=<Insert 2 letter ISO 3166-1 country code here>\n\nnetwork={\n ssid=\"<Name of your WiFi>\"\n psk=\"<Password for your WiFi>\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Table Correlation Figure using Hugo Shortcode\nDESCRIPTION: Employs a Hugo 'figure' shortcode to display an image showing correlation links within a Grafana Table visualization. Parameters include 'src' for the image location within the static assets, 'max-width' for constraining the image size, and 'caption' for context. This shortcode is processed by the Hugo static site generator during site build.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/correlations/use-correlations-in-visualizations/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shortcode\nCODE:\n```\n{{< figure src=\"/static/img/docs/correlations/correlations-in-table-10-0.png\" max-width=\"600px\" caption=\"Correlations links in table\" >}}\n```\n\n----------------------------------------\n\nTITLE: Legacy Forms Migration - Switch Component Example\nDESCRIPTION: Example showing how to migrate from old Switch component to LegacyForms namespace in Grafana 7\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { LegacyForms } from '@grafana/ui';\n…\n<LegacyForms.Switch ... />\n```\n\n----------------------------------------\n\nTITLE: Required Terraform Grafana Provider Version for Data Source Permissions\nDESCRIPTION: Indicates the minimum version requirement (v2.6.0) for the Terraform Grafana provider to ensure compatibility with the new data source permission management endpoints introduced in Grafana v10.3. Users managing data source permissions via Terraform must upgrade the provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v10-3.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nversion 2.6.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Namespace Creation using Bash\nDESCRIPTION: Retrieves and displays information about the specified Kubernetes namespace ('my-grafana') using `kubectl`. This command confirms that the namespace was successfully created in the previous step. Requires `kubectl` to be installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get namespace my-grafana\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject in Grafana Template (Go Template)\nDESCRIPTION: This snippet defines the subject line for the Grafana signup confirmation email using template syntax. It likely uses a custom `HiddenSubject` function or directive, referencing the `.Subject` variable and providing a default subject \"Welcome to Grafana, please complete your signup!\".\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n[[HiddenSubject .Subject \"Welcome to Grafana, please complete your signup!\"]]\n```\n\n----------------------------------------\n\nTITLE: Custom Virtual Users Load Test\nDESCRIPTION: Executes load test with a specified number of virtual users\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -v 10\n```\n\n----------------------------------------\n\nTITLE: Installing hubot-alias Plugin using npm (Bash)\nDESCRIPTION: This command installs the `hubot-alias` plugin using npm (`i` is short for `install`) and adds it to the project's dependencies with `--save`. This plugin allows users to create shorter, custom aliases for longer Hubot commands, simplifying interactions, particularly for frequently used Grafana graph requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/integrate-hubot/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save hubot-alias\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Sets in Go with Wire\nDESCRIPTION: Demonstrates how to group providers into sets using wire.NewSet and combine multiple sets.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage foobarbaz\n\nimport (\n    // ...\n    \"github.com/google/wire\"\n)\n\n// ...\n\nvar SuperSet = wire.NewSet(ProvideFoo, ProvideBar, ProvideBaz)\n\n// ...\n\nimport (\n    // ...\n    \"example.com/some/other/pkg\"\n)\n\n// ...\n\nvar MegaSet = wire.NewSet(SuperSet, pkg.OtherSet)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin from a Specific URL (Bash)\nDESCRIPTION: Illustrates using the '--pluginUrl' global option to install a plugin directly from a specified .zip file URL, bypassing the default Grafana plugin repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --pluginUrl https://company.com/grafana/plugins/<plugin-id>-<plugin-version>.zip plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Grafana 9.1.0-beta1 Release Notes\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Grafana 9.1.0-beta1 release notes document. It specifies empty aliases, hide_menu set to true, and labels for different product tiers including cloud, enterprise, and open source software (oss).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-1-0-beta1.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases: []\nhide_menu: true\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 9.1.0-beta1\n---\n```\n\n----------------------------------------\n\nTITLE: Showing Intermediate Result of 'Labels to Fields' Merging (Series 1)\nDESCRIPTION: This Markdown table illustrates the intermediate state after the first part of the 'Labels to fields' transformation acts on a single series (Series 1) with the label Server=ServerA, before the final merge step.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Server  | Value |\n| ------------------- | ------- | ----- |\n| 2020-07-07 11:34:20 | ServerA | 10    |\n```\n\n----------------------------------------\n\nTITLE: Configuring ESRI World Imagery as Default Baselayer in Grafana (INI)\nDESCRIPTION: Configuration example for setting ESRI World Imagery as the default base map in Grafana. This uses the predefined 'world-imagery' server option from the ESRI tile server.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ngeomap_default_baselayer = `{\n  \"type\": \"esri-xyz\",\n  \"config\": {\n    \"server\": \"world-imagery\"\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Restarting Prometheus Service on Windows (PowerShell)\nDESCRIPTION: This snippet demonstrates restarting the Prometheus service using PowerShell on Windows. 'net stop' stops the service, and 'net start' initiates it again. Assumes Prometheus is installed and registered as a Windows Service. Both commands require administrative privileges. The output describes the stopping and starting process of the service.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\nnet stop prometheus\nnet start prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining ProvisionedAlertRules Structure in Go\nDESCRIPTION: Defines the ProvisionedAlertRules type as a slice of ProvisionedAlertRule objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_42\n\nLANGUAGE: go\nCODE:\n```\n[][ProvisionedAlertRule](#provisioned-alert-rule)\n```\n\n----------------------------------------\n\nTITLE: Viewing OAuth2-proxy Logs for Prometheus Authentication\nDESCRIPTION: Sample log output showing successful requests from Grafana to Prometheus through the OAuth2-proxy, including both status check and query requests with associated authentication details.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/prometheus_oauth2_proxy_azure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2023-04-19 11:29:40 172.31.0.1:55602 - d96b832a-170a-41eb-a974-6558c5ce4454 - - [2023/04/19 09:29:40] some-random-tunnel-address.trycloudflare.com GET / \"/api/v1/status/buildinfo\" HTTP/1.1 \"Grafana/10.0.0-pre\" 200 187 0.016\n2023-04-19 11:29:41 172.31.0.1:55602 - db27c56a-ccd6-4cdb-a040-318113781abf - 65ac87f4-931f-4e46-9761-f8bf1ad36b48 [2023/04/19 09:29:41] some-random-tunnel-address.trycloudflare.com POST / \"/api/v1/query\" HTTP/1.1 \"Grafana/10.0.0-pre\" 200 103 0.003\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox with AutoSaveField in React\nDESCRIPTION: Example of using AutoSaveField with a Checkbox component for automatic boolean value saving.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/AutoSaveField/AutoSaveField.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<AutoSaveField\n  onFinishChange={customRequest}\n  //Complete field args if needed\n>\n  {(onChange) => (\n    <Checkbox\n      value={checkBoxTest}\n      onChange={(e) => {\n        onChange(e.currentTarget.value);\n        //Complete code if needed\n      }}\n    />\n  )}\n</AutoSaveField>\n```\n\n----------------------------------------\n\nTITLE: Showing Result of 'Labels to Fields' with Value Field Name\nDESCRIPTION: This Markdown table demonstrates the output of the 'Labels to fields' transformation when the 'Server' label is selected as the 'Value field name'. Each unique value of the 'Server' label becomes a separate column.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Datacenter | Server A | Server B |\n| ------------------- | ---------- | -------- | -------- |\n| 2020-07-07 11:34:20 | EU         | 1        | 2        |\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Signed Plugin Manifest with PGP Signature - PGP ASCII Armored\nDESCRIPTION: This code block encapsulates a JSON manifest inside a PGP signed message, using the PGP ASCII Armor format for safe textual transmission and verification. It ensures that the included manifest has not been tampered with, by providing a cryptographic hash and a public signature which must be verified against the original signing key. Dependencies include OpenPGP-compatible libraries or utilities for signature verification. The expected input is the JSON manifest and the corresponding PGP private key for signing; output is the signed block to be bundled with the plugin distribution. The block begins and ends with clearly marked delimiters for programmatic parsing.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-no-module-js/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1726230812215,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c\",\n    \"something.js\": \"266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.11\nComment: https://openpgpjs.org\n\nwrkEARMKAAYFAmbkMRwAIQkQfk0ManCIZucWIQTzOyW2kQdOhGNlcPN+TQxq\ncIhm53UWAgkBE2oxqyzBji86eCOzLmCT7IgQaoSMMF48tu+XdgwFS5/NU5su\ndeKad3taDnSU9a7GkCaisRVQOWy/UtFS1FNQTtkCCQBc1cZ6JsPWh2Pd60h0\n9U5aviYde6g1DCKO1riaUzHzrruBiHmHWjzr2aYwACb89vs2XcZqvue1Byb+\ny2inBDhHvQ==\n=qMej\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Importing and Injecting Support Bundles Registry in Go Service Constructor\nDESCRIPTION: This Go snippet demonstrates how to import the support bundles registry into a service's ProvideService constructor by adding a supportbundles.Service parameter. Dependencies for this pattern typically include Grafana's supportbundles package and the service being constructed. The function allows the service to register support bundle collectors, and 'make gen-go' must be run to wire the dependency. Key parameters are the injected registry and other service dependencies. The output is an instantiated service with access to the registry.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype UsageStats struct {\n\t...\n}\n\nfunc ProvideService(\n\t...\n\tbundleRegistry supportbundles.Service, // Bundle registry\n) (*UsageStats, error)\n```\n\n----------------------------------------\n\nTITLE: Defining TLS/SSL Usage in Markdown\nDESCRIPTION: Documentation explaining the preferred terminology for TLS/SSL in Grafana's codebase and documentation. It clarifies that while both terms are used, TLS is preferred as the current standard while SSL is considered deprecated.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/engineering/terminology.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Grafana technical terminology\n\n<!-- Keep terms in alphabetical order: -->\n\nThis glossary defines technical terms used in Grafana.\n\n## TLS/SSL\n\nThe acronyms [TLS](https://en.wikipedia.org/wiki/Transport_Layer_Security) (Transport Layer Security) and\n[SSL](https://en.wikipedia.org/wiki/SSL) (Secure Socket Layer) are both used to describe the HTTPS security layer.\nIn practice, they are synonymous. However, TLS is considered the current name for the technology, and SSL is considered\n[deprecated](https://tools.ietf.org/html/rfc7568).\n\nAs such, while we use both terms in our codebase and documentation, we generally prefer TLS.\nHowever, we use both acronyms in combination when referring to this type of technology, that is, _TLS/SSL_. We do this because we don't want to confuse readers who may not be aware of them being synonymous, and SSL is still prevalent in common discourse.\n```\n\n----------------------------------------\n\nTITLE: Representing Direct Folder Permissions in OpenFGA\nDESCRIPTION: This example illustrates an OpenFGA tuple that grants a user ('user:1') direct 'read' access to a specific folder identified by its name. Folders use a distinct 'folder' type in the schema.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{ “user”: “user:1”, relation: “read”, object:”folder:<name>” }\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Value in Annotation (Index Function)\nDESCRIPTION: This Go template snippet shows an alternative method to include a query result's value (Ref ID 'A') in a Grafana alert annotation using the `index` function with the `$values` variable. This achieves the same outcome as dot notation but can be useful in different scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/alerting-rules/templates/examples.md#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\nCPU usage has exceeded 80% ({{ index $values \"A\" }}) for the last 5 minutes.\n```\n\n----------------------------------------\n\nTITLE: Restarting Grafana Docker Container\nDESCRIPTION: This shell command restarts the Docker container named `grafana`. Restarting the container is necessary after adding or removing plugins in the mounted volume, as Grafana scans and loads plugins only during its startup sequence. This ensures that any changes to the plugin directory are recognized by the running Grafana instance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/set-up-environment.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart grafana\n```\n\n----------------------------------------\n\nTITLE: Accessing FreeIPA Docker Container Shell\nDESCRIPTION: Command to access the bash shell of the running FreeIPA Docker container for user management.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it freeipa /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Removing Role Assignments from Grafana Teams via YAML Provisioning\nDESCRIPTION: This YAML configuration example illustrates how to remove specific role assignments from a Grafana team using provisioning. It defines the 'custom:users:writer' role, assigns it and 'fixed:users:writer' to the 'user admins' team, and uses `state: 'absent'` within the `teams > roles` section to remove both roles from the 'user writers' team within organization ID 1 upon reloading the configuration. Role assignments for 'user admins' remain unaffected.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/assign-rbac-roles/index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\napiVersion: 2\n\n# Roles to insert/update in the database\nroles:\n  - name: 'custom:users:writer'\n    description: 'List/update other users in the organization'\n    version: 1\n    global: true\n    permissions:\n      - action: 'org.users:read'\n        scope: 'users:*'\n      - action: 'org.users:write'\n        scope: 'users:*'\n\n# Assignments to teams\nteams:\n  - name: 'user writers'\n    orgId: 1\n    roles:\n      - name: 'fixed:users:writer'\n        global: true\n        state: 'absent' # Remove assignment\n      - name: 'custom:users:writer'\n        global: true\n        state: 'absent' # Remove assignment\n  - name: 'user admins'\n    orgId: 1\n    roles:\n      - name: 'fixed:users:writer'\n        global: true\n      - name: 'custom:users:writer'\n        global: true\n```\n\n----------------------------------------\n\nTITLE: License Delete Response Example - Grafana Licensing API - HTTP\nDESCRIPTION: Shows the HTTP response after issuing a delete license request. The 202 Accepted status indicates that the license was successfully removed or did not exist. The JSON body is an empty object, matching expected output for this operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/licensing.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\\nContent-Type: application/json\\nContent-Length: 2\\n\\n{}\n```\n\n----------------------------------------\n\nTITLE: Rendering Flame Graph Color Schema Screenshot using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode displays an image figure. It defines the image path (`src`), constrains its maximum display width (`max-width`), and includes descriptive alternative text (`alt`) related to applying different color schemes in the flame graph visualization.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/flame-graph/index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/grafana/panels-visualizations/screenshot-flamegraph-color-v11.6.png\" max-width=\"700px\" alt=\"Different color scheme\" >}}\n```\n\n----------------------------------------\n\nTITLE: Representing Team Member Managed Permissions in OpenFGA\nDESCRIPTION: This example demonstrates how managed permissions are assigned to members of a team in OpenFGA. It uses the '#member' relation on the team object ('team:<team_uid>#member') to grant the 'read' permission on the specified folder ('folder:<folder_uid>') to all team members.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/schema/README.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nteam:<team_uid>#member read folder:<folder_uid>\n```\n\n----------------------------------------\n\nTITLE: Verifying APIService Availability after Microservice Start (Shell)\nDESCRIPTION: After waiting for the aggregator to perform its discovery check (approximately 10 seconds after the example service starts), this command sequence again sets the `KUBECONFIG` variable and uses `kubectl get apiservice` to check the status of the registered `APIService`. The expected output now shows `AVAILABLE` as `True`, indicating that the aggregator successfully connected to the example microservice via its configured TLS and confirmed its readiness.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig\nkubectl get apiservice\n# SAMPLE OUTPUT\n# NAME                           SERVICE                     AVAILABLE      AGE\n# v0alpha1.example.grafana.app   grafana/example-apiserver   True           30m\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Custom Errors in Go for Grafana\nDESCRIPTION: This snippet demonstrates how to declare a custom error base and use it in a function. It shows error wrapping and handling of specific error types.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/errors.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"errors\"\n  \"github.com/grafana/grafana/pkg/util/errutil\"\n  \"example.org/thing\"\n)\n\nvar ErrBaseNotFound = errutil.NewBase(errutil.StatusNotFound, \"main.notFound\", errutil.WithPublicMessage(\"Thing not found\"))\n\nfunc Look(id int) (*Thing, error) {\n  t, err := thing.GetByID(id)\n  if errors.Is(err, thing.ErrNotFound) {\n    return nil, ErrBaseNotFound.Errorf(\"did not find thing with ID %d: %w\", id, err)\n  }\n\n  return t, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Component and Storybook Blocks in MDX\nDESCRIPTION: This snippet imports the necessary components for the MDX documentation page. It imports the `Grid` component itself from its local file and the `Meta` and `ArgTypes` components from Storybook blocks. `Meta` is used to define Storybook metadata for the component, and `ArgTypes` automatically generates documentation for the component's props.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Grid/Grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Grid } from './Grid';\n```\n\n----------------------------------------\n\nTITLE: Importing Forms Module in React (JavaScript/JSX)\nDESCRIPTION: This snippet shows how to import the Forms module from the @grafana/ui package within a React context. This import is necessary to access UI components including Field, Input, and related form controls as part of the Grafana design system. Dependencies include @grafana/ui; required for rendering standardized form elements.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Field.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Forms } from '@grafana/ui';\n```\n\n----------------------------------------\n\nTITLE: Including Shared Upgrade Documentation - Hugo Shortcode - Plaintext\nDESCRIPTION: This snippet demonstrates how to include shared documentation files into the current Grafana documentation page using a Hugo shortcode. The 'lookup' parameter specifies the shared markdown file to include, while the 'source' and 'version' parameters provide context for sourcing the correct content. This approach modularizes documentation and ensures reuse of standard upgrade instructions across multiple pages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\\\"upgrade/intro.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Drone Configuration in Bash\nDESCRIPTION: Sets the DRONE_SERVER and DRONE_TOKEN environment variables required for Drone pipeline modifications. These variables are used to verify that only Grafana employees can make changes to the pipelines.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/drone-pipeline.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DRONE_SERVER=<value_from_drone_account>\nexport DRONE_TOKEN=<value_from_drone_account>\n```\n\n----------------------------------------\n\nTITLE: Starting Etcd Development Environment using Make Bash\nDESCRIPTION: This Bash command uses the Makefile to set up and launch an etcd instance configured for development purposes (`devenv`). Running this command is a prerequisite for configuring Grafana to use etcd as the storage backend for its Kubernetes API server.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=etcd\n```\n\n----------------------------------------\n\nTITLE: Protobuf Compiler Plugin Installation - Shell\nDESCRIPTION: This shell command installs the Go plugin for protoc required for compiling protobuf definitions for use with GRPC in Go. It assumes that the Go toolchain is available and GOPATH/bin is in the PATH.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Struct and Greeter Provider in Go\nDESCRIPTION: Shows how to use an options struct for a provider function with multiple dependencies, and how to create a Wire provider set for it.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/best-practices.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Options struct {\n    // Messages is the set of recommended greetings.\n    Messages []Message\n    // Writer is the location to send greetings. nil goes to stdout.\n    Writer io.Writer\n}\n\nfunc NewGreeter(ctx context.Context, opts *Options) (*Greeter, error) {\n    // ...\n}\n\nvar GreeterSet = wire.NewSet(wire.Struct(new(Options), \"*\"), NewGreeter)\n```\n\n----------------------------------------\n\nTITLE: Setting Email Subject Dynamically using Go Template\nDESCRIPTION: This snippet uses Grafana's specific `HiddenSubject` directive along with Go template variables to set the email's subject line. It includes the Grafana instance name (`.Name`) within the subject. The `.Subject` variable likely holds a default or base subject provided by the backend.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/verify_email.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n[[HiddenSubject .Subject \"Verify your email - [[.Name]]\"]]\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies for Grafana Test Plugins\nDESCRIPTION: Installs the required frontend dependencies for the Grafana project and its test plugins using Yarn. The `--immutable` flag ensures that the yarn.lock file is not updated and matches the dependencies specified, crucial for reproducible builds in CI/CD environments or shared development setups.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install --immutable\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Storage-Server - INI\nDESCRIPTION: This INI snippet configures the Grafana API server to connect to a GRPC storage-server by specifying its address. This is required for running Unified Storage as an external GRPC service and must be added to the grafana-apiserver section in the configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[grafana-apiserver]\\n; your gRPC server address\\naddress = localhost:10000\n```\n\n----------------------------------------\n\nTITLE: Updating `filterQuery` Method Execution Order for `DataSourceWithBackend`\nDESCRIPTION: For Grafana data sources extending `DataSourceWithBackend`, the `filterQuery` method is now invoked *before* the main `query` method. Any query migration logic previously assumed to run before `filterQuery` must now be incorporated directly within the `filterQuery` method itself.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Apply Terraform Configuration\nDESCRIPTION: Shell commands showing the process of applying Terraform configuration and the expected output, including plan confirmation and completion messages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply\n```\n\nLANGUAGE: shell\nCODE:\n```\nPlan: 4 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\nTerraform will perform the actions described above.\nOnly 'yes' will be accepted to approve.\n\nEnter a value:\n```\n\nLANGUAGE: shell\nCODE:\n```\nApply complete! Resources: 4 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: Defining Enums in TypeScript\nDESCRIPTION: Shows the correct way to define enums using PascalCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nenum buttonVariant {\n //...\n}\n\n// good\nenum ButtonVariant {\n //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies with Yarn (Shell)\nDESCRIPTION: This shell command uses yarn to install the project's frontend dependencies based on the lock file. The '--immutable' flag ensures that the installation uses the exact versions specified in the lock file, preventing unexpected changes and ensuring reproducible builds.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn install --immutable\n```\n\n----------------------------------------\n\nTITLE: Node CPU Metrics Line Protocol Format\nDESCRIPTION: Time series data points showing CPU metrics in Prometheus line protocol format. Each line represents a measurement of CPU time in different modes (user, guest, nice) across multiple CPU cores with timestamps in nanoseconds.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_2.txt#2025-04-23_snippet_0\n\nLANGUAGE: prometheus\nCODE:\n```\nnode_cpu,cpu=7,mode=user seconds_total=6410.4799999999996 1625783151607273170\nnode_cpu,cpu=0,mode=user guest_seconds_total=0 1625783151607273175\nnode_cpu,cpu=0,mode=nice guest_seconds_total=0 1625783151607273175\nnode_cpu,cpu=1,mode=user guest_seconds_total=0 1625783151607273175\nnode_cpu,cpu=7,mode=user seconds_total=2410.4799999999996 1625783151607273178\n```\n\n----------------------------------------\n\nTITLE: Removing a Panel - Markdown\nDESCRIPTION: Shows 'pr' as the shortcut to remove a hovered panel in Grafana. Appropriate panel permissions are required for this operation, and it relies on the panel currently being active (hovered) and keyboard shortcuts being enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/panel-overview/index.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n`pr`\n```\n\n----------------------------------------\n\nTITLE: Interpreting Google Wire Dependency Injection Error Message\nDESCRIPTION: This error message is displayed when Google Wire can't find a provider for a string pointer type. The message indicates that an injector is trying to use a *string type, but no provider for that type has been defined.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/FieldsOfStructDoNotProvidePtrToField/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectedMessagePtr: no provider found for *string, output of injector\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Object in React Components\nDESCRIPTION: Shows how to use the useTheme2 hook to access the theme object directly within a React component, allowing usage of theme variables.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FC } from 'react';\nimport { useTheme2 } from '@grafana/ui';\n\nconst Foo: FC<FooProps> = () => {\n  const theme = useTheme2();\n\n  // Your component has access to the theme variables now\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Example APIService with Grafana Aggregator using kubectl (Shell)\nDESCRIPTION: This sequence of shell commands first sets the `KUBECONFIG` environment variable to point to the kubeconfig file generated by the Grafana API server (`$PWD/data/grafana-apiserver/grafana.kubeconfig`). It then uses `kubectl apply` to create the necessary `APIService` and `ExternalName` resources defined in the YAML files within the example directory (`./pkg/services/apiserver/aggregator/examples/manual-test/`), effectively telling the aggregator about the example service. Finally, `kubectl get apiservice` checks the status, initially showing `False` for availability as the service isn't running yet.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport KUBECONFIG=$PWD/data/grafana-apiserver/grafana.kubeconfig\nkubectl apply -f ./pkg/services/apiserver/aggregator/examples/manual-test/\n# SAMPLE OUTPUT\n# apiservice.apiregistration.k8s.io/v0alpha1.example.grafana.app created\n# externalname.service.grafana.app/example-apiserver created\n\nkubectl get apiservice\n# SAMPLE OUTPUT\n# NAME                           SERVICE                     AVAILABLE                      AGE\n# v0alpha1.example.grafana.app   grafana/example-apiserver   False (FailedDiscoveryCheck)   29m\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for FreeIPA LDAP Authentication\nDESCRIPTION: INI configuration snippet to enable LDAP authentication in Grafana's configuration file. This points Grafana to the ldap_freeipa.toml file for LDAP settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/freeipa/notes.md#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[auth.ldap]\nenabled = true\nconfig_file = conf/ldap_freeipa.toml\n; allow_sign_up = true\n```\n\n----------------------------------------\n\nTITLE: Getting All Dashboard Versions by UID in Grafana HTTP API\nDESCRIPTION: This HTTP request retrieves all existing dashboard versions for a dashboard with the specified UID. It supports limit and start parameters to control pagination of results.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/uid/QA7wKklGz/versions?limit=2?start=0 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Executing a Query on Prometheus Data Source\nDESCRIPTION: This curl command sends a POST request to execute a query on a Prometheus data source. It uses basic authentication and reads the query data from a JSON file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://admin:admin@localhost:3000/apis/prometheus.grafana.app/v0alpha1/namespaces/default/connections/example/query' -X POST -d '@pkg/aggregator/examples/datasource-query.json'\n```\n\n----------------------------------------\n\nTITLE: Requesting Organization by Name (Admin API) - HTTP\nDESCRIPTION: This HTTP GET fetches organization details by name from the /api/orgs/name/:orgName endpoint as an admin. Basic authentication is required; organization name is percent-encoded in the URL.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET /api/orgs/name/Main%20Org%2E HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Product Labels in YAML\nDESCRIPTION: YAML configuration for build settings and product labeling specifying build list status and applicable product categories (cloud, enterprise, open source).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-0-0-beta3.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.0.0-beta3\n```\n\n----------------------------------------\n\nTITLE: Including Shared Grafana Field Override Documentation (Hugo Shortcode)\nDESCRIPTION: This Hugo shortcode dynamically includes content from the specified shared documentation file (`visualizations/overrides-options.md`). It ensures that the documentation for field overrides is sourced from a central location, using the 'grafana' source and specific to the version indicated by `<GRAFANA_VERSION>`. This mechanism promotes content reuse and consistency across documentation versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/geomap/index.md#2025-04-23_snippet_7\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\\\"visualizations/overrides-options.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA_VERSION>\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: SQLStore Service Structure Definition in Go\nDESCRIPTION: Shows how to define a service structure with SQLStore dependency injection for database operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MyService struct {\n    SQLStore *sqlstore.SQLStore `inject:\"\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Using SELECT Clause with Derivative Function in InfluxQL\nDESCRIPTION: Example of an InfluxQL SELECT clause that uses the derivative function with mean aggregation, divided by 10 and aliased as 'REQ/s'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/influxdb/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT derivative(mean(\"value\"), 10s) / 10 AS \"REQ/s\"\nFROM....\n```\n\n----------------------------------------\n\nTITLE: Enabling Starred Dashboards Navigation via Feature Flag (Configuration)\nDESCRIPTION: This feature flag, `savedItems`, enables the opt-in feature allowing users to access their starred dashboards directly from the main navigation bar in Grafana 9.0. Set this flag to true in the Grafana configuration to activate the feature.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-0.md#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nsavedItems\n```\n\n----------------------------------------\n\nTITLE: Running Full API Regeneration with Make\nDESCRIPTION: This command executes the primary build process using Make. It regenerates both the OpenAPI documentation and the Go server stubs based on the defined Go types and comments in the source code.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/ngalert/api/tooling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Constructing Verification URL in Grafana Template (Go Template)\nDESCRIPTION: This snippet constructs the complete URL for email verification. It combines the base application URL (`.AppUrl`), a user-specific code (`.Code`), and the confirmation code (`.ConfirmationCode`) as query parameters for the login page. These variables must be available during template rendering.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/passwordless_verify_new_user.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n[[.AppUrl]]login/?code=[[.Code]]&confirmationCode=[[.ConfirmationCode]]\n```\n\n----------------------------------------\n\nTITLE: Testing Grafana deb/rpm Repository Updates using Docker and Bash\nDESCRIPTION: This sequence of Bash commands details the steps to test Grafana's deb and rpm repository update process within a Docker container. It involves starting the specified `grafana/grafana-ci-deploy` container, copying the Grafana build directory and a GPG private key into it, loading the signing key using a script, downloading example Grafana deb and rpm packages, and finally executing dedicated test scripts (`test-*-repo.sh`) to update and publish the local repositories. This process requires Docker, the Grafana CI deploy image, the Grafana project source code, a GPG private key, and its corresponding password.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/build/update_repo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -ti --rm -u 0:0 grafana/grafana-ci-deploy:1.2.3 bash # 1.2.3 is the newest image at the time of writing\n# in the container:\nmkdir -p /dist\n\n#outside of container:\ncd <grafana project dir>/..\ndocker cp grafana <container_name>:/ \ndocker cp <gpg.key used for signing> <container_name>:/private.key\n\n#in container:\n./scripts/build/update_repo/load-signing-key.sh\ncd dist && wget https://dl.grafana.com/oss/release/grafana_5.4.3_amd64.deb && wget https://dl.grafana.com/oss/release/grafana-5.4.3-1.x86_64.rpm && cd ..\n\n#run these scripts to update local deb and rpm repos and publish them:\n./scripts/build/update_repo/test-update-deb-repo.sh <gpg key password>\n./scripts/build/update_repo/test-publish-deb-repo.sh\n./scripts/build/update_repo/test-update-rpm-repo.sh <gpg key password>\n./scripts/build/update_repo/test-publish-rpm-repo.sh\n\n```\n\n----------------------------------------\n\nTITLE: Defining Emotion Class Names in TypeScript\nDESCRIPTION: Illustrates the correct way to define Emotion class names using camelCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // bad\n  ElementWrapper: css`...`,\n  // bad\n  ['element-wrapper']: css`...`,\n\n  // good\n  elementWrapper: css({\n    padding: theme.spacing(1, 2),\n    background: theme.colors.background.secondary,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Grafana Repository File using Shell\nDESCRIPTION: Removes the Grafana YUM/DNF repository configuration file located at `/etc/yum.repos.d/grafana.repo`. The `-i` flag prompts for confirmation before removal. Requires `sudo` privileges. This is an optional step during uninstallation to clean up repository configurations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm -i /etc/yum.repos.d/grafana.repo\n```\n\n----------------------------------------\n\nTITLE: Disabling LDAP Organization Role Synchronization (INI)\nDESCRIPTION: This configuration snippet for Grafana's main INI file demonstrates how to disable the automatic synchronization of organization roles based on LDAP group mappings. Setting `skip_org_role_sync` to `true` allows administrators to manage Grafana organization roles manually, even when authentication is handled by LDAP. LDAP must still be enabled (`enabled = true`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/ldap/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[auth.ldap]\n# Set to `true` to enable LDAP integration (default: `false`)\nenabled = true\n\n# Path to the LDAP specific configuration file (default: `/etc/grafana/ldap.toml`)\nconfig_file = /etc/grafana/ldap.toml\n\n# Allow sign-up should be `true` (default) to allow Grafana to create users on successful LDAP authentication.\n# If set to `false` only already existing Grafana users will be able to login.\nallow_sign_up = true\n\n# Prevent synchronizing ldap users organization roles\nskip_org_role_sync = true\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Log Simulator and Appending Output to Log File - Bash\nDESCRIPTION: Runs the downloaded Python script to generate log entries and appends each output line to /var/log/web_requests.log using sudo permissions. Requires Python 3 to be installed, and appropriate permissions to write to the destination file. The command pipes output from the script into tee, which appends to the specified log file, ensuring Promtail can watch the file for ingestion by Loki. Input: No direct user-provided variables; Output: continuously updated log file for log monitoring.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-with-logs/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./web-server-logs-simulator.py | sudo tee -a /var/log/web_requests.log\n```\n\n----------------------------------------\n\nTITLE: Testing Select Component Options in Grafana\nDESCRIPTION: Test case for verifying that a Select component displays the correct options. It demonstrates how to interact with the Select component by clicking it and then checking for the presence of specific options in the dropdown.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nit('should have an \"Editor\" option', async () => {\n  const { user } = setup(\n    <>\n      <label htmlFor={'role-picker'}>Role picker</label>\n      <OrgRolePicker value={OrgRole.Admin} inputId={'role-picker'} onChange={() => {}} />\n    </>\n  );\n  await user.click(screen.getByRole('combobox', { name: 'Role picker' }));\n  expect(screen.getByText('Editor')).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Adapting to Changed Panel View URL Format for Repeated Panels\nDESCRIPTION: Due to the Scenes library integration, the URL format for viewing individual repeated panels has changed. URLs previously using parameters like `&viewPanel=panel-5` are now invalid and will cause a 'Panel not found' error. The new format resembles `&viewPanel=panel-3-clone1`. To get the correct URL, reopen the panel in view mode.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/breaking-changes/breaking-changes-v11-0.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n&viewPanel=panel-5\n```\n\nLANGUAGE: text\nCODE:\n```\n&viewPanel=panel-3-clone1\n```\n\n----------------------------------------\n\nTITLE: Defining PGP Signature Block\nDESCRIPTION: Contains the PGP signature data used to verify the integrity and authenticity of the preceding signed message content (the JSON manifest). It includes metadata about the OpenPGP software version used for signing (OpenPGP.js v4.10.1) and the signature itself in Radix-64 encoding. This block concludes the PGP signed message.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/invalid-v2-missing-file/plugin/MANIFEST.txt#2025-04-23_snippet_2\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqIEARMKAAYFAl+2tJMACgkQfk0ManCIZueB0AIJAT/PWs226MaIu3eDZy4o\n3UH/tIExyY4zR+VSBfTS+Gji5BcIRkIn7bhM1U40KDraDCvQOl3WetgqQkPd\nwcSTJJocAgkBrsrxNz/Nl+vw/usre3Funj0hPVS/6NnJXwe6sVH+gAQfeddz\nMzYTY/gcUVWp8Y7l/Hg44nry0PS3sr5LQ30w/FY=\n=ev+T\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Wire Framework Error Using Unexported Identifier\nDESCRIPTION: An error message from the Go Wire dependency injection framework. The error occurs when trying to inject a string value that references the unexported identifier 'privateMsg'. In Go, identifiers starting with lowercase letters are private to their package and cannot be accessed from outside.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/UnexportedValue/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectedMessage: value string can't be used: uses unexported identifier privateMsg\n```\n\n----------------------------------------\n\nTITLE: User Update Response Example (json)\nDESCRIPTION: Offers the success response after a user update operation, as a simple JSON message string. Indicates that the user information was successfully modified, confirming the operation outcome for API clients.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"User updated\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Grafana Logs on Mac OS\nDESCRIPTION: This bash command creates a directory for Grafana logs in the /var/log folder with sudo permissions, which is necessary for containers that read from log files on Mac OS.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /var/log/grafana\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Tag Components in JavaScript\nDESCRIPTION: This snippet imports necessary components and stories for the Tag documentation in Storybook. It includes Meta, Canvas, and ArgTypes from Storybook, as well as the Tag component and its stories.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tags/Tag.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Canvas, ArgTypes } from '@storybook/blocks';\nimport { Tag } from './Tag';\nimport * as TagStories from './Tag.story';\n```\n\n----------------------------------------\n\nTITLE: Example Output of Separated Firing and Resolved Alerts in Grafana Templates - template_output\nDESCRIPTION: Sample output of the 'custom.firing_and_resolved_alerts' template. Shows resolved and firing alert sections, each listing summary, status, and description. Highlights structure and information provided in custom notifications.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_10\n\nLANGUAGE: template_output\nCODE:\n```\n1 resolved alert(s)\n\n  Summary: The database server db1 has exceeded 75% of available disk space.\n  Status: resolved\n  Description: This alert fires when a database server is at risk of running out of disk space. You should take measures to increase the maximum available disk space as soon as possible to avoid possible corruption.\n\n1 firing alert(s)\n\n  Summary: The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.\n  Status: firing\n  Description: This alert fires when a web server responds with more 5xx errors than is expected. This could be an issue with the web server or a backend service.\n```\n\n----------------------------------------\n\nTITLE: Including Thresholds Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content related to threshold options. It references a specific markdown file (`visualizations/thresholds-options-2.md`) from the `grafana` source, ensuring consistency. The `<GRAFANA_VERSION>` placeholder indicates that the specific version of the documentation to include is determined dynamically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/canvas/index.md#2025-04-23_snippet_4\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/thresholds-options-2.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Uploading a Migration Snapshot to Grafana API - Bash\nDESCRIPTION: This curl command uploads a migration snapshot to the Grafana API by issuing a POST request to the /api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}/upload endpoint. The command sets the Content-Type header to application/json but does not require a data payload by default. Dependencies: Requires curl, valid sessionUid and snapshotUid, and Grafana admin credentials.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/cloudmigration/api/curl_commands.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \\\"Content-Type: application/json\\\" \\\\\n   http://admin:admin@localhost:3000/api/cloudmigration/migration/{sessionUid}/snapshot/{snapshotUid}/upload\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Source Onboarding via 'datasourceOnboarding' Feature Toggle (Plaintext)\nDESCRIPTION: This represents the 'datasourceOnboarding' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the new data source connection guidance page shown in Dashboards and Explore when no data source is configured in Grafana v9.4.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndatasourceOnboarding\n```\n\n----------------------------------------\n\nTITLE: Embedding Video using Custom Hugo Shortcode (Catchpoint Plugin)\nDESCRIPTION: This snippet uses a custom Hugo shortcode named `video-embed` to embed a video file. This specific instance showcases the functionality of the Catchpoint data source plugin for Grafana. The `src` parameter points to the video file path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v11-2.md#2025-04-23_snippet_3\n\nLANGUAGE: hugo\nCODE:\n```\n{{< video-embed src=\"/media/docs/plugins/Catchpoint.mp4\" >}}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Grafana Release Notes\nDESCRIPTION: YAML front matter configuration specifying build settings, product labels, and title for Grafana 7.5.9 release notes documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-9.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.9\n```\n\n----------------------------------------\n\nTITLE: Defining Update Service Account Response in Go\nDESCRIPTION: This snippet demonstrates how to define the response structure for a successful updateServiceAccount operation. It includes fields for the message, ID, name, and service account details.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// swagger:response updateServiceAccountResponse\ntype UpdateServiceAccountResponse struct {\n\t// in:body\n\tBody struct {\n\t\tMessage        string                                    `json:\"message\"`\n\t\tID             int64                                     `json:\"id\"`\n\t\tName           string                                    `json:\"name\"`\n\t\tServiceAccount *serviceaccounts.ServiceAccountProfileDTO `json:\"serviceaccount\"`\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Explore Query Field Methods in Grafana\nDESCRIPTION: List of deprecated methods for setting Explore query fields in Grafana. These methods (setExploreQueryField, setExploreMetricsQueryField, setExploreLogsQueryField) will be removed in future releases. Developers should instead use conditional rendering based on props.app in their query editors.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-9-0-0.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetExploreQueryField\nsetExploreMetricsQueryField\nsetExploreLogsQueryField\n```\n\n----------------------------------------\n\nTITLE: Nesting Italic Text within Text Component in JSX\nDESCRIPTION: Shows how to nest an italic Text component within another Text component for emphasis.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Text/Text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"primary\" element=\"p\">\n  And Forrest Gump said:\n  <Text italic>Life is like a box of chocolates. You never know what you're gonna get.</Text>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Parsing Login Ping Response from Grafana HTTP API - JSON\nDESCRIPTION: This JSON response represents a successful session renewal or validation from the /api/login/ping endpoint, indicating that the user is logged in. No parameters are needed for parsing, and the primary output is a message property confirming login status. The response is minimal and intended for session checks in web clients.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/other.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\\"message\\\": \\\"Logged in\\\"}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering InlineField with Input - React JSX\nDESCRIPTION: This snippet demonstrates how to use the InlineField component to render an Input element with an inline label. The label is set with the 'label' prop, and the Input is provided as a child to InlineField with a sample placeholder. InlineField can be paired with various form elements and supports props to customize label width and add a tooltip. No external dependencies are needed beyond React and the components themselves. Input is expected to be imported or available in the project context.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/InlineField.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<InlineField label=\\\"Inline field\\\">\\n  <Input placeholder=\\\"Inline input\\\" />\\n</InlineField>\\n\n```\n\n----------------------------------------\n\nTITLE: Documenting Component Properties with Comments in TypeScript\nDESCRIPTION: Shows how to add comments to component properties that will be displayed in the Props table.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyProps {\n  /** Sets the initial values, which are overridden when the query returns a value*/\n  defaultValues: Array<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: API Key Authentication Test\nDESCRIPTION: Executes test using admin API key authentication\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -c auth_token_test -k \"<api key here>\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Figures in Hugo/Grafana Documentation Markdown\nDESCRIPTION: This snippet demonstrates how to use the Hugo/Grafana documentation site's figure shortcode for embedding an image with sizing and caption controls. The 'src' parameter specifies the image file, 'max-width' controls display size, and 'caption' provides a descriptive caption for screen readers and context. Used for visually illustrating new features or UI changes within technical documentation. No external dependencies are required, but proper file paths and accessible captions are advised.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< figure src=\"/media/docs/grafana/dashboards/WidgetVizSplit.png\" max-width=\"750px\" caption=\"DESCRIPTIVE CAPTION\" >}}\n```\n\n----------------------------------------\n\nTITLE: Including Legend Options Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation content related to legend options from the specified file (`visualizations/legend-options-1.md`). It ensures consistency by reusing documentation across different versions or contexts, substituting the correct Grafana version. Dependencies include the Hugo static site generator and the referenced markdown file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/legend-options-1.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Placement of Example and Public Tag in TSDoc - TypeScript\nDESCRIPTION: This snippet illustrates a discouraged documentation pattern where the @public tag is placed before the @example block within a class comment. This serves as a negative example, warning that such tag placement can reduce consistency and clarity. There are no functional dependencies, but the context is TypeScript code using TSDoc annotations.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Helps to create DataFrame objects and handle\n * the heavy lifting of creating a complex object.\n *\n * @public\n * @example\n * ```typescript\n * const dataFrame = factory.create();\n * ```\n **/\nexport class DataFrameFactory {\n  create(): DataFrame {}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Tutorial Environment Repository with Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the official Grafana tutorial environment repository using Git. It requires Git to be installed and configured on your system. The command will create a \"tutorial-environment\" directory containing all resources needed to set up the demo environment locally. Input: None; Output: Local copy of the repository created in the working directory.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt4/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/grafana/tutorial-environment.git\n```\n\n----------------------------------------\n\nTITLE: Including Common Upgrade Tasks using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode incorporates the shared documentation section detailing common tasks involved in a Grafana upgrade process. It utilizes the `docs/shared` shortcode, referencing the `upgrade/upgrade-common-tasks.md` file from the `grafana` source, and includes a version placeholder (`<GRAFANA_VERSION>`).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v11.4/index.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"upgrade/upgrade-common-tasks.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Server for Aggregation Testing (Shell)\nDESCRIPTION: Executes the `make run` command in the Grafana project directory. This command compiles and starts the Grafana server, incorporating the settings defined in `custom.ini`, including the enabled aggregator feature and associated PKI configurations. This makes the main Grafana API server ready to aggregate other services.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/aggregator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Interface and Domain Types in Go (Alphabetical Service Example)\nDESCRIPTION: Example of how to structure a service root package with interfaces, domain types, and query/command structures. This demonstrates the pattern where domain types and interfaces are defined in the root package to enable interaction with the service.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/package-hierarchy.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage alphabetical\n\ntype Alphabetical interface {\n  // GetLetter returns either an error or letter.\n  GetLetter(context.Context, GetLetterQuery) (Letter, error)\n  // ListCachedLetters cannot fail, and doesn't return an error.\n  ListCachedLetters(context.Context, ListCachedLettersQuery) Letters\n  // DeleteLetter doesn't have any return values other than errors, so it\n  // returns only an error.\n  DeleteLetter(context.Contxt, DeltaCommand) error\n}\n\ntype Letter byte\n\ntype Letters []Letter\n\ntype GetLetterQuery struct {\n  ID int\n}\n\n// Create queries/commands for methods even if they are empty.\ntype ListCachedLettersQuery struct {}\n\ntype DeleteLetterCommand struct {\n  ID int\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Prometheus ExecStart Command in systemd (Linux/MacOS, Bash)\nDESCRIPTION: This snippet represents the \\\"ExecStart\\\" directive inside a systemd unit file for Prometheus. It defines the command systemd executes to start the Prometheus server, with paths to the binary, configuration file, and data storage directory. Users must verify the correctness of all referenced paths. This line is edited within the service file and is not meant to be run directly as a shell command.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus/\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Fixed Role: fixed:datasources.permissions:writer\nDESCRIPTION: Specifies the `fixed:datasources.permissions:writer` role (ID: `fixed_aiQh9YDfLOKjQhYasF9_SFUjQiw`) within Grafana. This role includes all permissions from `fixed:datasources.permissions:reader` and adds `datasources.permissions:write`, allowing users to create, read, or delete permissions of a data source.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed:datasources.permissions:writer\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfixed_aiQh9YDfLOKjQhYasF9_SFUjQiw\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nPermissions included:\n- fixed:datasources.permissions:reader\n- datasources.permissions:write\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication with JWK Set URL\nDESCRIPTION: Alternative configuration for JWT authentication in Grafana using a JWK set URL instead of a local file.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[auth.jwt]\nenabled = true\nheader_name = X-JWT-Assertion\nusername_claim = login\nemail_claim = email\njwk_set_url = <YOUR REVERSE PROXY URL>/auth/realms/grafana/protocol/openid-connect/certs\ncache_ttl = 60m\nexpect_claims = {\"iss\": \"http://localhost:8087/auth/realms/grafana\", \"azp\": \"grafana-oauth\"}\nauto_sign_up = true\n```\n\n----------------------------------------\n\nTITLE: Updated Greeter Initializer with Grumpy State in Go\nDESCRIPTION: Modifies the NewGreeter function to randomly set a grumpy state based on the current time.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGreeter(m Message) Greeter {\n    var grumpy bool\n    if time.Now().Unix()%2 == 0 {\n        grumpy = true\n    }\n    return Greeter{Message: m, Grumpy: grumpy}\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Alertmanager Data Source in Grafana Using YAML\nDESCRIPTION: This YAML snippet illustrates how to provision an Alertmanager data source by editing Grafana's configuration files. It sets up a data source named 'Alertmanager' with parameters for implementation type, connection URL, user authentication, and options for Grafana-managed alerts. Dependencies include Grafana (with provisioning enabled) and knowledge of valid implementation values. Inputs involve the configuration options for the data source; outputs are the resulting Alertmanager data source created on Grafana startup. Ensure sensitive fields, like passwords, are securely managed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/alertmanager/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\n\ndatasources:\n  - name: Alertmanager\n    type: alertmanager\n    url: http://localhost:9093\n    access: proxy\n    jsonData:\n      # Valid options for implementation include mimir, cortex and prometheus\n      implementation: prometheus\n      # Whether or not Grafana should send alert instances to this Alertmanager\n      handleGrafanaManagedAlerts: false\n    # optionally\n    basicAuth: true\n    basicAuthUser: my_user\n    secureJsonData:\n      basicAuthPassword: test_password\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Admonition/Callout Blocks in Grafana Documentation with Hugo Shortcode\nDESCRIPTION: This snippet highlights the use of the admonition shortcode to add callout or note blocks in Grafana/Hugo documentation files. The 'type' parameter controls the callout style (e.g., 'note'). Inside the block, additional formatting and guidance can be offered, including links and explanations about linking practices for documentation maintainability. This requires the documentation build system to support Hugo-style shortcode processing.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-2.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{% admonition type=\"note\" %}}\nUse full URLs for links. When linking to versioned docs, replace the version with the version interpolation placeholder (for example, <GRAFANA_VERSION>, <TEMPO_VERSION>, <MIMIR_VERSION>) so the system can determine the correct set of docs to point to. For example, \"https://grafana.com/docs/grafana/latest/administration/\" becomes \"https://grafana.com/docs/grafana/<GRAFANA_VERSION>/administration/\".\n{{% /admonition %}}\n```\n\n----------------------------------------\n\nTITLE: Importing Grafana Resources with Grizzly in Shell\nDESCRIPTION: These shell commands first switch the Grizzly context to `grafana-cloud`. Then, they sequentially apply (push) the previously exported Grafana resources from the current directory (`.`) to the configured Grafana Cloud instance. Resources are applied in a specific order (Folders, Library Elements, Data Sources, Dashboards, Alerts) using targeted apply commands (`grr apply . -t 'ResourceType/*'`) to handle dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/migration-guide/manually-migrate-to-grafana-cloud.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngrr config use-context grafana-cloud\n\ngrr apply . -t 'DashboardFolder/*'\ngrr apply . -t 'LibraryElement/*'\ngrr apply . -t 'Datasource/*'\ngrr apply . -t 'Dashboard/*'\ngrr apply . -t 'AlertRuleGroup/*'\ngrr apply . -t 'AlertContactPoint/*'\ngrr apply . -t 'AlertNotificationPolicy/*'\n```\n\n----------------------------------------\n\nTITLE: Annotating Methods with Main and Partial Stability Using TSDoc - TypeScript\nDESCRIPTION: This code demonstrates the recommended way to indicate both main and partial stability in a TypeScript class using TSDoc. The DataFrameFactory class is marked as @public, while the createMany method is specifically marked as @beta, highlighting that certain parts of the API may be less stable. This pattern relies on TypeScript and TSDoc, applying different release tags at class and method levels. Inputs and outputs revolve around DataFrame and DataFrames types, respectively.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Helps to create DataFrame objects and handle\n * the heavy lifting of creating a complex object.\n *\n * @example\n * ```typescript\n * const dataFrame = factory.create();\n * ```\n *\n * @public\n **/\nexport class DataFrameFactory {\n  create(): DataFrame {}\n\n  /**\n   * @beta\n   **/\n  createMany(): DataFrames[] {}\n}\n```\n\n----------------------------------------\n\nTITLE: Grafana Fixed Role Permissions Table\nDESCRIPTION: Markdown table showing fixed role identifiers, their unique IDs, associated permissions, and descriptions. Covers permissions for managing library panels, licensing, migration, organization users, organizations, and plugins.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| `fixed:library.panels:general.reader`        | `fixed_ct0DghiBWR_2BiQm3EvNPDVmpio` | `library.panels:read`                                                                                                                                                                                                                                                       | Read all library panels at the root level.                                                                                                                                                                                                                                            |\n| `fixed:library.panels:general.writer`        | `fixed_DgprkmqfN_1EhZ2v1_d1fYG8LzI` | All permissions from `fixed:library.panels:general.reader` plus<br>`library.panels:create`<br>`library.panels:delete`<br>`library.panels:write`                                                                                                                             | Create, read, write or delete all library panels and their permissions at the root level.                                                                                                                                                                             |\n| `fixed:library.panels:reader`                | `fixed_tvTr9CnZ6La5vvUO_U_X1LPnhUs` | `library.panels:read`                                                                                                                                                                                                                                                       | Read all library panels.                                                                                                                                                                                                                                                              |\n| `fixed:library.panels:writer`                | `fixed_JTljAr21LWLTXCkgfBC4H0lhBC8` | All permissions from `fixed:library.panels:reader` plus<br>`library.panels:create`<br>`library.panels:delete`<br>`library.panels:write`                                                                                                                                     | Create, read, write or delete all library panels and their permissions.                                                                                                                                                                                                               |\n| `fixed:licensing:reader`                     | `fixed_OADpuXvNEylO2Kelu3GIuBXEAYE` | `licensing:read`<br>`licensing.reports:read`                                                                                                                                                                                                                                | Read licensing information and licensing reports.                                                                                                                                                                                                                                     |\n| `fixed:licensing:writer`                     | `fixed_gzbz3rJpQMdaKHt-E4q0PVaKMoE` | All permissions from `fixed:licensing:viewer` and <br>`licensing:write`<br>`licensing:delete`                                                                                                                                                                               | Read licensing information and licensing reports, update and delete the license token.                                                                                                                                                                                                |\n| `fixed:migrationassistant:migrator`          | `fixed_LLk2p7TRuBztOAksTQb1Klc8YTk` | `migrationassistant:migrate`                                                                                                                                                                                                                                                | Execute on-prem to cloud migrations through the Migration Assistant.                                                                                                                                                                                                                  |\n| `fixed:org.users:reader`                     | `fixed_oCqNwlVHLOpw7-jAlwp4HzYqwGY` | `org.users:read`                                                                                                                                                                                                                                                            | Read users within a single organization.                                                                                                                                                                                                                                              |\n| `fixed:org.users:writer`                     | `fixed_VERj5nayasjgf_Yh0sWqqCkxWlw` | All permissions from `fixed:org.users:reader` and <br>`org.users:add`<br>`org.users:remove`<br>`org.users:write`                                                                                                                                                            | Within a single organization, add a user, invite a new user, read information about a user and their role, remove a user from that organization, or change the role of a user.                                                                                                        |\n| `fixed:organization:maintainer`              | `fixed_CMm-uuBaPUBf4r8XG3jIvxo55bg` | All permissions from `fixed:organization:reader` and <br> `orgs:write`<br>`orgs:create`<br>`orgs:delete`<br>`orgs.quotas:write`                                                                                                                                             | Create, read, write, or delete an organization. Read or write its quotas. This role needs to be assigned globally.                                                                                                                                                                    |\n| `fixed:organization:reader`                  | `fixed_0SZPJlTHdNEe8zO91zv7Zwiwa2w` | `orgs:read`<br>`orgs.quotas:read`                                                                                                                                                                                                                                           | Read an organization and its quotas.                                                                                                                                                                                                                                                  |\n| `fixed:organization:writer`                  | `fixed_Y4jGqDd8w1yCrPwlik8z5Iu8-3M` | All permissions from `fixed:organization:reader` and <br> `orgs:write`<br>`orgs.preferences:read`<br>`orgs.preferences:write`                                                                                                                                               | Read an organization, its quotas, or its preferences. Update organization properties, or its preferences.                                                                                                                                                                             |\n| `fixed:plugins:maintainer`                   | `fixed_yEOKidBcWgbm74x-nTa3lW5lOyY` | `plugins:install`                                                                                                                                                                                                                                                           | Install and uninstall plugins. Needs to be assigned globally.                                                                                                                                                                                                                         |\n| `fixed:plugins:writer`                       | `fixed_MRYpGk7kpNNwt2VoVOXFiPnQziE` | `plugins:write`                                                                                                                                                                                                                                                             | Enable and disable plugins and edit plugins' settings.                                                                                                                                                                                                                                |\n| `fixed:plugins.app:reader`                   | `fixed_AcZRiNYx7NueYkUqzw1o2OGGUAA` | `plugins.app:access`                                                                                                                                                                                                                                                        | Access application plugins (still enforcing the organization role).                                                                                                                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Selecting Default Rendering Mode - JSON\nDESCRIPTION: Sets the rendering mode to 'default' in the renderer's JSON configuration file, which causes a new browser to be used for each image rendering request. This mode can be memory-intensive with high concurrency.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"mode\": \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example for Retrieving Single Report Details - JSON\nDESCRIPTION: This JSON code snippet presents an example of the response object returned from the /api/reports/:id endpoint. The object contains comprehensive information about the chosen report, including scheduling, options, associated dashboards, formats, and timestamps. A successful response uses HTTP status 200 and is served in JSON format.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"id\\\": 2,\\n\\t\\\"userId\\\": 1,\\n\\t\\\"orgId\\\": 1,\\n\\t\\\"name\\\": \\\"Report 2\\\",\\n\\t\\\"recipients\\\": \\\"example-report@grafana.com\\\",\\n\\t\\\"replyTo\\\": \\\"\\\",\\n\\t\\\"message\\\": \\\"Hi, \\\\nPlease find attached a PDF status report. If you have any questions, feel free to contact me!\\\\nBest,\\\",\\n\\t\\\"schedule\\\": {\\n\\t\\t\\\"startDate\\\": \\\"2022-10-02T00:00:00+02:00\\\",\\n\\t\\t\\\"endDate\\\": null,\\n\\t\\t\\\"frequency\\\": \\\"once\\\",\\n\\t\\t\\\"intervalFrequency\\\": \\\"\\\",\\n\\t\\t\\\"intervalAmount\\\": 0,\\n\\t\\t\\\"workdaysOnly\\\": false,\\n\\t\\t\\\"dayOfMonth\\\": \\\"2\\\",\\n\\t\\t\\\"timeZone\\\": \\\"Europe/Warsaw\\\"\\n\\t},\\n\\t\\\"options\\\": {\\n\\t\\t\\\"orientation\\\": \\\"landscape\\\",\\n\\t\\t\\\"layout\\\": \\\"grid\\\",\\n\\t},\\n\\t\\\"enableDashboardUrl\\\": true,\\n\\t\\\"state\\\": \\\"scheduled\\\",\\n\\t\\\"dashboards\\\": [\\n\\t\\t{\\n\\t\\t\\t\\\"dashboard\\\": {\\n\\t\\t\\t\\t\\\"id\\\": 463,\\n\\t\\t\\t\\t\\\"uid\\\": \\\"7MeksYbmk\\\",\\n\\t\\t\\t\\t\\\"name\\\": \\\"Alerting with TestData\\\"\\n\\t\\t\\t},\\n\\t\\t\\t\\\"timeRange\\\": {\\n\\t\\t\\t\\t\\\"from\\\": \\\"\\\",\\n\\t\\t\\t\\t\\\"to\\\": \\\"\\\"\\n\\t\\t\\t},\\n\\t\\t\\t\\\"reportVariables\\\": {\\n\\t\\t\\t\\t\\\"namefilter\\\": \\\"TestData\\\"\\n\\t\\t\\t}\\n\\t\\t}\\n\\t],\\n\\t\\\"formats\\\": [\\n\\t\\t\\\"pdf\\\",\\n\\t\\t\\\"csv\\\"\\n\\t],\\n\\t\\\"created\\\": \\\"2022-09-12T11:44:42+02:00\\\",\\n\\t\\\"updated\\\": \\\"2022-09-12T11:44:42+02:00\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration Data (Query B) for Config from Query Results Transformation\nDESCRIPTION: This table represents the configuration data (Input[1], from Query B) used in the 'Config from query results' transformation example. The 'Value' field (100) from this query will be used to set the 'Max' configuration on Query A's 'Value' field.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| Time          | Value |\n| ------------- | ----- |\n| 1626178119127 | 100   |\n| 1626178119129 | 100   |\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Request with Invalid Scope for Grafana Role Creation\nDESCRIPTION: Demonstrates an HTTP POST request to the `/api/access-control/roles` endpoint attempting to create a role with an invalid permission scope (`serviceaccounts:serviceaccount6`) for the given action (`serviceaccounts.permissions:read`). This triggers a validation error, as the scope doesn't match expected patterns like `*`, `serviceaccounts:*` or `serviceaccounts:id:*`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/roles HTTP/1.1\nContent-Type: application/json\n{\n\t\"Name\": \"Read Service Account with id 6\",\n\t\"Permissions\": [\n\t\t\t{\n\t\t\t\"action\": \"serviceaccounts.permissions:read\",\n\t\t\t\"scope\": \"serviceaccounts:serviceaccount6\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Spec Files - Bash\nDESCRIPTION: Command to generate or update OpenAPI specification files by running the OpenAPI test file.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test pkg/tests/apis/openapi_test.go\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Role Permission to Data Source in HTTP\nDESCRIPTION: Sends a POST request to set permission for a basic role (Admin, Editor, or Viewer) for a data source. The 'permission' field can be set to 'Query', 'Edit', or 'Admin' to add permission, or an empty string to remove it.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/datasource_permissions.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/datasources/my_datasource/builtInRoles/Admin\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"permission\": \"Edit\",\n}\n```\n\n----------------------------------------\n\nTITLE: Go Interface Implementation Error Message\nDESCRIPTION: This is a Go compiler error message that occurs when attempting to use a string type where an interface implementation is expected. The error indicates that 'string' doesn't implement the 'Fooer' interface from the 'example.com/foo' package.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingDoesntImplement/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: string does not implement example.com/foo.Fooer\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Team Sync\nDESCRIPTION: Sample JSON payload from an OAuth2 provider containing a 'groups' array ('engineers', 'analysts'). When used with the corresponding `groups_attribute_path` configuration, Grafana Team Sync will attempt to map these group names to Grafana teams.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"groups\": [\n        \"engineers\",\n        \"analysts\",\n    ],\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Launching OAuth Block in Grafana Development Environment\nDESCRIPTION: Command to launch the OAuth block in Grafana's development environment using the 'make devenv' command.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=\"auth/oauth\"\n```\n\n----------------------------------------\n\nTITLE: Storybook Meta Configuration\nDESCRIPTION: Storybook metadata configuration for ColorPicker component documentation\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ColorPicker/ColorPicker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Pickers and Editors/ColorPicker/ColorPicker\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Cell Types Documentation\nDESCRIPTION: Markdown table documenting different cell types available in Grafana tables including Auto, Sparkline, Colored text, Gauge, and other display options.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/table/index.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Cell type                                 | Description                                                                                                                                                                                                                                                                                                                                   |\n| ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Auto                                      | Automatically displays values with sensible defaults applied.                                                                                                                                                                                                                 |\n| Sparkline                   | Shows values rendered as a sparkline.                                                                                                                                                                                                                                                                                                         |\n| Colored text             | If thresholds are set, then the field text is displayed in the appropriate threshold color.                                                                                                                                                                                                                                                   |\n| Colored background | If thresholds are set, then the field background is displayed in the appropriate threshold color.                                                                                                                                                                                                                             |\n| Gauge                           | Cells can be displayed as a graphical gauge, with several different presentation types. You can set the Gauge display mode and the Value display options.                                                                                                                                            |\n| Data links                                | If you've configured data links, when the cell type is **Auto**, the cell text becomes clickable. If you change the cell type to **Data links**, the cell text reflects the titles of the configured data links. To control the application of data link text more granularly, use a **Cell option > Cell type > Data links** field override. |\n| JSON View                   | Shows values formatted as code.                                                                                                                                                                                                                                                                                               |\n| Image                           | If the field value is an image URL or a base64 encoded image, the table displays the image.                                                                                                                                                                                                                                                   |\n| Actions                       | The cell displays a button that triggers a basic, unauthenticated API call when clicked.                                                                                                                                                                                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Defining RawMessage Structure in Go\nDESCRIPTION: Defines the RawMessage type as an interface{}.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_43\n\nLANGUAGE: go\nCODE:\n```\n[interface{}](#interface)\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Release Notes\nDESCRIPTION: Front matter YAML configuration specifying build settings, product labels, and release title for Grafana 7.5.0 documentation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-0.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.0\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Grafana Release Notes\nDESCRIPTION: YAML front matter configuration for the Grafana 8.2.2 release notes page. Specifies build settings, product labels, and page title.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-2.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.2.2\n```\n\n----------------------------------------\n\nTITLE: Executing Templates with Specific Data Context in Go Templates\nDESCRIPTION: Demonstrates passing a specific part of the data context (e.g., `.Alerts`) when executing a defined template (`\"print_alerts\"`). The executed template will receive `.Alerts` as its dot (`.`) context.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"print_alerts\" .Alerts }}\n```\n\n----------------------------------------\n\nTITLE: Response for Admin Settings Update\nDESCRIPTION: Example response after successfully updating Grafana admin settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 32\n\n{\n  \"message\":\"Settings updated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Reports via HTTP POST Request\nDESCRIPTION: Example of sending a report by ID with options to use emails from the report configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/reports/email HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"id\":\"3\",\n  \"useEmailsFromReport\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Intermediate Result of 'Labels to Fields' Merging (Series 2)\nDESCRIPTION: This Markdown table shows the intermediate state after the first part of the 'Labels to fields' transformation acts on a second series (Series 2) with the label Datacenter=EU, prior to the final merge step.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Datacenter | Value |\n| ------------------- | ---------- | ----- |\n| 2020-07-07 11:34:20 | EU         | 20    |\n```\n\n----------------------------------------\n\nTITLE: Including Shared Panel Options Documentation (Hugo Shortcode)\nDESCRIPTION: Uses a Hugo shortcode (`docs/shared`) to include a reusable documentation block detailing standard panel options available across different Grafana visualizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/pie-chart/index.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/panel-options.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana LDAP Authentication\nDESCRIPTION: INI configuration block for enabling LDAP authentication in Grafana and specifying the LDAP configuration file path\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/openldap-multiple/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.ldap]\nenabled = true\nconfig_file = ./devenv/docker/blocks/auth/openldap-multiple/ldap_dev.toml\n```\n\n----------------------------------------\n\nTITLE: Including Shared Common Upgrade Tasks - Hugo Shortcode - Plaintext\nDESCRIPTION: This snippet injects shared documentation for common upgrade tasks into the page using a Hugo shortcode. By specifying the relevant markdown file and context parameters, it ensures all essential upgrade steps are communicated to users. It supports documentation maintainability by referencing centrally managed content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\\\"upgrade/upgrade-common-tasks.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Wire Dependency Injection Error in Go\nDESCRIPTION: An error message from the Wire dependency injection framework indicating that a value of type 'int' cannot be used in 'injectBar' because the variable 'f' is not declared in package scope. This typically occurs when trying to inject a local variable or undeclared identifier.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueFromFunctionScope/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectBar: value int can't be used: f is not declared in package scope\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secret for AWS Access Key ID (Bash)\nDESCRIPTION: Creates a Docker secret named `aws_access_key_id` containing the specified AWS Access Key ID ('aws01us02'). The secret value is piped to the `docker secret create` command. Requires Docker secrets capability (e.g., Swarm mode).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-docker.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"aws01us02\" | docker secret create aws_access_key_id -\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana User Settings for Team-Based Access Control\nDESCRIPTION: This configuration snippet shows how to set up Grafana to automatically assign new users to an organization with no basic role, forcing permissions to be granted through team membership instead of default assignments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/index.md#2025-04-23_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[users]\n# Set to true to automatically assign new users to the default organization (id 1)\nauto_assign_org = true\n\n# Set this value to automatically add new users to the provided organization (if auto_assign_org above is set to true)\nauto_assign_org_id = <org_id>\n\n# Default role new users will be automatically assigned (if auto_assign_org above is set to true)\nauto_assign_org_role = None\n```\n\n----------------------------------------\n\nTITLE: Restricting Azure AD OAuth to Specific Tenant IDs (INI)\nDESCRIPTION: This configuration restricts Azure AD authentication to users from specific tenant IDs by setting allowed_organizations in Grafana's OAuth configuration. The tenant ID(s) must be obtained from the Azure Portal under Entra ID Overview. Multiple tenants can be separated by commas or spaces, enhancing access control granularity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/azuread/index.md#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nallowed_organizations = 8bab1c86-8fba-33e5-2089-1d1c80ec267d\n```\n\n----------------------------------------\n\nTITLE: Discouraged Use of Param Tag for Obvious Parameters - TypeScript\nDESCRIPTION: This snippet highlights a discouraged pattern where the @param tags redundantly describe simple, self-explanatory parameters in a function that compares two numbers for equality. It illustrates the guidance that such documentation is unnecessary for straightforward code where types and names are already clear. The code functions in TypeScript and depends only on basic number parameters.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Compares two numbers to see if they are equal to each other.\n *\n * @param x - The first number\n * @param y - The second number\n * @public\n **/\nexport const isEqual = (x: number, y: number): boolean => {\n  return x === y;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles in Grafana (INI Configuration File) - ini\nDESCRIPTION: This INI configuration code enables the experimental Git Sync feature by activating specific feature toggles in the Grafana configuration file (`grafana.ini` or `custom.ini`). Required dependencies include access to the file system for editing the appropriate config files, and familiarity with restarting the Grafana server after changes. The snippet sets both 'provisioning' and 'kubernetesDashboards' toggles to 'true', and optionally enables 'grafanaAPIServerEnsureKubectlAccess' for easier development. The expected inputs are boolean values; upon saving and restarting Grafana, these options activate experimental features necessary for Git Sync. Constraints: Editing INI files requires administrator privileges on the host.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/git-sync-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nprovisioning = true\nkubernetesDashboards = true ; use k8s from browser\n\n# If you want easy kubectl setup development mode\ngrafanaAPIServerEnsureKubectlAccess = true\n\n```\n\n----------------------------------------\n\nTITLE: Testing Mouse Selection in Combobox\nDESCRIPTION: Test code demonstrating how to test mouse-based option selection in the Combobox component using React Testing Library.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Combobox/Combobox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nrender(<Combobox options={options} onChange={onChangeHandler} value={null} />);\n\nconst input = screen.getByRole('combobox');\nawait userEvent.click(input);\n\nconst item = await screen.findByRole('option', { name: 'Option 1' });\nawait userEvent.click(item);\nexpect(screen.getByDisplayValue('Option 1')).toBeInTheDocument();\n```\n\n----------------------------------------\n\nTITLE: Implementing Standalone Content Template in Markdown\nDESCRIPTION: Shortcode syntax for including standalone shared content from external files. Uses the docs/shared lookup pattern to reference content from a specific Grafana version.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/example.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< docs/shared lookup=\"example.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Documenting Fixed Access Control Roles - Markdown Table - Markdown\nDESCRIPTION: Defines fixed roles for Grafana using a Markdown table, listing their role keys, permission IDs, allowed actions, and descriptions. This construct requires a Markdown parser or viewer for proper rendering. Inputs are not taken directly; the table is maintained manually or via code-generation. Outputs are an organized display of role reference, aiding both implementation and audit. Limitations include lack of programmatic enforcement or validation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/index.md#2025-04-23_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n| `fixed:provisioning:writer`                  | `fixed_bgk1FCyR6OEDwhgirZlQgu5LlCA` | `provisioning:reload`                                                                                                                                                                                                                                                       | Reload provisioning.                                                                                                                                                                                                                                                                  |\n| `fixed:reports:reader`                       | `fixed_72_8LU_0ukfm6BdblOw8Z9q-GQ8` | `reports:read`<br>`reports:send`<br>`reports.settings:read`                                                                                                                                                                                                                 | Read all reports and shared report settings.                                                                                                                                                                                                                                          |\n| `fixed:reports:writer`                       | `fixed_jBW3_7g1EWOjGVBYeVRwtFxhUNw` | All permissions from `fixed:reports:reader` and <br>`reports:create`<br>`reports:write`<br>`reports:delete`<br>`reports.settings:write`                                                                                                                                     | Create, read, update, or delete all reports and shared report settings.                                                                                                                                                                                                               |\n| `fixed:roles:reader`                         | `fixed_GkfG-1NSwEGb4hpK3-E3qHyNltc` | `roles:read`<br>`teams.roles:read`<br>`users.roles:read`<br>`users.permissions:read`                                                                                                                                                                                        | Read all access control roles, roles and permissions assigned to users, teams.                                                                                                                                                                                                        |\n| `fixed:roles:resetter`                       | `fixed_WgPpC3qJRmVpVTJavFNwfS5RuzQ` | `roles:write` with scope `permissions:type:escalate`                                                                                                                                                                                                                        | Reset basic roles to their default.                                                                                                                                                                                                                                                   |\n| `fixed:roles:writer`                         | `fixed_W5aFaw8isAM27x_eWfElBhZ0iOc` | All permissions from `fixed:roles:reader` and <br>`roles:write`<br>`roles:delete`<br>`teams.roles:add`<br>`teams.roles:remove`<br>`users.roles:add`<br>`users.roles:remove`                                                                                                 | Create, read, update, or delete all roles, assign or unassign roles to users, teams.                                                                                                                                                                                                  |\n| `fixed:serviceaccounts:creator`              | `fixed_Ikw60fckA0MyiiZ73BawSfOULy4` | `serviceaccounts:create`                                                                                                                                                                                                                                                    | Create Grafana service accounts.                                                                                                                                                                                                                                                      |\n| `fixed:serviceaccounts:reader`               | `fixed_QFjJAZ88iawMLInYOxPA1DB1w6I` | `serviceaccounts:read`                                                                                                                                                                                                                                                      | Read Grafana service accounts.                                                                                                                                                                                                                                                        |\n| `fixed:serviceaccounts:writer`               | `fixed_iBvUNUEZBZ7PUW0vdkN5iojc2sk` | `serviceaccounts:read`<br>`serviceaccounts:create`<br>`serviceaccounts:write`<br>`serviceaccounts:delete`<br>`serviceaccounts.permissions:read`<br>`serviceaccounts.permissions:write`                                                                                      | Create, update, read and delete all Grafana service accounts and manage service account permissions.                                                                                                                                                                                  |\n| `fixed:settings:reader`                      | `fixed_0LaUt1x6PP8hsZzEBhqPQZFUd8Q` | `settings:read`                                                                                                                                                                                                                                                             | Read Grafana instance settings.                                                                                                                                                                                                                                                       |\n| `fixed:settings:writer`                      | `fixed_joIHDgMrGg790hMhUufVzcU4j44` | All permissions from `fixed:settings:reader` and<br>`settings:write`                                                                                                                                                                                                        | Read and update Grafana instance settings.                                                                                                                                                                                                                                            |\n| `fixed:stats:reader`                         | `fixed_OnRCXxZVINWpcKvTF5A1gecJ7pA` | `server.stats:read`                                                                                                                                                                                                                                                         | Read Grafana instance statistics.                                                                                                                                                                                                                                                     |\n| `fixed:teams:creator`                        | `fixed_nzVQoNSDSn0fg1MDgO6XnZX2RZI` | `teams:create`<br>`org.users:read`                                                                                                                                                                                                                                          | Create a team and list organization users (required to manage the created team).                                                                                                                                                                                                      |\n| `fixed:teams:read`                           | `fixed_Z8pB0GQlrqRt8IZBCJQxPWvJPgQ` | `teams:read`                                                                                                                                                                                                                                                                | List all teams.                                                                                                                                                                                                                                                                       |\n| `fixed:teams:writer`                         | `fixed_xw1T0579h620MOYi4L96GUs7fZY` | `teams:create`<br>`teams:delete`<br>`teams:read`<br>`teams:write`<br>`teams.permissions:read`<br>`teams.permissions:write`                                                                                                                                                  | Create, read, update and delete teams and manage team memberships.                                                                                                                                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Connecting Grafana Authorization Client to Remote GRPC Server via INI\nDESCRIPTION: This configuration connects the authorization client to a remote GRPC server using the [authorization] INI section. The remote_address parameter specifies the server endpoint, mode is set to \"grpc\", and the local server does not listen (listen=false). This setup enables distributed architectures and requires network connectivity to the remote authorization server.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[authorization]\nremote_address = \"server.example.org:10000\"\nlisten = false\nmode = \"grpc\"\n\n```\n\n----------------------------------------\n\nTITLE: Listing Required Image Rendering Dependencies on Debian 10 (Bash)\nDESCRIPTION: Provides a list of package names required for the Grafana image rendering plugin on a Debian 10 (Buster) system. Installing these packages ensures Chromium has access to its necessary shared libraries.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/troubleshooting/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlibxdamage1 libxext6 libxi6 libxtst6 libnss3 libcups2 libxss1 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libpangocairo-1.0-0 libpango-1.0-0 libcairo2 libatspi2.0-0 libgtk3.0-cil libgdk3.0-cil libx11-xcb-dev libgbm1 libxshmfence1\n```\n\n----------------------------------------\n\nTITLE: Generated Wire Injector in Go\nDESCRIPTION: Illustrates the generated implementation of an injector function by Wire.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by Wire. DO NOT EDIT.\n\n//go:generate go run -mod=mod github.com/google/wire/cmd/wire\n//+build !wireinject\n\npackage main\n\nimport (\n    \"example.com/foobarbaz\"\n)\n\nfunc initializeBaz(ctx context.Context) (foobarbaz.Baz, error) {\n    foo := foobarbaz.ProvideFoo()\n    bar := foobarbaz.ProvideBar(foo)\n    baz, err := foobarbaz.ProvideBaz(ctx, bar)\n    if err != nil {\n        return foobarbaz.Baz{}, err\n    }\n    return baz, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UserIcon Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the UserIcon component with basic props. It shows setting up a userView object and passing it to the component along with other props.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/UsersIndicator/UserIcon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { UserIcon } from '@grafana/ui';\n\nconst ExampleComponent = () => {\n  const userView = {\n    user: { id: 1, name: 'John Smith', avatarUrl: 'https://example.com/avatar.png' },\n    lastActiveAt: '2023-04-18T15:00:00.000Z',\n  };\n\n  return (\n    <div>\n      <UserIcon userView={userView} showTooltip={true} className={styles.custom} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Mapping Roles Based on GitHub Username\nDESCRIPTION: JMESPath expression that assigns Admin role to a specific GitHub user (octocat) and Viewer role to all other users. Used in the role_attribute_path configuration setting.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/github/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrole_attribute_path = [login=='octocat'][0] && 'Admin' || 'Viewer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana for WebDAV External Image Storage\nDESCRIPTION: This INI configuration snippet shows how to set up Grafana to use WebDAV as the external image storage provider. It specifies the WebDAV URL, public URL format, and dummy authentication credentials for testing purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/webdav/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[external_image_storage]\nprovider = webdav\n\n[external_image_storage.webdav]\nurl = http://127.0.0.1:5000/images\npublic_url = http://127.0.0.1:5000/images/{{file}}\n\n; as auth is not configured in Dufs, these are just dummy values\nusername = test\npassword = test\n```\n\n----------------------------------------\n\nTITLE: Rendering Tooltip Prop Table using ArgTypes (JSX)\nDESCRIPTION: Uses the imported `ArgTypes` component from Storybook to render an interactive table detailing the props (arguments) accepted by the `Tooltip` component. The `of` prop is crucial, linking `ArgTypes` to the specific `Tooltip` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ArgTypes of={Tooltip} />\n```\n\n----------------------------------------\n\nTITLE: Examples of Multi-Select Operators for Ad Hoc Filters in Grafana\nDESCRIPTION: Displays the operators used for multi-value selection within Grafana's ad hoc filtering feature. '=~' represents 'One of' (matches any of the specified values for a label), and '!=~' represents 'Not one of' (matches if the label's value is not among the specified values). The availability of these operators depends on the specific data source being used for the filter.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/use-dashboards/index.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n=| (One of)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n!=| (Not one of)\n```\n\n----------------------------------------\n\nTITLE: kubectl Output Example - No Playlist Resources Found - Shell\nDESCRIPTION: This shell output message indicates that no Playlist resources were discovered in the specified Kubernetes namespace when queried via kubectl. There are no input parameters and this is only seen when the resource list is empty.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nNo resources found in default namespace.\n```\n\n----------------------------------------\n\nTITLE: Displaying a Primary Button with React in Storybook (TSX)\nDESCRIPTION: This snippet demonstrates how to render Primary variant Buttons of different sizes (small, medium, large) using the Button component within an ExampleFrame in a Storybook MDX file. The snippet requires the Button and ExampleFrame components, with props for variant, size, and styling passed to the Button. Outputs are interactive buttons with specified variants and sizes, suitable for design system documentation or visual regression testing.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <Button variant=\\\"primary\\\" size=\\\"sm\\\" style={{ margin: '5px' }}>\\n    {'Small'}\\n  </Button>\\n  <Button variant=\\\"primary\\\" size=\\\"md\\\" style={{ margin: '5px' }}>\\n    {'Medium'}\\n  </Button>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" style={{ margin: '5px' }}>\\n    {'Large'}\\n  </Button>\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Value 42\nDESCRIPTION: A single number constant with the value of 42. This could be used as a configuration value, magic number, or cultural reference in the codebase.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/ValueIsStruct/want/program_out.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n42\n```\n\n----------------------------------------\n\nTITLE: Typing Connected Redux Props in React Components with TypeScript\nDESCRIPTION: Shows how to use ConnectedProps from React Redux to automatically infer the type of props injected by connect. This pattern separates the connect call into two parts for proper type inference when using mapStateToProps and mapDispatchToProps.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, ConnectedProps } from 'react-redux';\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    location: state.location,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n  };\n};\n\nconst mapDispatchToProps = {\n  updateLocation,\n  initPanelEditor,\n  panelEditorCleanUp,\n  setDiscardChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass PanelEditorUnconnected extends PureComponent<Props> {}\n\nexport const PanelEditor = connector(PanelEditorUnconnected);\n```\n\n----------------------------------------\n\nTITLE: Deleting API Key Response Example using HTTP/JSON\nDESCRIPTION: Example HTTP 200 OK response after successfully deleting an API key via the deprecated `DELETE /api/auth/keys/:id` endpoint. The response body contains a simple JSON message confirming the deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/auth.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"API key deleted\"}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Grafana Release Notes\nDESCRIPTION: YAML frontmatter configuration for Grafana 7.5.11 release notes documentation, specifying build settings and product labels.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-11.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.11\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik for Grafana on a Sub Path (Docker Provider) - YAML\nDESCRIPTION: Shows Docker label configuration for Traefik to route requests with a specific path prefix (/grafana) along with host-based matching. Designed for containers deployed with Docker or Docker Compose, attach these labels to the Grafana service. Requires Traefik to be up and running in Docker mode. Supports sub path routing for multi-tenant or multi-app scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\\n  traefik.http.routers.grafana.rule: Host(`example.com`) && PathPrefix(`/grafana`)\\n  traefik.http.services.grafana.loadbalancer.server.port: 3000\n```\n\n----------------------------------------\n\nTITLE: Defining Global User Scopes in Grafana RBAC\nDESCRIPTION: Specifies scopes to restrict actions to a set of global users (across all organizations). `global.users:*` matches any user, while `global.users:id:1` targets the specific user with ID 1.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nglobal.users:*\n```\n\nLANGUAGE: text\nCODE:\n```\nglobal.users:id:*\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Domain and Root URL in Grafana (INI, Bash Syntax)\nDESCRIPTION: Configures the Grafana server for operation behind an IIS reverse proxy under a custom subpath. Requires a \"custom.ini\" file in Grafana's conf directory. The [server] section sets the public domain (including subpath if relevant) and root_url to ensure Grafana generates correct links/resources under reverse proxy. Inputs: domain and root_url values. Outputs: Correct subpath operation for Grafana. Dependencies: None beyond standard Grafana installation. Restart Grafana after making these changes.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/iis/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[server]\ndomain = yourdomain.com:8080\nroot_url = %(protocol)s://%(domain)s/grafana/\n\n```\n\n----------------------------------------\n\nTITLE: Obtaining JWT Token for OAuth Admin\nDESCRIPTION: Curl command to obtain a JWT token for the OAuth admin user from Keycloak's token endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request POST \\\n  --url http://localhost:8087/realms/grafana/protocol/openid-connect/token \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data client_id=grafana-oauth \\\n  --data grant_type=password \\\n  --data client_secret=d17b9ea9-bcb1-43d2-b132-d339e55872a8 \\\n  --data scope=openid \\\n  --data username=oauth-admin \\\n  --data password=grafana\n```\n\n----------------------------------------\n\nTITLE: PGP Signed Message Structure for Grafana Plugin Manifest\nDESCRIPTION: This snippet shows the complete structure of a PGP signed message containing a Grafana plugin manifest. It starts with '-----BEGIN PGP SIGNED MESSAGE-----', includes the manifest JSON payload, and ends with the PGP signature block ('-----BEGIN PGP SIGNATURE-----' to '-----END PGP SIGNATURE-----'). The headers specify the hash algorithm used (SHA512) and the signature itself verifies the integrity and origin of the enclosed JSON manifest.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/app-with-child/dist/MANIFEST.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"rootUrls\": [],\n  \"plugin\": \"myorgid-simple-app\",\n  \"version\": \"%VERSION%\",\n  \"time\": 1642614241713,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"1abecfd0229814f6c284ff3c8dd744548f8d676ab3250cd7902c99dabf11480e\",\n    \"child/plugin.json\": \"66ba0dffaf3b1bfa17eb9a8672918fc66d1001f465b1061f4fc19c2f2c100f51\"\n  }\n}\n-----BEGIN PGP SIGNATURE-----\nVersion: OpenPGP.js v4.10.1\nComment: https://openpgpjs.org\n\nwqEEARMKAAYFAmHoTeEACgkQfk0ManCIZudvLwIJAQcy8NwEZZb58SuD9fhS\nkaWb9mxvhdAL6Zau+AZKQ3w2ZKzynwgKK/xwDSnX8BNI5UjcCh+0WxkpiAHL\nbm6/dhzdAgi7Mo/W5IyXqMt9/0AyyFNA1wVlLCj47C+4op4hIw054ZJ9u2j9\nKCVjajZ9bGaV6ucBnG5/l4MLFhUK1M0slI2qvw==\n=atro\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Showing Final Merged Result of 'Labels to Fields'\nDESCRIPTION: This Markdown table displays the final output after the merge step in the 'Labels to fields' transformation when applied to two series with non-overlapping labels (except Time). The transformation joins the intermediate tables on matching fields (Time).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/transform-data/index.md#2025-04-23_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\n| Time                | Server  | Value | Datacenter |\n| ------------------- | ------- | ----- | ---------- |\n| 2020-07-07 11:34:20 | ServerA | 10    |            |\n| 2020-07-07 11:34:20 |         | 20    | EU         |\n```\n\n----------------------------------------\n\nTITLE: User Search Response Example (json)\nDESCRIPTION: Shows a typical JSON array response from the user search API. Each object contains user information such as id, name, login, email, admin status, account status, recent activity, and authentication labels. This response format is expected from GET requests to /api/users or search endpoints.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"id\": 1,\\n    \"name\": \"Admin\",\\n    \"login\": \"admin\",\\n    \"email\": \"admin@mygraf.com\",\\n    \"isAdmin\": true,\\n    \"isDisabled\": false,\\n    \"lastSeenAt\": \"2020-04-10T20:29:27+03:00\",\\n    \"lastSeenAtAge\": \"2m\",\\n    \"authLabels\": [\"OAuth\"]\\n  },\\n  {\\n    \"id\": 2,\\n    \"name\": \"User\",\\n    \"login\": \"user\",\\n    \"email\": \"user@mygraf.com\",\\n    \"isAdmin\": false,\\n    \"isDisabled\": false,\\n    \"lastSeenAt\": \"2020-01-24T12:38:47+02:00\",\\n    \"lastSeenAtAge\": \"2M\",\\n    \"authLabels\": []\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Product Labels in YAML\nDESCRIPTION: YAML configuration block specifying build settings and product labels for Grafana release documentation. Defines build list parameter and product categories including cloud, enterprise, and open source versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-1-8.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 8.1.8\n```\n\n----------------------------------------\n\nTITLE: Listing Caddy TLS Certificates\nDESCRIPTION: This command lists the contents of the /etc/caddy directory in the Caddy TLS container, showing available certificates.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/caddy_tls/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec devenv-caddy_tls-1 ls /etc/caddy/\n```\n\n----------------------------------------\n\nTITLE: Listing Detailed Organization Users - JSON\nDESCRIPTION: This JSON snippet is the 200 OK response from querying organization users, returning an array of user objects with details such as orgId, userId, email, avatarUrl, login, role, and timestamps. Used for administrative overviews and audits.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"orgId\": 1,\\n    \"userId\": 1,\\n    \"email\": \"admin@localhost\",\\n    \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\",\\n    \"login\": \"admin\",\\n    \"role\": \"Admin\",\\n    \"lastSeenAt\": \"2019-08-09T11:02:49+02:00\",\\n    \"lastSeenAtAge\": \"< 1m\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Height - JSON\nDESCRIPTION: Assigns default viewport height for the rendering service using rendering.height, with value in pixels. Used only if the height parameter is missing from requests.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"height\": 500\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store Middleware\nDESCRIPTION: Adding the generated API middleware to the Redux store configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/api/README.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { dashboardAPI } from '<pathToYourAPI>';\nexport function configureStore(initialState?: Partial<StoreState>) {\n  const store = reduxConfigureStore({\n    reducer: createRootReducer(),\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({ thunk: true, serializableCheck: false, immutableCheck: false }).concat(\n        ...,\n        dashboardAPI.middleware\n      ),\n    ...,\n  });\n```\n\n----------------------------------------\n\nTITLE: Starting Grafana Using Make\nDESCRIPTION: This command starts Grafana using the make run command, which is typically used in development environments.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/aggregator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated SQLStore Handler in Go\nDESCRIPTION: Example showing how to register and implement a deprecated sqlstore handler for deleting dashboards. Uses the bus system for handler registration and inTransactionCtx for database operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    bus.AddHandlerCtx(\"sql\", DeleteDashboard)\n}\n\nfunc DeleteDashboard(ctx context.Context, cmd *models.DeleteDashboardCommand) error {\n    return inTransactionCtx(ctx, func(sess *DBSession) error {\n        _, err := sess.Exec(\"DELETE FROM dashboards WHERE dashboard_id=?\", cmd.DashboardID)\n        return err\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: kubectl Output Example - Playlist Created - Shell\nDESCRIPTION: This shell output shows the acknowledgment message upon successful creation of a Playlist resource via kubectl. The message includes the generated resource identity.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nplaylist.playlist.grafana.app/u394j4d3-s63j-2d74-g8hf-958773jtybf2 created\n```\n\n----------------------------------------\n\nTITLE: Using the Legend Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the `Legend` component in a JSX context. It shows importing `Forms` (though not directly used in the snippet itself, it implies the context of form elements) from `@grafana/ui` and rendering the `Legend` component with a variable `label` as its child. The component is intended to be used within a `FieldSet` to provide a caption.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Legend.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Forms } from '@grafana/ui';\n\n<Legend>{label}</Legend>;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component Constructor\nDESCRIPTION: Shows the proper way to implement a React component constructor with typed props.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nconstructor(props) {...}\n\n// good\nconstructor(props: Props) {...}\n```\n\n----------------------------------------\n\nTITLE: Testing Redux Thunks with thunkTester in TypeScript\nDESCRIPTION: Demonstrates how to test thunks using the thunkTester Fluent API. This example shows initializing the test with a thunk, dispatching it with arguments, and asserting on the resulting dispatched actions.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/redux.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst dispatchedActions = await thunkTester(initialState).givenThunk(someThunk).whenThunkIsDispatched(arg1, arg2, arg3);\n\nexpect(dispatchedActions).toEqual([someAction('reducer tests')]);\n```\n\n----------------------------------------\n\nTITLE: Apache Proxy Configuration for Grafana (Sub Path) - Bash\nDESCRIPTION: This setup forwards requests both for a specific sub-path (e.g., /your_path) and the root. The order is significant: lines with sub paths must precede those for the root for correct proxying. This configuration is designed for <VirtualHost> in Apache, targeting scenarios where Grafana is hosted under a URL sub path.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/run-grafana-behind-a-proxy/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n  ProxyPreserveHost on\\n  ProxyPass /your_path http://your_grafana_server:3000\\n  ProxyPassReverse /your_path http://your_grafana_server:3000\\n  ProxyPass / http://your_grafana_server:3000/your_path\\n  ProxyPassReverse / http://192.168.250.5:3000/your_path\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Heap Size Limit (Bash/Node.js)\nDESCRIPTION: Runs a short Node.js script via the command line (`node -e`) to retrieve and display the currently configured V8 JavaScript engine's heap size limit in megabytes (MB). This helps diagnose potential 'JavaScript heap out of memory' errors during tasks like `yarn start`. Requires Node.js to be installed.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnode -e 'console.log(v8.getHeapStatistics().heap_size_limit/(1024*1024))'\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables in Grafana Expressions\nDESCRIPTION: Demonstrates how to reference data from other queries or expressions using their RefID. A dollar sign prefix is used for simple RefIDs, while curly braces are needed for RefIDs containing spaces.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/query-transform-data/expression-queries/index.md#2025-04-23_snippet_0\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n$A\n```\n\nLANGUAGE: Grafana Expressions\nCODE:\n```\n${my variable}\n```\n\n----------------------------------------\n\nTITLE: Using the Grafana Icon Component (React/JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `Icon` component to render a specific icon ('check') by passing its name via the `name` prop. Although the snippet includes an import for `css` from `@emotion/css`, it's not directly used here but suggests that Emotion can be utilized for applying styles, such as setting the icon size via the `className` prop as mentioned in the accompanying text.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Icon/Icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from '@emotion/css';\n\n<Icon name=\"check\" />;\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Team-Owned Dependencies List - Plaintext\nDESCRIPTION: The snippet displays output from the Modowners 'modules' command when querying dependencies by owner. Each line contains a dependency referenced by name and version using the 'dependency@version' format. This information helps teams track their directly owned Go modules.\nSOURCE: https://github.com/grafana/grafana/blob/main/scripts/modowners/README.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.com/BurntSushi/toml@v1.2.1\\ngithub.com/go-ldap/ldap/v3@v3.4.4\\ngithub.com/magefile/mage@v1.14.0\\ngolang.org/x/oauth2@v0.8.0\\ngithub.com/drone/drone-cli@v1.6.1\\ngithub.com/google/go-github/v45@v45.2.0\\ngithub.com/Masterminds/semver/v3@v3.1.1\\ngopkg.in/square/go-jose.v2@v2.6.0\\nfilippo.io/age@v1.1.1\\ngithub.com/docker/docker@v23.0.4+incompatible\n```\n\n----------------------------------------\n\nTITLE: Initializing New Go Module\nDESCRIPTION: Commands for initializing a new Go module within the Grafana project structure. This creates the module with the correct GitHub path.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd pkg/your/new/module\ngo mod init github.com/grafana/grafana/pkg/your/new/module\n```\n\n----------------------------------------\n\nTITLE: Removing Developer Dashboards and Data Sources in Grafana\nDESCRIPTION: This bash command removes previously set up developer dashboards and data sources from Grafana by passing the 'undev' parameter to the setup script.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./setup.sh undev\n```\n\n----------------------------------------\n\nTITLE: Refactoring Query with Result Field in Go\nDESCRIPTION: Example showing how to refactor a query with a Result field that gets mutated to a method that returns the result directly. This improves code clarity and follows modern Go conventions.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GetQuery struct {\n  Something int\n\n  Result ResultType\n}\n\nfunc (s *Service) Get(ctx context.Context, cmd *GetQuery) error {\n  // ...do something\n  cmd.Result = result\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogQL LBAC Rule with Regex Matcher (Task 3)\nDESCRIPTION: Example LogQL query used as an LBAC rule for Team A in Task 3. This rule filters logs, granting access to data points matching `cluster=\\\"us-west-0\\\"` AND where the `namespace` label matches the regex `dev|prod` (i.e., namespace is either 'dev' or 'prod'). It demonstrates combining exact matchers with regex matchers.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/data-source-management/teamlbac/create-teamlbac-rules/index.md#2025-04-23_snippet_6\n\nLANGUAGE: logql\nCODE:\n```\n{cluster=\"us-west-0\", namespace=~\"dev|prod\"}\n```\n\n----------------------------------------\n\nTITLE: Updated Wire Injector with Custom Message in Go\nDESCRIPTION: Modifies the Wire injector function to accept a custom message phrase as an argument.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc InitializeEvent(phrase string) (Event, error) {\n    wire.Build(NewEvent, NewGreeter, NewMessage)\n    return Event{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenFGA CLI for Store and Model Operations - Bash\nDESCRIPTION: Demonstrates OpenFGA CLI usage to interact with the running Zanzana/Grafana server. Includes examples for listing stores, reading models, and listing tuples, which are typical authorization relationship operations. Dependencies: A live OpenFGA-compatible server (Zanzana) and the OpenFGA CLI must be installed. Expected input: none; commands are executed directly. Output: Information on current stores, models, and tuples for debugging or management purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/authz/zanzana/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List all stores\nfga store list\n\n# Other commands\nfga model read\nfga tuple list\n```\n\n----------------------------------------\n\nTITLE: Building Grafana Plugin Backend with Make (Shell)\nDESCRIPTION: This shell command uses the 'make' utility to execute the 'build-go' target defined in a Makefile. This target is responsible for compiling the Go language backend code for the Grafana plugin.\nSOURCE: https://github.com/grafana/grafana/blob/main/e2e/test-plugins/grafana-extensionstest-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake build-go\n```\n\n----------------------------------------\n\nTITLE: Basic Component Styling with Emotion in Grafana\nDESCRIPTION: Demonstrates how to use the useStyles2 hook to access theme values in component styles. The getStyles function receives the theme object and returns CSS definitions using Emotion's css function, with spacing utilities from the Grafana theme.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/styling.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nconst Foo = (props: FooProps) => {\n  const styles = useStyles2(getStyles);\n\n  // Use styles with classNames\n  return <div className={styles}>...</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) =>\n  css({\n    padding: theme.spacing(1, 2), // will result in 8px 16px padding\n  });\n```\n\n----------------------------------------\n\nTITLE: Selecting Default Rendering Mode - Bash\nDESCRIPTION: Sets the rendering mode to 'default' using an environment variable for the image renderer. In this mode, a new browser instance is launched for each rendering request, which can increase memory usage under high concurrency. Particularly recommended not to remove the default Chromium flag '--disable-gpu' for stability.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRENDERING_MODE=default\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook Component in JSX\nDESCRIPTION: Demonstrates how to set up the default export for a Storybook component file, including title, component reference, and decorators.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MyComponent from './MyComponent';\n\nexport default {\n  title: 'General/MyComponent',\n  component: MyComponent,\n  decorators: [ ... ],\n}\n```\n\n----------------------------------------\n\nTITLE: Confirmation of User Added to Organization - JSON\nDESCRIPTION: JSON object indicating a user has been successfully added to an organization. Contains a message and the userId of the created/added user. Returned after a successful POST.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"User added to organization\",\"userId\":1}\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title using Meta Component in MDX\nDESCRIPTION: This MDX snippet utilizes the `Meta` component (imported previously from `@storybook/blocks`) to define metadata for the documentation page. The `title` attribute sets the display name of the component's documentation in the Storybook sidebar, organizing it under the 'MDX' category with the name 'Slider'.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Slider/Slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Meta title=\"MDX|Slider\" />\n```\n\n----------------------------------------\n\nTITLE: Changing Directory using Shell\nDESCRIPTION: This shell command changes the current working directory to the 'tutorial-environment' directory, which was created by the previous 'git clone' command. This is necessary to access the files within the repository.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd tutorial-environment\n```\n\n----------------------------------------\n\nTITLE: Advanced JSX Example with Dynamic Selectors\nDESCRIPTION: JSX example showing a data source list with dynamic data-testid attributes based on item names.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ul>\n  {dataSources.map(({ id, name }) => (\n    <li className=\"card-item-wrapper\" key={id}>\n      <a className=\"card-item\" href={`datasources/edit/${id}`}>\n        <div className=\"card-item-name\">{name}</div>\n      </a>\n    </li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Label Settings in YAML\nDESCRIPTION: This YAML configuration sets build options and product labels for the release notes document. It disables list building and specifies that the content applies to cloud, enterprise, and open-source versions of Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-5-7.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: false\nlabels:\n  products:\n    - cloud\n    - enterprise\n    - oss\ntitle: Release notes for Grafana 7.5.7\n```\n\n----------------------------------------\n\nTITLE: Fixing TypeScript Error for CSS Property in Grafana UI\nDESCRIPTION: This code snippet addresses a TypeScript error where the 'css' property was missing in a type definition for Grafana UI components. It's part of a pull request to fix this issue in the plugin development environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-8-2-0-beta1.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Fix TS error property `css` is missing in type.\n```\n\n----------------------------------------\n\nTITLE: Defining and Signing a Grafana Plugin Manifest - JSON\nDESCRIPTION: This snippet presents a JSON manifest detailing the version, signing organization, plugin metadata, and sha256 checksums for each file in a Grafana plugin package. It is enclosed within a PGP signed message to provide authenticity and integrity; the manifest must be verified using the corresponding PGP signature block and an appropriate public key. Dependencies include Grafana plugin signing processes, and key parameters include file hash mappings and signature metadata. The input is the plugin's metadata and file hashes; the output is a verifiable manifest used by Grafana to trust and install plugins.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/test-app/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1621356785895,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"c59a51bf6d7ecd7a99608ccb99353390c8b973672a938a0247164324005c0caf\",\n    \"dashboards/connections.json\": \"bea86da4be970b98dc4681802ab55cdef3441dc3eb3c654cb207948d17b25303\",\n    \"dashboards/memory.json\": \"7c042464941084caa91d0a9a2f188b05315a9796308a652ccdee31ca4fbcbfee\",\n    \"dashboards/connections_result.json\": \"124d85c9c2e40214b83273f764574937a79909cfac3f925276fbb72543c224dc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating AWS KMS Encryption Provider in Grafana INI\nDESCRIPTION: Updates the main `[security]` section of the `grafana.ini` configuration file to enable the previously defined AWS KMS provider. The `encryption_provider` parameter is set to the custom provider key (`awskms.example-encryption-key`), and this key is also listed in `available_encryption_providers`. The legacy `secret_key` is kept for backward compatibility or as a default if external providers are not configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-aws-kms/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n   [security]\n   # previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured\n   secret_key = AaaaAaaa\n   # encryption provider key in the format <PROVIDER>.<KEY_NAME>\n   encryption_provider = awskms.example-encryption-key\n   # list of configured key providers, space separated\n   available_encryption_providers = awskms.example-encryption-key\n```\n\n----------------------------------------\n\nTITLE: Increasing Node.js Heap Size Limit (Windows Batch/PowerShell)\nDESCRIPTION: Sets the `NODE_OPTIONS` environment variable using the `Set` command in the Windows Command Prompt or PowerShell. It configures the `--max-old-space-size` flag to 8192, instructing Node.js processes launched from this session to use a maximum heap size of 8192 MB (8 GB). This helps resolve 'JavaScript heap out of memory' errors, with the change applying only to the current session.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_22\n\nLANGUAGE: batch\nCODE:\n```\nSet NODE_OPTIONS=\"--max-old-space-size=8192\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Contextual Logging in Go\nDESCRIPTION: Shows how to use a contextual logger to include additional key/value pairs attached to context.Context, such as a traceID. This allows correlating logs with traces or other common identifiers.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/instrumentation.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"context\"\n  \"fmt\"\n\n  \"github.com/grafana/grafana/pkg/infra/log\"\n)\n\nvar logger = log.New(\"my-logger\")\n\nfunc doSomething(ctx context.Context) {\n  ctxLogger := logger.FromContext(ctx)\n  ctxLogger.Debug(\"Debug msg\")\n  ctxLogger.Info(\"Info msg\")\n  ctxLogger.Warning(\"Warning msg\")\n  ctxLogger.Error(\"Error msg\", \"error\", fmt.Errorf(\"BOOM\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a comprehensive SQL data types demonstration table\nDESCRIPTION: SQL statements for creating and populating a table containing a wide variety of Microsoft SQL Server data types. This example shows the creation of a table with various data types and inserting a row with sample values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [mssql_types] (\n  c_bit bit, c_tinyint tinyint, c_smallint smallint, c_int int, c_bigint bigint, c_money money, c_smallmoney smallmoney, c_numeric numeric(10,5),\n  c_real real, c_decimal decimal(10,2), c_float float,\n  c_char char(10), c_varchar varchar(10), c_text text,\n  c_nchar nchar(12), c_nvarchar nvarchar(12), c_ntext ntext,\n  c_datetime datetime,  c_datetime2 datetime2, c_smalldatetime smalldatetime, c_date date, c_time time, c_datetimeoffset datetimeoffset\n)\n\nINSERT INTO [mssql_types]\nSELECT\n  1, 5, 20020, 980300, 1420070400, '$20000.15', '£2.15', 12345.12,\n  1.11, 2.22, 3.33,\n  'char10', 'varchar10', 'text',\n  N'☺nchar12☺', N'☺nvarchar12☺', N'☺text☺',\n  GETDATE(), CAST(GETDATE() AS DATETIME2), CAST(GETDATE() AS SMALLDATETIME), CAST(GETDATE() AS DATE), CAST(GETDATE() AS TIME), SWITCHOFFSET(CAST(GETDATE() AS DATETIMEOFFSET), '-07:00')\n```\n\n----------------------------------------\n\nTITLE: Wire Tool Error Message for Non-Provider Function Variables\nDESCRIPTION: This error message is displayed when the Wire dependency injection tool encounters a variable of function type that is being used as if it were a provider or provider set, which is not supported. The error includes the file location and the specific variable that caused the issue.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/FuncArgProvider/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: var fn func() *example.com/foo.Foo is not a provider or a provider set\n```\n\n----------------------------------------\n\nTITLE: Defining RouteExport Structure in Go\nDESCRIPTION: Defines the RouteExport structure, which is similar to Route but excludes certain fields for provisioning file format compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_48\n\nLANGUAGE: go\nCODE:\n```\n**Properties**\n\n| Name                  | Type                               | Go type             | Required | Default | Description                             | Example |\n| --------------------- | ---------------------------------- | ------------------- | :------: | ------- | --------------------------------------- | ------- |\n| `continue`            | boolean                            | `bool`              |          |         |                                         |         |\n| `group_by`            | []string                           | `[]string`          |          |         |                                         |         |\n| `group_interval`      | string                             | string              |          |         |                                         |         |\n| `group_wait`          | string                             | string              |          |         |                                         |         |\n| `match`               | map of string                      | `map[string]string` |          |         | Deprecated. Remove before v1.0 release. |         |\n| `match_re`            | [MatchRegexps](#match-regexps)     | `MatchRegexps`      |          |         |                                         |         |\n| `matchers`            | [Matchers](#matchers)              | `Matchers`          |          |         |                                         |         |\n| `mute_time_intervals` | []string                           | `[]string`          |          |         |                                         |         |\n| `object_matchers`     | [ObjectMatchers](#object-matchers) | `ObjectMatchers`    |          |         |                                         |         |\n| `receiver`            | string                             | string              |          |         |                                         |         |\n| `repeat_interval`     | string                             | string              |          |         |                                         |         |\n| `routes`              | [][RouteExport](#route-export)     | `[]*RouteExport`    |          |         |                                         |         |\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Root URL for Grafana Webhooks - YAML\nDESCRIPTION: This YAML snippet sets the 'root_url' parameter under the 'server' section of the Grafana configuration file, specifying the publicly accessible domain for the instance. This URL is required to allow webhook communication between GitHub and Grafana for real-time dashboard updates and pull request integrations. Ensure the server is accessible from the public internet via the specified domain, and modify 'PUBLIC_DOMAIN.HERE' to match your actual public DNS or proxy address.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/observability-as-code/provision-resources/git-sync-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[server]\\nroot_url = https://PUBLIC_DOMAIN.HERE\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page Representation for E2E Testing\nDESCRIPTION: TypeScript code demonstrating how to create a Page object for the login page with URL and selector definition.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Login = {\n  // Called via `Login.visit()`\n  url: '/login',\n  // Called via `Login.username()`\n  username: 'data-testid Username input field',\n};\n```\n\n----------------------------------------\n\nTITLE: Separating Firing and Resolved Alerts in Grafana Notification Templates - Go\nDESCRIPTION: This Go template defines 'custom.firing_and_resolved_alerts' to separate alerts by their status (firing or resolved), printing resolved alerts first and then firing alerts. Uses sub-template 'alert.summary_and_description' for consistent formatting. Requires '.Alerts.Firing' and '.Alerts.Resolved' in the notification data; output gives a clear summary per alert state.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.firing_and_resolved_alerts\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Formatting Alerts with Summaries and Descriptions in Grafana using Go Templates - Go\nDESCRIPTION: Defines two nested Go templates for Grafana: 'custom.alerts' computes the number of alerts and iterates over them, invoking the sub-template 'alert.summary_and_description', which displays the summary, status, and description from alert annotations. Requires the notification context to provide '.Alerts' and suitable annotations. Input is alert data; output is a formatted alert summary list.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"custom.alerts\" -}}\n{{ len .Alerts }} alert(s)\n{{ range .Alerts -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Query Alias with Grafana Variables\nDESCRIPTION: This snippet shows how to use Grafana's variable syntax in the 'Alias' field of the Query Editor. It dynamically sets the alias (legend label) for the query result using the value from the 'State' field of the selected source data row.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/explore/correlations-editor-in-explore.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n${State}\n```\n\n----------------------------------------\n\nTITLE: Grafana Plugin Manifest JSON Structure\nDESCRIPTION: JSON manifest file for a Grafana test plugin including version information, file hashes, and metadata. Contains manifest version, signature details, plugin identification, and cryptographic hashes of plugin files.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-valid-nested/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1726230803822,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"module.js\": \"266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a\",\n    \"plugin.json\": \"31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c\",\n    \"datasource/module.js\": \"04d70db091d96c4775fb32ba5a8f84cc22893eb43afdb649726661d4425c6711\",\n    \"datasource/plugin.json\": \"3fd712717a21617cc76f9043efcd43d4ebf5564dd155a28e4e3c736739f6931e\",\n    \"panels/one/module.js\": \"cbd1ac2284645a0e1e9a8722a729f5bcdd2b831222728709c6360beecdd6143f\",\n    \"panels/one/plugin.json\": \"b9b4556a7220ea77650ffd228da6d441e68df3405d50dab5773c10f4afae5ad3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Alert Notification Templates - Golang Templating - Go\nDESCRIPTION: This snippet defines a Go HTML template to generate alert notification messages for Grafana alerts. Dependencies include Go's text/template engine and provision of all referenced template variables from surrounding Go code (e.g., .Subject, .Title, .Error, .EvalMatches). Inputs are expected as a struct containing alert context such as titles, messages, states, metric values, URLs, and build version. Outputs are rendered notification messages for use in emails or alert channels; if the alert state or error conditions are present, it conditionally displays corresponding data sections. Variable interpolation and control flow are performed by Go's builtin template syntax; all original formatting and logic must be preserved for the template to function correctly.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/alert_notification.txt#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n{{HiddenSubject .Subject \"{{.Title}}\"}}\n\n{{.Title}}\n----------------\n\n{{.Message}}\n\n{{if ne .Error \"\" }}\nError message:\n{{.Error}}\n{{end}}\n\n{{if ne .State \"ok\" }}\n{{range .EvalMatches}}\nMetric name:\n{{.Metric}}\nValue:\n{{.Value}}\n{{end}}\n{{end}}\n\nView your Alert rule:\n{{.RuleUrl}}\"\n\nGo to the Alerts page:\n{{.AlertPageUrl}}\n\n\nSent by Grafana v{{.BuildVersion}} (c) {{now | date \"2006\"}} Grafana Labs\n```\n\n----------------------------------------\n\nTITLE: Database Migration Implementation in Go\nDESCRIPTION: Example of implementing database migrations in a service using the migrator framework to add new columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/database.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *MyService) AddMigration(mg *migrator.Migrator) {\n    // ...\n\n    mg.AddMigration(\"Add column age\", NewAddColumnMigration(table, &Column{\n        Name:     \"age\",\n        Type:     migrator.DB_BigInt,\n        Nullable: true,\n    }))\n}\n```\n\n----------------------------------------\n\nTITLE: Add User Role Assignment Request\nDESCRIPTION: POST request to assign a role to a user. Requires users.roles:add permission with permissions:type:delegate scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/access-control/users/1/roles\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"global\": false,\n    \"roleUid\": \"XvHQJq57z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Reports via HTTP PUT Request\nDESCRIPTION: Example of updating an existing report with new configuration including schedule, recipients, and dashboard settings.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/reporting.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /api/reports HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n\t\"name\": \"Updated Report\",\n\t\"recipients\": \"example-report@grafana.com\",\n\t\"replyTo\": \"\",\n\t\"message\": \"Hello, please, find the report attached\",\n\t\"schedule\": {\n\t\t\"frequency\": \"hourly\",\n\t\t\"timeZone\": \"Africa/Cairo\",\n\t\t\"workdaysOnly\": true,\n\t\t\"startDate\": \"2022-10-10T10:00:00+02:00\",\n\t\t\"endDate\": \"2022-11-20T19:00:00+02:00\"\n\t},\n\t\"options\": {\n\t\t\"orientation\": \"landscape\",\n\t\t\"layout\": \"grid\"\n\t},\n\t\"enableDashboardUrl\": true,\n\t\"state\": \"scheduled\",\n\t\"dashboards\": [\n\t\t{\n\t\t\t\"dashboard\": {\n\t\t\t\t\"id\": 463,\n\t\t\t\t\"uid\": \"7MeksYbmk\",\n\t\t\t\t\"name\": \"Alerting with TestData\"\n\t\t\t},\n\t\t\t\"timeRange\": {\n\t\t\t\t\"from\": \"2022-08-08T15:00:00+02:00\",\n\t\t\t\t\"to\": \"2022-09-02T17:00:00+02:00\"\n\t\t\t},\n\t\t\t\"reportVariables\": {\n\t\t\t\t\"variable1\": \"Value1\"\n\t\t\t}\n\t\t}\n\t],\n\t\"formats\": [\n\t\t\"pdf\",\n\t\t\"csv\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error When Modifying ulimit Fails (Text)\nDESCRIPTION: Displays a typical error message received when the `ulimit` command fails due to insufficient permissions, often because a lower hard limit is already in place (potentially set in shell initialization files like `~/.bashrc`). This indicates the user should check existing shell configurations for conflicting `ulimit` commands.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/developer-guide.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nulimit: open files: cannot modify limit: Operation not permitted\n```\n\n----------------------------------------\n\nTITLE: Using SecretInput in React with TypeScript\nDESCRIPTION: Demonstrates how to import and use the SecretInput component from the '@grafana/ui' package in a React (TypeScript/TSX) application. The snippet shows the SecretInput in use with key props: value (for the secret/pwd string), isConfigured (boolean to control input behavior), onChange (handler for input update), and onReset (handler for reset action). Assumes dependencies on React and @grafana/ui. The main inputs are the required props to control state and behavior; output is a password input element that may render differently based on configuration. Limitations: actual callback implementations are not provided.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/SecretInput/SecretInput.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {SecretInput} from '@grafana/ui';\n\n<SecretInput\n  value={...}\n  isConfigured={...}\n  onChange={...}\n  onReset={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Output of Alerts with Summary and Description in Grafana Templates - template_output\nDESCRIPTION: This is a sample output showing how two alerts would appear after running the 'custom.alerts' template. Outputs include alert count, each alert's summary, status, and description, formatted for notification display. Indicates typical real-world alert events.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/examples.md#2025-04-23_snippet_7\n\nLANGUAGE: template_output\nCODE:\n```\n2 alert(s)\n\n  Summary: The database server db1 has exceeded 75% of available disk space.\n  Status: firing\n  Description: This alert fires when a database server is at risk of running out of disk space. You should take measures to increase the maximum available disk space as soon as possible to avoid possible corruption.\n\n  Summary: The web server web1 has been responding to 5% of HTTP requests with 5xx errors for the last 5 minutes.\n  Status: resolved\n  Description: This alert fires when a web server responds with more 5xx errors than is expected. This could be an issue with the web server or a backend service.\n```\n\n----------------------------------------\n\nTITLE: Resetting Basic Role Permissions on Boot via Grafana rbac Section - Bash Config\nDESCRIPTION: This bash-formatted config snippet shows how to set the 'reset_basic_roles' option in the Grafana [rbac] config section, ensuring that basic role permissions are reset to defaults upon every instance boot. Dependencies: valid Grafana configuration file, and Grafana Enterprise 9.4+. Caution—permissions will reset each time Grafana restarts while this flag is enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[rbac]\nreset_basic_roles = true\n\n```\n\n----------------------------------------\n\nTITLE: Page Weight Configuration in YAML Front Matter\nDESCRIPTION: Example showing how to configure page weight and menu title in Hugo front matter for controlling page order and menu display text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nweight: 100\nmenuTitle: \"Custom Menu Text\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose with Specific Database Versions for Grafana\nDESCRIPTION: This Make command creates a docker-compose file with specific versions of databases (postgres 9.2) and Grafana (6.7.0-beta1) for development testing.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=postgres,auth/openldap,grafana postgres_version=9.2 grafana_version=6.7.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensu Go Contact Point - YAML\nDESCRIPTION: Sets up Sensu Go as a notification target for Grafana alert events. Requires Sensu Go API URL and API key. Optional entity, check, handler, namespace, and message fields can be provided to customize alert delivery within Sensu Go's monitoring ecosystem. Outputs custom Sensu events per Grafana alert.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ntype: sensugo\\nsettings:\\n  # <string, required>\\n  url: http://sensu-api.local:8080\\n  # <string, required>\\n  apikey: xxx\\n  # <string>\\n  entity: default\\n  # <string>\\n  check: default\\n  # <string>\\n  handler: some_handler\\n  # <string>\\n  namespace: default\\n  # <string>\\n  message: |\\n    {{ template \\\"default.message\\\" . }}\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Hashicorp Vault Provider in Grafana INI Security Section\nDESCRIPTION: This configuration snippet updates the `[security]` section of `grafana.ini` to enable a previously defined Hashicorp Vault provider. The `encryption_provider` key is set to the specific Vault provider key name (e.g., `hashicorpvault.example-encryption-key`), and this name is also added to the space-separated `available_encryption_providers` list. The original `secret_key` remains for backward compatibility.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/encrypt-secrets-using-hashicorp-key-vault/index.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n   ```\n   [security]\n   # previous encryption key, used for legacy alerts, decrypting existing secrets or used as default provider when external providers are not configured\n   secret_key = AaaaAaaa\n   # encryption provider key in the format <PROVIDER>.<KEY-NAME>\n   encryption_provider = hashicorpvault.example-encryption-key\n   # list of configured key providers, space separated\n   available_encryption_providers = hashicorpvault.example-encryption-key\n   ```\n```\n\n----------------------------------------\n\nTITLE: Including Shared Backup Documentation - Hugo Shortcode - Plaintext\nDESCRIPTION: This shortcode snippet includes backup instructions into the upgrade documentation by referencing the shared backup markdown file. The 'leveloffset' parameter adjusts heading levels for seamless integration into the current document structure. This technique facilitates consistent backup guidance for Grafana upgrades, ensuring users follow recommended procedures.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/upgrade-guide/upgrade-v8.4/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\\\"back-up/back-up-grafana.md\\\" source=\\\"grafana\\\" version=\\\"<GRAFANA VERSION>\\\" leveloffset=\\\"+1\\\" >}}\n```\n\n----------------------------------------\n\nTITLE: Deprecation Grace Period Table in Markdown\nDESCRIPTION: This table outlines the grace periods between announcing a deprecation and disabling the feature by default, categorized by the size of the feature. It provides examples for each size category.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/deprecation-policy.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Size   | Duration   | Example                                                          |\n| ------ | ---------- | ---------------------------------------------------------------- |\n| Large  | 1-2 years  | Classic alerting, scripted dashboards, AngularJS                 |\n| Medium | 6 months   | Supported database for Grafana's backend                         |\n| Small  | 1-3 months | Refresh OAuth access_token automatically using the refresh_token |\n```\n\n----------------------------------------\n\nTITLE: Custom Duration Load Test\nDESCRIPTION: Executes load test with a custom duration parameter\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/loadtest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./run.sh -d 10s\n```\n\n----------------------------------------\n\nTITLE: Annotating Factory Class with Examples and Public Release Tag - TypeScript\nDESCRIPTION: This snippet demonstrates how to document a TypeScript class using TSDoc, providing an overview, a usage example, and a release tag (@public) at the bottom. Dependencies include TypeScript and the TSDoc tooling. The DataFrameFactory class includes a create method and serves as a best-practice example for documenting both the purpose and intended usage in code comments. Inputs and outputs pertain to the class and DataFrame instances, respectively.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/code-comments.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Helps to create DataFrame objects and handle\n * the heavy lifting of creating a complex object.\n *\n * @example\n * ```typescript\n * const dataFrame = factory.create();\n * ```\n *\n * @public\n **/\nexport class DataFrameFactory {\n  create(): DataFrame {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Grafana Data Sources (Plaintext)\nDESCRIPTION: Defines the `datasources:create` permission action necessary to create new data sources in Grafana. This action does not list specific scope dependencies.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources:create`\n```\n\n----------------------------------------\n\nTITLE: Querying Annotations with Native Date/Time in SQL for Grafana\nDESCRIPTION: SQL query example demonstrating how to fetch Grafana annotations when the time column (`native_date_time`) uses a native SQL date/time data type. It aliases the column as `time`, uses `metric1` for `text`, and combines `metric1` and `metric2` for `tags`. The `$__timeFilter` macro is used to filter results according to the Grafana dashboard's time range. Assumes the existence of a `public.test_data` table with the specified columns.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/postgres/query-editor/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  native_date_time as time,\n  metric1 as text,\n  concat_ws(', ', metric1::text, metric2::text) as tags\nFROM\n  public.test_data\nWHERE\n  $__timeFilter(native_date_time)\n```\n\n----------------------------------------\n\nTITLE: Updated Wire Injector with Error Handling in Go\nDESCRIPTION: Modifies the Wire injector function to include an error in the return type.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc InitializeEvent() (Event, error) {\n    wire.Build(NewEvent, NewGreeter, NewMessage)\n    return Event{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Group By Time in Grafana for InfluxDB\nDESCRIPTION: The `group by time` clause in InfluxDB queries aggregated data over time intervals, crucial for performance in Grafana. If left empty, Grafana auto-calculates it. When using `fill(0)` or `fill(null)`, set a low limit for the auto interval (e.g., `60s` if data is written every 60 seconds) via the Grafana query editor's 'group by time' option below the query.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/influxdb/query_help.md#2025-04-23_snippet_2\n\nLANGUAGE: influxql\nCODE:\n```\nfill(0)\n```\n\nLANGUAGE: influxql\nCODE:\n```\nfill(null)\n```\n\nLANGUAGE: influxql\nCODE:\n```\ngroup by time ... 60s\n```\n\n----------------------------------------\n\nTITLE: Adding Module Replace Directive\nDESCRIPTION: Go module replace directive for temporary local development before the module is published to the main branch.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/manage-go-module.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// In your module's go.mod\nreplace github.com/grafana/grafana/pkg/<my-module> => ../../../<my-module>\n```\n\n----------------------------------------\n\nTITLE: Defining Sample CSV Data for Grafana TestData Source\nDESCRIPTION: Provides sample comma-separated value (CSV) data representing simulated web traffic views for different devices (desktop, mobile). This data is intended to be used with the Grafana TestData data source (CSV Content scenario) to generate multiple time series, enabling the testing of alert rules and notification policies that route based on labels like 'device'.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt2/index.md#2025-04-23_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\ndevice,views\ndesktop,1200\nmobile,900\n```\n\n----------------------------------------\n\nTITLE: Documenting and Introducing the CodeEditor Component - MDX\nDESCRIPTION: This simple MDX snippet introduces the CodeEditor and provides a short description. It is meant to appear in the rendered Storybook documentation, giving users a brief overview. There are no functional dependencies, but it should follow the Storybook documentation conventions.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Monaco/CodeEditor.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n# CodeEditor\n\nMonaco Code editor\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Library Elements Request Example (HTTP)\nDESCRIPTION: Example HTTP GET request to fetch the first 10 library elements from the Grafana API using the `/api/library-elements` endpoint. The `perPage` query parameter limits the results. Requires authentication via a Bearer token in the `Authorization` header.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/library-elements?perPage=10 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Linking MDX Documentation to Component Stories in TypeScript\nDESCRIPTION: Demonstrates how to connect an MDX file to a component's stories for documentation purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabsBar } from './TabsBar';\n\nimport mdx from './TabsBar.mdx';\n\nexport default {\n  title: 'General/Tabs/TabsBar',\n  component: TabsBar,\n  parameters: {\n    docs: {\n      page: mdx,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating scrollTop Control to ScrollContainer using refs in React (TypeScript)\nDESCRIPTION: This snippet illustrates the recommended approach to scrolling in the new ScrollContainer component using refs. It creates a reference to a DOM element, and on scrollTop state changes, scrolls the ScrollContainer to the new offset programmatically in a useEffect. Required dependencies are React, useRef, useEffect, and the ScrollContainer component. The ref is passed to the container component, which must attach to a scrollable DOM element. This pattern is more idiomatic in React and leverages native scroll APIs.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ScrollContainer/ScrollContainer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst [scrollTop, setScrollTop] = useState(0);\nconst scrollRef = useRef<HTMLDivElement>(null);\n\nuseEffect(() => {\n  scrollRef.current?.scrollTo(0, scrollTop);\n}, [scrollTop]);\n\nreturn <ScrollContainer ref={scrollRef}>// Your amazing scrolling content</ScrollContainer>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Options in RadioButtonGroup in React (JSX)\nDESCRIPTION: This code sequence demonstrates defining a list of options and a corresponding set of disabled options for use with the RadioButtonGroup component. It shows how to pass both enabled and disabled options when rendering RadioButtonGroup, using the disabledOptions prop to prevent certain selections. Required: options array with label/value pairs, array of option values to disable, and handlers for value and change. Only the specified options in disabledOptions are disabled for selection.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/RadioButtonGroup/RadioButtonGroup.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n  { label: 'Prometheus', value: 'prometheus' },\n  { label: 'Graphite', value: 'graphite' },\n  { label: 'Elastic', value: 'elastic' },\n  { label: 'InfluxDB', value: 'influx' },\n];\n\nconst disabledOptions = ['prometheus', 'elastic'];\n\n\n<RadioButtonGroup\n  options={options}\n  disabledOptions={disabledOptions}\n  value={...}\n  onChange={...}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing TabsBar Components in JavaScript\nDESCRIPTION: This snippet shows the import statements for the TabsBar-related components. It imports ArgTypes from Storybook, and the Counter and Tab components from their respective files.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tabs/TabsBar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ArgTypes } from '@storybook/blocks';\nimport { Counter } from './Counter';\nimport { Tab } from './Tab';\n```\n\n----------------------------------------\n\nTITLE: Configuring DNSMasq for Local Domain Resolution\nDESCRIPTION: Commands to install and configure dnsmasq for resolving .loc domains to localhost\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha-test-unified-alerting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install dnsmasq\n$ echo 'address=/loc/127.0.0.1' | sudo tee /etc/dnsmasq.d/dnsmasq-loc.conf > /dev/null\n$ sudo /etc/init.d/dnsmasq restart\n$ ping whatever.loc\nPING whatever.loc (127.0.0.1) 56(84) bytes of data.\n64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.076 ms\n--- whatever.loc ping statistics ---\n1 packet transmitted, 1 received, 0% packet loss, time 1998ms\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Authentication in Grafana\nDESCRIPTION: Configuration snippet for enabling and setting up OAuth authentication in Grafana's custom.ini file. It includes settings for Keycloak integration, scopes, attribute mappings, and role assignments.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auth.generic_oauth]\nenabled = true\nname = Keycloak-OAuth\nallow_sign_up = true\nclient_id = grafana-oauth\nclient_secret = d17b9ea9-bcb1-43d2-b132-d339e55872a8\nscopes = openid email profile offline_access roles\nemail_attribute_path = email\nlogin_attribute_path = username\nname_attribute_path = full_name\ngroups_attribute_path = groups\nauth_url = http://localhost:8087/realms/grafana/protocol/openid-connect/auth\ntoken_url = http://localhost:8087/realms/grafana/protocol/openid-connect/token\nrole_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\nallow_assign_grafana_admin = true\nsignout_redirect_url = http://localhost:8087/realms/grafana/protocol/openid-connect/logout?post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin\n```\n\n----------------------------------------\n\nTITLE: Wire Error: Missing Provider for Indirect Dependency (Foo)\nDESCRIPTION: This error message from Wire signifies a missing provider for the type 'example.com/foo.Foo'. This type is required as an input dependency by the type 'example.com/foo.Baz', which itself is constructed by the provider function 'provideBaz' (located in 'example.com/foo/foo.go'). This specific error occurred while processing the injector function 'injectMultipleMissingTypes' in 'example.com/foo/wire.go'. A provider for 'Foo' must be available to the Wire set.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/MultipleMissingInputs/want/wire_errs.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nexample.com/foo/wire.go:x:y: inject injectMultipleMissingTypes: no provider found for example.com/foo.Foo\nneeded by example.com/foo.Baz in provider \"provideBaz\" (example.com/foo/foo.go:x:y)\n```\n\n----------------------------------------\n\nTITLE: Filtering Variable Options with Regex to Match End Patterns\nDESCRIPTION: A regular expression that filters variable options to only include those ending with '01' or '02'. This can be used in the Regex field of variable configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/add-template-variables/index.md#2025-04-23_snippet_9\n\nLANGUAGE: regex\nCODE:\n```\n/(01|02)$/\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Commands to start services and check for errors in the logs\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/ha_test/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n$ docker-compose logs | grep error\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Element Connections Response Example (HTTP/JSON)\nDESCRIPTION: Example HTTP 200 OK response for the 'Get library element connections' request. The JSON body contains an array of connection objects within the `result` field, detailing where the specified library element is used (e.g., dashboard UIDs).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/library_element.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"result\": [\n        {\n            \"id\": 148,\n            \"kind\": 1,\n            \"elementId\": 25,\n            \"connectionId\": 527,\n            \"connectionUid\": \"dHEquNzGz\",\n            \"created\": \"2021-09-27T10:00:07+02:00\",\n            \"createdBy\": {\n                \"id\": 1,\n                \"name\": \"admin\",\n                \"avatarUrl\": \"/avatar/46d229b033af06a191ff2267bca9ae56\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data for Memory Usage Simulation in Grafana\nDESCRIPTION: This CSV data represents simulated memory usage metrics across different regions, services, and instances. It's intended to be used as input for a Grafana data source or alert rule configuration, specifically for the 'High Memory usage - Multi-region' rule mentioned in the text, to demonstrate alert triggering based on this data.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/alerting-get-started-pt3/index.md#2025-04-23_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\nregion,memory-usage,service,instance\nus-west,42,cache-server-1,server-09\nus-west,88,cache-server-1,server-10\nus-east,74,api-server-1,server-11\nus-east,90,api-server-1,server-12\nus-west,53,analytics-server-1,server-13\nus-east,81,analytics-server-2,server-14\nus-west,77,analytics-server-1,server-15\nus-east,94,analytics-server-2,server-16\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Storybook and PanelContainer (JavaScript/TypeScript)\nDESCRIPTION: This snippet imports the Meta utility from Storybook's block library and the PanelContainer component from a local file. The Meta import enables Storybook metadata setup, while PanelContainer is the main subject being documented or previewed. These imports are prerequisites for integrating the PanelContainer component into the Storybook environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/PanelContainer/PanelContainer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport { PanelContainer } from './PanelContainer';\n```\n\n----------------------------------------\n\nTITLE: Implementing OrgRolePicker Component in Grafana\nDESCRIPTION: Implementation of the OrgRolePicker component that wraps the Select component with organization role options. It demonstrates how to create a reusable select component with custom options and proper accessibility attributes.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst options = Object.keys(OrgRole).map((key) => ({ label: key, value: key }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value as OrgRole)}\n      placeholder=\"Choose role...\"\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring GitHub Notification Labels in Gmail (Markdown)\nDESCRIPTION: This Markdown code snippet illustrates a hierarchy of labels for Gmail to organize GitHub notifications. The structure distinguishes between actionable (mine) and non-actionable (other) notifications, with sub-labels for activity, assignment, and mentions, enhancing workflow clarity. Users are expected to create these labels manually or import them using Gmail's filter import feature; inputs are processed notification emails, and the output is a labeled inbox structure.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/ISSUE_TRIAGE.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n - Inbox\n ...\n - GitHub (mine)\n   - activity\n   - assigned\n   - mentions\n - GitHub (other)\n  - Grafana\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Generic OAuth Login via Grafana Configuration (Bash)\nDESCRIPTION: Configures Grafana to automatically attempt login using a specific generic OAuth provider by setting `auto_login` to `true` within the `[auth.generic_oauth]` section of the configuration file. This bypasses the standard login page but is only effective if it's the sole provider configured for automatic login; the setting is ignored if multiple providers have `auto_login` enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n[auth.generic_oauth]\nauto_login = true\n```\n\n----------------------------------------\n\nTITLE: Setting Presence Indicator Timeframe in Grafana (INI)\nDESCRIPTION: This INI configuration snippet sets the time window considered 'recent' for displaying user avatars in the dashboard presence indicator. The `recent_users_age` parameter under the `[analytics.views]` section defines this duration (e.g., '10m' for 10 minutes). This configuration needs to be added to the Grafana configuration file and requires Grafana Enterprise or Cloud.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/assess-dashboard-usage/index.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n```ini\n[analytics.views]\n\n# Set age for recent active users to 10 minutes\nrecent_users_age = 10m\n```\n```\n\n----------------------------------------\n\nTITLE: Disk I/O Metrics in Prometheus Format\nDESCRIPTION: Disk I/O statistics for devices nvme0n1, dm-0, dm-1, and dm-2, including reads, writes, merges, and timing metrics. Each metric includes detailed counters and timestamps.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/incomplete_fields_full.txt#2025-04-23_snippet_1\n\nLANGUAGE: prometheus\nCODE:\n```\nnode_disk,device=nvme0n1 reads_completed_total=1.3411377179449652e-304 1625842606119336434\nnode_disk,device=dm-0 reads_completed_total=2.1994805592372739e-304 1625842606119375842\nnode_disk,device=dm-1 reads_completed_total=2.1922059384353575e-304 1625842606119395462\n```\n\n----------------------------------------\n\nTITLE: Rotating Data Keys using Grafana Admin API\nDESCRIPTION: Triggers the rotation of data encryption keys via the Grafana Admin API endpoint `/encryption/rotate-data-keys`. This disables the currently active data key for encryption, forcing a new key to be generated on demand for subsequent encryption operations. Note that this does not re-encrypt secrets already encrypted with the rotated key. It is recommended to perform this action during maintenance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-database-encryption/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n/encryption/rotate-data-keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Audit Logging\nDESCRIPTION: This snippet shows the main configuration options for enabling and customizing audit logging in Grafana. It includes settings for enabling the feature, specifying loggers, and controlling log content and verbosity.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/audit-grafana.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[auditing]\n# Enable the auditing feature\nenabled = false\n# List of enabled loggers\nloggers = file\n# Keep dashboard content in the logs (request or response fields); this can significantly increase the size of your logs.\nlog_dashboard_content = false\n# Keep requests and responses body; this can significantly increase the size of your logs.\nverbose = false\n# Write an audit log for every status code.\n# By default it only logs the following ones: 2XX, 3XX, 401, 403 and 500.\nlog_all_status_codes = false\n# Maximum response body (in bytes) to be audited; 500KiB by default.\n# May help reducing the memory footprint caused by auditing.\nmax_response_size_bytes = 512000\n```\n\n----------------------------------------\n\nTITLE: Inserting User Name with Go Template Variable\nDESCRIPTION: This snippet uses the Go template syntax `[[.Name]]` to dynamically insert the recipient's name into the email body. It acts as a placeholder that gets replaced by the value of the `Name` field from the data object provided during template rendering, personalizing the welcome message.\nSOURCE: https://github.com/grafana/grafana/blob/main/emails/templates/welcome_on_signup.txt#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n[[.Name]]\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Plugin Directory for Installation (Bash)\nDESCRIPTION: Demonstrates how to use the '--pluginsDir' global option to specify a non-default directory for installing a Grafana plugin. The command installs '<plugin-id>' into the specified '/var/lib/grafana/devplugins' directory instead of the default one.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrafana cli --pluginsDir \\\"/var/lib/grafana/devplugins\\\" plugins install <plugin-id>\n```\n\n----------------------------------------\n\nTITLE: Displaying Grafana Build Version in Go Template\nDESCRIPTION: This Go template snippet inserts the Grafana build version (`.BuildVersion`) from the context data into the email footer. This indicates which version of Grafana generated the invitation email. Requires the Go templating engine and the `.BuildVersion` variable in the context.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_4\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{.BuildVersion}}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Authentication in Grafana\nDESCRIPTION: SAML configuration settings for Grafana including certificate paths, IdP metadata URL, and attribute mappings for Authentik integration.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/authentik/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[auth.saml]\nenabled = true\ncertificate_path = devenv/docker/blocks/auth/authentik/cert.crt\nprivate_key_path = devenv/docker/blocks/auth/authentik/key.pem\nidp_metadata_url = http://localhost:9000/api/v3/providers/saml/2/metadata/?download\nassertion_attribute_name = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\nassertion_attribute_login = http://schemas.goauthentik.io/2021/02/saml/username\nassertion_attribute_email = http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\nassertion_attribute_groups = http://schemas.xmlsoap.org/claims/Group\nassertion_attribute_org = http://schemas.xmlsoap.org/claims/Group\nallow_sign_up = true\nsingle_logout = true # supported by authentik v2023.1 and newer\nsignature_algorithm = rsa-sha256\nallow_idp_initiated = true\norg_mapping = admin:1:Admin, editor:1:Editor, viewer:1:Viewer\n```\n\n----------------------------------------\n\nTITLE: Documentation Alias Example in YAML Front Matter\nDESCRIPTION: Example showing how to set up page aliases in Hugo front matter for proper URL redirects when moving or removing pages.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n  - /old/page/location\n  - /another/old/location\n```\n\n----------------------------------------\n\nTITLE: Searching Teams with GraphQL HTTP API - HTTP\nDESCRIPTION: Demonstrates how to perform a paginated and filtered search for teams using the Grafana HTTP API. Requires valid Bearer token authentication and may include optional query parameters for fine-tuned searches. Returns a paged JSON list of teams matching filter criteria.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/teams/search?perpage=10&page=1&query=mytestteam HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Email Lookup via Grafana Configuration (Bash)\nDESCRIPTION: Demonstrates how to enable email-based user lookup for OAuth authentication within the Grafana configuration file by setting `oauth_allow_insecure_email_lookup` to `true` under the `[auth]` section. This overrides the default behavior of using the IdP's unique ID but carries potential security implications and is generally discouraged.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n[auth]\noauth_allow_insecure_email_lookup = true\n```\n\n----------------------------------------\n\nTITLE: Creating a dashboard using Service Account token in Grafana\nDESCRIPTION: This command demonstrates how to create a new dashboard using the Service Account token. It includes a sample dashboard JSON and uses bearer token authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/examples/create-api-tokens-for-org.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --insecure -H \"Authorization: Bearer eyJrIjoiR0ZXZmt1UFc0OEpIOGN5RWdUalBJTllUTk83VlhtVGwiLCJuIjoiYXBpa2V5Y3VybCIsImlkIjo2fQ==\" -H \"Content-Type: application/json\" -d '{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Production Overview\",\n    \"tags\": [ \"templated\" ],\n    \"timezone\": \"browser\",\n    \"rows\": [\n      {\n      }\n    ],\n    \"schemaVersion\": 6,\n    \"version\": 0\n  },\n  \"overwrite\": false\n}' http://localhost:3000/api/dashboards/db\n```\n\n----------------------------------------\n\nTITLE: Copying Provisioning Resources to Grafana Pod - kubectl Bash\nDESCRIPTION: Uses 'kubectl cp' to copy a local 'alerting' directory (containing provisioning files) to the '/etc/grafana/provisioning/' directory in the Grafana pod. This is necessary when adding new provisioning resources after initial pod creation. Replace <pod_name> and namespace appropriately; run before restarting and reloading resources.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cp alerting my-grafana/<pod_name>:/etc/grafana/provisioning/\n\n```\n\n----------------------------------------\n\nTITLE: Changing Ownership of Grafana Directory using Shell\nDESCRIPTION: Recursively changes the owner and group of the Grafana installation directory (`/usr/local/grafana`) to the `grafana` user and `users` group using the `chown` command. Requires `sudo` privileges. This ensures the Grafana process has the necessary permissions to operate within its directory, especially after manual binary installation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R grafana:users /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Displaying Field Errors with Form and Field Components (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to visually indicate form validation errors by using the errors object from react-hook-form. Wraps an input in a Field component and passes invalid and error props based on validation outcomes. This improves UX by connecting validation state to field presentation, requiring compatible Field and Input components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/Form.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"Name\" invalid={!!errors.name} error=\"Name is required\">\n  <Input {...register('name', { required: true })} />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Inputs with FieldArray in Grafana UI (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to use the deprecated `FieldArray` component from `@grafana/ui` within a `Form`. It shows how to map over the `fields` array (provided by the render prop) to render `Input` components for each item and how to use the `append` function (also from the render prop) with a `Button` to add new items to the array. It utilizes `control` and `register` from `react-hook-form`, passed down by the parent `Form` component.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Forms/FieldArray.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Form, FieldArray } from '@grafana/ui';\n\n<Form onSubmit={() => console.log('form submitted')}>\n  ({control, register}) => (\n    <FieldArray control={control} name=\"People\">\n      {({ fields, append }) => (\n          <div>\n              {fields.map((field, index) => (\n                  <div key={field.id}>\n                      <Input key={index} {...register(`people[${index}].firstName` as const)} value={field.firstName} />\n                      <Input {...register(`people[${index}].lastName` as const)} value={field.lastName} />\n                  </div>\n              ))}\n              <Button onClick={() => append({firstName: 'Roger', lastName: 'Waters'})}>Append</Button>\n          </div>\n      )}\n    </FieldArray>\n  )\n</Form>;\n```\n\n----------------------------------------\n\nTITLE: Migrating from Knobs to Controls in TypeScript\nDESCRIPTION: Provides an example of how to migrate a story from using Knobs to using Controls for interacting with component properties.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/storybook.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Story } from '@storybook/react';\nimport { Props } from './Component';\n\nexport const Simple: Story<Props> = ({ prop1, prop2 }) => {\n  return <Component prop1={prop1} prop2={prop2} />;\n};\n\nSimple.args = {\n  prop1: 'Example text',\n  prop2: 'option 1',\n};\n\nexport default {\n  title: 'Component/Component',\n  component: Component,\n  argTypes: {\n    prop2: { control: { type: 'select', options: ['option1', 'option2'] } },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Support Bundle Collector with Custom Collection Logic in Go\nDESCRIPTION: This Go snippet implements a support bundle collector by defining a method on the UsageStats type that returns a configured supportbundles.Collector struct. The collector includes metadata for UI display as well as a function (Fn) that generates a JSON report file using usage stats, handling errors, and returns a supportbundles.SupportItem. Dependencies include context, encoding/json, and the service's own GetUsageReport method. Main inputs are the service context, outputs include a JSON file containing usage stats. The collector is configurable for inclusion defaults, and file constraints are minimal (any file extension possible).\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/support-bundles.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (uss *UsageStats) supportBundleCollector() supportbundles.Collector {\n\treturn supportbundles.Collector{\n\t\tUID:               \"usage-stats\", // Unique ID for the collector\n\t\tDisplayName:       \"Usage statistics\", // Display name for the collector in the UI\n\t\tDescription:       \"Usage statistics of the Grafana instance\", // Description for the collector in the UI\n\t\tIncludedByDefault: false, // Indicates whether the collector is included by default in the support bundle and can't be deselected. Usually you want this to be false.\n\t\tDefault:           false, // Indicates whether the collector is selected by default in the support bundle. User can still deselect it.\n\t\t// Function that will actually collect the file during the support bundle generation.\n\t\tFn: func(ctx context.Context) (*supportbundles.SupportItem, error) {\n\t\t\t// Add your service's logic to collect the information you need\n\t\t\t// In this example we collect the usage stats and place them appropriately in JSON\n\t\t\t// This helps us get information about the usage of the Grafana instance\n\t\t\treport, err := uss.GetUsageReport(context.Background())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tdata, err := json.Marshal(report)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\treturn &supportbundles.SupportItem{\n\t\t\t\t// Filename of the file in the archive\n\t\t\t\t// Can be any extension (most commonly, .json and .md).\n\t\t\t\tFilename:  \"usage-stats.json\",\n\t\t\t\tFileBytes: data, // []byte of the file\n\t\t\t}, nil\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Grafana Admin Role via Keycloak (INI)\nDESCRIPTION: Grafana configuration example for allowing specific Keycloak roles (e.g., `grafanaadmin`) to grant Grafana server administrator privileges. It modifies the `role_attribute_path` to map the designated role to Grafana's `GrafanaAdmin` role and requires setting `allow_assign_grafana_admin = true`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/keycloak/index.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = contains(roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'\nallow_assign_grafana_admin = true\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap from Grafana Configuration (Bash)\nDESCRIPTION: This command uses `kubectl` to create a Kubernetes ConfigMap named `ge-config`. The ConfigMap's data is sourced directly from the `grafana.ini` file located at the specified path (`/path/to/your/grafana.ini`). This makes the Grafana configuration available to the Grafana pod within the Kubernetes cluster. Requires `kubectl` installed and configured.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/kubernetes/index.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nkubectl create configmap ge-config --from-file=/path/to/your/grafana.ini\n```\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarButtonRow with Multiple Button Types in JSX\nDESCRIPTION: This example demonstrates how to use the ToolbarButtonRow component with various button configurations, including a text button, a button group, and an icon button. It shows how to set different variants and properties for each button within the row.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/ToolbarButton/ToolbarButtonRow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolbarButtonRow>\n  <ToolbarButton variant=\"default\" iconOnly={false} isOpen={false}>\n    Last 6 hours\n  </ToolbarButton>\n  <ButtonGroup>\n    <ToolbarButton icon=\"search-minus\" variant=\"default\" />\n    <ToolbarButton icon=\"search-plus\" variant=\"default\" />\n  </ButtonGroup>\n  <ToolbarButton icon=\"sync\" isOpen={false} variant=\"primary\" />\n</ToolbarButtonRow>\n```\n\n----------------------------------------\n\nTITLE: Integrating AutoSizeInput with Field Component in React JSX Forms\nDESCRIPTION: This example shows how to wrap an `AutoSizeInput` within a `Field` component to leverage form features like labels and descriptions. The `AutoSizeInput` is given a `name` attribute (\"importantInput\") and marked as `required` for form validation. This pattern requires both the `Field` and `AutoSizeInput` components.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Input/AutoSizeInput.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Field label=\"Important information\" description=\"This information is very important, so you really need to fill it in\">\n  <AutoSizeInput name=\"importantInput\" required />\n</Field>\n```\n\n----------------------------------------\n\nTITLE: Pushing the Release Branch and Tag using Git\nDESCRIPTION: Pushes the local 'release-0.1.x' branch and the newly created annotated tag ('v0.1.0') to the remote Git repository named 'origin'. The '--set-upstream' option links the local branch to the remote branch for future pushes/pulls, and '--follow-tags' ensures tags pointing to the pushed commits are also sent.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/publish-your-plugin.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream origin release-0.1.x --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Building the Grafana Plugin in Development Mode (Shell)\nDESCRIPTION: Runs the development build script defined in the plugin's `package.json` (usually aliased to `yarn dev`). This typically involves compiling TypeScript/JavaScript, bundling assets using webpack, and watching for file changes for automatic rebuilding. Requires dependencies to be installed via `yarn install`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/tutorials/create-plugin.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Hour Selection in Flux to Filter Data by Time of Day\nDESCRIPTION: This Flux code snippet demonstrates the hourSelection function, which filters data to include only readings from a specific time range during the day. This is useful for excluding periods like overnight shutdowns from alerting conditions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/tutorials/create-alerts-from-flux-queries/index.md#2025-04-23_snippet_8\n\nLANGUAGE: flux\nCODE:\n```\n|> hourSelection(start: 7, stop: 23)\n```\n\n----------------------------------------\n\nTITLE: Button with aria-label for Accessibility\nDESCRIPTION: Example of a button with aria-label to provide context for screen readers.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button aria-label=\"close\">X<button>\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Fetching Mute Timing - HTTP\nDESCRIPTION: Specifies the HTTP GET endpoint to retrieve a specific mute timing configuration within Grafana by its unique name (provided as a path parameter). The endpoint is used to obtain detailed configuration for suppression periods or alert muting schedules, requiring a valid name for lookup.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nGET /api/v1/provisioning/mute-timings/:name\n```\n\n----------------------------------------\n\nTITLE: Starting a List using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode initiates a list structure (likely ordered or unordered) within the rendered Grafana documentation page. It's part of the Hugo templating system used for structuring content.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-org-list-and-edit.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/list >}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Collections with Namespaced Functions in Grafana Go Templates\nDESCRIPTION: This example demonstrates use of namespaced collection utilities (coll.Dict, coll.Slice, coll.Append) to create dictionaries, build lists, and append new elements in Go templates. The snippet outlines dependency on coll namespace functions, available in suitable Grafana versions. Key parameters are dictionary keys/values and list items. Inputs and outputs include complex data structures for use in template logic such as loops and range operations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/configure-notifications/template-notifications/reference.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{{ define \"collection.example\" }}\n{{- /* Create a dictionary of alert metadata */ -}}\n{{- $metadata := coll.Dict\n    \"severity\" \"critical\"\n    \"team\" \"infrastructure\"\n    \"environment\" \"production\"\n-}}\n\n{{- /* Create a slice of affected services */ -}}\n{{- $services := coll.Slice \"database\" \"cache\" \"api\" -}}\n\n{{- /* Append a new service to the list */ -}}\n{{- $services = coll.Append \"web\" $services -}}\n\n{{- /* Use the collections in a template */ -}}\nAffected Services: {{ range $services }}{{ . }},{{ end }}\n\nAlert Metadata:\n{{- range $k, $v := $metadata }}\n  {{ $k }}: {{ $v }}\n{{- end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Component Dependencies in TypeScript\nDESCRIPTION: Imports the `Meta` and `ArgTypes` components from `@storybook/blocks` for creating Storybook MDX documentation, and imports the `Space` component from its local file './Space' to be documented.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Layout/Space.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta, ArgTypes } from '@storybook/blocks';\nimport { Space } from './Space';\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage Between Series with asPercent() in Graphite\nDESCRIPTION: The `asPercent()` Graphite function calculates one series as a percentage of another (or a total). This example demonstrates its use with Grafana's query referencing, taking the results of query `#A` and query `#B` as input parameters to compute the percentage relationship between them.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/graphite/query_help.md#2025-04-23_snippet_4\n\nLANGUAGE: Graphite Query Language\nCODE:\n```\nasPercent(#A, #B)\n```\n\n----------------------------------------\n\nTITLE: Tagging Translation Team in Crowdin Comments\nDESCRIPTION: This snippet shows the specific tag (`@Translated`) to use when adding comments or feedback to translations within the Grafana OSS project on Crowdin. Using this tag ensures that the team responsible for linguistics and translations is notified about the feedback submitted in the 'Comments' section for a specific string.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n@Translated\n```\n\n----------------------------------------\n\nTITLE: Backing Up Keycloak Database\nDESCRIPTION: Command to dump the Keycloak database for backup purposes in the Grafana development environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/jwt_proxy/readme.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd devenv;\ndocker-compose exec -T oauthkeycloakdb bash -c \"pg_dump -U keycloak keycloak\" > docker/blocks/auth/jwt_proxy/cloak.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana to Assign a Fixed Role to All Users (INI)\nDESCRIPTION: Grafana configuration snippet that assigns the 'Viewer' role to all users authenticating via this OAuth provider, irrespective of the information in the payload. It uses a JMESPath literal string ('Viewer') for `role_attribute_path` and ensures `skip_org_role_sync` is false.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/generic-oauth/index.md#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nrole_attribute_path = \"'Viewer'\"\nskip_org_role_sync = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Angular Plugin Support in Grafana Configuration\nDESCRIPTION: This configuration setting disables the loading of Angular-based plugins in Grafana as part of the Angular deprecation strategy. Setting `angular_support_enabled` to `false` in the Grafana configuration file prevents Angular plugins from being initialized and loaded. This change requires editing the Grafana configuration.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nangular_support_enabled = false\n```\n\n----------------------------------------\n\nTITLE: Embedding Image for Scheme Gradient Mode with Color Scheme using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode embeds an image showing a line chart utilizing the 'Scheme' gradient mode with the 'Green-Yellow-Red (by value)' color scheme selected. It generates an HTML figure containing the image, defining its source, maximum width, and alt text.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_1\n\nLANGUAGE: Hugo Shortcode\nCODE:\n```\n{{< figure src=\"/static/img/docs/time-series-panel/gradient_mode_scheme_line.png\" max-width=\"1200px\" alt=\"Color scheme: Green-Yellow-Red\" >}}\n```\n\n----------------------------------------\n\nTITLE: Dumping Grafana Pod Logs for Multi-Container Deployment via kubectl - Bash\nDESCRIPTION: This command fetches logs for a specific container ('my-grafana') in a multi-container deployment using kubectl. Useful for troubleshooting deployments with sidecars or additional containers. Requires specifying both deployment and container via -c flag.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# dump Pod logs for a Deployment (multi-container case)\nkubectl logs --namespace=monitoring deploy/grafana -c my-grafana\n```\n\n----------------------------------------\n\nTITLE: Using Struct Providers in Go with Wire\nDESCRIPTION: Shows how to use wire.Struct to construct a struct type and specify which fields should be injected.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/docs/guide.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Foo int\ntype Bar int\n\nfunc ProvideFoo() Foo {/* ... */}\n\nfunc ProvideBar() Bar {/* ... */}\n\ntype FooBar struct {\n    MyFoo Foo\n    MyBar Bar\n}\n\nvar Set = wire.NewSet(\n    ProvideFoo,\n    ProvideBar,\n    wire.Struct(new(FooBar), \"MyFoo\", \"MyBar\"))\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Line Protocol - Actuator Commands Data Point 2\nDESCRIPTION: InfluxDB line protocol data point containing measurements for aircraft actuator states including angles, currents and brake positions. Timestamp: 1618400059173608000\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/live/telemetry/telegraf/testdata/mixed_number_types.txt#2025-04-23_snippet_1\n\nLANGUAGE: influxdb\nCODE:\n```\navionics_actuator_ActuatorCommands,host=MacBook-Pro-Alexander.local surface_angle_deg_0=-16.4649525,pitch_brake_2=false,motor_current_A_10=42.0176544,pitch_brake_3=false,tailno=\"GHIL\",pitch_deg_1=9.89322376,surface_angle_deg_2=11.1123266,pitch_deg_4=-16.7317562,tilt_brake_2=true,motor_current_A_8=36.8988419,tilt_deg_5=5.36965704,surface_angle_deg_4=17.8226891,surface_angle_deg_6=-0.707197368,tilt_deg_2=-20.144413,pitch_brake_5=true,pitch_deg_2=-2.82733965,tilt_brake_5=false,motor_current_A_1=5.20447683,pitch_brake_1=false,motor_current_A_9=-19.5628815,surface_angle_deg_1=-12.6342392,pitch_deg_3=-21i,tilt_brake_4=true,motor_current_A_6=8.51478672,motor_current_A_0=2.84927869,tilt_deg_0=2.93773961,tilt_brake_3=true,tilt_deg_1=-20.8846588,surface_angle_deg_3=8.33424473,tilt_deg_4=-28.9802303,pitch_deg_5=6.43800926,surface_angle_deg_7=28.5278912,motor_current_A_7=-17.6263618,recorder=\"fcc1\",surface_angle_deg_5=-23.5173836,tilt_brake_0=true,motor_current_A_5=-5.96704578,tilt_deg_3=45.6446266,motor_current_A_11=11.097291,pitch_brake_0=true,surface_angle_deg_9=-27.9620895,motor_current_A_3=6.87531996,motor_current_A_4=23.7491093,pitch_deg_0=-29.835228,motor_current_A_2=6.56280565,pitch_brake_4=false,surface_angle_deg_8=-9.53332138,tilt_brake_1=true 1618400059173608000\n```\n\n----------------------------------------\n\nTITLE: Deriving Global Custom Roles from Existing Roles in Grafana Provisioning - YAML\nDESCRIPTION: This YAML snippet defines a global custom role that inherits permissions from existing fixed roles using the 'from' attribute. Explicit permission entries with 'state: absent' are used to exclude certain permissions from the inherited set. Requires Grafana provisioning, and roles must be correctly referenced in the file. Inputs include base roles and exclusion rules; the output is a global custom role with customized permission inheritance.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/manage-rbac-roles/index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config file version\\napiVersion: 2\\n\\nroles:\\n  - name: custom:org.users:writer\\n    description: 'List and remove other users from the organization.'\\n    version: 1\\n    global: true\\n    from:\\n      - name: 'fixed:org.users:reader'\\n        global: true\\n      - name: 'fixed:org.users:writer'\\n        global: true\\n    permissions:\\n      - action: 'org.users:write'\\n        scope: 'users:*'\\n        state: 'absent'\\n      - action: 'org.users:add'\\n        scope: 'users:*'\\n        state: 'absent'\\n\n```\n\n----------------------------------------\n\nTITLE: Including Shared Documentation Content (Hugo)\nDESCRIPTION: This Hugo shortcode `docs/shared` includes content from another file (`manage-users/view-server-user-list.md`). It specifies the source ('grafana') and uses a placeholder (`<GRAFANA VERSION>`) for the version, allowing content reuse across different documentation versions.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/manage-users/view-server-user-list-search.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{< docs/shared lookup=\"manage-users/view-server-user-list.md\" source=\"grafana\" version=\"<GRAFANA VERSION>\" >}}\n```\n\n----------------------------------------\n\nTITLE: Formatting Grafana Variables as Pipe-Separated String\nDESCRIPTION: Illustrates the `:pipe` format option. This formats multi-value variables into a single string where values are separated by a pipe character (`|`). The example shows `['test1.', 'test2']` interpolated as `'test1.|test2'`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/dashboards/variables/variable-syntax/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nservers = ['test1.', 'test2']\nString to interpolate: '${servers:pipe}'\nInterpolation result: 'test1.|test2'\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Section Shortcode for Content Structuring\nDESCRIPTION: This snippet shows a Hugo shortcode `{{< section >}}` used within the Grafana documentation source files. It likely serves to define a logical section within the page content for structural organization when processed by the Hugo static site generator.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{< section >}}\n```\n\n----------------------------------------\n\nTITLE: Mapping SAML Assertion Attribute for User Name (Simple String)\nDESCRIPTION: This INI configuration snippet demonstrates how to map the Grafana user's display name to a single attribute named 'displayName' received in the SAML assertion. This is a simple, direct mapping under the `[auth.saml]` section.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/saml/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n#plain string mapping\nassertion_attribute_name = displayName\n```\n\n----------------------------------------\n\nTITLE: Defining Class Names in TypeScript\nDESCRIPTION: Demonstrates the correct way to name classes using PascalCase in TypeScript.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nclass dataLink {\n  //...\n}\n\n// good\nclass DataLink {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Shared Documentation for Disconnect Values using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically includes shared documentation content about disconnecting values based on thresholds from a separate file ('visualizations/disconnect-values.md'). Similar to the 'connect-null-values' shortcode, it uses parameters like 'source', 'version', and 'leveloffset' to retrieve the appropriate content for the Grafana version and integrate it seamlessly by adjusting heading levels. This ensures consistency and avoids content duplication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/visualizations/graph-styles-options.md#2025-04-23_snippet_3\n\nLANGUAGE: Hugo Shortcode\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/disconnect-values.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Embedding Subfolder Selection Image using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode is used in Grafana's documentation to display a screenshot demonstrating the new subfolder selection UI, specifically the folder picker. It defines the image source (`/media/docs/grafana/screenshot-grafana-10.1-subfolders-folder-picker.png`), its maximum width on the page (`750px`), and provides a descriptive caption (`Selecting a folder in Grafana`). This requires the `nestedFolders` feature toggle to be enabled.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v10-1.md#2025-04-23_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{< figure src=\"/media/docs/grafana/screenshot-grafana-10.1-subfolders-folder-picker.png\" max-width=\"750px\" caption=\"Selecting a folder in Grafana\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Live Origins Example\nDESCRIPTION: Configuration example showing how to set allowed origins for Grafana Live WebSocket connections. This allows connections from subdomains of example.com using HTTPS.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\n[live]\nallowed_origins = \"https://*.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Using Trans Component for Basic Translation in JSX\nDESCRIPTION: Demonstrates the fundamental use of the `<Trans>` component from `app/core/internationalization` to mark a simple string with an interpolation variable (`pageTitle`) for translation in a React component. The `i18nKey` provides a unique identifier for the translation string.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans i18nKey=\"search-results.panel-link\">Go to {{ pageTitle }}</Trans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana HTTP Port in INI File\nDESCRIPTION: Identifies the `http_port` configuration parameter within Grafana's INI configuration files (`sample.ini` or `custom.ini`). This setting determines the port Grafana listens on. It needs to be uncommented (by removing the leading semicolon) and set to the desired port number in `custom.ini`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nhttp_port\n```\n\n----------------------------------------\n\nTITLE: Stopping Grafana Server (init.d) - Shell\nDESCRIPTION: Stops the Grafana server running under init.d script control. Suitable for older Linux distributions still using SysV init systems. Input: None. Output: Stops Grafana server started via init.d.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/debian/index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo service grafana-server stop\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Signatures for Alphabetical Interface in Go\nDESCRIPTION: Example of an interface definition that follows Grafana's command/query pattern guidelines. Shows method signatures that handle queries and commands with appropriate return types.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Alphabetical interface {\n  // GetLetter returns either an error or letter.\n  GetLetter(context.Context, GetLetterQuery) (Letter, error)\n  // ListCachedLetters cannot fail, and doesn't return an error.\n  ListCachedLetters(context.Context, ListCachedLettersQuery) Letters\n  // DeleteLetter doesn't have any return values other than errors, so it\n  // returns only an error.\n  DeleteLetter(context.Contxt, DeleteLetterCommand) error\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Grafana Binary Directory using Shell\nDESCRIPTION: Moves the unpacked Grafana binary directory from its download location (`<DOWNLOAD PATH>`) to the standard installation path `/usr/local/grafana`. Requires `sudo` privileges. This step is part of the manual binary installation process.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/redhat-rhel-fedora/index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv <DOWNLOAD PATH> /usr/local/grafana\n```\n\n----------------------------------------\n\nTITLE: Accessing Span Tags with Dot Notation in Grafana Traces (Markdown)\nDESCRIPTION: Illustrates how to access specific tags from a span, including handling cases where tag names contain dots by using bracket notation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/jaeger/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo access a specific tag named `version`, you would use `${__span.tags.version}`. In case the tag contains dot, you have to access it as `${__span.tags[\"http.status\"]}`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Reserved Labels in Unified Alerting - Grafana INI\nDESCRIPTION: Covers `[unified_alerting.reserved_labels]` for disabling specific reserved labels auto-added by the Grafana Alerting engine. Accepts a comma-separated list in `disabled_labels`. Used to suppress unwanted internal metadata like folder information from alerts.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[unified_alerting.reserved_labels]\n# Comma-separated list of reserved labels to disable\ndisabled_labels = grafana_folder\n\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Cypress Login Test\nDESCRIPTION: A TypeScript test example showing how to use the Login page object to visit the page and interact with elements.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/e2e.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Login test', () => {\n  it('passes', () => {\n    e2e.pages.Login.visit();\n    // To prevent flaky tests, always do a `.should` on any selector that you expect to be in the DOM.\n    // Read more here: https://docs.cypress.io/guides/core-concepts/retry-ability.html#Commands-vs-assertions\n    e2e.pages.Login.username().should('be.visible').type('admin');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Kubernetes Objects in a Namespace - kubectl - Bash\nDESCRIPTION: This command retrieves the status of all objects in the `monitoring` Kubernetes namespace. Used for cluster resource inspection and troubleshooting after Helm deployment. Requires access via `kubectl`.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/helm/index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n monitoring\n```\n\n----------------------------------------\n\nTITLE: Enabling New Navigation via 'topnav' Feature Toggle (Plaintext)\nDESCRIPTION: This represents the 'topnav' feature toggle key used in Grafana configuration. Setting this toggle enables the preview of the redesigned top navigation bar in Grafana Open Source and Enterprise editions (v9.4).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/whatsnew/whats-new-in-v9-4.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntopnav\n```\n\n----------------------------------------\n\nTITLE: Revoking an Auth Token for Actual User via Grafana API (HTTP/JSON)\nDESCRIPTION: Revokes a specific authentication token (identified by `authTokenId` in the JSON payload) for the currently authenticated user using a POST request to `/api/user/revoke-auth-token`. This logs out the corresponding device/session, requiring re-authentication. Requires authentication (Bearer Token shown). Returns a JSON success message.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/user.md#2025-04-23_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/user/revoke-auth-token HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n{\n  \"authTokenId\": 364\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n  \"message\": \"User auth token revoked\"\n}\n```\n\n----------------------------------------\n\nTITLE: OData Filter Expression Examples\nDESCRIPTION: Examples of OData filter expressions for Application Insights queries, demonstrating equality, inequality, and logical operators.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/azuremonitor/query_help.md#2025-04-23_snippet_2\n\nLANGUAGE: odata\nCODE:\n```\nclient/city eq 'Boydton'\nclient/city ne 'Boydton'\nclient/city ne 'Boydton' and client/city ne 'Dublin'\nclient/city eq 'Boydton' or client/city eq 'Dublin'\n```\n\n----------------------------------------\n\nTITLE: Organization List Response (Admin API) - JSON\nDESCRIPTION: The JSON response for organization listings is an array of organization objects, each with id and name attributes. This is primarily used for administrative overviews, listing all Grafana organizations.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \"id\":1,\\n    \"name\":\"Main Org.\"\\n  }\\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana Explore Tab (Plaintext)\nDESCRIPTION: Defines the `datasources:explore` permission action that enables access to the Explore tab in Grafana, allowing users to interactively query data sources. No specific scope dependencies are listed.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n`datasources:explore`\n```\n\n----------------------------------------\n\nTITLE: Rotating Data Encryption Keys via Grafana Admin HTTP API - HTTP\nDESCRIPTION: Issues an HTTP POST request to rotate all data encryption keys as part of Grafana's admin encryption config. There is no body in either request or response. On success, a 204 No Content status is returned, confirming the operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/admin/encryption/rotate-data-keys HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204\\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Importing ArgTypes from Storybook Blocks (TypeScript)\nDESCRIPTION: Imports the `ArgTypes` component from the `@storybook/blocks` library. This component is typically used in Storybook MDX files to automatically generate and display documentation for a component's arguments (props).\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Tooltip/Tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArgTypes } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Service Host - Bash\nDESCRIPTION: Defines the HTTP server's listening host for the image renderer using the HTTP_HOST environment variable. By default, it is unset and will use the local host. Useful when binding the service to a specific network interface.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_HOST=localhost\n```\n\n----------------------------------------\n\nTITLE: Setting Default Browser Timezone - JSON\nDESCRIPTION: Sets the rendering.timezone field to establish a default timezone for headless browser renders. Accepts strings matching supported timezone IDs. Ensures rendered images are consistent with the desired locale.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/image-rendering/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rendering\": {\n    \"timezone\": \"Europe/Stockholm\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegate Permission Scope in Grafana RBAC\nDESCRIPTION: This scope applies specifically to roles managing Access Control itself. `permissions:type:delegate` allows a user to delegate their own permissions (or a subset) by creating new roles or assignments.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/administration/roles-and-permissions/access-control/custom-role-actions-scopes/index.md#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\npermissions:type:delegate\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in a Grafana Service\nDESCRIPTION: Example showing how to publish an event in Grafana so that other services can react to it. This demonstrates creating an event struct and using the event bus to publish it.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/backend/communication.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nevent := &events.StickersSentEvent {\n    UserID: \"taylor\",\n    Count:   1,\n}\nif err := s.bus.Publish(event); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Multiple Columns for Grafana Time Series\nDESCRIPTION: This query demonstrates how to use multiple columns in a Grafana time series query. It groups time data and calculates both minimum and maximum values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  $__timeGroupAlias(time_date_time, '5m'),\n  min(value_double) as min_value,\n  max(value_double) as max_value\nFROM test_data\nWHERE $__timeFilter(time_date_time)\nGROUP BY time\nORDER BY 1\n```\n\n----------------------------------------\n\nTITLE: Using seriesByTag Function in Graphite\nDESCRIPTION: The seriesByTag function takes tag expressions (=, !=, =~, !=~) to filter timeseries when exploring data in Graphite. This helps narrow down the dataset when working with high-cardinality tags.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/graphite/query-editor/index.md#2025-04-23_snippet_0\n\nLANGUAGE: graphite\nCODE:\n```\nseriesByTag()\n```\n\n----------------------------------------\n\nTITLE: Declaring and Assigning Variables in Go Templates\nDESCRIPTION: Shows how to declare and initialize variables within a Go template using the `:=` operator. A variable (`$variable`) can be assigned the current context (`.`) or a literal value like a string.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{ $variable := . }}\n{{ $variable := \"This is a test\" }}\n{{ $variable }}\n```\n\n----------------------------------------\n\nTITLE: kubectl Output Example - List Playlists - Shell\nDESCRIPTION: This shell output presents a sample table printed by kubectl upon listing Playlist resources, showing name, title, interval, and creation timestamp. Output is for verification and informational purposes.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                   TITLE                              INTERVAL   CREATED AT\\nu394j4d3-s63j-2d74-g8hf-958773jtybf2   Playlist with auto generated UID   5m         2023-12-14T13:53:35Z \n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Members - HTTP\nDESCRIPTION: Performs a GET request to the team members endpoint to list all members belonging to a specific team. Requires Bearer authentication. Returns a JSON array of user membership objects.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/team.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /api/teams/1/members HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer glsa_kcVxDhZtu5ISOZIEt\n```\n\n----------------------------------------\n\nTITLE: Executing Templates with Filtered Data Context in Go Templates\nDESCRIPTION: Shows executing the same defined template (`\"print_alerts\"`) but passing a filtered subset of the data (e.g., `.Alerts.Firing`). This allows reusing the template logic for different data views.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/template-language.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n{{ template \"print_alerts\" .Alerts.Firing }}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Grafana Configuration File (Windows)\nDESCRIPTION: Instructs copying the sample configuration file (`sample.ini`) to create a custom configuration file (`custom.ini`) within the `conf` directory. Customizations should be made in `custom.ini` to avoid being overwritten during upgrades.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/installation/windows/index.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncopy sample.ini to custom.ini\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Log Filter Configuration\nDESCRIPTION: Example showing how to configure log filters and level in a docker-compose.yaml file. Demonstrates setting specific log levels for different components like sqlstore and plugins.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nGF_LOG_FILTERS: sqlstore:debug,plugins:info\nGF_LOG_LEVEL: error\n```\n\n----------------------------------------\n\nTITLE: kubectl Output Example - No Folder Resources Found - Shell\nDESCRIPTION: This shell output message confirms the absence of any Folder resources when queried using kubectl in the default namespace.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/storage/unified/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nNo resources found in default namespace.\n```\n\n----------------------------------------\n\nTITLE: Checking Open File Limit on Unix\nDESCRIPTION: This shell command checks the maximum number of open file descriptors allowed for the current user process on Unix-like systems. This limit affects the number of simultaneous connections (like WebSockets for Grafana Live) a process can handle.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/set-up-grafana-live.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nulimit -n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Folder with HTTP DELETE Request\nDESCRIPTION: Example HTTP DELETE request to remove an existing folder identified by UID. This operation deletes the folder along with all its dashboards and alerts. Requires 'folders:delete' permission.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/folder.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/folders/nErXDvCkzz HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n\n```\n\n----------------------------------------\n\nTITLE: Basic Diff Response for Dashboard Comparison in Grafana HTTP API\nDESCRIPTION: This HTTP response returns a simplified HTML summary of changes between two dashboard versions when using the 'basic' diff type.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_versions.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=UTF-8\n\n<div class=\"diff-group\">\n  <!-- Diff omitted -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Playlists Feature Toggle in Grafana INI\nDESCRIPTION: This INI configuration snippet enables the `kubernetesPlaylists` feature flag within Grafana's configuration file (e.g., `custom.ini`). This toggle is necessary to activate the Kubernetes-compatible API server features related to managing playlists.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/apiserver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[feature_toggles]\nkubernetesPlaylists = true\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component DefaultProps\nDESCRIPTION: Demonstrates the correct way to implement defaultProps in a React component with proper typing.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/style-guides/frontend.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// bad\nstatic defaultProps = { ... }\n\n// good\nstatic defaultProps: Partial<Props> = { ... }\n```\n\n----------------------------------------\n\nTITLE: Including Axis Options Documentation using Hugo Shortcode\nDESCRIPTION: This Hugo shortcode includes shared documentation content for axis options from `visualizations/axis-options-2.md`. The `leveloffset=\"+1\"` parameter adjusts heading levels. Dependencies include Hugo and the referenced file.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/panels-visualizations/visualizations/candlestick/index.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{{< docs/shared lookup=\"visualizations/axis-options-2.md\" source=\"grafana\" version=\"<GRAFANA_VERSION>\" leveloffset=\"+1\" >}}\n```\n\n----------------------------------------\n\nTITLE: Dashboard Permissions Update Response\nDESCRIPTION: Example response from the POST permissions API endpoint showing a successful update. It returns a simple message confirming the permissions were updated.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\nContent-Length: 35\n\n{\"message\":\"Dashboard permissions updated\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Profiling Environment Variables (Bash)\nDESCRIPTION: Examples of environment variables to configure profiling settings for Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport GF_DIAGNOSTICS_PROFILING_ENABLED=true\nexport GF_DIAGNOSTICS_PROFILING_ADDR=0.0.0.0\nexport GF_DIAGNOSTICS_PROFILING_PORT=8080\nexport GF_DIAGNOSTICS_PROFILING_BLOCK_RATE=5\nexport GF_DIAGNOSTICS_PROFILING_MUTEX_RATE=5\n```\n\n----------------------------------------\n\nTITLE: Enabling URL Login for JWT Authentication\nDESCRIPTION: Configuration to enable JWT authentication from URL query parameter, which allows authentication tokens to be passed in the URL for iframe embedding scenarios.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-security/configure-authentication/jwt/index.md#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# [auth.jwt]\n# ...\nurl_login = true # enable JWT authentication in the URL\n```\n\n----------------------------------------\n\nTITLE: Backing Up Keycloak Database\nDESCRIPTION: Docker command to dump the Keycloak database for backup purposes in the development environment.\nSOURCE: https://github.com/grafana/grafana/blob/main/devenv/docker/blocks/auth/oauth/readme.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd devenv;\ndocker-compose exec -T oauthkeycloakdb bash -c \"pg_dump -U keycloak keycloak\" > docker/blocks/auth/oauth/cloak.sql\n```\n\n----------------------------------------\n\nTITLE: Processing OpenAPI Files - Bash\nDESCRIPTION: Command to process OpenAPI files without generating RTK API clients, useful for separate client generation workflows.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/openapi_snapshots/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn process-specs\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Service Status (Linux/systemd)\nDESCRIPTION: This command uses 'systemctl', the systemd service manager tool on Linux, to check the current status of the 'prometheus' service. It helps determine if the Prometheus service is active (running), inactive (dead), or in a failed state.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/getting-started/get-started-grafana-prometheus.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status prometheus\n```\n\n----------------------------------------\n\nTITLE: Reading Notification Policies (Routes) in Grafana RBAC\nDESCRIPTION: Specifies the RBAC permission required to read notification policies (also known as routes) which determine how alerts are routed in Grafana. No specific associated scopes are listed (n/a).\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/configure-rbac/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n`alert.notifications.routes:read`\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Struct in Go\nDESCRIPTION: Creates an empty struct in Go using the address-of operator (&) with empty curly braces. This is a common pattern for initializing structs with default values.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/StructPointer/want/program_out.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n41 1 &{}\n```\n\n----------------------------------------\n\nTITLE: Initializing ElasticSearch Development Environment\nDESCRIPTION: Development environment setup commands for working with ElasticSearch data source in Grafana. Includes options for specifying ElasticSearch version.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/plugins/datasource/elasticsearch/docs/developer_documentation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake devenv sources=elastic\nmake devenv sources=elastic elastic_version=7.17.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Trace in Web Browser (Go)\nDESCRIPTION: Command to view a collected trace file using the Go trace tool in a web browser.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo tool trace <trace file>\n```\n\n----------------------------------------\n\nTITLE: Collecting CPU Profile (Bash)\nDESCRIPTION: Command to collect a 30-second CPU profile using curl.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://<profile-addr>:<profile-port>/debug/pprof/profile?seconds=30' > profile.pprof\n```\n\n----------------------------------------\n\nTITLE: Analyzing Heap Profiles (Go)\nDESCRIPTION: Command to compare two heap profiles using the Go pprof tool.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof -http=localhost:8081 --base heap1.pprof heap2.pprof\n```\n\n----------------------------------------\n\nTITLE: Updating Current User Preferences via HTTP API - HTTP\nDESCRIPTION: Performs a complete replacement of the current user's preferences in Grafana via a PUT request. Requires Bearer token authentication, and expects a JSON body describing the desired preferences fields such as theme, dashboard UID, and timezone. A valid request returns a success message. Ensure all necessary settings are set explicitly because omitted fields revert to system defaults.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/preferences.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/user/preferences HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\\n\\n{\\n  \"theme\": \"\",\\n  \"homeDashboardUID\":\"home\",\\n  \"timezone\":\"utc\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Playlist via Grafana HTTP API\nDESCRIPTION: Sends a DELETE request to `/api/playlists/:uid` to delete a specific playlist identified by its UID. Requires an `Authorization` header with a bearer token. Returns an empty JSON object on successful deletion.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/playlist.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/playlists/1 HTTP/1.1\nAccept: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n{}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Service Account - Grafana HTTP API - HTTP\nDESCRIPTION: This snippet details how to delete a service account from Grafana using the DELETE endpoint, authenticated via Basic Auth. Only the ID of the service account is required in the URI. The expected JSON response confirms successful deletion via a message property.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/serviceaccount.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/serviceaccounts/2 HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\nAuthorization: Basic YWRtaW46YWRtaW4=\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\\nContent-Type: application/json\\n\\n{\\n\\t\"message\": \"Service account deleted\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Tracing Environment Variables (Bash)\nDESCRIPTION: Examples of environment variables to configure tracing settings for Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport GF_DIAGNOSTICS_TRACING_ENABLED=true\nexport GF_DIAGNOSTICS_TRACING_FILE=/tmp/trace.out\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Sources Mock Path in TypeScript\nDESCRIPTION: File path reference for mock data source setup functions in Grafana alerting tests.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/app/features/alerting/unified/TESTING.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic/app/features/alerting/unified/testSetup/datasources.ts\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Integration Tests Overview in Markdown\nDESCRIPTION: Documentation header explaining the purpose of the directory containing Kubernetes API integration tests for Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/tests/apis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# K8s integration tests\n\nThis directory contains integration tests the k8s api services\n```\n\n----------------------------------------\n\nTITLE: Defining ProvisionedAlertRule Struct in Go\nDESCRIPTION: This code snippet represents the Go struct definition for ProvisionedAlertRule. It includes various fields such as annotations, condition, data, and other properties related to alert rule configuration in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_41\n\nLANGUAGE: go\nCODE:\n```\ntype ProvisionedAlertRule struct {\n    Annotations  map[string]string  `json:\"annotations,omitempty\"`\n    Condition    string              `json:\"condition\"`\n    Data         []*AlertQuery       `json:\"data\"`\n    ExecErrState string              `json:\"execErrState\"`\n    FolderUID    string              `json:\"folderUID\"`\n    For          Duration            `json:\"for\"`\n    ID           int64               `json:\"id,omitempty\"`\n    IsPaused     bool                `json:\"isPaused,omitempty\"`\n    Labels       map[string]string  `json:\"labels,omitempty\"`\n    NoDataState  string              `json:\"noDataState\"`\n    OrgID        int64               `json:\"orgID\"`\n    Provenance   Provenance          `json:\"provenance,omitempty\"`\n    RuleGroup    string              `json:\"ruleGroup\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Users in an Organization via Grafana API (HTTP)\nDESCRIPTION: Example HTTP GET request to retrieve a list of users belonging to a specific Grafana organization identified by `:orgId`. This operation requires Basic Authentication (e.g., http://admin:admin@localhost:3000/api/orgs/1/users) and the `org.users:read` permission with the `users:*` scope.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nGET /api/orgs/1/users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling with Block and Mutex Profiling (Bash)\nDESCRIPTION: Command to start Grafana server with profiling enabled, including block and mutex profiling at 20% fraction.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/setup-grafana/configure-grafana/configure-tracing/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./grafana server -profile -profile-addr=0.0.0.0 -profile-port=8080 -profile-block-rate=5 -profile-mutex-rate=5\n```\n\n----------------------------------------\n\nTITLE: Select Component with Custom Value - Before\nDESCRIPTION: Previous implementation of Select component with custom value support\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Select } from '@grafana/ui';\n...\n<Select\n...\nallowCustomValue\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Release Notes Metadata with YAML Frontmatter - YAML\nDESCRIPTION: The snippet establishes structured frontmatter at the top of the file for Grafana 7.4.5 release notes, specifying build settings, product labels (cloud, enterprise, oss), and a title field. This metadata is intended for static site generators or changelog tooling. No code dependencies are required; it is a pure YAML configuration. Inputs include boolean flags and string lists, used to classify and contextualize the subsequent notes. Output is a structured data section, typically parsed automatically.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/release-notes/release-notes-7-4-5.md#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\\n_build:\\n  list: false\\nlabels:\\n  products:\\n    - cloud\\n    - enterprise\\n    - oss\\ntitle: Release notes for Grafana 7.4.5\\n---\n```\n\n----------------------------------------\n\nTITLE: Changing User Password via Grafana Admin HTTP API - HTTP\nDESCRIPTION: This snippet demonstrates an HTTP PUT request to update the password of a specific Grafana user via the admin API. Basic Authentication and the required permission scope must be used. It accepts a JSON body with a new \"password\" value and expects a JSON confirmation message in response.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/admin.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/admin/users/2/password HTTP/1.1\\nAccept: application/json\\nContent-Type: application/json\\n\\n{\"password\":\"userpassword\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"message\": \"User password updated\"}\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkButton Components as Anchor Buttons with React in Storybook (TSX)\nDESCRIPTION: This snippet shows how to use the LinkButton component to create anchor tags styled as buttons for navigation, using the 'href' prop and different sizes. Placed inside ExampleFrame for a visual preview, it demonstrates best practices for integrating navigation links into button groups in a React Storybook MDX context. The LinkButton must accept href and style props, outputting anchor elements styled like buttons of different sizes.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Button/Button.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ExampleFrame>\\n  <LinkButton href=\\\"/\\\" size=\\\"sm\\\" style={{ margin: '5px' }}>\\n    {'Small'}\\n  </LinkButton>\\n  <LinkButton href=\\\"/\\\" size=\\\"md\\\" style={{ margin: '5px' }}>\\n    {'Medium'}\\n  </LinkButton>\\n  <LinkButton href=\\\"/\\\" size=\\\"lg\\\" style={{ margin: '5px' }}>\\n    {'Large'}\\n  </LinkButton>\\n</ExampleFrame>\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncSelect with Asynchronous Options Loading in React and @grafana/ui (JSX)\nDESCRIPTION: Demonstrates the usage of AsyncSelect to load options asynchronously using a loadOptions prop and handling defaultOptions in React. Requires the @grafana/ui AsyncSelect component and React useState. Key inputs are the asynchronous loader and current value; output is the rendered AsyncSelect with dynamically loaded options. Set defaultOptions to true for initial load when mounted.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/Select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\nimport { AsyncSelect } from '@grafana/ui';\n\nconst basicSelectAsync = () => {\n  const [value, setValue] = useState<SelectableValue<string>>();\n\n  return (\n    <AsyncSelect\n      loadOptions={loadAsyncOptions}\n      defaultOptions\n      value={value}\n      onChange={v => {\n        setValue(v);\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a SQL Server Stored Procedure for Time-Grouped Data Aggregation\nDESCRIPTION: This SQL script defines a stored procedure named `sp_test_datetime` in Microsoft SQL Server. It accepts two `datetime` parameters, `@from` and `@to`, representing a time range. The procedure queries a table `metric_values`, calculates the average of `valueOne` and `valueTwo` separately, grouping results into 10-minute intervals (calculated using `DATEDIFF` and integer casting to mimic Grafana's time grouping). It combines the results for both values using `UNION ALL` and orders them by time. This prepares data suitable for time-series visualization in Grafana.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/mssql/query-editor/index.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE sp_test_datetime(\n  @from datetime,\n  @to \tdatetime\n)\tAS\nBEGIN\n  SELECT\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int) as time,\n    measurement + ' - value one' as metric,\n    avg(valueOne) as value\n  FROM\n    metric_values\n  WHERE\n    time >= @from AND time <= @to\n  GROUP BY\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int),\n    measurement\n  UNION ALL\n  SELECT\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int) as time,\n    measurement + ' - value two' as metric,\n    avg(valueTwo) as value\n  FROM\n    metric_values\n  WHERE\n    time >= @from AND time <= @to\n  GROUP BY\n    cast(cast(DATEDIFF(second, {d '1970-01-01'}, time)/600 as int)*600 as int),\n    measurement\n  ORDER BY 1\nEND\n\n```\n\n----------------------------------------\n\nTITLE: Rendering TextLink with Custom External Icon in React (JSX)\nDESCRIPTION: This snippet demonstrates customizing the icon of an external TextLink by providing the icon prop, here set to 'google'. Dependencies: the TextLink React component with props href for destination URL, external to mark it as outside, and icon specifying which icon to display. Input parameters include href (the link's URL), icon (icon name like 'google'), and external flag. Output is a link rendered with user-selected icon instead of default. The icon prop must reference an icon available in the Grafana UI icon library.\nSOURCE: https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Link/TextLink.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TextLink href=\\\"https://google.es\\\" icon=\\\"google\\\" external>\\n  This an external with a specific icon\\n</TextLink>\n```\n\n----------------------------------------\n\nTITLE: Set User Role Assignments Response\nDESCRIPTION: Success response for bulk role assignment update operation.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/access_control.md#2025-04-23_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=UTF-8\n\n{\n    \"message\": \"User roles have been updated.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeInterval Structure in Go\nDESCRIPTION: Defines the TimeInterval structure with properties for specifying time intervals, including days, months, times, and weekdays.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/shared/alerts/alerting_provisioning.md#2025-04-23_snippet_49\n\nLANGUAGE: go\nCODE:\n```\n**Properties**\n\n{{% responsive-table %}}\n\n| Name            | Type                       | Go type        | Required | Default | Description | Example |\n| --------------- | -------------------------- | -------------- | :------: | ------- | ----------- | ------- |\n| `days_of_month` | []string                   | []string       |          |         |             |         |\n| `location`      | string                     | string         |          |         |             |         |\n| `months`        | []string                   | []string       |          |         |             |         |\n| `times`         | [][TimeRange](#time-range) | `[]*TimeRange` |          |         |             |         |\n| `weekdays`      | []string                   | []string       |          |         |             |         |\n| `years`         | []string                   | []string       |          |         |             |         |\n\n{{% /responsive-table %}}\n```\n\n----------------------------------------\n\nTITLE: Defining Grafana Plugin Signature Manifest - JSON\nDESCRIPTION: This JSON object provides a manifest describing a Grafana plugin for cryptographic signing, including metadata such as manifestVersion, plugin name, version, timestamps, signing keys, and the SHA256 checksums of files within the plugin. Dependencies include a Grafana-compatible signing/verifying process and the consumer should expect this to be followed by a PGP signature for verification. Required fields are the manifestVersion, plugin name, file hash dictionary, and related metadata. The primary input is a plugin build, and the output is a manifest to be consumed by signature verification tools. Any changes in file integrity or metadata would require updating this manifest and resigning.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/services/pluginsintegration/pluginassets/testdata/module-hash-no-module-js/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"manifestVersion\": \"2.0.0\",\n  \"signatureType\": \"grafana\",\n  \"signedByOrg\": \"grafana\",\n  \"signedByOrgName\": \"Grafana Labs\",\n  \"plugin\": \"test-app\",\n  \"version\": \"1.0.0\",\n  \"time\": 1726230812215,\n  \"keyId\": \"7e4d0c6a708866e7\",\n  \"files\": {\n    \"plugin.json\": \"31f04aceb2a9b14c2e501f38a4de5ab1c7a3e7306f58353fa5c1a86b716c971c\",\n    \"something.js\": \"266c19bc148b22ddef2a288fc5f8f40855bda22ccf60be53340b4931e469ae2a\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform Working Directory\nDESCRIPTION: Shell command to initialize Terraform working directory and install the Grafana provider.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/terraform-provisioning/index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Signing Plugin Metadata with PGP - JSON inside PGP Block - JavaScript/JSON\nDESCRIPTION: This snippet showcases a JSON object that specifies plugin metadata for a Grafana plugin, including name, version, file hashes, and a keyId for signing. It relies on no explicit dependencies but assumes PGP-compatible tools are available for signature verification. The JSON section is wrapped between PGP markers (-----BEGIN PGP SIGNED MESSAGE----- and -----END PGP SIGNATURE-----), with a detached PGP signature appended, allowing consumers to verify the integrity and authenticity of the metadata using the provided keyId. Inputs are the metadata fields, outputs are the verifiable signed message and its cryptographic signature.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/plugins/manager/testdata/lacking-files/plugin/MANIFEST.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA512\\n\\n{\\n  \"plugin\": \"test\",\\n  \"version\": \"1.0.0\",\\n  \"files\": {\\n    \"executable\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\\n    \"plugin.json\": \"f19e18ca5dec690b94f2ff7866372db4bc63f4ff1101ee5d9061b9a6f026f6dd\"\\n  },\\n  \"time\": 1589270570251,\\n  \"keyId\": \"7e4d0c6a708866e7\"\\n}\\n-----BEGIN PGP SIGNATURE-----\\nVersion: OpenPGP.js v4.10.1\\nComment: https://openpgpjs.org\\n\\nwqIEARMKAAYFAl66WCoACgkQfk0ManCIZuf8zwIJAWBVDJyzqchZ/DN7ZDCy\\nKyb63CajW/XdgHalPDB0sZ/80ExjCSprkFYPL+hUlTUHIXh+jGkfnYpMoqWA\\nOm77bFc2AgkBV8HTsuRw/lXUezKnDuXcgUIvHvEwKWTvtbLgcuMXMDAVAEBj\\nisBWmA8xvUfMzgQ9CJUHAaJ6hf1erpE4BuBqtMM=\\n=uBIX\\n-----END PGP SIGNATURE-----\n```\n\n----------------------------------------\n\nTITLE: Error Message for Wire Bind Function in Go\nDESCRIPTION: An error message from the Go compiler or Wire framework indicating that the Bind function was called incorrectly. The function expects a pointer to an interface as its first argument, but a string was provided instead.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/internal/wire/testdata/InterfaceBindingInvalidArg0/want/wire_errs.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/foo/wire.go:x:y: first argument to Bind must be a pointer to an interface type; found string\n```\n\n----------------------------------------\n\nTITLE: Example Response for Deleting a User from an Organization (HTTP/JSON)\nDESCRIPTION: Example successful HTTP response (200 OK) after removing a user from a Grafana organization. The JSON response body confirms the removal.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/org.md#2025-04-23_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: application/json\n\n{\"message\":\"User removed from organization\"}\n```\n\n----------------------------------------\n\nTITLE: Unstarring a Query in Grafana Query History (HTTP Request)\nDESCRIPTION: This snippet shows an example HTTP DELETE request to remove the starred status from a specific query history entry identified by its UID. Authentication is required.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/query_history.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/query-history/star/P8zM2I1nz  HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals with 't' Function using 'count' Option in JavaScript\nDESCRIPTION: Demonstrates using the `t` function for pluralization in plain JavaScript. The `count` is passed within the options object (third argument), and the `{{count}}` placeholder is used in the default string. The `i18nKey` (`inbox.heading`) guides i18next to select the correct plural form. Requires `t` import.\nSOURCE: https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { t } from 'app/core/internationalization';\n\nconst translatedString = t('inbox.heading', 'You got {{count}} messages', { count: messages.length });\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Terms Ordered by Document Count (JSON)\nDESCRIPTION: This JSON query retrieves terms from the `hostname` field in Elasticsearch for a Grafana template variable. The `\"orderBy\": \"doc_count\"` parameter sorts the results by the number of documents containing each term, in descending order by default (Top-N). This is useful for populating a variable with the most frequent values.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/datasources/elasticsearch/template-variables/index.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```\n{\"find\": \"terms\", \"field\": \"hostname\", \"orderBy\": \"doc_count\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Dashboard Permissions with HTTP API\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve all existing permissions for a dashboard using its UID. It includes the required headers for authentication.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/developers/http_api/dashboard_permissions.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dashboards/uid/dHEquNzGz/permissions HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Bearer eyJrIjoiT0tTcG1pUlY2RnVKZTFVaDFsNFZXdE9ZWmNrMkZYbk\n```\n\n----------------------------------------\n\nTITLE: Displaying Organization Name in Go Template\nDESCRIPTION: This Go template snippet inserts the value of the `.OrgName` variable from the provided context data into the email body. It's used to display the name of the Grafana organization the recipient is invited to. Requires the Go templating engine and the `.OrgName` variable in the context.\nSOURCE: https://github.com/grafana/grafana/blob/main/public/emails/new_user_invite.txt#2025-04-23_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{.OrgName}}\n```\n\n----------------------------------------\n\nTITLE: Updated Event Initializer with Error Handling in Go\nDESCRIPTION: Modifies the NewEvent function to return an error if the Greeter is grumpy, demonstrating how Wire handles error cases.\nSOURCE: https://github.com/grafana/grafana/blob/main/pkg/build/wire/_tutorial/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc NewEvent(g Greeter) (Event, error) {\n    if g.Grumpy {\n        return Event{}, errors.New(\"could not create event: event greeter is grumpy\")\n    }\n    return Event{Greeter: g}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Contact Point - YAML\nDESCRIPTION: Configures a generic webhook integration for Grafana alerts. Requires a target URL and supports HTTP method, authentication, TLS settings, alert limits, and an HMAC configuration for signed requests. Provides extensive customization for outbound webhooks, security via TLS and HMAC, and limits on the number of alerts per payload. Outputs HTTP requests to the specified endpoint.\nSOURCE: https://github.com/grafana/grafana/blob/main/docs/sources/alerting/set-up/provision-alerting-resources/file-provisioning/index.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntype: webhook\\nsettings:\\n  # <string, required>\\n  url: https://endpoint_url\\n  # <string> options: POST, PUT\\n  httpMethod: POST\\n  # <string>\\n  username: abc\\n  # <string>\\n  password: abc123\\n  # <string>\\n  authorization_scheme: Bearer\\n  # <string>\\n  authorization_credentials: abc123\\n  # <string>\\n  maxAlerts: '10'\\n  # <map>\\n  tlsConfig:\\n    # <bool>\\n    insecureSkipVerify: false\\n    # <string>\\n    clientCertificate: certificate in PEM format\\n    # <string>\\n    clientKey: key in PEM format\\n    # <string>\\n    caCertificate: CA certificate in PEM format\\n  hmacConfig:\\n    #<string>\\n    secret: secret-key\\n    #<string>\\n    header: X-Grafana-Alerting-Signature\\n    #<string>\\n    timestampHeader: X-Grafana-Alerting-Signature-Timestamp\\n\n```"
  }
]