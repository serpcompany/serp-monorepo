[
  {
    "owner": "postgrest",
    "repo": "postgrest",
    "content": "TITLE: Creating API Schema and Todos Table\nDESCRIPTION: SQL commands to create a schema, todos table with basic fields, and insert initial data\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut0.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\ncreate schema api;\n\ncreate table api.todos (\n  id int primary key generated by default as identity,\n  done boolean not null default false,\n  task text not null,\n  due timestamptz\n);\n\ninsert into api.todos (task) values\n  ('finish tutorial 0'), ('pat self on back');\n```\n\n----------------------------------------\n\nTITLE: Creating Database Roles in PostgreSQL\nDESCRIPTION: SQL commands to create the three main roles used by PostgREST: authenticator, anonymous, and webuser. The authenticator role has limited access and is used to connect to the database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE authenticator LOGIN NOINHERIT NOCREATEDB NOCREATEROLE NOSUPERUSER;\nCREATE ROLE anonymous NOLOGIN;\nCREATE ROLE webuser NOLOGIN;\n```\n\n----------------------------------------\n\nTITLE: Creating a SECURITY DEFINER Function in PostgreSQL\nDESCRIPTION: Defines a PL/pgSQL function `login` that takes email and password, returns a text token, and accesses objects in a private `auth` schema. The `SECURITY DEFINER` clause ensures the function executes with the privileges of the function's owner, allowing it to access restricted resources like the `auth` schema, regardless of the caller's permissions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_12\n\nLANGUAGE: postgres\nCODE:\n```\n-- login as a user wich has privileges on the private schemas\n\n-- create a sample function\ncreate or replace function login(email text, pass text, out token text) as $$\ndeclare\n  _role name;\nbegin\n  -- access to a private schema called 'auth'\n  select auth.user_role(email, pass) into _role;\n  -- other operations\n  -- ...\nend;\n$$ language plpgsql security definer;\n```\n\n----------------------------------------\n\nTITLE: JWT Role Claim Structure\nDESCRIPTION: Example JSON structure for a JWT claim specifying the user role. This claim is used by PostgREST for user impersonation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"user123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample PostgREST Configuration File\nDESCRIPTION: Basic configuration file for PostgREST showing the minimum required parameters: database connection URI, anonymous role, JWT secret for authentication, and server port.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# postgrest.conf\n\n# The standard connection URI format, documented at\n# https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING\ndb-uri       = \"postgres://user:pass@host:5432/dbname\"\n\n# The database role to use when no client authentication is provided.\n# Should differ from authenticator\ndb-anon-role = \"anon\"\n\n# The secret to verify the JWT for authenticated requests with.\n# Needs to be 32 characters minimum.\njwt-secret           = \"reallyreallyreallyreallyverysafe\"\njwt-secret-is-base64 = false\n\n# Port the postgrest process is listening on for http requests\nserver-port = 3000\n```\n\n----------------------------------------\n\nTITLE: Creating Database Roles\nDESCRIPTION: SQL commands to create and configure roles for anonymous web access and authentication\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut0.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\ncreate role web_anon nologin;\n\ngrant usage on schema api to web_anon;\ngrant select on api.todos to web_anon;\n\ncreate role authenticator noinherit login password 'mysecretpassword';\ngrant web_anon to authenticator;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Films and Awards in PostgreSQL\nDESCRIPTION: SQL code to create tables for actors, directors, films, technical specs, roles, competitions, and nominations. This establishes the relationships between different entities in a film database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate table actors(\n  id int primary key generated always as identity,\n  first_name text,\n  last_name text\n);\n\ncreate table directors(\n  id int primary key generated always as identity,\n  first_name text,\n  last_name text\n);\n\ncreate table films(\n  id int primary key generated always as identity,\n  director_id int references directors(id),\n  title text,\n  year int,\n  rating numeric(3,1),\n  language text\n);\n\ncreate table technical_specs(\n  film_id int references films(id) primary key,\n  runtime time,\n  camera text,\n  sound text\n);\n\ncreate table roles(\n  film_id int references films(id),\n  actor_id int references actors(id),\n  character text,\n  primary key(film_id, actor_id)\n);\n\ncreate table competitions(\n  id int primary key generated always as identity,\n  name text,\n  year int\n);\n\ncreate table nominations(\n  competition_id int references competitions(id),\n  film_id int references films(id),\n  rank int,\n  primary key (competition_id, film_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Function Returning a JWT in PostgreSQL (PL/pgSQL)\nDESCRIPTION: Creates a SECURTIY DEFINER login function that accepts user credentials and, upon validation, issues a signed JWT token containing the user's role, email, and a 1-hour expiry. It securely checks credentials using the user_role helper, raises a clear error on failure, and grants EXECUTE permission to the anon user, decoupling API clients from direct access to sensitive schemas. Requires earlier functions, pgjwt, and a secure secret or secret setting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\n  -- login should be on your exposed schema\n  create function\n  login(email text, pass text, out token text) as $$\n  declare\n    _role name;\n  begin\n    -- check email and password\n    select basic_auth.user_role(email, pass) into _role;\n    if _role is null then\n      raise invalid_password using message = 'invalid user or password';\n    end if;\n\n    select sign(\n        row_to_json(r), 'reallyreallyreallyreallyverysafe'\n      ) as token\n      from (\n        select _role as role, login.email as email,\n           extract(epoch from now())::integer + 60*60 as exp\n      ) r\n      into token;\n  end;\n  $$ language plpgsql security definer;\n\n  grant execute on function login(text,text) to anon;\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Add Function - Postgres - SQL\nDESCRIPTION: Defines an immutable SQL function 'add_them' in PostgreSQL that takes two integer parameters and returns their sum. This function must be created within the exposed schema for PostgREST and the schema cache should be refreshed after changes. Inputs are two integers ('a', 'b'), output is an integer result of their addition. No external dependencies required beyond standard SQL and a PostgreSQL database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE FUNCTION add_them(a integer, b integer)\nRETURNS integer AS $$\n SELECT a + b;\n$$ LANGUAGE SQL IMMUTABLE;\n```\n\n----------------------------------------\n\nTITLE: Upserting with On Conflict in PostgREST\nDESCRIPTION: Shows how to use the 'on_conflict' query parameter for upserting based on a UNIQUE constraint column. This example upserts employee data based on the 'name' column.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/employees?on_conflict=name\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -H \"Prefer: resolution=merge-duplicates\" \\\n  -d @- << EOF\n  [\n    { \"name\": \"Old employee 1\", \"salary\": 40000 },\n    { \"name\": \"Old employee 2\", \"salary\": 52000 },\n    { \"name\": \"New employee 3\", \"salary\": 60000 }\n  ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing an Internal Users Table with Constraints in PostgreSQL (SQL)\nDESCRIPTION: Defines an internal \\\"basic_auth.users\\\" table in PostgreSQL to store user credentials (email, password, role) with format and length checks. This table is placed in a restricted schema and is intended to support secure authentication workflows via SQL. Prerequisites include PostgreSQL and a separate non-public schema; input data are email, password, and role values. The table enforces structural constraints but role existence is enforced by a separate trigger.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n  -- We put things inside the basic_auth schema to hide\n  -- them from public view. Certain public procs/views will\n  -- refer to helpers and tables inside.\n\n  create table\n  basic_auth.users (\n    email    text primary key check ( email ~* '^.+@.+\\..+$' ),\n    pass     text not null check (length(pass) < 512),\n    role     name not null check (length(role) < 512)\n  );\n```\n\n----------------------------------------\n\nTITLE: Encrypting User Passwords Automatically with Triggers and pgcrypto in PostgreSQL (PL/pgSQL)\nDESCRIPTION: Uses the \\\"pgcrypto\\\" extension for password hashing and a trigger function to automatically hash plaintext passwords before storing or on update. The logic only re-encrypts when the password is new or changed, improving security by enforcing bcrypt hashing via crypt and gen_salt('bf'). The trigger is attached to all inserts/updates on \\\"basic_auth.users\\\". Prerequisite: The pgcrypto extension and appropriate schema permissions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\n  create extension pgcrypto;\n\n  create function\n  basic_auth.encrypt_pass() returns trigger as $$\n  begin\n    if tg_op = 'INSERT' or new.pass <> old.pass then\n      new.pass = crypt(new.pass, gen_salt('bf'));\n    end if;\n    return new;\n  end\n  $$ language plpgsql;\n\n  create trigger encrypt_pass\n    before insert or update on basic_auth.users\n    for each row\n    execute procedure basic_auth.encrypt_pass();\n```\n\n----------------------------------------\n\nTITLE: Creating a View for Complex Filtering in PostgreSQL\nDESCRIPTION: Shows how to create a view in PostgreSQL for more complex filtering scenarios, such as showing 'today's stories' including possibly older pinned stories.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE VIEW fresh_stories AS\nSELECT *\n  FROM stories\n WHERE pinned = true\n    OR published > now() - interval '1 day'\nORDER BY pinned DESC, published DESC;\n```\n\n----------------------------------------\n\nTITLE: Defining Partitioned Table with Foreign Key in PostgreSQL\nDESCRIPTION: This SQL snippet defines a `box_office` table partitioned by date range (`bo_date`). It includes a foreign key `film_id` referencing a `films` table (not shown). It also shows examples of creating partitions for specific date ranges (e.g., months of 2021). PostgREST can perform joins using foreign keys defined on the parent partitioned table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_28\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE TABLE box_office (\n  bo_date DATE NOT NULL,\n  film_id INT REFERENCES films NOT NULL,\n  gross_revenue DECIMAL(12,2) NOT NULL,\n  PRIMARY KEY (bo_date, film_id)\n) PARTITION BY RANGE (bo_date);\n\n-- Let's also create partitions for each month of 2021\n\nCREATE TABLE box_office_2021_01 PARTITION OF box_office\nFOR VALUES FROM ('2021-01-01') TO ('2021-01-31');\n\nCREATE TABLE box_office_2021_02 PARTITION OF box_office\nFOR VALUES FROM ('2021-02-01') TO ('2021-02-28');\n\n-- and so until december 2021\n```\n\n----------------------------------------\n\nTITLE: Filtering Results with Query Parameters in PostgREST\nDESCRIPTION: Shows how to filter results by adding conditions on columns, such as retrieving people under 13 years old.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?age=lt.13\"\n```\n\n----------------------------------------\n\nTITLE: Filtering IN Values in PostgREST Query\nDESCRIPTION: Demonstrates how to filter results that match a set of values using PostgREST query syntax.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_41\n\nLANGUAGE: http\nCODE:\n```\n?col=in.1,2,3\n```\n\n----------------------------------------\n\nTITLE: Creating a View with Foreign Key Relationships in PostgreSQL\nDESCRIPTION: This SQL snippet creates a view named 'nominations_view' that joins the nominations, films, and competitions tables. The view includes columns that maintain foreign key relationships, allowing for further joins.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW nominations_view AS\n  SELECT\n     films.title as film_title\n   , competitions.name as competition_name\n   , nominations.rank\n   , nominations.film_id as nominations_film_id\n   , films.id as film_id\n  FROM nominations\n  JOIN films ON films.id = nominations.film_id\n  JOIN competitions ON competitions.id = nominations.competition_id;\n```\n\n----------------------------------------\n\nTITLE: Creating a JWT Token via SQL Using pgjwt and pgcrypto (Postgres SQL)\nDESCRIPTION: Demonstrates how to create a JWT token in SQL using pgjwt's sign function, with a hard-coded role and expiration field. This function outputs the token via an OUT parameter and relies on pgcrypto and pgjwt being installed (or their functions imported). Used to generate access tokens for API authentication with a short (5 minute) expiry. Requires adding the function to an exposed/public schema; secret is hard-coded but can be improved via current_setting().\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\n  CREATE FUNCTION jwt_test(OUT token text) AS $$\n    SELECT public.sign(\n      row_to_json(r), 'reallyreallyreallyreallyverysafe'\n    ) AS token\n    FROM (\n      SELECT\n        'my_role'::text as role,\n        extract(epoch from now())::integer + 300 AS exp\n    ) r;\n  $$ LANGUAGE sql;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hybrid User-Group Roles with Inheritance in PostgreSQL\nDESCRIPTION: Demonstrates creating a hybrid role structure. It defines a `webuser` group role (NOLOGIN), an individual `user000` role (NOLOGIN) that inherits permissions from `webuser` via `GRANT webuser TO user000`, and grants the `user000` role to the `authenticator` role, allowing the authenticator to switch to `user000` for impersonation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE ROLE webuser NOLOGIN;\n-- grant this role access to certain tables etc\n\nCREATE ROLE user000 NOLOGIN;\nGRANT webuser TO user000;\n-- now user000 can do whatever webuser can\n\nGRANT user000 TO authenticator;\n-- allow authenticator to switch into user000 role\n-- (the role itself has nologin)\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data via PostgREST API - bash\nDESCRIPTION: Shows a cURL command to insert array data into the 'movies' table through PostgREST. Uses JSON input, but array fields can be given in string or JSON array format. Requires running PostgREST and a suitable backend schema. Key parameters: id, title, tags, performance_times. Data sent as single row.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/movies\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"id\": 1,\n    \"title\": \"Paddington\",\n    \"tags\": \"{family,comedy,not streamable}\",\n    \"performance_times\": \"{12:40,15:00,20:00}\"\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Security Invoker View in PostgreSQL (>= 15)\nDESCRIPTION: Creates a view `sample_view` based on `sample_table`. The `WITH (security_invoker = true)` option, available in PostgreSQL 15+, ensures that access checks (including Row Level Security policies) on the underlying table are performed using the privileges of the user querying the view (the invoker), not the view owner.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_13\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE VIEW sample_view WITH (security_invoker = true) AS\nSELECT * FROM sample_table;\n```\n\n----------------------------------------\n\nTITLE: Database Role Switching Commands\nDESCRIPTION: SQL commands for setting up role switching and granting necessary permissions to the authenticator role.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET LOCAL ROLE user123;\n```\n\nLANGUAGE: sql\nCODE:\n```\nGRANT user123 TO authenticator;\n-- similarly for the anonymous role\n-- GRANT anonymous TO authenticator;\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PostgREST and PostgreSQL\nDESCRIPTION: Docker Compose YAML configuration to run both PostgREST and PostgreSQL in containers.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  server:\n    image: postgrest/postgrest\n    ports:\n      - \"3000:3000\"\n    environment:\n      PGRST_DB_URI: postgres://app_user:password@db:5432/app_db\n      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000\n    depends_on:\n      - db\n  db:\n    image: postgres\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_DB: app_db\n      POSTGRES_USER: app_user\n      POSTGRES_PASSWORD: password\n  # Uncomment this if you want to persist the data.\n  # volumes:\n  #   - \"./pgdata:/var/lib/postgresql/data\"\n```\n\n----------------------------------------\n\nTITLE: Complex Timestamp Filtering with Special Date Values in PostgREST\nDESCRIPTION: This example shows complex filtering of timestamp data using logical operators and PostgreSQL special date values like 'today', 'tomorrow', and 'epoch'. This demonstrates advanced querying capabilities.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/reports?or=(and(due_date.gte.today,due_date.lte.tomorrow),and(due_date.gt.-infinity,due_date.lte.epoch))\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced SOAP Endpoint with Error Handling\nDESCRIPTION: Creates PostgreSQL functions for a more complex SOAP endpoint that converts fractions to decimals and handles errors, including helper functions for generating SOAP envelopes and exceptions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/create-soap-endpoint.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\n-- helper function\nCREATE OR REPLACE FUNCTION _soap_envelope(body xml)\n RETURNS xml\n LANGUAGE sql\nAS $function$\n  SELECT xmlelement(\n    NAME \"soapenv:Envelope\",\n    XMLATTRIBUTES('http://schemas.xmlsoap.org/soap/envelope/' AS \"xmlns:soapenv\"),\n    xmlelement(NAME \"soapenv:Header\"),\n    xmlelement(NAME \"soapenv:Body\", body)\n  );\n$function$;\n\n-- helper function\nCREATE OR REPLACE FUNCTION _soap_exception(\n  faultcode text,\n  faultstring text\n)\n RETURNS xml\n LANGUAGE sql\nAS $function$\n  SELECT _soap_envelope(\n    xmlelement(NAME \"soapenv:Fault\",\n      xmlelement(NAME \"faultcode\", faultcode),\n      xmlelement(NAME \"faultstring\", faultstring)\n    )\n  );\n$function$;\n\nCREATE OR REPLACE FUNCTION fraction_to_decimal(xml)\n RETURNS \"text/xml\"\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  nsarray CONSTANT text[][] := ARRAY[\n    ARRAY['soapenv', 'http://schemas.xmlsoap.org/soap/envelope/']\n  ];\n  exc_msg text;\n  exc_detail text;\n  exc_hint text;\n  exc_sqlstate text;\nBEGIN\n  -- simulating a statement that results in an exception:\n  RETURN _soap_envelope(xmlelement(\n    NAME \"decimalValue\",\n    (\n      (xpath('/soapenv:Envelope/soapenv:Body/fraction/numerator/text()', $1, nsarray))[1]::text::int\n      /\n      (xpath('/soapenv:Envelope/soapenv:Body/fraction/denominator/text()', $1, nsarray))[1]::text::int\n    )::text::xml\n  ));\nEXCEPTION WHEN OTHERS THEN\n  GET STACKED DIAGNOSTICS\n    exc_msg := MESSAGE_TEXT,\n    exc_detail := PG_EXCEPTION_DETAIL,\n    exc_hint := PG_EXCEPTION_HINT,\n    exc_sqlstate := RETURNED_SQLSTATE;\n  RAISE WARNING USING\n    MESSAGE = exc_msg,\n    DETAIL = exc_detail,\n    HINT = exc_hint;\n  RETURN _soap_exception(faultcode => exc_sqlstate, faultstring => concat(exc_msg, ', DETAIL: ', exc_detail, ', HINT: ', exc_hint));\nEND\n$function$;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Validation in PostgreSQL (PL/pgSQL)\nDESCRIPTION: This snippet defines a PostgreSQL function ('check_user') that retrieves the JWT claim for the user's email and denies access if the email matches a specified value. It uses the 'current_setting' function to extract JWT claims and can raise an exception to block malicious users. Requires PostgreSQL with PL/pgSQL enabled, assumes 'request.jwt.claims' GUC is set by PostgREST, and should be paired with the 'db-pre-request' configuration parameter for activation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\n  CREATE OR REPLACE FUNCTION check_user() RETURNS void AS $$\n  DECLARE\n    email text := current_setting('request.jwt.claims', true)::json->>'email';\n  BEGIN\n    IF email = 'evil.user@malicious.com' THEN\n      RAISE EXCEPTION 'No, you are evil'\n        USING HINT = 'Stop being so evil and maybe you can log in';\n    END IF;\n  END\n  $$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Enforcing User Role Consistency with Triggers in Postgres (PL/pgSQL)\nDESCRIPTION: Provides a trigger function and constraint trigger to ensure that any user role recorded in \\\"basic_auth.users\\\" corresponds to a valid PostgreSQL role by querying the \\\"pg_roles\\\" catalog. Raises a foreign_key_violation error if the role does not exist. Used after insert or update, this guards against orphaned or invalid role assignments in the authentication table. Requires PL/pgSQL and appropriate privileges.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\n  create function\n  basic_auth.check_role_exists() returns trigger as $$\n  begin\n    if not exists (select 1 from pg_roles as r where r.rolname = new.role) then\n      raise foreign_key_violation using message =\n        'unknown database role: ' || new.role;\n      return null;\n    end if;\n    return new;\n  end\n  $$ language plpgsql;\n\n  create constraint trigger ensure_user_role_exists\n    after insert or update on basic_auth.users\n    for each row\n    execute procedure basic_auth.check_role_exists();\n```\n\n----------------------------------------\n\nTITLE: Inserting Array Data Using JSON Format via PostgREST API - bash\nDESCRIPTION: Demonstrates a cURL command to insert an entry with array columns using JSON array syntax in the request body. Accepts id, title, tags, and performance_times fields. Requires 'movies' table and PostgREST API endpoint setup. Both tags and performance_times arrays are supplied in full JSON-compatible lists.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/movies\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"id\": 1,\n    \"title\": \"Paddington\",\n    \"tags\": [\"family\", \"comedy\", \"not streamable\"],\n    \"performance_times\": [\"12:40\", \"15:00\", \"20:00\"]\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Domain and Function for Serving Images - postgres\nDESCRIPTION: Creates a PostgreSQL domain 'image/png' based on bytea, and a function 'get_image' that returns this domain type. This pattern supports returning raw image data (PNG) from the database and can be mapped to an HTTP endpoint. Requires PostgreSQL and prior table/file setup.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_10\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"image/png\" as bytea;\n\ncreate or replace get_image(id int) returns \"image/png\" as $$\n  select file from files where id = $1;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Valued Function in PostgreSQL\nDESCRIPTION: This SQL snippet creates a function named 'getallfilms' that returns a set of rows from the 'films' table, allowing for foreign key joins on the result.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION getallfilms() RETURNS SETOF films AS $$\n  SELECT * FROM films;\n$$ LANGUAGE SQL STABLE;\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Single Unnamed JSON Parameter - Postgres - SQL\nDESCRIPTION: Defines a function 'mult_them' that takes a single JSON argument (unnamed) and returns the product of fields 'x' and 'y' retrieved from the input JSON object. Suitable for REST endpoints expecting a simple JSON payload. Requires no extra libraries, assumes input is a JSON object with numeric fields.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE FUNCTION mult_them(json) RETURNS int AS $$\n  SELECT ($1->>'x')::int * ($1->>'y')::int\n$$ LANGUAGE SQL;\n```\n\n----------------------------------------\n\nTITLE: Granting Execute Privilege on Specific Functions to a Role in PostgreSQL\nDESCRIPTION: Explicitly grants the `EXECUTE` privilege on the `login` and `signup` functions to the `anonymous` role. This is necessary to allow the `anonymous` role to call these functions, especially if default public execute privileges have been revoked.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_10\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT EXECUTE ON FUNCTION login TO anonymous;\nGRANT EXECUTE ON FUNCTION signup TO anonymous;\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with POST in PostgREST\nDESCRIPTION: Shows how to perform an upsert operation using POST with the 'Prefer: resolution=merge-duplicates' header. This example upserts product data based on the SKU as the primary key.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/products\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -H \"Prefer: resolution=merge-duplicates\" \\\n  -d @- << EOF\n  [\n    { \"sku\": \"CL2031\", \"name\": \"Existing T-shirt\", \"price\": 35 },\n    { \"sku\": \"CL2040\", \"name\": \"Existing Hoodie\", \"price\": 60 },\n    { \"sku\": \"AC1022\", \"name\": \"New Cap\", \"price\": 30 }\n  ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Insert Rows with Missing Values using Default Preference (PostgREST API, Bash)\nDESCRIPTION: Uses a curl POST request to insert multiple rows, utilizing 'Prefer: missing=default' header so that missing columns receive the database default rather than null. Demonstrates using an inline (heredoc) JSON array as payload. Dependencies: curl, created SQL table, PostgREST. Input: columns query param, Prefer headers, JSON list. Output: inserted rows' representations.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/foo?columns=id,bar,baz\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: missing=default, return=representation\" \\\n  -d @- << EOF\n    [\n      { \"bar\": \"val1\" },\n      { \"bar\": \"val2\", \"baz\": 15 }\n    ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Tables with Multiple Foreign Keys in SQL\nDESCRIPTION: This SQL snippet defines two tables, `addresses` and `orders`. The `orders` table has two foreign key columns (`billing_address_id` and `shipping_address_id`) that both reference the `addresses` table's primary key (`id`). This setup creates ambiguity when trying to join `orders` with `addresses` without specifying which relationship to use.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nstate text,\npostal_code char(5)\n);\n\ncreate table orders (\nid int primary key generated always as identity,\nname text,\nbilling_address_id int,\nshipping_address_id int,\nconstraint billing  foreign key(billing_address_id) references addresses(id),\nconstraint shipping foreign key(shipping_address_id) references addresses(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Upload Function for Binary Data (bytea) - postgres\nDESCRIPTION: Defines a 'files' table with an auto-incrementing primary key and a bytea column, plus an SQL function 'upload_binary' for uploading binary files. Allows inserting files as binary data via a stored function. Basic requirements: PostgreSQL, proper privileges, familiarity with bytea type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_7\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table files (\n  id int primary key generated always as identity,\n  file bytea\n);\n\ncreate function upload_binary(bytea) returns void as $$\n  insert into files (file) values ($1);\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Raising a Custom HTTP Status Code (PT402) in PostgreSQL\nDESCRIPTION: Demonstrates how to raise a specific PostgREST error code (PT402) within a PostgreSQL function to control the HTTP status code returned by PostgREST. This example sets the status to 402 Payment Required and includes custom message, detail, and hint.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\nRAISE sqlstate 'PT402' using\n  message = 'Payment Required',\n  detail = 'Quota exceeded',\n  hint = 'Upgrade your plan';\n```\n\n----------------------------------------\n\nTITLE: Requesting an Exact Count of Rows - Bash (curl)\nDESCRIPTION: Shows how to request the total number of rows (exact count) from a resource using curl with range and 'Prefer: count=exact' headers. Requires a PostgREST server. The response includes a Content-Range header with the total row count. Slower for large tables.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/bigtable\" -I \\\n  -H \"Range-Unit: items\" \\\n  -H \"Range: 0-24\" \\\n  -H \"Prefer: count=exact\"\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST with Configuration File\nDESCRIPTION: Command to run PostgREST with a configuration file and generate a sample config file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npostgrest /path/to/postgrest.conf\n\n# You can also generate a sample config file with\n# postgrest -e > postgrest.conf\n# You'll need to edit this file and remove the usage parts for postgrest to read it\n```\n\n----------------------------------------\n\nTITLE: Creating Inlinable Set-Returning Function Example - Postgres - SQL\nDESCRIPTION: Defines the 'getallprojects' function, returning all rows from 'projects' as a set. Written as a stable SQL function supporting PostgreSQL inlining optimizations for improved query planning. Can be filtered and ordered from REST endpoints.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_23\n\nLANGUAGE: postgres\nCODE:\n```\ncreate function getallprojects() returns setof projects\nlanguage sql stable\nas $$\n  select * from projects;\n$$;\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Schema Cache Reload Trigger - PostgreSQL\nDESCRIPTION: This snippet creates a PostgreSQL event trigger function, 'pgrst_watch', in PL/pgSQL to issue a NOTIFY to the 'pgrst' channel whenever a DDL command ends. It also defines and enables an event trigger to execute this function, automating schema cache reloads after schema changes. Useful for always keeping the cache up-to-date; assumes PostgREST is configured to listen on 'pgrst'.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/schema_cache.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\n-- Create an event trigger function\nCREATE OR REPLACE FUNCTION pgrst_watch() RETURNS event_trigger\n  LANGUAGE plpgsql\n  AS $$\nBEGIN\n  NOTIFY pgrst, 'reload schema';\nEND;\n$$;\n\n-- This event trigger will fire after every ddl_command_end event\nCREATE EVENT TRIGGER pgrst_watch\n  ON ddl_command_end\n  EXECUTE PROCEDURE pgrst_watch();\n```\n\n----------------------------------------\n\nTITLE: Cross-Resource OR Filtering\nDESCRIPTION: Example of OR filtering across multiple embedded resources to find films with actors or directors named John\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d \"select=title,actors(),directors()\" \\\n    -d \"directors.first_name=eq.John\" \\\n    -d \"actors.first_name=eq.John\" \\\n    -d \"or=(directors.not.is.null,actors.not.is.null)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"title\": \"Pulp Fiction\" },\n  { \"title\": \"The Thing\" },\n  \"..\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Sanitization Function in PostgreSQL\nDESCRIPTION: Defines a function to sanitize HTML content by replacing special characters with their HTML entities.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.sanitize_html(text) returns text as $$\n  select replace(replace(replace(replace(replace($1, '&', '&amp;'), '\"', '&quot;'),'>', '&gt;'),'<', '&lt;'), '''', '&apos;')\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverse Proxy for PostgREST with Nginx (nginx)\nDESCRIPTION: Defines an Nginx HTTP configuration to proxy API requests from the /api/ path to a PostgREST server running on localhost:3000. It sets proxy headers for JSON content, hides or modifies certain headers, and ensures requests are proxied using HTTP 1.1. Requires Nginx to be installed, with configuration placed in an appropriate file (such as /etc/nginx/sites-enabled/default for Ubuntu). Expected input is HTTP API requests; output is the proxied response from PostgREST. Constraints include maintaining upstream naming consistency and ensuring PostgREST runs on the configured port.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/nginx.rst#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n  # ...\n  # upstream configuration\n  upstream postgrest {\n    server localhost:3000;\n  }\n  # ...\n  server {\n    # ...\n    # expose to the outside world\n    location /api/ {\n      default_type  application/json;\n      proxy_hide_header Content-Location;\n      add_header Content-Location  /api/$upstream_http_content_location;\n      proxy_set_header  Connection \"\";\n      proxy_http_version 1.1;\n      proxy_pass http://postgrest/;\n    }\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Function with JSONB Parameter - Postgres - SQL\nDESCRIPTION: Creates the 'update_data' PostgreSQL function that accepts a JSONB array parameter, loops through each object, and performs updates on 'data_table' based on fields from each JSON. Assumes 'data_table' with 'data_text_column' and 'data_int_column' exists. This technique is useful for batch operations via a single API call.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE FUNCTION update_data(p_json jsonb)\nRETURNS void AS $$\nDECLARE\n  json_item json;\nBEGIN\n  FOR json_item IN SELECT jsonb_array_elements(p_json) LOOP\n    UPDATE data_table SET data_text_column = (json_item->>'data_text')::text \n      WHERE data_int_column = (json_item->>'data_int')::integer;\n  END LOOP;\nEND;\n$$ LANGUAGE SQL IMMUTABLE;\n```\n\n----------------------------------------\n\nTITLE: Paginated API Request Using Query Parameters - Bash (curl)\nDESCRIPTION: Demonstrates how to call a PostgREST API endpoint using curl with limit and offset query parameters to paginate results. No libraries beyond curl are required. The 'limit' restricts the number of results, and 'offset' skips the first N items. The server always returns range headers regardless of the use of parameters.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?limit=15&offset=30\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Vertical Filtering on Computed Field\nDESCRIPTION: This snippet shows the expected JSON response format when performing vertical filtering that includes the 'full_name' computed field.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"full_name\": \"Samuel Beckett\", \"job\": \"novelist\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Reloading Schema Cache Using SIGUSR1 Signal - Bash\nDESCRIPTION: This snippet demonstrates how to manually reload the PostgREST schema cache without restarting the server by sending a SIGUSR1 signal using shell commands such as killall or docker kill. The server process receives the signal and reloads the cache, preventing staleness after schema changes. Replace the process name or Docker identifiers appropriately for your deployment.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/schema_cache.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkillall -SIGUSR1 postgrest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker kill -s SIGUSR1 <container>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose kill -s SIGUSR1 <service>\n```\n\n----------------------------------------\n\nTITLE: Altering Files Table to Include Media Type and Name in PostgreSQL\nDESCRIPTION: This SQL code modifies the 'files' table to add columns for the file type (automatically generated) and name, using the pg_byteamagic extension.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\nalter table files\n  add column type text generated always as (byteamagic_mime(substr(blob, 0, 4100))) stored,\n  add column name text;\n```\n\n----------------------------------------\n\nTITLE: Full Text Search in PostgREST Query\nDESCRIPTION: Shows how to perform full text search using PostgREST query syntax, utilizing PostgreSQL's text search capabilities.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_38\n\nLANGUAGE: http\nCODE:\n```\n/foo?text_vector=@@.bar\n```\n\n----------------------------------------\n\nTITLE: API Response With Exact Count Information - HTTP\nDESCRIPTION: This is a PostgREST HTTP response when 'Prefer: count=exact' is used, showing the exact item count in the Content-Range header. The status 206 indicates partial content returned with the range and total. Used in pagination UI to render the number of all items across results.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 206 Partial Content\\nRange-Unit: items\\nContent-Range: 0-24/3573458\n```\n\n----------------------------------------\n\nTITLE: Finer-Grained Event Triggers for Schema Cache Reload - PostgreSQL\nDESCRIPTION: These advanced PostgreSQL PL/pgSQL snippets define two event trigger functions and their triggers for selective schema cache reloads. 'pgrst_ddl_watch' notifies on specific CREATE/ALTER DDL events (excluding pg_temp), while 'pgrst_drop_watch' listens for DROP events (excluding temporary objects). They both emit a NOTIFY to 'pgrst' for relevant schema changes, minimizing unnecessary reloads. Requires event trigger privileges, PL/pgSQL, and PostgREST configured for notifications.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/schema_cache.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\n-- watch CREATE and ALTER\nCREATE OR REPLACE FUNCTION pgrst_ddl_watch() RETURNS event_trigger AS $$\nDECLARE\n  cmd record;\nBEGIN\n  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()\n  LOOP\n    IF cmd.command_tag IN (\n      'CREATE SCHEMA', 'ALTER SCHEMA'\n    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'\n    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'\n    , 'CREATE VIEW', 'ALTER VIEW'\n    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'\n    , 'CREATE FUNCTION', 'ALTER FUNCTION'\n    , 'CREATE TRIGGER'\n    , 'CREATE TYPE', 'ALTER TYPE'\n    , 'CREATE RULE'\n    , 'COMMENT'\n    )\n    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp\n    AND cmd.schema_name is distinct from 'pg_temp'\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $$ LANGUAGE plpgsql;\n\n-- watch DROP\nCREATE OR REPLACE FUNCTION pgrst_drop_watch() RETURNS event_trigger AS $$\nDECLARE\n  obj record;\nBEGIN\n  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n  LOOP\n    IF obj.object_type IN (\n      'schema'\n    , 'table'\n    , 'foreign table'\n    , 'view'\n    , 'materialized view'\n    , 'function'\n    , 'trigger'\n    , 'type'\n    , 'rule'\n    )\n    AND obj.is_temporary IS false -- no pg_temp objects\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $$ LANGUAGE plpgsql;\n\nCREATE EVENT TRIGGER pgrst_ddl_watch\n  ON ddl_command_end\n  EXECUTE PROCEDURE pgrst_ddl_watch();\n\nCREATE EVENT TRIGGER pgrst_drop_watch\n  ON sql_drop\n  EXECUTE PROCEDURE pgrst_drop_watch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Plan Requests with PostgreSQL Function - PL/pgSQL\nDESCRIPTION: Defines a PostgreSQL function in PL/pgSQL that examines incoming request headers to restrict access to the execution plan feature based on client IP address and the Accept header. Intended to be set as a db-pre-request hook in PostgREST config, it aborts the request if an unauthorized client attempts to use the feature. Depends on access to the 'request.headers' setting, typically provided by PostgREST, and usage via postgrest.conf (db-pre-request hook). Parameters: uses headers and their properties such as 'x-forwarded-for' and 'accept'. No expected input parameters; output is handled via exception or void. Limitations: Relies on correct header population by upstream proxy (e.g., Nginx/Cloudflare); IP filtering is hardcoded.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_21\n\nLANGUAGE: postgres\nCODE:\n```\n-- Assuming a proxy(Nginx, Cloudflare, etc) passes an \"X-Forwarded-For\" header(https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)\ncreate or replace function filter_plan_requests()\nreturns void as $$\ndeclare\n  headers   json := current_setting('request.headers', true)::json;\n  client_ip text := coalesce(headers->>'x-forwarded-for', '');\n  accept    text := coalesce(headers->>'accept', '');\nbegin\n  if accept like 'application/vnd.pgrst.plan%' and client_ip != '144.96.121.73' then\n    raise insufficient_privilege using\n      message = 'Not allowed to use application/vnd.pgrst.plan';\n  end if;\nend; $$ language plpgsql;\n\n-- set this function on your postgrest.conf\n-- db-pre-request = filter_plan_requests\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function to Generate GeoJSON Collections\nDESCRIPTION: This function builds a GeoJSON FeatureCollection from a table containing geometry data. It formats each row as a Feature with geometry and properties attributes, useful for older PostGIS versions that don't support direct GeoJSON output.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_29\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function coverage_geo_collection() returns json as $$\n  select\n    json_build_object(\n      'type', 'FeatureCollection',\n      'features', json_agg(\n        json_build_object(\n          'type', 'Feature',\n          'geometry', st_AsGeoJSON(c.area)::json,\n          'properties', json_build_object('id', c.id, 'name', c.name)\n        )\n      )\n    )\n  from coverage c;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Querying Recursive Many-To-One Relationship with PostgREST using cURL\nDESCRIPTION: This cURL command queries the `employees` endpoint for the employee with `id=3`. It uses the `select` parameter to retrieve the employee's `last_name` and embed the `last_name` of their supervisor using the `supervisor` computed relationship function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/employees?select=last_name,supervisor(last_name)&id=eq.3\"\n\ncurl --get \"http://localhost:3000/employees\" \\\n  -d \"select=last_name,supervisor(last_name)\" \\\n  -d \"id=eq.3\"\n```\n\n----------------------------------------\n\nTITLE: Querying Recursive One-To-Many Relationship with PostgREST using cURL\nDESCRIPTION: This cURL command queries the `employees` endpoint for the employee with `id=1`. It uses the `select` parameter to retrieve the employee's `last_name` and embed the `last_name` of their direct reports using the `supervisees` computed relationship function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/employees?select=last_name,supervisees(last_name)&id=eq.1\"\n\ncurl --get \"http://localhost:3000/employees\" \\\n  -d \"select=last_name,supervisees(last_name)\" \\\n  -d \"id=eq.1\"\n```\n\n----------------------------------------\n\nTITLE: Asymmetric JWT Configuration\nDESCRIPTION: Example JSON Web Key configuration for RSA-256 public key authentication in PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\":\"RS256\",\n  \"e\":\"AQAB\",\n  \"key_ops\":[\"verify\"],\n  \"kty\":\"RSA\",\n  \"n\":\"9zKNYTaYGfGm1tBMpRT6FxOYrM720GhXdettc02uyakYSEHU2IJz90G_MLlEl4-WWWYoS_QKFupw3s7aPYlaAjamG22rAnvWu-rRkP5sSSkKvud_IgKL4iE6Y2WJx2Bkl1XUFkdZ8wlEUR6O1ft3TS4uA-qKifSZ43CahzAJyUezOH9shI--tirC028lNg767ldEki3WnVr3zokSujC9YJ_9XXjw2hFBfmJUrNb0-wldvxQbFU8RPXip-GQ_JPTrCTZhrzGFeWPvhA6Rqmc3b1PhM9jY7Dur1sjYWYVyXlFNCK3c-6feo5WlRfe1aCWmwZQh6O18eTmLeT4nWYkDzQ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a View with Embedded Foreign Key Joins using cURL\nDESCRIPTION: This bash snippet demonstrates how to query the 'nominations_view' with embedded foreign key joins to the films, roles, and actors tables using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/nominations_view\" \\\n  -d \"select=film_title,films(language),roles(character),actors(last_name,first_name)\" \\\n  -d \"rank=eq.5\"\n```\n\n----------------------------------------\n\nTITLE: Starting PostgREST with Configuration File\nDESCRIPTION: Command to start the PostgREST server by specifying the path to the configuration file as its only argument.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./postgrest /path/to/postgrest.conf\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated POST Request with cURL\nDESCRIPTION: cURL command to add a new todo item using a JWT for authentication.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport TOKEN=\"<paste token here>\"\n\ncurl http://localhost:3000/todos -X POST \\\n     -H \"Authorization: Bearer $TOKEN\"   \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"task\": \"learn how to auth\"}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Embedded Resources with OR Condition using cURL\nDESCRIPTION: This bash snippet shows how to use an OR condition to filter embedded resources, specifically roles with certain characters, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n -d \"select=*,roles(*)\" \\\n -d \"roles.or=(character.eq.Gummo,character.eq.Zeppo)\"\n```\n\n----------------------------------------\n\nTITLE: Deleting with Prefer Return in PostgREST\nDESCRIPTION: Demonstrates deleting a record and returning the deleted data using the 'Prefer: return=representation' header. This example deletes a user with ID 1 and returns the deleted user's information.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/user?id=eq.1\" -X DELETE \\\n  -H \"Prefer: return=representation\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Table with JSON Column in PostgreSQL - postgres\nDESCRIPTION: Creates a 'products' table with an id, name, and extra_info columns, the latter being of type JSON. Provides a backend schema for storing arbitrary data per row, supporting flexible metadata and ad-hoc structures.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_23\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table products (\n  id int primary key,\n  name text unique,\n  extra_info json\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Timestamptz Data with Timezone in PostgREST\nDESCRIPTION: This command shows how to insert records with timestamptz values that include explicit timezone information. The dates are specified with 'Australia/Sydney' timezone.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/reports\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '[{ \"id\": 1, \"due_date\": \"2022-02-24 11:10:15 Australia/Sydney\" },{ \"id\": 2, \"due_date\": \"2022-02-27 22:00:00 Australia/Sydney\" }]'\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Description with SQL Comments in PostgreSQL\nDESCRIPTION: Demonstrates how to use SQL COMMENT statements to add descriptions to database objects that will appear in the OpenAPI output. This includes comments on schemas, tables, views, and columns.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nCOMMENT ON SCHEMA mammals IS\n  'A warm-blooded vertebrate animal of a class that is distinguished by the secretion of milk by females for the nourishment of the young';\n\nCOMMENT ON TABLE monotremes IS\n  'Freakish mammals lay the best eggs for breakfast';\n\nCOMMENT ON VIEW monotremes_v IS\n  'Only the platypus is publicly visible';\n\nCOMMENT ON COLUMN monotremes.has_venomous_claw IS\n  'Sometimes breakfast is not worth it';\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive One-To-Many Relationship in PostgreSQL\nDESCRIPTION: This SQL snippet defines an `employees` table with a recursive one-to-many relationship. The `supervisor_id` column references the `id` of the same table, allowing an employee (supervisor) to be linked to multiple other employees (supervisees).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_17\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate table employees (\n  id int primary key generated always as identity,\n  first_name text,\n  last_name text,\n  supervisor_id int references employees(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Granting Table Operation Privileges to a Role in PostgreSQL\nDESCRIPTION: Grants specific DML privileges on the `chat` table to the `webuser` role. It allows `SELECT`, `INSERT`, `DELETE`, and `UPDATE` operations, but restricts `UPDATE` to only the `message_body` column, demonstrating column-level permission control.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_7\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT\n  SELECT\n, INSERT\n, UPDATE(message_body)\n, DELETE\nON chat TO webuser;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP 504 Timeout Error from PostgREST - HTTP\nDESCRIPTION: This snippet shows a sample HTTP response returned by PostgREST when an HTTP request times out due to all available connections in the pool being busy. The response includes the standard 504 Gateway Timeout status and a JSON message body describing the timeout error. Users can use this as a reference to recognize this specific error scenario, allowing for faster diagnostics and troubleshooting of their API deployments. No external dependencies are required, but this response occurs under heavy usage or when the pool size and/or performance are constrained.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/connection_pool.rst#2025-04-23_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 504 Gateway Timeout\n\n{\"code\":\"PGRST003\",\n \"details\":null,\n \"hint\":null,\n \"message\":\"Timed out acquiring connection from connection pool.\"}\n\n```\n\n----------------------------------------\n\nTITLE: Calling Array Parameter Function via GET with Array Literal - Bash\nDESCRIPTION: Illustrates how to call the 'plus_one' function via curl using GET and an array literal encoded as a query parameter. Array literals must be URL-encoded. The function returns an array as JSON.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one?arr=%7B1,2,3,4%7D'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Token Revocation Function in PostgreSQL\nDESCRIPTION: SQL commands to create a schema and function for checking and potentially revoking JWT tokens.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\ncreate schema auth;\ngrant usage on schema auth to web_anon, todo_user;\n\ncreate or replace function auth.check_token() returns void\n  language plpgsql\n  as $$\nbegin\n  if current_setting('request.jwt.claims', true)::json->>'email' =\n     'disgruntled@mycompany.com' then\n    raise insufficient_privilege\n      using hint = 'Nope, we are on to you';\n  end if;\nend\n$$;\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search on a Computed Field with PostgREST\nDESCRIPTION: This example demonstrates how to use a curl command to perform a full-text search on the 'full_name' computed field via PostgREST API.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?full_name=fts.Beckett\"\n```\n\n----------------------------------------\n\nTITLE: Adding Generated Columns in PostgreSQL for GeoJSON Properties\nDESCRIPTION: This snippet demonstrates how to add a generated column to a table that will automatically calculate and store the area of a geometry. The column will appear in the properties object of each GeoJSON Feature.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_28\n\nLANGUAGE: postgres\nCODE:\n```\nalter table coverage\n  add square_units double precision generated always as ( st_area(area) ) stored;\n```\n\n----------------------------------------\n\nTITLE: Negating Filters in PostgREST Query\nDESCRIPTION: Shows how to negate any filter in a uniform way using PostgREST query syntax.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_36\n\nLANGUAGE: http\nCODE:\n```\n?col=not.eq=foo\n```\n\n----------------------------------------\n\nTITLE: Single Row Upsert with PUT in PostgREST\nDESCRIPTION: Demonstrates how to perform a single row upsert using PUT and filtering on the primary key. This example upserts an employee record with ID 4.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost/employees?id=eq.4\" \\\n  -X PUT -H \"Content-Type: application/json\" \\\n  -d '{ \"id\": 4, \"name\": \"Sara B.\", \"salary\": 60000 }'\n```\n\n----------------------------------------\n\nTITLE: XML Request with application/xml Accept Header\nDESCRIPTION: Curl request specifying application/xml Accept header. Successfully returns XML data with 200 OK response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines.xml' -i  \\\n    -H \"Accept: application/xml\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error Response JSON Format\nDESCRIPTION: JSON structure of a PostgreSQL error forwarded by PostgREST, including error code, details, hint, and message fields for a not-null constraint violation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"23502\",\n    \"details\": \"Failing row contains (null, foo, null).\",\n    \"hint\": null,\n    \"message\": \"null value in column \\\"id\\\" of relation \\\"projects\\\" violates not-null constraint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Relationships for Recursive Many-To-Many in PostgreSQL\nDESCRIPTION: These PostgreSQL functions, `subscribers` and `following`, define computed relationships for the `users` table using the `subscriptions` junction table. `subscribers` finds all users who subscribe to the input user (`$1`). `following` finds all users the input user (`$1`) subscribes to. Both return a set of users.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_25\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function subscribers(users) returns setof users as $$\n  select u.*\n  from users u,\n       subscriptions s\n  where s.subscriber_id = u.id and\n        s.subscribed_id = $1.id\n$$ stable language sql;\n\ncreate or replace function following(users) returns setof users as $$\n  select u.*\n  from users u,\n       subscriptions s\n  where s.subscribed_id = u.id and\n        s.subscriber_id = $1.id\n$$ stable language sql;\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Table with Timestamp with Time Zone\nDESCRIPTION: This SQL creates a table with a timestamptz column, which stores timestamps with timezone information. This allows for timezone-aware date handling in the database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_37\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table reports (\n  id int primary key\n  , due_date timestamptz\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Handler for TWKB Output in PostgreSQL\nDESCRIPTION: Defines a PostgreSQL function `get_line` that takes an integer ID and returns the TWKB representation of the corresponding line's geometry. By returning the custom domain `\"application/vnd.twkb\"`, this function acts as a PostgREST media type handler for requests targeting `/rpc/get_line` with an `Accept: application/vnd.twkb` header. Note: For PostgreSQL <= 12, an explicit cast `st_astwkb(geom)::\"application/vnd.twkb\"` is needed.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function get_line (id int)\nreturns \"application/vnd.twkb\" as $$\n  select st_astwkb(geom) from lines where id = get_line.id;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Example Client Login Request Using curl (Bash)\nDESCRIPTION: Shows a sample API consumer using curl to post a JSON payload (email, password) to the PostgREST /rpc/login function endpoint, using JSON content headers and POST method. Demonstrates client integration for authentication flows. Requires the server running on localhost:3000 with the exposed login function and correct configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n  curl \"http://localhost:3000/rpc/login\" \\\n    -X POST -H \"Content-Type: application/json\" \\\n    -d '{ \"email\": \"foo@bar.com\", \"pass\": \"foobar\" }'\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Claims via current_setting in PostgreSQL (<14)\nDESCRIPTION: Shows the method for retrieving a specific JWT claim ('email') in PostgreSQL versions before 14. It uses `current_setting` with a specific key format (`request.jwt.claim.email`) provided by PostgREST for individual claims. The `true` argument ensures NULL is returned if the claim is not present in the JWT.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_setting('request.jwt.claim.email', true);\n```\n\n----------------------------------------\n\nTITLE: Calling Overloaded Functions via PostgREST\nDESCRIPTION: Demonstrates how to call overloaded functions through PostgREST's API with different parameter combinations.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/rental_duration?customer_id=232\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/rental_duration?customer_id=232&from_date=2018-07-01\"\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregate Function Query in PostgREST\nDESCRIPTION: Demonstrates how to use a basic sum() aggregate function on the amount column of orders table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=amount.sum()\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"sum\": 1234.56\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Request Example\nDESCRIPTION: Curl command showing how to make an authenticated request using a JWT token in the Authorization header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/foo\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiamRvZSIsImV4cCI6MTQ3NTUxNjI1MH0.GYDZV3yM0gqvuEtJmfpplLBXSGYnke_Pvnl0tbKAjB4\"\n```\n\n----------------------------------------\n\nTITLE: Top-level Filtering with Embedded Resources using cURL\nDESCRIPTION: This bash snippet shows how to perform top-level filtering with embedded resources, specifically retrieving only films with actors named 'Jehanne', using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n  -d \"select=title,actors!inner(first_name,last_name)\" \\\n  -d \"actors.first_name=eq.Jehanne\"\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Connection String (Keyword/Value Format)\nDESCRIPTION: Demonstrates the keyword/value format for providing PostgreSQL connection details to PostgREST. This format specifies parameters like host, port, user, password, and database name directly in the configuration string. It serves as an alternative to the URI format.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_9\n\nLANGUAGE: config\nCODE:\n```\n\"host=localhost port=5433 user=authenticator password=mysecretpassword dbname=postgres\"\n```\n\n----------------------------------------\n\nTITLE: Calling Untyped Function via PostgREST API\nDESCRIPTION: Shows how to call the untyped record function through PostgREST's HTTP endpoint using curl. The function returns all project records.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/projects_setof_record\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Composite Type and Table in PostgreSQL - postgres\nDESCRIPTION: Creates a custom composite type 'dimension', then a table 'products' with a column of that composite type. Also shows example insert of composite literal as a tuple. These structures are prerequisites for later examples on interacting with complex objects via API.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_12\n\nLANGUAGE: postgres\nCODE:\n```\ncreate type dimension as (\n  length decimal(6,2),\n  width decimal (6,2),\n  height decimal (6,2),\n  unit text\n);\n\ncreate table products (\n  id int primary key,\n  size dimension\n);\n\ninsert into products (id, size)\nvalues (1, '(5.0,5.0,10.0,\"cm\")');\n```\n\n----------------------------------------\n\nTITLE: Creating a Table and Computed Field Function in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to create a table 'people' and a computed field 'full_name' using a PostgreSQL function that combines data from two columns.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE TABLE people (\n  first_name text\n, last_name  text\n, job        text\n);\n\n-- a computed field that combines data from two columns\nCREATE FUNCTION full_name(people)\nRETURNS text AS $$\n  SELECT $1.first_name || ' ' || $1.last_name;\n$$ LANGUAGE SQL;\n```\n\n----------------------------------------\n\nTITLE: Example JWT Login Token Response (JSON)\nDESCRIPTION: Presents a sample JSON response received from the /rpc/login endpoint after successful authentication, returning a JWT token. The token is ready to be used by the client for authenticated requests and can be decoded with the specified secret at jwt.io. Expect this format as output.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZvb0BiYXIuY29tIiwicGFzcyI6ImZvb2JhciJ9.37066TTRlh-1hXhnA9oO9Pj6lgL6zFuJU0iCHhuCFno\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Aggregates in Embedded Resources\nDESCRIPTION: Shows how to use aggregate functions within embedded resources.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/customers?select=name,city,state,orders(amount.sum(),order_date)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Customer A\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"orders\": [\n      {\n        \"sum\": 215.22,\n        \"order_date\": \"2023-09-01\"\n      },\n      {\n        \"sum\": 905.73,\n        \"order_date\": \"2023-09-02\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Customer B\",\n    \"city\": \"Los Angeles\",\n    \"state\": \"CA\",\n    \"orders\": [\n      {\n        \"sum\": 329.71,\n        \"order_date\": \"2023-09-01\"\n      },\n      {\n        \"sum\": 425.87,\n        \"order_date\": \"2023-09-03\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting Estimated Count With Threshold Logic - Bash (curl) for Large Table\nDESCRIPTION: Uses curl to request an estimated count for a large table with 'Prefer: count=estimated', causing PostgREST to fall back to a planned count as the table size exceeds the threshold. Ensures performance by avoiding costly exact counts on vast datasets.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/bigtable?limit=25\" -I \\\n  -H \"Prefer: count=estimated\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Schema for POST/PATCH/PUT/DELETE Requests using curl (Bash)\nDESCRIPTION: Demonstrates how to use the `Content-Profile` HTTP header with curl to specify which schema PostgREST should use for data modification requests (POST, PATCH, PUT, DELETE). This example shows selecting the 'tenant2' schema for a POST request to the `/items` endpoint.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/items\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -H \"Content-Profile: tenant2\" \\\n  -d '{...}'\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response with Custom Status, Headers, and Body\nDESCRIPTION: Shows the resulting HTTP response when using the 'PGRST' SQLSTATE method. Note the custom status code (402), the custom header (X-Powered-By: Nerd Rage), and the fully customized JSON response body, all defined within the PostgreSQL RAISE statement.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 402 Payment Required\nContent-Type: application/json; charset=utf-8\nX-Powered-By: Nerd Rage\n\n{\n  \"message\": \"Payment Required\",\n  \"details\": \"Quota exceeded\",\n  \"hint\": \"Upgrade your plan\",\n  \"code\": \"123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Filtering in PostgREST\nDESCRIPTION: Demonstrates how to apply complex logic to conditions using multiple operators and parentheses.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/people\" \\\n  -d \"grade=gte.90\" \\\n  -d \"student=is.true\" \\\n  -d \"or=(age.eq.14,not.and(age.gte.11,age.lte.17))\"\n```\n\n----------------------------------------\n\nTITLE: Calling a JSON Array Function via POST - PostgREST - Bash\nDESCRIPTION: Shows how to send a JSON array to the 'update_data' function via curl and PostgREST. The request embeds the input array under the 'p_json' key, which matches the function parameter name. Input must be a well-formed JSON array of objects, and the request header specifies application/json.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/update_data\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{ \"p_json\": [ { \"data_text\": \"one\", \"data_int\": \"1\" }, { \"data_text\": \"two\", \"data_int\": \"2\" } ] }'\n```\n\n----------------------------------------\n\nTITLE: Updating Records with PATCH in PostgREST\nDESCRIPTION: Demonstrates how to update rows in a table using the PATCH verb with a filter. This example updates the 'category' column to 'child' for all people under 13 years old.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?age=lt.13\" \\\n  -X PATCH -H \"Content-Type: application/json\" \\\n  -d '{ \"category\": \"child\" }'\n```\n\n----------------------------------------\n\nTITLE: Upserting with Surrogate Primary Keys in PostgREST\nDESCRIPTION: Demonstrates upserting data with surrogate primary keys using POST, 'Prefer: resolution=merge-duplicates', and 'Prefer: missing=default' headers. This example upserts employee data with a mix of existing and new records.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/employees?colums=id,name,salary\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -H \"Prefer: resolution=merge-duplicates, missing=default\" \\\n  -d @- << EOF\n  [\n    { \"id\": 1, \"name\": \"Existing employee 1\", \"salary\": 30000 },\n    { \"id\": 2, \"name\": \"Existing employee 2\", \"salary\": 42000 },\n    { \"name\": \"New employee 3\", \"salary\": 50000 }\n  ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST Docker Container\nDESCRIPTION: Docker command to run PostgREST container connected to an existing native database on the host.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --net=host \\\n  -e PGRST_DB_URI=\"postgres://app_user:password@localhost/postgres\" \\\n  postgrest/postgrest\n```\n\n----------------------------------------\n\nTITLE: Creating Table and Binary Upload Function - Postgres - SQL\nDESCRIPTION: Defines a table 'files' with a single bytea column and a function 'upload_binary' to insert raw binary data into the database. Supports handling file uploads via REST endpoints, with the function accepting a single unnamed bytea parameter. Requires 'files' table to exist before calling the function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE TABLE files(blob bytea);\n\nCREATE FUNCTION upload_binary(bytea) RETURNS void AS $$\n  INSERT INTO files(blob) VALUES ($1);\n$$ LANGUAGE SQL;\n```\n\n----------------------------------------\n\nTITLE: Viewing PostgREST SQL Query Logs (Log/SQL)\nDESCRIPTION: Example log output when PostgREST is configured with `log-level = \"warn\"` and `log-query = \"main-query\"`, and a request results in an error (HTTP 401). The first line shows the SQL query generated by PostgREST for the request. The second line is the standard request log entry indicating the error.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_4\n\nLANGUAGE: Log\nCODE:\n```\n17/Feb/2025:17:28:15 -0500: WITH pgrst_source AS ( SELECT \"public\".\"protected_table\".* FROM \"public\".\"protected_table\"  )  SELECT null::bigint AS total_result_set, pg_catalog.count(_postgrest_t) AS page_total, coalesce(json_agg(_postgrest_t), '[]') AS body, nullif(current_setting('response.headers', true), '') AS response_headers, nullif(current_setting('response.status', true), '') AS response_status, '' AS response_inserted FROM ( SELECT * FROM pgrst_source ) _postgrest_t\n127.0.0.1 - web_anon [17/Feb/2025:17:28:15 -0500] \"GET /protected_table HTTP/1.1\" 401 - \"\" \"curl/8.7.1\"\n```\n\n----------------------------------------\n\nTITLE: Calling Array Parameter Function via POST with Array Literal (Pre-PostgreSQL 10) - Bash\nDESCRIPTION: For older PostgreSQL versions, demonstrates quoting array literals in JSON when calling 'plus_one'. Input array is a string, not native JSON array. Useful for backward compatibility.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{ \"arr\": \"{1,2,3,4}\" }'\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Claims via current_setting in PostgreSQL (>=14)\nDESCRIPTION: Demonstrates retrieving a custom JWT claim ('email') within SQL for PostgreSQL 14 and later. It uses the `current_setting` function with the `request.jwt.claims` key (which holds the full JSON payload from PostgREST) and the JSON `->>` operator to extract the text value of the 'email' key. The `true` argument makes the function return NULL if the setting is not found.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_setting('request.jwt.claims', true)::json->>'email';\n```\n\n----------------------------------------\n\nTITLE: Table Creation for Missing Column Testing (PostgreSQL, SQL)\nDESCRIPTION: Defines a sample PostgreSQL table 'foo' with a primary key, a text column, and an integer column with default value. Used to demonstrate default value insertion when not provided in the request payloads. Dependencies: Postgres database. Input: SQL DDL. Output: new table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_18\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table foo (\n  id bigint generated by default as identity primary key\n, bar text\n, baz int default 100\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Variadic Array Function via POST - Bash\nDESCRIPTION: Calls the variadic 'plus_one' function using a JSON array as the 'v' parameter in a POST request. Content-Type is application/json. Output is a JSON array with increased values.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"v\": [1,2,3,4]}'\n```\n\n----------------------------------------\n\nTITLE: Executing OPTIONS Request on PostgREST Endpoint\nDESCRIPTION: Demonstrates how to use curl to make an OPTIONS request to a PostgREST endpoint for a table named 'people'. This request will return the allowed HTTP methods for this endpoint.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/options.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\" -X OPTIONS -i\n```\n\n----------------------------------------\n\nTITLE: Applying Limit and Offset on Embedded Resources using cURL\nDESCRIPTION: This bash snippet demonstrates how to apply limit and offset operations on embedded resources, specifically on actors within films, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n  -d \"select=*,actors(*)\" \\\n  -d \"actors.limit=10\" \\\n  -d \"actors.offset=2\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Condition Filtering in PostgREST\nDESCRIPTION: Demonstrates how to apply multiple conditions to filter results, such as retrieving people who are 18 or older and are students.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?age=gte.18&student=is.true\"\n```\n\n----------------------------------------\n\nTITLE: Granting Table SELECT Permission to Role - Postgres SQL\nDESCRIPTION: Assigns SELECT privileges on the 'public.foobar' table to the 'foo' role, enabling it to execute SELECT queries via PostgREST. This is necessary after allowing authenticator role switching for the user to actually access table data. Only roles with this permission will be able to read the table through API requests.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management-using-postgres-users-and-passwords.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT SELECT ON TABLE public.foobar TO foo;\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload with Role and Custom Claims\nDESCRIPTION: Illustrates a JSON Web Token (JWT) payload suitable for PostgREST when using shared database roles. It contains a `role` claim (`webuser`) used by PostgREST for setting the database role, and a custom claim (`email`) to pass additional user-specific information for finer-grained control within SQL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"webuser\",\n  \"email\": \"john@doe.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking an RPC Endpoint via POST - PostgREST - Bash\nDESCRIPTION: Demonstrates how a client can call the 'add_them' function through PostgREST by making a POST request to the /rpc/add_them endpoint, sending a JSON payload with parameters 'a' and 'b'. Relies on 'curl', a running PostgREST server on localhost:3000, and the prior existence of the 'add_them' function in the database. Input is JSON with integer values, output is the summed result as a response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/add_them\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{ \"a\": 1, \"b\": 2 }'\n```\n\n----------------------------------------\n\nTITLE: Creating an Index for Full-Text Search on a Computed Field in PostgreSQL\nDESCRIPTION: This snippet shows how to create an index on the computed field 'full_name' to optimize full-text search queries.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\n-- (optional) you can add an index on the computed field to speed up the query\nCREATE INDEX people_full_name_idx ON people\n  USING GIN (to_tsvector('english', full_name(people)));\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST Log Level (Bash)\nDESCRIPTION: Illustrates setting the `log-level` configuration parameter in PostgREST using Bash syntax for a config file. It shows examples for various levels (`crit`, `error`, `warn`, `info`, `debug`) and explains the scope of events logged at each level, controlling the verbosity of PostgREST's output.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Only startup and db connection recovery messages are logged\nlog-level = \"crit\"\n\n# All the \"crit\" level events plus server errors (status 5xx) are logged\nlog-level = \"error\"\n\n# All the \"error\" level events plus request errors (status 4xx) are logged\nlog-level = \"warn\"\n\n# All the \"warn\" level events plus all requests (every status code) are logged\nlog-level = \"info\"\n\n# All the above plus events for development purposes are logged\n# Logs connection pool events and the schema cache parsing time\nlog-level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Response Format using curl Accept Header - PostgREST - Bash\nDESCRIPTION: Demonstrates how to use the curl utility to request the /people endpoint from a PostgREST server, specifying application/json as the Accept header to get a JSON response. curl must be installed, and the PostgREST server should be running on localhost:3000 with a /people endpoint. The command sends a GET request and expects a JSON-formatted response if the server supports it.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\" \\\n  -H \"Accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Delete Rows With Strict Max-Affected Constraint (PostgREST API, Bash)\nDESCRIPTION: Shows a curl DELETE request with 'handling=strict' and 'max-affected=10' preferences. Only allows operation if affected rows do not exceed the given limit. Used to prevent large or accidental destructive queries. Dependencies: curl, PostgREST, populated 'items' table. Input: bash command with Prefer header. Output: error if affected > 10.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/items?id=lt.15 -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: handling=strict, max-affected=10\"\n```\n\n----------------------------------------\n\nTITLE: Raising a Custom HTTP Response with Headers using PGRST SQLSTATE\nDESCRIPTION: Illustrates using the special 'PGRST' SQLSTATE in a PostgreSQL RAISE statement to gain full control over the PostgREST HTTP response. JSON objects embedded in the `message` and `detail` parameters define the response body structure (code, message, details, hint) and response metadata (status, headers), respectively.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_10\n\nLANGUAGE: postgres\nCODE:\n```\nRAISE sqlstate 'PGRST' USING\n    message = '{\"code\":\"123\",\"message\":\"Payment Required\",\"details\":\"Quota exceeded\",\"hint\":\"Upgrade your plan\"}',\n    detail = '{\"status\":402,\"headers\":{\"X-Powered-By\":\"Nerd Rage\"}}';\n```\n\n----------------------------------------\n\nTITLE: Querying Recursive Many-To-Many Relationship with PostgREST using cURL\nDESCRIPTION: This cURL command queries the `users` endpoint for the user with `id=4`. It uses the `select` parameter to retrieve the user's `username` and embed the `username` of their subscribers and the users they are following, using the `subscribers` and `following` computed relationship functions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/users?select=username,subscribers(username),following(username)&id=eq.4\"\n\ncurl --get \"http://localhost:3000/users\" \\\n  -d \"select=username,subscribers(username),following(username)\" \\\n  -d \"id=eq.4\"\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Multiple One-To-Many Joins with PostgREST using cURL\nDESCRIPTION: This cURL command demonstrates querying the `addresses` table and embedding related `orders` based on the two different foreign keys (`billing` and `shipping`). It disambiguates the one-to-many relationships by specifying the foreign key names (`!billing`, `!shipping`) in the `select` parameter and uses aliases (`billing_orders`, `shipping_orders`) for clarity. The query is filtered to retrieve only the address with `id=1`.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/addresses?select=name,billing_orders:orders!billing(name),shipping_orders!shipping(name)&id=eq.1\"\n\ncurl --get \"http://localhost:3000/addresses\" \\\n  -d \"select=name,billing_orders:orders!billing(name),shipping_orders!shipping(name)\" \\\n  -d \"id=eq.1\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Scalar and Table-Valued Functions - Bash\nDESCRIPTION: Shows two different curl commands: one calls a scalar function 'add_them' (returns a single value); the other calls 'best_films_2017' (returns a list of film objects). Useful for demonstrating different behavior based on function result type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/add_them?a=1&b=2\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/best_films_2017\"\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Relationships in PostgreSQL\nDESCRIPTION: SQL code to create functions that define computed relationships between tables. This is useful for creating relationships with foreign tables or overriding existing relationships.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate function film(premieres) returns setof films rows 1 as $$\n  select * from films where id = $1.film_id\n$$ stable language sql;\n\ncreate function premieres(films) returns setof premieres as $$\n  select * from premieres where film_id = $1.id\n$$ stable language sql;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Media Type and File Retrieval Function in PostgreSQL\nDESCRIPTION: This code defines a custom domain for the 'application/octet-stream' media type and creates a function to retrieve file blobs based on their ID.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"application/octet-stream\" as bytea;\n\ncreate or replace function file(id int) returns \"application/octet-stream\" as $$\n  select blob from files where id = file.id;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Single Unnamed JSON Parameter - Bash\nDESCRIPTION: Call 'mult_them' through PostgREST by posting a JSON object with 'x' and 'y'. The request sets Content-Type to application/json, requiring the client to send only the relevant fields in the root of the JSON object. Returns an integer result.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/mult_them\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{ \"x\": 4, \"y\": 2 }'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST Database and Service Settings - INI\nDESCRIPTION: This snippet shows an example PostgREST configuration file using the INI format. It sets database connection parameters (db-uri), specifies which schema to expose (db-schemas), the anonymous database role (db-anon-role), and a JWT secret (jwt-secret). Prerequisite: PostgREST must be installed. The file should be placed at /etc/postgrest/config and requires replacing placeholder values with actual database credentials and schema names.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/systemd.rst#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndb-uri = \"postgres://<your_user>:<your_password>@localhost:5432/<your_db>\"\ndb-schemas = \"<your_exposed_schema>\"\ndb-anon-role = \"<your_anon_role>\"\njwt-secret = \"<your_secret>\"\n```\n\n----------------------------------------\n\nTITLE: Null Filtering on Embedded Resources using cURL\nDESCRIPTION: This bash snippet demonstrates how to use null filtering on embedded resources, which can behave similarly to the '!inner' modifier, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgREST Database Connection URI (URI Format)\nDESCRIPTION: Illustrates the standard URI format for the `db-uri` configuration setting in PostgREST. This string contains all necessary information to connect to the PostgreSQL database, including authentication credentials (user/password), server address (host/port), database name, and optional connection parameters like `sslmode`. Percent encoding is required for special characters in fields like the password.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_8\n\nLANGUAGE: uri\nCODE:\n```\n\"postgres://authenticator:mysecretpassword@localhost:5433/postgres?parameters=val\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Array Columns in PostgreSQL - postgres\nDESCRIPTION: Defines a table with array columns using PostgreSQL SQL DDL syntax. Illustrates storing tags and performance times as one-dimensional text and time arrays. Requires PostgreSQL and privileges to create tables. Table: movies, Columns: id (int primary key), title (text), tags (text[]), performance_times (time[]).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table movies (\n  id int primary key,\n  title text not null,\n  tags text[],\n  performance_times time[]\n);\n```\n\n----------------------------------------\n\nTITLE: Sending CORS Preflight Request with curl (bash)\nDESCRIPTION: Demonstrates using the `curl` command to send an HTTP OPTIONS preflight request to a PostgREST endpoint (`/items`). This simulates a browser checking CORS permissions before sending an actual POST request from 'http://example.com' with a 'Content-Type' header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/cors.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/items\" \\\n  -X OPTIONS \\\n  -H \"Origin: http://example.com\" \\\n  -H \"Access-Control-Request-Method: POST\" \\\n  -H \"Access-Control-Request-Headers: Content-Type\"\n```\n\n----------------------------------------\n\nTITLE: Resource Embedding with Select Clause Example - PostgREST - Bash\nDESCRIPTION: Illustrates how to embed related resources by specifying nested fields in the select clause of a request to the /films endpoint. The example shows a GET request with a select query that retrieves director fields (last_name, id) and title. Requires the /films endpoint to support resource embedding and appropriate database relationships. Returns a structured JSON object, but the order of object properties is not guaranteed.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:3000/films?select=directors(last_name,id),title\n```\n\n----------------------------------------\n\nTITLE: Requesting Estimated Count With Threshold Logic - Bash (curl) for Small Table\nDESCRIPTION: Requests an estimated count from a small table, where the count returns exact values if the table's size is below a configured threshold (db-max-rows). Uses 'Prefer: count=estimated' in curl. Useful for balancing accuracy and performance for counts on variable-sized tables.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/smalltable?limit=25\" -I \\\n  -H \"Prefer: count=estimated\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Error Response from PostgREST\nDESCRIPTION: Shows the JSON response body generated by PostgREST when the `just_fail` function (which raises a basic exception) is called. The exception's message, details, hint, and the PostgreSQL error code (P0001 for RAISE_EXCEPTION) are included in the JSON.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\":\"I refuse!\",\n  \"details\":\"Pretty simple\",\n  \"hint\":\"There is nothing you can do.\",\n  \"code\":\"P0001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection Parameters via Environment Variables (Bash)\nDESCRIPTION: Shows how to set PostgreSQL connection parameters (host, port, user, database) using standard libpq environment variables in a Bash-like environment. PostgREST automatically reads these variables if the corresponding parameters are not explicitly set in the configuration file or connection string.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPGHOST=localhost PGPORT=5433 PGUSER=authenticator PGDATABASE=postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UUID Domain in PostgreSQL\nDESCRIPTION: Creates a custom domain 'app_uuid' based on UUID type and demonstrates its usage in table creation with sample data insertion.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/domain_representations.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain app_uuid as uuid;\n\n-- and use it as our table PK.\ncreate table profiles(\n  id   app_uuid\n, name text\n);\n\n-- some data for the example\ninsert into profiles values ('846c4ffd-92ce-4de7-8d11-8e29929f4ec4', 'John Doe');\n```\n\n----------------------------------------\n\nTITLE: Requesting Custom TWKB Format from Table-Valued Function using Bash\nDESCRIPTION: Uses `curl` to request the `/get_lines` function endpoint with the `Accept: application/vnd.twkb` header. Since the function returns the `lines` type, PostgREST applies the existing `twkb_agg` handler associated with that type, returning the aggregated TWKB data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/get_lines' -i \\\n  -H \"Accept: application/vnd.twkb\"\n\nHTTP/1.1 200 OK\nContent-Type: application/vnd.twkb\n\n# binary output\n```\n\n----------------------------------------\n\nTITLE: Example JSON API Output for Nested Array Query - json\nDESCRIPTION: Presents a typical API response body for a nested array query over the 'movies' table. Shows the auditorium array extracted for a specific cinema/floor index. The output is a JSON array of objects, each representing a database row with selected fields.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Paddington\",\n    \"auditorium\": [6,7]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering JSON Path in PostgreSQL\nDESCRIPTION: Demonstrates the correct order for -> and ->> operators in a JSON path query for PostgreSQL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\ncol->a->>b=eq.c\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Status Text for Non-Standard HTTP Codes in PostgreSQL RAISE\nDESCRIPTION: Demonstrates adding a `status_text` field within the JSON `detail` parameter of a `RAISE sqlstate 'PGRST'` statement. This allows providing a descriptive reason phrase for non-standard HTTP status codes, such as 419 'Page Expired'.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_12\n\nLANGUAGE: postgres\nCODE:\n```\ndetail = '{\"status\":419,\"status_text\":\"Page Expired\",\"headers\":{\"X-Powered-By\":\"Nerd Rage\"}}';\n```\n\n----------------------------------------\n\nTITLE: Simulating RESTful ID-based Routing with Nginx Rewrite and Proxy (nginx)\nDESCRIPTION: Implements an Nginx location regex block to rewrite incoming /endpoint/:id style URLs, forwarding them as standard resource queries to the PostgREST upstream. It sets the Accept header for a singular object and uses regex capture groups to map paths. Requires Nginx, an upstream named 'postgrest', and consistent numeric primary key naming. Inputs: HTTP requests to /[table]/[id] paths; outputs: rewritten PostgREST responses. Limitation: best restricted to tables with numeric id primary keys.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/nginx.rst#2025-04-23_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\n# support /endpoint/:id url style\nlocation ~ ^/([a-z_]+)/([0-9]+) {\n\n  # make the response singular\n  proxy_set_header Accept 'application/vnd.pgrst.object+json';\n\n  # assuming an upstream named \"postgrest\"\n  proxy_pass http://postgrest/$1?id=eq.$2;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST Database Transaction Termination Behavior (Bash/Config)\nDESCRIPTION: Provides examples of setting the `db-tx-end` configuration parameter in PostgREST. It demonstrates the four possible modes: always commit, commit unless overridden by the 'Prefer: tx=rollback' header, always rollback, and rollback unless overridden by the 'Prefer: tx=commit' header. This setting dictates the default transaction termination behavior and the possibility of client overrides.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# The transaction is always committed\ndb-tx-end = \"commit\"\n\n# The transaction is committed unless a \"Prefer: tx=rollback\" header is sent\ndb-tx-end = \"commit-allow-override\"\n\n# The transaction is always rolled back\ndb-tx-end = \"rollback\"\n\n# The transaction is rolled back unless a \"Prefer: tx=commit\" header is sent\ndb-tx-end = \"rollback-allow-override\"\n```\n\n----------------------------------------\n\nTITLE: Adding Summary and Description Fields with Multi-line Comments in PostgreSQL\nDESCRIPTION: Shows how to generate both a summary and description in OpenAPI by using multi-line comments in PostgreSQL. The first line becomes the summary, and subsequent lines form the description.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\nCOMMENT ON TABLE entities IS\n  $$Entities summary\n\n  Entities description that\n  spans\n  multiple lines$$;\n```\n\n----------------------------------------\n\nTITLE: Calling Array Parameter Function via POST - Bash\nDESCRIPTION: Invokes the 'plus_one' function via curl and PostgREST, sending an array of integers as the 'arr' parameter in JSON. Requires proper Content-Type header and that input is a JSON array. Output is a JSON array, each element incremented by one.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"arr\": [1,2,3,4]}'\n```\n\n----------------------------------------\n\nTITLE: Inserting Enum Value via API - bash\nDESCRIPTION: Makes a POST request to insert a new product into the 'products' table using a string representation of the enum value for the 'size' field. Leverages PostgreSQL's type checking. Useful for demonstrating enum handling over REST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://localhost:3000/products\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  { \"name\": \"t-shirt\", \"size\": \"l\" }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Scalar and Table-Valued Function Outputs - JSON\nDESCRIPTION: Provides exemplars for scalar (3) and table-valued (array of objects) function outputs. These JSON snippets clarify how PostgREST shapes the response based on whether the function returns a single value or a set of rows.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n3\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"title\": \"Okja\", \"rating\": 7.4},\n  { \"title\": \"Call me by your name\", \"rating\": 8},\n  { \"title\": \"Blade Runner 2049\", \"rating\": 8.1}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Function to Convert Range to JSON\nDESCRIPTION: This function converts a tsrange type to a JSON object with lower and upper bounds and inclusion flags. This allows for more readable representation of ranges in API responses.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_34\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function tsrange_to_json(tsrange) returns json as $$\n  select json_build_object(\n    'lower', lower($1)\n  , 'upper', upper($1)\n  , 'lower_inc', lower_inc($1)\n  , 'upper_inc', upper_inc($1)\n  );\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Applying Filters on Nested Embedded Resources using cURL\nDESCRIPTION: This bash snippet demonstrates how to apply filters on nested embedded resources, specifically ordering and filtering actors within roles, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n  -d \"select=*,roles(*,actors(*))\" \\\n  -d \"roles.actors.order=last_name\" \\\n  -d \"roles.actors.first_name=like.*Tom*\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Variadic Array Function via POST with urlencoded Form Data - Bash\nDESCRIPTION: Shows how to call the 'plus_one' variadic function by posting x-www-form-urlencoded data and repeating the 'v' parameter. Output is a JSON array. Useful for clients sending form data instead of JSON.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one\" \\\n  -X POST -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d 'v=1&v=2&v=3&v=4'\n```\n\n----------------------------------------\n\nTITLE: Uploading Binary Data to PostgREST via Function - bash\nDESCRIPTION: Uses cURL to POST a binary file to the /rpc/upload_binary API endpoint, specifying application/octet-stream content. The '--data-binary' flag streams the binary file (here: postgrest-logo.png) for storage using the defined SQL function. Requires set up tables, functions, and running PostgREST server.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/upload_binary\" \\\n  -X POST -H \"Content-Type: application/octet-stream\" \\\n  --data-binary \"@postgrest-logo.png\"\n```\n\n----------------------------------------\n\nTITLE: Example OpenAPI Output with Custom Server Proxy URI (JSON)\nDESCRIPTION: Shows a JSON snippet representing part of the OpenAPI (Swagger 2.0) output generated by PostgREST. This example illustrates how setting the `openapi-server-proxy-uri` configuration option (e.g., to `https://postgrest.com`) affects the `host`, `basePath`, and `schemes` fields in the documentation, reflecting the specified proxy URL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.4.3.0\",\n    \"title\": \"PostgREST API\",\n    \"description\": \"This is a dynamic API generated by PostgREST\"\n  },\n  \"host\": \"postgrest.com:443\",\n  \"basePath\": \"/\",\n  \"schemes\": [\n    \"https\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Raising a Basic PostgreSQL Exception in a Function\nDESCRIPTION: Defines a PostgreSQL function `just_fail` using PL/pgSQL that intentionally raises an exception with a custom message, detail, and hint. When called via PostgREST, this typically results in an HTTP 400 Bad Request response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE OR REPLACE FUNCTION just_fail() RETURNS void\n  LANGUAGE plpgsql\n  AS $$\nBEGIN\n  RAISE EXCEPTION 'I refuse!'\n    USING DETAIL = 'Pretty simple',\n          HINT = 'There is nothing you can do.';\nEND\n$$;\n```\n\n----------------------------------------\n\nTITLE: Handling Unsupported Media Types via curl - PostgREST - Bash & HTTP\nDESCRIPTION: Demonstrates how PostgREST responds when a request specifies an unsupported Accept media type. Starts with a curl command that requests the /people endpoint using the Accept header 'unknown/unknown'. Shows the HTTP error response (status 415) along with a JSON error body indicating no matching media types are available. Useful for testing error handling paths.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\" \\\n  -H \"Accept: unknown/unknown\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 415 Unsupported Media Type\n\n{\"code\":\"PGRST107\",\"details\":null,\"hint\":null,\"message\":\"None of these media types are available: unknown/unknown\"}\n```\n\n----------------------------------------\n\nTITLE: Automatic GROUP BY Query\nDESCRIPTION: Demonstrates automatic grouping by order_date when selecting aggregate functions with regular columns.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=amount.sum(),amount.avg(),order_date\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"sum\": 1234.56,\n    \"avg\": 123.45,\n    \"order_date\": \"2023-01-01\"\n  },\n  {\n    \"sum\": 2345.67,\n    \"avg\": 234.56,\n    \"order_date\": \"2023-01-02\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Recursive One-To-One Relationship with PostgREST using cURL\nDESCRIPTION: This cURL command queries the `presidents` endpoint for the president with `id=2`. It uses the `select` parameter to retrieve the president's `last_name` and embed the `last_name` of their predecessor and successor using the previously defined `predecessor` and `successor` functions (computed relationships).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/presidents?select=last_name,predecessor(last_name),successor(last_name)&id=eq.2\"\n\ncurl --get \"http://localhost:3000/presidents\" \\\n  -d \"select=last_name,predecessor(last_name),successor(last_name)\" \\\n  -d \"id=eq.2\"\n```\n\n----------------------------------------\n\nTITLE: Count Aggregate Function Usage\nDESCRIPTION: Shows the difference between count() with and without column specification.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=count(),observation_count:observation.count(),order_date\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"count\": 4,\n    \"observation_count\": 2,\n    \"order_date\": \"2023-01-01\"\n  },\n  {\n    \"count\": 2,\n    \"observation_count\": 1,\n    \"order_date\": \"2023-01-02\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgREST Configuration via Database Notification\nDESCRIPTION: SQL command to reload the PostgREST configuration from within the database using the NOTIFY command.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nNOTIFY pgrst, 'reload config'\n```\n\n----------------------------------------\n\nTITLE: 400 Bad Request for Strict Handling (PostgREST API, HTTP)\nDESCRIPTION: Shows the HTTP error response returned by PostgREST when unrecognized preferences are sent with 'handling=strict'. Response code is 400 with JSON error details. No dependencies. Input: HTTP response headers and body. Output: error status and JSON message.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=utf-8\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"PGRST122\",\n    \"message\": \"Invalid preferences given with handling=strict\",\n    \"details\": \"Invalid preferences: foo, bar\",\n    \"hint\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ambiguous Join Error Response in PostgREST JSON\nDESCRIPTION: This JSON object represents the error response from PostgREST for an ambiguous join request (code PGRST201). It details the multiple relationships found between `orders` and `addresses` (billing and shipping) and provides a hint on how to resolve the ambiguity by specifying the desired foreign key constraint name (e.g., `addresses!billing`).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"PGRST201\",\n  \"details\": [\n    {\n      \"cardinality\": \"many-to-one\",\n      \"embedding\": \"orders with addresses\",\n      \"relationship\": \"billing using orders(billing_address_id) and addresses(id)\"\n    },\n    {\n      \"cardinality\": \"many-to-one\",\n      \"embedding\": \"orders with addresses\",\n      \"relationship\": \"shipping using orders(shipping_address_id) and addresses(id)\"\n    }\n  ],\n  \"hint\": \"Try changing 'addresses' to one of the following: 'addresses!billing', 'addresses!shipping'. Find the desired relationship in the 'details' key.\",\n  \"message\": \"Could not embed because more than one relationship was found for 'orders' and 'addresses'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Multiple Many-To-One Joins with PostgREST using cURL\nDESCRIPTION: This cURL command demonstrates how to resolve the ambiguous join between `orders` and `addresses`. It uses the `select` parameter to explicitly request embedding addresses via the `billing` foreign key (aliased as `billing_address`) and the `shipping` foreign key (aliased as `shipping_address`), specifying the foreign key constraint names (`!billing`, `!shipping`).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/orders?select=name,billing_address:addresses!billing(name),shipping_address:addresses!shipping(name)\"\n\ncurl --get \"http://localhost:3000/orders\" \\\n  -d \"select=name,billing_address:addresses!billing(name),shipping_address:addresses!shipping(name)\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Variadic Array Function via GET with Repeated Parameters - Bash\nDESCRIPTION: Demonstrates calling the variadic array function 'plus_one' by repeating the 'v' parameter in the URL query string. Used in GET requests for PostgREST RPC endpoints. Output is a JSON array result.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/plus_one?v=1&v=2&v=3&v=4\"\n```\n\n----------------------------------------\n\nTITLE: Checking PostgREST Ready Status with cURL\nDESCRIPTION: Shows how to verify if PostgREST's connection pool and schema cache are functioning properly using the ready endpoint.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/admin_server.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I \"http://localhost:3001/ready\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Building PostgREST from Source\nDESCRIPTION: Commands to clone the PostgREST repository and build the project from source using Stack.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/PostgREST/postgrest.git\ncd postgrest\n\n# adjust local-bin-path to taste\nstack build --install-ghc --copy-bins --local-bin-path /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Creating In-Database Configuration Function\nDESCRIPTION: SQL code to create a schema and function for storing PostgREST configuration in the database. This approach allows changing configuration without modifying files or environment variables.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\n-- create a dedicated schema, hidden from the API\ncreate schema postgrest;\n-- grant usage on this schema to the authenticator\ngrant usage on schema postgrest to authenticator;\n\n-- the function can configure postgREST by using set_config\ncreate or replace function postgrest.pre_config()\nreturns void as $$\n  select\n      set_config('pgrst.db_schemas', 'schema1, schema2', true)\n    , set_config('pgrst.jwt_secret', 'REALLYREALLYREALLYREALLYVERYSAFE', true);\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Checking PostgREST Live Status with cURL\nDESCRIPTION: Demonstrates how to check if PostgREST is running using the live endpoint on the admin server port 3001.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/admin_server.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I \"http://localhost:3001/live\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Relationship for Recursive One-To-Many in PostgreSQL\nDESCRIPTION: This PostgreSQL function, `supervisees`, defines a computed relationship for the `employees` table. It takes an employee record as input (`$1`) and returns a set of employees (`setof employees`) whose `supervisor_id` matches the input employee's `id`. This allows querying all direct reports for a given supervisor via PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_18\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function supervisees(employees) returns setof employees as $$\n  select * from employees where supervisor_id = $1.id\n$$ stable language sql;\n```\n\n----------------------------------------\n\nTITLE: Filtering with Reserved Characters in Values - PostgREST - bash\nDESCRIPTION: Demonstrates how to filter by values containing reserved PostgREST characters (like commas) using percent-encoded double quotes. Useful when values like \"Hebdon,John\" or \"Williams,Mary\" need to be specified in the filter. Requires those values to exist in the target 'employees' table. The filter syntax relies on percent encoding for proper server interpretation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/employees?name=in.(%22Hebdon,John%22,%22Williams,Mary%22)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Connection Activity in PostgreSQL - PostgreSQL\nDESCRIPTION: This snippet demonstrates how to query the pg_stat_activity system view in PostgreSQL to retrieve distinct usernames and application names for active connections, specifically filtering for connections used by the \"authenticator\" role (typically used by PostgREST). This helps administrators monitor which application is using which connection in the database and is useful for auditing, performance debugging, and observing how PostgREST sets the application_name for each database connection. Requires access to a PostgreSQL database and appropriate permissions to query pg_stat_activity. The output is a tabular list of usernames and corresponding application names.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/connection_pool.rst#2025-04-23_snippet_0\n\nLANGUAGE: PostgreSQL\nCODE:\n```\nselect distinct usename, application_name\nfrom pg_stat_activity\nwhere usename = 'authenticator';\n\n   usename     |     application_name\n---------------+--------------------------\n authenticator | PostgREST 12.1\n\n```\n\n----------------------------------------\n\nTITLE: Updating To-Do State via PostgreSQL Function\nDESCRIPTION: Defines a PostgreSQL function `api.change_todo_state` that updates the completion status (`done` column) of a specific to-do item in the `api.todos` table. It takes the task ID (`_id`) and the new boolean state (`_done`) as parameters. After performing the update, it calls `api.html_all_todos()` to return the complete, updated HTML list of to-dos, intended to replace the existing list in an HTMX-driven UI.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_10\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function api.change_todo_state(_id int, _done boolean) returns \"text/html\" as $$\n  update api.todos set done = _done where id = _id;\n  select api.html_all_todos();\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Attempting an Ambiguous Join with PostgREST using cURL\nDESCRIPTION: This cURL command attempts to fetch orders and embed all related addresses using PostgREST's `select` parameter. Because the `orders` table has two foreign keys pointing to `addresses`, this request is ambiguous and will result in an error.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=*,addresses(*)\" -i\n```\n\n----------------------------------------\n\nTITLE: Adding Composite Value via String Representation with API - bash\nDESCRIPTION: Calls the PostgREST API to insert a composite column (dimension type) using the PostgreSQL string tuple notation. Essential for clients without rich data typing. Requires table/products and dimension type exists; input 'size' as textual tuple with escaping for string fields.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/products\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  { \"id\": 2, \"size\": \"(0.7,0.5,1.8,\\\"m\\\")\" }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building PostgREST with Nix\nDESCRIPTION: Commands to build PostgREST using Nix, including options for creating a statically linked binary.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-build --attr postgrestPackage\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-build --attr postgrestStatic\n\n$ ldd result/bin/postgrest\n$       not a dynamic executable\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST on FreeBSD using pkg\nDESCRIPTION: Command to install PostgREST using the pkg package manager on FreeBSD systems.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npkg install hs-postgrest\n```\n\n----------------------------------------\n\nTITLE: Example CORS Preflight Response from PostgREST (HTTP)\nDESCRIPTION: Shows a typical successful HTTP response (200 OK) from PostgREST to a CORS preflight OPTIONS request. Key headers like `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`, and `Access-Control-Max-Age` specify the allowed cross-origin interactions and caching duration (24 hours in this example).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/cors.rst#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: http://example.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD\nAccess-Control-Allow-Headers: Authorization, Content-Type, Accept, Accept-Language, Content-Language\nAccess-Control-Max-Age: 86400\n```\n\n----------------------------------------\n\nTITLE: Using Aliases and Filters on Embedded Resources using cURL\nDESCRIPTION: This bash snippet shows how to use aliases for embedded resources and apply filters on these aliases, specifically for competitions in different years, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n  -d \"select=*,90_comps:competitions(name),91_comps:competitions(name)\" \\\n  -d \"90_comps.year=eq.1990\" \\\n  -d \"91_comps.year=eq.1991\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Schemas by Owner (PostgreSQL)\nDESCRIPTION: Defines a PostgreSQL function `postgrest.pre_config` for dynamic schema configuration using PostgREST's `in_db_config`. This function identifies schemas owned by a specific role ('joe' in this example) by querying `pg_namespace` and sets the `pgrst.db_schemas` parameter to a comma-separated list of these schemas.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_7\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function postgrest.pre_config()\nreturns void as $$\n  select\n    set_config('pgrst.db_schemas', string_agg(nspname, ','), true)\n  from pg_namespace\n  where nspowner = 'joe'::regrole;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search with Language Option in PostgREST\nDESCRIPTION: Demonstrates how to perform a full-text search with language-specific stemming using the 'fts' operator.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/tsearch?my_tsv=fts(french).amusant\"\n```\n\n----------------------------------------\n\nTITLE: Executing pgbench Tests against PostgREST (Shell)\nDESCRIPTION: These commands demonstrate how to run `pgbench` performance tests using the `postgrest-with-postgresql-15` wrapper. They load initial data using `fixtures.sql` and then execute benchmark scripts (`old.sql` and `new.sql` from issue #1567 directory) for 10 seconds (`-T 10`) without vacuuming (`-n`) as the `postgres` user (`-U postgres`). This setup is likely used for comparing performance between two scenarios or versions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/test/pgbench/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npostgrest-with-postgresql-15 -f test/pgbench/fixtures.sql pgbench -U postgres -n -T 10 -f test/pgbench/1567/old.sql\n\npostgrest-with-postgresql-15 -f test/pgbench/fixtures.sql pgbench -U postgres -n -T 10 -f test/pgbench/1567/new.sql\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Array Values via API - bash\nDESCRIPTION: Initiates a GET request to retrieve embedded auditorium data from a nested array in 'cinema_floor_auditorium', using PostgreSQL arrow operators for subscripting. Returns a filtered JSON result with only the relevant fields. Requires proper table and column setup, and assumes PostgREST's ability to translate arrow notation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/movies?select=title,auditorium:cinema_floor_auditorium->0->1&id=eq.1\"\n```\n\n----------------------------------------\n\nTITLE: Requesting SQL EXPLAIN Plan (Text Format) (Bash)\nDESCRIPTION: Uses cURL to request the PostgreSQL EXPLAIN plan for a query to the `/users` endpoint. The `Accept: application/vnd.pgrst.plan` header tells PostgREST to return the execution plan instead of the data. Requires `db-plan-enabled` to be true in PostgREST configuration. The response format defaults to text.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/users?select=name&order=id\" \\\n  -H \"Accept: application/vnd.pgrst.plan\"\n```\n\n----------------------------------------\n\nTITLE: Inserting hstore Data via API with Escaped Values - bash\nDESCRIPTION: Inserts country data via API by supplying hstore literals as strings. Demonstrates handling of special characters, particularly escaping double quotes within string values. Data structure is a JSON array of objects mapping 'id' and 'name' keys. Relies upon enabled hstore and proper table creation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/countries\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  [\n    { \"id\": 1, \"name\": \"common => Egypt, official => \\\"Arab Republic of Egypt\\\", native => مصر\" },\n    { \"id\": 2, \"name\": \"common => Germany, official => \\\"Federal Republic of Germany\\\", native => Deutschland\" }\n  ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Custom Teapot Response Function\nDESCRIPTION: Example of a function that sets a custom HTTP status code and returns a JSON response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function teapot() returns json as $$\nbegin\n  perform set_config('response.status', '418', true);\n  return json_build_object('message', 'The requested entity body is short and stout.',\n                           'hint', 'Tip it over and pour it out.');\nend;\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Pushing PostgREST Artifacts to Cachix Binary Cache\nDESCRIPTION: Commands for pushing locally built artifacts to the PostgREST binary cache using Cachix. This accelerates CI builds and tests by providing pre-built binaries.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/UPGRADE.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix-store -qR --include-outputs $$(nix-instantiate) | cachix push postgrest\n\n# Or, equivalently\nnix-shell --run postgrest-push-cachix\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage for PostgREST with Nix\nDESCRIPTION: Command to generate code coverage reports for PostgREST using Nix.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Will run all the tests and produce a coverage dir\n[nix-shell]$ postgrest-coverage\n...\n\npostgrest-coverage: To see the results, visit file://$(pwd)/coverage/check/hpc_index.html\n```\n\n----------------------------------------\n\nTITLE: Viewing Standard PostgREST Request Logs (stdout)\nDESCRIPTION: Example of PostgREST logs written to standard output (stdout) when the log-level is set to 'info'. Each line shows the client IP, authenticated user (or 'anonymous'), timestamp, HTTP request details (method, path, protocol), response status, and user agent.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_0\n\nLANGUAGE: Log\nCODE:\n```\n127.0.0.1 - user [26/Jul/2021:01:56:38 -0500] \"GET /clients HTTP/1.1\" 200 - \"\" \"curl/7.64.0\"\n127.0.0.1 - anonymous [26/Jul/2021:01:56:48 -0500] \"GET /unexistent HTTP/1.1\" 404 - \"\" \"curl/7.64.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Final Function for Custom CSV Aggregation in PostgreSQL\nDESCRIPTION: Creates a final function `bom_csv_final` for the custom CSV aggregate. It takes the aggregated CSV data, prepends a UTF-8 Byte Order Mark (BOM) and a header row ('id,name,geom\\n'). Crucially, it also uses `set_config` to set the `response.headers` GUC, adding a `Content-Disposition` header to suggest a filename (`lines.csv`) for downloads. The return type is `\"text/csv\"`.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_13\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function bom_csv_final (data \"text/csv\")\nreturns \"text/csv\" as $$\n  -- set the Content-Disposition header\n  select set_config('response.headers', '[{\"Content-Disposition\": \"attachment; filename=\\\"lines.csv\\\"\"}]', true);\n  select\n    -- EFBBBF is the BOM in UTF8 https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\n    convert_from (decode (E'EFBBBF', 'hex'),'UTF8') ||\n    -- the header for the CSV\n    (E'id,name,geom\\n' || data);\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Viewing SQL EXPLAIN Plan Output (Text Format)\nDESCRIPTION: Example output of a PostgreSQL EXPLAIN plan in text format, as returned by PostgREST when requested with `Accept: application/vnd.pgrst.plan`. Shows the query plan chosen by the PostgreSQL query planner.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_18\n\nLANGUAGE: postgres\nCODE:\n```\nAggregate  (cost=73.65..73.68 rows=1 width=112)\n  ->  Index Scan using users_pkey on users  (cost=0.15..60.90 rows=850 width=36)\n```\n\n----------------------------------------\n\nTITLE: Sending Strict Preference Handling with curl (PostgREST API, Bash)\nDESCRIPTION: Demonstrates sending a curl HTTP request to a PostgREST endpoint with the Prefer header set to 'handling=strict' alongside unrecognized preferences. This enforces strict handling and causes the server to throw an error for unknown preferences. Dependencies: curl, accessible PostgREST instance on localhost:3000. Parameters: the Prefer HTTP header, endpoint URL. Input: bash command. Output: HTTP response with error if preferences are invalid.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/projects\" \\\n  -H \"Prefer: handling=strict, foo, bar\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Table/Columns with Spaces in URL - PostgREST - bash\nDESCRIPTION: Illustrates how to query tables or columns with spaces in their names by percent-encoding spaces as %20 in the request URL. Assumes a table named \"Order Items\" and a column \"Unit Price\" exist in the database. The snippet uses curl and outputs the query result from PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/Order%20Items?Unit%20Price=lt.200\"\n```\n\n----------------------------------------\n\nTITLE: Insert Resource with Full Representation Return (PostgREST API, Bash)\nDESCRIPTION: Displays a curl POST request using Prefer: return=representation to request the created object in the response body. This is useful to get computed/default values populated by the server. Dependencies: curl, table with expected structure. Input: bash command, JSON body. Output: full JSON representation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/projects\" -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: return=representation\" \\\n  -d '{\"id\":33, \"name\": \"x\"}'\n```\n\n----------------------------------------\n\nTITLE: Calling Table-Valued Function with Filtering and Ordering - Bash\nDESCRIPTION: Invokes 'best_films_2017' and applies a filter for ratings greater than 8 plus descending ordering by title directly on the endpoint. Output is a filtered and sorted JSON array. Demonstrates RESTful filtering capabilities on set-returning functions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/best_films_2017?rating=gt.8&order=title.desc\"\n```\n\n----------------------------------------\n\nTITLE: Function with Custom Timeout Setting\nDESCRIPTION: Example of creating a function with a specific statement timeout setting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE OR REPLACE FUNCTION myfunc()\nRETURNS void as $$\n  SELECT pg_sleep(3); -- simulating some long-running process\n$$\nLANGUAGE SQL\nSET statement_timeout TO '4s';\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Package to cabal.project\nDESCRIPTION: Modifies the `cabal.project` file to include the locally cloned `hasql-pool` library. The `packages:` directive points to the `.cabal` file within the local directory, ensuring Cabal uses this local version during builds.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_13\n\nLANGUAGE: cabal\nCODE:\n```\n-- cabal.project\npackages:\n  ./hasql-pool/hasql-pool.cabal\n```\n\n----------------------------------------\n\nTITLE: Requesting Custom TWKB Format via Aggregate Handler using Bash\nDESCRIPTION: Uses `curl` to request the `/lines` table endpoint with the `Accept: application/vnd.twkb` header. This invokes the `twkb_agg` aggregate handler, which processes all rows in the table and returns the concatenated TWKB data. PostgREST sets the `Content-Type` to `application/vnd.twkb`.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines' -i \\\n  -H \"Accept: application/vnd.twkb\"\n\nHTTP/1.1 200 OK\nContent-Type: application/vnd.twkb\n\n# binary output\n```\n\n----------------------------------------\n\nTITLE: Multiple Aggregate Functions Query\nDESCRIPTION: Shows how to select multiple aggregate functions simultaneously with column renaming.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=total_amount:amount.sum(),avg_amount:amount.avg(),total_quantity:quantity.sum()\"\n```\n\n----------------------------------------\n\nTITLE: Resource Spreading Examples\nDESCRIPTION: Shows various ways to use the spread operator (...) with one-to-one and one-to-many relationships\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d \"select=title,...directors(director_last_name:last_name)\" \\\n    -d \"title=like.*Workers*\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/directors\" \\\n    -d \"select=first_name,...films(film_titles:title,film_years:year)\" \\\n    -d \"first_name=like.Quentin*\"\n```\n\n----------------------------------------\n\nTITLE: Insert with Transaction Rollback and Representation Return (PostgREST API, Bash)\nDESCRIPTION: Demonstrates a curl POST request with 'Prefer: tx=rollback, return=representation' which causes the transaction to roll back after execution. Useful for testing or dry-run scenarios. Requires PostgREST with db-tx-end enabled. Input: bash command and JSON. Output: server responds as if the transaction went through, but with no permanent DB change.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/projects\" -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: tx=rollback, return=representation\" \\\n  -d '{\"name\": \"Project X\"}'\n```\n\n----------------------------------------\n\nTITLE: Sending Lenient Preference Handling with curl (PostgREST API, Bash)\nDESCRIPTION: Shows a curl HTTP request to PostgREST with the Prefer header set to 'handling=lenient' along with invalid preferences. The server ignores invalid preferences in lenient mode. Dependencies: curl, PostgREST server. Input: bash request. Output: HTTP response (not shown).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/projects\" \\\n  -H \"Prefer: handling=lenient, foo, bar\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Polygon Data as String Representation via API - bash\nDESCRIPTION: Inserts polygons into the PostGIS-enabled 'coverage' table using string representations for SRID and polygon. Data sent as a JSON array of area objects with id, name, area. Useful for GIS integration tests and spatial queries later on.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/coverage\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  [\n    { \"id\": 1, \"name\": \"small\", \"area\": \"SRID=4326;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))\" },\n    { \"id\": 2, \"name\": \"big\", \"area\": \"SRID=4326;POLYGON((0 0, 10 0, 10 10, 0 10, 0 0))\" }\n  ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL 14 Header Value Access Example\nDESCRIPTION: Shows how to access header values from GUCs in PostgreSQL 14 using the JSON format. This demonstrates the updated syntax for accessing request headers in PostgreSQL 14 and later versions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\ncurrent_setting('request.headers')::json->>'name-of-header'\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgREST Version with CLI - Bash\nDESCRIPTION: This snippet displays how to check the installed PostgREST version using the '-v' or '--version' flag. It outputs the semantic version of the current PostgREST binary. The only prerequisite is having the 'postgrest' command available. The command prints the version and does not require arguments or configuration files.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/cli.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest [-v|--version]\n```\n\n----------------------------------------\n\nTITLE: Role Isolation Level Configuration\nDESCRIPTION: Shows how to set the default transaction isolation level for a specific database role.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\nALTER ROLE webuser SET default_transaction_isolation TO 'repeatable read';\n```\n\n----------------------------------------\n\nTITLE: Receiving Recursive One-To-One Query Results in JSON\nDESCRIPTION: This JSON array shows the result for the president with `id=2` (Adams). It includes Adams' `last_name` and nested objects for the `predecessor` (Washington) and `successor` (Jefferson), each containing their respective `last_name` as retrieved via the computed relationships.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"last_name\": \"Adams\",\n    \"predecessor\": {\n      \"last_name\": \"Washington\"\n    },\n    \"successor\": {\n      \"last_name\": \"Jefferson\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying User Credentials and Retrieving Roles (User Role Helper Function, PL/pgSQL)\nDESCRIPTION: Defines a helper function that accepts an email and plaintext password, verifies the credentials against the hashed password in the \\\"basic_auth.users\\\" table, and returns the associated role name. It uses the crypt() function for secure password comparison. Used internally by higher-level login functions to assist authentication. Requires access to the users table and pgcrypto, and returns null if credentials are invalid.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\n  create function\n  basic_auth.user_role(email text, pass text) returns name\n    language plpgsql\n    as $$\n  begin\n    return (\n    select role from basic_auth.users\n     where users.email = user_role.email\n       and users.pass = crypt(user_role.pass, users.pass)\n    );\n  end;\n  $$;\n```\n\n----------------------------------------\n\nTITLE: Triggering Cache Reload with NOTIFY Command - PostgreSQL\nDESCRIPTION: This snippet uses PostgreSQL's NOTIFY command to signal the PostgREST server to reload its schema cache. When run inside a psql session or from any client, it sends a message to the 'pgrst' channel with the payload 'reload schema'. Requires that PostgREST is configured to listen for notifications. No parameters needed; outputs only NOTIFY confirmation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/schema_cache.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nNOTIFY pgrst, 'reload schema'\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Showing Overridden OpenAPI Documentation\nDESCRIPTION: Displays the HTTP response when requesting the root endpoint with a custom OpenAPI override function, showing the custom JSON response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n{\n  \"swagger\": \"2.0\",\n  \"info\":{\n    \"title\":\"Overridden\",\n    \"description\":\"This is a my own API\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Resource with Return Headers-Only Preference (PostgREST API, Bash)\nDESCRIPTION: Presents a curl POST request to create a new resource with Prefer: return=headers-only. If the table has a primary key, the response will include a Location header pointing to the new resource URI. Dependencies: curl, proper table definition. Input: bash command, JSON request body. Output: HTTP 201 with Location header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/projects\" -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Prefer: return=headers-only\" \\\n  -d '{\"id\":33, \"name\": \"x\"}'\n```\n\n----------------------------------------\n\nTITLE: Specifying Result Range via HTTP Headers - Bash (curl)\nDESCRIPTION: Uses curl to request a specific row range from a PostgREST API endpoint by setting 'Range-Unit' and 'Range' headers. 'Range: 0-19' instructs the server to return the first twenty records. Headers can be used in place of query parameters for paginating results.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\" -i \\\n  -H \"Range-Unit: items\" \\\n  -H \"Range: 0-19\"\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Object Data into Table via API - bash\nDESCRIPTION: Shows a POST request with a JSON object for the 'extra_info' column of a product. Utilizes cURL and the standard HTTP endpoint. Requires table defined with matching columns and types (including JSON). Insertion includes a boolean and a string date.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/products\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"id\": 1,\n    \"name\": \"Canned fish\",\n    \"extra_info\": {\n      \"expiry_date\": \"2025-12-31\",\n      \"exportable\": true\n    }\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Reloading Database Connections Catalog Cache via NOTIFY (SQL)\nDESCRIPTION: Fix addresses an issue where `NOTIFY pgrst` failed to reload the database connections catalog cache. This notification is used to signal PostgREST about certain database changes.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nNOTIFY pgrst\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST on Windows using package managers\nDESCRIPTION: Commands to install PostgREST using either Chocolatey or Scoop package managers on Windows.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nchoco install postgrest\nscoop install postgrest\n```\n\n----------------------------------------\n\nTITLE: Receiving Recursive Many-To-One Query Results in JSON\nDESCRIPTION: This JSON array shows the result for the employee with `id=3` (Miller). It includes Miller's `last_name` and a nested object `supervisor` containing the `last_name` of their supervisor (Taylor).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"last_name\": \"Miller\",\n    \"supervisor\": {\n      \"last_name\": \"Taylor\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Full-Text Search on Computed Field\nDESCRIPTION: This snippet shows the expected JSON response format when performing a full-text search on the 'full_name' computed field.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"first_name\": \"Samuel\", \"last_name\": \"Beckett\", \"job\": \"novelist\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Future Epoch Time in PostgreSQL\nDESCRIPTION: SQL query to calculate the epoch time 5 minutes in the future for token expiration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\nselect extract(epoch from now() + '5 minutes'::interval) :: integer;\n```\n\n----------------------------------------\n\nTITLE: Creating Untyped Record Function in PostgreSQL\nDESCRIPTION: Demonstrates how to create a function that returns SETOF record by selecting all records from the projects table. This function returns untyped records which limits filtering capabilities.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_28\n\nLANGUAGE: postgres\nCODE:\n```\ncreate function projects_setof_record() returns setof record as $$\n  select * from projects;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Result with Embedded Resource - PostgREST - JSON\nDESCRIPTION: Provides a sample of the JSON response when resource embedding is used, as in the /films endpoint. Demonstrates that the 'title' and a nested 'directors' object are returned, emphasizing that object key ordering is not guaranteed per JSON Schema spec. No external dependencies; structure varies based on schema and embedding.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"title\",\n    \"directors\": {\n      \"id\": 5,\n      \"last_name\": \"name\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Schemas in PostgREST (Bash)\nDESCRIPTION: Sets the `db-schemas` configuration variable to a comma-separated list ('tenant1', 'tenant2') to expose multiple schemas. The first schema in the list ('tenant1') acts as the default if no specific profile header is provided in the request. Only the selected schema (default or via header) is added to the `search_path`.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndb-schemas = \"tenant1, tenant2\"\n```\n\n----------------------------------------\n\nTITLE: Querying PostGIS Table with GeoJSON Output via API - bash\nDESCRIPTION: Requests spatial data in GeoJSON format via the Accept: application/geo+json header, retrieving all coverage polygons. Returns data as a FeatureCollection when used with compatible PostGIS and PostgREST; ideal for GIS frontend applications.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/coverage\" \\\n  -H \"Accept: application/geo+json\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Unicode Table Names via HTTP - PostgREST - http\nDESCRIPTION: Demonstrates an HTTP GET request for a table with a Unicode name in PostgREST. Requires the server to support and expose tables with Unicode names in the schema. The table name is included directly in the HTTP request path. Input is the raw HTTP request, and response is dependent on the server configuration and permissions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /\\u0645\\u0648\\u0627\\u0631\\u062F HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Deleting a To-Do Item via PostgreSQL Function\nDESCRIPTION: Defines a PostgreSQL function `api.delete_todo` responsible for deleting a to-do item from the `api.todos` table. It takes the ID of the task to be deleted (`_id`) as its sole parameter. After the deletion is performed, it calls `api.html_all_todos()` to generate and return the HTML for the refreshed to-do list, allowing HTMX to update the displayed list.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_12\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function api.delete_todo(_id int) returns \"text/html\" as $$\n  delete from api.todos where id = _id;\n  select api.html_all_todos();\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Creating Add To-Do Function with HTML Response in PostgreSQL\nDESCRIPTION: Defines a function that inserts a new to-do item and returns the updated HTML list of all to-dos.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.add_todo(_task text) returns \"text/html\" as $$\n  insert into api.todos(task) values (_task);\n  select api.html_all_todos();\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Array Parameter - Postgres - SQL\nDESCRIPTION: Defines 'plus_one', a SQL function accepting an array of integers and returning an array where each value has been incremented by one. Utilizes unnest() and array_agg() for processing. Requires no dependencies other than PostgreSQL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_11\n\nLANGUAGE: postgres\nCODE:\n```\ncreate function plus_one(arr int[]) returns int[] as $$\n   SELECT array_agg(n + 1) FROM unnest($1) AS n;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Generating Editable Task Form HTML in PostgreSQL\nDESCRIPTION: Defines a PostgreSQL function `api.html_editable_task` that takes a task ID (`_id`) as input. It queries the `api.todos` table for the corresponding task and generates an HTML `<form>` snippet. This form includes an input field pre-filled with the task's text, allowing users to edit it. The form is configured with HTMX attributes (`hx-post`, `hx-target`, etc.) to submit changes to the `/rpc/change_todo_task` endpoint and update the `#todo-list-area` element upon submission or focusout. It depends on the `api.todos` table and the `api.sanitize_html` function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function api.html_editable_task(_id int) returns \"text/html\" as $$\n  select format ($html$\n  <form id=\"edit-task-%1$s\"\n        hx-post=\"/rpc/change_todo_task\"\n        hx-headers='{\"Accept\": \"text/html\"}'\n        hx-vals='{\"_id\": %1$s}'\n        hx-target=\"#todo-list-area\"\n        hx-trigger=\"submit,focusout\">\n    <input id=\"task-%1$s\" type=\"text\" name=\"_task\" value=\"%2$s\" autofocus>\n  </form>\n  $html$,\n    id,\n    api.sanitize_html(task)\n  )\n  from api.todos\n  where id = _id;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Creating a View for the \"Any\" Handler Example in PostgreSQL\nDESCRIPTION: Creates a view named `\"lines.xml\"` that simply selects all columns from the `lines` table. This view will be associated with the \"any\" handler to demonstrate providing XML output regardless of the requested media type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_18\n\nLANGUAGE: postgres\nCODE:\n```\n-- we'll use an .xml suffix for the view to be clear its output is always XML\ncreate view \"lines.xml\" as\nselect * from lines;\n```\n\n----------------------------------------\n\nTITLE: Updating Multidimensional Array Data via API - bash\nDESCRIPTION: Uses PATCH with cURL to update a multidimensional array column ('cinema_floor_auditorium') on a specific row in the 'movies' table via the PostgREST API. Data supplied as a three-dimensional JSON array. Requires PostgREST API endpoint, the table, and column defined as int[][][]. Targets row where id=1.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/movies?id=eq.1\" \\\n  -X PATCH -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"cinema_floor_auditorium\": [ [ [1,2], [6,7] ], [ [3,5], [8,9] ] ]\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Dumping PostgREST Schema Cache to JSON - Bash\nDESCRIPTION: This snippet demonstrates how to use the '--dump-schema' flag to export the current schema cache of a PostgREST instance in JSON format. It is useful for introspecting the database schema as seen by PostgREST, particularly for debugging and integration. The only requirement is a configured PostgREST environment; outputs the schema to stdout.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/cli.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest [--dump-schema]\n```\n\n----------------------------------------\n\nTITLE: Requesting Planned Count for Faster Row Total Estimation - Bash (curl)\nDESCRIPTION: Demonstrates requesting a planned (estimated by database statistics) count for a resource in PostgREST. Uses 'Prefer: count=planned' in the curl request to receive a faster but possibly inexact result. Suitable for fast UI updates when absolute precision is not necessary.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/bigtable?limit=25\" -I \\\n  -H \"Prefer: count=planned\"\n```\n\n----------------------------------------\n\nTITLE: Filtering with IS DISTINCT FROM Operator (PostgREST API)\nDESCRIPTION: Demonstrates using the `isdistinct` operator for filtering. The example filters the 'people' resource where the 'alias' column is distinct from the value 'foo', equivalent to the SQL `IS DISTINCT FROM` clause.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\n/people?alias=isdistinct.foo\n```\n\n----------------------------------------\n\nTITLE: Receiving Recursive Many-To-Many Query Results in JSON\nDESCRIPTION: This JSON array shows the result for the user with `id=4` (`the_top_artist`). It includes their `username` and two nested arrays: `subscribers` (listing users `patrick109` and `alicia_smith`) and `following` (listing user `top_streamer`), each containing the respective usernames.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"username\": \"the_top_artist\",\n    \"subscribers\": [\n      { \"username\": \"patrick109\" },\n      { \"username\": \"alicia_smith\" }\n    ],\n    \"following\": [\n      { \"username\": \"top_streamer\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Receiving Disambiguated One-To-Many Join Results in JSON\nDESCRIPTION: This JSON array shows the result for the address with `id=1`. It includes the address `name` and two nested arrays: `billing_orders` (orders where this address is the billing address) and `shipping_orders` (orders where this address is the shipping address), each containing the `name` of the associated orders.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"32 Glenlake Dr.Dearborn, MI 48124\",\n    \"billing_orders\": [\n      { \"name\": \"Personal Water Filter\" },\n      { \"name\": \"Coffee Machine\" }\n    ],\n    \"shipping_orders\": [\n      { \"name\": \"Coffee Machine\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Triggering PostgREST Configuration and Schema Reload (PostgreSQL)\nDESCRIPTION: Shows the PostgreSQL `NOTIFY` commands used to signal a running PostgREST instance to reload its configuration and schema cache, respectively. This is essential after modifying schemas or the dynamic configuration source (like the `postgrest.pre_config` function or the `postgrest.config` table) when using `in_db_config` and relevant notification settings.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_10\n\nLANGUAGE: postgres\nCODE:\n```\nNOTIFY pgrst, 'reload config';\nNOTIFY pgrst, 'reload schema';\n```\n\n----------------------------------------\n\nTITLE: API Response With Small Table Estimated/Exact Count - HTTP\nDESCRIPTION: Shows an HTTP response for a small table where estimated and exact counts match, and the Content-Range header includes accurate row totals. Used for cases when relative error must be minimal and row count is below a defined threshold.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 206 Partial Content\\nContent-Range: 0-24/321\n```\n\n----------------------------------------\n\nTITLE: Timestamp Query Result with Custom Timezone (PostgREST API, JSON)\nDESCRIPTION: Returns a list of timestamp values in the requested timezone. Each object contains a 't' field with an ISO8601 string in the new timezone. Dependencies: server and data. Input: JSON array. Output: list of timestamps with expected offsets.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"t\":\"2023-10-18T05:37:59.611-07:00\"},\n  {\"t\":\"2023-10-18T07:37:59.611-07:00\"},\n  {\"t\":\"2023-10-18T09:37:59.611-07:00\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Receiving a Response with a Trace Header (HTTP)\nDESCRIPTION: Example HTTP response headers demonstrating the trace header functionality. Because the request included `X-Request-Id: 123` and PostgREST was configured with `server-trace-header = \"X-Request-Id\"`, the response includes the same `X-Request-Id: 123` header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_14\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nX-Request-Id: 123\n```\n\n----------------------------------------\n\nTITLE: Invoking PostgREST Help Command - Bash\nDESCRIPTION: Shows how to run the PostgREST binary with the --help flag from the command line to display available command-line options and usage guidance. This is useful for users who have downloaded the binary and want to explore configuration options directly. No dependencies are required beyond the downloaded postgrest executable, and the command outputs textual help information to the console. Limitations: Requires the executable to be in the system path or current directory; no arguments besides --help are needed for this basic query.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgrest --help\n```\n\n----------------------------------------\n\nTITLE: OR Filtering with Multiple Conditions\nDESCRIPTION: Demonstrates using OR operator with is.null conditions to filter films with no actors or directors\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d select=title,actors(*),directors(*)\" \\\n    -d \"or=(actors.is.null,directors.is.null)\"\n```\n\n----------------------------------------\n\nTITLE: PostgREST Error Response JSON Format\nDESCRIPTION: JSON structure of a PostgREST-specific error, including the PGRST-prefixed error code, hint, details, and message fields for a non-existent function error.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hint\": \"...\",\n  \"details\": null,\n  \"code\": \"PGRST202\",\n  \"message\": \"Could not find the api.nonexistent_function() function in the schema cache\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logical Operators for Filtering in PostgREST\nDESCRIPTION: Shows how to use the 'or' operator to combine multiple conditions, such as retrieving people under 18 or over 21.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?or=(age.lt.18,age.gt.21)\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Singular Result via curl with Vendor Media Type - PostgREST - Bash\nDESCRIPTION: Demonstrates using curl to request a singular JSON object (not wrapped in an array) from /items by specifying 'application/vnd.pgrst.object+json' in the Accept header. The server returns a single object if exactly one result is found; otherwise, a 406 Not Acceptable error is returned. The endpoint and vendor media type support must be present.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/items?id=eq.1\" \\\n  -H \"Accept: application/vnd.pgrst.object+json\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Recursive One-To-Many Query Results in JSON\nDESCRIPTION: This JSON array shows the result for the employee with `id=1` (Taylor). It includes Taylor's `name` and a nested array `supervisees` containing objects for each direct report (Johnson and Miller), each including their `name` as requested.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Taylor\",\n    \"supervisees\": [\n      { \"name\": \"Johnson\" },\n      { \"name\": \"Miller\" }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Table and Enabling RLS in PostgreSQL\nDESCRIPTION: Defines a `chat` table schema with columns for message ID, timestamp, sender, recipient, subject, and body. It sets default values for ID, timestamp, and sender (using `current_user`) and enables Row Level Security (RLS) on the table using `ALTER TABLE ... ENABLE ROW LEVEL SECURITY`. Requires the `uuid-ossp` extension for `uuid_generate_v4()` if not otherwise available.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE TABLE chat (\n  message_uuid    UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  message_time    TIMESTAMP NOT NULL DEFAULT now(),\n  message_from    NAME      NOT NULL DEFAULT current_user,\n  message_to      NAME      NOT NULL,\n  message_subject VARCHAR(64) NOT NULL,\n  message_body    TEXT\n);\n\nALTER TABLE chat ENABLE ROW LEVEL SECURITY;\n```\n\n----------------------------------------\n\nTITLE: Viewing Diagnostic PostgREST Server Logs (stderr)\nDESCRIPTION: Example of PostgREST diagnostic logs written to standard error (stderr). These logs provide information about the server's internal state, such as startup messages, database connection details, schema cache loading statistics, listener activity, and configuration reloads.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_1\n\nLANGUAGE: Log\nCODE:\n```\n06/May/2024:08:16:11 -0500: Starting PostgREST 12.1...\n06/May/2024:08:16:11 -0500: Successfully connected to PostgreSQL 14.10 (Ubuntu 14.10-0ubuntu0.22.04.1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0, 64-bit\n06/May/2024:08:16:11 -0500: Connection Pool initialized with a maximum size of 10 connections\n06/May/2024:08:16:11 -0500: API server listening on port 3000\n06/May/2024:08:16:11 -0500: Listening for database notifications on the \"pgrst\" channel\n06/May/2024:08:16:11 -0500: Config reloaded\n06/May/2024:08:16:11 -0500: Schema cache queried in 3.8 milliseconds\n06/May/2024:08:16:11 -0500: Schema cache loaded 15 Relations, 8 Relationships, 8 Functions, 0 Domain Representations, 4 Media Type Handlers\n06/May/2024:14:11:27 -0500: Received a config reload message on the \"pgrst\" channel\n06/May/2024:14:11:27 -0500: Config reloaded\n```\n\n----------------------------------------\n\nTITLE: PostgREST Error Response Headers\nDESCRIPTION: HTTP response headers for a PostgREST-specific error, showing a 404 Not Found status for a non-existent function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 404 Not Found\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgREST Configuration via NOTIFY (SQL)\nDESCRIPTION: Shows the SQL command used to signal PostgREST to reload its configuration, including role settings. This allows dynamic updates without restarting the PostgREST server.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nNOTIFY pgrst, 'reload config'\n```\n\n----------------------------------------\n\nTITLE: Querying with Nested Embedding using cURL\nDESCRIPTION: This bash snippet shows how to perform a nested embedding query to retrieve actors, their roles, and the associated films using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/actors?select=roles(character,films(title,year))\"\n```\n\n----------------------------------------\n\nTITLE: Custom Response Headers Configuration\nDESCRIPTION: Demonstrates setting custom response headers for caching control.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\nSELECT set_config('response.headers',\n  '[{\"Cache-Control\": \"public\"}, {\"Cache-Control\": \"max-age=259200\"}]', true);\n```\n\n----------------------------------------\n\nTITLE: Default Array Result with Nulls - PostgREST - JSON\nDESCRIPTION: Shows a typical JSON array response for a collection endpoint, /projects?id=gt.10, where some object fields contain null values. Demonstrates the standard behavior of returning all keys, even when their values are null. This is the default unless null stripping is requested.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\": 11, \"name\": \"OSX\",      \"client_id\": 1,    \"another_col\": \"val\" },\n  { \"id\": 12, \"name\": \"ProjectX\", \"client_id\": null, \"another_col\": null },\n  { \"id\": 13, \"name\": \"Y\",        \"client_id\": null, \"another_col\": null }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting SQL EXPLAIN Plan (JSON Format) (Bash)\nDESCRIPTION: Uses cURL to request the PostgreSQL EXPLAIN plan in JSON format. The `Accept: application/vnd.pgrst.plan+json` header specifies the desired JSON format. Requires `db-plan-enabled` to be true in PostgREST configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/users?select=name&order=id\" \\\n  -H \"Accept: application/vnd.pgrst.plan+json\"\n```\n\n----------------------------------------\n\nTITLE: Table-Valued Function Example Definition - Postgres - SQL\nDESCRIPTION: Shows the SQL definition header for 'best_films_2017', a function returning a set of 'films' table rows in PostgreSQL. The full body is omitted. Used for demonstrating filters and embedding on table-valued functions from REST endpoints.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_20\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE FUNCTION best_films_2017() RETURNS SETOF films ..\n```\n\n----------------------------------------\n\nTITLE: Defining the \"Any\" Media Type Domain (*/*) in PostgreSQL\nDESCRIPTION: Creates a PostgreSQL domain named `\"*/*\"` based on the `bytea` type. This special domain name acts as a catch-all handler, responding to any `Accept` header value or even requests without an `Accept` header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_17\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"*/*\" as bytea;\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response Headers\nDESCRIPTION: Example of HTTP response headers returned when a PostgreSQL constraint violation occurs, showing a 400 Bad Request status code.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Empty Embed Filtering\nDESCRIPTION: Demonstrates using empty embeds for filtering without including the filtered resource in the response\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d \"select=title,actors()\" \\\n    -d \"actors.first_name=eq.Jehanne\" \\\n    -d \"actors=not.is.null\"\n```\n\n----------------------------------------\n\nTITLE: Querying hstore Keys Using Arrow Operators via API - bash\nDESCRIPTION: GETs all countries with a native name, selecting only the field from within the hstore based on the 'native' key. Applies a filter for rows where the common name matches Egypt, showing advanced hstore/JSON column query patterns.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/countries?select=name->>native&name->>common=like.Egypt\"\n```\n\n----------------------------------------\n\nTITLE: JSON Array Result with Nulls Stripped - PostgREST - JSON\nDESCRIPTION: Provides a sample JSON response from the /projects endpoint when null values are stripped (with the appropriate Accept header). Only properties with non-null values are retained in each object, reducing the data transferred. Behavior depends on endpoint support for the 'nulls=stripped' option.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\": 11, \"name\": \"OSX\", \"client_id\": 1, \"another_col\": \"val\" },\n  { \"id\": 12, \"name\": \"ProjectX\" },\n  { \"id\": 13, \"name\": \"Y\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Using Operator Modifiers in PostgREST\nDESCRIPTION: Shows how to use the 'any' modifier to simplify logic when filtering for multiple values of the same column.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -g \"http://localhost:3000/people?last_name=like(any).{O*,P*}\"\n```\n\n----------------------------------------\n\nTITLE: Returning Scalar Result from RPC Endpoint - JSON\nDESCRIPTION: Shows the expected JSON response when calling the 'add_them' function via PostgREST. The output is a single integer value representing the addition result. There are no dependencies or parameters in this snippet itself; output is produced from an RPC call as shown previously.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n3\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum and Product Table with Enum Column - postgres\nDESCRIPTION: Creates a PostgreSQL enum type ('letter_size') and a 'products' table with size column using this enum. The table allocation includes an auto-generated identity column for id. Sets up for enforcing valid values and enum-based queries via API.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_15\n\nLANGUAGE: postgres\nCODE:\n```\ncreate type letter_size as enum ('s','m','l','xl');\n\ncreate table products (\n  id int primary key generated always as identity,\n  name text,\n  size letter_size\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers via Pre-Request Function in PostgreSQL (PL/pgSQL)\nDESCRIPTION: This PL/pgSQL function, `custom_headers`, is designed to be used with PostgREST's `db-pre-request` setting. It retrieves the 'user-agent' from the request headers and checks if it matches MSIE 6.0 or 7.0. If it matches, it sets the 'Cache-Control' response header to prevent caching using `set_config`. This function requires the `plpgsql` language extension in PostgreSQL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function custom_headers()\nreturns void as $$\ndeclare\n  user_agent text := current_setting('request.headers', true)::json->>'user-agent';\nbegin\n  if user_agent similar to '%MSIE (6.0|7.0)%' then\n    perform set_config('response.headers',\n      '[{\"Cache-Control\": \"no-cache, no-store, must-revalidate\"}]', false);\n  end if;\nend; $$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Selecting a Schema for GET/HEAD Requests using curl (Bash)\nDESCRIPTION: Demonstrates how to use the `Accept-Profile` HTTP header with curl to specify which schema PostgREST should use when handling a GET or HEAD request. In this example, the 'tenant2' schema is selected for the request to the `/items` endpoint.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/items\" \\\n  -H \"Accept-Profile: tenant2\"\n```\n\n----------------------------------------\n\nTITLE: Extracting PostgREST Binary on UNIX\nDESCRIPTION: Command to extract the compressed PostgREST binary file on UNIX platforms.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar Jxf postgrest-[version]-[platform].tar.xz\n```\n\n----------------------------------------\n\nTITLE: Querying a Table with GET in PostgREST\nDESCRIPTION: Demonstrates how to retrieve the full contents of a table named 'people' using a GET request to PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\"\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response with Custom Status (402)\nDESCRIPTION: Displays the complete HTTP response generated by PostgREST when a PostgreSQL function raises a 'PT402' SQLSTATE. It includes the HTTP status line (402 Payment Required), content type header, and the JSON body containing the custom message, details, hint, and the specific error code (PT402).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 402 Payment Required\nContent-Type: application/json; charset=utf-8\n\n{\n  \"message\": \"Payment Required\",\n  \"details\": \"Quota exceeded\",\n  \"hint\": \"Upgrade your plan\",\n  \"code\": \"PT402\"\n}\n```\n\n----------------------------------------\n\nTITLE: PostgREST Configuration File\nDESCRIPTION: Configuration settings for connecting PostgREST to PostgreSQL database\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut0.rst#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndb-uri = \"postgres://authenticator:mysecretpassword@localhost:5432/postgres\"\ndb-schemas = \"api\"\ndb-anon-role = \"web_anon\"\n```\n\n----------------------------------------\n\nTITLE: Making a Request to Get the OpenAPI Documentation in Bash\nDESCRIPTION: Shows how to request the OpenAPI documentation from a PostgREST server using curl.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Function with Custom Isolation Level\nDESCRIPTION: Demonstrates creating a function with a specific transaction isolation level setting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE OR REPLACE FUNCTION myfunc()\nRETURNS text as $$\n  SELECT 'hello';\n$$\nLANGUAGE SQL\nSET default_transaction_isolation TO 'serializable';\n```\n\n----------------------------------------\n\nTITLE: JWT Secret Configuration\nDESCRIPTION: Example of configuring JWT secret in PostgREST's configuration file using an escaped JSON string.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\njwt-secret = \"{ \\\"alg\\\":\\\"RS256\\\", … }\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a PostgREST Logged Error (Bash)\nDESCRIPTION: Uses cURL to send a GET request to a hypothetical '/protected_table' endpoint on localhost port 3000. This request is intended to fail with an authorization error (HTTP 401), triggering the SQL query logging configured in the previous snippet.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"localhost:3000/protected_table\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed CORS Origins in PostgREST (Configuration)\nDESCRIPTION: Illustrates how to use the `server-cors-allowed-origins` configuration parameter in PostgREST to restrict accepted CORS requests to specific domains. In this example, only requests originating from `http://example.com` or `http://example2.com` would be allowed, overriding the default permissive setting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/cors.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nserver-cors-allowed-origins=\"http://example.com, http://example2.com\"\n```\n\n----------------------------------------\n\nTITLE: Granting User Switching Permission to Authenticator - Postgres SQL\nDESCRIPTION: Grants the 'foo' role to the 'authenticator' PostgreSQL user, allowing the latter to SET ROLE to 'foo' when handling requests. This grant is a prerequisite for role elevation when using JWT-based authentication with PostgREST. Run this as a superuser or table owner to allow session-based role switching.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management-using-postgres-users-and-passwords.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT foo TO authenticator;\n```\n\n----------------------------------------\n\nTITLE: Receiving Disambiguated Many-To-One Join Results in JSON\nDESCRIPTION: This JSON array shows the successful result of the disambiguated join request. Each order object includes nested objects for the `billing_address` and `shipping_address`, containing the `name` field as requested, retrieved using the specified foreign key relationships.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Personal Water Filter\",\n    \"billing_address\": {\n      \"name\": \"32 Glenlake Dr.Dearborn, MI 48124\"\n    },\n    \"shipping_address\": {\n      \"name\": \"30 Glenlake Dr.Dearborn, MI 48124\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Increasing File Descriptor Limits for PostgREST - INI\nDESCRIPTION: This systemd service override snippet increases the file descriptor limit (LimitNOFILE) to 10,000 for the PostgREST process. Place this within the '[Service]' section of a systemd service file or an override drop-in to handle high-traffic scenarios and avoid 'No file descriptors available' errors. The limit can be adjusted as required and may need root privileges to set.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/systemd.rst#2025-04-23_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=10000\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST with Help Flag\nDESCRIPTION: Commands to run PostgREST with the --help flag to see usage instructions, for both binary and package manager installations.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/install.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Running postgrest binary\n./postgrest --help\n\n# Running postgrest installed from a package manager\npostgrest --help\n```\n\n----------------------------------------\n\nTITLE: Inspecting the PostgREST Server Version Header (HTTP)\nDESCRIPTION: Example of an HTTP HEAD request and the corresponding response headers. The `Server` header in the response indicates the running version of PostgREST (e.g., `postgrest/11.0.1`).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nHEAD /users HTTP/1.1\n\nServer: postgrest/11.0.1\n```\n\n----------------------------------------\n\nTITLE: Calling Table-Valued Function with Embedded Select - Bash\nDESCRIPTION: Shows how to use PostgREST to call a table-valued function and select specific fields (title, director) with possible resource embedding using a GET request. The endpoint returns a collection of film records with joined director data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/best_films_2017?select=title,director:directors(*)\"\n```\n\n----------------------------------------\n\nTITLE: Request Settings Access Examples\nDESCRIPTION: Shows how to access various request-related settings using current_setting function.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgres\nCODE:\n```\n-- To get all the headers sent in the request\nSELECT current_setting('request.headers', true)::json;\n\n-- To get a single header, you can use JSON arrow operators\nSELECT current_setting('request.headers', true)::json->>'user-agent';\n\n-- value of sessionId in a cookie\nSELECT current_setting('request.cookies', true)::json->>'sessionId';\n\n-- value of the email claim in a jwt\nSELECT current_setting('request.jwt.claims', true)::json->>'email';\n```\n\n----------------------------------------\n\nTITLE: Explaining Function Query Plan with Curl Header - Bash\nDESCRIPTION: Requests query plan information for a filtered call to 'getallprojects' via a custom Accept header. The endpoint will return a PostgreSQL execution plan in text format instead of regular JSON response. Used for debugging and query optimization.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/getallprojects?id=eq.1\" \\\n  -H \"Accept: application/vnd.pgrst.plan\"\n```\n\n----------------------------------------\n\nTITLE: Updating To-Do Task Text via PostgreSQL Function\nDESCRIPTION: Defines a PostgreSQL function `api.change_todo_task` that modifies the task description (`task` column) of a specific to-do item in the `api.todos` table. It accepts the task ID (`_id`) and the new task text (`_task`) as input. Following the update operation, it retrieves and returns the full HTML representation of the to-do list by executing `api.html_all_todos()`, suitable for updating the UI via HTMX.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_11\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function api.change_todo_task(_id int, _task text) returns \"text/html\" as $$\n  update api.todos set task = _task where id = _id;\n  select api.html_all_todos();\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone Preference with curl (PostgREST API, Bash)\nDESCRIPTION: Demonstrates setting the PostgreSQL session timezone using curl to send the Prefer: timezone header. Allows clients to customize the timezone for temporal query results. Dependencies: curl, PostgREST instance supporting Prefer timezones. Parameters: Prefer header with a valid PostgreSQL timezone. Input: bash request. Output: temporal values in specified timezone.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/timestamps\" \\\n  -H \"Prefer: timezone=America/Los_Angeles\"\n```\n\n----------------------------------------\n\nTITLE: Fetching PostgREST Schema Cache\nDESCRIPTION: Shows how to retrieve the current schema cache data including media handlers, relationships, representations, routines, tables, and timezones.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/admin_server.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3001/schema_cache\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dbMediaHandlers\": [\"...\"],\n  \"dbRelationships\": [\"...\"],\n  \"dbRepresentations\": [\"...\"],\n  \"dbRoutines\": [\"...\"],\n  \"dbTables\": [\"...\"],\n  \"dbTimezones\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Pagination Information in PostgREST Responses - HTTP\nDESCRIPTION: Shows a typical HTTP response from PostgREST containing range headers that identify the range of items returned for paginated queries. The Range-Unit and Content-Range headers specify the item range and support client-side UI pagination controls. No dependencies; output is a standard API response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nRange-Unit: items\\nContent-Range: 0-14/*\n```\n\n----------------------------------------\n\nTITLE: Defining the PostgREST systemd Service - INI\nDESCRIPTION: This snippet provides a full example of a systemd service file for managing the PostgREST process. Placed at '/etc/systemd/system/postgrest.service', it configures process ownership (User, Group), startup (ExecStart), reload behavior (ExecReload), and sets dependency on postgresql.service. The '[Install]' section ensures the service starts on system boot. This file enables robust lifecycle control of PostgREST via systemd.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/systemd.rst#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=REST API for any PostgreSQL database\nAfter=postgresql.service\n\n[Service]\nUser=postgrest\nGroup=postgrest\nExecStart=/bin/postgrest /etc/postgrest/config\nExecReload=/bin/kill -SIGUSR1 $MAINPID\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Creating HTML To-Do Item Function in PostgreSQL\nDESCRIPTION: Defines a function that formats a single to-do item as HTML, using the sanitize_html function for the task text.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.html_todo(api.todos) returns text as $$\n  select format($html$\n    <div>\n      <%2$s>\n        %3$s\n      </%2$s>\n    </div>\n    $html$,\n    $1.id,\n    case when $1.done then 's' else 'span' end,\n    api.sanitize_html($1.task)\n  );\n$$ language sql stable;\n```\n\n----------------------------------------\n\nTITLE: Domain Filter Format Implementation\nDESCRIPTION: Creates a function and cast to handle text to app_uuid conversion for filtering operations.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/domain_representations.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\n-- the name of the function is arbitrary\nCREATE OR REPLACE FUNCTION app_uuid(text) RETURNS app_uuid AS $$\n  select substring(decode($1,'base64')::text from 3)::uuid;\n$$ LANGUAGE SQL IMMUTABLE;\n\n-- plus a CAST to tell PostgREST to use this function\nCREATE CAST (text AS app_uuid) WITH FUNCTION app_uuid(text) AS IMPLICIT;\n```\n\n----------------------------------------\n\nTITLE: Querying for Single Item Array Result - PostgREST - JSON\nDESCRIPTION: Shows the default JSON array result when querying an endpoint for a specific item by ID, such as /items?id=eq.1. Even when only one item matches, the result is wrapped in an array. No dependencies except a properly configured /items endpoint. Useful for illustrating plural default behavior.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\": 1 }\n]\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container\nDESCRIPTION: Docker command to start a PostgreSQL instance with password configuration and port mapping\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut0.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run --name tutorial -p 5432:5432 \\\n                  -e POSTGRES_PASSWORD=notused \\\n                  -d postgres\n```\n\n----------------------------------------\n\nTITLE: Adding Multidimensional Array Column to a Table - postgres\nDESCRIPTION: Alters the existing 'movies' table in PostgreSQL to add a new column of type multidimensional integer (int[][][]). Demonstrates storage of structured hierarchical data such as cinema, floor, and auditorium information. Requires an existing 'movies' table. Provides a foundation for later updates via JSON.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\n-- This new column stores the cinema, floor and auditorium numbers in that order\nalter table movies\nadd column cinema_floor_auditorium int[][][];\n```\n\n----------------------------------------\n\nTITLE: Creating HTML All To-Dos Function in PostgreSQL\nDESCRIPTION: Defines a function that aggregates all to-do items into a single HTML string, or returns a message if there are no items.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.html_all_todos() returns text as $$\n  select coalesce(\n    string_agg(api.html_todo(t), '<hr/>' order by t.id),\n    '<p><em>There is nothing else to do.</em></p>'\n  )\n  from api.todos t;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Filtering with Null Embedded Resource (Anti-Join) (PostgREST API)\nDESCRIPTION: Shows how to filter the primary resource ('projects') to include only those that do *not* have a related 'clients' resource (anti-join). This is achieved using the `is.null` filter on the embedded resource.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n/projects?select=*,clients(*)&clients=is.null\n```\n\n----------------------------------------\n\nTITLE: Substring Matching in PostgREST Query\nDESCRIPTION: Shows how to filter results using substring matching in PostgREST, with options for case sensitivity.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_42\n\nLANGUAGE: http\nCODE:\n```\n?col=like.*hello*\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Structure in PostgreSQL\nDESCRIPTION: Shows the basic transaction structure used by PostgREST for API requests, including access mode and isolation level settings.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nSTART TRANSACTION; -- <Access Mode> <Isolation Level>\n-- <Transaction-scoped settings>\n-- <Main Query>\nEND; -- <Transaction End>\n```\n\n----------------------------------------\n\nTITLE: Querying Films with Directors using PostgREST\nDESCRIPTION: Example of a curl command to request all films and their directors using PostgREST. This demonstrates a many-to-one relationship query.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/films?select=title,directors(id,last_name)\"\n```\n\n----------------------------------------\n\nTITLE: Statement Timeout Configuration\nDESCRIPTION: Shows how to configure statement timeout settings for different database roles.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_7\n\nLANGUAGE: postgres\nCODE:\n```\nALTER ROLE authenticator SET statement_timeout TO '10s';\nALTER ROLE anonymous SET statement_timeout TO '1s';\n```\n\n----------------------------------------\n\nTITLE: Viewing SQL EXPLAIN Plan Output (JSON Format)\nDESCRIPTION: Example output of a PostgreSQL EXPLAIN plan in JSON format, as returned by PostgREST when requested with `Accept: application/vnd.pgrst.plan+json`. Provides a structured representation of the query plan.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Plan\": {\n      \"Node Type\": \"Aggregate\",\n      \"Strategy\": \"Plain\",\n      \"Partial Mode\": \"Simple\",\n      \"Parallel Aware\": false,\n      \"Async Capable\": false,\n      \"Startup Cost\": 73.65,\n      \"Total Cost\": 73.68,\n      \"Plan Rows\": 1,\n      \"Plan Width\": 112,\n      \"Plans\": [\n        {\n          \"Node Type\": \"Index Scan\",\n          \"Parent Relationship\": \"Outer\",\n          \"Parallel Aware\": false,\n          \"Async Capable\": false,\n          \"Scan Direction\": \"Forward\",\n          \"Index Name\": \"users_pkey\",\n          \"Relation Name\": \"users\",\n          \"Alias\": \"users\",\n          \"Startup Cost\": 0.15,\n          \"Total Cost\": 60.90,\n          \"Plan Rows\": 850,\n          \"Plan Width\": 36\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Updated HTML To-Do Function with Edit and Delete in PostgreSQL\nDESCRIPTION: Updates the html_todo function to include buttons for editing and deleting to-dos, using HTMX for AJAX requests.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.html_todo(api.todos) returns text as $$\n  select format($html$\n    <div class=\"grid\">\n      <div id=\"todo-edit-area-%1$s\">\n        <form id=\"edit-task-state-%1$s\"\n              hx-post=\"/rpc/change_todo_state\"\n              hx-vals='{\"_id\": %1$s, \"_done\": %4$s}'\n              hx-target=\"#todo-list-area\"\n              hx-trigger=\"click\">\n          <%2$s style=\"cursor: pointer\">\n            %3$s\n          </%2$s>\n        </form>\n      </div>\n      <div style=\"text-align: right\">\n        <button class=\"outline\"\n                hx-get=\"/rpc/html_editable_task\"\n                hx-vals='{\"_id\": \"%1$s\"}'\n                hx-target=\"#todo-edit-area-%1$s\"\n                hx-trigger=\"click\">\n          <span>\n            <ion-icon name=\"create\"></ion-icon>\n          </span>\n        </button>\n        <button class=\"outline contrast\"\n                hx-post=\"/rpc/delete_todo\"\n                hx-vals='{\"_id\": %1$s}'\n                hx-target=\"#todo-list-area\"\n                hx-trigger=\"click\">\n          <span>\n            <ion-icon name=\"trash\" style=\"color: #f87171\"></ion-icon>\n          </span>\n        </button>\n      </div>\n    </div>\n    $html$,\n    $1.id,\n    case when $1.done then 's' else 'span' end,\n    api.sanitize_html($1.task),\n    (not $1.done)::text\n  );\n$$ language sql stable;\n```\n\n----------------------------------------\n\nTITLE: Filtering with Reserved Characters in Column Names - PostgREST - bash\nDESCRIPTION: Shows how to address columns with reserved characters (such as dots) by enclosing them in percent-encoded double quotes. The query targets the 'information.cpe' column in the 'vulnerabilities' table and matches values using a like pattern. Requires these exact names and structure in the database schema.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/vulnerabilities?%22information.cpe%22=like.*MS*\"\n```\n\n----------------------------------------\n\nTITLE: Linting and Styling PostgREST Code with Nix\nDESCRIPTION: Commands to lint and style PostgREST source code using Nix.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Linting\n$ nix-shell --run postgrest-lint\n\n# Styling / auto-formatting code\n$ nix-shell --run postgrest-style\n```\n\n----------------------------------------\n\nTITLE: Enabling PostGIS Extension and Creating Table - postgres\nDESCRIPTION: Activates the PostGIS extension and defines a 'coverage' table with a geometry column, suitable for storing polygon or spatial data. The id is an integer primary key, name is unique. Provides spatial database capability for spatial data types in subsequent API calls.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_25\n\nLANGUAGE: postgres\nCODE:\n```\n-- Activate the postgis module in the current database\ncreate extension if not exists postgis;\n\ncreate table coverage (\n  id int primary key,\n  name text unique,\n  area geometry\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering NOT IN Values in PostgREST Query\nDESCRIPTION: Demonstrates how to filter results that are not in a specific set of values using PostgREST query syntax.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_37\n\nLANGUAGE: http\nCODE:\n```\n?col=notin.1,2,3\n```\n\n----------------------------------------\n\nTITLE: Querying REST API with Bearer Token Authorization - Bash\nDESCRIPTION: Performs a curl GET request to the PostgREST 'foobar' endpoint with an Authorization header containing a JWT for the 'foo' role. The request is expected to fail initially with a 'Permission denied to set role' error unless further permissions are granted. The JWT token in the Authorization header is required for role-based access.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management-using-postgres-users-and-passwords.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/foobar\" \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZm9vIiwiZXhwIjoxNjY4MTkyMjAyfQ.zzdHCBjfkqDQLQ8D7CHO3cIALF6KBCsfPTWgwhCiHCY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST SQL Query Logging (Bash)\nDESCRIPTION: Shows how to configure the `log-query` setting in a PostgREST configuration file using Bash syntax. Setting it to `main-query` enables logging of the primary SQL query executed for incoming requests at the configured log level. Setting it to `disabled` (the default) prevents query logging.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Logs the main SQL query\nlog-query = \"main-query\"\n\n# Disables logging the SQL query\nlog-query = \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Aggregates in To-One Spreads\nDESCRIPTION: Demonstrates using aggregates within spread embedded resources.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=order_date,...customers(subscription_date.max(),subscription_date.min())\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"order_date\": \"2023-11-01\",\n    \"max\": \"2023-10-15\",\n    \"min\": \"2013-10-01\"\n  },\n  {\n    \"order_date\": \"2023-11-02\",\n    \"max\": \"2023-10-30\",\n    \"min\": \"2016-02-11\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Schema in PostgREST (Bash)\nDESCRIPTION: Sets the `db-schemas` configuration variable in the PostgREST configuration file to expose only the 'api' schema. This specified schema is automatically added to the PostgreSQL `search_path` for every incoming request.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndb-schemas = \"api\"\n```\n\n----------------------------------------\n\nTITLE: Error Response for Accessing Unconfigured Schema (JSON)\nDESCRIPTION: Displays the JSON error response returned by PostgREST when a request attempts to use a schema via `Accept-Profile` or `Content-Profile` that is not listed in the `db-schemas` configuration. The error code 'PGRST106' indicates this issue, and the message lists the valid schemas.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\":\"PGRST106\",\n  \"details\":null,\n  \"hint\":null,\n  \"message\":\"The schema must be one of the following: tenant1, tenant2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Table with Range Type\nDESCRIPTION: This SQL creates a table with a tsrange column for storing time ranges. The tsrange type allows storing and querying time intervals with inclusive or exclusive bounds.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_31\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table events (\n  id int primary key,\n  name text unique,\n  duration tsrange\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated Bulk RPC Call Header (PostgREST API)\nDESCRIPTION: Mentions the deprecation (in v10.1.0, removed in v11.0.0) of using the `Prefer: params=multiple-objects` header for bulk Remote Procedure Calls (RPC). The recommended alternative is to define a function that accepts a JSON array or object parameter.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPrefer: params=multiple-objects\n```\n\n----------------------------------------\n\nTITLE: Altering Table Ownership in PostgreSQL - Postgres SQL\nDESCRIPTION: Changes the owner of the 'foobar' table in the 'public' schema to the 'postgres' user. This step is fundamental in defining administrative control over the table, which is required before assigning further permissions to other roles. There are no parameters; the table and owner must exist in advance.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management-using-postgres-users-and-passwords.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nALTER TABLE public.foobar owner TO postgres;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Transaction Isolation Level (SQL/Config)\nDESCRIPTION: Mentions the `default_transaction_isolation` setting, which allows configuring the transaction isolation level used by PostgREST. This can be set globally, per database role (`ALTER ROLE ... SET default_transaction_isolation = '...'`), or per specific function (`CREATE FUNCTION ... SET default_transaction_isolation = '...'`).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\ndefault_transaction_isolation\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate function .. set default_transaction_isolation = 'repeatable read'\n```\n\nLANGUAGE: sql\nCODE:\n```\nalter role .. set default_transaction_isolation = 'serializable'\n```\n\n----------------------------------------\n\nTITLE: Setting the JWT Secret in PostgREST Configuration\nDESCRIPTION: This configuration parameter, `jwt-secret`, holds the secret key PostgREST uses to verify the signature of JWTs issued by an external provider like Auth0 using the HS256 algorithm. This value must exactly match the signing secret configured within the Auth0 API settings to ensure successful token validation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/jwt_gen.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njwt-secret\n```\n\n----------------------------------------\n\nTITLE: Vertical Filtering in PostgREST\nDESCRIPTION: Shows how to use the 'select' parameter to specify which columns should be returned in the response, useful for efficiency with wide columns.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?select=first_name,age\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Films with Directors Query\nDESCRIPTION: Example JSON response from the PostgREST API showing films with their associated directors. This illustrates the structure of embedded resources in the response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"title\": \"Workers Leaving The Lumière Factory In Lyon\",\n    \"directors\": {\n      \"id\": 2,\n      \"last_name\": \"Lumière\"\n    }\n  },\n  { \"title\": \"The Dickson Experimental Sound Film\",\n    \"directors\": {\n      \"id\": 1,\n      \"last_name\": \"Dickson\"\n    }\n  },\n  { \"title\": \"The Haunted Castle\",\n    \"directors\": {\n      \"id\": 3,\n      \"last_name\": \"Méliès\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Function Output - JSON\nDESCRIPTION: Shows the returned JSON array result ([2,3,4,5]) from the 'plus_one' function. Output arrays correspond to the input incremented by one. No inputs or parameters in this example.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[2,3,4,5]\n```\n\n----------------------------------------\n\nTITLE: Using Database Pre-Configuration Function\nDESCRIPTION: Shows how to reference a database function in the PostgREST configuration to set parameters directly from the database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# postgrest.conf\n\ndb-pre-config  = \"postgrest.pre_config\"\n\n# or env vars\n\nPGRST_DB_PRE_CONFIG = \"postgrest.pre_config\"\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST on macOS using Homebrew\nDESCRIPTION: Command to install PostgREST using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install postgrest\n```\n\n----------------------------------------\n\nTITLE: Querying with Cast for Range Column in PostgREST\nDESCRIPTION: This command demonstrates how to request a range column with an explicit cast to JSON. The '::json' suffix causes PostgREST to apply the custom cast when returning the data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/events?select=id,name,duration::json\"\n```\n\n----------------------------------------\n\nTITLE: Checking Consistent Module Aliases\nDESCRIPTION: Validates that modules are imported with consistent aliases throughout the project, exiting with non-zero status if inconsistencies are found.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhsie check-aliases main src\n```\n\n----------------------------------------\n\nTITLE: Applying Rate Limiting to RPC Login Route in Nginx (nginx)\nDESCRIPTION: Applies the previously created 'login' rate limiting zone to the /rpc/login/ location. It allows small bursts (up to 5 queued requests per IP) before throttling. Requires a previously defined limit_req_zone. Inputs are HTTP requests to /rpc/login/; excessive requests over the burst limit are dropped or delayed. Outputs are regular PostgREST responses or Nginx error responses for excess rate.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/nginx.rst#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /rpc/login/ {\n  # apply rate limiting\n  limit_req zone=login burst=5;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum PostgreSQL Connection Lifetime (PostgREST)\nDESCRIPTION: Introduces the `db-pool-max-lifetime` configuration option to limit the maximum total lifetime of any PostgreSQL connection in the pool, regardless of activity. The default is 30 minutes.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ndb-pool-max-lifetime\n```\n\n----------------------------------------\n\nTITLE: Filtering Columns in PostgREST Query\nDESCRIPTION: Demonstrates how to select specific columns in a PostgREST query, reducing the amount of data returned.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_35\n\nLANGUAGE: http\nCODE:\n```\n?select=col1,col2\n```\n\n----------------------------------------\n\nTITLE: Querying a Custom View in PostgREST\nDESCRIPTION: Demonstrates how to query a custom view created in the database using PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/fresh_stories\"\n```\n\n----------------------------------------\n\nTITLE: Binary Upload Success Response - HTTP\nDESCRIPTION: Depicts a typical HTTP/1.1 200 OK response header when file upload to 'upload_binary' succeeds. No body required; the header signals operation success and completion. Used in file upload scenarios.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n\n[ ... ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving PostgREST Runtime Configuration\nDESCRIPTION: Example of fetching the current runtime configuration settings from the admin server.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/admin_server.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3001/config\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndb-aggregates-enabled = false\ndb-anon-role = \"web_anon\"\ndb-channel = \"pgrst\"\ndb-channel-enabled = false\n...\n```\n\n----------------------------------------\n\nTITLE: Overriding API Title with Schema Comments in PostgreSQL\nDESCRIPTION: Demonstrates how to override the API title in the OpenAPI documentation by adding a multi-line comment to the schema, where the first line becomes the title and the rest becomes the description.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\nCOMMENT ON SCHEMA api IS\n$$FooBar API\n\nA RESTful API that serves FooBar data.$$;\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST OpenAPI Output Mode (Bash)\nDESCRIPTION: Demonstrates setting the `openapi-mode` parameter in PostgREST configuration using Bash syntax. This controls the behavior of the OpenAPI documentation endpoint. Options include `follow-privileges` (shows endpoints based on the requesting role's permissions), `ignore-privileges` (shows all configured endpoints), and `disabled` (disables the OpenAPI endpoint).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Follows the privileges of the JWT role claim (or from db-anon-role if the JWT is not sent)\n# Shows information depending on the permissions that the role making the request has\nopenapi-mode = \"follow-privileges\"\n\n# Ignores the privileges of the JWT role claim (or from db-anon-role if the JWT is not sent)\n# Shows all the exposed information, regardless of the permissions that the role making the request has\nopenapi-mode = \"ignore-privileges\"\n\n# Disables the OpenApi output altogether.\n# Throws a `404 Not Found` error when accessing the API root path\nopenapi-mode = \"disabled\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAPI Specification Function (PostgREST)\nDESCRIPTION: Makes the `db-root-spec` configuration option stable. This option allows specifying a database function that PostgREST will call to generate the root OpenAPI specification, enabling complete customization of the API documentation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ndb-root-spec\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Replica Status\nDESCRIPTION: SQL commands to verify if the current PostgreSQL instance is a replica and demonstrate LISTEN limitations on replicas.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/listener.rst#2025-04-23_snippet_1\n\nLANGUAGE: psql\nCODE:\n```\n-- check if the instance is a replica\npostgres=# select pg_is_in_recovery();\n pg_is_in_recovery\n-------------------\n t\n(1 row)\n\npostgres=# LISTEN pgrst;\nERROR:  cannot execute LISTEN during recovery\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Acquisition Timeout (PostgREST)\nDESCRIPTION: Introduces or updates the `db-pool-acquisition-timeout` configuration option, setting the maximum time (in seconds) to wait for acquiring a connection from the pool. It defaults to 10 seconds and is no longer optional.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\ndb-pool-acquisition-timeout\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST on Arch Linux using pacman\nDESCRIPTION: Command to install PostgREST from the community repository using pacman package manager on Arch Linux.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npacman -S postgrest\n```\n\n----------------------------------------\n\nTITLE: Adding Composite Value via JSON Format with API - bash\nDESCRIPTION: Alternately inserts a composite column using JSON object notation (with explicit fields), leveraging PostgREST's support for mapping JSON objects to composite columns. Requires matching structure of composite type. Allows use of natural property names, providing flexibility for clients.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/products\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"id\": 2,\n    \"size\": {\n      \"length\": 0.7,\n      \"width\": 0.5,\n      \"height\": 1.8,\n      \"unit\": \"m\"\n    }\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Ordering Results by Computed Field with PostgREST\nDESCRIPTION: This example demonstrates how to use a curl command to order the results based on the 'full_name' computed field in descending order.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?order=full_name.desc\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Custom TWKB Format via Function Handler using Bash\nDESCRIPTION: Uses `curl` to send a GET request to the PostgREST RPC endpoint `/rpc/get_line` with `id=1`. The `Accept: application/vnd.twkb` header specifies the desired custom media type, triggering the `get_line` function handler. PostgREST automatically sets the `Content-Type` of the response to `application/vnd.twkb`, returning the binary TWKB data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/rpc/get_line?id=1' -i \\\n  -H \"Accept: application/vnd.twkb\"\n\nHTTP/1.1 200 OK\nContent-Type: application/vnd.twkb\n\n# binary output\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Function for Basic SOAP Endpoint\nDESCRIPTION: Creates a PostgreSQL function that serves as a basic SOAP endpoint, returning the request body inside a custom XML tag.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/create-soap-endpoint.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"text/xml\" as pg_catalog.xml;\n\nCREATE OR REPLACE FUNCTION my_soap_endpoint(xml) RETURNS \"text/xml\" AS $$\nDECLARE\n  nsarray CONSTANT text[][] := ARRAY[\n    ARRAY['soapenv', 'http://schemas.xmlsoap.org/soap/envelope/']\n  ];\nBEGIN\n  RETURN xmlelement(\n    NAME \"soapenv:Envelope\",\n    XMLATTRIBUTES('http://schemas.xmlsoap.org/soap/envelope/' AS \"xmlns:soapenv\"),\n    xmlelement(NAME \"soapenv:Header\"),\n    xmlelement(\n      NAME \"soapenv:Body\",\n      xmlelement(\n        NAME theRequestBodyWas,\n        (xpath('/soapenv:Envelope/soapenv:Body', $1, nsarray))[1]\n      )\n    )\n );\nEND;\n$$ LANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted User Role in PostgreSQL\nDESCRIPTION: SQL commands to create a 'todo_user' role with permissions to interact with the todo list API.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\ncreate role todo_user nologin;\ngrant todo_user to authenticator;\n\ngrant usage on schema api to todo_user;\ngrant all on api.todos to todo_user;\n```\n\n----------------------------------------\n\nTITLE: Insert Result with Database Defaults (PostgREST API, JSON)\nDESCRIPTION: Shows the JSON response body where missing 'baz' value receives the default (100) while provided values are used as-is. Demonstrates how Prefer: missing=default affects the insertion result. Input: JSON array. Output: assigned values for each row.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"id\":  1, \"bar\": \"val1\", \"baz\": 100 },\n  { \"id\":  2, \"bar\": \"val2\", \"baz\": 15 }\n]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL NOTIFY Commands for PostgREST Reloading\nDESCRIPTION: SQL commands to trigger schema cache and configuration reloads in PostgREST using NOTIFY.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/listener.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nNOTIFY pgrst, 'reload schema'; -- reload schema cache\nNOTIFY pgrst, 'reload config'; -- reload config\nNOTIFY pgrst;                  -- reload both\n```\n\n----------------------------------------\n\nTITLE: Casting Aggregate Result\nDESCRIPTION: Shows how to cast the result of an aggregate function to a different type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=amount.avg()::int\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"avg\": 201\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Idle Connection Lifetime (PostgREST)\nDESCRIPTION: Introduces the `db-pool-max-idletime` configuration option to limit the lifetime of idle PostgreSQL connections in the pool. The default value is 30 seconds. This option replaces the behavior of the `db-pool-timeout` option from PostgREST 10.0.0.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndb-pool-max-idletime\n```\n\n----------------------------------------\n\nTITLE: Defining RLS Policy for Chat Table Access in PostgreSQL\nDESCRIPTION: Creates a Row Level Security policy named `chat_policy` on the `chat` table. The `USING` clause permits visibility for rows where the current database user (`current_user`) is either the sender (`message_from`) or the recipient (`message_to`). The `WITH CHECK` clause ensures that inserts or updates enforce that the `message_from` column must equal `current_user`, preventing impersonation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE POLICY chat_policy ON chat\n  USING ((message_to = current_user) OR (message_from = current_user))\n  WITH CHECK (message_from = current_user)\n```\n\n----------------------------------------\n\nTITLE: Uploading Binary File via RPC - Bash\nDESCRIPTION: Sends binary file content directly to the 'upload_binary' function using curl, specifying the header Content-Type: application/octet-stream. Assumes the database and PostgREST setup supports binary uploads and the target endpoint is available. Input is raw file data, sent using the --data-binary curl option.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/upload_binary\" \\\n  -X POST -H \"Content-Type: application/octet-stream\" \\\n  --data-binary \"@file_name.ext\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostGIS and Sample Data in PostgreSQL\nDESCRIPTION: Initializes the PostGIS extension, creates a table named `lines` with an ID, name, and a PostGIS `geometry` column (specifically for LINESTRING), and inserts two sample line records. This setup provides data for subsequent media type handler examples.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\ncreate extension postgis;\n\ncreate table lines (\n  id   int primary key\n, name text\n, geom geometry(LINESTRING, 4326)\n);\n\ninsert into lines values (1, 'line-1', 'LINESTRING(1 1,5 5)'::geometry), (2, 'line-2', 'LINESTRING(2 2,6 6)'::geometry);\n```\n\n----------------------------------------\n\nTITLE: Modifying Function to Accept image/webp Media Type in PostgreSQL\nDESCRIPTION: This SQL snippet updates the file retrieval function to use the 'image/webp' media type, allowing browsers to display images directly.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"image/webp\" as bytea;\n\ncreate or replace function file(id int) returns \"image/webp\" as $$\n  select blob from files where id = file.id;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Specification Function in Bash\nDESCRIPTION: Sets the db-root-spec configuration parameter to specify a custom function for overriding the default OpenAPI response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndb-root-spec = \"root\"\n```\n\n----------------------------------------\n\nTITLE: Downloading File for Testing Binary Upload - bash\nDESCRIPTION: Shows a cURL command to download a PNG image, intended for later use with binary uploads to the API. Outputs a file named postgrest-logo.png and assumes network access to the source image. This illustrates end-to-end binary transfer from local to database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://postgrest.org/en/latest/_images/logo.png\" -o postgrest-logo.png\n```\n\n----------------------------------------\n\nTITLE: Creating Updated Index Function with HTMX in PostgreSQL\nDESCRIPTION: Updates the index function to include HTMX for AJAX requests and a form for adding new to-dos.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.index() returns \"text/html\" as $$\n  select $html$\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <title>PostgREST + HTMX To-Do List</title>\n      <!-- Pico CSS for CSS styling -->\n      <link href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@next/css/pico.min.css\" rel=\"stylesheet\"/>\n      <!-- htmx for AJAX requests -->\n      <script src=\"https://unpkg.com/htmx.org\"></script>\n    </head>\n    <body>\n      <main class=\"container\"\n            style=\"max-width: 600px\"\n            hx-headers='{\"Accept\": \"text/html\"}'>\n        <article>\n          <h5 style=\"text-align: center;\">\n            PostgREST + HTMX To-Do List\n          </h5>\n          <form hx-post=\"/rpc/add_todo\"\n                hx-target=\"#todo-list-area\"\n                hx-trigger=\"submit\"\n                hx-on=\"htmx:afterRequest: this.reset()\">\n            <input type=\"text\" name=\"_task\" placeholder=\"Add a todo...\">\n          </form>\n          <div id=\"todo-list-area\">\n            $html$\n              || api.html_all_todos() ||\n            $html$\n          <div>\n        </article>\n      </main>\n      <!-- Script for Ionicons icons -->\n      <script type=\"module\" src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js\"></script>\n      <script nomodule src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js\"></script>\n    </body>\n    </html>\n  $html$;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Secret Using Unix Tools\nDESCRIPTION: Bash commands to generate a random JWT secret and add it to the configuration file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport LC_CTYPE=C\n\necho \"jwt-secret = \\\"$(< /dev/urandom tr -dc A-Za-z0-9 | head -c32)\\\"\" >> tutorial.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Configuration Database Function (PostgREST)\nDESCRIPTION: Introduces the `db-pre-config` configuration option, which allows specifying a PostgreSQL function to be executed before the main PostgREST configuration is loaded. This enables using in-database configuration without requiring SUPERUSER privileges. It is empty by default.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndb-pre-config\n```\n\n----------------------------------------\n\nTITLE: Testing the XML \"Any\" Handler Aggregate in PSQL\nDESCRIPTION: Shows how to test the `lines_xml_agg` aggregate directly in `psql`. It applies the aggregate to the `\"lines.xml\"` view, encodes the resulting `bytea` data using 'escape' (suitable for text display), and casts it to `xml` to verify the structure.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_22\n\nLANGUAGE: psql\nCODE:\n```\nselect (encode(lines_xml_agg(x), 'escape'))::xml from \"lines.xml\" x;\n                                                              encode\n------------------------------------------------------------------------------------------------------------------------------\n <line id=\"1\" name=\"line-1\">0102000020E610000002000000000000000000F03F000000000000F03F00000000000014400000000000001440</line>+\n <line id=\"2\" name=\"line-2\">0102000020E6100000020000000000000000000040000000000000004000000000000018400000000000001840</line>+\n\n```\n\n----------------------------------------\n\nTITLE: HTTP Request to Non-existent Function\nDESCRIPTION: Example HTTP POST request to a function that doesn't exist in the schema cache, which will trigger a PostgREST-specific error.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /rpc/nonexistent_function HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Vertical Filtering on Computed Fields with PostgREST\nDESCRIPTION: This example demonstrates how to use a curl command to perform vertical filtering, including the 'full_name' computed field in the response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/computed_fields.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?select=full_name,job\"\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Schemas from a Configuration Table (PostgreSQL)\nDESCRIPTION: Defines a PostgreSQL function `postgrest.pre_config` for dynamic schema configuration with `in_db_config`. This function reads the comma-separated list of allowed schemas directly from the `schemas` column of the previously created `postgrest.config` table and uses it to set the `pgrst.db_schemas` parameter.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function postgrest.pre_config()\nreturns void as $$\n  select\n    set_config('pgrst.db_schemas', schemas, true)\n  from postgrest.config;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Dangerous Full Table DELETE Operation via PostgREST API\nDESCRIPTION: Example of a dangerous DELETE operation that could accidentally remove all records from a table due to missing query parameters.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/pg-safeupdate.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/logs\" -X DELETE\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Relationships for Recursive One-To-One in PostgreSQL\nDESCRIPTION: These PostgreSQL functions, `predecessor` and `successor`, define computed relationships for the `presidents` table. They allow querying the predecessor and successor of a president via PostgREST. `predecessor` finds the president whose `id` matches the input president's `predecessor_id`. `successor` finds the president whose `predecessor_id` matches the input president's `id`. `returns setof presidents rows 1` indicates a to-one relationship.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_14\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function predecessor(presidents) returns setof presidents rows 1 as $$\n  select * from presidents where id = $1.predecessor_id\n$$ stable language sql;\n\ncreate or replace function successor(presidents) returns setof presidents rows 1 as $$\n  select * from presidents where predecessor_id = $1.id\n$$ stable language sql;\n```\n\n----------------------------------------\n\nTITLE: Advanced Resource Embedding with Aliases\nDESCRIPTION: Shows how to use aliases with empty embeds for complex filtering while still retrieving full resource data\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d \"select=title,act:actors(),dir:directors(),actors(first_name),directors(first_name)\" \\\n    -d \"dir.first_name=eq.John\" \\\n    -d \"act.first_name=eq.John\" \\\n    -d \"or=(dir.not.is.null,act.not.is.null)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table for Storing Allowed Schemas (PostgreSQL)\nDESCRIPTION: Creates a PostgreSQL table named `postgrest.config` with a single text column `schemas`. This table is designed to hold a manually curated list of schema names (as a comma-separated string) for dynamic configuration when schemas don't follow a pattern or share a common owner.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table postgrest.config (schemas text);\n```\n\n----------------------------------------\n\nTITLE: 200 OK Response for Invalid Timezone (PostgREST API, HTTP)\nDESCRIPTION: Showcases HTTP response where an invalid timezone was provided, but PostgREST still responds 200 OK, falling back to the configured default timezone without an applied preference header. Input: HTTP headers. Output: default handling response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Using Default Values for Missing Columns on Bulk Insert (PostgREST API)\nDESCRIPTION: Explains the usage of the `Prefer: missing=default` HTTP request header. When included in a bulk INSERT request, any columns omitted from the payload for a given row will receive their defined database DEFAULT value.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPrefer: missing=default\n```\n\n----------------------------------------\n\nTITLE: Stripping Nulls via Accept Header with curl - PostgREST - Bash\nDESCRIPTION: Illustrates how to request that all JSON null values be omitted from the response objects using curl and Accept header 'application/vnd.pgrst.array+json;nulls=stripped'. Returns a collection where only defined key-value pairs are present. The /projects endpoint must be configured to support this vendor-type and parameter. Useful for reducing response payload size.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/projects?id=gt.10\" \\\n  -H \"Accept: application/vnd.pgrst.array+json;nulls=stripped\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Unicode Table Using Percent-Encoding - PostgREST - bash\nDESCRIPTION: Shows how to use curl to request a resource with a Unicode table name from a PostgREST endpoint. The Unicode characters are percent-encoded in the URL to ensure compatibility. Requires a running PostgREST instance and appropriate database table. Output is the HTTP response from the server.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/%D9%85%D9%88%D8%A7%D8%B1%D8%AF\"\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Example for Error Demonstration\nDESCRIPTION: A simple HTTP POST request to the /projects endpoint that will trigger a PostgreSQL error due to constraint violation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /projects HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining Overloaded Functions in PostgreSQL\nDESCRIPTION: Example of function overloading in PostgreSQL where the same function name accepts different numbers of parameters.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_31\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE FUNCTION rental_duration(customer_id integer) ..\n\nCREATE FUNCTION rental_duration(customer_id integer, from_date date) ..\n```\n\n----------------------------------------\n\nTITLE: Creating Tables for Orders and Addresses in PostgreSQL\nDESCRIPTION: SQL code to create tables for orders and addresses, demonstrating a scenario with multiple foreign keys between tables.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate table addresses (\n  id int primary key generated always as identity,\n  name text,\n  city text,\n```\n\n----------------------------------------\n\nTITLE: OPTIONS Response from PostgREST\nDESCRIPTION: Shows the HTTP response returned by PostgREST when an OPTIONS request is made to a table endpoint. The 'Allow' header lists all permitted HTTP methods for the resource.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/options.rst#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nAllow: OPTIONS,GET,HEAD,POST,PUT,PATCH,DELETE\n```\n\n----------------------------------------\n\nTITLE: Executing Conditional DELETE Operation via PostgREST API\nDESCRIPTION: Example of a safe DELETE operation that includes a WHERE condition through query parameters to delete logs before a specific date.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/pg-safeupdate.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/logs?time=lt.1991-08-06\" -X DELETE\n```\n\n----------------------------------------\n\nTITLE: 200 OK Response for Lenient Handling (PostgREST API, HTTP)\nDESCRIPTION: HTTP response headers returned by PostgREST when lenient handling is used with unrecognized preferences. Server returns 200 OK, ignoring invalid preferences. Input: HTTP headers. Output: success status.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aggregate for XML \"Any\" Handler in PostgreSQL\nDESCRIPTION: Defines the aggregate `lines_xml_agg` for the `\"lines.xml\"` view type. It uses the `lines_xml_trans` transition function, `lines_xml_final` final function, and sets the state type (`stype`) to `\"*/*\"`. This aggregate serves as the catch-all media type handler for the `\"lines.xml\"` view.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_21\n\nLANGUAGE: postgres\nCODE:\n```\n-- new aggregate\ncreate or replace aggregate lines_xml_agg (\"lines.xml\") (\n  stype = \"*/*\"\n, sfunc = lines_xml_trans\n, finalfunc = lines_xml_final\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive One-To-One Relationship in PostgreSQL\nDESCRIPTION: This SQL snippet defines a `presidents` table with a recursive one-to-one relationship. The `predecessor_id` column references the `id` of the same table and has a unique constraint, ensuring each president can have at most one predecessor and be the predecessor of at most one successor.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_13\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate table presidents (\n  id int primary key generated always as identity,\n  first_name text,\n  last_name text,\n  predecessor_id int references presidents(id) unique\n);\n```\n\n----------------------------------------\n\nTITLE: Escaping Double Quotes and Backslashes in Filter Values - PostgREST - bash\nDESCRIPTION: Demonstrates filtering using values that themselves contain double quotes or backslashes, which must be percent-encoded. The example uses 'Quote:\"' and 'Backslash:\\\\' as potential values for a 'marks' table. Ensures proper server-side parsing by encoding these characters as %5C (backslash) and %22 (double quote). Input is the curl request; output is the HTTP response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/url_grammar.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/marks?name=in.(%22Quote:%5C%22%22,%22Backslash:%5C%5C%22)\"\n```\n\n----------------------------------------\n\nTITLE: Paginated API Response With Reduced Range - HTTP\nDESCRIPTION: Illustrates a PostgREST HTTP response when the server returns fewer items than requested due to data constraints. The Content-Range indicates the actual returned range, useful for client-side logic. Standard HTTP semantics are used.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\\nRange-Unit: items\\nContent-Range: 0-17/*\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Enum Query - json\nDESCRIPTION: Shows a JSON array of products returned from a query filtering enum columns. Each object contains 'name' and 'size' fields, reflecting the API's typical response for such queries. Useful for illustrating human-readable results.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"t-shirt\",\n    \"size\": \"l\"\n  },\n  {\n    \"name\": \"hoodie\",\n    \"size\": \"xl\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending a Request with a Trace Header (Bash)\nDESCRIPTION: Uses cURL to send a GET request to `/users` on localhost port 3000, including the `X-Request-Id: 123` header. This demonstrates how to initiate tracing when `server-trace-header` is configured.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/users\" \\\n  -H \"X-Request-Id: 123\"\n```\n\n----------------------------------------\n\nTITLE: Default Timezone Values in JSON (PostgREST API, JSON)\nDESCRIPTION: Demonstrates the JSON response from the server when an invalid timezone is specified, outputting timestamps in the default server time zone. Dependencies: none. Input: JSON array. Output: timestamp objects.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"t\":\"2023-10-18T12:37:59.611+00:00\"},\n  {\"t\":\"2023-10-18T14:37:59.611+00:00\"},\n  {\"t\":\"2023-10-18T16:37:59.611+00:00\"}\n]\n```\n\n----------------------------------------\n\nTITLE: 201 Created with Location Header for Headers-Only Return (PostgREST API, HTTP)\nDESCRIPTION: Shows HTTP headers for successful resource creation when 'Prefer: return=headers-only' is used. Response includes 201 Created and Location header. Dependencies: server has PK and correct permissions. Input: HTTP response headers. Output: confirmation of resource and applied preference.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nLocation: /projects?id=eq.34\nPreference-Applied: return=headers-only\n```\n\n----------------------------------------\n\nTITLE: Granting Execute Privilege on All Functions in a Schema to a Role in PostgreSQL\nDESCRIPTION: Grants the `EXECUTE` privilege on all existing and future functions within the `api` schema to the `web_user` role. This provides a convenient way to manage permissions for roles needing broad access to functions within a specific schema.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_11\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA api TO web_user;\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL with Custom Init and Viewing Logs in Docker (Bash)\nDESCRIPTION: Commands to run a PostgreSQL Docker container, mounting the custom `init.sh` script to enable logging, and then tailing the logs of the running container using `docker logs -f`. Replace `<container-id>` with the actual ID of the started container.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"$(pwd)/init.sh\":\"/docker-entrypoint-initdb.d/init.sh\" -d postgres\ndocker logs -f <container-id>\n```\n\n----------------------------------------\n\nTITLE: Basic XML Request - PostgREST\nDESCRIPTION: Simple curl request to fetch XML data from PostgREST endpoint without specifying Accept header. Returns lines data in XML format.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines.xml' -i\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Many-To-Many Relationship in PostgreSQL\nDESCRIPTION: This SQL snippet defines two tables, `users` and `subscriptions`, to model a recursive many-to-many relationship (e.g., users following other users). The `subscriptions` table acts as a junction table, linking a `subscriber_id` to a `subscribed_id`, both referencing the `users` table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_24\n\nLANGUAGE: postgresql\nCODE:\n```\ncreate table users (\n  id int primary key generated always as identity,\n  first_name text,\n  last_name text,\n  username text unique\n);\n\ncreate table subscriptions (\n  subscriber_id int references users(id),\n  subscribed_id int references users(id),\n  type text,\n  primary key (subscriber_id, subscribed_id)\n);\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Requesting Binary File from PostgREST API\nDESCRIPTION: This bash command demonstrates how to request a binary file from the PostgREST API using curl, specifying the Accept header for octet-stream.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"localhost:3000/rpc/file?id=42\" -H \"Accept: application/octet-stream\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Data via API as image/png - bash\nDESCRIPTION: Demonstrates a GET request to retrieve an image by ID from the API, using the Accept: image/png header to specify the desired media type. The response returns binary image data. Requires prior creation/upload of image in database and API endpoint configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/get_image?id=1\" \\\n  -H \"Accept: image/png\"\n```\n\n----------------------------------------\n\nTITLE: Requesting with Server-Timing Header Enabled (Bash)\nDESCRIPTION: Uses cURL with the `-i` flag to show response headers for a GET request to `/users`. This request is made to a PostgREST instance where the `server-timing-enabled` configuration is set to true, expecting a `Server-Timing` header in the response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/users\" -i\n```\n\n----------------------------------------\n\nTITLE: Creating Variadic Array Function - Postgres - SQL\nDESCRIPTION: Defines a variadic version of 'plus_one' that accepts a variable-length list of integers as input and returns their values incremented by one as an array. Uses the variadic keyword and PostgreSQL 9.1+ features. Requires no dependencies.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_16\n\nLANGUAGE: postgres\nCODE:\n```\ncreate function plus_one(variadic v int[]) returns int[] as $$\n   SELECT array_agg(n + 1) FROM unnest($1) AS n;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Casting JSON Column Aggregate\nDESCRIPTION: Example of casting a JSON column value before aggregation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=order_details->tax_amount::numeric.sum()\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"sum\": 1234.56\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Domain Request Body Format Handler\nDESCRIPTION: Implements JSON to app_uuid conversion for handling request body data in the shortened format.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/domain_representations.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgres\nCODE:\n```\n-- the name of the function is arbitrary\nCREATE OR REPLACE FUNCTION app_uuid(json) RETURNS public.app_uuid AS $$\n  -- here we reuse the previous app_uuid(text) function\n  select app_uuid($1 #>> '{}');\n$$ LANGUAGE SQL IMMUTABLE;\n\nCREATE CAST (json AS public.app_uuid) WITH FUNCTION app_uuid(json) AS IMPLICIT;\n```\n\n----------------------------------------\n\nTITLE: Example HTTP HEAD Request to a PostgREST Endpoint\nDESCRIPTION: Shows a sample HTTP HEAD request targeting a PostgREST endpoint (`/table`). The `Prefer: count=exact` header is included. This type of request is often used to check resource existence or metadata without retrieving the full body, making it relevant for observing the `Proxy-Status` header in error responses.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHEAD /table HTTP/1.1\nPrefer: count=exact\n```\n\n----------------------------------------\n\nTITLE: Defining Transition Function for Custom CSV Aggregation in PostgreSQL\nDESCRIPTION: Creates a transition function `bom_csv_trans` for a custom CSV aggregate. It concatenates the `id`, `name`, and text representation of `geom` for each `lines` row into a CSV string, appending a newline. The return type is `\"text/csv\"`, linking it to the custom handler.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_12\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function bom_csv_trans (state text, next lines)\nreturns \"text/csv\" as $$\n  select state || next.id::text || ',' || next.name || ',' || next.geom::text || E'\\n';\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Specifying a Pre-Request Function in PostgREST Configuration (INI)\nDESCRIPTION: This snippet shows how to configure PostgREST to call a database function ('public.check_user') before processing a request by specifying the 'db-pre-request' parameter in an INI file. This enables execution of custom logic for each API call, such as enforcing additional access controls. The value should be the fully qualified name of a PostgreSQL function, and the configuration must be in a PostgREST-compatible INI file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n  db-pre-request = \"public.check_user\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Table-Valued Function with Embedded Joins using cURL\nDESCRIPTION: This bash snippet shows how to query the 'getallfilms' function with an embedded join to the directors table using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/rpc/getallfilms\" \\\n  -d \"select=title,directors(id,last_name)\" \\\n  -d \"title=like.*Workers*\"\n```\n\n----------------------------------------\n\nTITLE: API Response With Planned Count - HTTP\nDESCRIPTION: An example HTTP response from PostgREST using the planned count method. The Content-Range header reflects a value obtained from database statistics, which is fast but could lag the actual number of rows. Clients should treat this as an approximation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 206 Partial Content\\nContent-Range: 0-24/3572000\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Response Function in PostgreSQL\nDESCRIPTION: Defines a function that returns a basic HTML file with Pico CSS for styling and Ionicons for icons.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function api.index() returns \"text/html\" as $$\n  select $html$\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <title>PostgREST + HTMX To-Do List</title>\n      <!-- Pico CSS for CSS styling -->\n      <link href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@next/css/pico.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n      <main class=\"container\">\n        <article>\n          <h5 style=\"text-align: center;\">\n            PostgREST + HTMX To-Do List\n          </h5>\n        </article>\n      </main>\n      <!-- Script for Ionicons icons -->\n      <script type=\"module\" src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js\"></script>\n      <script nomodule src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js\"></script>\n    </body>\n    </html>\n  $html$;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Reloading PostgREST Configuration via Signal\nDESCRIPTION: Command to reload the PostgREST configuration by sending a SIGUSR2 signal to the server process without restarting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkillall -SIGUSR2 postgrest\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Aggregate to Override CSV Handler in PostgreSQL\nDESCRIPTION: Defines a user-defined aggregate `bom_csv_agg` for the `lines` table type. It uses the `bom_csv_trans` transition function, the `bom_csv_final` final function, and sets the state type (`stype`) to `\"text/csv\"`. This aggregate effectively overrides the built-in `text/csv` handler for the `lines` table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_14\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace aggregate bom_csv_agg (lines) (\n  initcond = ''\n, stype = \"text/csv\"\n, sfunc = bom_csv_trans\n, finalfunc = bom_csv_final\n);\n```\n\n----------------------------------------\n\nTITLE: 400 Bad Request for Exceeding max-affected Constraint (PostgREST API, HTTP and JSON)\nDESCRIPTION: Displays the server error response if the affect rows exceed the specified max-affected value under strict handling. Provides error details in JSON. Dependencies: None. Input: HTTP status and JSON. Output: error details for exceeding allowed affected rows.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"PGRST124\",\n    \"message\": \"Query result exceeds max-affected preference constraint\",\n    \"details\": \"The query affects 14 rows\",\n    \"hint\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST Load Tests with Nix\nDESCRIPTION: Commands to run load tests for PostgREST using Nix, including options for comparing against different branches and simulating latency.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Run the loadtests on the latest commit(HEAD)\n[nix-shell]$ postgrest-loadtest\n\n# You can loadtest comparing to a different branch\n[nix-shell]$ postgrest-loadtest-against master\n\n# You can simulate latency client/postgrest and postgrest/database\n[nix-shell]$ PGRST_DELAY=5ms PGDELAY=5ms postgrest-loadtest\n\n# You can build postgrest directly with cabal for faster iteration\n[nix-shell]$ PGRST_BUILD_CABAL=1 postgrest-loadtest\n\n# Produce a markdown report to be used on CI\n[nix-shell]$ postgrest-loadtest-report\n```\n\n----------------------------------------\n\nTITLE: Defining Basic JSON Media Type Domain in PostgreSQL\nDESCRIPTION: Creates a PostgreSQL domain named `\"application/json\"` based on the built-in `json` type. This associates the domain name, which conforms to RFC 6838 media type syntax, with a specific PostgreSQL data type, forming the basis for a media type handler.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE DOMAIN \"application/json\" AS json;\n```\n\n----------------------------------------\n\nTITLE: Dumping Loaded PostgREST Configuration - Bash\nDESCRIPTION: This command uses the '--dump-config' option to print the effective configuration values of a PostgREST server. It considers sources like the configuration file, environment variables, and in-database settings. The command is helpful for debugging and verifying config sources, and does not modify state. Requires PostgREST to be installed and accessible.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/cli.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest [--dump-config]\n```\n\n----------------------------------------\n\nTITLE: Querying a PostgreSQL Function via PostgREST HTTP API\nDESCRIPTION: This bash command demonstrates how to call a PostgreSQL function through a PostgREST endpoint. The function returns a GeoJSON FeatureCollection.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/rpc/coverage_geo_collection\"\n```\n\n----------------------------------------\n\nTITLE: Viewing the PostgREST Server-Timing Header (HTTP)\nDESCRIPTION: Example HTTP response headers including the `Server-Timing` header. This header provides performance metrics for different stages of the request processing cycle within PostgREST, such as JWT processing (`jwt`), URL parsing (`parse`), query planning (`plan`), database transaction execution (`transaction`), and response generation (`response`). Durations (`dur`) are in milliseconds.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_16\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\n\nServer-Timing: jwt;dur=14.9, parse;dur=71.1, plan;dur=109.0, transaction;dur=353.2, response;dur=4.4\n```\n\n----------------------------------------\n\nTITLE: Setting Up Minimal Roles for Anonymous Access in PostgreSQL (Postgres)\nDESCRIPTION: Creates two PostgreSQL roles, \\\"anon\\\" and \\\"authenticator\\\", configuring them for anonymous and authenticator usage in PostgREST scenarios. The \\\"authenticator\\\" role inherits from \\\"anon\\\". This is required to handle permission delegation for web API endpoints. Execute these as superuser or role-management privilege.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgres\nCODE:\n```\n  create role anon noinherit;\n  create role authenticator noinherit;\n  grant anon to authenticator;\n```\n\n----------------------------------------\n\nTITLE: JWT Secret File Reference\nDESCRIPTION: Configuration example showing how to reference a JWT public key file in PostgREST configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\njwt-secret = \"@rsa.jwk.pub\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Statement Logging (SQL)\nDESCRIPTION: Provides PostgreSQL configuration settings (`postgresql.conf`) to enable logging of all SQL statements executed by the database server. This helps in debugging and understanding the exact SQL generated by PostgREST. Settings include directing logs to stderr (`log_destination`), enabling the log collector (`logging_collector`), specifying the log directory (`log_directory`), setting a daily log filename pattern (`log_filename`), and logging all statement types (`log_statement = \"all\"`). Requires a database restart.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n# send logs where the collector can access them\nlog_destination = \"stderr\"\n\n# collect stderr output to log files\nlogging_collector = on\n\n# save logs in pg_log/ under the pg data directory\nlog_directory = \"pg_log\"\n\n# (optional) new log file per day\nlog_filename = \"postgresql-%Y-%m-%d.log\"\n\n# log every kind of SQL statement\nlog_statement = \"all\"\n```\n\n----------------------------------------\n\nTITLE: XML Request with Invalid Media Type\nDESCRIPTION: Curl request with an unsupported media type in Accept header. Returns 415 Unsupported Media Type error.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines.xml' -i \\\n    -H \"Accept: unknown/media\"\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST Utility Scripts in Nix Shell\nDESCRIPTION: Examples of using PostgREST utility scripts within the Nix shell, including one-off commands and installing utilities locally.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-shell --run postgrest-style\n\n# Note that you need to quote any arguments that you would like to pass to\n# the command to be run in nix-shell:\n$ nix-shell --run \"postgrest-foo --bar\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-env -f default.nix -iA devTools\n\n# `postgrest-style` can now be run directly:\n$ postgrest-style\n```\n\n----------------------------------------\n\nTITLE: Testing Basic SOAP Endpoint with cURL\nDESCRIPTION: Demonstrates how to test the basic SOAP endpoint using cURL, sending a sample SOAP request and receiving a response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/create-soap-endpoint.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/rpc/my_soap_endpoint \\\n    --header 'Content-Type: text/xml' \\\n    --header 'Accept: text/xml' \\\n    --data-binary @- <<XML\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soapenv:Header/>\n  <soapenv:Body>\n    <mySOAPContent>\n      My SOAP Content\n    </mySOAPContent>\n  </soapenv:Body>\n</soapenv:Envelope>\nXML\n```\n\n----------------------------------------\n\nTITLE: HTML Image Tag Using Improved PostgREST Endpoint\nDESCRIPTION: This HTML snippet demonstrates the usage of the improved PostgREST endpoint in an img tag's src attribute for displaying an image.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://localhost:3000/rpc/file?id=42\" alt=\"Cute Kittens\"/>\n```\n\n----------------------------------------\n\nTITLE: Result for JSON Parameter Function - JSON\nDESCRIPTION: Represents the expected single integer JSON response (8) from calling 'mult_them' using the provided inputs. Output format is a raw integer, corresponding to the multiplication of fields 'x' and 'y'. No parameters or configuration required in this snippet.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n8\n```\n\n----------------------------------------\n\nTITLE: API Response With Large Table Estimated/Planned Count - HTTP\nDESCRIPTION: Presents an HTTP response for a large table where the count value is an estimate (from database statistics) due to size exceeding the set threshold. The Content-Range header communicates the approximate total for efficient large-table paging.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/pagination_count.rst#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 206 Partial Content\\nContent-Range: 0-24/3572000\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST Trace Header (Bash)\nDESCRIPTION: Sets the PostgREST configuration option `server-trace-header` to `\"X-Request-Id\"`. This enables request tracing: if a request includes the specified header (`X-Request-Id`), PostgREST will include the same header with the same value in its response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nserver-trace-header = \"X-Request-Id\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Role in PostgREST (INI)\nDESCRIPTION: Specifies the \\\"db-anon-role\\\" in the PostgREST configuration file to define which PostgreSQL role should be used for anonymous requests. This simple key-value setting should be placed in PostgREST's .conf file. Prerequisites: a previously created \\\"anon\\\" role and write access to the configuration file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n  db-anon-role = \"anon\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PostgreSQL Logs in Docker (Bash)\nDESCRIPTION: A shell script (`init.sh`) intended to be used as a Docker entrypoint initialization script. It appends the `log_statement = 'all'` setting to the `postgresql.conf` file within the PostgreSQL container, enabling statement logging.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\necho \"log_statement = 'all'\" >> /var/lib/postgresql/data/postgresql.conf\n```\n\n----------------------------------------\n\nTITLE: 200 OK and Preference-Applied Header for Timezone (PostgREST API, HTTP)\nDESCRIPTION: HTTP response returned after setting the timezone preference successfully. Includes the 'Preference-Applied' header reflecting the applied timezone. Dependencies: none. Input: HTTP headers. Output: 200 OK and preference confirmation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nPreference-Applied: timezone=America/Los_Angeles\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal PostgREST Docker Image from Scratch\nDESCRIPTION: A Dockerfile example that demonstrates how to create a minimal Docker image for PostgREST using the 'scratch' base image. It includes only the static PostgREST binary which has no runtime dependencies, sets user permissions, and exposes port 3000.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/tools/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# `scratch` is a minimal, reserved image in Docker, see\n# https://docs.docker.com/develop/develop-images/baseimages/ . It essentially\n# means \"don't use a parent image and start with an empty one\".\nFROM scratch\n\n# The static PostgREST executable has no runtime dependencies, so it's all we\n# need to include for running the application.\nADD /absolute/path/to/postgrest /bin/postgrest\n\nEXPOSE 3000\n\n# This is the user id that Docker will run our image under by default. Note\n# that we don't actually add the user to `/etc/passwd` or `/etc/shadow`. This\n# means that tools like whoami would not work properly, but we don't include\n# those in the image anyway. Not adding the user has the benefit that the image\n# can be run under any user you specify.\nUSER 1000\n\nCMD [ \"/bin/postgrest\" ]\n```\n\n----------------------------------------\n\nTITLE: Managing PostgREST Documentation with Nix\nDESCRIPTION: Commands to build, serve, and check PostgREST documentation using Nix.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Build the docs\n[nix-shell]$ postgrest-docs-build\n\n# Build the docs and start a livereload server on `http://localhost:5500`\n[nix-shell]$ postgrest-docs-serve\n\n# Run aspell, to verify spelling mistakes\n[nix-shell]$ postgrest-docs-spellcheck\n\n# Detect obsolete entries in postgrest.dict\n[nix-shell]$ postgrest-docs-dictcheck\n\n# Build and run all the validation scripts\n[nix-shell]$ postgrest-docs-check\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Media Type for HTML in PostgreSQL\nDESCRIPTION: Creates a custom domain 'text/html' to allow PostgREST to identify and return raw HTML documents.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate domain \"text/html\" as text;\n```\n\n----------------------------------------\n\nTITLE: Querying Partitioned Table with Join using PostgREST and cURL\nDESCRIPTION: This cURL command queries the `box_office` partitioned table. It selects the date, revenue, and embeds the `title` from the related `films` table using the foreign key relationship. It also filters the results to include only records where `gross_revenue` is greater than or equal to 1,000,000.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# curl \"http://localhost:3000/box_office?select=bo_date,gross_revenue,films(title)&gross_revenue=gte.1000000\"\n\ncurl --get \"http://localhost:3000/box_office\" \\\n  -d \"select=bo_date,gross_revenue,films(title)\" \\\n  -d \"gross_revenue=gte.1000000\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Custom CSV Aggregate Handler in PSQL\nDESCRIPTION: Demonstrates testing the `bom_csv_agg` aggregate directly in `psql`. It shows the resulting CSV output, including the prepended BOM (which may render strangely depending on the terminal) and the header row.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_15\n\nLANGUAGE: psql\nCODE:\n```\nselect bom_csv_agg(l) from lines l;\n                                                 bom_csv_agg\n-----------------------------------------------------------------------------------------------------\n \\uFEFFid,name,geom                                                                                      +\n 1,line-1,0102000020E610000002000000000000000000F03F000000000000F03F00000000000014400000000000001440+\n 2,line-2,0102000020E6100000020000000000000000000040000000000000004000000000000018400000000000001840+\n\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions for To-Do App in PostgreSQL\nDESCRIPTION: Grants all permissions on the todos table to the web_anon user and grants usage and select permissions on the id sequence.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-html-content-using-htmx.rst#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on api.todos to web_anon;\ngrant usage, select on sequence api.todos_id_seq to web_anon;\n```\n\n----------------------------------------\n\nTITLE: Testing the TWKB Aggregate Handler in PSQL\nDESCRIPTION: Demonstrates how to use the `twkb_agg` aggregate directly within PostgreSQL using `psql`. It applies the aggregate to the `lines` table, showing the resulting concatenated binary TWKB output.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_7\n\nLANGUAGE: psql\nCODE:\n```\nSELECT twkb_agg(l) from lines l;\n\n                           twkb_agg\n---------------------------------------------------------------\n\\xa20002c09a0cc09a0c80ea3080ea30a2000280b51880b51880ea3080ea30\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help with PostgREST CLI - Bash\nDESCRIPTION: This snippet demonstrates how to invoke the help command for PostgREST using the '-h' or '--help' option. Running this command lists all available PostgREST CLI options and commands. No dependencies are required beyond PostgREST being installed and available in the system path. The output shows descriptions of flags and usage instructions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest [-h|--help]\n```\n\n----------------------------------------\n\nTITLE: Attempting to Access an Unconfigured Schema using curl (Bash)\nDESCRIPTION: Shows a curl command attempting to access the `/items` endpoint using the `Accept-Profile: tenant3` header. This request will fail if 'tenant3' is not listed in the `db-schemas` configuration, as shown in the subsequent error response snippet.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/items\" \\\n  -H \"Accept-Profile: tenant3\"\n```\n\n----------------------------------------\n\nTITLE: Generate JWT Key Pair\nDESCRIPTION: Bash commands to generate RSA public/private key pair for JWT authentication using the jose utility.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/auth.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njose jwk gen -i '{\"alg\": \"RS256\"}' -o rsa.jwk\njose jwk pub -i rsa.jwk -o rsa.jwk.pub\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST Tests with Nix\nDESCRIPTION: Commands to run various PostgREST tests using Nix, including options for different PostgreSQL versions and parallel testing.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run the tests against the most recent version of PostgreSQL:\n$ nix-shell --run postgrest-test-spec\n\n# Run the tests against all supported versions of PostgreSQL:\n$ nix-shell --run \"postgrest-with-all postgrest-test-spec\"\n\n# Run the tests against a specific version of PostgreSQL (use tab-completion in\n# nix-shell to see all available versions):\n$ nix-shell --run \"postgrest-with-postgresql-13 postgrest-test-spec\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Filter the tests to run by name, including all that contain 'config':\n[nix-shell]$ postgrest-test-io -k config\n\n# Run tests in parallel using xdist, specifying the number of processes:\n[nix-shell]$ postgrest-test-io -n auto\n[nix-shell]$ postgrest-test-io -n 8\n```\n\n----------------------------------------\n\nTITLE: Overriding Complete OpenAPI Response with a PostgreSQL Function\nDESCRIPTION: Creates a PostgreSQL function that returns a custom JSON object to completely override the default OpenAPI response generated by PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/openapi.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function root() returns json as $_$\ndeclare\nopenapi json = $$\n  {\n    \"swagger\": \"2.0\",\n    \"info\":{\n      \"title\":\"Overridden\",\n      \"description\":\"This is a my own API\"\n    }\n  }\n$$;\nbegin\n  return openapi;\nend\n$_$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Specifying Columns for Update/Insert (PostgREST API)\nDESCRIPTION: Mentions the `?columns` query parameter, used to specify which columns should be affected by an INSERT or UPDATE operation. A fix ensures a clear error is returned if an unknown column is specified via this parameter, without hitting the database.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: http\nCODE:\n```\n?columns\n```\n\n----------------------------------------\n\nTITLE: Requesting Overridden CSV Format via Aggregate Handler using Bash\nDESCRIPTION: Uses `curl` to request the `/lines` endpoint with `Accept: text/csv`. This triggers the custom `bom_csv_agg` handler instead of the built-in one. The response includes the `Content-Type: text/csv` header, the custom `Content-Disposition` header set by the final function, and the CSV data with the BOM and header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines' -i \\\n  -H \"Accept: text/csv\"\n\nHTTP/1.1 200 OK\nContent-Type: text/csv\nContent-Disposition: attachment; filename=\"lines.csv\"\n\n﻿id,name,geom\n1,line-1,0102000020E610000002000000000000000000F03F000000000000F03F00000000000014400000000000001440\n2,line-2,0102000020E6100000020000000000000000000040000000000000004000000000000018400000000000001840\n```\n\n----------------------------------------\n\nTITLE: 201 Created and Representation in Response (PostgREST API, HTTP and JSON)\nDESCRIPTION: Demonstrates the full HTTP response when the Prefer: return=representation header is used. The response confirms the preference applied and provides the created resource in JSON format. Input: HTTP headers and JSON body. Output: status and complete object.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nPreference-Applied: return=representation\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 33,\n        \"name\": \"x\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Todos with GET Request\nDESCRIPTION: cURL command to fetch all todo items from the API.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/todos\n```\n\n----------------------------------------\n\nTITLE: Defining Domain for Overriding text/csv Handler in PostgreSQL\nDESCRIPTION: Creates a PostgreSQL domain named `\"text/csv\"` based on the `text` type. This allows defining a custom handler that overrides PostgREST's built-in handler for the standard `text/csv` media type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_11\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"text/csv\" as text;\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Public Execute Privilege on New Functions in PostgreSQL\nDESCRIPTION: Reverses the effect of a previous `ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ... FROM PUBLIC`. Functions created *after* this command will again have `EXECUTE` granted to `PUBLIC` by default. This allows scoping the privilege revocation within a specific script.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\nALTER DEFAULT PRIVILEGES GRANT EXECUTE ON FUNCTIONS TO PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Call Counter Sequence Creation\nDESCRIPTION: Creates a sequence and view to demonstrate READ ONLY transaction restrictions in PostgreSQL.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE SEQUENCE callcounter_count START 1;\n\nCREATE VIEW callcounter AS\nSELECT nextval('callcounter_count');\n```\n\n----------------------------------------\n\nTITLE: 200 OK and Rollback Preferences Applied (PostgREST API, HTTP and JSON)\nDESCRIPTION: Shows server reply when a 'tx=rollback' preference is sent. The response includes the applied preferences and a JSON representation of the would-be created resource, though transaction is rolled back. Input: HTTP headers and JSON. Output: simulated creation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nPreference-Applied: tx=rollback, return=representation\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 35, \"name\": \"Project X\"}\n```\n\n----------------------------------------\n\nTITLE: Interacting with PostgREST REPL using GHCI Commands\nDESCRIPTION: Demonstrates starting the `postgrest-repl` and using GHCi commands within it to import `PostgREST.MediaType` and call `decodeMediaType` to parse a media type string. Assumes `postgrest-repl` is available in the environment.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest-repl\n\nghci> import PostgREST.<tab>\nPostgREST.Admin                        PostgREST.Config.Database              PostgREST.Plan.MutatePlan              PostgREST.Response.OpenAPI\nPostgREST.ApiRequest                   PostgREST.Config.JSPath                PostgREST.Plan.ReadPlan                PostgREST.SchemaCache\n...\n\nghci> import PostgREST.MediaType\nghci> decodeMediaType \"application/json\"\nMTApplicationJSON\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Relationship for Recursive Many-To-One in PostgreSQL\nDESCRIPTION: This PostgreSQL function, `supervisor`, defines a computed relationship for the `employees` table (same table as in the one-to-many example). It takes an employee record (`$1`) and returns the single employee (`setof employees rows 1`) whose `id` matches the input employee's `supervisor_id`. This allows querying the supervisor for a given employee via PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_21\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function supervisor(employees) returns setof employees rows 1 as $$\n  select * from employees where id = $1.supervisor_id\n$$ stable language sql;\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with DELETE in PostgREST\nDESCRIPTION: Shows how to delete rows from a table using the DELETE verb with a filter. This example deletes inactive users from the 'user' table.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/tables_views.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/user?active=is.false\" -X DELETE\n```\n\n----------------------------------------\n\nTITLE: Defining Transition Function for XML \"Any\" Handler in PostgreSQL\nDESCRIPTION: Creates a transition function `lines_xml_trans` for an XML aggregate. It takes the current state (typed as `\"*/*\"`) and the next row from the `\"lines.xml\"` view. It constructs an XML element `<line>` with attributes for id and name, includes the geometry, converts it to bytea, and appends it to the state. The return type `\"*/*\"` links it to the any handler.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_19\n\nLANGUAGE: postgres\nCODE:\n```\n-- transition function\ncreate or replace function lines_xml_trans (state \"*/*\", next \"lines.xml\")\nreturns \"*/*\" as $$\n  select state || xmlelement(name line, xmlattributes(next.id as id, next.name as name), next.geom)::text::bytea || E'\\n' ;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: 400 Bad Request for Strict Handling and Invalid Timezone (PostgREST API, HTTP)\nDESCRIPTION: Shows the HTTP 400 response when strict handling is enforced, and an invalid timezone preference is sent. No body shown. Input: HTTP headers. Output: HTTP error status.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST Unix Socket\nDESCRIPTION: Example showing how to configure a Unix domain socket path for the PostgREST web server. When specified, this takes precedence over the server port setting.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nserver-unix-socket = \"/tmp/pgrst.sock\"\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Development Shell for PostgREST\nDESCRIPTION: Command to enter a Nix shell with the development environment for PostgREST, including GHC and Cabal.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nix-shell\n```\n\n----------------------------------------\n\nTITLE: Applying Role-Specific Settings via ALTER ROLE (SQL)\nDESCRIPTION: Illustrates how database roles that are members of the main PostgREST connection role can have their specific settings applied. This example sets a 5-second statement timeout for the 'anon' role, which PostgREST will honor when operating as that role (e.g., via JWT).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER ROLE anon SET statement_timeout TO '5s'\n```\n\n----------------------------------------\n\nTITLE: Running Schema Dump Command with JQ Filter\nDESCRIPTION: Command to dump PostgREST schema and filter one-to-one relationships using jq, excluding specific fields from the output.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./postgrest --dump-schema  \\\n| jq  '[.dbRelationships | .[] | .[1] | .[] | select(.relCardinality.tag == \"O2O\" and .relFTableIsView == false and .relTableIsView == false) | del(.relFTableIsView,.relTableIsView,.tag,.relIsSelf)]'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Singular Request with No Rows - PostgREST - JSON\nDESCRIPTION: Displays the standard JSON error message returned by PostgREST if a singular resource format is requested but no entries match (typically /items?id=eq.nonexistent). Includes error code, message, and details in a structured object. Response status will be 406 Not Acceptable.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"PGRST116\",\n  \"message\": \"Cannot coerce the result to a single JSON object\",\n  \"details\": \"The result contains 0 rows\",\n  \"hint\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Schema Usage Permission to a Role in PostgreSQL\nDESCRIPTION: Grants the `USAGE` privilege on the `api` schema to the `webuser` role. This permission is essential for the role to be able to access or interact with any objects (tables, functions, views, etc.) contained within the specified schema.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\nGRANT USAGE ON SCHEMA api TO webuser;\n```\n\n----------------------------------------\n\nTITLE: XML Request with text/xml Accept Header\nDESCRIPTION: Curl request specifying text/xml Accept header. Successfully returns XML data with 200 OK response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines.xml' -i \\\n    -H \"Accept: text/xml\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Timezone Preference with curl (PostgREST API, Bash)\nDESCRIPTION: Shows curl command using a non-existent timezone in the Prefer header. Server should ignore bad timezones unless 'handling=strict' is also specified. Dependencies: curl, PostgREST. Input: bash command. Output: response in default server timezone.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/timestamps\" \\\n  -H \"Prefer: timezone=Jupiter/Red_Spot\"\n```\n\n----------------------------------------\n\nTITLE: Hash-Based Documentation Redirects - JavaScript\nDESCRIPTION: Implements a client-side JavaScript handler that checks the URL hash and, if it matches certain keys, automatically redirects the browser to another page or anchor within the documentation. There are no external dependencies. Key parameters: the 'hash' from the window's location object and the 'redirects' map. Input: the current URL's hash; Output: possible page reload/redirect on match. Limitation: Only pre-mapped hashes will redirect; others have no effect.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\\\"text/javascript\\\">\\n  let hash = window.location.hash;\\n\\n  const redirects = {\\n    '#health_check': 'health_check.html',\\n    '#server-version': '#server-version-header',\\n  };\\n\\n  let willRedirectTo = redirects[hash];\\n\\n  if (willRedirectTo) {\\n    window.location.href = willRedirectTo;\\n  }\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgREST SQL Query Logging (Bash)\nDESCRIPTION: Sets the PostgREST configuration to log the main SQL query executed for requests. 'log-level = \"warn\"' specifies that logs at 'warn' level or higher should be recorded. 'log-query = \"main-query\"' enables logging of the main SQL query, which will appear in the logs according to the 'log-level' setting (in this case, for HTTP status 400 and above).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlog-level = \"warn\"\nlog-query = \"main-query\"\n```\n\n----------------------------------------\n\nTITLE: Defining Final Function for XML \"Any\" Handler in PostgreSQL (PL/pgSQL)\nDESCRIPTION: Creates a PL/pgSQL final function `lines_xml_final` for the XML aggregate, returning `\"*/*\"`. It retrieves the `Accept` header from `request.headers`. Based on the header value (`*/*`, `application/xml`, `text/xml`), it sets the `Content-Type` response header appropriately using `set_config`. If the `Accept` header specifies an unsupported type, it raises a 'PT415' (Unsupported Media Type) error. This logic is necessary because the `*/*` handler would otherwise cause PostgREST to accept any media type.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_20\n\nLANGUAGE: postgres\nCODE:\n```\n-- final function\ncreate or replace function lines_xml_final (data \"*/*\")\nreturns \"*/*\" as $$\ndeclare\n  -- get the Accept header\n  req_accept text := current_setting('request.headers', true)::json->>'accept';\nbegin\n  -- when we need to override the default Content-Type (application/octet-stream) set by PostgREST\n  if req_accept = '*/*' then\n    perform set_config('response.headers', json_build_array(json_build_object('Content-Type', 'text/xml'))::text, true);\n  elsif req_accept IN ('application/xml', 'text/xml') then\n    perform set_config('response.headers', json_build_array(json_build_object('Content-Type', req_accept))::text, true);\n  else\n    -- we'll reject other non XML media types, we need to reject manually since */* will command PostgREST to accept all media types\n    raise sqlstate 'PT415' using message = 'Unsupported Media Type';\n  end if;\n\n  return data;\nend; $$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Fetching PostgREST Metrics (Bash)\nDESCRIPTION: Uses cURL to fetch metrics from the PostgREST admin server, which typically runs on a different port (e.g., 3001). The `/metrics` endpoint provides performance and status metrics.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3001/metrics\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard changelog format showing version number, date, and categorized changes under Added/Fixed/Changed sections\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.4.3.0] - 2017-09-06\n\n### Added\n\n- #567, Support more JWT signing algorithms, including RSA - @begriffs\n- #889, Allow more than two conditions in a single and/or - @steve-chavez\n```\n\n----------------------------------------\n\nTITLE: Filtering Top-level Resources Based on Embedded Resources\nDESCRIPTION: Example showing how to filter top-level resources based on conditions applied to embedded resources using the !inner syntax to create an inner join between the resources.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n/projects?select=*,clients!inner(*)&clients.id=eq.12\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring Schemas by Name Pattern (PostgreSQL)\nDESCRIPTION: Defines a PostgreSQL function `postgrest.pre_config` intended for use with PostgREST's `in_db_config` feature. This function dynamically sets the `pgrst.db_schemas` configuration parameter by querying the `pg_namespace` system catalog for all schemas whose names start with 'tenant_', aggregating them into a comma-separated string.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/schemas.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function postgrest.pre_config()\nreturns void as $$\n  select\n    set_config('pgrst.db_schemas', string_agg(nspname, ','), true)\n  from pg_namespace\n  where nspname like 'tenant_%';\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Embedded Foreign Key Join using cURL\nDESCRIPTION: This bash snippet demonstrates how to insert a new film and retrieve its data along with the associated director's information using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/films?select=title,year,director:directors(first_name,last_name)\" \\\n  -H \"Prefer: return=representation\" \\\n  -d @- << EOF\n  {\n    \"id\": 100,\n    \"director_id\": 40,\n    \"title\": \"127 hours\",\n    \"year\": 2010,\n    \"rating\": 7.6,\n    \"language\": \"english\"\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Function Call with Single JSON Parameter\nDESCRIPTION: Shows how to call a PostgreSQL function with a single JSON parameter through RPC POST without requiring the 'Prefer: params=single-object' header.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\n?col=in.(\"Double\\\"Quote\")\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST using Nix flake\nDESCRIPTION: Configuration snippet for installing PostgREST using Nix flake system.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs.postgrest.url = \"github:postgrest/postgrest\";\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing PostgREST Metrics Output (Prometheus Text)\nDESCRIPTION: Example output from the PostgREST `/metrics` endpoint, formatted according to the Prometheus text-based exposition format. Includes metrics like schema cache query time (`pgrst_schema_cache_query_time_seconds`) and total schema cache loads (`pgrst_schema_cache_loads_total`).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n# HELP pgrst_schema_cache_query_time_seconds The query time in seconds of the last schema cache load\n# TYPE pgrst_schema_cache_query_time_seconds gauge\npgrst_schema_cache_query_time_seconds 1.5937927e-2\n# HELP pgrst_schema_cache_loads_total The total number of times the schema cache was loaded\n# TYPE pgrst_schema_cache_loads_total counter\npgrst_schema_cache_loads_total 1.0\n...\n```\n\n----------------------------------------\n\nTITLE: Overriding a Haskell Package in Nix Overlays\nDESCRIPTION: Shows how to override the `hasql-pool` package definition within a Nix overlay (`haskell-packages.nix`). It uses `prev.callCabal2nixWithOptions` to build the package from the local source directory (`../../hasql-pool`) and disables checks using `lib.dontCheck`. This configuration pins the build to the local version of the library.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\n  overrides =\n    # ...\n    rec {\n\n      # Different subpath may be needed if the cabal file is not in the library's base directory\n      hasql-pool = lib.dontCheck\n        (prev.callCabal2nixWithOptions \"hasql-pool\" ../../hasql-pool \"--subpath=.\" {} );\n\n    };\n```\n\n----------------------------------------\n\nTITLE: Filtering Timestamptz Data by Local Timezone in PostgREST\nDESCRIPTION: This example demonstrates querying timestamptz data using a time value in a different timezone (Africa/Cairo). PostgreSQL automatically converts the timestamp for comparison.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/reports?due_date=eq.2022-02-24+02:10:15+Africa/Cairo\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Associations in PostgREST Query\nDESCRIPTION: Shows how to embed associations in a PostgREST query, allowing retrieval of related data in a single request.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_34\n\nLANGUAGE: http\nCODE:\n```\n/film?select=*,director(*)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for hstore Query - json\nDESCRIPTION: Displays a JSON array of query results, extracted from an hstore column. Returns the 'native' name of Egypt bundled in a key/value object.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n[{ \"native\": \"مصر\" }]\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Cast from Range to JSON\nDESCRIPTION: This SQL creates a cast that allows automatic conversion from tsrange to JSON format. The cast uses the previously defined function and is marked as assignment, meaning it applies when explicitly requested.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_35\n\nLANGUAGE: postgres\nCODE:\n```\ncreate cast (tsrange as json) with function tsrange_to_json(tsrange) as assignment;\n```\n\n----------------------------------------\n\nTITLE: Applying Embedded Filters on Foreign Key Joins using cURL\nDESCRIPTION: This bash snippet demonstrates how to apply filters on embedded resources, such as ordering actors within each film, using cURL and PostgREST.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n  -d \"select=*,actors(*)\" \\\n  -d \"actors.order=last_name,first_name\"\n```\n\n----------------------------------------\n\nTITLE: Sample PostgreSQL Query Plan Output - Postgres\nDESCRIPTION: Provides an example of a query plan showing aggregation and index scan on the projects table, resulting from an inlined function and filter. Useful for advanced users inspecting query performance.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_25\n\nLANGUAGE: postgres\nCODE:\n```\nAggregate  (cost=8.18..8.20 rows=1 width=112)\n  ->  Index Scan using projects_pkey on projects  (cost=0.15..8.17 rows=1 width=40)\n        Index Cond: (id = 1)\n```\n\n----------------------------------------\n\nTITLE: Strict Handling with Invalid Timezone Preference (PostgREST API, Bash)\nDESCRIPTION: Illustrates sending both 'handling=strict' and an invalid timezone using curl, triggering a strict error response from server. Ensures invalid timezones are only rejected with strict preference. Dependencies: curl, PostgREST. Input: bash command. Output: HTTP error response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/preferences.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i \"http://localhost:3000/timestamps\" \\\n  -H \"Prefer: handling=strict, timezone=Jupiter/Red_Spot\"\n```\n\n----------------------------------------\n\nTITLE: Managing PostgREST Service Lifecycle with systemctl - Bash\nDESCRIPTION: This snippet provides bash commands to enable and start the PostgREST systemd service. 'systemctl enable postgrest' configures the service to launch at boot, while 'systemctl start postgrest' brings up the service immediately. An example comment shows how to reload or restart the service when needed. These commands require sudo privileges and systemd support.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/systemd.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable postgrest\nsystemctl start postgrest\n\n## For reloading the service\n## systemctl restart postgrest\n```\n\n----------------------------------------\n\nTITLE: Requesting Resource with \"Any\" Handler without Accept Header using Bash\nDESCRIPTION: Uses `curl` to request the `/lines.xml` view endpoint *without* specifying an `Accept` header. Because the `lines_xml_agg` aggregate is defined with the `*/*` domain, it acts as the handler. The `lines_xml_final` function detects the absence of a specific XML type request (or presence of `*/*`) and sets the `Content-Type` to `text/xml`, returning the XML data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'localhost:3000/lines.xml' -i\n```\n\n----------------------------------------\n\nTITLE: Testing Pre-Request Header Setting with Curl in Bash\nDESCRIPTION: This `curl` command sends a GET request to the `/people` endpoint of a PostgREST instance running on localhost:3000. It uses the `-H` flag to set the 'User-Agent' header to simulate Internet Explorer 6.0. This is intended to trigger the `custom_headers` pre-request function (if configured) and demonstrate the conditional setting of cache headers.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/transactions.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people\" -i \\\n -H \"User-Agent: Mozilla/4.01 (compatible; MSIE 6.0; Windows NT 5.1)\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Local Package as an Extra Dependency in stack.yaml\nDESCRIPTION: Modifies the `stack.yaml` file to add the locally cloned `hasql-pool` library as an extra dependency. The `extra-deps:` list includes the path to the `.cabal` file of the local library, instructing Stack to use this version instead of one from a package index.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# stack.yaml\nextra-deps:\n  - ./hasql-pool/hasql-pool.cabal\n```\n\n----------------------------------------\n\nTITLE: Untyped Function JSON Response\nDESCRIPTION: Example JSON response from the untyped record function showing the structure of returned project data including id, name, and client_id fields.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/functions.rst#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\":1,\"name\":\"Windows 7\",\"client_id\":1},\n {\"id\":2,\"name\":\"Windows 10\",\"client_id\":1},\n {\"id\":3,\"name\":\"IOS\",\"client_id\":2}]\n```\n\n----------------------------------------\n\nTITLE: Cloning a Haskell Dependency Locally using Git\nDESCRIPTION: Clones a specific branch (0.10.1) of the `hasql-pool` library from GitHub using `git clone` and then removes the `.git` directory to prepare it for local modification and integration. Requires `git` to be installed.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --depth=1 --branch=0.10.1 https://github.com/nikita-volkov/hasql-pool.git\n$ rm -rf ./hasql-pool/.git\n```\n\n----------------------------------------\n\nTITLE: Enabling hstore Extension and Creating Table - postgres\nDESCRIPTION: Runs CREATE EXTENSION for hstore and sets up a 'countries' table with a unique hstore column 'name'. This enables rich key/value text storage for later API queries and inserts. Make sure the hstore extension is enabled before table creation.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_19\n\nLANGUAGE: postgres\nCODE:\n```\n-- Activate the hstore module in the current database\ncreate extension if not exists hstore;\n\ncreate table countries (\n  id int primary key,\n  name hstore unique\n);\n```\n\n----------------------------------------\n\nTITLE: Revoking Default Public Execute Privilege on New Functions in PostgreSQL\nDESCRIPTION: Modifies the default privileges in the current database to revoke the `EXECUTE` permission from the `PUBLIC` role for any functions created *after* this command is run. This enforces explicit `GRANT EXECUTE` statements for function access, enhancing security for API schemas.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_8\n\nLANGUAGE: postgres\nCODE:\n```\nALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;\n```\n\n----------------------------------------\n\nTITLE: Serving Translated PostgREST Documentation for German\nDESCRIPTION: This command starts a livereload server to display the translated PostgREST documentation in German. It uses the 'postgrest-docs-serve' tool with the language code 'de' as an argument.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npostgrest-docs-serve de\n```\n\n----------------------------------------\n\nTITLE: Querying and Filtering Enum Values by API - bash\nDESCRIPTION: Performs a GET request on the API, filtering by enum size (greater than 'm') and ordering results by size. The query string uses the 'gt.' syntax for greater-than, demonstrating PostgREST's support for enum ordering. Returns product objects with filtered enum values.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/products?select=name,size&size=gt.m&order=size\"\n```\n\n----------------------------------------\n\nTITLE: Updating All Todos with PATCH Request\nDESCRIPTION: cURL command to mark all todo items as done using an authenticated PATCH request.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/tutorials/tut1.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/todos -X PATCH \\\n     -H \"Authorization: Bearer $TOKEN\"    \\\n     -H \"Content-Type: application/json\"  \\\n     -d '{\"done\": true}'\n```\n\n----------------------------------------\n\nTITLE: Grouping by Embedded Resource\nDESCRIPTION: Demonstrates grouping aggregate results by an embedded resource's column.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/aggregate_functions.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/orders?select=amount.sum(),customers(name)\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"sum\": 100,\n    \"customers\": {\n      \"name\": \"Customer A\"\n    }\n  },\n  {\n    \"sum\": 200,\n    \"customers\": {\n      \"name\": \"Customer B\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating ER Diagram using erd Tool (Bash)\nDESCRIPTION: This Bash command generates a PNG Entity-Relationship Diagram (ERD) from a specified `.er` input file using the 'erd' tool (available from BurntSushi/erd on GitHub). The '-i' flag specifies the input ER definition file ('./er/film.er'), and the '-o' flag designates the output path and filename for the generated PNG image ('../_static/film.png'). GNU FreeFont family fonts are recommended for rendering.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/_diagrams/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./erd_static-x86-64 -i ./er/film.er -o ../_static/film.png\n```\n\n----------------------------------------\n\nTITLE: Defining Custom TWKB Media Type Domain in PostgreSQL\nDESCRIPTION: Creates a PostgreSQL domain named `\"application/vnd.twkb\"` based on the `bytea` type. This defines a custom vendor media type for Tiny Well-Known Binary (TWKB) format, associating it with binary data.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_2\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"application/vnd.twkb\" as bytea;\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Schema Cache Reload - PostgreSQL\nDESCRIPTION: Drops the previously created 'pgrst_watch' event trigger, thereby disabling automatic schema cache reloads. This operation is a single DDL command and is needed if automatic reloading is no longer desired. No parameters; requires that the trigger exists.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/schema_cache.rst#2025-04-23_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nDROP EVENT TRIGGER pgrst_watch\n```\n\n----------------------------------------\n\nTITLE: Querying REST API with curl Without Authorization - Bash\nDESCRIPTION: Uses curl to attempt to fetch all records from the 'foobar' table exposed by PostgREST on localhost without providing an authorization header. This demonstrates access denial when a request is made by the default 'anon' role, which has insufficient privileges. The expected output is a failed request due to lack of permissions.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management-using-postgres-users-and-passwords.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/foobar\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nixpkgs to Latest Main Branch in PostgREST\nDESCRIPTION: Detailed steps for upgrading the pinned version of Nixpkgs to the latest revision from the main branch. This process uses a utility script defined in the project.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/UPGRADE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# From the root of the repository, enter nix-shell\nnix-shell\n\n# Run the utility script to pin the latest revision in main\npostgrest-nixpkgs-upgrade\n\n# Exit the nix-shell with Ctrl-d\n\n```\n\n----------------------------------------\n\nTITLE: Installing PostgREST on Nix using nixpkgs\nDESCRIPTION: Command to install PostgREST using the nix-env package manager with nixpkgs.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/shared/installation.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix-env -i postgrest\n```\n\n----------------------------------------\n\nTITLE: Generating UML Diagrams (Light & Dark Mode) using PlantUML (Bash)\nDESCRIPTION: These Bash commands generate SVG Unified Modeling Language (UML) diagrams using the 'plantuml' tool (available from plantuml.com). The first command generates a standard light-theme SVG diagram from 'uml/arch.uml', saving it to '../../_static'. The second command generates a dark-mode SVG diagram using the '-darkmode' flag from 'uml/dark/arch-dark.uml' (which likely includes the base UML file), saving it to '../../../_static'. Both commands use the '-tsvg' flag to specify SVG as the output format.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/_diagrams/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nplantuml -tsvg uml/arch.uml -o ../../_static\nplantuml -tsvg -darkmode uml/dark/arch-dark.uml -o ../../../_static\n```\n\n----------------------------------------\n\nTITLE: PostgREST Connection String Configuration\nDESCRIPTION: Example of configuring PostgREST database connection string to handle read replicas with listener support.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/listener.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndb-uri = \"postgres://read_replica.host,primary.host/mydb?target_session_attrs=read-only\"\n```\n\n----------------------------------------\n\nTITLE: Installing pg-safeupdate Extension via PGXN\nDESCRIPTION: Commands for installing the pg-safeupdate extension using PGXN package manager and instructions for adding it to PostgreSQL configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/pg-safeupdate.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo -E pgxn install safeupdate\n\n# then add this to postgresql.conf:\n# shared_preload_libraries='safeupdate';\n```\n\n----------------------------------------\n\nTITLE: Deriving a Custom Docker Image from PostgREST Base Image\nDESCRIPTION: A Dockerfile example showing how to derive a non-minimal Docker image from the optimized PostgREST image. It uses Alpine Linux as a base image and copies the PostgREST binary from the minimal image, allowing for additional customizations.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/tools/docker/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# derive from any base image you want\nFROM alpine:latest\n\n# copy PostgREST over\nCOPY --from=postgrest/postgrest /bin/postgrest /bin\n\n# add your other stuff\n```\n\n----------------------------------------\n\nTITLE: Querying a Singular Resource via Query Parameters Using curl (bash)\nDESCRIPTION: Demonstrates how to query a single 'people' resource with id=1 via the PostgREST HTTP API using curl. It sets the Accept header to request a singular JSON object in the response. Dependencies: curl command line tool, running PostgREST server on localhost:3000. Input is a query with URL parameters, and output is a filtered JSON response. Constraints: assumes table 'people' exists and supports id=eq.1 filtering.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/nginx.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/people?id=eq.1\" \\\n  -H \"Accept: application/vnd.pgrst.object+json\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Transition Function for TWKB Aggregation in PostgreSQL\nDESCRIPTION: Creates a PostgreSQL transition function `twkb_handler_transition` used within a custom aggregate. It takes the current state (bytea) and the next row from the `lines` table, appends the TWKB representation of the `next.geom` to the state, and returns the updated state typed as the custom domain `\"application/vnd.twkb\"`.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_5\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function twkb_handler_transition (state bytea, next lines)\nreturns \"application/vnd.twkb\" as $$\n  select state || st_astwkb(next.geom);\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Ordering Parent Resource by Child Column (PostgREST API)\nDESCRIPTION: Demonstrates ordering a primary resource ('projects') based on a column ('name') within an embedded related resource ('clients') for many-to-one or one-to-one relationships. The example shows descending order with nulls first.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n/projects?select=*,clients(*)&order=clients(name).desc.nullsfirst\n```\n\n----------------------------------------\n\nTITLE: Handling Hash-Based Redirects in Documentation Navigation - JavaScript\nDESCRIPTION: This JavaScript snippet checks the current window.location.hash and uses a mapping object to redirect users to the appropriate documentation subpage. It is designed to run in the browser within the HTML documentation generated by Sphinx, greatly improving navigation by handling legacy or deep-link hash fragments and ensuring users land on the correct documentation anchor. No external dependencies are required; the code runs as a <script> block embedded in the generated HTML, and the primary input is the hash portion of the URL, triggering a location change if a redirect is found.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api.rst#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\\\"text/javascript\\\">\\n  let hash = window.location.hash;\\n\\n  const redirects = {\\n    // Tables and Views\\n    '#horizontal-filtering-rows': 'api/tables_views.html#horizontal-filtering',\\n    '#operators': 'api/tables_views.html#operators',\\n    '#logical-operators': 'api/tables_views.html#logical-operators',\\n    '#pattern-matching': 'api/tables_views.html#pattern-matching',\\n    '#full-text-search': 'api/tables_views.html#full-text-search',\\n    '#vertical-filtering-columns': 'api/tables_views.html#vertical-filtering',\\n    '#renaming-columns': 'api/tables_views.html#renaming-columns',\\n    '#casting-columns': 'api/tables_views.html#casting-columns',\\n    '#json-columns': 'api/tables_views.html#json-columns',\\n    '#composite-array-columns': 'api/tables_views.html#composite-array-columns',\\n    '#computed-virtual-columns': 'api/computed_fields.html',\\n    '#ordering': 'api/tables_views.html#ordering',\\n    '#limits-and-pagination': 'api/pagination_count.html',\\n    '#exact-count': 'api/pagination_count.html#exact-count',\\n    '#planned-count': 'api/pagination_count.html#planned-count',\\n    '#estimated-count': 'api/pagination_count.html#estimated-count',\\n    '#updates': 'api/tables_views.html#update',\\n    '#insertions': 'api/tables_views.html#insert',\\n    '#bulk-insert': 'api/tables_views.html#bulk-insert',\\n    '#specifying-columns': 'api/tables_views.html#specifying-columns',\\n    '#upsert': 'api/tables_views.html#upsert',\\n    '#on-conflict': 'api/tables_views.html#on-conflict',\\n    '#put': 'api/tables_views.html#put',\\n    '#deletions': 'api/tables_views.html#delete',\\n    '#limited-updates-deletions': 'api/tables_views.html#limited-update-delete',\\n    // Functions\\n    '#stored-procedures': 'api/functions.html',\\n    '#calling-functions-with-a-single-json-parameter': 'api/functions.html#functions-with-a-single-json-parameter',\\n    '#calling-functions-with-a-single-unnamed-parameter': 'api/functions.html#functions-with-a-single-unnamed-parameter',\\n    '#calling-functions-with-array-parameters': 'api/functions.html#functions-with-array-parameters',\\n    '#calling-variadic-functions': 'api/functions.html#variadic-functions',\\n    '#scalar-functions': 'api/functions.html#scalar-functions',\\n    '#function-filters': 'api/functions.html#table-valued-functions',\\n    '#overloaded-functions': 'api/functions.html#overloaded-functions',\\n    // Schemas\\n    '#switching-schemas': 'api/schemas.html',\\n    // Resource Embedding\\n    '#resource-embedding': 'api/resource_embedding.html#resource-embedding',\\n    '#many-to-one-relationships': 'api/resource_embedding.html#many-to-one-relationships',\\n    '#one-to-many-relationships': 'api/resource_embedding.html#one-to-many-relationships',\\n    '#many-to-many-relationships': 'api/resource_embedding.html#many-to-many-relationships',\\n    '#one-to-one-relationships': 'api/resource_embedding.html#one-to-one-relationships',\\n    '#computed-relationships': 'api/resource_embedding.html#computed-relationships',\\n    '#nested-embedding': 'api/resource_embedding.html#nested-embedding',\\n    '#embedded-filters': 'api/resource_embedding.html#embedded-filters',\\n    '#embedding-with-top-level-filtering': 'api/resource_embedding.html#top-level-filtering',\\n    '#embedding-partitioned-tables': 'api/resource_embedding.html#foreign-key-joins-on-partitioned-tables',\\n    '#embedding-views': 'api/resource_embedding.html#foreign-key-joins-on-views',\\n    '#embedding-chains-of-views': 'api/resource_embedding.html#foreign-key-joins-on-chains-of-views',\\n    '#embedding-on-stored-procedures': 'api/resource_embedding.html#foreign-key-joins-on-table-valued-functions',\\n    '#embedding-after-insertions-updates-deletions': 'api/resource_embedding.html#foreign-key-joins-on-writes',\\n    '#embedding-disambiguation': 'api/resource_embedding.html#foreign-key-joins-on-multiple-foreign-key-relationships',\\n    '#target-disambiguation': 'api/resource_embedding.html#foreign-key-joins-on-multiple-foreign-key-relationships',\\n    '#hint-disambiguation': 'api/resource_embedding.html#foreign-key-joins-on-multiple-foreign-key-relationships',\\n    \\\\\"#embedding-through-join-tables\\\\\": \\\\\\\"api/resource_embedding.html#many-to-many-relationships\\\\\",\\n    // OpenAPI\\n    '#openapi-support': 'api/openapi.html',\\n    // Resource Representation\\n    '#response-format': 'api/resource_representation.html#response-format',\\n    '#singular-or-plural': 'api/resource_representation.html#singular-or-plural',\\n    '#response-formats-for-scalar-responses': 'api/functions.html#scalar-functions',\\n    // CORS\\n    '#cors': 'api/cors.html',\\n    // OPTIONS\\n    '#options': 'api/options.html',\\n    // URL Grammar\\n    '#custom-queries': 'api/url_grammar.html#custom-queries',\\n    '#unicode-support': 'api/url_grammar.html#unicode-support',\\n    '#table-columns-with-spaces': 'api/url_grammar.html#table-columns-with-spaces',\\n    '#reserved-characters': 'api/url_grammar.html#reserved-characters',\\n    // Transactions\\n    '#immutable-and-stable-functions': 'transactions.html#access-mode',\\n    '#http-context': 'transactions.html#transaction-scoped-settings',\\n    '#accessing-request-headers-cookies-and-jwt-claims': 'transactions.html#request-headers-cookies-and-jwt-claims',\\n    '#legacy-guc-variable-names': 'transactions.html#transaction-scoped-settings',\\n    '#accessing-request-path-and-method': 'transactions.html#request-path-and-method',\\n    '#setting-response-headers': 'transactions.html#response-headers',\\n    '#setting-headers-via-pre-request': 'transactions.html#setting-headers-via-pre-request',\\n    '#setting-response-status-code': 'transactions.html#response-status-code',\\n    '#raise-errors-with-http-status-codes': 'errors.html#raise-errors-with-http-status-codes',\\n    // Admin\\n    '#execution-plan': 'observability.html#execution-plan',\\n    // Deprecated\\n    '#bulk-call': '../releases/v11.0.1.html#breaking-changes',\\n  };\\n\\n  let willRedirectTo = redirects[hash];\\n\\n  if (willRedirectTo) {\\n    window.location.href = willRedirectTo;\\n  }\\n</script>\\n\n```\n\n----------------------------------------\n\nTITLE: Running PostgREST Memory Tests with Nix\nDESCRIPTION: Commands to build dependencies and run memory tests for PostgREST using Nix.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Build the dependencies needed for the memory test\n$ nix-shell --arg memory true\n\n# Run the memory test\n[nix-shell]$ postgrest-test-memory\n```\n\n----------------------------------------\n\nTITLE: Setting up PostgREST Binary Cache with Cachix\nDESCRIPTION: Commands to install Cachix and set up the PostgREST binary cache for faster builds.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install cachix:\n$ nix-env -iA cachix -f https://cachix.org/api/v1/install\n\n# Set cachix up to use the PostgREST binary cache:\n$ cachix use postgrest\n```\n\n----------------------------------------\n\nTITLE: Legacy In-Database Configuration via Role\nDESCRIPTION: Deprecated method to configure PostgREST by setting parameters on the authenticator role. Requires SUPERUSER privileges.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nALTER ROLE authenticator SET pgrst.db_schemas = \"tenant1, tenant2, tenant3\"\nALTER ROLE authenticator IN DATABASE <your_database_name> SET pgrst.db_schemas = \"tenant4, tenant5\" -- database-specific setting, overrides the previous setting\n```\n\n----------------------------------------\n\nTITLE: Specifying Null Order in PostgREST Query\nDESCRIPTION: Demonstrates how to specify the order of null values in a PostgREST query result.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_39\n\nLANGUAGE: http\nCODE:\n```\n/people?order=age.desc.nullsfirst\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Aggregate for TWKB Output in PostgreSQL\nDESCRIPTION: Defines a PostgreSQL user-defined aggregate `twkb_agg` specifically for the `lines` table type. It uses the `twkb_handler_transition` function and specifies the state type (`stype`) as `\"application/vnd.twkb\"`. This aggregate acts as a media type handler for the `lines` table endpoint when `Accept: application/vnd.twkb` is requested.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace aggregate twkb_agg (lines) (\n  initcond = ''\n, stype = \"application/vnd.twkb\"\n, sfunc = twkb_handler_transition\n);\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Error Response with Proxy-Status Header\nDESCRIPTION: Displays an example HTTP 500 error response to a HEAD request. Crucially, it includes the `Proxy-Status` header, which provides the specific PostgreSQL error code (57014 - query_canceled) even though the HEAD response has no body. This aids debugging, especially when the HTTP status alone is insufficient.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/errors.rst#2025-04-23_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 500 Internal Server Error\nProxy-Status: PostgREST; error=57014\n```\n\n----------------------------------------\n\nTITLE: Checking for Wildcard Imports\nDESCRIPTION: Identifies any modules imported as wildcards (not qualified and without specifying symbols).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhsie check-wildcards main src\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Valued Function Returning Lines in PostgreSQL\nDESCRIPTION: Defines a simple SQL function `get_lines` that returns all rows from the `lines` table using `returns setof lines`. This function can be called via PostgREST's RPC mechanism.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/media_type_handlers.rst#2025-04-23_snippet_9\n\nLANGUAGE: postgres\nCODE:\n```\ncreate or replace function get_lines ()\nreturns setof lines as $$\n  select * from lines;\n$$ language sql;\n```\n\n----------------------------------------\n\nTITLE: Improved File Retrieval Function with Custom Headers in PostgreSQL\nDESCRIPTION: This PL/pgSQL function enhances file retrieval by setting appropriate headers for content type, filename, and caching, while also handling not found errors.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_6\n\nLANGUAGE: postgres\nCODE:\n```\ncreate domain \"*/*\" as bytea;\n\ncreate function file(id int) returns \"*/*\" as\n$$\n  declare headers text;\n  declare blob bytea;\n  begin\n    select format(\n      '[{\"Content-Type\": \"%s\"},'\n       '{\"Content-Disposition\": \"inline; filename=\\\"%s\\\"\"},'\n       '{\"Cache-Control\": \"max-age=259200\"}]'\n      , files.type, files.name)\n    from files where files.id = file.id into headers;\n    perform set_config('response.headers', headers, true);\n    select files.blob from files where files.id = file.id into blob;\n    if FOUND -- special var, see https://www.postgresql.org/docs/current/plpgsql-statements.html#PLPGSQL-STATEMENTS-DIAGNOSTICS\n    then return(blob);\n    else raise sqlstate 'PT404' using\n      message = 'NOT FOUND',\n      detail = 'File not found',\n      hint = format('%s seems to be an invalid file id', file.id);\n    end if;\n  end\n$$ language plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Defining a Rate Limiting Zone with Nginx (nginx)\nDESCRIPTION: Creates an Nginx shared memory rate limiting zone named 'login', limiting requests based on IP address to 1 request per second. This is a prerequisite for applying fine-grained route-based rate limiting and helps prevent abuse of login endpoints. Requires Nginx to be compiled with the ngx_http_limit_req_module. No direct inputs or outputs, but this config affects subsequent location blocks using limit_req.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/nginx.rst#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlimit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;\n```\n\n----------------------------------------\n\nTITLE: Storing JWT Secrets at the Database Level in PostgreSQL\nDESCRIPTION: Shows how to set a custom configuration parameter (\\\"app.jwt_secret\\\") at the database level and retrieve it dynamically for use in functions like JWT signing. This replaces hardcoded secrets with a setting, improving security and maintainability. Requires superuser privileges to set database parameters and use current_setting().\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/sql-user-management.rst#2025-04-23_snippet_7\n\nLANGUAGE: postgres\nCODE:\n```\n    -- run this once\n    ALTER DATABASE mydb SET \"app.jwt_secret\" TO 'reallyreallyreallyreallyverysafe';\n\n    -- then all functions can refer to app.jwt_secret\n    SELECT sign(\n      row_to_json(r), current_setting('app.jwt_secret')\n    ) AS token\n    FROM ...\n```\n\n----------------------------------------\n\nTITLE: Creating the PostgREST System User - INI/Bash\nDESCRIPTION: This snippet demonstrates the command to create a dedicated system user for running PostgREST as a service. Using 'sudo useradd', it creates the 'postgrest' user with no home directory and assigns '/usr/sbin/nologin' as the shell for security. This step should be run in the terminal with appropriate privileges prior to launching the service. It is essential for assigning secure system-level isolation to the service process.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/integrations/systemd.rst#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsudo useradd -M -U -d /nonexistent -s /usr/sbin/nologin postgrest\n```\n\n----------------------------------------\n\nTITLE: Applying RLS to Views via Ownership Change in PostgreSQL (< 15)\nDESCRIPTION: Provides a workaround for enforcing Row Level Security (RLS) through views in PostgreSQL versions prior to 15. It creates a dedicated role `api_views_owner` that is explicitly non-superuser and lacks the `BYPASSRLS` privilege. The ownership of the `sample_view` is then transferred to this role, ensuring that RLS policies are applied when the view is queried.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/explanations/db_authz.rst#2025-04-23_snippet_14\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE ROLE api_views_owner NOSUPERUSER NOBYPASSRLS;\nALTER VIEW sample_view OWNER TO api_views_owner;\n```\n\n----------------------------------------\n\nTITLE: Receiving HTTP 300 Multiple Choices for Ambiguous Join\nDESCRIPTION: This snippet shows the HTTP status line returned by PostgREST when an ambiguous join is requested. The `300 Multiple Choices` status code indicates that the server cannot fulfill the request due to ambiguity in the specified relationship.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 300 Multiple Choices\n```\n\n----------------------------------------\n\nTITLE: Using any/all Modifiers with Operators (PostgREST API)\nDESCRIPTION: Shows how to use `any` or `all` modifiers with various comparison operators (`eq`, `like`, `ilike`, `gt`, `gte`, `lt`, `lte`, `match`, `imatch`). The example filters 'tbl' where 'id' equals any value in the set {1, 2, 3}. This converts the input into an array type for the underlying SQL query.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: http\nCODE:\n```\n/tbl?id=eq(any).{1,2,3}\n```\n\n----------------------------------------\n\nTITLE: Filtering with is.null in PostgREST\nDESCRIPTION: Shows how to use is.null and not.is.null filters with embedded resources to perform anti-joins on films database\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_embedding.rst#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl --get \"http://localhost:3000/films\" \\\n    -d \"select=title,nominations()\" \\\n    -d \"nominations=is.null\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgREST Server Host\nDESCRIPTION: Configuration example showing how to set the server host address in PostgREST configuration file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nserver-host = \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Unix Socket Permissions\nDESCRIPTION: Configuration example for setting Unix file mode permissions on the socket file. Must be a valid octal between 600 and 777.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/configuration.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nserver-unix-socket-mode = \"660\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for PostgREST Documentation\nDESCRIPTION: This code snippet specifies the exact versions of Python packages required for building the PostgREST documentation. It includes Sphinx, the main documentation generator, along with various extensions for features like copy buttons, dark mode, and OpenGraph metadata.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# This file is auto-generated by postgrest-nixpkgs-upgrade\nsphinx==7.4.7\nsphinx-copybutton==0.5.2\nsphinx-rtd-dark-mode==1.3.0\nsphinx-rtd-theme==2.0.0\nsphinx-tabs==3.4.7\nsphinxext-opengraph==0.9.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Example PostgREST Configurations - Bash\nDESCRIPTION: This command shows example configuration options for PostgREST using the '-e' or '--example' flag. It is useful for understanding default configuration structures when setting up a new instance. Requires only the PostgREST executable; no other files or arguments are necessary. The output serves as a reference template for configuration.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/cli.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ postgrest [-e|--example]\n```\n\n----------------------------------------\n\nTITLE: Finding PostgreSQL Data Directory (SQL)\nDESCRIPTION: SQL command to be executed within PostgreSQL to display the location of the server's data directory, which contains the `postgresql.conf` file.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/observability.rst#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nshow data_directory;\n```\n\n----------------------------------------\n\nTITLE: Inserting Range Data via PostgREST API\nDESCRIPTION: This command shows how to insert a record with a tsrange value through the PostgREST API. The range is specified as a string representation in PostgreSQL's bracket notation for ranges.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/events\" \\\n  -X POST -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n  {\n    \"id\": 1,\n    \"name\": \"New Year's Party\",\n    \"duration\": \"['2022-12-31 11:00','2023-01-01 06:00']\"\n  }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Building and Loading PostgREST Docker Image with Nix\nDESCRIPTION: A bash command sequence for building the PostgREST Docker image with Nix and loading it into a local Docker instance. It first builds the 'docker' attribute from 'default.nix', then runs the loading script that loads the image using 'docker load'.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/tools/docker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Running from the root directory of the repository:\n\n# Build the `docker` attribute from `default.nix`, the result will be symlinked\n# to `result`:\nnix-build -A docker\n\n# Run the loading script:\nresult/bin/postgrest-docker-load\n```\n\n----------------------------------------\n\nTITLE: Range Header Handling Change (PostgREST API)\nDESCRIPTION: States that the `Range` HTTP header is now only considered for GET requests to specify byte ranges. It is ignored for other HTTP methods like PATCH, DELETE, and PUT. Use `limit`/`offset` query parameters for sub-range operations on these methods.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nRange\n```\n\n----------------------------------------\n\nTITLE: Spreading Embedded Resource Properties (PostgREST API)\nDESCRIPTION: Shows how to unnest or 'spread' specific columns from an embedded resource ('clients') into the parent resource's ('projects') JSON object using the '...' syntax. This example maps the child's 'name' column to a 'client_name' key in the parent.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\n/projects?select=*,...clients(client_name:name)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Range in PostgREST\nDESCRIPTION: This example demonstrates how to filter records by a range column using PostgREST's query parameter syntax. The 'cs' operator tests if the range contains a specified value or range.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/working-with-postgresql-data-types.rst#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:3000/events?duration=cs.\\[2023-01-01,2023-01-01\\]\"\n```\n\n----------------------------------------\n\nTITLE: HTML Image Tag Using PostgREST Endpoint\nDESCRIPTION: This HTML snippet shows how to use the PostgREST endpoint in an img tag's src attribute to display an image.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"http://localhost:3000/file?id=42\" alt=\"Cute Kittens\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Table for File Storage in PostgreSQL\nDESCRIPTION: This SQL snippet creates a table named 'files' to store binary data (images) with an integer primary key and a bytea column for the binary content.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/providing-images-for-img.rst#2025-04-23_snippet_0\n\nLANGUAGE: postgres\nCODE:\n```\ncreate table files(\n  id   int primary key\n, blob bytea\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Advanced SOAP Endpoint with Error Case\nDESCRIPTION: Demonstrates how to test the advanced SOAP endpoint using cURL, sending a request with invalid input to trigger an error response.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/how-tos/create-soap-endpoint.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:3000/rpc/fraction_to_decimal \\\n  --header 'Content-Type: text/xml' \\\n  --header 'Accept: text/xml' \\\n  --data-binary @- <<XML\n<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soapenv:Header/>\n  <soapenv:Body>\n    <fraction>\n      <numerator>42</numerator>\n      <denominator>0</denominator>\n    </fraction>\n  </soapenv:Body>\n</soapenv:Envelope>\nXML\n```\n\n----------------------------------------\n\nTITLE: Filtering with Non-Null Embedded Resource (PostgREST API)\nDESCRIPTION: Illustrates filtering the primary resource ('projects') to include only those that have a related 'clients' resource (join). This uses the `not.is.null` filter on the embedded resource, offering an alternative to `!inner` joins.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\n/projects?select=*,clients(*)&clients=not.is.null\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Response Format for Custom Domain\nDESCRIPTION: Creates a function to convert app_uuid to JSON format using base64 encoding and establishes an implicit cast.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/domain_representations.rst#2025-04-23_snippet_1\n\nLANGUAGE: postgres\nCODE:\n```\n-- the name of the function is arbitrary\nCREATE OR REPLACE FUNCTION json(app_uuid) RETURNS json AS $$\n  select to_json(encode(uuid_send($1),'base64'));\n$$ LANGUAGE SQL IMMUTABLE;\n\n-- check it works\nselect json('846c4ffd-92ce-4de7-8d11-8e29929f4ec4'::app_uuid);\n\nCREATE CAST (app_uuid AS json) WITH FUNCTION json(app_uuid) AS IMPLICIT;\n```\n\n----------------------------------------\n\nTITLE: Alias for Deprecated Connection Pool Timeout Config (PostgREST)\nDESCRIPTION: Provides a configuration alias `db-pool-timeout` for backward compatibility. This alias maps to the `db-pool-max-idletime` option introduced to manage idle connection lifetime, replacing the original `db-pool-timeout` from PostgREST 10.0.0.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndb-pool-timeout\n```\n\n----------------------------------------\n\nTITLE: Terminating PostgreSQL Backend Connections (SQL)\nDESCRIPTION: Refers to the PostgreSQL function `pg_terminate_backend`. In the context of PostgREST v11.0.2, when `db-channel-enabled` is false, automatic connection recovery is initiated on a new request if pool connections were terminated using this function, mitigating issues with schema cache reloading on read replicas.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\npg_terminate_backend\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Trace Header (PostgREST)\nDESCRIPTION: Introduces the `server-trace-header` configuration option. When a client sends an HTTP request including the header specified by this option, PostgREST will include the same header and its value in the response, aiding in request tracing.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nserver-trace-header\n```\n\n----------------------------------------\n\nTITLE: Updating Pinned Nixpkgs Version in PostgREST\nDESCRIPTION: Basic commands to update the pinned version of Nixpkgs and verify the build. This is the simplified approach for regular dependency updates.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/UPGRADE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Update pinned version of Nixpkgs\nnix-shell --run postgrest-nixpkgs-upgrade\n\n# Verify that everything builds\nnix-build\n```\n\n----------------------------------------\n\nTITLE: Building PostgREST Documentation for German Language\nDESCRIPTION: This command generates .po files for translating PostgREST documentation into German. It uses the 'postgrest-docs-build' tool with the language code 'de' as an argument.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgrest-docs-build de\n```\n\n----------------------------------------\n\nTITLE: Using Limit/Offset Query Parameters (PostgREST API)\nDESCRIPTION: Refers to the `limit` and `offset` query parameters as the standard way to request sub-ranges or paginated results, especially for non-GET requests where the `Range` header is ignored.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nlimit/offset\n```\n\n----------------------------------------\n\nTITLE: Checking Wildcard Imports with Exceptions\nDESCRIPTION: Checks for wildcard imports while allowing exceptions for specified modules using the --ok flag.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhsie check-wildcards main src --ok Protolude --ok Test.Module\n```\n\n----------------------------------------\n\nTITLE: Removed Connection Pool Timeout Config (PostgREST)\nDESCRIPTION: States that the `db-pool-timeout` configuration option was removed because the underlying `hasql-pool` library removed it. This option previously controlled idle connection timeout, which is now handled by `db-pool-max-idletime` (added later in v11.0.2).\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ndb-pool-timeout\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Secret in PostgREST Config\nDESCRIPTION: Example of setting a JWT secret in the PostgREST configuration file using an environment variable. This allows passing secret keys to the database session.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_31\n\nLANGUAGE: Configuration\nCODE:\n```\napp.settings.jwt_secret = \"$(MYAPP_JWT_SECRET)\"\n```\n\n----------------------------------------\n\nTITLE: Health Check Endpoint Examples\nDESCRIPTION: HTTP endpoint examples for checking PostgREST service health and readiness status.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_25\n\nLANGUAGE: http\nCODE:\n```\n<host>:<admin_server_port>/live\n<host>:<admin_server_port>/ready\n```\n\n----------------------------------------\n\nTITLE: Escaping Characters in Filter Queries\nDESCRIPTION: Demonstrates how to escape special characters like double quotes and backslashes in PostgREST filter queries using the 'in' operator.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\n?col=in.(\"Double\\\"Quote\")\n```\n\nLANGUAGE: sql\nCODE:\n```\n?col=in.(\"Back\\\\slash\")\n```\n\n----------------------------------------\n\nTITLE: Renaming Foreign Key Constraint in SQL\nDESCRIPTION: SQL command to rename a foreign key constraint to enable a previously valid embedding query to work in the new version. This addresses a breaking change in resource embedding syntax.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_30\n\nLANGUAGE: SQL\nCODE:\n```\nalter table projects rename constraint projects_client_id_fkey to client\n```\n\n----------------------------------------\n\nTITLE: Filtering Null Values in PostgREST Query\nDESCRIPTION: Shows how to filter for null or non-null values in a PostgREST query.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/CHANGELOG.md#2025-04-23_snippet_40\n\nLANGUAGE: http\nCODE:\n```\n?col=is.null\n```\n\nLANGUAGE: http\nCODE:\n```\n?col=isnot.null\n```\n\n----------------------------------------\n\nTITLE: Dumping Haskell Imports to CSV\nDESCRIPTION: Parses Haskell modules in specified directories and dumps all imports to a CSV file printed to stdout.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhsie dump-imports src main\n```\n\n----------------------------------------\n\nTITLE: Dumping Haskell Imports to JSON\nDESCRIPTION: Dumps all imports from Haskell modules to JSON format for further processing with tools like jq.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhsie dump-imports --json src main\n```\n\n----------------------------------------\n\nTITLE: Generating Module Dependency Graph with Graphviz\nDESCRIPTION: Creates a visualization of module dependencies using graphviz and converts it to PNG format.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/nix/hsie/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhsie graph-modules src main | dot -Tpng -o modules.png\n```\n\n----------------------------------------\n\nTITLE: Singular Result - JSON Object Response - PostgREST - JSON\nDESCRIPTION: Shows the JSON response when a singular form is requested (via the appropriate Accept header) and exactly one record is found. The result is a plain object rather than an array. No dependencies or parameters; only returned if one row matches.\nSOURCE: https://github.com/postgrest/postgrest/blob/main/docs/references/api/resource_representation.rst#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"id\": 1 }\n```"
  }
]